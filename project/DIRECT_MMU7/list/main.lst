# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  build 20230809
   8  0000              //
   9  0000              //  Direct-Threaded version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2023
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     0
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  68  0000 ~            ORIGIN          equ     39844 - $80               // for binary comparison with single compilation
  69  0000 ~            Heap_Ptr        defl    -6                      // HP before compilation
  70  0000 ~            Heap_offset     defl     $2000
  71  0000 ~
  72  0000                              endif
  73  0000              //  ______________________________________________________________________
  74  0000
  75  0000                              if (  0 == DEBUGGING )
  76  0000              ORIGIN          equ     $6366                   // binary and Tape
  77  0000              // ORIGIN          equ     $9A93                // binary and Tape
  78  0000              Heap_Ptr        defl    $0002
  79  0000              Heap_offset     defl     0
  80  0000
  81  0000                              endif
  82  0000              //  ______________________________________________________________________
  83  0000
  84  0000                              if (  1 == DEBUGGING )
  85  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  86  0000 ~            Heap_Ptr        defl    $0002
  87  0000 ~            Heap_offset     defl     0
  88  0000 ~
  89  0000                              endif
  90  0000              //  ______________________________________________________________________
  91  0000
  92  0000                              DEVICE  ZXSPECTRUMNEXT
  93  0000
  94  0000                              ORG     ORIGIN
  95  6366
  96  6366                              if ( -1 == DEBUGGING )
  97  6366 ~                            ds 128                            // for binary comparison
  98  6366                              endif
  99  6366
 100  6366              //  ______________________________________________________________________
 101  6366              //
 102  6366              //  Naming convention for Label vs Forth correspondance
 103  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 104  6366              //    - Leading "0" is converted into "Z_"
 105  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
 106  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 107  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 108  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 109  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 110  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 111  6366              //    - Equal sign "=" is converted in EQUAL
 112  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 113  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 114  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 115  6366              //    - Exclamation mark "!" is converted in STORE
 116  6366              //    - At-Sign "@" is converted in FETCH
 117  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 118  6366
 119  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              Dict_Ptr        defl    0
  94+ 6366              // Heap_Ptr        defl    $0002
  95+ 6366              Prev_Ptr        defl    0
  96+ 6366              mirror_Ptr      defl    0
  97+ 6366
  98+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  99+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
 100+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 101+ 6366
 102+ 6366              //  ______________________________________________________________________
 103+ 6366              //
 104+ 6366              //  Create a new "low-level" definition
 105+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 106+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 107+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 108+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 109+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 110+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 111+ 6366              //  This macro acts much like the standard Forth definition CREATE
 112+ 6366
 113+ 6366              New_Def         macro   label, namec, runcode, bits
 114+ 6366 ~
 115+ 6366 ~            Dict_Ptr        defl    $
 116+ 6366 ~
 117+ 6366 ~            //              ______________________________________________________________________
 118+ 6366 ~            //              Heap part
 119+ 6366 ~
 120+ 6366 ~
 121+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 122+ 6366 ~
 123+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6366 ~            Latest_Definition defl  Heap_Ptr
 125+ 6366 ~
 126+ 6366 ~                            // dummy db directives used to calculate length of namec
 127+ 6366 ~                            db      namec
 128+ 6366 ~            len_NFA         defl    $ - temp_NFA
 129+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 130+ 6366 ~
 131+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 133+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 134+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 135+ 6366 ~
 136+ 6366 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 137+ 6366 ~            Prev_Ptr        defl    Heap_Ptr
 138+ 6366 ~
 139+ 6366 ~            mirror_Ptr      defl    $
 140+ 6366 ~
 141+ 6366 ~                            dw      Dict_Ptr + 2        // xt
 142+ 6366 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 143+ 6366 ~
 144+ 6366 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 145+ 6366 ~
 146+ 6366 ~            //              ______________________________________________________________________
 147+ 6366 ~            //              Dictionary part
 148+ 6366 ~
 149+ 6366 ~                            org     Dict_Ptr
 150+ 6366 ~
 151+ 6366 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 152+ 6366 ~
 153+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 155+ 6366 ~
 156+ 6366 ~
 157+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6366 ~
 160+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6366                              endm
 162+ 6366
 163+ 6366              //  ______________________________________________________________________
 164+ 6366              //
 165+ 6366              // Create a "constant"
 166+ 6366              // The constant value is compiled in first PFA cell
 167+ 6366              Constant_Def    macro   label, namec, constant_value
 168+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 169+ 6366 ~                            dw      constant_value
 170+ 6366                              endm
 171+ 6366
 172+ 6366              //  ______________________________________________________________________
 173+ 6366              //
 174+ 6366              // Create a "variable"
 175+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 176+ 6366              // this allow creation of "variables" which content is  of any length
 177+ 6366              Variable_Def    macro   label, namec, initial_value
 178+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 179+ 6366 ~                            dw      initial_value
 180+ 6366                              endm
 181+ 6366
 182+ 6366              //  ______________________________________________________________________
 183+ 6366              //
 184+ 6366              // Create a "user"
 185+ 6366              // It uses a single byte as offset to calculate the address of the variable
 186+ 6366              User_Def        macro   label, namec, offset_value
 187+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 188+ 6366 ~                            db      offset_value
 189+ 6366                              endm
 190+ 6366
 191+ 6366              //  ______________________________________________________________________
 192+ 6366              //
 193+ 6366              // Create a "colon-definition"
 194+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 195+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 196+ 6366              Colon_Def       macro   label, namec, bits
 197+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 198+ 6366                              endm
 199+ 6366
 200+ 6366              //  ______________________________________________________________________
 201+ 6366              //
 202+ 6366              // Create a "heap-string"
 203+ 6366              Start_Heap      macro
 204+ 6366 ~            temp_ORG        defl    $                   // save this ORG
 205+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 206+ 6366 ~
 207+ 6366                              endm
 208+ 6366
 209+ 6366              End_Heap        macro
 210+ 6366 ~            Heap_Ptr        defl    $ - $E000
 211+ 6366 ~                            org     temp_ORG
 212+ 6366 ~
 213+ 6366                              endm
 214+ 6366
 215+ 6366
 216+ 6366              //  ______________________________________________________________________
 217+ 6366              //
 218+ 6366
 219+ 6366
 220+ 6366
 221+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 222+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 223+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 224+ 6366              USER_system:    equ     $D188               // User variables zone.
 225+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 226+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 227+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
 120  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366              Cold_origin:
   9+ 6366 A7                           and     a
  10+ 6367 C3 CF 75                     jp      ColdRoutine
  11+ 636A              Warm_origin:
  12+ 636A 37                           scf
  13+ 636B C3 CF 75                     jp      WarmRoutine
  14+ 636E
  15+ 636E              // +008
  16+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  17+ 6370
  18+ 6370              // +00A
  19+ 6370 00 0E                        dw      $0E00
  20+ 6372
  21+ 6372              // +00C
  22+ 6372 F8 0C        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 6374
  24+ 6374              // +00E
  25+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 6376
  27+ 6376              // +010
  28+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 6378
  30+ 6378              // +012
  31+ 6378 E8 D0        S0_origin:      dw      S0_system
  32+ 637A 88 D1        R0_origin:      dw      R0_system
  33+ 637C E8 D0        TIB_origin:     dw      TIB_system
  34+ 637E 1F 00        WIDTH_origin:   dw      31
  35+ 6380 01 00        WARNING_origin: dw      1
  36+ 6382 1C 81        FENCE_origin:   dw      Fence_Word
  37+ 6384 1C 81        DP_origin       dw      Fence_Word
  38+ 6386 00 75        VOCLINK_origin: dw      Voclink_Ptr
  39+ 6388 E4 D1                        dw      FIRST_system
  40+ 638A 00 E0                        dw      LIMIT_system
  41+ 638C FE 0C        HP_origin:      dw      Current_HP
  42+ 638E
  43+ 638E              // +028
  44+ 638E 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638F 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6390 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6391 00                           db      0
  48+ 6392
  49+ 6392              // +02C
  50+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  51+ 6394
  52+ 6394              // +02E
  53+ 6394 88 D1        USER_Pointer:   dw      USER_system
  54+ 6396
  55+ 6396              // +030
  56+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 6398
  58+ 6398              // +32
  59+ 6398 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 639A
  61+ 639A
  62+ 639A                              Start_Heap
  62+ 639A             >temp_ORG        defl    $                   // save this ORG
  62+ 639A             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002 78                           db      120
  65+ E003 7C 20 20 20                  db      "|   v-Forth 1.7 - NextZXOS version ", $0D      // 36
  65+ E007 76 2D 46 6F
  65+ E00B 72 74 68 20
  65+ E00F 31 2E 37 20
  65+ E013 2D 20 4E 65
  65+ E017 78 74 5A 58
  65+ E01B 4F 53 20 76
  65+ E01F 65 72 73 69
  65+ E023 6F 6E 20 0D
  66+ E027 7C 20 20 20                  db      "|   Heap Vocabulary - build 2023-08-09 ", $0D  // 40
  66+ E02B 48 65 61 70
  66+ E02F 20 56 6F 63
  66+ E033 61 62 75 6C
  66+ E037 61 72 79 20
  66+ E03B 2D 20 62 75
  66+ E03F 69 6C 64 20
  66+ E043 32 30 32 33
  66+ E047 2D 30 38 2D
  66+ E04B 30 39 20 0D
C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm(67): error: Expression expected
  67+ E04F 7C 20 20 20                  db      "|   MIT License ", 127,                        // 17
  67+ E053 4D 49 54 20
  67+ E057 4C 69 63 65
  67+ E05B 6E 73 65 20
  67+ E05F 7F
  68+ E060 20 31 39 39                  db      " 1990-2023 Matteo Vitturi ", $0D               // 27
  68+ E064 30 2D 32 30
  68+ E068 32 33 20 4D
  68+ E06C 61 74 74 65
  68+ E070 6F 20 56 69
  68+ E074 74 74 75 72
  68+ E078 69 20 0D
  69+ E07B 7C                           db      "|"
  70+ E07C                              End_Heap
  70+ E07C             >Heap_Ptr        defl    $ - $E000
  70+ E07C             >                org     temp_ORG
  70+ 639A             >
  71+ 639A
  72+ 639A              //  ______________________________________________________________________
  73+ 639A
  74+ 639A              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 639A              // instead of their equivalent long sequences.
  76+ 639A
  77+ 639A              //  ______________________________________________________________________
  78+ 639A
  79+ 639A              // address for "next" - inner interpreter
  80+ 639A              // This address must always be pointed by IX
  81+ 639A              // "next" macro simply does a  jp(ix)  instruction
  82+ 639A
  83+ 639A              // Psh2_Ptr:       push    de
  84+ 639A              // Psh1_Ptr:       push    hl
  85+ 639A
  86+ 639A              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 639A
  88+ 639A                              if ( 1 == DEBUGGING )
  89+ 639A ~                            ld      hl, Next_Breakpoint_1
  90+ 639A ~                            and     a
  91+ 639A ~                            sbc     hl, bc
  92+ 639A ~                            jr      nz, Next_Continue
  93+ 639A ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 639A                              endif
  95+ 639A
  96+ 639A              Next_Continue:
  97+ 639A 0A                           ld      a, (bc)
  98+ 639B 03                           inc     bc
  99+ 639C 6F                           ld      l, a
 100+ 639D 0A                           ld      a, (bc)
 101+ 639E 03                           inc     bc
 102+ 639F 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 63A0
 104+ 63A0              // Execute xt i.e. CFA held in HL
 105+ 63A0              Exec_Ptr:
 106+ 63A0
 107+ 63A0
 108+ 63A0
 109+ 63A0
 110+ 63A0 E9                           jp      (hl)                // and jump to it
 111+ 63A1                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 63A1
 113+ 63A1              //  ______________________________________________________________________
 114+ 63A1              //
 115+ 63A1              // lit          -- x
 116+ 63A1              // puts on top of stack the value of the following word.
 117+ 63A1              // it is compiled in colon definition before a literal number
 118+ 63A1
 119+ 63A1                              New_Def  LIT, "LIT", is_code, is_normal
 119+ 63A1             >
 119+ 63A1             >Dict_Ptr        defl    $
 119+ 63A1             >
 119+ 63A1             >//              ______________________________________________________________________
 119+ 63A1             >//              Heap part
 119+ 63A1             >
 119+ 63A1             >
 119+ 63A1             >                org     (Heap_Ptr & $1FFF) + $E000
 119+ E07C             >
 119+ E07C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ E07C             >Latest_Definition defl  Heap_Ptr
 119+ E07C             >
 119+ E07C             >                // dummy db directives used to calculate length of namec
 119+ E07C 4C 49 54    >                db      "LIT"
 119+ E07F             >len_NFA         defl    $ - temp_NFA
 119+ E07F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ E07C             >
 119+ E07C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ E07D 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 119+ E080             >                org     $-1                 // alter last byte of Name just above to set
 119+ E07F D4          >                db      {b $} | END_BIT     // msb as name end
 119+ E080             >
 119+ E080 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 119+ E082             >Prev_Ptr        defl    Heap_Ptr
 119+ E082             >
 119+ E082             >mirror_Ptr      defl    $
 119+ E082             >
 119+ E082 A3 63       >                dw      Dict_Ptr + 2        // xt
 119+ E084             >Heap_Ptr        defl    $ - $E000           // save current HP
 119+ E084             >
 119+ E084             >Current_HP      defl  $ - $E000             // used to set HP once!
 119+ E084             >
 119+ E084             >//              ______________________________________________________________________
 119+ E084             >//              Dictionary part
 119+ E084             >
 119+ E084             >                org     Dict_Ptr
 119+ 63A1             >
 119+ 63A1 82 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 119+ 63A3             >
 119+ 63A3             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 63A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 119+ 63A3 ~           >
 119+ 63A3 ~           >
 119+ 63A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 63A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 63A3             >
 119+ 63A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 63A3
 121+ 63A3 0A                           ld      a, (bc)
 122+ 63A4 03                           inc     bc
 123+ 63A5 6F                           ld      l, a
 124+ 63A6 0A                           ld      a, (bc)
 125+ 63A7 03                           inc     bc
 126+ 63A8 67                           ld      h, a
 127+ 63A9 E5                           push    hl
 128+ 63AA                              next
 128+ 63AA DD E9       >                jp      (ix)
 129+ 63AC
 130+ 63AC              //  ______________________________________________________________________
 131+ 63AC              //
 132+ 63AC              // execute      i*x xt -- j*x
 133+ 63AC              // execution token. usually xt is given by CFA
 134+ 63AC
 135+ 63AC                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 135+ 63AC             >
 135+ 63AC             >Dict_Ptr        defl    $
 135+ 63AC             >
 135+ 63AC             >//              ______________________________________________________________________
 135+ 63AC             >//              Heap part
 135+ 63AC             >
 135+ 63AC             >
 135+ 63AC             >                org     (Heap_Ptr & $1FFF) + $E000
 135+ E084             >
 135+ E084             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ E084             >Latest_Definition defl  Heap_Ptr
 135+ E084             >
 135+ E084             >                // dummy db directives used to calculate length of namec
 135+ E084 45 58 45 43 >                db      "EXECUTE"
 135+ E088 55 54 45    >
 135+ E08B             >len_NFA         defl    $ - temp_NFA
 135+ E08B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ E084             >
 135+ E084 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ E085 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 135+ E089 55 54 45    >
 135+ E08C             >                org     $-1                 // alter last byte of Name just above to set
 135+ E08B C5          >                db      {b $} | END_BIT     // msb as name end
 135+ E08C             >
 135+ E08C 7C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 135+ E08E             >Prev_Ptr        defl    Heap_Ptr
 135+ E08E             >
 135+ E08E             >mirror_Ptr      defl    $
 135+ E08E             >
 135+ E08E AE 63       >                dw      Dict_Ptr + 2        // xt
 135+ E090             >Heap_Ptr        defl    $ - $E000           // save current HP
 135+ E090             >
 135+ E090             >Current_HP      defl  $ - $E000             // used to set HP once!
 135+ E090             >
 135+ E090             >//              ______________________________________________________________________
 135+ E090             >//              Dictionary part
 135+ E090             >
 135+ E090             >                org     Dict_Ptr
 135+ 63AC             >
 135+ 63AC 8E 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 135+ 63AE             >
 135+ 63AE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 63AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 135+ 63AE ~           >
 135+ 63AE ~           >
 135+ 63AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 63AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 63AE             >
 135+ 63AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 63AE C9                           ret
 137+ 63AF
 138+ 63AF              //  ______________________________________________________________________
 139+ 63AF              //
 140+ 63AF              // brk
 141+ 63AF              //              New_Def  BRK, "BRK", is_code, is_normal
 142+ 63AF              //              next
 143+ 63AF
 144+ 63AF
 145+ 63AF
 146+ 63AF              //  ______________________________________________________________________
 147+ 63AF              //
 148+ 63AF              // (+loop)      n --
 149+ 63AF              // compiled by +LOOP. it uses the top two values of return-stack to
 150+ 63AF              // keep track of index and limit, they are accessed via I and I'
 151+ 63AF              // Add n to the loop index. If the loop index did not cross the boundary
 152+ 63AF              // between the loop limit minus one and the loop limit, continue execution
 153+ 63AF              // at the beginning of the loop. Otherwise, discard the current loop control
 154+ 63AF              // parameters and continue execution immediately following the loop.
 155+ 63AF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 155+ 63AF             >
 155+ 63AF             >Dict_Ptr        defl    $
 155+ 63AF             >
 155+ 63AF             >//              ______________________________________________________________________
 155+ 63AF             >//              Heap part
 155+ 63AF             >
 155+ 63AF             >
 155+ 63AF             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E090             >
 155+ E090             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E090             >Latest_Definition defl  Heap_Ptr
 155+ E090             >
 155+ E090             >                // dummy db directives used to calculate length of namec
 155+ E090 28 2B 4C 4F >                db      "(+LOOP)"
 155+ E094 4F 50 29    >
 155+ E097             >len_NFA         defl    $ - temp_NFA
 155+ E097             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E090             >
 155+ E090 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E091 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 155+ E095 4F 50 29    >
 155+ E098             >                org     $-1                 // alter last byte of Name just above to set
 155+ E097 A9          >                db      {b $} | END_BIT     // msb as name end
 155+ E098             >
 155+ E098 84 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E09A             >Prev_Ptr        defl    Heap_Ptr
 155+ E09A             >
 155+ E09A             >mirror_Ptr      defl    $
 155+ E09A             >
 155+ E09A B1 63       >                dw      Dict_Ptr + 2        // xt
 155+ E09C             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E09C             >
 155+ E09C             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E09C             >
 155+ E09C             >//              ______________________________________________________________________
 155+ E09C             >//              Dictionary part
 155+ E09C             >
 155+ E09C             >                org     Dict_Ptr
 155+ 63AF             >
 155+ 63AF 9A 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 63B1             >
 155+ 63B1             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 63B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 155+ 63B1 ~           >
 155+ 63B1 ~           >
 155+ 63B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 63B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 63B1             >
 155+ 63B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 63B1
 157+ 63B1              Loop_Ptr:
 158+ 63B1 E1                           pop     hl                  // get increment
 159+ 63B2 EB                           ex      de, hl
 160+ 63B3                              // *** ldhlrp
 161+ 63B3 C5                           push    bc                  // Save IP
 162+ 63B4 42                           ld      b, d                // bc is increment
 163+ 63B5 4B                           ld      c, e
 164+ 63B6 E5                           push    hl
 165+ 63B7 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 166+ 63B8 7B                           ld      a, e                // de keeps index before increment.
 167+ 63B9 81                           add     c
 168+ 63BA 77                           ld      (hl), a
 169+ 63BB 23                           inc     hl
 170+ 63BC 56                           ld      d, (hl)
 171+ 63BD 7A                           ld      a, d
 172+ 63BE 88                           adc     b
 173+ 63BF 77                           ld      (hl),a
 174+ 63C0 23                           inc     hl
 175+ 63C1
 176+ 63C1 7B                           ld      a, e
 177+ 63C2 96                           sub     (hl)
 178+ 63C3 5F                           ld      e, a
 179+ 63C4 23                           inc     hl
 180+ 63C5 7A                           ld      a, d
 181+ 63C6 9E                           sbc     (hl)
 182+ 63C7 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 183+ 63C8
 184+ 63C8 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 185+ 63C9 09                           add     hl, bc
 186+ 63CA CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 187+ 63CC 28 01                        jr      z, Loop_NegativeIncrement
 188+ 63CE 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 189+ 63CF              Loop_NegativeIncrement:
 190+ 63CF 38 04                        jr      c, Loop_Endif
 191+ 63D1 D1                               pop     de              // Discard RP+3, retrieve original RP
 192+ 63D2 C1                               pop     bc                  // Retrieve IP
 193+ 63D3 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 194+ 63D5              Loop_Endif:
 195+ 63D5 C1                           pop     bc                  // discard original RP
 196+ 63D6 EB                           ex      de, hl
 197+ 63D7 23                           inc     hl                  // keep    RP+4 (exit from loop)
 198+ 63D8                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 199+ 63D8 EB                           ex      de, hl
 200+ 63D9 C1                           pop     bc                  // Retrieve IP
 201+ 63DA 03                           inc     bc                  // skip branch-style offset
 202+ 63DB 03                           inc     bc
 203+ 63DC                              next
 203+ 63DC DD E9       >                jp      (ix)
 204+ 63DE
 205+ 63DE              //  ______________________________________________________________________
 206+ 63DE              //
 207+ 63DE              // (loop)       n --
 208+ 63DE              // same as (LOOP) but index is incremented by 1
 209+ 63DE              // compiled by LOOP.
 210+ 63DE                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 210+ 63DE             >
 210+ 63DE             >Dict_Ptr        defl    $
 210+ 63DE             >
 210+ 63DE             >//              ______________________________________________________________________
 210+ 63DE             >//              Heap part
 210+ 63DE             >
 210+ 63DE             >
 210+ 63DE             >                org     (Heap_Ptr & $1FFF) + $E000
 210+ E09C             >
 210+ E09C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 210+ E09C             >Latest_Definition defl  Heap_Ptr
 210+ E09C             >
 210+ E09C             >                // dummy db directives used to calculate length of namec
 210+ E09C 28 4C 4F 4F >                db      "(LOOP)"
 210+ E0A0 50 29       >
 210+ E0A2             >len_NFA         defl    $ - temp_NFA
 210+ E0A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 210+ E09C             >
 210+ E09C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 210+ E09D 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 210+ E0A1 50 29       >
 210+ E0A3             >                org     $-1                 // alter last byte of Name just above to set
 210+ E0A2 A9          >                db      {b $} | END_BIT     // msb as name end
 210+ E0A3             >
 210+ E0A3 90 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 210+ E0A5             >Prev_Ptr        defl    Heap_Ptr
 210+ E0A5             >
 210+ E0A5             >mirror_Ptr      defl    $
 210+ E0A5             >
 210+ E0A5 E0 63       >                dw      Dict_Ptr + 2        // xt
 210+ E0A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 210+ E0A7             >
 210+ E0A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 210+ E0A7             >
 210+ E0A7             >//              ______________________________________________________________________
 210+ E0A7             >//              Dictionary part
 210+ E0A7             >
 210+ E0A7             >                org     Dict_Ptr
 210+ 63DE             >
 210+ 63DE A5 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 210+ 63E0             >
 210+ 63E0             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 210+ 63E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 210+ 63E0 ~           >
 210+ 63E0 ~           >
 210+ 63E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 210+ 63E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 210+ 63E0             >
 210+ 63E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 211+ 63E0 ED 8A 00 01                  push    1
 212+ 63E4 18 CB                        jr      Loop_Ptr
 213+ 63E6
 214+ 63E6              //  ______________________________________________________________________
 215+ 63E6              //
 216+ 63E6              // branch       --
 217+ 63E6              // unconditional branch in colon definition using the following cell as an offset from current IP value
 218+ 63E6              // compiled by ELSE, AGAIN and some other immediate words
 219+ 63E6
 220+ 63E6                              New_Def BRANCH, "BRANCH", is_code, is_normal
 220+ 63E6             >
 220+ 63E6             >Dict_Ptr        defl    $
 220+ 63E6             >
 220+ 63E6             >//              ______________________________________________________________________
 220+ 63E6             >//              Heap part
 220+ 63E6             >
 220+ 63E6             >
 220+ 63E6             >                org     (Heap_Ptr & $1FFF) + $E000
 220+ E0A7             >
 220+ E0A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ E0A7             >Latest_Definition defl  Heap_Ptr
 220+ E0A7             >
 220+ E0A7             >                // dummy db directives used to calculate length of namec
 220+ E0A7 42 52 41 4E >                db      "BRANCH"
 220+ E0AB 43 48       >
 220+ E0AD             >len_NFA         defl    $ - temp_NFA
 220+ E0AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ E0A7             >
 220+ E0A7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ E0A8 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 220+ E0AC 43 48       >
 220+ E0AE             >                org     $-1                 // alter last byte of Name just above to set
 220+ E0AD C8          >                db      {b $} | END_BIT     // msb as name end
 220+ E0AE             >
 220+ E0AE 9C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 220+ E0B0             >Prev_Ptr        defl    Heap_Ptr
 220+ E0B0             >
 220+ E0B0             >mirror_Ptr      defl    $
 220+ E0B0             >
 220+ E0B0 E8 63       >                dw      Dict_Ptr + 2        // xt
 220+ E0B2             >Heap_Ptr        defl    $ - $E000           // save current HP
 220+ E0B2             >
 220+ E0B2             >Current_HP      defl  $ - $E000             // used to set HP once!
 220+ E0B2             >
 220+ E0B2             >//              ______________________________________________________________________
 220+ E0B2             >//              Dictionary part
 220+ E0B2             >
 220+ E0B2             >                org     Dict_Ptr
 220+ 63E6             >
 220+ 63E6 B0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 220+ 63E8             >
 220+ 63E8             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 63E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220+ 63E8 ~           >
 220+ 63E8 ~           >
 220+ 63E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 63E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 63E8             >
 220+ 63E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 63E8              Branch_Ptr:
 222+ 63E8 0A                           ld      a, (bc)
 223+ 63E9 6F                           ld      l, a
 224+ 63EA 03                           inc     bc
 225+ 63EB 0A                           ld      a, (bc)
 226+ 63EC 67                           ld      h, a
 227+ 63ED 0B                           dec     bc
 228+ 63EE 09                           add     hl, bc
 229+ 63EF 4D                           ld      c, l
 230+ 63F0 44                           ld      b, h
 231+ 63F1                              next
 231+ 63F1 DD E9       >                jp      (ix)
 232+ 63F3
 233+ 63F3
 234+ 63F3              //  ______________________________________________________________________
 235+ 63F3              //
 236+ 63F3              // 0branch      f --
 237+ 63F3              // conditional branch if the top-of-stack is ZERO or FALSE.
 238+ 63F3              // compiled by IF, UNTIL and some other immediate words
 239+ 63F3
 240+ 63F3                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 240+ 63F3             >
 240+ 63F3             >Dict_Ptr        defl    $
 240+ 63F3             >
 240+ 63F3             >//              ______________________________________________________________________
 240+ 63F3             >//              Heap part
 240+ 63F3             >
 240+ 63F3             >
 240+ 63F3             >                org     (Heap_Ptr & $1FFF) + $E000
 240+ E0B2             >
 240+ E0B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 240+ E0B2             >Latest_Definition defl  Heap_Ptr
 240+ E0B2             >
 240+ E0B2             >                // dummy db directives used to calculate length of namec
 240+ E0B2 30 42 52 41 >                db      "0BRANCH"
 240+ E0B6 4E 43 48    >
 240+ E0B9             >len_NFA         defl    $ - temp_NFA
 240+ E0B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 240+ E0B2             >
 240+ E0B2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 240+ E0B3 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 240+ E0B7 4E 43 48    >
 240+ E0BA             >                org     $-1                 // alter last byte of Name just above to set
 240+ E0B9 C8          >                db      {b $} | END_BIT     // msb as name end
 240+ E0BA             >
 240+ E0BA A7 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 240+ E0BC             >Prev_Ptr        defl    Heap_Ptr
 240+ E0BC             >
 240+ E0BC             >mirror_Ptr      defl    $
 240+ E0BC             >
 240+ E0BC F5 63       >                dw      Dict_Ptr + 2        // xt
 240+ E0BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 240+ E0BE             >
 240+ E0BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 240+ E0BE             >
 240+ E0BE             >//              ______________________________________________________________________
 240+ E0BE             >//              Dictionary part
 240+ E0BE             >
 240+ E0BE             >                org     Dict_Ptr
 240+ 63F3             >
 240+ 63F3 BC 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 240+ 63F5             >
 240+ 63F5             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 240+ 63F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 240+ 63F5 ~           >
 240+ 63F5 ~           >
 240+ 63F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 240+ 63F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 240+ 63F5             >
 240+ 63F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 241+ 63F5              ZBranch_Ptr:
 242+ 63F5 E1                           pop     hl
 243+ 63F6 7D                           ld      a, l
 244+ 63F7 B4                           or      h
 245+ 63F8 28 EE                        jr      z, Branch_Ptr
 246+ 63FA 03                           inc     bc                  // if not branch, skip offset cell.
 247+ 63FB 03                           inc     bc
 248+ 63FC                              next
 248+ 63FC DD E9       >                jp      (ix)
 249+ 63FE
 250+ 63FE              //  ______________________________________________________________________
 251+ 63FE              //
 252+ 63FE              // (leave)        --
 253+ 63FE              // compiled by LEAVE
 254+ 63FE              // this forces to exit from loop and jump past
 255+ 63FE                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 255+ 63FE             >
 255+ 63FE             >Dict_Ptr        defl    $
 255+ 63FE             >
 255+ 63FE             >//              ______________________________________________________________________
 255+ 63FE             >//              Heap part
 255+ 63FE             >
 255+ 63FE             >
 255+ 63FE             >                org     (Heap_Ptr & $1FFF) + $E000
 255+ E0BE             >
 255+ E0BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 255+ E0BE             >Latest_Definition defl  Heap_Ptr
 255+ E0BE             >
 255+ E0BE             >                // dummy db directives used to calculate length of namec
 255+ E0BE 28 4C 45 41 >                db      "(LEAVE)"
 255+ E0C2 56 45 29    >
 255+ E0C5             >len_NFA         defl    $ - temp_NFA
 255+ E0C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 255+ E0BE             >
 255+ E0BE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 255+ E0BF 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 255+ E0C3 56 45 29    >
 255+ E0C6             >                org     $-1                 // alter last byte of Name just above to set
 255+ E0C5 A9          >                db      {b $} | END_BIT     // msb as name end
 255+ E0C6             >
 255+ E0C6 B2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 255+ E0C8             >Prev_Ptr        defl    Heap_Ptr
 255+ E0C8             >
 255+ E0C8             >mirror_Ptr      defl    $
 255+ E0C8             >
 255+ E0C8 00 64       >                dw      Dict_Ptr + 2        // xt
 255+ E0CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 255+ E0CA             >
 255+ E0CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 255+ E0CA             >
 255+ E0CA             >//              ______________________________________________________________________
 255+ E0CA             >//              Dictionary part
 255+ E0CA             >
 255+ E0CA             >                org     Dict_Ptr
 255+ 63FE             >
 255+ 63FE C8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 255+ 6400             >
 255+ 6400             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 255+ 6400 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 255+ 6400 ~           >
 255+ 6400 ~           >
 255+ 6400             >                endif           ; ok        // for other definitions it "points" the correct handler
 255+ 6400             >                // Use of "; ok" to suppress "warning[fwdref]"
 255+ 6400             >
 255+ 6400             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 256+ 6400 EB                           ex      de, hl
 257+ 6401                              // *** ldhlrp
 258+ 6401 3E 04                        ld      a, 4
 259+ 6403 ED 31                        add     hl, a
 260+ 6405                              // *** ldrphl
 261+ 6405 EB                           ex      de, hl
 262+ 6406 18 E0                        jr      Branch_Ptr       // perform branch consuming following cell
 263+ 6408                              next
 263+ 6408 DD E9       >                jp      (ix)
 264+ 640A
 265+ 640A              //  ______________________________________________________________________
 266+ 640A              //
 267+ 640A              // (?do)        lim ind --
 268+ 640A              // compiled by ?DO to make a loop checking for lim == ind first
 269+ 640A              // at run-time (?DO) must be followed by a BRANCH offset
 270+ 640A              // used to skip the loop if lim == ind
 271+ 640A                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 271+ 640A             >
 271+ 640A             >Dict_Ptr        defl    $
 271+ 640A             >
 271+ 640A             >//              ______________________________________________________________________
 271+ 640A             >//              Heap part
 271+ 640A             >
 271+ 640A             >
 271+ 640A             >                org     (Heap_Ptr & $1FFF) + $E000
 271+ E0CA             >
 271+ E0CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 271+ E0CA             >Latest_Definition defl  Heap_Ptr
 271+ E0CA             >
 271+ E0CA             >                // dummy db directives used to calculate length of namec
 271+ E0CA 28 3F 44 4F >                db      "(?DO)"
 271+ E0CE 29          >
 271+ E0CF             >len_NFA         defl    $ - temp_NFA
 271+ E0CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 271+ E0CA             >
 271+ E0CA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 271+ E0CB 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 271+ E0CF 29          >
 271+ E0D0             >                org     $-1                 // alter last byte of Name just above to set
 271+ E0CF A9          >                db      {b $} | END_BIT     // msb as name end
 271+ E0D0             >
 271+ E0D0 BE 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 271+ E0D2             >Prev_Ptr        defl    Heap_Ptr
 271+ E0D2             >
 271+ E0D2             >mirror_Ptr      defl    $
 271+ E0D2             >
 271+ E0D2 0C 64       >                dw      Dict_Ptr + 2        // xt
 271+ E0D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 271+ E0D4             >
 271+ E0D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 271+ E0D4             >
 271+ E0D4             >//              ______________________________________________________________________
 271+ E0D4             >//              Dictionary part
 271+ E0D4             >
 271+ E0D4             >                org     Dict_Ptr
 271+ 640A             >
 271+ 640A D2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 271+ 640C             >
 271+ 640C             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 271+ 640C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 271+ 640C ~           >
 271+ 640C ~           >
 271+ 640C             >                endif           ; ok        // for other definitions it "points" the correct handler
 271+ 640C             >                // Use of "; ok" to suppress "warning[fwdref]"
 271+ 640C             >
 271+ 640C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 272+ 640C D9                           exx
 273+ 640D D1                            pop     de                  // de has the index
 274+ 640E E1                            pop     hl                  // hl has the limit
 275+ 640F 44                            ld      b, h
 276+ 6410 4D                            ld      c, l
 277+ 6411 E5                            push    hl                  // put them back to stack for later
 278+ 6412 D5                            push    de
 279+ 6413 A7                            and     a                   // reset carry flag
 280+ 6414 ED 52                         sbc     hl, de              // compute limit - index
 281+ 6416 D9                           exx
 282+ 6417 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 283+ 6419 E1                               pop     hl
 284+ 641A E1                               pop     hl
 285+ 641B 18 CB                            jr      Branch_Ptr          // perform branch consuming following cell
 286+ 641D              Do_Ptr:
 287+ 641D                              // *** ldhlrp                 // prepare RP
 288+ 641D                              // *** ex      de, hl
 289+ 641D 1B                           dec     de
 290+ 641E 1B                           dec     de
 291+ 641F 1B                           dec     de
 292+ 6420 1B                           dec     de
 293+ 6421 D5                           push    de                  // pass it to h'l'
 294+ 6422                              // *** ex      de, hl
 295+ 6422                              // *** ldrphl
 296+ 6422 D9                           exx
 297+ 6423 E1                            pop     hl
 298+ 6424
 299+ 6424                               // store index as top RP
 300+ 6424 D1                            pop     de
 301+ 6425 73                            ld      (hl), e
 302+ 6426 23                            inc     hl
 303+ 6427 72                            ld      (hl), d
 304+ 6428 23                            inc     hl
 305+ 6429                               // stores lim as second from top RP
 306+ 6429 D1                            pop     de
 307+ 642A 73                            ld      (hl), e
 308+ 642B 23                            inc     hl
 309+ 642C 72                            ld      (hl), d
 310+ 642D D9                           exx
 311+ 642E                              // skip branch-style offseet
 312+ 642E 03                           inc     bc
 313+ 642F 03                           inc     bc
 314+ 6430                              next
 314+ 6430 DD E9       >                jp      (ix)
 315+ 6432
 316+ 6432              //  ______________________________________________________________________
 317+ 6432              //
 318+ 6432              // (do)        lim ind --
 319+ 6432              // compiled by DO to make a loop checking for lim == ind first
 320+ 6432              // this is a simpler version of (?DO)
 321+ 6432                              New_Def C_DO, "(DO)", is_code, is_normal
 321+ 6432             >
 321+ 6432             >Dict_Ptr        defl    $
 321+ 6432             >
 321+ 6432             >//              ______________________________________________________________________
 321+ 6432             >//              Heap part
 321+ 6432             >
 321+ 6432             >
 321+ 6432             >                org     (Heap_Ptr & $1FFF) + $E000
 321+ E0D4             >
 321+ E0D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ E0D4             >Latest_Definition defl  Heap_Ptr
 321+ E0D4             >
 321+ E0D4             >                // dummy db directives used to calculate length of namec
 321+ E0D4 28 44 4F 29 >                db      "(DO)"
 321+ E0D8             >len_NFA         defl    $ - temp_NFA
 321+ E0D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ E0D4             >
 321+ E0D4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ E0D5 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 321+ E0D9             >                org     $-1                 // alter last byte of Name just above to set
 321+ E0D8 A9          >                db      {b $} | END_BIT     // msb as name end
 321+ E0D9             >
 321+ E0D9 CA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 321+ E0DB             >Prev_Ptr        defl    Heap_Ptr
 321+ E0DB             >
 321+ E0DB             >mirror_Ptr      defl    $
 321+ E0DB             >
 321+ E0DB 34 64       >                dw      Dict_Ptr + 2        // xt
 321+ E0DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 321+ E0DD             >
 321+ E0DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 321+ E0DD             >
 321+ E0DD             >//              ______________________________________________________________________
 321+ E0DD             >//              Dictionary part
 321+ E0DD             >
 321+ E0DD             >                org     Dict_Ptr
 321+ 6432             >
 321+ 6432 DB 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 321+ 6434             >
 321+ 6434             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 6434 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 321+ 6434 ~           >
 321+ 6434 ~           >
 321+ 6434             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 6434             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 6434             >
 321+ 6434             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 6434 0B                           dec     bc                  // prepare IP beforehand
 323+ 6435 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 324+ 6436 18 E5                        jr      Do_Ptr
 325+ 6438
 326+ 6438              //  ______________________________________________________________________
 327+ 6438              //
 328+ 6438              // i            -- n
 329+ 6438              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 330+ 6438              // the current value of the index-loop
 331+ 6438                              New_Def I, "I", is_code, is_normal
 331+ 6438             >
 331+ 6438             >Dict_Ptr        defl    $
 331+ 6438             >
 331+ 6438             >//              ______________________________________________________________________
 331+ 6438             >//              Heap part
 331+ 6438             >
 331+ 6438             >
 331+ 6438             >                org     (Heap_Ptr & $1FFF) + $E000
 331+ E0DD             >
 331+ E0DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ E0DD             >Latest_Definition defl  Heap_Ptr
 331+ E0DD             >
 331+ E0DD             >                // dummy db directives used to calculate length of namec
 331+ E0DD 49          >                db      "I"
 331+ E0DE             >len_NFA         defl    $ - temp_NFA
 331+ E0DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ E0DD             >
 331+ E0DD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ E0DE 49          >                db      "I"               // name string in 7-bit ascii, but
 331+ E0DF             >                org     $-1                 // alter last byte of Name just above to set
 331+ E0DE C9          >                db      {b $} | END_BIT     // msb as name end
 331+ E0DF             >
 331+ E0DF D4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 331+ E0E1             >Prev_Ptr        defl    Heap_Ptr
 331+ E0E1             >
 331+ E0E1             >mirror_Ptr      defl    $
 331+ E0E1             >
 331+ E0E1 3A 64       >                dw      Dict_Ptr + 2        // xt
 331+ E0E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 331+ E0E3             >
 331+ E0E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 331+ E0E3             >
 331+ E0E3             >//              ______________________________________________________________________
 331+ E0E3             >//              Dictionary part
 331+ E0E3             >
 331+ E0E3             >                org     Dict_Ptr
 331+ 6438             >
 331+ 6438 E1 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 331+ 643A             >
 331+ 643A             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 643A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 331+ 643A ~           >
 331+ 643A ~           >
 331+ 643A             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 643A             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 643A             >
 331+ 643A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 643A              I_Ptr:
 333+ 643A 62                           ld      h, d
 334+ 643B 6B                           ld      l, e
 335+ 643C                              // *** ldhlrp
 336+ 643C              I_Ptr_prime:
 337+ 643C 7E                           ld      a, (hl)
 338+ 643D 23                           inc     hl
 339+ 643E 66                           ld      h, (hl)
 340+ 643F 6F                           ld      l, a
 341+ 6440 E5                           push    hl
 342+ 6441                              next
 342+ 6441 DD E9       >                jp      (ix)
 343+ 6443
 344+ 6443
 345+ 6443              //  ______________________________________________________________________
 346+ 6443              //
 347+ 6443              // i'            -- n
 348+ 6443              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 349+ 6443              // the limit of the index-loop
 350+ 6443
 351+ 6443                              New_Def II, "I'", is_code, is_normal
 351+ 6443             >
 351+ 6443             >Dict_Ptr        defl    $
 351+ 6443             >
 351+ 6443             >//              ______________________________________________________________________
 351+ 6443             >//              Heap part
 351+ 6443             >
 351+ 6443             >
 351+ 6443             >                org     (Heap_Ptr & $1FFF) + $E000
 351+ E0E3             >
 351+ E0E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 351+ E0E3             >Latest_Definition defl  Heap_Ptr
 351+ E0E3             >
 351+ E0E3             >                // dummy db directives used to calculate length of namec
 351+ E0E3 49 27       >                db      "I'"
 351+ E0E5             >len_NFA         defl    $ - temp_NFA
 351+ E0E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 351+ E0E3             >
 351+ E0E3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 351+ E0E4 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 351+ E0E6             >                org     $-1                 // alter last byte of Name just above to set
 351+ E0E5 A7          >                db      {b $} | END_BIT     // msb as name end
 351+ E0E6             >
 351+ E0E6 DD 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 351+ E0E8             >Prev_Ptr        defl    Heap_Ptr
 351+ E0E8             >
 351+ E0E8             >mirror_Ptr      defl    $
 351+ E0E8             >
 351+ E0E8 45 64       >                dw      Dict_Ptr + 2        // xt
 351+ E0EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 351+ E0EA             >
 351+ E0EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 351+ E0EA             >
 351+ E0EA             >//              ______________________________________________________________________
 351+ E0EA             >//              Dictionary part
 351+ E0EA             >
 351+ E0EA             >                org     Dict_Ptr
 351+ 6443             >
 351+ 6443 E8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 351+ 6445             >
 351+ 6445             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 351+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 351+ 6445 ~           >
 351+ 6445 ~           >
 351+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 351+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 351+ 6445             >
 351+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 352+ 6445 62                           ld      h, d
 353+ 6446 6B                           ld      l, e
 354+ 6447                              // *** ldhlrp
 355+ 6447 23                           inc     hl
 356+ 6448 23                           inc     hl
 357+ 6449 18 F1                        jr      I_Ptr_prime
 358+ 644B
 359+ 644B
 360+ 644B              //  ______________________________________________________________________
 361+ 644B              //
 362+ 644B              // digit        c n -- u tf  |  ff
 363+ 644B              // convert a character c using base n
 364+ 644B              // returns a unsigned number and a true flag
 365+ 644B              // or just a false flag if the conversion fails
 366+ 644B                              New_Def DIGIT, "DIGIT", is_code, is_normal
 366+ 644B             >
 366+ 644B             >Dict_Ptr        defl    $
 366+ 644B             >
 366+ 644B             >//              ______________________________________________________________________
 366+ 644B             >//              Heap part
 366+ 644B             >
 366+ 644B             >
 366+ 644B             >                org     (Heap_Ptr & $1FFF) + $E000
 366+ E0EA             >
 366+ E0EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 366+ E0EA             >Latest_Definition defl  Heap_Ptr
 366+ E0EA             >
 366+ E0EA             >                // dummy db directives used to calculate length of namec
 366+ E0EA 44 49 47 49 >                db      "DIGIT"
 366+ E0EE 54          >
 366+ E0EF             >len_NFA         defl    $ - temp_NFA
 366+ E0EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 366+ E0EA             >
 366+ E0EA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 366+ E0EB 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 366+ E0EF 54          >
 366+ E0F0             >                org     $-1                 // alter last byte of Name just above to set
 366+ E0EF D4          >                db      {b $} | END_BIT     // msb as name end
 366+ E0F0             >
 366+ E0F0 E3 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 366+ E0F2             >Prev_Ptr        defl    Heap_Ptr
 366+ E0F2             >
 366+ E0F2             >mirror_Ptr      defl    $
 366+ E0F2             >
 366+ E0F2 4D 64       >                dw      Dict_Ptr + 2        // xt
 366+ E0F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 366+ E0F4             >
 366+ E0F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 366+ E0F4             >
 366+ E0F4             >//              ______________________________________________________________________
 366+ E0F4             >//              Dictionary part
 366+ E0F4             >
 366+ E0F4             >                org     Dict_Ptr
 366+ 644B             >
 366+ 644B F2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 366+ 644D             >
 366+ 644D             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 366+ 644D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 366+ 644D ~           >
 366+ 644D ~           >
 366+ 644D             >                endif           ; ok        // for other definitions it "points" the correct handler
 366+ 644D             >                // Use of "; ok" to suppress "warning[fwdref]"
 366+ 644D             >
 366+ 644D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 367+ 644D D9                           exx
 368+ 644E E1                           pop     hl                  // l has the base
 369+ 644F D1                           pop     de                  // e has the digit
 370+ 6450 7B                           ld      a, e
 371+ 6451 FE 60                        cp      $60                 // check if lowercase
 372+ 6453 38 02                        jr      c, Digit_Uppercase
 373+ 6455 D6 20                            sub     $20                 // quick'n'dirty uppercase
 374+ 6457              Digit_Uppercase:
 375+ 6457 D6 30                        sub     $30
 376+ 6459 38 16                        jr      c, Digit_Fail       // fail when character < "0"
 377+ 645B FE 0A                            cp      $0A
 378+ 645D 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 379+ 645F D6 07                                sub     7                   // try hex and subtract 7
 380+ 6461 FE 0A                                cp      $0A
 381+ 6463 38 0C                                jr      c,  Digit_Fail      // it is not hex !
 382+ 6465
 383+ 6465              Digit_Decimal:
 384+ 6465                              // compare digit
 385+ 6465 BD                           cp      l                   // compare with base
 386+ 6466 30 09                        jr      nc, Digit_Fail      // fail when greater than base
 387+ 6468 5F                               ld      e, a                // digit is returned as second from TOS
 388+ 6469 21 01 00                         ld      hl, 1
 389+ 646C D5                               push    de
 390+ 646D E5                               push    hl
 391+ 646E D9                               exx
 392+ 646F                                  next
 392+ 646F DD E9       >                jp      (ix)
 393+ 6471              Digit_Fail:
 394+ 6471 21 00 00                     ld      hl, 0
 395+ 6474 E5                           push    hl
 396+ 6475 D9                           exx
 397+ 6476                              next
 397+ 6476 DD E9       >                jp      (ix)
 398+ 6478
 399+ 6478              //  ______________________________________________________________________
 400+ 6478              //
 401+ 6478              //  parametric uppercase routine
 402+ 6478              //  depending on the following op-code the routine can be by-passed
 403+ 6478              //  changing the behaviour of some callers.
 404+ 6478              //  If it is "ret" then the system is Case-Sensitive
 405+ 6478              //  If it is "Nop" then the system is Case-Insensitive
 406+ 6478              //  Only A register is touched.
 407+ 6478 00           Case_Sensitive: nop                         // Default is case-insensitive.
 408+ 6479              Case_Upper:
 409+ 6479 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 410+ 647B D8                           ret     c                   // no change if A < "a"
 411+ 647C FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 412+ 647E D0                           ret     nc                  // no change if A > "z"
 413+ 647F D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 414+ 6481 C9                           ret
 415+ 6482
 416+ 6482              //  ______________________________________________________________________
 417+ 6482              //
 418+ 6482              //  caseon      --
 419+ 6482              // set system case-sensitivity on
 420+ 6482              // it patches a RET/NOP at the beginning of the uppercase-routine
 421+ 6482                              New_Def CASEON, "CASEON", is_code, is_normal
 421+ 6482             >
 421+ 6482             >Dict_Ptr        defl    $
 421+ 6482             >
 421+ 6482             >//              ______________________________________________________________________
 421+ 6482             >//              Heap part
 421+ 6482             >
 421+ 6482             >
 421+ 6482             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E0F4             >
 421+ E0F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E0F4             >Latest_Definition defl  Heap_Ptr
 421+ E0F4             >
 421+ E0F4             >                // dummy db directives used to calculate length of namec
 421+ E0F4 43 41 53 45 >                db      "CASEON"
 421+ E0F8 4F 4E       >
 421+ E0FA             >len_NFA         defl    $ - temp_NFA
 421+ E0FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E0F4             >
 421+ E0F4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E0F5 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 421+ E0F9 4F 4E       >
 421+ E0FB             >                org     $-1                 // alter last byte of Name just above to set
 421+ E0FA CE          >                db      {b $} | END_BIT     // msb as name end
 421+ E0FB             >
 421+ E0FB EA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E0FD             >Prev_Ptr        defl    Heap_Ptr
 421+ E0FD             >
 421+ E0FD             >mirror_Ptr      defl    $
 421+ E0FD             >
 421+ E0FD 84 64       >                dw      Dict_Ptr + 2        // xt
 421+ E0FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E0FF             >
 421+ E0FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E0FF             >
 421+ E0FF             >//              ______________________________________________________________________
 421+ E0FF             >//              Dictionary part
 421+ E0FF             >
 421+ E0FF             >                org     Dict_Ptr
 421+ 6482             >
 421+ 6482 FD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 6484             >
 421+ 6484             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6484 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6484 ~           >
 421+ 6484 ~           >
 421+ 6484             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6484             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6484             >
 421+ 6484             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6484 3E C9                        ld      a, $C9              // "ret"
 423+ 6486 32 78 64                     ld      (Case_Sensitive), a
 424+ 6489                              next
 424+ 6489 DD E9       >                jp      (ix)
 425+ 648B
 426+ 648B              //  ______________________________________________________________________
 427+ 648B              //
 428+ 648B              //  caseoff     --
 429+ 648B              // set system case-sensitivity on
 430+ 648B              // it patches a RET/NOP at the beginning of the uppercase-routine
 431+ 648B                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 431+ 648B             >
 431+ 648B             >Dict_Ptr        defl    $
 431+ 648B             >
 431+ 648B             >//              ______________________________________________________________________
 431+ 648B             >//              Heap part
 431+ 648B             >
 431+ 648B             >
 431+ 648B             >                org     (Heap_Ptr & $1FFF) + $E000
 431+ E0FF             >
 431+ E0FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 431+ E0FF             >Latest_Definition defl  Heap_Ptr
 431+ E0FF             >
 431+ E0FF             >                // dummy db directives used to calculate length of namec
 431+ E0FF 43 41 53 45 >                db      "CASEOFF"
 431+ E103 4F 46 46    >
 431+ E106             >len_NFA         defl    $ - temp_NFA
 431+ E106             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 431+ E0FF             >
 431+ E0FF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 431+ E100 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 431+ E104 4F 46 46    >
 431+ E107             >                org     $-1                 // alter last byte of Name just above to set
 431+ E106 C6          >                db      {b $} | END_BIT     // msb as name end
 431+ E107             >
 431+ E107 F4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 431+ E109             >Prev_Ptr        defl    Heap_Ptr
 431+ E109             >
 431+ E109             >mirror_Ptr      defl    $
 431+ E109             >
 431+ E109 8D 64       >                dw      Dict_Ptr + 2        // xt
 431+ E10B             >Heap_Ptr        defl    $ - $E000           // save current HP
 431+ E10B             >
 431+ E10B             >Current_HP      defl  $ - $E000             // used to set HP once!
 431+ E10B             >
 431+ E10B             >//              ______________________________________________________________________
 431+ E10B             >//              Dictionary part
 431+ E10B             >
 431+ E10B             >                org     Dict_Ptr
 431+ 648B             >
 431+ 648B 09 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 431+ 648D             >
 431+ 648D             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 431+ 648D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 431+ 648D ~           >
 431+ 648D ~           >
 431+ 648D             >                endif           ; ok        // for other definitions it "points" the correct handler
 431+ 648D             >                // Use of "; ok" to suppress "warning[fwdref]"
 431+ 648D             >
 431+ 648D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 432+ 648D 3E 00                        ld      a, $00              // "nop"
 433+ 648F 32 78 64                     ld      (Case_Sensitive), a
 434+ 6492                              next
 434+ 6492 DD E9       >                jp      (ix)
 435+ 6494
 436+ 6494              //  ______________________________________________________________________
 437+ 6494              //
 438+ 6494              //  upper       c1 -- c1 | c2
 439+ 6494              // character on top of stack is forced to Uppercase.
 440+ 6494                              New_Def UPPER, "UPPER", is_code, is_normal
 440+ 6494             >
 440+ 6494             >Dict_Ptr        defl    $
 440+ 6494             >
 440+ 6494             >//              ______________________________________________________________________
 440+ 6494             >//              Heap part
 440+ 6494             >
 440+ 6494             >
 440+ 6494             >                org     (Heap_Ptr & $1FFF) + $E000
 440+ E10B             >
 440+ E10B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 440+ E10B             >Latest_Definition defl  Heap_Ptr
 440+ E10B             >
 440+ E10B             >                // dummy db directives used to calculate length of namec
 440+ E10B 55 50 50 45 >                db      "UPPER"
 440+ E10F 52          >
 440+ E110             >len_NFA         defl    $ - temp_NFA
 440+ E110             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 440+ E10B             >
 440+ E10B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 440+ E10C 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 440+ E110 52          >
 440+ E111             >                org     $-1                 // alter last byte of Name just above to set
 440+ E110 D2          >                db      {b $} | END_BIT     // msb as name end
 440+ E111             >
 440+ E111 FF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 440+ E113             >Prev_Ptr        defl    Heap_Ptr
 440+ E113             >
 440+ E113             >mirror_Ptr      defl    $
 440+ E113             >
 440+ E113 96 64       >                dw      Dict_Ptr + 2        // xt
 440+ E115             >Heap_Ptr        defl    $ - $E000           // save current HP
 440+ E115             >
 440+ E115             >Current_HP      defl  $ - $E000             // used to set HP once!
 440+ E115             >
 440+ E115             >//              ______________________________________________________________________
 440+ E115             >//              Dictionary part
 440+ E115             >
 440+ E115             >                org     Dict_Ptr
 440+ 6494             >
 440+ 6494 13 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 440+ 6496             >
 440+ 6496             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 440+ 6496 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 440+ 6496 ~           >
 440+ 6496 ~           >
 440+ 6496             >                endif           ; ok        // for other definitions it "points" the correct handler
 440+ 6496             >                // Use of "; ok" to suppress "warning[fwdref]"
 440+ 6496             >
 440+ 6496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 441+ 6496 E1                           pop     hl
 442+ 6497 7D                           ld      a, l
 443+ 6498 CD 79 64                     call    Case_Upper
 444+ 649B 6F                           ld      l, a
 445+ 649C
 446+ 649C                              psh1
 446+ 649C E5          >                push    hl
 446+ 649D DD E9       >                jp      (ix)
 447+ 649F
 448+ 649F              //  ______________________________________________________________________
 449+ 649F
 450+ 649F              MMU7_read:
 451+ 649F 01 3B 24                     ld      bc, $243B
 452+ 64A2 3E 57                        ld      a, 87
 453+ 64A4 ED 79                        out     (c), a
 454+ 64A6 04                           inc     b
 455+ 64A7 ED 78                        in      a, (c)
 456+ 64A9 C9                           ret
 457+ 64AA
 458+ 64AA              //  ______________________________________________________________________
 459+ 64AA
 460+ 64AA              TO_FAR_rout:
 461+ 64AA 7C                           ld      a, h
 462+ 64AB 08                           ex      af, af
 463+ 64AC 7C                           ld      a, h
 464+ 64AD F6 E0                        or      $E0
 465+ 64AF 67                           ld      h, a
 466+ 64B0 08                           ex      af, af
 467+ 64B1 07                           rlca
 468+ 64B2 07                           rlca
 469+ 64B3 07                           rlca
 470+ 64B4 E6 07                        and     $07
 471+ 64B6 C6 20                        add     $20
 472+ 64B8 C9                           ret
 473+ 64B9
 474+ 64B9
 475+ 64B9              //  ______________________________________________________________________
 476+ 64B9              //
 477+ 64B9              // (find)       addr voc -- 0 | cfa b 1
 478+ 64B9              // vocabulary search,
 479+ 64B9              // - voc is starting word's NFA
 480+ 64B9              // - addr is the string to be searched for
 481+ 64B9              // On success, it returns the CFA of found word, the first NFA byte
 482+ 64B9              // (which contains length and some flags) and a true flag.
 483+ 64B9              // On fail, a false flag  (no more: leaves addr unchanged)
 484+ 64B9                              New_Def C_FIND, "(FIND)", is_code, is_normal
 484+ 64B9             >
 484+ 64B9             >Dict_Ptr        defl    $
 484+ 64B9             >
 484+ 64B9             >//              ______________________________________________________________________
 484+ 64B9             >//              Heap part
 484+ 64B9             >
 484+ 64B9             >
 484+ 64B9             >                org     (Heap_Ptr & $1FFF) + $E000
 484+ E115             >
 484+ E115             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ E115             >Latest_Definition defl  Heap_Ptr
 484+ E115             >
 484+ E115             >                // dummy db directives used to calculate length of namec
 484+ E115 28 46 49 4E >                db      "(FIND)"
 484+ E119 44 29       >
 484+ E11B             >len_NFA         defl    $ - temp_NFA
 484+ E11B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ E115             >
 484+ E115 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ E116 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 484+ E11A 44 29       >
 484+ E11C             >                org     $-1                 // alter last byte of Name just above to set
 484+ E11B A9          >                db      {b $} | END_BIT     // msb as name end
 484+ E11C             >
 484+ E11C 0B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 484+ E11E             >Prev_Ptr        defl    Heap_Ptr
 484+ E11E             >
 484+ E11E             >mirror_Ptr      defl    $
 484+ E11E             >
 484+ E11E BB 64       >                dw      Dict_Ptr + 2        // xt
 484+ E120             >Heap_Ptr        defl    $ - $E000           // save current HP
 484+ E120             >
 484+ E120             >Current_HP      defl  $ - $E000             // used to set HP once!
 484+ E120             >
 484+ E120             >//              ______________________________________________________________________
 484+ E120             >//              Dictionary part
 484+ E120             >
 484+ E120             >                org     Dict_Ptr
 484+ 64B9             >
 484+ 64B9 1E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 484+ 64BB             >
 484+ 64BB             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 64BB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 484+ 64BB ~           >
 484+ 64BB ~           >
 484+ 64BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 64BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 64BB             >
 484+ 64BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 64BB D9                           exx
 486+ 64BC CD 9F 64                     call    MMU7_read
 487+ 64BF D9                           exx
 488+ 64C0 6F                           ld      l, a
 489+ 64C1 D9                           exx
 490+ 64C2
 491+ 64C2 D1                           pop     de                      // de has dictionary pointer
 492+ 64C3              Find_VocabularyLoop:
 493+ 64C3 7A                               ld      a, d
 494+ 64C4 D6 60                            sub     $60
 495+ 64C6 30 08                            jr      nc, Find_far_endif
 496+ 64C8 EB                                   ex      de, hl
 497+ 64C9 CD AA 64                             call    TO_FAR_rout
 498+ 64CC EB                                   ex      de, hl
 499+ 64CD ED 92 57                             nextreg 87, a
 500+ 64D0              Find_far_endif:
 501+ 64D0 E1                               pop     hl                  // string pointer to search for
 502+ 64D1 E5                               push    hl                  // keep it on stack too for the end.
 503+ 64D2 1A                               ld      a, (de)             // save NFA length byte
 504+ 64D3 08                               ex      af,af'              // for later use (!)
 505+ 64D4 1A                               ld      a, (de)             // reload NFA length byte
 506+ 64D5 AE                               xor     (hl)                // check if same length
 507+ 64D6 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 508+ 64D8                                  // word and text haven't the same length, skip to next vocabulary entry
 509+ 64D8 20 33                            jr      nz, Find_DifferentLenght
 510+ 64DA
 511+ 64DA              Find_ThisWord:      // begin loop
 512+ 64DA 23                                   inc     hl
 513+ 64DB 13                                   inc     de
 514+ 64DC 1A                                   ld      a, (de)
 515+ 64DD                                      // case insensitive option - begin
 516+ 64DD                                      // push    bc
 517+ 64DD E6 80                                and     $80                 // split A in msb and the rest
 518+ 64DF 47                                   ld      b, a
 519+ 64E0 1A                                   ld      a, (de)
 520+ 64E1 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 521+ 64E3 CD 78 64                             call    Case_Sensitive      // uppercase routine
 522+ 64E6 4F                                   ld      c, a
 523+ 64E7 7E                                   ld      a, (hl)
 524+ 64E8 CD 78 64                             call    Case_Sensitive      // uppercase routine
 525+ 64EB A9                                   xor     c
 526+ 64EC A8                                   xor     b
 527+ 64ED                                      // pop     bc
 528+ 64ED                                      // case insensitive option - end
 529+ 64ED 87                                   add     a                   // ignore msb during compare
 530+ 64EE 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 531+ 64F0
 532+ 64F0                                  // loop back until last byte msb is found set
 533+ 64F0                                  // that bit marks the ending char of this word
 534+ 64F0 30 E8                            jr      nc, Find_ThisWord
 535+ 64F2
 536+ 64F2                                  // match found !
 537+ 64F2 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 538+ 64F5 19                               add     hl, de
 539+ 64F6
 540+ 64F6                              //  ld      a, h
 541+ 64F6                              //  and     $E0
 542+ 64F6                              //  xor     h
 543+ 64F6                              //  jr      nz, Non_MMU7
 544+ 64F6                                  //  call    MMU7_read
 545+ 64F6                                  //  dec     a
 546+ 64F6                                  //  jr      z, Non_MMU7
 547+ 64F6 5E                                       ld      e, (hl)
 548+ 64F7 23                                       inc     hl
 549+ 64F8 56                                       ld      d, (hl)
 550+ 64F9 EB                                       ex      de, hl
 551+ 64FA              //Non_MMU7:
 552+ 64FA E3                               ex      (sp), hl            // CFA on stack and drop addr
 553+ 64FB 08                               ex      af, af'             // retrieve NFA byte (!)
 554+ 64FC 5F                               ld      e, a
 555+ 64FD 16 00                            ld      d, 0
 556+ 64FF 21 FF FF                         ld      hl, -1
 557+ 6502 D5                               push    de
 558+ 6503 E5                               push    hl
 559+ 6504 D9                               exx
 560+ 6505 7D                               ld      a, l
 561+ 6506 ED 92 57                         nextreg 87, a
 562+ 6509                                  next
 562+ 6509 DD E9       >                jp      (ix)
 563+ 650B
 564+ 650B              Find_DidntMatch: // didn't match (*)
 565+ 650B 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 566+ 650D
 567+ 650D              Find_DifferentLenght:
 568+ 650D                                  // consume chars until the end of the word
 569+ 650D                                  // that is last byte msb is found set
 570+ 650D 13                                   inc     de
 571+ 650E 1A                                   ld      a, (de)
 572+ 650F 87                                   add     a, a
 573+ 6510 30 FB                            jr      nc, Find_DifferentLenght
 574+ 6512
 575+ 6512              Find_WordEnd:   // word-end  found (**)
 576+ 6512                                  // take LFA and use it
 577+ 6512 13                               inc     de
 578+ 6513 EB                               ex      de, hl
 579+ 6514 5E                               ld      e, (hl)
 580+ 6515 23                               inc     hl
 581+ 6516 56                               ld      d, (hl)
 582+ 6517 7A                               ld      a, d
 583+ 6518 B3                               or      e
 584+ 6519
 585+ 6519                              // loop until end of vocabulary
 586+ 6519 20 A8                        jr      nz, Find_VocabularyLoop
 587+ 651B
 588+ 651B E1                           pop     hl              // without this, leaves addr unchanged
 589+ 651C 21 00 00                     ld      hl, 0
 590+ 651F E5                           push    hl
 591+ 6520 D9                           exx
 592+ 6521 7D                           ld      a, l
 593+ 6522 ED 92 57                     nextreg 87, a
 594+ 6525                              next
 594+ 6525 DD E9       >                jp      (ix)
 595+ 6527
 596+ 6527              //  ______________________________________________________________________
 597+ 6527              //
 598+ 6527              // enclose      a c -- a  n1 n2 n3
 599+ 6527              // starting from a, using delimiter c, determines the offsets:
 600+ 6527              //   n1   the first character non-delimiter
 601+ 6527              //   n2   the first delimiter after the text
 602+ 6527              //   n3   the first character non enclosed.
 603+ 6527              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 604+ 6527              // an uncoditional delimiter.
 605+ 6527              // Examples:
 606+ 6527              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 607+ 6527              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 608+ 6527              // iii:	c  c  'nul'          -- 2  3  2
 609+ 6527                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 609+ 6527             >
 609+ 6527             >Dict_Ptr        defl    $
 609+ 6527             >
 609+ 6527             >//              ______________________________________________________________________
 609+ 6527             >//              Heap part
 609+ 6527             >
 609+ 6527             >
 609+ 6527             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ E120             >
 609+ E120             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ E120             >Latest_Definition defl  Heap_Ptr
 609+ E120             >
 609+ E120             >                // dummy db directives used to calculate length of namec
 609+ E120 45 4E 43 4C >                db      "ENCLOSE"
 609+ E124 4F 53 45    >
 609+ E127             >len_NFA         defl    $ - temp_NFA
 609+ E127             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ E120             >
 609+ E120 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ E121 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 609+ E125 4F 53 45    >
 609+ E128             >                org     $-1                 // alter last byte of Name just above to set
 609+ E127 C5          >                db      {b $} | END_BIT     // msb as name end
 609+ E128             >
 609+ E128 15 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ E12A             >Prev_Ptr        defl    Heap_Ptr
 609+ E12A             >
 609+ E12A             >mirror_Ptr      defl    $
 609+ E12A             >
 609+ E12A 29 65       >                dw      Dict_Ptr + 2        // xt
 609+ E12C             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ E12C             >
 609+ E12C             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ E12C             >
 609+ E12C             >//              ______________________________________________________________________
 609+ E12C             >//              Dictionary part
 609+ E12C             >
 609+ E12C             >                org     Dict_Ptr
 609+ 6527             >
 609+ 6527 2A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 6529             >
 609+ 6529             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 6529 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 609+ 6529 ~           >
 609+ 6529 ~           >
 609+ 6529             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 6529             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 6529             >
 609+ 6529             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 6529 D9                           exx
 611+ 652A D1                           pop     de                  //  e has the character
 612+ 652B E1                           pop     hl                  // hl has the string address
 613+ 652C E5                           push    hl
 614+ 652D 7B                           ld      a, e
 615+ 652E 11 FF FF                     ld      de, -1              // let's start from -1
 616+ 6531 2B                           dec     hl
 617+ 6532              Enclose_NonDelimiter:
 618+ 6532                              // find first non delimiter
 619+ 6532 23                               inc     hl
 620+ 6533 13                               inc     de
 621+ 6534 BE                               cp      (hl)
 622+ 6535 28 FB                        jr      z, Enclose_NonDelimiter
 623+ 6537 D5                           push    de
 624+ 6538
 625+ 6538                              // push    bc                  // save Instruction Pointer
 626+ 6538
 627+ 6538 4F                           ld      c, a                // save char
 628+ 6539 7E                           ld      a, (hl)
 629+ 653A A7                           and     a                   // stop if 0x00
 630+ 653B 20 07                        jr      nz, Enclose_NextChar
 631+ 653D                              /// case iii. no more character in string
 632+ 653D                                  // pop     bc                  // restore Instruction Pointer
 633+ 653D 13                               inc     de
 634+ 653E D5                               push    de
 635+ 653F 1B                               dec     de
 636+ 6540 D5                               push    de
 637+ 6541 D9                               exx
 638+ 6542                                  next
 638+ 6542 DD E9       >                jp      (ix)
 639+ 6544              Enclose_NextChar:
 640+ 6544 79                               ld      a, c
 641+ 6545 23                               inc     hl
 642+ 6546 13                               inc     de
 643+ 6547 BE                               cp      (hl)
 644+ 6548 20 06                            jr      nz, Enclose_NonSeparator
 645+ 654A                                      // case i. first non enclosed
 646+ 654A                                      // pop     bc                  // restore Instruction Pointer
 647+ 654A D5                                   push    de
 648+ 654B 13                                   inc     de
 649+ 654C D5                                   push    de
 650+ 654D D9                                   exx
 651+ 654E                                      next
 651+ 654E DD E9       >                jp      (ix)
 652+ 6550              Enclose_NonSeparator:
 653+ 6550 7E                               ld      a, (hl)
 654+ 6551 A7                               and     a
 655+ 6552 20 F0                        jr      nz, Enclose_NextChar
 656+ 6554
 657+ 6554                              // case ii. separator & terminator
 658+ 6554                              // pop     bc                  // restore Instruction Pointer
 659+ 6554 D5                           push    de
 660+ 6555 D5                           push    de
 661+ 6556 D9                           exx
 662+ 6557                              next
 662+ 6557 DD E9       >                jp      (ix)
 663+ 6559
 664+ 6559              //  ______________________________________________________________________
 665+ 6559              //
 666+ 6559              // (map)        a2 a1 n c1 -- c2
 667+ 6559              // translate character c1 using mapping string a2 and a2
 668+ 6559              // if c1 is not present within string a1 then
 669+ 6559              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 670+ 6559                              New_Def C_MAP, "(MAP)", is_code, is_normal
 670+ 6559             >
 670+ 6559             >Dict_Ptr        defl    $
 670+ 6559             >
 670+ 6559             >//              ______________________________________________________________________
 670+ 6559             >//              Heap part
 670+ 6559             >
 670+ 6559             >
 670+ 6559             >                org     (Heap_Ptr & $1FFF) + $E000
 670+ E12C             >
 670+ E12C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 670+ E12C             >Latest_Definition defl  Heap_Ptr
 670+ E12C             >
 670+ E12C             >                // dummy db directives used to calculate length of namec
 670+ E12C 28 4D 41 50 >                db      "(MAP)"
 670+ E130 29          >
 670+ E131             >len_NFA         defl    $ - temp_NFA
 670+ E131             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 670+ E12C             >
 670+ E12C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 670+ E12D 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 670+ E131 29          >
 670+ E132             >                org     $-1                 // alter last byte of Name just above to set
 670+ E131 A9          >                db      {b $} | END_BIT     // msb as name end
 670+ E132             >
 670+ E132 20 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 670+ E134             >Prev_Ptr        defl    Heap_Ptr
 670+ E134             >
 670+ E134             >mirror_Ptr      defl    $
 670+ E134             >
 670+ E134 5B 65       >                dw      Dict_Ptr + 2        // xt
 670+ E136             >Heap_Ptr        defl    $ - $E000           // save current HP
 670+ E136             >
 670+ E136             >Current_HP      defl  $ - $E000             // used to set HP once!
 670+ E136             >
 670+ E136             >//              ______________________________________________________________________
 670+ E136             >//              Dictionary part
 670+ E136             >
 670+ E136             >                org     Dict_Ptr
 670+ 6559             >
 670+ 6559 34 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 670+ 655B             >
 670+ 655B             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 670+ 655B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 670+ 655B ~           >
 670+ 655B ~           >
 670+ 655B             >                endif           ; ok        // for other definitions it "points" the correct handler
 670+ 655B             >                // Use of "; ok" to suppress "warning[fwdref]"
 670+ 655B             >
 670+ 655B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 671+ 655B D9                           exx
 672+ 655C E1                           pop     hl
 673+ 655D 7D                           ld      a, l
 674+ 655E C1                           pop     bc
 675+ 655F E1                           pop     hl
 676+ 6560 50                           ld      d, b
 677+ 6561 59                           ld      e, c
 678+ 6562 ED B1                        cpir
 679+ 6564 E1                           pop     hl
 680+ 6565 20 05                        jr      nz, C_Map_Then
 680+ 6567
 681+ 6567 19                               add     hl, de
 682+ 6568 2B                               dec     hl
 683+ 6569 ED 42                            sbc     hl, bc
 684+ 656B 7E                               ld      a, (hl)
 685+ 656C              C_Map_Then:
 686+ 656C 6F                           ld      l, a
 687+ 656D 26 00                        ld      h, 0
 688+ 656F E5                           push    hl
 689+ 6570 D9                           exx
 690+ 6571                              next
 690+ 6571 DD E9       >                jp      (ix)
 691+ 6573
 692+ 6573              //  ______________________________________________________________________
 693+ 6573              //
 694+ 6573              // (compare)    a1 a2 n -- b
 695+ 6573              // this word performs a lexicographic compare of n bytes of text at address a1
 696+ 6573              // with n bytes of text at address a2. It returns numeric a value:
 697+ 6573              //  0 : if strings are equal
 698+ 6573              // +1 : if string at a1 greater than string at a2
 699+ 6573              // -1 : if string at a1 less than string at a2
 700+ 6573              // strings can be 256 bytes in length at most.
 701+ 6573                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 701+ 6573             >
 701+ 6573             >Dict_Ptr        defl    $
 701+ 6573             >
 701+ 6573             >//              ______________________________________________________________________
 701+ 6573             >//              Heap part
 701+ 6573             >
 701+ 6573             >
 701+ 6573             >                org     (Heap_Ptr & $1FFF) + $E000
 701+ E136             >
 701+ E136             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 701+ E136             >Latest_Definition defl  Heap_Ptr
 701+ E136             >
 701+ E136             >                // dummy db directives used to calculate length of namec
 701+ E136 28 43 4F 4D >                db      "(COMPARE)"
 701+ E13A 50 41 52 45 >
 701+ E13E 29          >
 701+ E13F             >len_NFA         defl    $ - temp_NFA
 701+ E13F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 701+ E136             >
 701+ E136 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 701+ E137 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 701+ E13B 50 41 52 45 >
 701+ E13F 29          >
 701+ E140             >                org     $-1                 // alter last byte of Name just above to set
 701+ E13F A9          >                db      {b $} | END_BIT     // msb as name end
 701+ E140             >
 701+ E140 2C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 701+ E142             >Prev_Ptr        defl    Heap_Ptr
 701+ E142             >
 701+ E142             >mirror_Ptr      defl    $
 701+ E142             >
 701+ E142 75 65       >                dw      Dict_Ptr + 2        // xt
 701+ E144             >Heap_Ptr        defl    $ - $E000           // save current HP
 701+ E144             >
 701+ E144             >Current_HP      defl  $ - $E000             // used to set HP once!
 701+ E144             >
 701+ E144             >//              ______________________________________________________________________
 701+ E144             >//              Dictionary part
 701+ E144             >
 701+ E144             >                org     Dict_Ptr
 701+ 6573             >
 701+ 6573 42 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 701+ 6575             >
 701+ 6575             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 701+ 6575 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 701+ 6575 ~           >
 701+ 6575 ~           >
 701+ 6575             >                endif           ; ok        // for other definitions it "points" the correct handler
 701+ 6575             >                // Use of "; ok" to suppress "warning[fwdref]"
 701+ 6575             >
 701+ 6575             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 702+ 6575 D9                           exx
 703+ 6576 E1                           pop     hl                  // Number of bytes
 704+ 6577 7D                           ld      a, l
 705+ 6578 E1                           pop     hl                  // hl points string a2
 706+ 6579 D1                           pop     de                  // hl points string a1
 707+ 657A              //              push    bc                  // Instruction pointer on stack
 708+ 657A 47                           ld      b, a
 709+ 657B              C_Compare_Loop:
 710+ 657B 7E                               ld      a, (hl)
 711+ 657C CD 78 64                         call    Case_Sensitive
 712+ 657F 4F                               ld      c, a
 713+ 6580 1A                               ld      a, (de)
 714+ 6581 CD 78 64                         call    Case_Sensitive
 715+ 6584 B9                               cp      c
 716+ 6585 13                               inc     de
 717+ 6586 23                               inc     hl
 718+ 6587 28 0E                            jr      z, C_Compare_Equal
 719+ 6589 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 720+ 658B 21 01 00                                 ld      hl, 1               // a1 gt a2
 721+ 658E 18 03                                jr      C_Compare_Then      // Else
 722+ 6590              C_Compare_NotLessThan:
 723+ 6590 21 FF FF                                 ld      hl, -1              // a1 lt a2
 724+ 6593              C_Compare_Then:                                 // Endif
 725+ 6593              //                      pop     bc              // restore Instruction Pointer
 726+ 6593 E5                                   push    hl
 727+ 6594 D9                                   exx
 728+ 6595
 729+ 6595                                      next
 729+ 6595 DD E9       >                jp      (ix)
 730+ 6597
 731+ 6597              C_Compare_Equal:
 732+ 6597 10 E2                        djnz    C_Compare_Loop
 733+ 6599 21 00 00                     ld      hl, 0               // a1 eq a2
 734+ 659C              //              pop     bc                  // restore Instruction Pointer
 735+ 659C E5                           push    hl
 736+ 659D D9                           exx
 737+ 659E
 738+ 659E                              next
 738+ 659E DD E9       >                jp      (ix)
 739+ 65A0
 740+ 65A0              //  ______________________________________________________________________
 741+ 65A0              //
 742+ 65A0              // emitc        c --
 743+ 65A0              // low level emit, calls ROM routine at #10 to send a character to
 744+ 65A0              // the the current channel (see SELECT to change stream-channel)
 745+ 65A0                              New_Def EMITC, "EMITC", is_code, is_normal
 745+ 65A0             >
 745+ 65A0             >Dict_Ptr        defl    $
 745+ 65A0             >
 745+ 65A0             >//              ______________________________________________________________________
 745+ 65A0             >//              Heap part
 745+ 65A0             >
 745+ 65A0             >
 745+ 65A0             >                org     (Heap_Ptr & $1FFF) + $E000
 745+ E144             >
 745+ E144             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 745+ E144             >Latest_Definition defl  Heap_Ptr
 745+ E144             >
 745+ E144             >                // dummy db directives used to calculate length of namec
 745+ E144 45 4D 49 54 >                db      "EMITC"
 745+ E148 43          >
 745+ E149             >len_NFA         defl    $ - temp_NFA
 745+ E149             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 745+ E144             >
 745+ E144 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 745+ E145 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 745+ E149 43          >
 745+ E14A             >                org     $-1                 // alter last byte of Name just above to set
 745+ E149 C3          >                db      {b $} | END_BIT     // msb as name end
 745+ E14A             >
 745+ E14A 36 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 745+ E14C             >Prev_Ptr        defl    Heap_Ptr
 745+ E14C             >
 745+ E14C             >mirror_Ptr      defl    $
 745+ E14C             >
 745+ E14C A2 65       >                dw      Dict_Ptr + 2        // xt
 745+ E14E             >Heap_Ptr        defl    $ - $E000           // save current HP
 745+ E14E             >
 745+ E14E             >Current_HP      defl  $ - $E000             // used to set HP once!
 745+ E14E             >
 745+ E14E             >//              ______________________________________________________________________
 745+ E14E             >//              Dictionary part
 745+ E14E             >
 745+ E14E             >                org     Dict_Ptr
 745+ 65A0             >
 745+ 65A0 4C 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 745+ 65A2             >
 745+ 65A2             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 745+ 65A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 745+ 65A2 ~           >
 745+ 65A2 ~           >
 745+ 65A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 745+ 65A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 745+ 65A2             >
 745+ 65A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 746+ 65A2 E1                           pop     hl
 747+ 65A3 7D                           ld      a, l
 748+ 65A4              Emitc_Ptr:
 749+ 65A4 C5                           push    bc
 750+ 65A5 D5                           push    de
 751+ 65A6 DD E5                        push    ix
 752+ 65A8 D7                           rst     $10
 753+ 65A9 DD E1                        pop     ix
 754+ 65AB D1                           pop     de
 755+ 65AC C1                           pop     bc
 756+ 65AD 3E FF                        ld      a, 255            // max possible
 757+ 65AF 32 8C 5C                     ld      (SCR_CT), a
 758+ 65B2                              next
 758+ 65B2 DD E9       >                jp      (ix)
 759+ 65B4
 760+ 65B4              //  ______________________________________________________________________
 761+ 65B4              //
 762+ 65B4              // cr           --
 763+ 65B4              // send a CR via EMITC
 764+ 65B4                              New_Def CR, "CR", is_code, is_normal
 764+ 65B4             >
 764+ 65B4             >Dict_Ptr        defl    $
 764+ 65B4             >
 764+ 65B4             >//              ______________________________________________________________________
 764+ 65B4             >//              Heap part
 764+ 65B4             >
 764+ 65B4             >
 764+ 65B4             >                org     (Heap_Ptr & $1FFF) + $E000
 764+ E14E             >
 764+ E14E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 764+ E14E             >Latest_Definition defl  Heap_Ptr
 764+ E14E             >
 764+ E14E             >                // dummy db directives used to calculate length of namec
 764+ E14E 43 52       >                db      "CR"
 764+ E150             >len_NFA         defl    $ - temp_NFA
 764+ E150             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 764+ E14E             >
 764+ E14E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 764+ E14F 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 764+ E151             >                org     $-1                 // alter last byte of Name just above to set
 764+ E150 D2          >                db      {b $} | END_BIT     // msb as name end
 764+ E151             >
 764+ E151 44 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 764+ E153             >Prev_Ptr        defl    Heap_Ptr
 764+ E153             >
 764+ E153             >mirror_Ptr      defl    $
 764+ E153             >
 764+ E153 B6 65       >                dw      Dict_Ptr + 2        // xt
 764+ E155             >Heap_Ptr        defl    $ - $E000           // save current HP
 764+ E155             >
 764+ E155             >Current_HP      defl  $ - $E000             // used to set HP once!
 764+ E155             >
 764+ E155             >//              ______________________________________________________________________
 764+ E155             >//              Dictionary part
 764+ E155             >
 764+ E155             >                org     Dict_Ptr
 764+ 65B4             >
 764+ 65B4 53 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 764+ 65B6             >
 764+ 65B6             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 764+ 65B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 764+ 65B6 ~           >
 764+ 65B6 ~           >
 764+ 65B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 764+ 65B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 764+ 65B6             >
 764+ 65B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 765+ 65B6
 766+ 65B6 3E 0D                        ld      a, CR_CHAR
 767+ 65B8 18 EA                        jr      Emitc_Ptr
 768+ 65BA
 769+ 65BA              Emitc_Vec:
 770+ 65BA F3 65                        dw      C_Emit_Printable  // comma
 771+ 65BC FA 65                        dw      C_Emit_Bel        // bel
 772+ 65BE F3 65                        dw      C_Emit_Printable  // bs
 773+ 65C0 12 66                        dw      C_Emit_Tab        // tab
 774+ 65C2 F3 65                        dw      C_Emit_Printable  // cr
 775+ 65C4 19 66                        dw      C_Emit_NL         // lf (unix newline)
 776+ 65C6 F3 65                        dw      C_Emit_Printable  // blank
 777+ 65C8 F3 65                        dw      C_Emit_Printable  // blank
 778+ 65CA
 779+ 65CA              Emit_Selector_Start:
 780+ 65CA 06                           db      $06                 // comma
 781+ 65CB 07                           db      $07                 // bel
 782+ 65CC 08                           db      $08                 // bs
 783+ 65CD 09                           db      $09                 // tab
 784+ 65CE 0D                           db      $0D                 // cr
 785+ 65CF 0A                           db      $0A                 // lf (unix newline)
 786+ 65D0 20                           db      $20
 787+ 65D1              Emit_Selector_End:
 788+ 65D1 20                           db      $20
 789+ 65D2
 790+ 65D2              //  ______________________________________________________________________
 791+ 65D2              //
 792+ 65D2              // (?emit)      c1 -- c2 | c1
 793+ 65D2              // decode a character to be sent via EMIT
 794+ 65D2              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 795+ 65D2              // the routine should resolve anything and convert the character anyway.
 796+ 65D2                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 796+ 65D2             >
 796+ 65D2             >Dict_Ptr        defl    $
 796+ 65D2             >
 796+ 65D2             >//              ______________________________________________________________________
 796+ 65D2             >//              Heap part
 796+ 65D2             >
 796+ 65D2             >
 796+ 65D2             >                org     (Heap_Ptr & $1FFF) + $E000
 796+ E155             >
 796+ E155             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 796+ E155             >Latest_Definition defl  Heap_Ptr
 796+ E155             >
 796+ E155             >                // dummy db directives used to calculate length of namec
 796+ E155 28 3F 45 4D >                db      "(?EMIT)"
 796+ E159 49 54 29    >
 796+ E15C             >len_NFA         defl    $ - temp_NFA
 796+ E15C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 796+ E155             >
 796+ E155 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 796+ E156 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 796+ E15A 49 54 29    >
 796+ E15D             >                org     $-1                 // alter last byte of Name just above to set
 796+ E15C A9          >                db      {b $} | END_BIT     // msb as name end
 796+ E15D             >
 796+ E15D 4E 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 796+ E15F             >Prev_Ptr        defl    Heap_Ptr
 796+ E15F             >
 796+ E15F             >mirror_Ptr      defl    $
 796+ E15F             >
 796+ E15F D4 65       >                dw      Dict_Ptr + 2        // xt
 796+ E161             >Heap_Ptr        defl    $ - $E000           // save current HP
 796+ E161             >
 796+ E161             >Current_HP      defl  $ - $E000             // used to set HP once!
 796+ E161             >
 796+ E161             >//              ______________________________________________________________________
 796+ E161             >//              Dictionary part
 796+ E161             >
 796+ E161             >                org     Dict_Ptr
 796+ 65D2             >
 796+ 65D2 5F 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 796+ 65D4             >
 796+ 65D4             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 796+ 65D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 796+ 65D4 ~           >
 796+ 65D4 ~           >
 796+ 65D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 796+ 65D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 796+ 65D4             >
 796+ 65D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 797+ 65D4 D9                           exx
 798+ 65D5 D1                           pop     de
 799+ 65D6 7B                           ld      a, e                //  de has c1
 800+ 65D7 E6 7F                        and     $7F                 // 7-bit ascii only
 801+ 65D9                              // push    bc                  // save Instruction Pointer
 802+ 65D9 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 803+ 65DC 21 D1 65                     ld      hl, Emit_Selector_End
 804+ 65DF ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 805+ 65E1 20 0A                        jr      nz, C_Emit_Not_Found
 806+ 65E3                                  // Found then decode it
 807+ 65E3 21 BA 65                         ld      hl, Emitc_Vec
 808+ 65E6 09                               add     hl, bc
 809+ 65E7 09                               add     hl, bc
 810+ 65E8 5E                               ld      e, (hl)
 811+ 65E9 23                               inc     hl
 812+ 65EA 56                               ld      d, (hl)
 813+ 65EB EB                               ex      de, hl
 814+ 65EC                                  // pop     bc                  // restore Instruction Pointer
 815+ 65EC E9                               jp      (hl)                // one of the following labels
 816+ 65ED              C_Emit_Not_Found:
 817+ 65ED                              // pop     bc                  // restore Instruction Pointer
 818+ 65ED FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 819+ 65EF 30 02                        jr      nc, C_Emit_Printable
 820+ 65F1 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 821+ 65F3              C_Emit_Printable:
 822+ 65F3 6F                           ld      l, a
 823+ 65F4 26 00                        ld      h, 0
 824+ 65F6 E5                           push    hl
 825+ 65F7 D9                           exx
 826+ 65F8                              next
 826+ 65F8 DD E9       >                jp      (ix)
 827+ 65FA
 828+ 65FA              C_Emit_Bel:
 829+ 65FA D9                            exx
 830+ 65FB C5                           push    bc                  // save Instruction Pointer
 831+ 65FC D5                           push    de
 832+ 65FD 11 00 01                     ld      de, $0100
 833+ 6600 21 00 02                     ld      hl, $0200
 834+ 6603 DD E5                        push    ix                  // save Next Pointer
 835+ 6605 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 836+ 6608 DD E1                        pop     ix                  // restore Next Pointer
 837+ 660A D1                           pop     de
 838+ 660B C1                           pop     bc                  // restore Instruction Pointer
 839+ 660C 21 00 00                     ld      hl, NUL_CHAR
 840+ 660F E5                           push    hl
 841+ 6610                              next
 841+ 6610 DD E9       >                jp      (ix)
 842+ 6612
 843+ 6612 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 844+ 6615 E5                           push    hl
 845+ 6616 D9                           exx
 846+ 6617                              next
 846+ 6617 DD E9       >                jp      (ix)
 847+ 6619
 848+ 6619 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 849+ 661C E5                           push    hl
 850+ 661D D9                           exx
 851+ 661E                              next
 851+ 661E DD E9       >                jp      (ix)
 852+ 6620
 853+ 6620              //  ______________________________________________________________________
 854+ 6620
 855+ 6620              Key_Table:
 856+ 6620 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 857+ 6621 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 858+ 6622 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 859+ 6623 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 860+ 6624 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 861+ 6625 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 862+ 6626 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 863+ 6627 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 864+ 6628 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 865+ 6629 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 866+ 662A C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 867+ 662B              Key_MapTo:
 868+ 662B 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 869+ 662C 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 870+ 662D 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 871+ 662E 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 872+ 662F 5D                           db      $5D                 //  6: SYMBOL+U : ]
 873+ 6630 5B                           db      $5B                 //  5: SYMBOL+Y : [
 874+ 6631 7D                           db      $7D                 //  4: SYMBOL+G : }
 875+ 6632 7B                           db      $7B                 //  3: SYMBOL+F : {
 876+ 6633 5C                           db      $5C                 //  2: SYMBOl+D : //
 877+ 6634 7C                           db      $7C                 //  1: SYMBOL+S : |
 878+ 6635 7E                           db      $7E                 //  0: SYMBOL+A : ~
 879+ 6636
 880+ 6636              //  ______________________________________________________________________
 881+ 6636              //
 882+ 6636              // curs         -- c
 883+ 6636              // wait for a keypress
 884+ 6636              // This definition need Standard ROM Interrupt to be served
 885+ 6636
 886+ 6636                              New_Def CUR, "CURS", is_code, is_normal
 886+ 6636             >
 886+ 6636             >Dict_Ptr        defl    $
 886+ 6636             >
 886+ 6636             >//              ______________________________________________________________________
 886+ 6636             >//              Heap part
 886+ 6636             >
 886+ 6636             >
 886+ 6636             >                org     (Heap_Ptr & $1FFF) + $E000
 886+ E161             >
 886+ E161             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 886+ E161             >Latest_Definition defl  Heap_Ptr
 886+ E161             >
 886+ E161             >                // dummy db directives used to calculate length of namec
 886+ E161 43 55 52 53 >                db      "CURS"
 886+ E165             >len_NFA         defl    $ - temp_NFA
 886+ E165             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 886+ E161             >
 886+ E161 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 886+ E162 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 886+ E166             >                org     $-1                 // alter last byte of Name just above to set
 886+ E165 D3          >                db      {b $} | END_BIT     // msb as name end
 886+ E166             >
 886+ E166 55 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 886+ E168             >Prev_Ptr        defl    Heap_Ptr
 886+ E168             >
 886+ E168             >mirror_Ptr      defl    $
 886+ E168             >
 886+ E168 38 66       >                dw      Dict_Ptr + 2        // xt
 886+ E16A             >Heap_Ptr        defl    $ - $E000           // save current HP
 886+ E16A             >
 886+ E16A             >Current_HP      defl  $ - $E000             // used to set HP once!
 886+ E16A             >
 886+ E16A             >//              ______________________________________________________________________
 886+ E16A             >//              Dictionary part
 886+ E16A             >
 886+ E16A             >                org     Dict_Ptr
 886+ 6636             >
 886+ 6636 68 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 886+ 6638             >
 886+ 6638             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 886+ 6638 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 886+ 6638 ~           >
 886+ 6638 ~           >
 886+ 6638             >                endif           ; ok        // for other definitions it "points" the correct handler
 886+ 6638             >                // Use of "; ok" to suppress "warning[fwdref]"
 886+ 6638             >
 886+ 6638             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 887+ 6638
 888+ 6638 C5                           push    bc                  // save Instruction Pointer
 889+ 6639 D5                           push    de                  // save Return Stack Pointer
 890+ 663A DD E5                        push    ix
 891+ 663C ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 892+ 6640 31 61 63                     ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 893+ 6643 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 894+ 6647
 895+ 6647              Cur_Wait:
 896+ 6647 76                               halt
 897+ 6648 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 898+ 664A CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 899+ 664D
 900+ 664D                                  // software-flash: flips face every 320 ms
 901+ 664D 3E 20                            ld      a, $20              // Timing based
 902+ 664F FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 903+ 6652
 904+ 6652 3A 8E 63                         ld      a, (Block_Face)     // see origin.asm
 905+ 6655 20 0C                            jr      nz, Cur_Cursor
 906+ 6657 3A 8F 63                             ld      a, (Half_Face)      // see origin.asm
 907+ 665A FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 908+ 665E 28 03                                jr      z, Cur_Cursor
 909+ 6660 3A 90 63                                 ld      a, (Underscore_Face) // see origin
 910+ 6663              Cur_Cursor:
 911+ 6663 D7                               rst     $10
 912+ 6664 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 913+ 6666 D7                               rst     $10
 914+ 6667
 915+ 6667 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 916+ 666B 28 DA                        jr      z, Cur_Wait
 917+ 666D
 918+ 666D 76                           halt    // this is to sync flashing cursor.
 919+ 666E
 920+ 666E 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 921+ 6670 D7                           rst     $10
 922+ 6671 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 923+ 6673 D7                           rst     $10
 924+ 6674
 925+ 6674 ED 7B 92 63                  ld      sp, (SP_Saved)
 926+ 6678
 927+ 6678 DD E1                        pop     ix
 928+ 667A D1                           pop     de                  // Restore Return Stack Pointer
 929+ 667B C1                           pop     bc                  // Restore Instruction Pointer
 930+ 667C                              next
 930+ 667C DD E9       >                jp      (ix)
 931+ 667E
 932+ 667E
 933+ 667E              //  ______________________________________________________________________
 934+ 667E              //
 935+ 667E              // key          -- c
 936+ 667E              // This definition need Standard ROM Interrupt to be served
 937+ 667E
 938+ 667E                              New_Def KEY, "KEY", is_code, is_normal
 938+ 667E             >
 938+ 667E             >Dict_Ptr        defl    $
 938+ 667E             >
 938+ 667E             >//              ______________________________________________________________________
 938+ 667E             >//              Heap part
 938+ 667E             >
 938+ 667E             >
 938+ 667E             >                org     (Heap_Ptr & $1FFF) + $E000
 938+ E16A             >
 938+ E16A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 938+ E16A             >Latest_Definition defl  Heap_Ptr
 938+ E16A             >
 938+ E16A             >                // dummy db directives used to calculate length of namec
 938+ E16A 4B 45 59    >                db      "KEY"
 938+ E16D             >len_NFA         defl    $ - temp_NFA
 938+ E16D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 938+ E16A             >
 938+ E16A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 938+ E16B 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 938+ E16E             >                org     $-1                 // alter last byte of Name just above to set
 938+ E16D D9          >                db      {b $} | END_BIT     // msb as name end
 938+ E16E             >
 938+ E16E 61 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 938+ E170             >Prev_Ptr        defl    Heap_Ptr
 938+ E170             >
 938+ E170             >mirror_Ptr      defl    $
 938+ E170             >
 938+ E170 80 66       >                dw      Dict_Ptr + 2        // xt
 938+ E172             >Heap_Ptr        defl    $ - $E000           // save current HP
 938+ E172             >
 938+ E172             >Current_HP      defl  $ - $E000             // used to set HP once!
 938+ E172             >
 938+ E172             >//              ______________________________________________________________________
 938+ E172             >//              Dictionary part
 938+ E172             >
 938+ E172             >                org     Dict_Ptr
 938+ 667E             >
 938+ 667E 70 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 938+ 6680             >
 938+ 6680             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 938+ 6680 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 938+ 6680 ~           >
 938+ 6680 ~           >
 938+ 6680             >                endif           ; ok        // for other definitions it "points" the correct handler
 938+ 6680             >                // Use of "; ok" to suppress "warning[fwdref]"
 938+ 6680             >
 938+ 6680             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 939+ 6680
 940+ 6680 C5                           push    bc                  // Save Instruction Pointer
 941+ 6681
 942+ 6681              Key_Wait:
 943+ 6681 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 944+ 6685 28 FA                        jr      z, Key_Wait
 945+ 6687
 946+ 6687 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 947+ 668A
 948+ 668A                              // decode character from above table
 949+ 668A 21 20 66                     ld      hl, Key_Table
 950+ 668D 01 0B 00                     ld      bc, $000B
 951+ 6690 ED B1                        cpir
 952+ 6692 20 05                        jr      nz, Key_DontMap
 953+ 6694 21 2B 66                         ld      hl, Key_MapTo
 954+ 6697 09                               add     hl, bc
 955+ 6698 7E                               ld      a, (hl)
 956+ 6699 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 957+ 669B 20 09                        jr      nz, Key_NoCapsLock
 958+ 669D 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 959+ 66A0 7E                               ld      a, (hl)
 960+ 66A1 EE 08                            xor     $08
 961+ 66A3 77                               ld      (hl), a
 962+ 66A4 3E 00                            ld      a, NUL_CHAR
 963+ 66A6 6F           Key_NoCapsLock: ld      l, a
 964+ 66A7 26 00                        ld      h, 0                // Prepare TOS
 965+ 66A9
 966+ 66A9 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 967+ 66AD
 968+ 66AD C1                           pop     bc                  // Restore Instruction Pointer
 969+ 66AE
 970+ 66AE                              psh1
 970+ 66AE E5          >                push    hl
 970+ 66AF DD E9       >                jp      (ix)
 971+ 66B1
 972+ 66B1
 973+ 66B1              //  ______________________________________________________________________
 974+ 66B1              //
 975+ 66B1              // click        --
 976+ 66B1              // This definition need Standard ROM Interrupt to be served
 977+ 66B1              //
 978+ 66B1              //              New_Def CLICK, "CLICK", is_code, is_normal
 979+ 66B1              //
 980+ 66B1              //                push    bc
 981+ 66B1              //              ld      a, ($5C48)          // BORDCR system variable
 982+ 66B1              //              rra
 983+ 66B1              //              rra
 984+ 66B1              //              rra
 985+ 66B1              //              or      $18                 // quick'n'dirty click
 986+ 66B1              //              out     ($fe), a
 987+ 66B1              //              ld      b, 0
 988+ 66B1              //              djnz    $                   // wait loop
 989+ 66B1              //              xor     $18
 990+ 66B1              //              out     ($fe), a
 991+ 66B1              //                pop     bc
 992+ 66B1
 993+ 66B1              //              next
 994+ 66B1
 995+ 66B1              //  ______________________________________________________________________
 996+ 66B1              //
 997+ 66B1              // key?         -- f
 998+ 66B1              // key available
 999+ 66B1              //
1000+ 66B1              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1001+ 66B1              //
1002+ 66B1              //              ld      hl, 0000
1003+ 66B1              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1004+ 66B1              //              jr      z, Key_Q
1005+ 66B1              //                  dec     hl
1006+ 66B1              // Key_Q:
1007+ 66B1              //                psh1
1008+ 66B1              //              next
1009+ 66B1
1010+ 66B1              //  ______________________________________________________________________
1011+ 66B1              //
1012+ 66B1              // ?terminal    -- FALSE | TRUE
1013+ 66B1              // test for BREAK keypress
1014+ 66B1                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1014+ 66B1             >
1014+ 66B1             >Dict_Ptr        defl    $
1014+ 66B1             >
1014+ 66B1             >//              ______________________________________________________________________
1014+ 66B1             >//              Heap part
1014+ 66B1             >
1014+ 66B1             >
1014+ 66B1             >                org     (Heap_Ptr & $1FFF) + $E000
1014+ E172             >
1014+ E172             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1014+ E172             >Latest_Definition defl  Heap_Ptr
1014+ E172             >
1014+ E172             >                // dummy db directives used to calculate length of namec
1014+ E172 3F 54 45 52 >                db      "?TERMINAL"
1014+ E176 4D 49 4E 41 >
1014+ E17A 4C          >
1014+ E17B             >len_NFA         defl    $ - temp_NFA
1014+ E17B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1014+ E172             >
1014+ E172 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1014+ E173 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1014+ E177 4D 49 4E 41 >
1014+ E17B 4C          >
1014+ E17C             >                org     $-1                 // alter last byte of Name just above to set
1014+ E17B CC          >                db      {b $} | END_BIT     // msb as name end
1014+ E17C             >
1014+ E17C 6A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1014+ E17E             >Prev_Ptr        defl    Heap_Ptr
1014+ E17E             >
1014+ E17E             >mirror_Ptr      defl    $
1014+ E17E             >
1014+ E17E B3 66       >                dw      Dict_Ptr + 2        // xt
1014+ E180             >Heap_Ptr        defl    $ - $E000           // save current HP
1014+ E180             >
1014+ E180             >Current_HP      defl  $ - $E000             // used to set HP once!
1014+ E180             >
1014+ E180             >//              ______________________________________________________________________
1014+ E180             >//              Dictionary part
1014+ E180             >
1014+ E180             >                org     Dict_Ptr
1014+ 66B1             >
1014+ 66B1 7E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1014+ 66B3             >
1014+ 66B3             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1014+ 66B3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1014+ 66B3 ~           >
1014+ 66B3 ~           >
1014+ 66B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1014+ 66B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1014+ 66B3             >
1014+ 66B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1015+ 66B3 D9                           exx
1016+ 66B4 01 FE 7F                     ld      bc, $7ffe
1017+ 66B7 ED 50                        in      d, (c)
1018+ 66B9 41                           ld      b, c
1019+ 66BA ED 78                        in      a, (c)
1020+ 66BC B2                           or       d
1021+ 66BD 1F                           rra
1022+ 66BE 3F                           ccf
1023+ 66BF ED 62                        sbc     hl, hl
1024+ 66C1 E5                           push    hl
1025+ 66C2 D9                           exx
1026+ 66C3                              next
1026+ 66C3 DD E9       >                jp      (ix)
1027+ 66C5
1028+ 66C5
1029+ 66C5              //  ______________________________________________________________________
1030+ 66C5              //
1031+ 66C5              // inkey        -- c | 0
1032+ 66C5              // call ROM inkey$ routine, returns c or "zero".
1033+ 66C5              //
1034+ 66C5              //              New_Def INKEY, "INKEY", is_code, is_normal
1035+ 66C5              //              push    bc
1036+ 66C5              //              push    de
1037+ 66C5              //              ld      (SP_Saved), sp
1038+ 66C5              //              ld      sp, Cold_origin - 5
1039+ 66C5              //              push    ix
1040+ 66C5              //              call    $15E6                   // instead of 15E9
1041+ 66C5              //              pop     ix
1042+ 66C5              //              ld      sp, (SP_Saved)
1043+ 66C5              //              ld      l, a
1044+ 66C5              //              ld      h, 0
1045+ 66C5              //              pop     de
1046+ 66C5              //              pop     bc
1047+ 66C5              //              psh1
1048+ 66C5
1049+ 66C5              //  ______________________________________________________________________
1050+ 66C5              //
1051+ 66C5              // select      n --
1052+ 66C5              // selects the given channel number
1053+ 66C5
1054+ 66C5                              New_Def SELECT, "SELECT", is_code, is_normal
1054+ 66C5             >
1054+ 66C5             >Dict_Ptr        defl    $
1054+ 66C5             >
1054+ 66C5             >//              ______________________________________________________________________
1054+ 66C5             >//              Heap part
1054+ 66C5             >
1054+ 66C5             >
1054+ 66C5             >                org     (Heap_Ptr & $1FFF) + $E000
1054+ E180             >
1054+ E180             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1054+ E180             >Latest_Definition defl  Heap_Ptr
1054+ E180             >
1054+ E180             >                // dummy db directives used to calculate length of namec
1054+ E180 53 45 4C 45 >                db      "SELECT"
1054+ E184 43 54       >
1054+ E186             >len_NFA         defl    $ - temp_NFA
1054+ E186             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1054+ E180             >
1054+ E180 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1054+ E181 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1054+ E185 43 54       >
1054+ E187             >                org     $-1                 // alter last byte of Name just above to set
1054+ E186 D4          >                db      {b $} | END_BIT     // msb as name end
1054+ E187             >
1054+ E187 72 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1054+ E189             >Prev_Ptr        defl    Heap_Ptr
1054+ E189             >
1054+ E189             >mirror_Ptr      defl    $
1054+ E189             >
1054+ E189 C7 66       >                dw      Dict_Ptr + 2        // xt
1054+ E18B             >Heap_Ptr        defl    $ - $E000           // save current HP
1054+ E18B             >
1054+ E18B             >Current_HP      defl  $ - $E000             // used to set HP once!
1054+ E18B             >
1054+ E18B             >//              ______________________________________________________________________
1054+ E18B             >//              Dictionary part
1054+ E18B             >
1054+ E18B             >                org     Dict_Ptr
1054+ 66C5             >
1054+ 66C5 89 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1054+ 66C7             >
1054+ 66C7             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1054+ 66C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1054+ 66C7 ~           >
1054+ 66C7 ~           >
1054+ 66C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1054+ 66C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1054+ 66C7             >
1054+ 66C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1055+ 66C7 E1                           pop     hl
1056+ 66C8 C5                           push    bc
1057+ 66C9 D5                           push    de
1058+ 66CA 7D                           ld      a, l
1059+ 66CB ED 73 92 63                  ld      (SP_Saved), sp
1060+ 66CF 31 61 63                     ld      sp, Cold_origin - 5
1061+ 66D2 DD E5                        push    ix
1062+ 66D4 CD 01 16                     call    $1601
1063+ 66D7 DD E1                        pop     ix
1064+ 66D9 ED 7B 92 63                  ld      sp, (SP_Saved)
1065+ 66DD D1                           pop     de
1066+ 66DE C1                           pop     bc
1067+ 66DF                              next
1067+ 66DF DD E9       >                jp      (ix)
1068+ 66E1
1069+ 66E1              //  ______________________________________________________________________
1070+ 66E1              //
1071+ 66E1              // ZX Spectrum Next - Low Level disk primitives.
1072+ 66E1              // this include is "here" for backward compatibility
1073+ 66E1
1074+ 66E1                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
   1++66E1              //  ______________________________________________________________________
   2++66E1              //
   3++66E1              //  next-opt.asm
   4++66E1              //
   5++66E1              //  ZX Spectrum Next - peculiar definitions
   6++66E1              //  ______________________________________________________________________
   7++66E1
   8++66E1              //  ______________________________________________________________________
   9++66E1              //
  10++66E1              // f_seek       d u -- f
  11++66E1              // Seek to position d in file-handle u.
  12++66E1              // Return a false-flag 0 on success, True flag on error
  13++66E1                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++66E1             >
  13++66E1             >Dict_Ptr        defl    $
  13++66E1             >
  13++66E1             >//              ______________________________________________________________________
  13++66E1             >//              Heap part
  13++66E1             >
  13++66E1             >
  13++66E1             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E18B             >
  13++E18B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E18B             >Latest_Definition defl  Heap_Ptr
  13++E18B             >
  13++E18B             >                // dummy db directives used to calculate length of namec
  13++E18B 46 5F 53 45 >                db      "F_SEEK"
  13++E18F 45 4B       >
  13++E191             >len_NFA         defl    $ - temp_NFA
  13++E191             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E18B             >
  13++E18B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E18C 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E190 45 4B       >
  13++E192             >                org     $-1                 // alter last byte of Name just above to set
  13++E191 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E192             >
  13++E192 80 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E194             >Prev_Ptr        defl    Heap_Ptr
  13++E194             >
  13++E194             >mirror_Ptr      defl    $
  13++E194             >
  13++E194 E3 66       >                dw      Dict_Ptr + 2        // xt
  13++E196             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E196             >
  13++E196             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E196             >
  13++E196             >//              ______________________________________________________________________
  13++E196             >//              Dictionary part
  13++E196             >
  13++E196             >                org     Dict_Ptr
  13++66E1             >
  13++66E1 94 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++66E3             >
  13++66E3             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++66E3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++66E3 ~           >
  13++66E3 ~           >
  13++66E3             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++66E3             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++66E3             >
  13++66E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++66E3 D9                            exx
  15++66E4 E1                            pop     hl                  // file-handle
  16++66E5 7D                            ld      a, l
  17++66E6 C1                            pop     bc                  // bc has high-word of d
  18++66E7 D1                            pop     de
  19++66E8 D9                           exx
  20++66E9 DD E5                        push    ix
  21++66EB D5                           push    de
  22++66EC C5                           push    bc                  // save Instruction Pointer
  23++66ED D9                            exx
  24++66EE DD 21 00 00                   ld      ix, 0
  25++66F2 CF                            rst     $08
  26++66F3 9F                            db      $9F
  27++66F4              F_Seek_Exit:
  28++66F4 C1                           pop     bc                  // restore Instruction Pointer
  29++66F5 D1                           pop     de
  30++66F6 DD E1                        pop     ix
  31++66F8 ED 62                        sbc     hl, hl              // to get 0 or -1
  32++66FA
  33++66FA                              psh1
  33++66FA E5          >                push    hl
  33++66FB DD E9       >                jp      (ix)
  34++66FD
  35++66FD              //  ______________________________________________________________________
  36++66FD              //
  37++66FD              // f_close      u -- f
  38++66FD              // Close file-handle u.
  39++66FD              // Return 0 on success, True flag on error
  40++66FD
  41++66FD                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  41++66FD             >
  41++66FD             >Dict_Ptr        defl    $
  41++66FD             >
  41++66FD             >//              ______________________________________________________________________
  41++66FD             >//              Heap part
  41++66FD             >
  41++66FD             >
  41++66FD             >                org     (Heap_Ptr & $1FFF) + $E000
  41++E196             >
  41++E196             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41++E196             >Latest_Definition defl  Heap_Ptr
  41++E196             >
  41++E196             >                // dummy db directives used to calculate length of namec
  41++E196 46 5F 43 4C >                db      "F_CLOSE"
  41++E19A 4F 53 45    >
  41++E19D             >len_NFA         defl    $ - temp_NFA
  41++E19D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41++E196             >
  41++E196 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  41++E197 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  41++E19B 4F 53 45    >
  41++E19E             >                org     $-1                 // alter last byte of Name just above to set
  41++E19D C5          >                db      {b $} | END_BIT     // msb as name end
  41++E19E             >
  41++E19E 8B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  41++E1A0             >Prev_Ptr        defl    Heap_Ptr
  41++E1A0             >
  41++E1A0             >mirror_Ptr      defl    $
  41++E1A0             >
  41++E1A0 FF 66       >                dw      Dict_Ptr + 2        // xt
  41++E1A2             >Heap_Ptr        defl    $ - $E000           // save current HP
  41++E1A2             >
  41++E1A2             >Current_HP      defl  $ - $E000             // used to set HP once!
  41++E1A2             >
  41++E1A2             >//              ______________________________________________________________________
  41++E1A2             >//              Dictionary part
  41++E1A2             >
  41++E1A2             >                org     Dict_Ptr
  41++66FD             >
  41++66FD A0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  41++66FF             >
  41++66FF             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  41++66FF ~           >                call    runcode ; ok        // for primitive definitions  actual code
  41++66FF ~           >
  41++66FF ~           >
  41++66FF             >                endif           ; ok        // for other definitions it "points" the correct handler
  41++66FF             >                // Use of "; ok" to suppress "warning[fwdref]"
  41++66FF             >
  41++66FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42++66FF
  43++66FF E1                           pop     hl
  44++6700 7D                           ld      a, l                // file-handle
  45++6701 DD E5                        push    ix
  46++6703 D5                           push    de
  47++6704 C5                           push    bc                  // Save Instruction pointer
  48++6705 CF                           rst     $08
  49++6706 9B                           db      $9B
  50++6707 18 EB                        jr      F_Seek_Exit
  51++6709              //              pop     de
  52++6709              //              pop     bc
  53++6709              //              pop     ix
  54++6709              //              sbc     hl, hl
  55++6709              //              psh1
  56++6709
  57++6709              //  ______________________________________________________________________
  58++6709              //
  59++6709              // f_sync      u -- f
  60++6709              // Close file-handle u.
  61++6709              // Return 0 on success, True flag on error
  62++6709
  63++6709                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  63++6709             >
  63++6709             >Dict_Ptr        defl    $
  63++6709             >
  63++6709             >//              ______________________________________________________________________
  63++6709             >//              Heap part
  63++6709             >
  63++6709             >
  63++6709             >                org     (Heap_Ptr & $1FFF) + $E000
  63++E1A2             >
  63++E1A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63++E1A2             >Latest_Definition defl  Heap_Ptr
  63++E1A2             >
  63++E1A2             >                // dummy db directives used to calculate length of namec
  63++E1A2 46 5F 53 59 >                db      "F_SYNC"
  63++E1A6 4E 43       >
  63++E1A8             >len_NFA         defl    $ - temp_NFA
  63++E1A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63++E1A2             >
  63++E1A2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63++E1A3 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  63++E1A7 4E 43       >
  63++E1A9             >                org     $-1                 // alter last byte of Name just above to set
  63++E1A8 C3          >                db      {b $} | END_BIT     // msb as name end
  63++E1A9             >
  63++E1A9 96 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63++E1AB             >Prev_Ptr        defl    Heap_Ptr
  63++E1AB             >
  63++E1AB             >mirror_Ptr      defl    $
  63++E1AB             >
  63++E1AB 0B 67       >                dw      Dict_Ptr + 2        // xt
  63++E1AD             >Heap_Ptr        defl    $ - $E000           // save current HP
  63++E1AD             >
  63++E1AD             >Current_HP      defl  $ - $E000             // used to set HP once!
  63++E1AD             >
  63++E1AD             >//              ______________________________________________________________________
  63++E1AD             >//              Dictionary part
  63++E1AD             >
  63++E1AD             >                org     Dict_Ptr
  63++6709             >
  63++6709 AB 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  63++670B             >
  63++670B             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  63++670B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  63++670B ~           >
  63++670B ~           >
  63++670B             >                endif           ; ok        // for other definitions it "points" the correct handler
  63++670B             >                // Use of "; ok" to suppress "warning[fwdref]"
  63++670B             >
  63++670B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64++670B E1                           pop     hl
  65++670C 7D                           ld      a, l                // file-handle
  66++670D DD E5                        push    ix
  67++670F D5                           push    de
  68++6710 C5                           push    bc
  69++6711 CF                           rst     $08
  70++6712 9C                           db      $9C
  71++6713 18 DF                        jr      F_Seek_Exit
  72++6715              //              pop     de
  73++6715              //              pop     bc
  74++6715              //              pop     ix
  75++6715              //              sbc     hl, hl
  76++6715              //              psh1
  77++6715
  78++6715              //  ______________________________________________________________________
  79++6715              //
  80++6715              // f_fgetpos    u -- d f
  81++6715              // Seek to position d in file-handle u.
  82++6715              // Return a false-flag 0 on success, True flag on error
  83++6715                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  83++6715             >
  83++6715             >Dict_Ptr        defl    $
  83++6715             >
  83++6715             >//              ______________________________________________________________________
  83++6715             >//              Heap part
  83++6715             >
  83++6715             >
  83++6715             >                org     (Heap_Ptr & $1FFF) + $E000
  83++E1AD             >
  83++E1AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  83++E1AD             >Latest_Definition defl  Heap_Ptr
  83++E1AD             >
  83++E1AD             >                // dummy db directives used to calculate length of namec
  83++E1AD 46 5F 46 47 >                db      "F_FGETPOS"
  83++E1B1 45 54 50 4F >
  83++E1B5 53          >
  83++E1B6             >len_NFA         defl    $ - temp_NFA
  83++E1B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  83++E1AD             >
  83++E1AD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  83++E1AE 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  83++E1B2 45 54 50 4F >
  83++E1B6 53          >
  83++E1B7             >                org     $-1                 // alter last byte of Name just above to set
  83++E1B6 D3          >                db      {b $} | END_BIT     // msb as name end
  83++E1B7             >
  83++E1B7 A2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  83++E1B9             >Prev_Ptr        defl    Heap_Ptr
  83++E1B9             >
  83++E1B9             >mirror_Ptr      defl    $
  83++E1B9             >
  83++E1B9 17 67       >                dw      Dict_Ptr + 2        // xt
  83++E1BB             >Heap_Ptr        defl    $ - $E000           // save current HP
  83++E1BB             >
  83++E1BB             >Current_HP      defl  $ - $E000             // used to set HP once!
  83++E1BB             >
  83++E1BB             >//              ______________________________________________________________________
  83++E1BB             >//              Dictionary part
  83++E1BB             >
  83++E1BB             >                org     Dict_Ptr
  83++6715             >
  83++6715 B9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  83++6717             >
  83++6717             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  83++6717 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  83++6717 ~           >
  83++6717 ~           >
  83++6717             >                endif           ; ok        // for other definitions it "points" the correct handler
  83++6717             >                // Use of "; ok" to suppress "warning[fwdref]"
  83++6717             >
  83++6717             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  84++6717 E1                            pop     hl
  85++6718 7D                            ld      a, l                // file-handle
  86++6719 DD E5                         push    ix
  87++671B D5                            push    de
  88++671C C5                            push    bc
  89++671D CF                            rst     $08
  90++671E A0                            db      $A0
  91++671F D9                           exx
  92++6720 C1                           pop     bc                  // IP
  93++6721 D1                           pop     de                  // Return Stack Pointer
  94++6722 DD E1                        pop     ix
  95++6724 D9                            exx
  96++6725 D5                            push    de
  97++6726 C5                            push    bc
  98++6727 ED 62                         sbc     hl, hl
  99++6729 E5                            push    hl
 100++672A D9                           exx
 101++672B                              next
 101++672B DD E9       >                jp      (ix)
 102++672D
 103++672D              //  ______________________________________________________________________
 104++672D              //
 105++672D              // f_read       a b u -- n f
 106++672D              // Read b bytes from file-handle u to address a
 107++672D              // Return the actual number n of bytes read
 108++672D              // Return 0 on success, True flag on error
 109++672D                              New_Def F_READ, "F_READ", is_code, is_normal
 109++672D             >
 109++672D             >Dict_Ptr        defl    $
 109++672D             >
 109++672D             >//              ______________________________________________________________________
 109++672D             >//              Heap part
 109++672D             >
 109++672D             >
 109++672D             >                org     (Heap_Ptr & $1FFF) + $E000
 109++E1BB             >
 109++E1BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 109++E1BB             >Latest_Definition defl  Heap_Ptr
 109++E1BB             >
 109++E1BB             >                // dummy db directives used to calculate length of namec
 109++E1BB 46 5F 52 45 >                db      "F_READ"
 109++E1BF 41 44       >
 109++E1C1             >len_NFA         defl    $ - temp_NFA
 109++E1C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 109++E1BB             >
 109++E1BB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 109++E1BC 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 109++E1C0 41 44       >
 109++E1C2             >                org     $-1                 // alter last byte of Name just above to set
 109++E1C1 C4          >                db      {b $} | END_BIT     // msb as name end
 109++E1C2             >
 109++E1C2 AD 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 109++E1C4             >Prev_Ptr        defl    Heap_Ptr
 109++E1C4             >
 109++E1C4             >mirror_Ptr      defl    $
 109++E1C4             >
 109++E1C4 2F 67       >                dw      Dict_Ptr + 2        // xt
 109++E1C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 109++E1C6             >
 109++E1C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 109++E1C6             >
 109++E1C6             >//              ______________________________________________________________________
 109++E1C6             >//              Dictionary part
 109++E1C6             >
 109++E1C6             >                org     Dict_Ptr
 109++672D             >
 109++672D C4 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 109++672F             >
 109++672F             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 109++672F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 109++672F ~           >
 109++672F ~           >
 109++672F             >                endif           ; ok        // for other definitions it "points" the correct handler
 109++672F             >                // Use of "; ok" to suppress "warning[fwdref]"
 109++672F             >
 109++672F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 110++672F D9                            exx
 111++6730 E1                            pop     hl
 112++6731 7D                            ld      a, l                // file-handle
 113++6732 C1                            pop     bc                  // bc has bytes to read
 114++6733 DD E3                         ex      (sp), ix            // ix has address
 115++6735 D9                           exx
 116++6736 D5                           push    de                  // Save Return Stack pointer
 117++6737 C5                           push    bc                  // Save Instruction pointer
 118++6738 D9                            exx
 119++6739 CF                            rst     $08
 120++673A 9D                            db      $9D
 121++673B              F_Read_Exit:
 122++673B D9                           exx
 123++673C C1                           pop     bc                  // Restore Instruction pointer
 124++673D D1                           pop     de                  // Restore Return Stack pointer
 125++673E DD E1                        pop     ix                  // Restore ix
 126++6740 D9                            exx
 127++6741 D5                            push    de                  // bytes involved in i/o operation
 128++6742 ED 62                         sbc     hl, hl
 129++6744 E5                            push    hl
 130++6745 D9                           exx
 131++6746                              next
 131++6746 DD E9       >                jp      (ix)
 132++6748
 133++6748              //  ______________________________________________________________________
 134++6748              //
 135++6748              // f_write      a b u -- n f
 136++6748              // Write bytes currently stored at address a to file-handle u.
 137++6748              // Return the actual n bytes written and 0 on success, True flag on error.
 138++6748                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 138++6748             >
 138++6748             >Dict_Ptr        defl    $
 138++6748             >
 138++6748             >//              ______________________________________________________________________
 138++6748             >//              Heap part
 138++6748             >
 138++6748             >
 138++6748             >                org     (Heap_Ptr & $1FFF) + $E000
 138++E1C6             >
 138++E1C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138++E1C6             >Latest_Definition defl  Heap_Ptr
 138++E1C6             >
 138++E1C6             >                // dummy db directives used to calculate length of namec
 138++E1C6 46 5F 57 52 >                db      "F_WRITE"
 138++E1CA 49 54 45    >
 138++E1CD             >len_NFA         defl    $ - temp_NFA
 138++E1CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138++E1C6             >
 138++E1C6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138++E1C7 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 138++E1CB 49 54 45    >
 138++E1CE             >                org     $-1                 // alter last byte of Name just above to set
 138++E1CD C5          >                db      {b $} | END_BIT     // msb as name end
 138++E1CE             >
 138++E1CE BB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138++E1D0             >Prev_Ptr        defl    Heap_Ptr
 138++E1D0             >
 138++E1D0             >mirror_Ptr      defl    $
 138++E1D0             >
 138++E1D0 4A 67       >                dw      Dict_Ptr + 2        // xt
 138++E1D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 138++E1D2             >
 138++E1D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 138++E1D2             >
 138++E1D2             >//              ______________________________________________________________________
 138++E1D2             >//              Dictionary part
 138++E1D2             >
 138++E1D2             >                org     Dict_Ptr
 138++6748             >
 138++6748 D0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 138++674A             >
 138++674A             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138++674A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138++674A ~           >
 138++674A ~           >
 138++674A             >                endif           ; ok        // for other definitions it "points" the correct handler
 138++674A             >                // Use of "; ok" to suppress "warning[fwdref]"
 138++674A             >
 138++674A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139++674A D9                            exx
 140++674B E1                            pop     hl
 141++674C 7D                            ld      a, l                // file-handle
 142++674D C1                            pop     bc                  // bc has bytes to read
 143++674E DD E3                         ex      (sp), ix            // ix has address
 144++6750 D9                           exx
 145++6751 D5                           push    de                  // Save Return Stack pointer
 146++6752 C5                           push    bc                  // Save Instruction pointer
 147++6753 D9                            exx
 148++6754 CF                            rst     $08
 149++6755 9E                            db      $9E
 150++6756 18 E3                         jr F_Read_Exit
 151++6758              //                exx
 152++6758              //                pop     de                  // Restore Return Stack pointer
 153++6758              //                pop     bc                  // Restore Instruction pointer
 154++6758              //                pop     ix                  // Restore ix
 155++6758              //                 exx
 156++6758              //                 push    de                  // bytes involved in i/o operation
 157++6758              //                 sbc     hl, hl
 158++6758              //                 push    hl
 159++6758              //                exx
 160++6758              //                next
 161++6758
 162++6758              //  ______________________________________________________________________
 163++6758              //
 164++6758              // f_open       a1 a2 b -- u f
 165++6758              // open a file
 166++6758              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 167++6758              // a2 is address to an 8-byte header data used in some cases.
 168++6758              // b is access mode-byte, that is a combination of:
 169++6758              // any/all of:
 170++6758              //   esx_mode_read          $01 request read access
 171++6758              //   esx_mode_write         $02 request write access
 172++6758              //   esx_mode_use_header    $40 read/write +3DOS header
 173++6758              // plus one of:
 174++6758              //   esx_mode_open_exist    $00 only open existing file
 175++6758              //   esx_mode_open_creat    $08 open existing or create file
 176++6758              //   esx_mode_creat_noexist $04 create new file, error if exists
 177++6758              //   esx_mode_creat_trunc   $0c create new file, delete existing
 178++6758              // Return file-handle u and 0 on success, True flag on error
 179++6758                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 179++6758             >
 179++6758             >Dict_Ptr        defl    $
 179++6758             >
 179++6758             >//              ______________________________________________________________________
 179++6758             >//              Heap part
 179++6758             >
 179++6758             >
 179++6758             >                org     (Heap_Ptr & $1FFF) + $E000
 179++E1D2             >
 179++E1D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179++E1D2             >Latest_Definition defl  Heap_Ptr
 179++E1D2             >
 179++E1D2             >                // dummy db directives used to calculate length of namec
 179++E1D2 46 5F 4F 50 >                db      "F_OPEN"
 179++E1D6 45 4E       >
 179++E1D8             >len_NFA         defl    $ - temp_NFA
 179++E1D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179++E1D2             >
 179++E1D2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179++E1D3 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 179++E1D7 45 4E       >
 179++E1D9             >                org     $-1                 // alter last byte of Name just above to set
 179++E1D8 CE          >                db      {b $} | END_BIT     // msb as name end
 179++E1D9             >
 179++E1D9 C6 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179++E1DB             >Prev_Ptr        defl    Heap_Ptr
 179++E1DB             >
 179++E1DB             >mirror_Ptr      defl    $
 179++E1DB             >
 179++E1DB 5A 67       >                dw      Dict_Ptr + 2        // xt
 179++E1DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 179++E1DD             >
 179++E1DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 179++E1DD             >
 179++E1DD             >//              ______________________________________________________________________
 179++E1DD             >//              Dictionary part
 179++E1DD             >
 179++E1DD             >                org     Dict_Ptr
 179++6758             >
 179++6758 DB 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 179++675A             >
 179++675A             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 179++675A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 179++675A ~           >
 179++675A ~           >
 179++675A             >                endif           ; ok        // for other definitions it "points" the correct handler
 179++675A             >                // Use of "; ok" to suppress "warning[fwdref]"
 179++675A             >
 179++675A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180++675A D9                            exx
 181++675B C1                            pop     bc                  // file-mode
 182++675C 41                            ld      b, c                // file-mode
 183++675D D1                            pop     de                  // 8-bytes buffer if any
 184++675E DD E3                         ex      (sp), ix            // filespec nul-terminated
 185++6760 D9                           exx
 186++6761 D5                           push    de                  // Save Return Stack pointer
 187++6762 C5                           push    bc                  // Save Instruction pointer
 188++6763 D9                            exx
 189++6764 3E 2A                         ld      a, "*"
 190++6766 CF                            rst     $08
 191++6767 9A                            db      $9A
 192++6768              F_Open_Exit:
 193++6768 5F                            ld      e, a                // return the handle-number
 194++6769 16 00                         ld      d, 0
 195++676B 18 CE                        jr F_Read_Exit
 196++676D
 197++676D              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 198++676D              //   \ FILENAME 1+ PAD 1 F_OPEN
 199++676D              //   \ DROP
 200++676D              //   \ F_CLOSE
 201++676D
 202++676D
 203++676D              //  ______________________________________________________________________
 204++676D              //
 205++676D              // f_opendir    a1 -- u f
 206++676D              // open a file
 207++676D                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 207++676D             >
 207++676D             >Dict_Ptr        defl    $
 207++676D             >
 207++676D             >//              ______________________________________________________________________
 207++676D             >//              Heap part
 207++676D             >
 207++676D             >
 207++676D             >                org     (Heap_Ptr & $1FFF) + $E000
 207++E1DD             >
 207++E1DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207++E1DD             >Latest_Definition defl  Heap_Ptr
 207++E1DD             >
 207++E1DD             >                // dummy db directives used to calculate length of namec
 207++E1DD 46 5F 4F 50 >                db      "F_OPENDIR"
 207++E1E1 45 4E 44 49 >
 207++E1E5 52          >
 207++E1E6             >len_NFA         defl    $ - temp_NFA
 207++E1E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207++E1DD             >
 207++E1DD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207++E1DE 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 207++E1E2 45 4E 44 49 >
 207++E1E6 52          >
 207++E1E7             >                org     $-1                 // alter last byte of Name just above to set
 207++E1E6 D2          >                db      {b $} | END_BIT     // msb as name end
 207++E1E7             >
 207++E1E7 D2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207++E1E9             >Prev_Ptr        defl    Heap_Ptr
 207++E1E9             >
 207++E1E9             >mirror_Ptr      defl    $
 207++E1E9             >
 207++E1E9 6F 67       >                dw      Dict_Ptr + 2        // xt
 207++E1EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 207++E1EB             >
 207++E1EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 207++E1EB             >
 207++E1EB             >//              ______________________________________________________________________
 207++E1EB             >//              Dictionary part
 207++E1EB             >
 207++E1EB             >                org     Dict_Ptr
 207++676D             >
 207++676D E9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 207++676F             >
 207++676F             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 207++676F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 207++676F ~           >
 207++676F ~           >
 207++676F             >                endif           ; ok        // for other definitions it "points" the correct handler
 207++676F             >                // Use of "; ok" to suppress "warning[fwdref]"
 207++676F             >
 207++676F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208++676F DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++6771 D5                           push    de                  // Save Return Stack pointer
 210++6772 C5                           push    bc                  // Save Instruction pointer
 211++6773 06 10                        ld      b, $10              // file-mode
 212++6775 3E 43                        ld      a, "C"
 213++6777 CF                           rst     $08
 214++6778 A3                           db      $A3
 215++6779 18 ED                        jr      F_Open_Exit
 216++677B
 217++677B
 218++677B              //  ______________________________________________________________________
 219++677B              //
 220++677B              // f_readdir    a1 a2 b -- u f
 221++677B              // open a file
 222++677B                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 222++677B             >
 222++677B             >Dict_Ptr        defl    $
 222++677B             >
 222++677B             >//              ______________________________________________________________________
 222++677B             >//              Heap part
 222++677B             >
 222++677B             >
 222++677B             >                org     (Heap_Ptr & $1FFF) + $E000
 222++E1EB             >
 222++E1EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222++E1EB             >Latest_Definition defl  Heap_Ptr
 222++E1EB             >
 222++E1EB             >                // dummy db directives used to calculate length of namec
 222++E1EB 46 5F 52 45 >                db      "F_READDIR"
 222++E1EF 41 44 44 49 >
 222++E1F3 52          >
 222++E1F4             >len_NFA         defl    $ - temp_NFA
 222++E1F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222++E1EB             >
 222++E1EB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222++E1EC 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 222++E1F0 41 44 44 49 >
 222++E1F4 52          >
 222++E1F5             >                org     $-1                 // alter last byte of Name just above to set
 222++E1F4 D2          >                db      {b $} | END_BIT     // msb as name end
 222++E1F5             >
 222++E1F5 DD 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 222++E1F7             >Prev_Ptr        defl    Heap_Ptr
 222++E1F7             >
 222++E1F7             >mirror_Ptr      defl    $
 222++E1F7             >
 222++E1F7 7D 67       >                dw      Dict_Ptr + 2        // xt
 222++E1F9             >Heap_Ptr        defl    $ - $E000           // save current HP
 222++E1F9             >
 222++E1F9             >Current_HP      defl  $ - $E000             // used to set HP once!
 222++E1F9             >
 222++E1F9             >//              ______________________________________________________________________
 222++E1F9             >//              Dictionary part
 222++E1F9             >
 222++E1F9             >                org     Dict_Ptr
 222++677B             >
 222++677B F7 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 222++677D             >
 222++677D             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 222++677D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 222++677D ~           >
 222++677D ~           >
 222++677D             >                endif           ; ok        // for other definitions it "points" the correct handler
 222++677D             >                // Use of "; ok" to suppress "warning[fwdref]"
 222++677D             >
 222++677D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223++677D D9                            exx
 224++677E E1                            pop     hl
 225++677F 7D                            ld      a, l
 226++6780 D1                            pop     de
 227++6781 DD E3                         ex      (sp), ix            // filespec nul-terminated
 228++6783 D9                           exx
 229++6784 D5                           push    de                  // Save Return Stack pointer
 230++6785 C5                           push    bc                  // Save Instruction pointer
 231++6786 D9                            exx
 232++6787 CF                            rst     $08
 233++6788 A4                            db      $A4
 234++6789 18 DD                         jr      F_Open_Exit
 235++678B
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
1075+ 678B
1076+ 678B
1077+ 678B              //  ______________________________________________________________________
1078+ 678B              //
1079+ 678B              // cmove    a1 a2 u --
1080+ 678B              // If u > 0, moves memory content starting at address a1 for n bytes long
1081+ 678B              // storing then starting at address addr2.
1082+ 678B              // The content of a1 is moved first. See CMOVE> also.
1083+ 678B                              New_Def CMOVE, "CMOVE", is_code, is_normal
1083+ 678B             >
1083+ 678B             >Dict_Ptr        defl    $
1083+ 678B             >
1083+ 678B             >//              ______________________________________________________________________
1083+ 678B             >//              Heap part
1083+ 678B             >
1083+ 678B             >
1083+ 678B             >                org     (Heap_Ptr & $1FFF) + $E000
1083+ E1F9             >
1083+ E1F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ E1F9             >Latest_Definition defl  Heap_Ptr
1083+ E1F9             >
1083+ E1F9             >                // dummy db directives used to calculate length of namec
1083+ E1F9 43 4D 4F 56 >                db      "CMOVE"
1083+ E1FD 45          >
1083+ E1FE             >len_NFA         defl    $ - temp_NFA
1083+ E1FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ E1F9             >
1083+ E1F9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ E1FA 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1083+ E1FE 45          >
1083+ E1FF             >                org     $-1                 // alter last byte of Name just above to set
1083+ E1FE C5          >                db      {b $} | END_BIT     // msb as name end
1083+ E1FF             >
1083+ E1FF EB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1083+ E201             >Prev_Ptr        defl    Heap_Ptr
1083+ E201             >
1083+ E201             >mirror_Ptr      defl    $
1083+ E201             >
1083+ E201 8D 67       >                dw      Dict_Ptr + 2        // xt
1083+ E203             >Heap_Ptr        defl    $ - $E000           // save current HP
1083+ E203             >
1083+ E203             >Current_HP      defl  $ - $E000             // used to set HP once!
1083+ E203             >
1083+ E203             >//              ______________________________________________________________________
1083+ E203             >//              Dictionary part
1083+ E203             >
1083+ E203             >                org     Dict_Ptr
1083+ 678B             >
1083+ 678B 01 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1083+ 678D             >
1083+ 678D             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 678D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1083+ 678D ~           >
1083+ 678D ~           >
1083+ 678D             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 678D             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 678D             >
1083+ 678D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 678D D9                           exx
1085+ 678E
1086+ 678E C1                           pop     bc                  // bc has counter
1087+ 678F D1                           pop     de                  // de now has dest
1088+ 6790 E1                           pop     hl                 // hl has source, save Instruction Pointer
1089+ 6791 78                           ld      a, b
1090+ 6792 B1                           or      c
1091+ 6793 28 02                        jr      z, Cmove_NoMove
1092+ 6795 ED B0                            ldir
1093+ 6797              Cmove_NoMove:
1094+ 6797 D9                           exx
1095+ 6798
1096+ 6798                              next
1096+ 6798 DD E9       >                jp      (ix)
1097+ 679A
1098+ 679A              //  ______________________________________________________________________
1099+ 679A              //
1100+ 679A              // cmove>    a1 a2 u --
1101+ 679A              // If u > 0, moves memory content starting at address a1 for n bytes long
1102+ 679A              // storing then starting at address addr2.
1103+ 679A              // The content of a1 is moved last. See cmove.
1104+ 679A                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1104+ 679A             >
1104+ 679A             >Dict_Ptr        defl    $
1104+ 679A             >
1104+ 679A             >//              ______________________________________________________________________
1104+ 679A             >//              Heap part
1104+ 679A             >
1104+ 679A             >
1104+ 679A             >                org     (Heap_Ptr & $1FFF) + $E000
1104+ E203             >
1104+ E203             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1104+ E203             >Latest_Definition defl  Heap_Ptr
1104+ E203             >
1104+ E203             >                // dummy db directives used to calculate length of namec
1104+ E203 43 4D 4F 56 >                db      "CMOVE>"
1104+ E207 45 3E       >
1104+ E209             >len_NFA         defl    $ - temp_NFA
1104+ E209             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1104+ E203             >
1104+ E203 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1104+ E204 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1104+ E208 45 3E       >
1104+ E20A             >                org     $-1                 // alter last byte of Name just above to set
1104+ E209 BE          >                db      {b $} | END_BIT     // msb as name end
1104+ E20A             >
1104+ E20A F9 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1104+ E20C             >Prev_Ptr        defl    Heap_Ptr
1104+ E20C             >
1104+ E20C             >mirror_Ptr      defl    $
1104+ E20C             >
1104+ E20C 9C 67       >                dw      Dict_Ptr + 2        // xt
1104+ E20E             >Heap_Ptr        defl    $ - $E000           // save current HP
1104+ E20E             >
1104+ E20E             >Current_HP      defl  $ - $E000             // used to set HP once!
1104+ E20E             >
1104+ E20E             >//              ______________________________________________________________________
1104+ E20E             >//              Dictionary part
1104+ E20E             >
1104+ E20E             >                org     Dict_Ptr
1104+ 679A             >
1104+ 679A 0C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1104+ 679C             >
1104+ 679C             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1104+ 679C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1104+ 679C ~           >
1104+ 679C ~           >
1104+ 679C             >                endif           ; ok        // for other definitions it "points" the correct handler
1104+ 679C             >                // Use of "; ok" to suppress "warning[fwdref]"
1104+ 679C             >
1104+ 679C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1105+ 679C D9                           exx
1106+ 679D
1107+ 679D C1                           pop     bc                  // bc has counter
1108+ 679E D1                           pop     de                  // de has dest
1109+ 679F E1                           pop     hl                  // hl has source, save Instruction Pointer
1110+ 67A0 78                           ld      a, b
1111+ 67A1 B1                           or      c
1112+ 67A2 28 08                        jr      z, CmoveV_NoMove
1113+ 67A4 EB                               ex      de, hl              // compute address to
1114+ 67A5 09                               add     hl, bc              // operate backward
1115+ 67A6 2B                               dec     hl
1116+ 67A7 EB                               ex      de, hl
1117+ 67A8 09                               add     hl, bc
1118+ 67A9 2B                               dec     hl
1119+ 67AA ED B8                            lddr                        // backward
1120+ 67AC              CmoveV_NoMove:
1121+ 67AC D9                           exx
1122+ 67AD
1123+ 67AD                              next
1123+ 67AD DD E9       >                jp      (ix)
1124+ 67AF
1125+ 67AF              //  ______________________________________________________________________
1126+ 67AF              //
1127+ 67AF              // um*      u1 u2 -- ud
1128+ 67AF              // Unsigned multiplication
1129+ 67AF              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1130+ 67AF              // On the stack a double number is treated as two single numbers
1131+ 67AF              // where DE is on the top of the stack and HL is the second from top,
1132+ 67AF              // Instead, in 2VARIABLE a double number is stored as EDLH.
1133+ 67AF              // this definition could use "MUL" Z80N new op-code.
1134+ 67AF                              New_Def UM_MUL, "UM*", is_code, is_normal
1134+ 67AF             >
1134+ 67AF             >Dict_Ptr        defl    $
1134+ 67AF             >
1134+ 67AF             >//              ______________________________________________________________________
1134+ 67AF             >//              Heap part
1134+ 67AF             >
1134+ 67AF             >
1134+ 67AF             >                org     (Heap_Ptr & $1FFF) + $E000
1134+ E20E             >
1134+ E20E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1134+ E20E             >Latest_Definition defl  Heap_Ptr
1134+ E20E             >
1134+ E20E             >                // dummy db directives used to calculate length of namec
1134+ E20E 55 4D 2A    >                db      "UM*"
1134+ E211             >len_NFA         defl    $ - temp_NFA
1134+ E211             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1134+ E20E             >
1134+ E20E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1134+ E20F 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1134+ E212             >                org     $-1                 // alter last byte of Name just above to set
1134+ E211 AA          >                db      {b $} | END_BIT     // msb as name end
1134+ E212             >
1134+ E212 03 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1134+ E214             >Prev_Ptr        defl    Heap_Ptr
1134+ E214             >
1134+ E214             >mirror_Ptr      defl    $
1134+ E214             >
1134+ E214 B1 67       >                dw      Dict_Ptr + 2        // xt
1134+ E216             >Heap_Ptr        defl    $ - $E000           // save current HP
1134+ E216             >
1134+ E216             >Current_HP      defl  $ - $E000             // used to set HP once!
1134+ E216             >
1134+ E216             >//              ______________________________________________________________________
1134+ E216             >//              Dictionary part
1134+ E216             >
1134+ E216             >                org     Dict_Ptr
1134+ 67AF             >
1134+ 67AF 14 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1134+ 67B1             >
1134+ 67B1             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1134+ 67B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1134+ 67B1 ~           >
1134+ 67B1 ~           >
1134+ 67B1             >                endif           ; ok        // for other definitions it "points" the correct handler
1134+ 67B1             >                // Use of "; ok" to suppress "warning[fwdref]"
1134+ 67B1             >
1134+ 67B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1135+ 67B1 D9                           exx
1136+ 67B2 D1                           pop     de                    // de has u2 operand
1137+ 67B3 E1                           pop     hl                    // hl has u1 operand
1138+ 67B4 45                           ld      b, l
1139+ 67B5 4B                           ld      c, e
1140+ 67B6 5D                           ld      e, l
1141+ 67B7 6A                           ld      l, d
1142+ 67B8 E5                           push    hl
1143+ 67B9 69                           ld      l, c
1144+ 67BA ED 30                        mul
1145+ 67BC EB                           ex      de, hl
1146+ 67BD ED 30                        mul
1147+ 67BF AF                           xor     a
1148+ 67C0 19                           add     hl, de
1149+ 67C1 8F                           adc     a
1150+ 67C2 59                           ld      e, c
1151+ 67C3 50                           ld      d, b
1152+ 67C4 ED 30                        mul
1153+ 67C6 47                           ld      b, a
1154+ 67C7 4C                           ld      c, h
1155+ 67C8 7A                           ld      a, d
1156+ 67C9 85                           add     l
1157+ 67CA 67                           ld      h, a
1158+ 67CB 6B                           ld      l, e
1159+ 67CC D1                           pop     de
1160+ 67CD ED 30                        mul
1161+ 67CF EB                           ex      de, hl
1162+ 67D0 ED 4A                        adc     hl, bc
1163+ 67D2 D5                           push    de
1164+ 67D3 E5                           push    hl
1165+ 67D4 D9                           exx
1166+ 67D5                              next
1166+ 67D5 DD E9       >                jp      (ix)
1167+ 67D7
1168+ 67D7              //  ______________________________________________________________________
1169+ 67D7              //
1170+ 67D7              // um/mod      ud u1 -- q r
1171+ 67D7              // divides ud into u1 giving quotient q and remainder r
1172+ 67D7              // algorithm takes 16 bit at a time starting from msb
1173+ 67D7              // DE grows from lsb upward with quotient result
1174+ 67D7              // HL keeps the remainder at each stage of division
1175+ 67D7              // each loop 'lowers' the next binary digit to form the current dividend
1176+ 67D7                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1176+ 67D7             >
1176+ 67D7             >Dict_Ptr        defl    $
1176+ 67D7             >
1176+ 67D7             >//              ______________________________________________________________________
1176+ 67D7             >//              Heap part
1176+ 67D7             >
1176+ 67D7             >
1176+ 67D7             >                org     (Heap_Ptr & $1FFF) + $E000
1176+ E216             >
1176+ E216             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1176+ E216             >Latest_Definition defl  Heap_Ptr
1176+ E216             >
1176+ E216             >                // dummy db directives used to calculate length of namec
1176+ E216 55 4D 2F 4D >                db      "UM/MOD"
1176+ E21A 4F 44       >
1176+ E21C             >len_NFA         defl    $ - temp_NFA
1176+ E21C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1176+ E216             >
1176+ E216 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1176+ E217 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1176+ E21B 4F 44       >
1176+ E21D             >                org     $-1                 // alter last byte of Name just above to set
1176+ E21C C4          >                db      {b $} | END_BIT     // msb as name end
1176+ E21D             >
1176+ E21D 0E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1176+ E21F             >Prev_Ptr        defl    Heap_Ptr
1176+ E21F             >
1176+ E21F             >mirror_Ptr      defl    $
1176+ E21F             >
1176+ E21F D9 67       >                dw      Dict_Ptr + 2        // xt
1176+ E221             >Heap_Ptr        defl    $ - $E000           // save current HP
1176+ E221             >
1176+ E221             >Current_HP      defl  $ - $E000             // used to set HP once!
1176+ E221             >
1176+ E221             >//              ______________________________________________________________________
1176+ E221             >//              Dictionary part
1176+ E221             >
1176+ E221             >                org     Dict_Ptr
1176+ 67D7             >
1176+ 67D7 1F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1176+ 67D9             >
1176+ 67D9             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1176+ 67D9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1176+ 67D9 ~           >
1176+ 67D9 ~           >
1176+ 67D9             >                endif           ; ok        // for other definitions it "points" the correct handler
1176+ 67D9             >                // Use of "; ok" to suppress "warning[fwdref]"
1176+ 67D9             >
1176+ 67D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1177+ 67D9 D9                           exx
1178+ 67DA C1                           pop     bc                      // divisor
1179+ 67DB
1180+ 67DB E1                           pop     hl                      // < high part
1181+ 67DC D1                           pop     de                      // < low part and
1182+ 67DD
1183+ 67DD 7D                           ld      a, l                    // check without changing arguments
1184+ 67DE 91                           sub     c                       // if divisor is greater than high part
1185+ 67DF 7C                           ld      a, h                    // so quotient will be in range
1186+ 67E0 98                           sbc     a, b
1187+ 67E1 30 20                        jr      nc, Um_DivMod_OutOfRange
1188+ 67E3 3E 10                            ld      a, 16
1189+ 67E5              Um_DivMod_Loop:
1190+ 67E5 CB 23                                sla     e
1191+ 67E7 CB 12                                rl      d
1192+ 67E9 ED 6A                                adc     hl, hl
1193+ 67EB 30 05                                jr      nc, Um_DivMod_Carry
1194+ 67ED A7                                       and     a
1195+ 67EE ED 42                                    sbc     hl, bc
1196+ 67F0 18 07                                jr      Um_DivMod_Endif    // else
1197+ 67F2              Um_DivMod_Carry:
1198+ 67F2 A7                                       and     a
1199+ 67F3 ED 42                                    sbc     hl, bc
1200+ 67F5 30 02                                    jr      nc, Um_DivMod_Endif
1201+ 67F7 09                                           add     hl, bc
1202+ 67F8 1B                                           dec     de
1203+ 67F9              Um_DivMod_Endif:                                   // endif
1204+ 67F9 13                                   inc     de
1205+ 67FA 3D                                   dec     a
1206+ 67FB 20 E8                            jr      nz, Um_DivMod_Loop
1207+ 67FD EB                               ex      de, hl
1208+ 67FE              Um_DivMod_Bailout:
1209+ 67FE D5                               push    de                  // de := remanider
1210+ 67FF E5                               push    hl                  // hl := quotient
1211+ 6800 D9                               exx
1212+ 6801                                  next
1212+ 6801 DD E9       >                jp      (ix)
1213+ 6803
1214+ 6803              Um_DivMod_OutOfRange:
1215+ 6803 21 FF FF                     ld      hl, -1
1216+ 6806 54                           ld      d, h
1217+ 6807 5D                           ld      e, l
1218+ 6808 18 F4                        jr      Um_DivMod_Bailout
1219+ 680A
1220+ 680A              //  ______________________________________________________________________
1221+ 680A              //
1222+ 680A              // and          n1 n2 -- n3
1223+ 680A              // bit logical AND. Returns n3 as n1 & n2
1224+ 680A                              New_Def AND_OP, "AND", is_code, is_normal
1224+ 680A             >
1224+ 680A             >Dict_Ptr        defl    $
1224+ 680A             >
1224+ 680A             >//              ______________________________________________________________________
1224+ 680A             >//              Heap part
1224+ 680A             >
1224+ 680A             >
1224+ 680A             >                org     (Heap_Ptr & $1FFF) + $E000
1224+ E221             >
1224+ E221             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1224+ E221             >Latest_Definition defl  Heap_Ptr
1224+ E221             >
1224+ E221             >                // dummy db directives used to calculate length of namec
1224+ E221 41 4E 44    >                db      "AND"
1224+ E224             >len_NFA         defl    $ - temp_NFA
1224+ E224             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1224+ E221             >
1224+ E221 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1224+ E222 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1224+ E225             >                org     $-1                 // alter last byte of Name just above to set
1224+ E224 C4          >                db      {b $} | END_BIT     // msb as name end
1224+ E225             >
1224+ E225 16 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1224+ E227             >Prev_Ptr        defl    Heap_Ptr
1224+ E227             >
1224+ E227             >mirror_Ptr      defl    $
1224+ E227             >
1224+ E227 0C 68       >                dw      Dict_Ptr + 2        // xt
1224+ E229             >Heap_Ptr        defl    $ - $E000           // save current HP
1224+ E229             >
1224+ E229             >Current_HP      defl  $ - $E000             // used to set HP once!
1224+ E229             >
1224+ E229             >//              ______________________________________________________________________
1224+ E229             >//              Dictionary part
1224+ E229             >
1224+ E229             >                org     Dict_Ptr
1224+ 680A             >
1224+ 680A 27 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1224+ 680C             >
1224+ 680C             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1224+ 680C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1224+ 680C ~           >
1224+ 680C ~           >
1224+ 680C             >                endif           ; ok        // for other definitions it "points" the correct handler
1224+ 680C             >                // Use of "; ok" to suppress "warning[fwdref]"
1224+ 680C             >
1224+ 680C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1225+ 680C D9                           exx
1226+ 680D D1                           pop     de
1227+ 680E E1                           pop     hl
1228+ 680F 7B                           ld      a, e
1229+ 6810 A5                           and     l
1230+ 6811 6F                           ld      l, a
1231+ 6812 7A                           ld      a, d
1232+ 6813 A4                           and     h
1233+ 6814 67                           ld      h, a
1234+ 6815 E5                           push    hl
1235+ 6816 D9                           exx
1236+ 6817                              next
1236+ 6817 DD E9       >                jp      (ix)
1237+ 6819
1238+ 6819              //  ______________________________________________________________________
1239+ 6819              //
1240+ 6819              // or           n1 n2 -- n3
1241+ 6819              // bit logical OR. Returns n3 as n1 | n2
1242+ 6819                              New_Def OR_OP, "OR", is_code, is_normal
1242+ 6819             >
1242+ 6819             >Dict_Ptr        defl    $
1242+ 6819             >
1242+ 6819             >//              ______________________________________________________________________
1242+ 6819             >//              Heap part
1242+ 6819             >
1242+ 6819             >
1242+ 6819             >                org     (Heap_Ptr & $1FFF) + $E000
1242+ E229             >
1242+ E229             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1242+ E229             >Latest_Definition defl  Heap_Ptr
1242+ E229             >
1242+ E229             >                // dummy db directives used to calculate length of namec
1242+ E229 4F 52       >                db      "OR"
1242+ E22B             >len_NFA         defl    $ - temp_NFA
1242+ E22B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1242+ E229             >
1242+ E229 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1242+ E22A 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1242+ E22C             >                org     $-1                 // alter last byte of Name just above to set
1242+ E22B D2          >                db      {b $} | END_BIT     // msb as name end
1242+ E22C             >
1242+ E22C 21 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1242+ E22E             >Prev_Ptr        defl    Heap_Ptr
1242+ E22E             >
1242+ E22E             >mirror_Ptr      defl    $
1242+ E22E             >
1242+ E22E 1B 68       >                dw      Dict_Ptr + 2        // xt
1242+ E230             >Heap_Ptr        defl    $ - $E000           // save current HP
1242+ E230             >
1242+ E230             >Current_HP      defl  $ - $E000             // used to set HP once!
1242+ E230             >
1242+ E230             >//              ______________________________________________________________________
1242+ E230             >//              Dictionary part
1242+ E230             >
1242+ E230             >                org     Dict_Ptr
1242+ 6819             >
1242+ 6819 2E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1242+ 681B             >
1242+ 681B             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1242+ 681B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1242+ 681B ~           >
1242+ 681B ~           >
1242+ 681B             >                endif           ; ok        // for other definitions it "points" the correct handler
1242+ 681B             >                // Use of "; ok" to suppress "warning[fwdref]"
1242+ 681B             >
1242+ 681B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1243+ 681B D9                           exx
1244+ 681C D1                           pop     de
1245+ 681D E1                           pop     hl
1246+ 681E 7B                           ld      a, e
1247+ 681F B5                           or      l
1248+ 6820 6F                           ld      l, a
1249+ 6821 7A                           ld      a, d
1250+ 6822 B4                           or      h
1251+ 6823 67                           ld      h, a
1252+ 6824 E5                           push    hl
1253+ 6825 D9                           exx
1254+ 6826                              next
1254+ 6826 DD E9       >                jp      (ix)
1255+ 6828
1256+ 6828              //  ______________________________________________________________________
1257+ 6828              //
1258+ 6828              // xor          n1 n2 -- n3
1259+ 6828              // bit logical OR. Returns n3 as n1 ^ n2
1260+ 6828                              New_Def XOR_OP, "XOR", is_code, is_normal
1260+ 6828             >
1260+ 6828             >Dict_Ptr        defl    $
1260+ 6828             >
1260+ 6828             >//              ______________________________________________________________________
1260+ 6828             >//              Heap part
1260+ 6828             >
1260+ 6828             >
1260+ 6828             >                org     (Heap_Ptr & $1FFF) + $E000
1260+ E230             >
1260+ E230             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1260+ E230             >Latest_Definition defl  Heap_Ptr
1260+ E230             >
1260+ E230             >                // dummy db directives used to calculate length of namec
1260+ E230 58 4F 52    >                db      "XOR"
1260+ E233             >len_NFA         defl    $ - temp_NFA
1260+ E233             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1260+ E230             >
1260+ E230 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1260+ E231 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1260+ E234             >                org     $-1                 // alter last byte of Name just above to set
1260+ E233 D2          >                db      {b $} | END_BIT     // msb as name end
1260+ E234             >
1260+ E234 29 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1260+ E236             >Prev_Ptr        defl    Heap_Ptr
1260+ E236             >
1260+ E236             >mirror_Ptr      defl    $
1260+ E236             >
1260+ E236 2A 68       >                dw      Dict_Ptr + 2        // xt
1260+ E238             >Heap_Ptr        defl    $ - $E000           // save current HP
1260+ E238             >
1260+ E238             >Current_HP      defl  $ - $E000             // used to set HP once!
1260+ E238             >
1260+ E238             >//              ______________________________________________________________________
1260+ E238             >//              Dictionary part
1260+ E238             >
1260+ E238             >                org     Dict_Ptr
1260+ 6828             >
1260+ 6828 36 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1260+ 682A             >
1260+ 682A             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1260+ 682A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1260+ 682A ~           >
1260+ 682A ~           >
1260+ 682A             >                endif           ; ok        // for other definitions it "points" the correct handler
1260+ 682A             >                // Use of "; ok" to suppress "warning[fwdref]"
1260+ 682A             >
1260+ 682A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1261+ 682A D9                           exx
1262+ 682B D1                           pop     de
1263+ 682C E1                           pop     hl
1264+ 682D 7B                           ld      a, e
1265+ 682E AD                           xor     l
1266+ 682F 6F                           ld      l, a
1267+ 6830 7A                           ld      a, d
1268+ 6831 AC                           xor     h
1269+ 6832 67                           ld      h, a
1270+ 6833 E5                           push    hl
1271+ 6834 D9                           exx
1272+ 6835                              next
1272+ 6835 DD E9       >                jp      (ix)
1273+ 6837
1274+ 6837              //  ______________________________________________________________________
1275+ 6837              //
1276+ 6837              // sp@      -- a
1277+ 6837              // returns on top of stack the value of SP before execution
1278+ 6837                              New_Def SPFETCH, "SP@", is_code, is_normal
1278+ 6837             >
1278+ 6837             >Dict_Ptr        defl    $
1278+ 6837             >
1278+ 6837             >//              ______________________________________________________________________
1278+ 6837             >//              Heap part
1278+ 6837             >
1278+ 6837             >
1278+ 6837             >                org     (Heap_Ptr & $1FFF) + $E000
1278+ E238             >
1278+ E238             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1278+ E238             >Latest_Definition defl  Heap_Ptr
1278+ E238             >
1278+ E238             >                // dummy db directives used to calculate length of namec
1278+ E238 53 50 40    >                db      "SP@"
1278+ E23B             >len_NFA         defl    $ - temp_NFA
1278+ E23B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1278+ E238             >
1278+ E238 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1278+ E239 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1278+ E23C             >                org     $-1                 // alter last byte of Name just above to set
1278+ E23B C0          >                db      {b $} | END_BIT     // msb as name end
1278+ E23C             >
1278+ E23C 30 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1278+ E23E             >Prev_Ptr        defl    Heap_Ptr
1278+ E23E             >
1278+ E23E             >mirror_Ptr      defl    $
1278+ E23E             >
1278+ E23E 39 68       >                dw      Dict_Ptr + 2        // xt
1278+ E240             >Heap_Ptr        defl    $ - $E000           // save current HP
1278+ E240             >
1278+ E240             >Current_HP      defl  $ - $E000             // used to set HP once!
1278+ E240             >
1278+ E240             >//              ______________________________________________________________________
1278+ E240             >//              Dictionary part
1278+ E240             >
1278+ E240             >                org     Dict_Ptr
1278+ 6837             >
1278+ 6837 3E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1278+ 6839             >
1278+ 6839             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1278+ 6839 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1278+ 6839 ~           >
1278+ 6839 ~           >
1278+ 6839             >                endif           ; ok        // for other definitions it "points" the correct handler
1278+ 6839             >                // Use of "; ok" to suppress "warning[fwdref]"
1278+ 6839             >
1278+ 6839             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1279+ 6839
1280+ 6839 21 00 00                     ld      hl, 0
1281+ 683C 39                           add     hl, sp
1282+ 683D
1283+ 683D                              psh1
1283+ 683D E5          >                push    hl
1283+ 683E DD E9       >                jp      (ix)
1284+ 6840
1285+ 6840              //  ______________________________________________________________________
1286+ 6840              //
1287+ 6840              // sp!      a --
1288+ 6840              // restore SP to the initial value passed
1289+ 6840              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1290+ 6840                              New_Def SPSTORE, "SP!", is_code, is_normal
1290+ 6840             >
1290+ 6840             >Dict_Ptr        defl    $
1290+ 6840             >
1290+ 6840             >//              ______________________________________________________________________
1290+ 6840             >//              Heap part
1290+ 6840             >
1290+ 6840             >
1290+ 6840             >                org     (Heap_Ptr & $1FFF) + $E000
1290+ E240             >
1290+ E240             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1290+ E240             >Latest_Definition defl  Heap_Ptr
1290+ E240             >
1290+ E240             >                // dummy db directives used to calculate length of namec
1290+ E240 53 50 21    >                db      "SP!"
1290+ E243             >len_NFA         defl    $ - temp_NFA
1290+ E243             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1290+ E240             >
1290+ E240 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1290+ E241 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1290+ E244             >                org     $-1                 // alter last byte of Name just above to set
1290+ E243 A1          >                db      {b $} | END_BIT     // msb as name end
1290+ E244             >
1290+ E244 38 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1290+ E246             >Prev_Ptr        defl    Heap_Ptr
1290+ E246             >
1290+ E246             >mirror_Ptr      defl    $
1290+ E246             >
1290+ E246 42 68       >                dw      Dict_Ptr + 2        // xt
1290+ E248             >Heap_Ptr        defl    $ - $E000           // save current HP
1290+ E248             >
1290+ E248             >Current_HP      defl  $ - $E000             // used to set HP once!
1290+ E248             >
1290+ E248             >//              ______________________________________________________________________
1290+ E248             >//              Dictionary part
1290+ E248             >
1290+ E248             >                org     Dict_Ptr
1290+ 6840             >
1290+ 6840 46 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1290+ 6842             >
1290+ 6842             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1290+ 6842 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1290+ 6842 ~           >
1290+ 6842 ~           >
1290+ 6842             >                endif           ; ok        // for other definitions it "points" the correct handler
1290+ 6842             >                // Use of "; ok" to suppress "warning[fwdref]"
1290+ 6842             >
1290+ 6842             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1291+ 6842 E1                           pop     hl
1292+ 6843 F9                           ld      sp, hl
1293+ 6844
1294+ 6844                              next
1294+ 6844 DD E9       >                jp      (ix)
1295+ 6846
1296+ 6846              //  ______________________________________________________________________
1297+ 6846              //
1298+ 6846              // rp@      -- a
1299+ 6846              // returns on top of stack the value of Return-Pointer
1300+ 6846                              New_Def RPFETCH, "RP@", is_code, is_normal
1300+ 6846             >
1300+ 6846             >Dict_Ptr        defl    $
1300+ 6846             >
1300+ 6846             >//              ______________________________________________________________________
1300+ 6846             >//              Heap part
1300+ 6846             >
1300+ 6846             >
1300+ 6846             >                org     (Heap_Ptr & $1FFF) + $E000
1300+ E248             >
1300+ E248             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1300+ E248             >Latest_Definition defl  Heap_Ptr
1300+ E248             >
1300+ E248             >                // dummy db directives used to calculate length of namec
1300+ E248 52 50 40    >                db      "RP@"
1300+ E24B             >len_NFA         defl    $ - temp_NFA
1300+ E24B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1300+ E248             >
1300+ E248 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1300+ E249 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1300+ E24C             >                org     $-1                 // alter last byte of Name just above to set
1300+ E24B C0          >                db      {b $} | END_BIT     // msb as name end
1300+ E24C             >
1300+ E24C 40 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1300+ E24E             >Prev_Ptr        defl    Heap_Ptr
1300+ E24E             >
1300+ E24E             >mirror_Ptr      defl    $
1300+ E24E             >
1300+ E24E 48 68       >                dw      Dict_Ptr + 2        // xt
1300+ E250             >Heap_Ptr        defl    $ - $E000           // save current HP
1300+ E250             >
1300+ E250             >Current_HP      defl  $ - $E000             // used to set HP once!
1300+ E250             >
1300+ E250             >//              ______________________________________________________________________
1300+ E250             >//              Dictionary part
1300+ E250             >
1300+ E250             >                org     Dict_Ptr
1300+ 6846             >
1300+ 6846 4E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1300+ 6848             >
1300+ 6848             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1300+ 6848 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1300+ 6848 ~           >
1300+ 6848 ~           >
1300+ 6848             >                endif           ; ok        // for other definitions it "points" the correct handler
1300+ 6848             >                // Use of "; ok" to suppress "warning[fwdref]"
1300+ 6848             >
1300+ 6848             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1301+ 6848
1302+ 6848                              // *** ldhlrp
1303+ 6848                              // *** ex      de, hl
1304+ 6848 D5                           push de
1305+ 6849
1306+ 6849                              next
1306+ 6849 DD E9       >                jp      (ix)
1307+ 684B
1308+ 684B              //  ______________________________________________________________________
1309+ 684B              //
1310+ 684B              // rp!      a --
1311+ 684B              // restore RP to the initial value passed
1312+ 684B              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1313+ 684B                              New_Def RPSTORE, "RP!", is_code, is_normal
1313+ 684B             >
1313+ 684B             >Dict_Ptr        defl    $
1313+ 684B             >
1313+ 684B             >//              ______________________________________________________________________
1313+ 684B             >//              Heap part
1313+ 684B             >
1313+ 684B             >
1313+ 684B             >                org     (Heap_Ptr & $1FFF) + $E000
1313+ E250             >
1313+ E250             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1313+ E250             >Latest_Definition defl  Heap_Ptr
1313+ E250             >
1313+ E250             >                // dummy db directives used to calculate length of namec
1313+ E250 52 50 21    >                db      "RP!"
1313+ E253             >len_NFA         defl    $ - temp_NFA
1313+ E253             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1313+ E250             >
1313+ E250 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1313+ E251 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1313+ E254             >                org     $-1                 // alter last byte of Name just above to set
1313+ E253 A1          >                db      {b $} | END_BIT     // msb as name end
1313+ E254             >
1313+ E254 48 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1313+ E256             >Prev_Ptr        defl    Heap_Ptr
1313+ E256             >
1313+ E256             >mirror_Ptr      defl    $
1313+ E256             >
1313+ E256 4D 68       >                dw      Dict_Ptr + 2        // xt
1313+ E258             >Heap_Ptr        defl    $ - $E000           // save current HP
1313+ E258             >
1313+ E258             >Current_HP      defl  $ - $E000             // used to set HP once!
1313+ E258             >
1313+ E258             >//              ______________________________________________________________________
1313+ E258             >//              Dictionary part
1313+ E258             >
1313+ E258             >                org     Dict_Ptr
1313+ 684B             >
1313+ 684B 56 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1313+ 684D             >
1313+ 684D             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1313+ 684D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1313+ 684D ~           >
1313+ 684D ~           >
1313+ 684D             >                endif           ; ok        // for other definitions it "points" the correct handler
1313+ 684D             >                // Use of "; ok" to suppress "warning[fwdref]"
1313+ 684D             >
1313+ 684D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1314+ 684D D1                           pop     de
1315+ 684E                              // *** ex      de, hl
1316+ 684E                              // *** ldrphl
1317+ 684E
1318+ 684E                              next
1318+ 684E DD E9       >                jp      (ix)
1319+ 6850
1320+ 6850              //  ______________________________________________________________________
1321+ 6850              //
1322+ 6850              // exit       --
1323+ 6850              // exits back to the caller word
1324+ 6850                              New_Def EXIT, "EXIT", is_code, is_normal
1324+ 6850             >
1324+ 6850             >Dict_Ptr        defl    $
1324+ 6850             >
1324+ 6850             >//              ______________________________________________________________________
1324+ 6850             >//              Heap part
1324+ 6850             >
1324+ 6850             >
1324+ 6850             >                org     (Heap_Ptr & $1FFF) + $E000
1324+ E258             >
1324+ E258             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1324+ E258             >Latest_Definition defl  Heap_Ptr
1324+ E258             >
1324+ E258             >                // dummy db directives used to calculate length of namec
1324+ E258 45 58 49 54 >                db      "EXIT"
1324+ E25C             >len_NFA         defl    $ - temp_NFA
1324+ E25C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1324+ E258             >
1324+ E258 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1324+ E259 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1324+ E25D             >                org     $-1                 // alter last byte of Name just above to set
1324+ E25C D4          >                db      {b $} | END_BIT     // msb as name end
1324+ E25D             >
1324+ E25D 50 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1324+ E25F             >Prev_Ptr        defl    Heap_Ptr
1324+ E25F             >
1324+ E25F             >mirror_Ptr      defl    $
1324+ E25F             >
1324+ E25F 52 68       >                dw      Dict_Ptr + 2        // xt
1324+ E261             >Heap_Ptr        defl    $ - $E000           // save current HP
1324+ E261             >
1324+ E261             >Current_HP      defl  $ - $E000             // used to set HP once!
1324+ E261             >
1324+ E261             >//              ______________________________________________________________________
1324+ E261             >//              Dictionary part
1324+ E261             >
1324+ E261             >                org     Dict_Ptr
1324+ 6850             >
1324+ 6850 5F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1324+ 6852             >
1324+ 6852             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1324+ 6852 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1324+ 6852 ~           >
1324+ 6852 ~           >
1324+ 6852             >                endif           ; ok        // for other definitions it "points" the correct handler
1324+ 6852             >                // Use of "; ok" to suppress "warning[fwdref]"
1324+ 6852             >
1324+ 6852             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1325+ 6852 EB                           ex      de, hl
1326+ 6853                              // *** ldhlrp                      // Get Return Stack Pointer
1327+ 6853 4E                           ld      c, (hl)             // pop Instruction Pointer
1328+ 6854 23                           inc     hl                  // from Return Stack
1329+ 6855 46                           ld      b, (hl)
1330+ 6856 23                           inc     hl
1331+ 6857                              // *** ldrphl                      // Set Return Stack Pointer
1332+ 6857 EB                           ex      de, hl
1333+ 6858                              next
1333+ 6858 DD E9       >                jp      (ix)
1334+ 685A
1335+ 685A              //  ______________________________________________________________________
1336+ 685A              //
1337+ 685A              // lastl      --
1338+ 685A              // exits back to the caller word
1339+ 685A              //              New_Def EXIT, "LASTL", is_code, is_normal
1340+ 685A              //              push    de
1341+ 685A              //              ex      de, hl //**
1342+ 685A              //              // *** ldhlrp                      // Get Return Stack Pointer
1343+ 685A              //              ld      e, (hl)             // pop Instruction Pointer
1344+ 685A              //              inc     hl                  // from Return Stack
1345+ 685A              //              ld      d, (hl)
1346+ 685A              //              inc     hl
1347+ 685A              //              ld      (hl), e
1348+ 685A              //              inc     hl
1349+ 685A              //              ld      (hl), d
1350+ 685A              //              add     hl, -3
1351+ 685A              //              pop     de
1352+ 685A              //              next
1353+ 685A
1354+ 685A              //  ______________________________________________________________________
1355+ 685A              //
1356+ 685A              // >r      n --
1357+ 685A              // pop from calculator-stack and push into return-stack
1358+ 685A                              New_Def TO_R, ">R", is_code, is_normal
1358+ 685A             >
1358+ 685A             >Dict_Ptr        defl    $
1358+ 685A             >
1358+ 685A             >//              ______________________________________________________________________
1358+ 685A             >//              Heap part
1358+ 685A             >
1358+ 685A             >
1358+ 685A             >                org     (Heap_Ptr & $1FFF) + $E000
1358+ E261             >
1358+ E261             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1358+ E261             >Latest_Definition defl  Heap_Ptr
1358+ E261             >
1358+ E261             >                // dummy db directives used to calculate length of namec
1358+ E261 3E 52       >                db      ">R"
1358+ E263             >len_NFA         defl    $ - temp_NFA
1358+ E263             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1358+ E261             >
1358+ E261 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1358+ E262 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1358+ E264             >                org     $-1                 // alter last byte of Name just above to set
1358+ E263 D2          >                db      {b $} | END_BIT     // msb as name end
1358+ E264             >
1358+ E264 58 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1358+ E266             >Prev_Ptr        defl    Heap_Ptr
1358+ E266             >
1358+ E266             >mirror_Ptr      defl    $
1358+ E266             >
1358+ E266 5C 68       >                dw      Dict_Ptr + 2        // xt
1358+ E268             >Heap_Ptr        defl    $ - $E000           // save current HP
1358+ E268             >
1358+ E268             >Current_HP      defl  $ - $E000             // used to set HP once!
1358+ E268             >
1358+ E268             >//              ______________________________________________________________________
1358+ E268             >//              Dictionary part
1358+ E268             >
1358+ E268             >                org     Dict_Ptr
1358+ 685A             >
1358+ 685A 66 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1358+ 685C             >
1358+ 685C             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1358+ 685C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1358+ 685C ~           >
1358+ 685C ~           >
1358+ 685C             >                endif           ; ok        // for other definitions it "points" the correct handler
1358+ 685C             >                // Use of "; ok" to suppress "warning[fwdref]"
1358+ 685C             >
1358+ 685C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1359+ 685C E1                           pop     hl
1360+ 685D EB                           ex      de, hl //**
1361+ 685E                              // *** ldhlrp
1362+ 685E 2B                           dec     hl
1363+ 685F 72                           ld      (hl), d             // store current TOS
1364+ 6860 2B                           dec     hl                  // to Return Stack
1365+ 6861 73                           ld      (hl), e
1366+ 6862                              // *** ldrphl
1367+ 6862 EB                           ex      de, hl //**
1368+ 6863                              next
1368+ 6863 DD E9       >                jp      (ix)
1369+ 6865
1370+ 6865              //  ______________________________________________________________________
1371+ 6865              //
1372+ 6865              // r>      -- n
1373+ 6865              // pop from return-stack and push into calculator-stack
1374+ 6865                              New_Def R_TO, "R>", is_code, is_normal
1374+ 6865             >
1374+ 6865             >Dict_Ptr        defl    $
1374+ 6865             >
1374+ 6865             >//              ______________________________________________________________________
1374+ 6865             >//              Heap part
1374+ 6865             >
1374+ 6865             >
1374+ 6865             >                org     (Heap_Ptr & $1FFF) + $E000
1374+ E268             >
1374+ E268             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1374+ E268             >Latest_Definition defl  Heap_Ptr
1374+ E268             >
1374+ E268             >                // dummy db directives used to calculate length of namec
1374+ E268 52 3E       >                db      "R>"
1374+ E26A             >len_NFA         defl    $ - temp_NFA
1374+ E26A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1374+ E268             >
1374+ E268 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1374+ E269 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1374+ E26B             >                org     $-1                 // alter last byte of Name just above to set
1374+ E26A BE          >                db      {b $} | END_BIT     // msb as name end
1374+ E26B             >
1374+ E26B 61 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1374+ E26D             >Prev_Ptr        defl    Heap_Ptr
1374+ E26D             >
1374+ E26D             >mirror_Ptr      defl    $
1374+ E26D             >
1374+ E26D 67 68       >                dw      Dict_Ptr + 2        // xt
1374+ E26F             >Heap_Ptr        defl    $ - $E000           // save current HP
1374+ E26F             >
1374+ E26F             >Current_HP      defl  $ - $E000             // used to set HP once!
1374+ E26F             >
1374+ E26F             >//              ______________________________________________________________________
1374+ E26F             >//              Dictionary part
1374+ E26F             >
1374+ E26F             >                org     Dict_Ptr
1374+ 6865             >
1374+ 6865 6D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1374+ 6867             >
1374+ 6867             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1374+ 6867 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1374+ 6867 ~           >
1374+ 6867 ~           >
1374+ 6867             >                endif           ; ok        // for other definitions it "points" the correct handler
1374+ 6867             >                // Use of "; ok" to suppress "warning[fwdref]"
1374+ 6867             >
1374+ 6867             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1375+ 6867
1376+ 6867 EB                           ex      de, hl //**
1377+ 6868                              // *** ldhlrp
1378+ 6868 5E                           ld      e, (hl)             // retrieve from Return Stack
1379+ 6869 23                           inc     hl
1380+ 686A 56                           ld      d, (hl)
1381+ 686B 23                           inc     hl
1382+ 686C                              // *** ldrphl
1383+ 686C EB                           ex      de, hl //**
1384+ 686D E5                           push    hl
1385+ 686E                              next
1385+ 686E DD E9       >                jp      (ix)
1386+ 6870
1387+ 6870              //  ______________________________________________________________________
1388+ 6870              //
1389+ 6870              // r@           -- n
1390+ 6870              // return on top of stack the value of top of return-stack
1391+ 6870              // Since this is the same as I, we alter R's CFA to jump there
1392+ 6870                              New_Def R_OP, "R@", is_code, is_normal
1392+ 6870             >
1392+ 6870             >Dict_Ptr        defl    $
1392+ 6870             >
1392+ 6870             >//              ______________________________________________________________________
1392+ 6870             >//              Heap part
1392+ 6870             >
1392+ 6870             >
1392+ 6870             >                org     (Heap_Ptr & $1FFF) + $E000
1392+ E26F             >
1392+ E26F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1392+ E26F             >Latest_Definition defl  Heap_Ptr
1392+ E26F             >
1392+ E26F             >                // dummy db directives used to calculate length of namec
1392+ E26F 52 40       >                db      "R@"
1392+ E271             >len_NFA         defl    $ - temp_NFA
1392+ E271             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1392+ E26F             >
1392+ E26F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1392+ E270 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1392+ E272             >                org     $-1                 // alter last byte of Name just above to set
1392+ E271 C0          >                db      {b $} | END_BIT     // msb as name end
1392+ E272             >
1392+ E272 68 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1392+ E274             >Prev_Ptr        defl    Heap_Ptr
1392+ E274             >
1392+ E274             >mirror_Ptr      defl    $
1392+ E274             >
1392+ E274 72 68       >                dw      Dict_Ptr + 2        // xt
1392+ E276             >Heap_Ptr        defl    $ - $E000           // save current HP
1392+ E276             >
1392+ E276             >Current_HP      defl  $ - $E000             // used to set HP once!
1392+ E276             >
1392+ E276             >//              ______________________________________________________________________
1392+ E276             >//              Dictionary part
1392+ E276             >
1392+ E276             >                org     Dict_Ptr
1392+ 6870             >
1392+ 6870 74 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1392+ 6872             >
1392+ 6872             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1392+ 6872 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1392+ 6872 ~           >
1392+ 6872 ~           >
1392+ 6872             >                endif           ; ok        // for other definitions it "points" the correct handler
1392+ 6872             >                // Use of "; ok" to suppress "warning[fwdref]"
1392+ 6872             >
1392+ 6872             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1393+ 6872 C3 3A 64                     jp      I_Ptr
1394+ 6875
1395+ 6875              //  ______________________________________________________________________
1396+ 6875              //
1397+ 6875              // r            -- n
1398+ 6875              // return on top of stack the value of top of return-stack
1399+ 6875              // Since this is the same as I, we alter R's CFA to jump there
1400+ 6875              //              New_Def R_OLD, "R", is_code, is_normal
1401+ 6875              //              jp      I_Ptr
1402+ 6875
1403+ 6875              //  ______________________________________________________________________
1404+ 6875              //
1405+ 6875              // 0=           n -- f
1406+ 6875              // true (non zero) if n is zero, false (0) elsewere
1407+ 6875                              New_Def ZEQUAL, "0=", is_code, is_normal
1407+ 6875             >
1407+ 6875             >Dict_Ptr        defl    $
1407+ 6875             >
1407+ 6875             >//              ______________________________________________________________________
1407+ 6875             >//              Heap part
1407+ 6875             >
1407+ 6875             >
1407+ 6875             >                org     (Heap_Ptr & $1FFF) + $E000
1407+ E276             >
1407+ E276             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1407+ E276             >Latest_Definition defl  Heap_Ptr
1407+ E276             >
1407+ E276             >                // dummy db directives used to calculate length of namec
1407+ E276 30 3D       >                db      "0="
1407+ E278             >len_NFA         defl    $ - temp_NFA
1407+ E278             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1407+ E276             >
1407+ E276 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1407+ E277 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1407+ E279             >                org     $-1                 // alter last byte of Name just above to set
1407+ E278 BD          >                db      {b $} | END_BIT     // msb as name end
1407+ E279             >
1407+ E279 6F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1407+ E27B             >Prev_Ptr        defl    Heap_Ptr
1407+ E27B             >
1407+ E27B             >mirror_Ptr      defl    $
1407+ E27B             >
1407+ E27B 77 68       >                dw      Dict_Ptr + 2        // xt
1407+ E27D             >Heap_Ptr        defl    $ - $E000           // save current HP
1407+ E27D             >
1407+ E27D             >Current_HP      defl  $ - $E000             // used to set HP once!
1407+ E27D             >
1407+ E27D             >//              ______________________________________________________________________
1407+ E27D             >//              Dictionary part
1407+ E27D             >
1407+ E27D             >                org     Dict_Ptr
1407+ 6875             >
1407+ 6875 7B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1407+ 6877             >
1407+ 6877             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1407+ 6877 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1407+ 6877 ~           >
1407+ 6877 ~           >
1407+ 6877             >                endif           ; ok        // for other definitions it "points" the correct handler
1407+ 6877             >                // Use of "; ok" to suppress "warning[fwdref]"
1407+ 6877             >
1407+ 6877             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1408+ 6877              Zero_Equal:
1409+ 6877 E1                           pop     hl
1410+ 6878 7D                           ld      a, l
1411+ 6879 B4                           or      h
1412+ 687A 21 00 00                     ld      hl, FALSE_FLAG
1413+ 687D 20 01                        jr      nz, ZEqual_Skip
1414+ 687F 2B                               dec     hl
1415+ 6880              ZEqual_Skip:
1416+ 6880                              psh1
1416+ 6880 E5          >                push    hl
1416+ 6881 DD E9       >                jp      (ix)
1417+ 6883
1418+ 6883              //  ______________________________________________________________________
1419+ 6883              //
1420+ 6883              // not         a1 -- a2
1421+ 6883              // increment by 2 top of stack
1422+ 6883                              New_Def NOT_OP, "NOT", is_code, is_normal
1422+ 6883             >
1422+ 6883             >Dict_Ptr        defl    $
1422+ 6883             >
1422+ 6883             >//              ______________________________________________________________________
1422+ 6883             >//              Heap part
1422+ 6883             >
1422+ 6883             >
1422+ 6883             >                org     (Heap_Ptr & $1FFF) + $E000
1422+ E27D             >
1422+ E27D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1422+ E27D             >Latest_Definition defl  Heap_Ptr
1422+ E27D             >
1422+ E27D             >                // dummy db directives used to calculate length of namec
1422+ E27D 4E 4F 54    >                db      "NOT"
1422+ E280             >len_NFA         defl    $ - temp_NFA
1422+ E280             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1422+ E27D             >
1422+ E27D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1422+ E27E 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1422+ E281             >                org     $-1                 // alter last byte of Name just above to set
1422+ E280 D4          >                db      {b $} | END_BIT     // msb as name end
1422+ E281             >
1422+ E281 76 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1422+ E283             >Prev_Ptr        defl    Heap_Ptr
1422+ E283             >
1422+ E283             >mirror_Ptr      defl    $
1422+ E283             >
1422+ E283 85 68       >                dw      Dict_Ptr + 2        // xt
1422+ E285             >Heap_Ptr        defl    $ - $E000           // save current HP
1422+ E285             >
1422+ E285             >Current_HP      defl  $ - $E000             // used to set HP once!
1422+ E285             >
1422+ E285             >//              ______________________________________________________________________
1422+ E285             >//              Dictionary part
1422+ E285             >
1422+ E285             >                org     Dict_Ptr
1422+ 6883             >
1422+ 6883 83 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1422+ 6885             >
1422+ 6885             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1422+ 6885 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1422+ 6885 ~           >
1422+ 6885 ~           >
1422+ 6885             >                endif           ; ok        // for other definitions it "points" the correct handler
1422+ 6885             >                // Use of "; ok" to suppress "warning[fwdref]"
1422+ 6885             >
1422+ 6885             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1423+ 6885 C3 77 68                     jp      Zero_Equal
1424+ 6888
1425+ 6888              //  ______________________________________________________________________
1426+ 6888              //
1427+ 6888              // 0<           n -- f
1428+ 6888              // true (non zero) if n is less than zero, false (0) elsewere
1429+ 6888                              New_Def ZLESS, "0<", is_code, is_normal
1429+ 6888             >
1429+ 6888             >Dict_Ptr        defl    $
1429+ 6888             >
1429+ 6888             >//              ______________________________________________________________________
1429+ 6888             >//              Heap part
1429+ 6888             >
1429+ 6888             >
1429+ 6888             >                org     (Heap_Ptr & $1FFF) + $E000
1429+ E285             >
1429+ E285             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1429+ E285             >Latest_Definition defl  Heap_Ptr
1429+ E285             >
1429+ E285             >                // dummy db directives used to calculate length of namec
1429+ E285 30 3C       >                db      "0<"
1429+ E287             >len_NFA         defl    $ - temp_NFA
1429+ E287             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1429+ E285             >
1429+ E285 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1429+ E286 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1429+ E288             >                org     $-1                 // alter last byte of Name just above to set
1429+ E287 BC          >                db      {b $} | END_BIT     // msb as name end
1429+ E288             >
1429+ E288 7D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1429+ E28A             >Prev_Ptr        defl    Heap_Ptr
1429+ E28A             >
1429+ E28A             >mirror_Ptr      defl    $
1429+ E28A             >
1429+ E28A 8A 68       >                dw      Dict_Ptr + 2        // xt
1429+ E28C             >Heap_Ptr        defl    $ - $E000           // save current HP
1429+ E28C             >
1429+ E28C             >Current_HP      defl  $ - $E000             // used to set HP once!
1429+ E28C             >
1429+ E28C             >//              ______________________________________________________________________
1429+ E28C             >//              Dictionary part
1429+ E28C             >
1429+ E28C             >                org     Dict_Ptr
1429+ 6888             >
1429+ 6888 8A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1429+ 688A             >
1429+ 688A             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1429+ 688A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1429+ 688A ~           >
1429+ 688A ~           >
1429+ 688A             >                endif           ; ok        // for other definitions it "points" the correct handler
1429+ 688A             >                // Use of "; ok" to suppress "warning[fwdref]"
1429+ 688A             >
1429+ 688A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1430+ 688A E1                           pop     hl
1431+ 688B 29                           add     hl, hl
1432+ 688C ED 62                        sbc     hl, hl
1433+ 688E                              psh1
1433+ 688E E5          >                push    hl
1433+ 688F DD E9       >                jp      (ix)
1434+ 6891
1435+ 6891              //  ______________________________________________________________________
1436+ 6891              //
1437+ 6891              // 0>           n -- f
1438+ 6891              // true (non zero) if n is less than zero, false (0) elsewere
1439+ 6891                              New_Def ZGREATER, "0>", is_code, is_normal
1439+ 6891             >
1439+ 6891             >Dict_Ptr        defl    $
1439+ 6891             >
1439+ 6891             >//              ______________________________________________________________________
1439+ 6891             >//              Heap part
1439+ 6891             >
1439+ 6891             >
1439+ 6891             >                org     (Heap_Ptr & $1FFF) + $E000
1439+ E28C             >
1439+ E28C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1439+ E28C             >Latest_Definition defl  Heap_Ptr
1439+ E28C             >
1439+ E28C             >                // dummy db directives used to calculate length of namec
1439+ E28C 30 3E       >                db      "0>"
1439+ E28E             >len_NFA         defl    $ - temp_NFA
1439+ E28E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1439+ E28C             >
1439+ E28C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1439+ E28D 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1439+ E28F             >                org     $-1                 // alter last byte of Name just above to set
1439+ E28E BE          >                db      {b $} | END_BIT     // msb as name end
1439+ E28F             >
1439+ E28F 85 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1439+ E291             >Prev_Ptr        defl    Heap_Ptr
1439+ E291             >
1439+ E291             >mirror_Ptr      defl    $
1439+ E291             >
1439+ E291 93 68       >                dw      Dict_Ptr + 2        // xt
1439+ E293             >Heap_Ptr        defl    $ - $E000           // save current HP
1439+ E293             >
1439+ E293             >Current_HP      defl  $ - $E000             // used to set HP once!
1439+ E293             >
1439+ E293             >//              ______________________________________________________________________
1439+ E293             >//              Dictionary part
1439+ E293             >
1439+ E293             >                org     Dict_Ptr
1439+ 6891             >
1439+ 6891 91 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1439+ 6893             >
1439+ 6893             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1439+ 6893 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1439+ 6893 ~           >
1439+ 6893 ~           >
1439+ 6893             >                endif           ; ok        // for other definitions it "points" the correct handler
1439+ 6893             >                // Use of "; ok" to suppress "warning[fwdref]"
1439+ 6893             >
1439+ 6893             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1440+ 6893 E1                           pop     hl
1441+ 6894 7D                           ld      a, l
1442+ 6895 B4                           or      h
1443+ 6896 29                           add     hl, hl
1444+ 6897 21 00 00                     ld      hl, FALSE_FLAG
1445+ 689A 38 04                        jr      c, ZGreater_Skip
1446+ 689C A7                               and     a
1447+ 689D 28 01                            jr      z, ZGreater_Skip
1448+ 689F 2B                                   dec     hl
1449+ 68A0              ZGreater_Skip:
1450+ 68A0                              psh1
1450+ 68A0 E5          >                push    hl
1450+ 68A1 DD E9       >                jp      (ix)
1451+ 68A3
1452+ 68A3              //  ______________________________________________________________________
1453+ 68A3              //
1454+ 68A3              // +            n1 n2 -- n3
1455+ 68A3              // returns the unsigned sum of two top values
1456+ 68A3                              New_Def PLUS, "+", is_code, is_normal
1456+ 68A3             >
1456+ 68A3             >Dict_Ptr        defl    $
1456+ 68A3             >
1456+ 68A3             >//              ______________________________________________________________________
1456+ 68A3             >//              Heap part
1456+ 68A3             >
1456+ 68A3             >
1456+ 68A3             >                org     (Heap_Ptr & $1FFF) + $E000
1456+ E293             >
1456+ E293             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1456+ E293             >Latest_Definition defl  Heap_Ptr
1456+ E293             >
1456+ E293             >                // dummy db directives used to calculate length of namec
1456+ E293 2B          >                db      "+"
1456+ E294             >len_NFA         defl    $ - temp_NFA
1456+ E294             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1456+ E293             >
1456+ E293 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1456+ E294 2B          >                db      "+"               // name string in 7-bit ascii, but
1456+ E295             >                org     $-1                 // alter last byte of Name just above to set
1456+ E294 AB          >                db      {b $} | END_BIT     // msb as name end
1456+ E295             >
1456+ E295 8C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1456+ E297             >Prev_Ptr        defl    Heap_Ptr
1456+ E297             >
1456+ E297             >mirror_Ptr      defl    $
1456+ E297             >
1456+ E297 A5 68       >                dw      Dict_Ptr + 2        // xt
1456+ E299             >Heap_Ptr        defl    $ - $E000           // save current HP
1456+ E299             >
1456+ E299             >Current_HP      defl  $ - $E000             // used to set HP once!
1456+ E299             >
1456+ E299             >//              ______________________________________________________________________
1456+ E299             >//              Dictionary part
1456+ E299             >
1456+ E299             >                org     Dict_Ptr
1456+ 68A3             >
1456+ 68A3 97 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1456+ 68A5             >
1456+ 68A5             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1456+ 68A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1456+ 68A5 ~           >
1456+ 68A5 ~           >
1456+ 68A5             >                endif           ; ok        // for other definitions it "points" the correct handler
1456+ 68A5             >                // Use of "; ok" to suppress "warning[fwdref]"
1456+ 68A5             >
1456+ 68A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1457+ 68A5 D9                           exx
1458+ 68A6 E1                           pop     hl
1459+ 68A7 D1                           pop     de
1460+ 68A8 19                           add     hl, de
1461+ 68A9 E5                           push    hl
1462+ 68AA D9                           exx
1463+ 68AB                              next
1463+ 68AB DD E9       >                jp      (ix)
1464+ 68AD
1465+ 68AD
1466+ 68AD              //  ______________________________________________________________________
1467+ 68AD              //
1468+ 68AD              // d+           d1 d2 -- d3
1469+ 68AD              // returns the unsigned sum of two top double-numbers
1470+ 68AD              //      d2  d1
1471+ 68AD              //      h l h l
1472+ 68AD              // SP   LHEDLHED
1473+ 68AD              // SP  +01234567
1474+ 68AD                              New_Def DPLUS, "D+", is_code, is_normal
1474+ 68AD             >
1474+ 68AD             >Dict_Ptr        defl    $
1474+ 68AD             >
1474+ 68AD             >//              ______________________________________________________________________
1474+ 68AD             >//              Heap part
1474+ 68AD             >
1474+ 68AD             >
1474+ 68AD             >                org     (Heap_Ptr & $1FFF) + $E000
1474+ E299             >
1474+ E299             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1474+ E299             >Latest_Definition defl  Heap_Ptr
1474+ E299             >
1474+ E299             >                // dummy db directives used to calculate length of namec
1474+ E299 44 2B       >                db      "D+"
1474+ E29B             >len_NFA         defl    $ - temp_NFA
1474+ E29B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1474+ E299             >
1474+ E299 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1474+ E29A 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1474+ E29C             >                org     $-1                 // alter last byte of Name just above to set
1474+ E29B AB          >                db      {b $} | END_BIT     // msb as name end
1474+ E29C             >
1474+ E29C 93 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1474+ E29E             >Prev_Ptr        defl    Heap_Ptr
1474+ E29E             >
1474+ E29E             >mirror_Ptr      defl    $
1474+ E29E             >
1474+ E29E AF 68       >                dw      Dict_Ptr + 2        // xt
1474+ E2A0             >Heap_Ptr        defl    $ - $E000           // save current HP
1474+ E2A0             >
1474+ E2A0             >Current_HP      defl  $ - $E000             // used to set HP once!
1474+ E2A0             >
1474+ E2A0             >//              ______________________________________________________________________
1474+ E2A0             >//              Dictionary part
1474+ E2A0             >
1474+ E2A0             >                org     Dict_Ptr
1474+ 68AD             >
1474+ 68AD 9E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1474+ 68AF             >
1474+ 68AF             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1474+ 68AF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1474+ 68AF ~           >
1474+ 68AF ~           >
1474+ 68AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1474+ 68AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1474+ 68AF             >
1474+ 68AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1475+ 68AF
1476+ 68AF D9                           exx
1477+ 68B0 C1                           pop     bc                  // bc := d2.H
1478+ 68B1 D1                           pop     de                  // hl := d2.L
1479+ 68B2 E1                           pop     hl                  // d1.H
1480+ 68B3 E3                           ex      (sp), hl            // d1.L
1481+ 68B4 19                           add     hl, de              // hl := d2.L + d1.L
1482+ 68B5 E3                           ex      (sp), hl            // d1.H
1483+ 68B6 ED 4A                        adc     hl, bc              // d1.H + d2.H
1484+ 68B8 E5                           push    hl
1485+ 68B9 D9                           exx
1486+ 68BA                              next
1486+ 68BA DD E9       >                jp      (ix)
1487+ 68BC
1488+ 68BC              //  ______________________________________________________________________
1489+ 68BC              //
1490+ 68BC              // 1+           n1 -- n2
1491+ 68BC              // increment by 1 top of stack
1492+ 68BC                              New_Def ONE_PLUS, "1+", is_code, is_normal
1492+ 68BC             >
1492+ 68BC             >Dict_Ptr        defl    $
1492+ 68BC             >
1492+ 68BC             >//              ______________________________________________________________________
1492+ 68BC             >//              Heap part
1492+ 68BC             >
1492+ 68BC             >
1492+ 68BC             >                org     (Heap_Ptr & $1FFF) + $E000
1492+ E2A0             >
1492+ E2A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1492+ E2A0             >Latest_Definition defl  Heap_Ptr
1492+ E2A0             >
1492+ E2A0             >                // dummy db directives used to calculate length of namec
1492+ E2A0 31 2B       >                db      "1+"
1492+ E2A2             >len_NFA         defl    $ - temp_NFA
1492+ E2A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1492+ E2A0             >
1492+ E2A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1492+ E2A1 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1492+ E2A3             >                org     $-1                 // alter last byte of Name just above to set
1492+ E2A2 AB          >                db      {b $} | END_BIT     // msb as name end
1492+ E2A3             >
1492+ E2A3 99 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1492+ E2A5             >Prev_Ptr        defl    Heap_Ptr
1492+ E2A5             >
1492+ E2A5             >mirror_Ptr      defl    $
1492+ E2A5             >
1492+ E2A5 BE 68       >                dw      Dict_Ptr + 2        // xt
1492+ E2A7             >Heap_Ptr        defl    $ - $E000           // save current HP
1492+ E2A7             >
1492+ E2A7             >Current_HP      defl  $ - $E000             // used to set HP once!
1492+ E2A7             >
1492+ E2A7             >//              ______________________________________________________________________
1492+ E2A7             >//              Dictionary part
1492+ E2A7             >
1492+ E2A7             >                org     Dict_Ptr
1492+ 68BC             >
1492+ 68BC A5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1492+ 68BE             >
1492+ 68BE             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1492+ 68BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1492+ 68BE ~           >
1492+ 68BE ~           >
1492+ 68BE             >                endif           ; ok        // for other definitions it "points" the correct handler
1492+ 68BE             >                // Use of "; ok" to suppress "warning[fwdref]"
1492+ 68BE             >
1492+ 68BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1493+ 68BE E1                           pop     hl
1494+ 68BF 23                           inc     hl
1495+ 68C0
1496+ 68C0                              psh1
1496+ 68C0 E5          >                push    hl
1496+ 68C1 DD E9       >                jp      (ix)
1497+ 68C3
1498+ 68C3              //  ______________________________________________________________________
1499+ 68C3              //
1500+ 68C3              // 1-           n1 -- n2
1501+ 68C3              // decrement by 1 top of stack
1502+ 68C3                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1502+ 68C3             >
1502+ 68C3             >Dict_Ptr        defl    $
1502+ 68C3             >
1502+ 68C3             >//              ______________________________________________________________________
1502+ 68C3             >//              Heap part
1502+ 68C3             >
1502+ 68C3             >
1502+ 68C3             >                org     (Heap_Ptr & $1FFF) + $E000
1502+ E2A7             >
1502+ E2A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1502+ E2A7             >Latest_Definition defl  Heap_Ptr
1502+ E2A7             >
1502+ E2A7             >                // dummy db directives used to calculate length of namec
1502+ E2A7 31 2D       >                db      "1-"
1502+ E2A9             >len_NFA         defl    $ - temp_NFA
1502+ E2A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1502+ E2A7             >
1502+ E2A7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1502+ E2A8 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1502+ E2AA             >                org     $-1                 // alter last byte of Name just above to set
1502+ E2A9 AD          >                db      {b $} | END_BIT     // msb as name end
1502+ E2AA             >
1502+ E2AA A0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1502+ E2AC             >Prev_Ptr        defl    Heap_Ptr
1502+ E2AC             >
1502+ E2AC             >mirror_Ptr      defl    $
1502+ E2AC             >
1502+ E2AC C5 68       >                dw      Dict_Ptr + 2        // xt
1502+ E2AE             >Heap_Ptr        defl    $ - $E000           // save current HP
1502+ E2AE             >
1502+ E2AE             >Current_HP      defl  $ - $E000             // used to set HP once!
1502+ E2AE             >
1502+ E2AE             >//              ______________________________________________________________________
1502+ E2AE             >//              Dictionary part
1502+ E2AE             >
1502+ E2AE             >                org     Dict_Ptr
1502+ 68C3             >
1502+ 68C3 AC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1502+ 68C5             >
1502+ 68C5             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1502+ 68C5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1502+ 68C5 ~           >
1502+ 68C5 ~           >
1502+ 68C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1502+ 68C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1502+ 68C5             >
1502+ 68C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1503+ 68C5 E1                           pop     hl
1504+ 68C6 2B                           dec     hl
1505+ 68C7
1506+ 68C7                              psh1
1506+ 68C7 E5          >                push    hl
1506+ 68C8 DD E9       >                jp      (ix)
1507+ 68CA
1508+ 68CA              //  ______________________________________________________________________
1509+ 68CA              //
1510+ 68CA              // 2+           n1 -- n2
1511+ 68CA              // increment by 2 top of stack
1512+ 68CA                              New_Def TWO_PLUS, "2+", is_code, is_normal
1512+ 68CA             >
1512+ 68CA             >Dict_Ptr        defl    $
1512+ 68CA             >
1512+ 68CA             >//              ______________________________________________________________________
1512+ 68CA             >//              Heap part
1512+ 68CA             >
1512+ 68CA             >
1512+ 68CA             >                org     (Heap_Ptr & $1FFF) + $E000
1512+ E2AE             >
1512+ E2AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1512+ E2AE             >Latest_Definition defl  Heap_Ptr
1512+ E2AE             >
1512+ E2AE             >                // dummy db directives used to calculate length of namec
1512+ E2AE 32 2B       >                db      "2+"
1512+ E2B0             >len_NFA         defl    $ - temp_NFA
1512+ E2B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1512+ E2AE             >
1512+ E2AE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1512+ E2AF 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1512+ E2B1             >                org     $-1                 // alter last byte of Name just above to set
1512+ E2B0 AB          >                db      {b $} | END_BIT     // msb as name end
1512+ E2B1             >
1512+ E2B1 A7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1512+ E2B3             >Prev_Ptr        defl    Heap_Ptr
1512+ E2B3             >
1512+ E2B3             >mirror_Ptr      defl    $
1512+ E2B3             >
1512+ E2B3 CC 68       >                dw      Dict_Ptr + 2        // xt
1512+ E2B5             >Heap_Ptr        defl    $ - $E000           // save current HP
1512+ E2B5             >
1512+ E2B5             >Current_HP      defl  $ - $E000             // used to set HP once!
1512+ E2B5             >
1512+ E2B5             >//              ______________________________________________________________________
1512+ E2B5             >//              Dictionary part
1512+ E2B5             >
1512+ E2B5             >                org     Dict_Ptr
1512+ 68CA             >
1512+ 68CA B3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1512+ 68CC             >
1512+ 68CC             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1512+ 68CC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1512+ 68CC ~           >
1512+ 68CC ~           >
1512+ 68CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1512+ 68CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1512+ 68CC             >
1512+ 68CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1513+ 68CC              Two_Plus:
1514+ 68CC E1                           pop     hl
1515+ 68CD 23                           inc     hl
1516+ 68CE 23                           inc     hl
1517+ 68CF
1518+ 68CF                              psh1
1518+ 68CF E5          >                push    hl
1518+ 68D0 DD E9       >                jp      (ix)
1519+ 68D2
1520+ 68D2              //  ______________________________________________________________________
1521+ 68D2              //
1522+ 68D2              // cell+        a1 -- a2
1523+ 68D2              // increment by 2 top of stack
1524+ 68D2                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1524+ 68D2             >
1524+ 68D2             >Dict_Ptr        defl    $
1524+ 68D2             >
1524+ 68D2             >//              ______________________________________________________________________
1524+ 68D2             >//              Heap part
1524+ 68D2             >
1524+ 68D2             >
1524+ 68D2             >                org     (Heap_Ptr & $1FFF) + $E000
1524+ E2B5             >
1524+ E2B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1524+ E2B5             >Latest_Definition defl  Heap_Ptr
1524+ E2B5             >
1524+ E2B5             >                // dummy db directives used to calculate length of namec
1524+ E2B5 43 45 4C 4C >                db      "CELL+"
1524+ E2B9 2B          >
1524+ E2BA             >len_NFA         defl    $ - temp_NFA
1524+ E2BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1524+ E2B5             >
1524+ E2B5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1524+ E2B6 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1524+ E2BA 2B          >
1524+ E2BB             >                org     $-1                 // alter last byte of Name just above to set
1524+ E2BA AB          >                db      {b $} | END_BIT     // msb as name end
1524+ E2BB             >
1524+ E2BB AE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1524+ E2BD             >Prev_Ptr        defl    Heap_Ptr
1524+ E2BD             >
1524+ E2BD             >mirror_Ptr      defl    $
1524+ E2BD             >
1524+ E2BD D4 68       >                dw      Dict_Ptr + 2        // xt
1524+ E2BF             >Heap_Ptr        defl    $ - $E000           // save current HP
1524+ E2BF             >
1524+ E2BF             >Current_HP      defl  $ - $E000             // used to set HP once!
1524+ E2BF             >
1524+ E2BF             >//              ______________________________________________________________________
1524+ E2BF             >//              Dictionary part
1524+ E2BF             >
1524+ E2BF             >                org     Dict_Ptr
1524+ 68D2             >
1524+ 68D2 BD 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1524+ 68D4             >
1524+ 68D4             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1524+ 68D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1524+ 68D4 ~           >
1524+ 68D4 ~           >
1524+ 68D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1524+ 68D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1524+ 68D4             >
1524+ 68D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1525+ 68D4 C3 CC 68                     jp      Two_Plus
1526+ 68D7
1527+ 68D7              //  ______________________________________________________________________
1528+ 68D7              //
1529+ 68D7              // align        a1 -- a2
1530+ 68D7              // align memory : not used
1531+ 68D7              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1532+ 68D7              //            next
1533+ 68D7
1534+ 68D7              //  ______________________________________________________________________
1535+ 68D7              //
1536+ 68D7              // cell-        a1 -- a2
1537+ 68D7              // decrement by 2 top of stack
1538+ 68D7                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1538+ 68D7             >
1538+ 68D7             >Dict_Ptr        defl    $
1538+ 68D7             >
1538+ 68D7             >//              ______________________________________________________________________
1538+ 68D7             >//              Heap part
1538+ 68D7             >
1538+ 68D7             >
1538+ 68D7             >                org     (Heap_Ptr & $1FFF) + $E000
1538+ E2BF             >
1538+ E2BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1538+ E2BF             >Latest_Definition defl  Heap_Ptr
1538+ E2BF             >
1538+ E2BF             >                // dummy db directives used to calculate length of namec
1538+ E2BF 43 45 4C 4C >                db      "CELL-"
1538+ E2C3 2D          >
1538+ E2C4             >len_NFA         defl    $ - temp_NFA
1538+ E2C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1538+ E2BF             >
1538+ E2BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1538+ E2C0 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1538+ E2C4 2D          >
1538+ E2C5             >                org     $-1                 // alter last byte of Name just above to set
1538+ E2C4 AD          >                db      {b $} | END_BIT     // msb as name end
1538+ E2C5             >
1538+ E2C5 B5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1538+ E2C7             >Prev_Ptr        defl    Heap_Ptr
1538+ E2C7             >
1538+ E2C7             >mirror_Ptr      defl    $
1538+ E2C7             >
1538+ E2C7 D9 68       >                dw      Dict_Ptr + 2        // xt
1538+ E2C9             >Heap_Ptr        defl    $ - $E000           // save current HP
1538+ E2C9             >
1538+ E2C9             >Current_HP      defl  $ - $E000             // used to set HP once!
1538+ E2C9             >
1538+ E2C9             >//              ______________________________________________________________________
1538+ E2C9             >//              Dictionary part
1538+ E2C9             >
1538+ E2C9             >                org     Dict_Ptr
1538+ 68D7             >
1538+ 68D7 C7 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1538+ 68D9             >
1538+ 68D9             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1538+ 68D9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1538+ 68D9 ~           >
1538+ 68D9 ~           >
1538+ 68D9             >                endif           ; ok        // for other definitions it "points" the correct handler
1538+ 68D9             >                // Use of "; ok" to suppress "warning[fwdref]"
1538+ 68D9             >
1538+ 68D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1539+ 68D9              CellMinus:
1540+ 68D9 E1                           pop     hl
1541+ 68DA 2B                           dec     hl
1542+ 68DB 2B                           dec     hl
1543+ 68DC
1544+ 68DC                              psh1
1544+ 68DC E5          >                push    hl
1544+ 68DD DD E9       >                jp      (ix)
1545+ 68DF
1546+ 68DF              //  ______________________________________________________________________
1547+ 68DF              //
1548+ 68DF              // 2-           a1 -- a2
1549+ 68DF              // decrement by 2 top of stack
1550+ 68DF                              New_Def TWO_MINUS, "2-", is_code, is_normal
1550+ 68DF             >
1550+ 68DF             >Dict_Ptr        defl    $
1550+ 68DF             >
1550+ 68DF             >//              ______________________________________________________________________
1550+ 68DF             >//              Heap part
1550+ 68DF             >
1550+ 68DF             >
1550+ 68DF             >                org     (Heap_Ptr & $1FFF) + $E000
1550+ E2C9             >
1550+ E2C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1550+ E2C9             >Latest_Definition defl  Heap_Ptr
1550+ E2C9             >
1550+ E2C9             >                // dummy db directives used to calculate length of namec
1550+ E2C9 32 2D       >                db      "2-"
1550+ E2CB             >len_NFA         defl    $ - temp_NFA
1550+ E2CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1550+ E2C9             >
1550+ E2C9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1550+ E2CA 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1550+ E2CC             >                org     $-1                 // alter last byte of Name just above to set
1550+ E2CB AD          >                db      {b $} | END_BIT     // msb as name end
1550+ E2CC             >
1550+ E2CC BF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1550+ E2CE             >Prev_Ptr        defl    Heap_Ptr
1550+ E2CE             >
1550+ E2CE             >mirror_Ptr      defl    $
1550+ E2CE             >
1550+ E2CE E1 68       >                dw      Dict_Ptr + 2        // xt
1550+ E2D0             >Heap_Ptr        defl    $ - $E000           // save current HP
1550+ E2D0             >
1550+ E2D0             >Current_HP      defl  $ - $E000             // used to set HP once!
1550+ E2D0             >
1550+ E2D0             >//              ______________________________________________________________________
1550+ E2D0             >//              Dictionary part
1550+ E2D0             >
1550+ E2D0             >                org     Dict_Ptr
1550+ 68DF             >
1550+ 68DF CE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1550+ 68E1             >
1550+ 68E1             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1550+ 68E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1550+ 68E1 ~           >
1550+ 68E1 ~           >
1550+ 68E1             >                endif           ; ok        // for other definitions it "points" the correct handler
1550+ 68E1             >                // Use of "; ok" to suppress "warning[fwdref]"
1550+ 68E1             >
1550+ 68E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1551+ 68E1 C3 D9 68                     jp      CellMinus
1552+ 68E4
1553+ 68E4              //  ______________________________________________________________________
1554+ 68E4              //
1555+ 68E4              // negate       n1 -- n2
1556+ 68E4              // change the sign of number
1557+ 68E4                              New_Def MINUS, "NEGATE", is_code, is_normal
1557+ 68E4             >
1557+ 68E4             >Dict_Ptr        defl    $
1557+ 68E4             >
1557+ 68E4             >//              ______________________________________________________________________
1557+ 68E4             >//              Heap part
1557+ 68E4             >
1557+ 68E4             >
1557+ 68E4             >                org     (Heap_Ptr & $1FFF) + $E000
1557+ E2D0             >
1557+ E2D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1557+ E2D0             >Latest_Definition defl  Heap_Ptr
1557+ E2D0             >
1557+ E2D0             >                // dummy db directives used to calculate length of namec
1557+ E2D0 4E 45 47 41 >                db      "NEGATE"
1557+ E2D4 54 45       >
1557+ E2D6             >len_NFA         defl    $ - temp_NFA
1557+ E2D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1557+ E2D0             >
1557+ E2D0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1557+ E2D1 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1557+ E2D5 54 45       >
1557+ E2D7             >                org     $-1                 // alter last byte of Name just above to set
1557+ E2D6 C5          >                db      {b $} | END_BIT     // msb as name end
1557+ E2D7             >
1557+ E2D7 C9 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1557+ E2D9             >Prev_Ptr        defl    Heap_Ptr
1557+ E2D9             >
1557+ E2D9             >mirror_Ptr      defl    $
1557+ E2D9             >
1557+ E2D9 E6 68       >                dw      Dict_Ptr + 2        // xt
1557+ E2DB             >Heap_Ptr        defl    $ - $E000           // save current HP
1557+ E2DB             >
1557+ E2DB             >Current_HP      defl  $ - $E000             // used to set HP once!
1557+ E2DB             >
1557+ E2DB             >//              ______________________________________________________________________
1557+ E2DB             >//              Dictionary part
1557+ E2DB             >
1557+ E2DB             >                org     Dict_Ptr
1557+ 68E4             >
1557+ 68E4 D9 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1557+ 68E6             >
1557+ 68E6             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1557+ 68E6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1557+ 68E6 ~           >
1557+ 68E6 ~           >
1557+ 68E6             >                endif           ; ok        // for other definitions it "points" the correct handler
1557+ 68E6             >                // Use of "; ok" to suppress "warning[fwdref]"
1557+ 68E6             >
1557+ 68E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1558+ 68E6 D9                           exx
1559+ 68E7 21 00 00                     ld      hl, 0               // subtract from 0
1560+ 68EA D1                           pop     de
1561+ 68EB B7                           or      a
1562+ 68EC ED 52                        sbc     hl, de
1563+ 68EE E5                           push    hl
1564+ 68EF D9                           exx
1565+ 68F0                              next
1565+ 68F0 DD E9       >                jp      (ix)
1566+ 68F2
1567+ 68F2              //  ______________________________________________________________________
1568+ 68F2              //
1569+ 68F2              // dnegate      d1 -- d2
1570+ 68F2              // change the sign of a double number
1571+ 68F2                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1571+ 68F2             >
1571+ 68F2             >Dict_Ptr        defl    $
1571+ 68F2             >
1571+ 68F2             >//              ______________________________________________________________________
1571+ 68F2             >//              Heap part
1571+ 68F2             >
1571+ 68F2             >
1571+ 68F2             >                org     (Heap_Ptr & $1FFF) + $E000
1571+ E2DB             >
1571+ E2DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1571+ E2DB             >Latest_Definition defl  Heap_Ptr
1571+ E2DB             >
1571+ E2DB             >                // dummy db directives used to calculate length of namec
1571+ E2DB 44 4E 45 47 >                db      "DNEGATE"
1571+ E2DF 41 54 45    >
1571+ E2E2             >len_NFA         defl    $ - temp_NFA
1571+ E2E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1571+ E2DB             >
1571+ E2DB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1571+ E2DC 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1571+ E2E0 41 54 45    >
1571+ E2E3             >                org     $-1                 // alter last byte of Name just above to set
1571+ E2E2 C5          >                db      {b $} | END_BIT     // msb as name end
1571+ E2E3             >
1571+ E2E3 D0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1571+ E2E5             >Prev_Ptr        defl    Heap_Ptr
1571+ E2E5             >
1571+ E2E5             >mirror_Ptr      defl    $
1571+ E2E5             >
1571+ E2E5 F4 68       >                dw      Dict_Ptr + 2        // xt
1571+ E2E7             >Heap_Ptr        defl    $ - $E000           // save current HP
1571+ E2E7             >
1571+ E2E7             >Current_HP      defl  $ - $E000             // used to set HP once!
1571+ E2E7             >
1571+ E2E7             >//              ______________________________________________________________________
1571+ E2E7             >//              Dictionary part
1571+ E2E7             >
1571+ E2E7             >                org     Dict_Ptr
1571+ 68F2             >
1571+ 68F2 E5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1571+ 68F4             >
1571+ 68F4             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1571+ 68F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1571+ 68F4 ~           >
1571+ 68F4 ~           >
1571+ 68F4             >                endif           ; ok        // for other definitions it "points" the correct handler
1571+ 68F4             >                // Use of "; ok" to suppress "warning[fwdref]"
1571+ 68F4             >
1571+ 68F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1572+ 68F4 D9                           exx
1573+ 68F5 C1                           pop     bc                  // d1.H
1574+ 68F6 D1                           pop     de                  // d1.L
1575+ 68F7 AF                           xor     a
1576+ 68F8 67                           ld      h, a
1577+ 68F9 6F                           ld      l, a
1578+ 68FA ED 52                        sbc     hl, de              // subtact from zero
1579+ 68FC E5                           push    hl                  // > d2-L
1580+ 68FD 67                           ld      h, a
1581+ 68FE 6F                           ld      l, a
1582+ 68FF ED 42                        sbc     hl, bc              // subtract from zero with carry
1583+ 6901                                                          // > d2-H
1584+ 6901 E5                           push    hl
1585+ 6902 D9                           exx
1586+ 6903                              next
1586+ 6903 DD E9       >                jp      (ix)
1587+ 6905
1588+ 6905              //  ______________________________________________________________________
1589+ 6905              //
1590+ 6905              // over         n1 n2 -- n1 n2 n1
1591+ 6905              // copy the second value of stack and put it on top.
1592+ 6905                              New_Def OVER, "OVER", is_code, is_normal
1592+ 6905             >
1592+ 6905             >Dict_Ptr        defl    $
1592+ 6905             >
1592+ 6905             >//              ______________________________________________________________________
1592+ 6905             >//              Heap part
1592+ 6905             >
1592+ 6905             >
1592+ 6905             >                org     (Heap_Ptr & $1FFF) + $E000
1592+ E2E7             >
1592+ E2E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1592+ E2E7             >Latest_Definition defl  Heap_Ptr
1592+ E2E7             >
1592+ E2E7             >                // dummy db directives used to calculate length of namec
1592+ E2E7 4F 56 45 52 >                db      "OVER"
1592+ E2EB             >len_NFA         defl    $ - temp_NFA
1592+ E2EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1592+ E2E7             >
1592+ E2E7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1592+ E2E8 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1592+ E2EC             >                org     $-1                 // alter last byte of Name just above to set
1592+ E2EB D2          >                db      {b $} | END_BIT     // msb as name end
1592+ E2EC             >
1592+ E2EC DB 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1592+ E2EE             >Prev_Ptr        defl    Heap_Ptr
1592+ E2EE             >
1592+ E2EE             >mirror_Ptr      defl    $
1592+ E2EE             >
1592+ E2EE 07 69       >                dw      Dict_Ptr + 2        // xt
1592+ E2F0             >Heap_Ptr        defl    $ - $E000           // save current HP
1592+ E2F0             >
1592+ E2F0             >Current_HP      defl  $ - $E000             // used to set HP once!
1592+ E2F0             >
1592+ E2F0             >//              ______________________________________________________________________
1592+ E2F0             >//              Dictionary part
1592+ E2F0             >
1592+ E2F0             >                org     Dict_Ptr
1592+ 6905             >
1592+ 6905 EE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1592+ 6907             >
1592+ 6907             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1592+ 6907 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1592+ 6907 ~           >
1592+ 6907 ~           >
1592+ 6907             >                endif           ; ok        // for other definitions it "points" the correct handler
1592+ 6907             >                // Use of "; ok" to suppress "warning[fwdref]"
1592+ 6907             >
1592+ 6907             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1593+ 6907                              // exx     // we can use af instead OPTIMIZATION possible
1594+ 6907 F1                           pop     af                  //   n2
1595+ 6908 E1                           pop     hl                  // < n1
1596+ 6909 E5                           push    hl                  // > n1
1597+ 690A F5                           push    af                  // > n2
1598+ 690B E5                           push    hl                  // > n1
1599+ 690C                              // exx
1600+ 690C                              next
1600+ 690C DD E9       >                jp      (ix)
1601+ 690E
1602+ 690E              //  ______________________________________________________________________
1603+ 690E              //
1604+ 690E              // drop         n1 --
1605+ 690E              // drops the top of stack
1606+ 690E                              New_Def DROP, "DROP", is_code, is_normal
1606+ 690E             >
1606+ 690E             >Dict_Ptr        defl    $
1606+ 690E             >
1606+ 690E             >//              ______________________________________________________________________
1606+ 690E             >//              Heap part
1606+ 690E             >
1606+ 690E             >
1606+ 690E             >                org     (Heap_Ptr & $1FFF) + $E000
1606+ E2F0             >
1606+ E2F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1606+ E2F0             >Latest_Definition defl  Heap_Ptr
1606+ E2F0             >
1606+ E2F0             >                // dummy db directives used to calculate length of namec
1606+ E2F0 44 52 4F 50 >                db      "DROP"
1606+ E2F4             >len_NFA         defl    $ - temp_NFA
1606+ E2F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1606+ E2F0             >
1606+ E2F0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1606+ E2F1 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1606+ E2F5             >                org     $-1                 // alter last byte of Name just above to set
1606+ E2F4 D0          >                db      {b $} | END_BIT     // msb as name end
1606+ E2F5             >
1606+ E2F5 E7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1606+ E2F7             >Prev_Ptr        defl    Heap_Ptr
1606+ E2F7             >
1606+ E2F7             >mirror_Ptr      defl    $
1606+ E2F7             >
1606+ E2F7 10 69       >                dw      Dict_Ptr + 2        // xt
1606+ E2F9             >Heap_Ptr        defl    $ - $E000           // save current HP
1606+ E2F9             >
1606+ E2F9             >Current_HP      defl  $ - $E000             // used to set HP once!
1606+ E2F9             >
1606+ E2F9             >//              ______________________________________________________________________
1606+ E2F9             >//              Dictionary part
1606+ E2F9             >
1606+ E2F9             >                org     Dict_Ptr
1606+ 690E             >
1606+ 690E F7 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1606+ 6910             >
1606+ 6910             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1606+ 6910 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1606+ 6910 ~           >
1606+ 6910 ~           >
1606+ 6910             >                endif           ; ok        // for other definitions it "points" the correct handler
1606+ 6910             >                // Use of "; ok" to suppress "warning[fwdref]"
1606+ 6910             >
1606+ 6910             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1607+ 6910 E1                           pop     hl                  // < n1 and discard previous TOS
1608+ 6911                              next
1608+ 6911 DD E9       >                jp      (ix)
1609+ 6913
1610+ 6913              //  ______________________________________________________________________
1611+ 6913              //
1612+ 6913              // nip          n1 n2 -- n2
1613+ 6913              // drops the second elemento on the stack
1614+ 6913                              New_Def NIP, "NIP", is_code, is_normal
1614+ 6913             >
1614+ 6913             >Dict_Ptr        defl    $
1614+ 6913             >
1614+ 6913             >//              ______________________________________________________________________
1614+ 6913             >//              Heap part
1614+ 6913             >
1614+ 6913             >
1614+ 6913             >                org     (Heap_Ptr & $1FFF) + $E000
1614+ E2F9             >
1614+ E2F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1614+ E2F9             >Latest_Definition defl  Heap_Ptr
1614+ E2F9             >
1614+ E2F9             >                // dummy db directives used to calculate length of namec
1614+ E2F9 4E 49 50    >                db      "NIP"
1614+ E2FC             >len_NFA         defl    $ - temp_NFA
1614+ E2FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1614+ E2F9             >
1614+ E2F9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1614+ E2FA 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1614+ E2FD             >                org     $-1                 // alter last byte of Name just above to set
1614+ E2FC D0          >                db      {b $} | END_BIT     // msb as name end
1614+ E2FD             >
1614+ E2FD F0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1614+ E2FF             >Prev_Ptr        defl    Heap_Ptr
1614+ E2FF             >
1614+ E2FF             >mirror_Ptr      defl    $
1614+ E2FF             >
1614+ E2FF 15 69       >                dw      Dict_Ptr + 2        // xt
1614+ E301             >Heap_Ptr        defl    $ - $E000           // save current HP
1614+ E301             >
1614+ E301             >Current_HP      defl  $ - $E000             // used to set HP once!
1614+ E301             >
1614+ E301             >//              ______________________________________________________________________
1614+ E301             >//              Dictionary part
1614+ E301             >
1614+ E301             >                org     Dict_Ptr
1614+ 6913             >
1614+ 6913 FF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1614+ 6915             >
1614+ 6915             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1614+ 6915 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1614+ 6915 ~           >
1614+ 6915 ~           >
1614+ 6915             >                endif           ; ok        // for other definitions it "points" the correct handler
1614+ 6915             >                // Use of "; ok" to suppress "warning[fwdref]"
1614+ 6915             >
1614+ 6915             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1615+ 6915
1616+ 6915 E1                           pop     hl                  // < n1 discarded
1617+ 6916 E3                           ex      (sp), hl
1618+ 6917                              next
1618+ 6917 DD E9       >                jp      (ix)
1619+ 6919
1620+ 6919              //  ______________________________________________________________________
1621+ 6919              //
1622+ 6919              // tuck         n1 n2 -- n2 n1 n2
1623+ 6919              // copy the top element after the second.
1624+ 6919                              New_Def TUCK, "TUCK", is_code, is_normal
1624+ 6919             >
1624+ 6919             >Dict_Ptr        defl    $
1624+ 6919             >
1624+ 6919             >//              ______________________________________________________________________
1624+ 6919             >//              Heap part
1624+ 6919             >
1624+ 6919             >
1624+ 6919             >                org     (Heap_Ptr & $1FFF) + $E000
1624+ E301             >
1624+ E301             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1624+ E301             >Latest_Definition defl  Heap_Ptr
1624+ E301             >
1624+ E301             >                // dummy db directives used to calculate length of namec
1624+ E301 54 55 43 4B >                db      "TUCK"
1624+ E305             >len_NFA         defl    $ - temp_NFA
1624+ E305             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1624+ E301             >
1624+ E301 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1624+ E302 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1624+ E306             >                org     $-1                 // alter last byte of Name just above to set
1624+ E305 CB          >                db      {b $} | END_BIT     // msb as name end
1624+ E306             >
1624+ E306 F9 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1624+ E308             >Prev_Ptr        defl    Heap_Ptr
1624+ E308             >
1624+ E308             >mirror_Ptr      defl    $
1624+ E308             >
1624+ E308 1B 69       >                dw      Dict_Ptr + 2        // xt
1624+ E30A             >Heap_Ptr        defl    $ - $E000           // save current HP
1624+ E30A             >
1624+ E30A             >Current_HP      defl  $ - $E000             // used to set HP once!
1624+ E30A             >
1624+ E30A             >//              ______________________________________________________________________
1624+ E30A             >//              Dictionary part
1624+ E30A             >
1624+ E30A             >                org     Dict_Ptr
1624+ 6919             >
1624+ 6919 08 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1624+ 691B             >
1624+ 691B             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1624+ 691B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1624+ 691B ~           >
1624+ 691B ~           >
1624+ 691B             >                endif           ; ok        // for other definitions it "points" the correct handler
1624+ 691B             >                // Use of "; ok" to suppress "warning[fwdref]"
1624+ 691B             >
1624+ 691B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1625+ 691B E1                           pop     hl
1626+ 691C F1                           pop     af                  // < n1
1627+ 691D E5                           push    hl                  // > n2  and TOS
1628+ 691E F5                           push    af                  // > n1
1629+ 691F E5                           push    hl
1630+ 6920                              next
1630+ 6920 DD E9       >                jp      (ix)
1631+ 6922
1632+ 6922              //  ______________________________________________________________________
1633+ 6922              //
1634+ 6922              // swap         n1 n2 -- n2 n1
1635+ 6922              // swaps the two values on top of stack
1636+ 6922                              New_Def SWAP, "SWAP", is_code, is_normal
1636+ 6922             >
1636+ 6922             >Dict_Ptr        defl    $
1636+ 6922             >
1636+ 6922             >//              ______________________________________________________________________
1636+ 6922             >//              Heap part
1636+ 6922             >
1636+ 6922             >
1636+ 6922             >                org     (Heap_Ptr & $1FFF) + $E000
1636+ E30A             >
1636+ E30A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1636+ E30A             >Latest_Definition defl  Heap_Ptr
1636+ E30A             >
1636+ E30A             >                // dummy db directives used to calculate length of namec
1636+ E30A 53 57 41 50 >                db      "SWAP"
1636+ E30E             >len_NFA         defl    $ - temp_NFA
1636+ E30E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1636+ E30A             >
1636+ E30A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1636+ E30B 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1636+ E30F             >                org     $-1                 // alter last byte of Name just above to set
1636+ E30E D0          >                db      {b $} | END_BIT     // msb as name end
1636+ E30F             >
1636+ E30F 01 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1636+ E311             >Prev_Ptr        defl    Heap_Ptr
1636+ E311             >
1636+ E311             >mirror_Ptr      defl    $
1636+ E311             >
1636+ E311 24 69       >                dw      Dict_Ptr + 2        // xt
1636+ E313             >Heap_Ptr        defl    $ - $E000           // save current HP
1636+ E313             >
1636+ E313             >Current_HP      defl  $ - $E000             // used to set HP once!
1636+ E313             >
1636+ E313             >//              ______________________________________________________________________
1636+ E313             >//              Dictionary part
1636+ E313             >
1636+ E313             >                org     Dict_Ptr
1636+ 6922             >
1636+ 6922 11 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1636+ 6924             >
1636+ 6924             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1636+ 6924 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1636+ 6924 ~           >
1636+ 6924 ~           >
1636+ 6924             >                endif           ; ok        // for other definitions it "points" the correct handler
1636+ 6924             >                // Use of "; ok" to suppress "warning[fwdref]"
1636+ 6924             >
1636+ 6924             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1637+ 6924 E1                           pop     hl                  // < n1
1638+ 6925 E3                           ex      (sp),hl             // > n2
1639+ 6926 E5                           push    hl                  // copy n1 to TOS
1640+ 6927                              next
1640+ 6927 DD E9       >                jp      (ix)
1641+ 6929
1642+ 6929              //  ______________________________________________________________________
1643+ 6929              //
1644+ 6929              // dup         n -- n n
1645+ 6929              // duplicates the top value of stack
1646+ 6929                              New_Def DUP, "DUP", is_code, is_normal
1646+ 6929             >
1646+ 6929             >Dict_Ptr        defl    $
1646+ 6929             >
1646+ 6929             >//              ______________________________________________________________________
1646+ 6929             >//              Heap part
1646+ 6929             >
1646+ 6929             >
1646+ 6929             >                org     (Heap_Ptr & $1FFF) + $E000
1646+ E313             >
1646+ E313             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1646+ E313             >Latest_Definition defl  Heap_Ptr
1646+ E313             >
1646+ E313             >                // dummy db directives used to calculate length of namec
1646+ E313 44 55 50    >                db      "DUP"
1646+ E316             >len_NFA         defl    $ - temp_NFA
1646+ E316             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1646+ E313             >
1646+ E313 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1646+ E314 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1646+ E317             >                org     $-1                 // alter last byte of Name just above to set
1646+ E316 D0          >                db      {b $} | END_BIT     // msb as name end
1646+ E317             >
1646+ E317 0A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1646+ E319             >Prev_Ptr        defl    Heap_Ptr
1646+ E319             >
1646+ E319             >mirror_Ptr      defl    $
1646+ E319             >
1646+ E319 2B 69       >                dw      Dict_Ptr + 2        // xt
1646+ E31B             >Heap_Ptr        defl    $ - $E000           // save current HP
1646+ E31B             >
1646+ E31B             >Current_HP      defl  $ - $E000             // used to set HP once!
1646+ E31B             >
1646+ E31B             >//              ______________________________________________________________________
1646+ E31B             >//              Dictionary part
1646+ E31B             >
1646+ E31B             >                org     Dict_Ptr
1646+ 6929             >
1646+ 6929 19 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1646+ 692B             >
1646+ 692B             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1646+ 692B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1646+ 692B ~           >
1646+ 692B ~           >
1646+ 692B             >                endif           ; ok        // for other definitions it "points" the correct handler
1646+ 692B             >                // Use of "; ok" to suppress "warning[fwdref]"
1646+ 692B             >
1646+ 692B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1647+ 692B E1                           pop     hl
1648+ 692C E5                           push    hl                  // > n duplicate TOS
1649+ 692D E5                           push    hl
1650+ 692E                              next
1650+ 692E DD E9       >                jp      (ix)
1651+ 6930
1652+ 6930              //  ______________________________________________________________________
1653+ 6930              //
1654+ 6930              // rot         n1 n2 n3 -- n2 n3 n1
1655+ 6930              // Rotates the 3 top values of stack by picking the 3rd in access-order
1656+ 6930              // and putting it on top. The other two are shifted down one place.
1657+ 6930                              New_Def ROT, "ROT", is_code, is_normal
1657+ 6930             >
1657+ 6930             >Dict_Ptr        defl    $
1657+ 6930             >
1657+ 6930             >//              ______________________________________________________________________
1657+ 6930             >//              Heap part
1657+ 6930             >
1657+ 6930             >
1657+ 6930             >                org     (Heap_Ptr & $1FFF) + $E000
1657+ E31B             >
1657+ E31B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1657+ E31B             >Latest_Definition defl  Heap_Ptr
1657+ E31B             >
1657+ E31B             >                // dummy db directives used to calculate length of namec
1657+ E31B 52 4F 54    >                db      "ROT"
1657+ E31E             >len_NFA         defl    $ - temp_NFA
1657+ E31E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1657+ E31B             >
1657+ E31B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1657+ E31C 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1657+ E31F             >                org     $-1                 // alter last byte of Name just above to set
1657+ E31E D4          >                db      {b $} | END_BIT     // msb as name end
1657+ E31F             >
1657+ E31F 13 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1657+ E321             >Prev_Ptr        defl    Heap_Ptr
1657+ E321             >
1657+ E321             >mirror_Ptr      defl    $
1657+ E321             >
1657+ E321 32 69       >                dw      Dict_Ptr + 2        // xt
1657+ E323             >Heap_Ptr        defl    $ - $E000           // save current HP
1657+ E323             >
1657+ E323             >Current_HP      defl  $ - $E000             // used to set HP once!
1657+ E323             >
1657+ E323             >//              ______________________________________________________________________
1657+ E323             >//              Dictionary part
1657+ E323             >
1657+ E323             >                org     Dict_Ptr
1657+ 6930             >
1657+ 6930 21 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1657+ 6932             >
1657+ 6932             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1657+ 6932 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1657+ 6932 ~           >
1657+ 6932 ~           >
1657+ 6932             >                endif           ; ok        // for other definitions it "points" the correct handler
1657+ 6932             >                // Use of "; ok" to suppress "warning[fwdref]"
1657+ 6932             >
1657+ 6932             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1658+ 6932 D9                           exx
1659+ 6933 D1                           pop     de                  // < n3
1660+ 6934 E1                           pop     hl                  // < n2
1661+ 6935 E3                           ex      (sp),hl             // > n2 < n1
1662+ 6936 D5                           push    de                  // > n3
1663+ 6937 E5                           push    hl                  // copy n1 to TOS
1664+ 6938 D9                           exx
1665+ 6939                              next
1665+ 6939 DD E9       >                jp      (ix)
1666+ 693B
1667+ 693B              //  ______________________________________________________________________
1668+ 693B              //
1669+ 693B              // -rot         n1 n2 n3 -- n3 n1 n2
1670+ 693B              // Rotates the 3 top values of stack by picking the 1st in access-order
1671+ 693B              // and putting back to 3rd place. The other two are shifted down one place.
1672+ 693B                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1672+ 693B             >
1672+ 693B             >Dict_Ptr        defl    $
1672+ 693B             >
1672+ 693B             >//              ______________________________________________________________________
1672+ 693B             >//              Heap part
1672+ 693B             >
1672+ 693B             >
1672+ 693B             >                org     (Heap_Ptr & $1FFF) + $E000
1672+ E323             >
1672+ E323             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1672+ E323             >Latest_Definition defl  Heap_Ptr
1672+ E323             >
1672+ E323             >                // dummy db directives used to calculate length of namec
1672+ E323 2D 52 4F 54 >                db      "-ROT"
1672+ E327             >len_NFA         defl    $ - temp_NFA
1672+ E327             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1672+ E323             >
1672+ E323 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1672+ E324 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1672+ E328             >                org     $-1                 // alter last byte of Name just above to set
1672+ E327 D4          >                db      {b $} | END_BIT     // msb as name end
1672+ E328             >
1672+ E328 1B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1672+ E32A             >Prev_Ptr        defl    Heap_Ptr
1672+ E32A             >
1672+ E32A             >mirror_Ptr      defl    $
1672+ E32A             >
1672+ E32A 3D 69       >                dw      Dict_Ptr + 2        // xt
1672+ E32C             >Heap_Ptr        defl    $ - $E000           // save current HP
1672+ E32C             >
1672+ E32C             >Current_HP      defl  $ - $E000             // used to set HP once!
1672+ E32C             >
1672+ E32C             >//              ______________________________________________________________________
1672+ E32C             >//              Dictionary part
1672+ E32C             >
1672+ E32C             >                org     Dict_Ptr
1672+ 693B             >
1672+ 693B 2A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1672+ 693D             >
1672+ 693D             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1672+ 693D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1672+ 693D ~           >
1672+ 693D ~           >
1672+ 693D             >                endif           ; ok        // for other definitions it "points" the correct handler
1672+ 693D             >                // Use of "; ok" to suppress "warning[fwdref]"
1672+ 693D             >
1672+ 693D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1673+ 693D D9                           exx
1674+ 693E E1                           pop     hl                  // < n3
1675+ 693F D1                           pop     de                  // < n2
1676+ 6940 E3                           ex      (sp),hl             // > n3 < n1
1677+ 6941 E5                           push    hl                  // > n1
1678+ 6942 D5                           push    de                  // copy n3 to TOS
1679+ 6943 D9                           exx
1680+ 6944                              next
1680+ 6944 DD E9       >                jp      (ix)
1681+ 6946
1682+ 6946              //  ______________________________________________________________________
1683+ 6946              //
1684+ 6946              // pick        n1 -- nx
1685+ 6946              // picks the nth element from TOS
1686+ 6946                              New_Def PICK, "PICK", is_code, is_normal
1686+ 6946             >
1686+ 6946             >Dict_Ptr        defl    $
1686+ 6946             >
1686+ 6946             >//              ______________________________________________________________________
1686+ 6946             >//              Heap part
1686+ 6946             >
1686+ 6946             >
1686+ 6946             >                org     (Heap_Ptr & $1FFF) + $E000
1686+ E32C             >
1686+ E32C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1686+ E32C             >Latest_Definition defl  Heap_Ptr
1686+ E32C             >
1686+ E32C             >                // dummy db directives used to calculate length of namec
1686+ E32C 50 49 43 4B >                db      "PICK"
1686+ E330             >len_NFA         defl    $ - temp_NFA
1686+ E330             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1686+ E32C             >
1686+ E32C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1686+ E32D 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1686+ E331             >                org     $-1                 // alter last byte of Name just above to set
1686+ E330 CB          >                db      {b $} | END_BIT     // msb as name end
1686+ E331             >
1686+ E331 23 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1686+ E333             >Prev_Ptr        defl    Heap_Ptr
1686+ E333             >
1686+ E333             >mirror_Ptr      defl    $
1686+ E333             >
1686+ E333 48 69       >                dw      Dict_Ptr + 2        // xt
1686+ E335             >Heap_Ptr        defl    $ - $E000           // save current HP
1686+ E335             >
1686+ E335             >Current_HP      defl  $ - $E000             // used to set HP once!
1686+ E335             >
1686+ E335             >//              ______________________________________________________________________
1686+ E335             >//              Dictionary part
1686+ E335             >
1686+ E335             >                org     Dict_Ptr
1686+ 6946             >
1686+ 6946 33 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1686+ 6948             >
1686+ 6948             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1686+ 6948 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1686+ 6948 ~           >
1686+ 6948 ~           >
1686+ 6948             >                endif           ; ok        // for other definitions it "points" the correct handler
1686+ 6948             >                // Use of "; ok" to suppress "warning[fwdref]"
1686+ 6948             >
1686+ 6948             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1687+ 6948 E1                           pop     hl                  // take TOS as index
1688+ 6949 29                           add     hl, hl              // as cells
1689+ 694A 39                           add     hl, sp              // from Stack Pointer
1690+ 694B 7E                           ld      a, (hl)             // replace TOS
1691+ 694C 23                           inc     hl
1692+ 694D 66                           ld      h, (hl)
1693+ 694E 6F                           ld      l, a
1694+ 694F E5                           push    hl
1695+ 6950                              next
1695+ 6950 DD E9       >                jp      (ix)
1696+ 6952
1697+ 6952
1698+ 6952              //  ______________________________________________________________________
1699+ 6952              //
1700+ 6952              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1701+ 6952              // picks the nth element from TOS
1702+ 6952              //              New_Def ROLL, "ROLL", is_code, is_normal
1703+ 6952              //              exx                     // we need all registers free
1704+ 6952              //              pop     hl              // number of cells to roll
1705+ 6952              //              ld      a, h
1706+ 6952              //              or       l
1707+ 6952              //              jr      z, Roll_Zero
1708+ 6952              //                  add     hl, hl              // number of bytes to move
1709+ 6952              //                  ld      b, h
1710+ 6952              //                  ld      c, l
1711+ 6952              //                  add     hl, sp          // address of n1
1712+ 6952              //                  ld      a, (hl)         // take n1 into a and a,
1713+ 6952              //                  inc     hl
1714+ 6952              //                  ex      af, af'
1715+ 6952              //                  ld      a, (hl)         // take n1 into a and a,
1716+ 6952              //                  ld      d, h
1717+ 6952              //                  ld      e, l
1718+ 6952              //                  dec     hl
1719+ 6952              //                  dec     hl
1720+ 6952              //                  lddr
1721+ 6952              //                  ex      de, hl
1722+ 6952              //                  ld      (hl), a
1723+ 6952              //                  dec     hl
1724+ 6952              //                  ex      af, af'
1725+ 6952              //                  ld      (hl), a
1726+ 6952              //Roll_Zero:
1727+ 6952              //              exx
1728+ 6952              //              next
1729+ 6952
1730+ 6952
1731+ 6952              //  ______________________________________________________________________
1732+ 6952              //
1733+ 6952              // 2over        d1 d2 -- d1 d2 d1
1734+ 6952              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1735+ 6952              // copy the second double of stack and put on top.
1736+ 6952              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1737+ 6952              //              exx
1738+ 6952              //              ld      hl, 7
1739+ 6952              //              add     hl, sp
1740+ 6952              //              ld      d, (hl)
1741+ 6952              //              dec     hl
1742+ 6952              //              ld      e, (hl)             // d1-L
1743+ 6952              //              push    de
1744+ 6952              //              dec     hl
1745+ 6952              //              ld      d, (hl)
1746+ 6952              //              dec     hl
1747+ 6952              //              ld      e, (hl)             // d1-H
1748+ 6952              //              push    de
1749+ 6952              //              exx
1750+ 6952              //              next
1751+ 6952
1752+ 6952              //  ______________________________________________________________________
1753+ 6952              //
1754+ 6952              // 2drop        d --
1755+ 6952              //              n1 n2 --
1756+ 6952              // drops the top double from stack
1757+ 6952                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1757+ 6952             >
1757+ 6952             >Dict_Ptr        defl    $
1757+ 6952             >
1757+ 6952             >//              ______________________________________________________________________
1757+ 6952             >//              Heap part
1757+ 6952             >
1757+ 6952             >
1757+ 6952             >                org     (Heap_Ptr & $1FFF) + $E000
1757+ E335             >
1757+ E335             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1757+ E335             >Latest_Definition defl  Heap_Ptr
1757+ E335             >
1757+ E335             >                // dummy db directives used to calculate length of namec
1757+ E335 32 44 52 4F >                db      "2DROP"
1757+ E339 50          >
1757+ E33A             >len_NFA         defl    $ - temp_NFA
1757+ E33A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1757+ E335             >
1757+ E335 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1757+ E336 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1757+ E33A 50          >
1757+ E33B             >                org     $-1                 // alter last byte of Name just above to set
1757+ E33A D0          >                db      {b $} | END_BIT     // msb as name end
1757+ E33B             >
1757+ E33B 2C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1757+ E33D             >Prev_Ptr        defl    Heap_Ptr
1757+ E33D             >
1757+ E33D             >mirror_Ptr      defl    $
1757+ E33D             >
1757+ E33D 54 69       >                dw      Dict_Ptr + 2        // xt
1757+ E33F             >Heap_Ptr        defl    $ - $E000           // save current HP
1757+ E33F             >
1757+ E33F             >Current_HP      defl  $ - $E000             // used to set HP once!
1757+ E33F             >
1757+ E33F             >//              ______________________________________________________________________
1757+ E33F             >//              Dictionary part
1757+ E33F             >
1757+ E33F             >                org     Dict_Ptr
1757+ 6952             >
1757+ 6952 3D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1757+ 6954             >
1757+ 6954             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1757+ 6954 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1757+ 6954 ~           >
1757+ 6954 ~           >
1757+ 6954             >                endif           ; ok        // for other definitions it "points" the correct handler
1757+ 6954             >                // Use of "; ok" to suppress "warning[fwdref]"
1757+ 6954             >
1757+ 6954             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1758+ 6954 E1                           pop     hl
1759+ 6955 E1                           pop     hl
1760+ 6956                              next
1760+ 6956 DD E9       >                jp      (ix)
1761+ 6958
1762+ 6958              //  ______________________________________________________________________
1763+ 6958              //
1764+ 6958              // 2nip         d1 d2 -- d2
1765+ 6958              //              n1 n2 n3 n4 -- n3 n4
1766+ 6958              // drops the second double on the stack
1767+ 6958              //              New_Def TWO_NIP, 4, "2nip"
1768+ 6958              //              ...
1769+ 6958
1770+ 6958              //  ______________________________________________________________________
1771+ 6958              //
1772+ 6958              // 2tuck         d1 d2 -- d2 d1 d2
1773+ 6958              // copy the top element after the second.
1774+ 6958              //              New_Def TWO_TUCK, 5, "2tuck"
1775+ 6958              //              ...
1776+ 6958
1777+ 6958              //  ______________________________________________________________________
1778+ 6958              //
1779+ 6958              // 2swap         d1 d2 -- d2 d1
1780+ 6958              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1781+ 6958              // swaps the two doubles on top of stack
1782+ 6958                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1782+ 6958             >
1782+ 6958             >Dict_Ptr        defl    $
1782+ 6958             >
1782+ 6958             >//              ______________________________________________________________________
1782+ 6958             >//              Heap part
1782+ 6958             >
1782+ 6958             >
1782+ 6958             >                org     (Heap_Ptr & $1FFF) + $E000
1782+ E33F             >
1782+ E33F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1782+ E33F             >Latest_Definition defl  Heap_Ptr
1782+ E33F             >
1782+ E33F             >                // dummy db directives used to calculate length of namec
1782+ E33F 32 53 57 41 >                db      "2SWAP"
1782+ E343 50          >
1782+ E344             >len_NFA         defl    $ - temp_NFA
1782+ E344             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1782+ E33F             >
1782+ E33F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1782+ E340 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1782+ E344 50          >
1782+ E345             >                org     $-1                 // alter last byte of Name just above to set
1782+ E344 D0          >                db      {b $} | END_BIT     // msb as name end
1782+ E345             >
1782+ E345 35 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1782+ E347             >Prev_Ptr        defl    Heap_Ptr
1782+ E347             >
1782+ E347             >mirror_Ptr      defl    $
1782+ E347             >
1782+ E347 5A 69       >                dw      Dict_Ptr + 2        // xt
1782+ E349             >Heap_Ptr        defl    $ - $E000           // save current HP
1782+ E349             >
1782+ E349             >Current_HP      defl  $ - $E000             // used to set HP once!
1782+ E349             >
1782+ E349             >//              ______________________________________________________________________
1782+ E349             >//              Dictionary part
1782+ E349             >
1782+ E349             >                org     Dict_Ptr
1782+ 6958             >
1782+ 6958 47 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1782+ 695A             >
1782+ 695A             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1782+ 695A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1782+ 695A ~           >
1782+ 695A ~           >
1782+ 695A             >                endif           ; ok        // for other definitions it "points" the correct handler
1782+ 695A             >                // Use of "; ok" to suppress "warning[fwdref]"
1782+ 695A             >
1782+ 695A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1783+ 695A D9                           exx
1784+ 695B F1                           pop     af                  //   d2-H
1785+ 695C E1                           pop     hl                  // < d2-L
1786+ 695D D1                           pop     de                  // < d1-H
1787+ 695E E3                           ex      (sp), hl            // < d1-L > d2-L
1788+ 695F F5                           push    af                  // > d2-H
1789+ 6960 E5                           push    hl                  // > d1-L
1790+ 6961 D5                           push    de
1791+ 6962 D9                           exx
1792+ 6963                              next
1792+ 6963 DD E9       >                jp      (ix)
1793+ 6965
1794+ 6965              //  ______________________________________________________________________
1795+ 6965              //
1796+ 6965              // 2dup         d -- d d
1797+ 6965              //              n1 n2 -- n1 n2 n1 n2
1798+ 6965              // duplicates the top double of stack
1799+ 6965                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1799+ 6965             >
1799+ 6965             >Dict_Ptr        defl    $
1799+ 6965             >
1799+ 6965             >//              ______________________________________________________________________
1799+ 6965             >//              Heap part
1799+ 6965             >
1799+ 6965             >
1799+ 6965             >                org     (Heap_Ptr & $1FFF) + $E000
1799+ E349             >
1799+ E349             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1799+ E349             >Latest_Definition defl  Heap_Ptr
1799+ E349             >
1799+ E349             >                // dummy db directives used to calculate length of namec
1799+ E349 32 44 55 50 >                db      "2DUP"
1799+ E34D             >len_NFA         defl    $ - temp_NFA
1799+ E34D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1799+ E349             >
1799+ E349 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1799+ E34A 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1799+ E34E             >                org     $-1                 // alter last byte of Name just above to set
1799+ E34D D0          >                db      {b $} | END_BIT     // msb as name end
1799+ E34E             >
1799+ E34E 3F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1799+ E350             >Prev_Ptr        defl    Heap_Ptr
1799+ E350             >
1799+ E350             >mirror_Ptr      defl    $
1799+ E350             >
1799+ E350 67 69       >                dw      Dict_Ptr + 2        // xt
1799+ E352             >Heap_Ptr        defl    $ - $E000           // save current HP
1799+ E352             >
1799+ E352             >Current_HP      defl  $ - $E000             // used to set HP once!
1799+ E352             >
1799+ E352             >//              ______________________________________________________________________
1799+ E352             >//              Dictionary part
1799+ E352             >
1799+ E352             >                org     Dict_Ptr
1799+ 6965             >
1799+ 6965 50 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1799+ 6967             >
1799+ 6967             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1799+ 6967 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1799+ 6967 ~           >
1799+ 6967 ~           >
1799+ 6967             >                endif           ; ok        // for other definitions it "points" the correct handler
1799+ 6967             >                // Use of "; ok" to suppress "warning[fwdref]"
1799+ 6967             >
1799+ 6967             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1800+ 6967 E1                           pop     hl                  // < d-H
1801+ 6968 F1                           pop     af                  // < d-L
1802+ 6969 F5                           push    af                  // < d-L
1803+ 696A E5                           push    hl                  // > d-H
1804+ 696B F5                           push    af                  // > d-L
1805+ 696C E5                           push    hl                  // > d-H
1806+ 696D                              next
1806+ 696D DD E9       >                jp      (ix)
1807+ 696F
1808+ 696F              //  ______________________________________________________________________
1809+ 696F              //
1810+ 696F              // 2rot         d1 d2 d3 -- d2 d3 d1
1811+ 696F              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1812+ 696F              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1813+ 696F              // and putting it on top. The other two are shifted down one place.
1814+ 696F              //              New_Def TWO?ROT, 4, "2rot"
1815+ 696F              //              ...
1816+ 696F              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1817+ 696F              //
1818+ 696F              //      d3  |d2  |d1  |
1819+ 696F              //      h l |h l |h l |
1820+ 696F              // SP   LHED|LHED|LHED|
1821+ 696F              // SP  +0123|4567|89ab|
1822+ 696F              //              ld      hl, $000B
1823+ 696F              //              add     hl, sp
1824+ 696F              //              ld      d, (hl)
1825+ 696F              //              dec     hl
1826+ 696F              //              ld      e, (hl)
1827+ 696F              //              dec     hl
1828+ 696F              //              push    de
1829+ 696F              //              ld      d, (hl)
1830+ 696F              //              dec     hl
1831+ 696F              //              ld      e, (hl)
1832+ 696F              //              dec     hl
1833+ 696F              //              push    de
1834+ 696F
1835+ 696F              //      d1  |d3  |d2  |d1  |
1836+ 696F              //      h l |h l |h l |h l |
1837+ 696F              // SP   LHED|LHED|LHED|LHED|
1838+ 696F              // SP       +0123|4567|89ab|
1839+ 696F
1840+ 696F              //              ld      d, h
1841+ 696F              //              ld      e, l
1842+ 696F              //              inc     de
1843+ 696F              //              inc     de
1844+ 696F              //              inc     de
1845+ 696F              //              inc     de
1846+ 696F              //              push    bc
1847+ 696F              //              ld      bc, $000C
1848+ 696F              //              lddr
1849+ 696F              //              pop     bc
1850+ 696F              //              pop     de
1851+ 696F              //              pop     de
1852+ 696F              //
1853+ 696F              //              next
1854+ 696F
1855+ 696F
1856+ 696F              //  ______________________________________________________________________
1857+ 696F              //
1858+ 696F              // +!           n a --
1859+ 696F              // Sums to the content of address a the number n.
1860+ 696F              // It is the same of  a @ n + a !
1861+ 696F                              New_Def PLUSSTORE, "+!", is_code, is_normal
1861+ 696F             >
1861+ 696F             >Dict_Ptr        defl    $
1861+ 696F             >
1861+ 696F             >//              ______________________________________________________________________
1861+ 696F             >//              Heap part
1861+ 696F             >
1861+ 696F             >
1861+ 696F             >                org     (Heap_Ptr & $1FFF) + $E000
1861+ E352             >
1861+ E352             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1861+ E352             >Latest_Definition defl  Heap_Ptr
1861+ E352             >
1861+ E352             >                // dummy db directives used to calculate length of namec
1861+ E352 2B 21       >                db      "+!"
1861+ E354             >len_NFA         defl    $ - temp_NFA
1861+ E354             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1861+ E352             >
1861+ E352 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1861+ E353 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1861+ E355             >                org     $-1                 // alter last byte of Name just above to set
1861+ E354 A1          >                db      {b $} | END_BIT     // msb as name end
1861+ E355             >
1861+ E355 49 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1861+ E357             >Prev_Ptr        defl    Heap_Ptr
1861+ E357             >
1861+ E357             >mirror_Ptr      defl    $
1861+ E357             >
1861+ E357 71 69       >                dw      Dict_Ptr + 2        // xt
1861+ E359             >Heap_Ptr        defl    $ - $E000           // save current HP
1861+ E359             >
1861+ E359             >Current_HP      defl  $ - $E000             // used to set HP once!
1861+ E359             >
1861+ E359             >//              ______________________________________________________________________
1861+ E359             >//              Dictionary part
1861+ E359             >
1861+ E359             >                org     Dict_Ptr
1861+ 696F             >
1861+ 696F 57 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1861+ 6971             >
1861+ 6971             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1861+ 6971 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1861+ 6971 ~           >
1861+ 6971 ~           >
1861+ 6971             >                endif           ; ok        // for other definitions it "points" the correct handler
1861+ 6971             >                // Use of "; ok" to suppress "warning[fwdref]"
1861+ 6971             >
1861+ 6971             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1862+ 6971 D9                           exx
1863+ 6972 E1                           pop     hl                  // hl is the address
1864+ 6973 D1                           pop     de                  // de is the number
1865+ 6974 7E                           ld      a, (hl)
1866+ 6975 83                           add     e
1867+ 6976 77                           ld      (hl), a
1868+ 6977 23                           inc     hl
1869+ 6978 7E                           ld      a, (hl)
1870+ 6979 8A                           adc     d
1871+ 697A 77                           ld      (hl), a
1872+ 697B D9                           exx
1873+ 697C                              next
1873+ 697C DD E9       >                jp      (ix)
1874+ 697E
1875+ 697E              //  ______________________________________________________________________
1876+ 697E              //
1877+ 697E              // toggle       a n --
1878+ 697E              // Complements (xor) the byte at addrress  a  with the model n.
1879+ 697E                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1879+ 697E             >
1879+ 697E             >Dict_Ptr        defl    $
1879+ 697E             >
1879+ 697E             >//              ______________________________________________________________________
1879+ 697E             >//              Heap part
1879+ 697E             >
1879+ 697E             >
1879+ 697E             >                org     (Heap_Ptr & $1FFF) + $E000
1879+ E359             >
1879+ E359             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1879+ E359             >Latest_Definition defl  Heap_Ptr
1879+ E359             >
1879+ E359             >                // dummy db directives used to calculate length of namec
1879+ E359 54 4F 47 47 >                db      "TOGGLE"
1879+ E35D 4C 45       >
1879+ E35F             >len_NFA         defl    $ - temp_NFA
1879+ E35F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1879+ E359             >
1879+ E359 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1879+ E35A 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1879+ E35E 4C 45       >
1879+ E360             >                org     $-1                 // alter last byte of Name just above to set
1879+ E35F C5          >                db      {b $} | END_BIT     // msb as name end
1879+ E360             >
1879+ E360 52 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1879+ E362             >Prev_Ptr        defl    Heap_Ptr
1879+ E362             >
1879+ E362             >mirror_Ptr      defl    $
1879+ E362             >
1879+ E362 80 69       >                dw      Dict_Ptr + 2        // xt
1879+ E364             >Heap_Ptr        defl    $ - $E000           // save current HP
1879+ E364             >
1879+ E364             >Current_HP      defl  $ - $E000             // used to set HP once!
1879+ E364             >
1879+ E364             >//              ______________________________________________________________________
1879+ E364             >//              Dictionary part
1879+ E364             >
1879+ E364             >                org     Dict_Ptr
1879+ 697E             >
1879+ 697E 62 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1879+ 6980             >
1879+ 6980             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1879+ 6980 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1879+ 6980 ~           >
1879+ 6980 ~           >
1879+ 6980             >                endif           ; ok        // for other definitions it "points" the correct handler
1879+ 6980             >                // Use of "; ok" to suppress "warning[fwdref]"
1879+ 6980             >
1879+ 6980             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1880+ 6980 E1                           pop     hl
1881+ 6981 7D                           ld      a, l
1882+ 6982 E1                           pop     hl
1883+ 6983 AE                           xor     (hl)
1884+ 6984 77                           ld      (hl), a
1885+ 6985
1886+ 6985                              next
1886+ 6985 DD E9       >                jp      (ix)
1887+ 6987
1888+ 6987              //  ______________________________________________________________________
1889+ 6987              //
1890+ 6987              // @            a -- n
1891+ 6987              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1892+ 6987                              New_Def FETCH, "@", is_code, is_normal
1892+ 6987             >
1892+ 6987             >Dict_Ptr        defl    $
1892+ 6987             >
1892+ 6987             >//              ______________________________________________________________________
1892+ 6987             >//              Heap part
1892+ 6987             >
1892+ 6987             >
1892+ 6987             >                org     (Heap_Ptr & $1FFF) + $E000
1892+ E364             >
1892+ E364             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1892+ E364             >Latest_Definition defl  Heap_Ptr
1892+ E364             >
1892+ E364             >                // dummy db directives used to calculate length of namec
1892+ E364 40          >                db      "@"
1892+ E365             >len_NFA         defl    $ - temp_NFA
1892+ E365             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1892+ E364             >
1892+ E364 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1892+ E365 40          >                db      "@"               // name string in 7-bit ascii, but
1892+ E366             >                org     $-1                 // alter last byte of Name just above to set
1892+ E365 C0          >                db      {b $} | END_BIT     // msb as name end
1892+ E366             >
1892+ E366 59 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1892+ E368             >Prev_Ptr        defl    Heap_Ptr
1892+ E368             >
1892+ E368             >mirror_Ptr      defl    $
1892+ E368             >
1892+ E368 89 69       >                dw      Dict_Ptr + 2        // xt
1892+ E36A             >Heap_Ptr        defl    $ - $E000           // save current HP
1892+ E36A             >
1892+ E36A             >Current_HP      defl  $ - $E000             // used to set HP once!
1892+ E36A             >
1892+ E36A             >//              ______________________________________________________________________
1892+ E36A             >//              Dictionary part
1892+ E36A             >
1892+ E36A             >                org     Dict_Ptr
1892+ 6987             >
1892+ 6987 68 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1892+ 6989             >
1892+ 6989             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1892+ 6989 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1892+ 6989 ~           >
1892+ 6989 ~           >
1892+ 6989             >                endif           ; ok        // for other definitions it "points" the correct handler
1892+ 6989             >                // Use of "; ok" to suppress "warning[fwdref]"
1892+ 6989             >
1892+ 6989             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1893+ 6989 E1                           pop     hl
1894+ 698A 7E                           ld      a, (hl)             // low-byte
1895+ 698B 23                           inc     hl
1896+ 698C 66                           ld      h, (hl)             // high-byte
1897+ 698D 6F                           ld      l, a
1898+ 698E E5                           push    hl
1899+ 698F                              next
1899+ 698F DD E9       >                jp      (ix)
1900+ 6991
1901+ 6991              //  ______________________________________________________________________
1902+ 6991              //
1903+ 6991              // !            n a --
1904+ 6991              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1905+ 6991                              New_Def STORE, "!", is_code, is_normal
1905+ 6991             >
1905+ 6991             >Dict_Ptr        defl    $
1905+ 6991             >
1905+ 6991             >//              ______________________________________________________________________
1905+ 6991             >//              Heap part
1905+ 6991             >
1905+ 6991             >
1905+ 6991             >                org     (Heap_Ptr & $1FFF) + $E000
1905+ E36A             >
1905+ E36A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1905+ E36A             >Latest_Definition defl  Heap_Ptr
1905+ E36A             >
1905+ E36A             >                // dummy db directives used to calculate length of namec
1905+ E36A 21          >                db      "!"
1905+ E36B             >len_NFA         defl    $ - temp_NFA
1905+ E36B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1905+ E36A             >
1905+ E36A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1905+ E36B 21          >                db      "!"               // name string in 7-bit ascii, but
1905+ E36C             >                org     $-1                 // alter last byte of Name just above to set
1905+ E36B A1          >                db      {b $} | END_BIT     // msb as name end
1905+ E36C             >
1905+ E36C 64 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1905+ E36E             >Prev_Ptr        defl    Heap_Ptr
1905+ E36E             >
1905+ E36E             >mirror_Ptr      defl    $
1905+ E36E             >
1905+ E36E 93 69       >                dw      Dict_Ptr + 2        // xt
1905+ E370             >Heap_Ptr        defl    $ - $E000           // save current HP
1905+ E370             >
1905+ E370             >Current_HP      defl  $ - $E000             // used to set HP once!
1905+ E370             >
1905+ E370             >//              ______________________________________________________________________
1905+ E370             >//              Dictionary part
1905+ E370             >
1905+ E370             >                org     Dict_Ptr
1905+ 6991             >
1905+ 6991 6E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1905+ 6993             >
1905+ 6993             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1905+ 6993 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1905+ 6993 ~           >
1905+ 6993 ~           >
1905+ 6993             >                endif           ; ok        // for other definitions it "points" the correct handler
1905+ 6993             >                // Use of "; ok" to suppress "warning[fwdref]"
1905+ 6993             >
1905+ 6993             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1906+ 6993 D9                           exx
1907+ 6994 E1                           pop     hl                  // address
1908+ 6995 D1                           pop     de                  // < n
1909+ 6996 73                           ld      (hl), e             // low-byte
1910+ 6997 23                           inc     hl
1911+ 6998 72                           ld      (hl), d             // high-byte
1912+ 6999 D9                           exx
1913+ 699A                              next
1913+ 699A DD E9       >                jp      (ix)
1914+ 699C
1915+ 699C              //  ______________________________________________________________________
1916+ 699C              //
1917+ 699C              // c@           a -- c
1918+ 699C              // fetch a character n from address a
1919+ 699C                              New_Def CFETCH, "C@", is_code, is_normal
1919+ 699C             >
1919+ 699C             >Dict_Ptr        defl    $
1919+ 699C             >
1919+ 699C             >//              ______________________________________________________________________
1919+ 699C             >//              Heap part
1919+ 699C             >
1919+ 699C             >
1919+ 699C             >                org     (Heap_Ptr & $1FFF) + $E000
1919+ E370             >
1919+ E370             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1919+ E370             >Latest_Definition defl  Heap_Ptr
1919+ E370             >
1919+ E370             >                // dummy db directives used to calculate length of namec
1919+ E370 43 40       >                db      "C@"
1919+ E372             >len_NFA         defl    $ - temp_NFA
1919+ E372             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1919+ E370             >
1919+ E370 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1919+ E371 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1919+ E373             >                org     $-1                 // alter last byte of Name just above to set
1919+ E372 C0          >                db      {b $} | END_BIT     // msb as name end
1919+ E373             >
1919+ E373 6A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1919+ E375             >Prev_Ptr        defl    Heap_Ptr
1919+ E375             >
1919+ E375             >mirror_Ptr      defl    $
1919+ E375             >
1919+ E375 9E 69       >                dw      Dict_Ptr + 2        // xt
1919+ E377             >Heap_Ptr        defl    $ - $E000           // save current HP
1919+ E377             >
1919+ E377             >Current_HP      defl  $ - $E000             // used to set HP once!
1919+ E377             >
1919+ E377             >//              ______________________________________________________________________
1919+ E377             >//              Dictionary part
1919+ E377             >
1919+ E377             >                org     Dict_Ptr
1919+ 699C             >
1919+ 699C 75 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1919+ 699E             >
1919+ 699E             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1919+ 699E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1919+ 699E ~           >
1919+ 699E ~           >
1919+ 699E             >                endif           ; ok        // for other definitions it "points" the correct handler
1919+ 699E             >                // Use of "; ok" to suppress "warning[fwdref]"
1919+ 699E             >
1919+ 699E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1920+ 699E E1                           pop     hl
1921+ 699F 6E                           ld      l, (hl)             // low-byte
1922+ 69A0 26 00                        ld      h, 0
1923+ 69A2
1924+ 69A2                              psh1
1924+ 69A2 E5          >                push    hl
1924+ 69A3 DD E9       >                jp      (ix)
1925+ 69A5
1926+ 69A5              //  ______________________________________________________________________
1927+ 69A5              //
1928+ 69A5              // c!           c a --
1929+ 69A5              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1930+ 69A5                              New_Def CSTORE, "C!", is_code, is_normal
1930+ 69A5             >
1930+ 69A5             >Dict_Ptr        defl    $
1930+ 69A5             >
1930+ 69A5             >//              ______________________________________________________________________
1930+ 69A5             >//              Heap part
1930+ 69A5             >
1930+ 69A5             >
1930+ 69A5             >                org     (Heap_Ptr & $1FFF) + $E000
1930+ E377             >
1930+ E377             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1930+ E377             >Latest_Definition defl  Heap_Ptr
1930+ E377             >
1930+ E377             >                // dummy db directives used to calculate length of namec
1930+ E377 43 21       >                db      "C!"
1930+ E379             >len_NFA         defl    $ - temp_NFA
1930+ E379             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1930+ E377             >
1930+ E377 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1930+ E378 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1930+ E37A             >                org     $-1                 // alter last byte of Name just above to set
1930+ E379 A1          >                db      {b $} | END_BIT     // msb as name end
1930+ E37A             >
1930+ E37A 70 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1930+ E37C             >Prev_Ptr        defl    Heap_Ptr
1930+ E37C             >
1930+ E37C             >mirror_Ptr      defl    $
1930+ E37C             >
1930+ E37C A7 69       >                dw      Dict_Ptr + 2        // xt
1930+ E37E             >Heap_Ptr        defl    $ - $E000           // save current HP
1930+ E37E             >
1930+ E37E             >Current_HP      defl  $ - $E000             // used to set HP once!
1930+ E37E             >
1930+ E37E             >//              ______________________________________________________________________
1930+ E37E             >//              Dictionary part
1930+ E37E             >
1930+ E37E             >                org     Dict_Ptr
1930+ 69A5             >
1930+ 69A5 7C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1930+ 69A7             >
1930+ 69A7             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1930+ 69A7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1930+ 69A7 ~           >
1930+ 69A7 ~           >
1930+ 69A7             >                endif           ; ok        // for other definitions it "points" the correct handler
1930+ 69A7             >                // Use of "; ok" to suppress "warning[fwdref]"
1930+ 69A7             >
1930+ 69A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1931+ 69A7 D9                           exx
1932+ 69A8 E1                           pop     hl                  // < address
1933+ 69A9 D1                           pop     de
1934+ 69AA 73                           ld      (hl), e             // low-byte
1935+ 69AB D9                           exx
1936+ 69AC                              next
1936+ 69AC DD E9       >                jp      (ix)
1937+ 69AE
1938+ 69AE              //  ______________________________________________________________________
1939+ 69AE              //
1940+ 69AE              // 2@           a -- d
1941+ 69AE              // fetch a 32 bits number d from address a and leaves it on top of the
1942+ 69AE              // stack as two single numbers, high part as top of the stack.
1943+ 69AE              // A double number is normally kept in CPU registers as HLDE.
1944+ 69AE              // On stack a double number is treated as two single numbers
1945+ 69AE              // where BC is on the top of the stack and HL is the second from top,
1946+ 69AE              // so the sign of the number can be checked on top of stack
1947+ 69AE              // and in the stack memory it appears as LHED.
1948+ 69AE                              New_Def TWO_FETCH, "2@", is_code, is_normal
1948+ 69AE             >
1948+ 69AE             >Dict_Ptr        defl    $
1948+ 69AE             >
1948+ 69AE             >//              ______________________________________________________________________
1948+ 69AE             >//              Heap part
1948+ 69AE             >
1948+ 69AE             >
1948+ 69AE             >                org     (Heap_Ptr & $1FFF) + $E000
1948+ E37E             >
1948+ E37E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1948+ E37E             >Latest_Definition defl  Heap_Ptr
1948+ E37E             >
1948+ E37E             >                // dummy db directives used to calculate length of namec
1948+ E37E 32 40       >                db      "2@"
1948+ E380             >len_NFA         defl    $ - temp_NFA
1948+ E380             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1948+ E37E             >
1948+ E37E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1948+ E37F 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1948+ E381             >                org     $-1                 // alter last byte of Name just above to set
1948+ E380 C0          >                db      {b $} | END_BIT     // msb as name end
1948+ E381             >
1948+ E381 77 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1948+ E383             >Prev_Ptr        defl    Heap_Ptr
1948+ E383             >
1948+ E383             >mirror_Ptr      defl    $
1948+ E383             >
1948+ E383 B0 69       >                dw      Dict_Ptr + 2        // xt
1948+ E385             >Heap_Ptr        defl    $ - $E000           // save current HP
1948+ E385             >
1948+ E385             >Current_HP      defl  $ - $E000             // used to set HP once!
1948+ E385             >
1948+ E385             >//              ______________________________________________________________________
1948+ E385             >//              Dictionary part
1948+ E385             >
1948+ E385             >                org     Dict_Ptr
1948+ 69AE             >
1948+ 69AE 83 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1948+ 69B0             >
1948+ 69B0             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1948+ 69B0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1948+ 69B0 ~           >
1948+ 69B0 ~           >
1948+ 69B0             >                endif           ; ok        // for other definitions it "points" the correct handler
1948+ 69B0             >                // Use of "; ok" to suppress "warning[fwdref]"
1948+ 69B0             >
1948+ 69B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1949+ 69B0 D9                           exx
1950+ 69B1 E1                           pop     hl                  // address
1951+ 69B2 5E                           ld      e, (hl)             // low-byte
1952+ 69B3 23                           inc     hl
1953+ 69B4 56                           ld      d, (hl)             // high-byte
1954+ 69B5 23                           inc     hl
1955+ 69B6 7E                           ld      a, (hl)             // low-byte
1956+ 69B7 23                           inc     hl
1957+ 69B8 66                           ld      h, (hl)             // high-byte
1958+ 69B9 6F                           ld      l, a
1959+ 69BA E5                           push    hl
1960+ 69BB D5                           push    de
1961+ 69BC D9                           exx
1962+ 69BD                              next
1962+ 69BD DD E9       >                jp      (ix)
1963+ 69BF
1964+ 69BF              //  ______________________________________________________________________
1965+ 69BF              //
1966+ 69BF              // 2!           d a --
1967+ 69BF              // stores a 32 bits number d from address a and leaves it on top of the
1968+ 69BF              // stack as two single numbers, high part as top of the stack.
1969+ 69BF              // A double number is normally kept in CPU registers as HLDE.
1970+ 69BF              // On stack a double number is treated as two single numbers
1971+ 69BF              // where BC is on the top of the stack and HL is the second from top,
1972+ 69BF              // so the sign of the number can be checked on top of stack
1973+ 69BF              // and in the stack memory it appears as LHED.
1974+ 69BF                              New_Def TWO_STORE, "2!", is_code, is_normal
1974+ 69BF             >
1974+ 69BF             >Dict_Ptr        defl    $
1974+ 69BF             >
1974+ 69BF             >//              ______________________________________________________________________
1974+ 69BF             >//              Heap part
1974+ 69BF             >
1974+ 69BF             >
1974+ 69BF             >                org     (Heap_Ptr & $1FFF) + $E000
1974+ E385             >
1974+ E385             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1974+ E385             >Latest_Definition defl  Heap_Ptr
1974+ E385             >
1974+ E385             >                // dummy db directives used to calculate length of namec
1974+ E385 32 21       >                db      "2!"
1974+ E387             >len_NFA         defl    $ - temp_NFA
1974+ E387             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1974+ E385             >
1974+ E385 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1974+ E386 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1974+ E388             >                org     $-1                 // alter last byte of Name just above to set
1974+ E387 A1          >                db      {b $} | END_BIT     // msb as name end
1974+ E388             >
1974+ E388 7E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1974+ E38A             >Prev_Ptr        defl    Heap_Ptr
1974+ E38A             >
1974+ E38A             >mirror_Ptr      defl    $
1974+ E38A             >
1974+ E38A C1 69       >                dw      Dict_Ptr + 2        // xt
1974+ E38C             >Heap_Ptr        defl    $ - $E000           // save current HP
1974+ E38C             >
1974+ E38C             >Current_HP      defl  $ - $E000             // used to set HP once!
1974+ E38C             >
1974+ E38C             >//              ______________________________________________________________________
1974+ E38C             >//              Dictionary part
1974+ E38C             >
1974+ E38C             >                org     Dict_Ptr
1974+ 69BF             >
1974+ 69BF 8A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1974+ 69C1             >
1974+ 69C1             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1974+ 69C1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1974+ 69C1 ~           >
1974+ 69C1 ~           >
1974+ 69C1             >                endif           ; ok        // for other definitions it "points" the correct handler
1974+ 69C1             >                // Use of "; ok" to suppress "warning[fwdref]"
1974+ 69C1             >
1974+ 69C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1975+ 69C1 D9                           exx
1976+ 69C2 E1                           pop     hl                  // address
1977+ 69C3 C1                           pop     bc                  // < high-part
1978+ 69C4 D1                           pop     de                  // < low-part > Instruction Pointer
1979+ 69C5 71                           ld      (hl), c
1980+ 69C6 23                           inc     hl
1981+ 69C7 70                           ld      (hl), b
1982+ 69C8 23                           inc     hl
1983+ 69C9 73                           ld      (hl), e
1984+ 69CA 23                           inc     hl
1985+ 69CB 72                           ld      (hl), d
1986+ 69CC D9                           exx
1987+ 69CD                              next
1987+ 69CD DD E9       >                jp      (ix)
1988+ 69CF
1989+ 69CF              //  ______________________________________________________________________
1990+ 69CF              //
1991+ 69CF              // p@           a -- c
1992+ 69CF              // Read one byte from port a and leave the result on top of stack
1993+ 69CF                              New_Def PFETCH, "P@", is_code, is_normal
1993+ 69CF             >
1993+ 69CF             >Dict_Ptr        defl    $
1993+ 69CF             >
1993+ 69CF             >//              ______________________________________________________________________
1993+ 69CF             >//              Heap part
1993+ 69CF             >
1993+ 69CF             >
1993+ 69CF             >                org     (Heap_Ptr & $1FFF) + $E000
1993+ E38C             >
1993+ E38C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1993+ E38C             >Latest_Definition defl  Heap_Ptr
1993+ E38C             >
1993+ E38C             >                // dummy db directives used to calculate length of namec
1993+ E38C 50 40       >                db      "P@"
1993+ E38E             >len_NFA         defl    $ - temp_NFA
1993+ E38E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1993+ E38C             >
1993+ E38C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1993+ E38D 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1993+ E38F             >                org     $-1                 // alter last byte of Name just above to set
1993+ E38E C0          >                db      {b $} | END_BIT     // msb as name end
1993+ E38F             >
1993+ E38F 85 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1993+ E391             >Prev_Ptr        defl    Heap_Ptr
1993+ E391             >
1993+ E391             >mirror_Ptr      defl    $
1993+ E391             >
1993+ E391 D1 69       >                dw      Dict_Ptr + 2        // xt
1993+ E393             >Heap_Ptr        defl    $ - $E000           // save current HP
1993+ E393             >
1993+ E393             >Current_HP      defl  $ - $E000             // used to set HP once!
1993+ E393             >
1993+ E393             >//              ______________________________________________________________________
1993+ E393             >//              Dictionary part
1993+ E393             >
1993+ E393             >                org     Dict_Ptr
1993+ 69CF             >
1993+ 69CF 91 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1993+ 69D1             >
1993+ 69D1             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1993+ 69D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1993+ 69D1 ~           >
1993+ 69D1 ~           >
1993+ 69D1             >                endif           ; ok        // for other definitions it "points" the correct handler
1993+ 69D1             >                // Use of "; ok" to suppress "warning[fwdref]"
1993+ 69D1             >
1993+ 69D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1994+ 69D1 D9                           exx
1995+ 69D2 C1                           pop     bc
1996+ 69D3 26 00                        ld      h, 0
1997+ 69D5 ED 68                        in      l, (c)
1998+ 69D7 E5                           push    hl
1999+ 69D8 D9                           exx
2000+ 69D9                              next
2000+ 69D9 DD E9       >                jp      (ix)
2001+ 69DB
2002+ 69DB              //  ______________________________________________________________________
2003+ 69DB              //
2004+ 69DB              // p!           c a --
2005+ 69DB              // Send one byte (top of stack) to port a
2006+ 69DB                              New_Def PSTORE, "P!", is_code, is_normal
2006+ 69DB             >
2006+ 69DB             >Dict_Ptr        defl    $
2006+ 69DB             >
2006+ 69DB             >//              ______________________________________________________________________
2006+ 69DB             >//              Heap part
2006+ 69DB             >
2006+ 69DB             >
2006+ 69DB             >                org     (Heap_Ptr & $1FFF) + $E000
2006+ E393             >
2006+ E393             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2006+ E393             >Latest_Definition defl  Heap_Ptr
2006+ E393             >
2006+ E393             >                // dummy db directives used to calculate length of namec
2006+ E393 50 21       >                db      "P!"
2006+ E395             >len_NFA         defl    $ - temp_NFA
2006+ E395             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2006+ E393             >
2006+ E393 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2006+ E394 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2006+ E396             >                org     $-1                 // alter last byte of Name just above to set
2006+ E395 A1          >                db      {b $} | END_BIT     // msb as name end
2006+ E396             >
2006+ E396 8C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2006+ E398             >Prev_Ptr        defl    Heap_Ptr
2006+ E398             >
2006+ E398             >mirror_Ptr      defl    $
2006+ E398             >
2006+ E398 DD 69       >                dw      Dict_Ptr + 2        // xt
2006+ E39A             >Heap_Ptr        defl    $ - $E000           // save current HP
2006+ E39A             >
2006+ E39A             >Current_HP      defl  $ - $E000             // used to set HP once!
2006+ E39A             >
2006+ E39A             >//              ______________________________________________________________________
2006+ E39A             >//              Dictionary part
2006+ E39A             >
2006+ E39A             >                org     Dict_Ptr
2006+ 69DB             >
2006+ 69DB 98 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2006+ 69DD             >
2006+ 69DD             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2006+ 69DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
2006+ 69DD ~           >
2006+ 69DD ~           >
2006+ 69DD             >                endif           ; ok        // for other definitions it "points" the correct handler
2006+ 69DD             >                // Use of "; ok" to suppress "warning[fwdref]"
2006+ 69DD             >
2006+ 69DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2007+ 69DD D9                           exx
2008+ 69DE C1                           pop     bc
2009+ 69DF E1                           pop     hl                  // < c
2010+ 69E0 ED 69                        out     (c), l              // low-byte
2011+ 69E2 D9                           exx
2012+ 69E3                              next
2012+ 69E3 DD E9       >                jp      (ix)
2013+ 69E5
2014+ 69E5
2015+ 69E5              //  ______________________________________________________________________
2016+ 69E5              //
2017+ 69E5              // 2*           n1 -- n2
2018+ 69E5              // doubles the number at top of stack
2019+ 69E5                              New_Def TWO_MUL, "2*", is_code, is_normal
2019+ 69E5             >
2019+ 69E5             >Dict_Ptr        defl    $
2019+ 69E5             >
2019+ 69E5             >//              ______________________________________________________________________
2019+ 69E5             >//              Heap part
2019+ 69E5             >
2019+ 69E5             >
2019+ 69E5             >                org     (Heap_Ptr & $1FFF) + $E000
2019+ E39A             >
2019+ E39A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2019+ E39A             >Latest_Definition defl  Heap_Ptr
2019+ E39A             >
2019+ E39A             >                // dummy db directives used to calculate length of namec
2019+ E39A 32 2A       >                db      "2*"
2019+ E39C             >len_NFA         defl    $ - temp_NFA
2019+ E39C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2019+ E39A             >
2019+ E39A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2019+ E39B 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2019+ E39D             >                org     $-1                 // alter last byte of Name just above to set
2019+ E39C AA          >                db      {b $} | END_BIT     // msb as name end
2019+ E39D             >
2019+ E39D 93 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2019+ E39F             >Prev_Ptr        defl    Heap_Ptr
2019+ E39F             >
2019+ E39F             >mirror_Ptr      defl    $
2019+ E39F             >
2019+ E39F E7 69       >                dw      Dict_Ptr + 2        // xt
2019+ E3A1             >Heap_Ptr        defl    $ - $E000           // save current HP
2019+ E3A1             >
2019+ E3A1             >Current_HP      defl  $ - $E000             // used to set HP once!
2019+ E3A1             >
2019+ E3A1             >//              ______________________________________________________________________
2019+ E3A1             >//              Dictionary part
2019+ E3A1             >
2019+ E3A1             >                org     Dict_Ptr
2019+ 69E5             >
2019+ 69E5 9F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2019+ 69E7             >
2019+ 69E7             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2019+ 69E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2019+ 69E7 ~           >
2019+ 69E7 ~           >
2019+ 69E7             >                endif           ; ok        // for other definitions it "points" the correct handler
2019+ 69E7             >                // Use of "; ok" to suppress "warning[fwdref]"
2019+ 69E7             >
2019+ 69E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2020+ 69E7              Two_Mul_Ptr:
2021+ 69E7 E1                           pop     hl
2022+ 69E8 29                           add     hl, hl
2023+ 69E9
2024+ 69E9                              psh1
2024+ 69E9 E5          >                push    hl
2024+ 69EA DD E9       >                jp      (ix)
2025+ 69EC
2026+ 69EC              //  ______________________________________________________________________
2027+ 69EC              //
2028+ 69EC              // 2/           n1 -- n2
2029+ 69EC              // halves the top of stack, sign is unchanged
2030+ 69EC                              New_Def TWO_DIV, "2/", is_code, is_normal
2030+ 69EC             >
2030+ 69EC             >Dict_Ptr        defl    $
2030+ 69EC             >
2030+ 69EC             >//              ______________________________________________________________________
2030+ 69EC             >//              Heap part
2030+ 69EC             >
2030+ 69EC             >
2030+ 69EC             >                org     (Heap_Ptr & $1FFF) + $E000
2030+ E3A1             >
2030+ E3A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2030+ E3A1             >Latest_Definition defl  Heap_Ptr
2030+ E3A1             >
2030+ E3A1             >                // dummy db directives used to calculate length of namec
2030+ E3A1 32 2F       >                db      "2/"
2030+ E3A3             >len_NFA         defl    $ - temp_NFA
2030+ E3A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2030+ E3A1             >
2030+ E3A1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2030+ E3A2 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2030+ E3A4             >                org     $-1                 // alter last byte of Name just above to set
2030+ E3A3 AF          >                db      {b $} | END_BIT     // msb as name end
2030+ E3A4             >
2030+ E3A4 9A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2030+ E3A6             >Prev_Ptr        defl    Heap_Ptr
2030+ E3A6             >
2030+ E3A6             >mirror_Ptr      defl    $
2030+ E3A6             >
2030+ E3A6 EE 69       >                dw      Dict_Ptr + 2        // xt
2030+ E3A8             >Heap_Ptr        defl    $ - $E000           // save current HP
2030+ E3A8             >
2030+ E3A8             >Current_HP      defl  $ - $E000             // used to set HP once!
2030+ E3A8             >
2030+ E3A8             >//              ______________________________________________________________________
2030+ E3A8             >//              Dictionary part
2030+ E3A8             >
2030+ E3A8             >                org     Dict_Ptr
2030+ 69EC             >
2030+ 69EC A6 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2030+ 69EE             >
2030+ 69EE             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2030+ 69EE ~           >                call    runcode ; ok        // for primitive definitions  actual code
2030+ 69EE ~           >
2030+ 69EE ~           >
2030+ 69EE             >                endif           ; ok        // for other definitions it "points" the correct handler
2030+ 69EE             >                // Use of "; ok" to suppress "warning[fwdref]"
2030+ 69EE             >
2030+ 69EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2031+ 69EE E1                           pop     hl
2032+ 69EF CB 2C                        sra     h
2033+ 69F1 CB 1D                        rr      l
2034+ 69F3
2035+ 69F3                              psh1
2035+ 69F3 E5          >                push    hl
2035+ 69F4 DD E9       >                jp      (ix)
2036+ 69F6
2037+ 69F6              //  ______________________________________________________________________
2038+ 69F6              //
2039+ 69F6              // lshift       n1 u -- n2
2040+ 69F6              // bit left shift of u bits
2041+ 69F6                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2041+ 69F6             >
2041+ 69F6             >Dict_Ptr        defl    $
2041+ 69F6             >
2041+ 69F6             >//              ______________________________________________________________________
2041+ 69F6             >//              Heap part
2041+ 69F6             >
2041+ 69F6             >
2041+ 69F6             >                org     (Heap_Ptr & $1FFF) + $E000
2041+ E3A8             >
2041+ E3A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2041+ E3A8             >Latest_Definition defl  Heap_Ptr
2041+ E3A8             >
2041+ E3A8             >                // dummy db directives used to calculate length of namec
2041+ E3A8 4C 53 48 49 >                db      "LSHIFT"
2041+ E3AC 46 54       >
2041+ E3AE             >len_NFA         defl    $ - temp_NFA
2041+ E3AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2041+ E3A8             >
2041+ E3A8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2041+ E3A9 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2041+ E3AD 46 54       >
2041+ E3AF             >                org     $-1                 // alter last byte of Name just above to set
2041+ E3AE D4          >                db      {b $} | END_BIT     // msb as name end
2041+ E3AF             >
2041+ E3AF A1 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2041+ E3B1             >Prev_Ptr        defl    Heap_Ptr
2041+ E3B1             >
2041+ E3B1             >mirror_Ptr      defl    $
2041+ E3B1             >
2041+ E3B1 F8 69       >                dw      Dict_Ptr + 2        // xt
2041+ E3B3             >Heap_Ptr        defl    $ - $E000           // save current HP
2041+ E3B3             >
2041+ E3B3             >Current_HP      defl  $ - $E000             // used to set HP once!
2041+ E3B3             >
2041+ E3B3             >//              ______________________________________________________________________
2041+ E3B3             >//              Dictionary part
2041+ E3B3             >
2041+ E3B3             >                org     Dict_Ptr
2041+ 69F6             >
2041+ 69F6 B1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2041+ 69F8             >
2041+ 69F8             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2041+ 69F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2041+ 69F8 ~           >
2041+ 69F8 ~           >
2041+ 69F8             >                endif           ; ok        // for other definitions it "points" the correct handler
2041+ 69F8             >                // Use of "; ok" to suppress "warning[fwdref]"
2041+ 69F8             >
2041+ 69F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2042+ 69F8 D9                           exx
2043+ 69F9 C1                           pop     bc
2044+ 69FA 41                           ld      b, c
2045+ 69FB D1                           pop     de
2046+ 69FC ED 28                        bsla    de, b
2047+ 69FE D5                           push    de
2048+ 69FF D9                           exx
2049+ 6A00                              next
2049+ 6A00 DD E9       >                jp      (ix)
2050+ 6A02
2051+ 6A02              //  ______________________________________________________________________
2052+ 6A02              //
2053+ 6A02              // rshift       n1 u -- n2
2054+ 6A02              // bit right shift of u bits
2055+ 6A02                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2055+ 6A02             >
2055+ 6A02             >Dict_Ptr        defl    $
2055+ 6A02             >
2055+ 6A02             >//              ______________________________________________________________________
2055+ 6A02             >//              Heap part
2055+ 6A02             >
2055+ 6A02             >
2055+ 6A02             >                org     (Heap_Ptr & $1FFF) + $E000
2055+ E3B3             >
2055+ E3B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2055+ E3B3             >Latest_Definition defl  Heap_Ptr
2055+ E3B3             >
2055+ E3B3             >                // dummy db directives used to calculate length of namec
2055+ E3B3 52 53 48 49 >                db      "RSHIFT"
2055+ E3B7 46 54       >
2055+ E3B9             >len_NFA         defl    $ - temp_NFA
2055+ E3B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2055+ E3B3             >
2055+ E3B3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2055+ E3B4 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2055+ E3B8 46 54       >
2055+ E3BA             >                org     $-1                 // alter last byte of Name just above to set
2055+ E3B9 D4          >                db      {b $} | END_BIT     // msb as name end
2055+ E3BA             >
2055+ E3BA A8 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2055+ E3BC             >Prev_Ptr        defl    Heap_Ptr
2055+ E3BC             >
2055+ E3BC             >mirror_Ptr      defl    $
2055+ E3BC             >
2055+ E3BC 04 6A       >                dw      Dict_Ptr + 2        // xt
2055+ E3BE             >Heap_Ptr        defl    $ - $E000           // save current HP
2055+ E3BE             >
2055+ E3BE             >Current_HP      defl  $ - $E000             // used to set HP once!
2055+ E3BE             >
2055+ E3BE             >//              ______________________________________________________________________
2055+ E3BE             >//              Dictionary part
2055+ E3BE             >
2055+ E3BE             >                org     Dict_Ptr
2055+ 6A02             >
2055+ 6A02 BC 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2055+ 6A04             >
2055+ 6A04             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2055+ 6A04 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2055+ 6A04 ~           >
2055+ 6A04 ~           >
2055+ 6A04             >                endif           ; ok        // for other definitions it "points" the correct handler
2055+ 6A04             >                // Use of "; ok" to suppress "warning[fwdref]"
2055+ 6A04             >
2055+ 6A04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2056+ 6A04 D9                           exx
2057+ 6A05 C1                           pop     bc
2058+ 6A06 41                           ld      b, c
2059+ 6A07 D1                           pop     de
2060+ 6A08 ED 2A                        bsrl    de, b
2061+ 6A0A D5                           push    de
2062+ 6A0B D9                           exx
2063+ 6A0C                              next
2063+ 6A0C DD E9       >                jp      (ix)
2064+ 6A0E
2065+ 6A0E              //  ______________________________________________________________________
2066+ 6A0E              //
2067+ 6A0E              // cells        n1 -- n2
2068+ 6A0E              // decrement by 2 top of stack
2069+ 6A0E                              New_Def CELLS, "CELLS", is_code, is_normal
2069+ 6A0E             >
2069+ 6A0E             >Dict_Ptr        defl    $
2069+ 6A0E             >
2069+ 6A0E             >//              ______________________________________________________________________
2069+ 6A0E             >//              Heap part
2069+ 6A0E             >
2069+ 6A0E             >
2069+ 6A0E             >                org     (Heap_Ptr & $1FFF) + $E000
2069+ E3BE             >
2069+ E3BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2069+ E3BE             >Latest_Definition defl  Heap_Ptr
2069+ E3BE             >
2069+ E3BE             >                // dummy db directives used to calculate length of namec
2069+ E3BE 43 45 4C 4C >                db      "CELLS"
2069+ E3C2 53          >
2069+ E3C3             >len_NFA         defl    $ - temp_NFA
2069+ E3C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2069+ E3BE             >
2069+ E3BE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2069+ E3BF 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2069+ E3C3 53          >
2069+ E3C4             >                org     $-1                 // alter last byte of Name just above to set
2069+ E3C3 D3          >                db      {b $} | END_BIT     // msb as name end
2069+ E3C4             >
2069+ E3C4 B3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2069+ E3C6             >Prev_Ptr        defl    Heap_Ptr
2069+ E3C6             >
2069+ E3C6             >mirror_Ptr      defl    $
2069+ E3C6             >
2069+ E3C6 10 6A       >                dw      Dict_Ptr + 2        // xt
2069+ E3C8             >Heap_Ptr        defl    $ - $E000           // save current HP
2069+ E3C8             >
2069+ E3C8             >Current_HP      defl  $ - $E000             // used to set HP once!
2069+ E3C8             >
2069+ E3C8             >//              ______________________________________________________________________
2069+ E3C8             >//              Dictionary part
2069+ E3C8             >
2069+ E3C8             >                org     Dict_Ptr
2069+ 6A0E             >
2069+ 6A0E C6 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2069+ 6A10             >
2069+ 6A10             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2069+ 6A10 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2069+ 6A10 ~           >
2069+ 6A10 ~           >
2069+ 6A10             >                endif           ; ok        // for other definitions it "points" the correct handler
2069+ 6A10             >                // Use of "; ok" to suppress "warning[fwdref]"
2069+ 6A10             >
2069+ 6A10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2070+ 6A10 C3 E7 69                     jp      Two_Mul_Ptr
2071+ 6A13
2072+ 6A13
2073+ 6A13              //  ______________________________________________________________________
2074+ 6A13
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
 121  6A13                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
   1+ 6A13              //  ______________________________________________________________________
   2+ 6A13              //
   3+ 6A13              //  L1.asm
   4+ 6A13              //
   5+ 6A13              //  Level-1 definitions and derivate
   6+ 6A13              //  ______________________________________________________________________
   7+ 6A13
   8+ 6A13              //  ______________________________________________________________________
   9+ 6A13              //
  10+ 6A13              // :            -- cccc     ( compile time )
  11+ 6A13              //              i*x -- j*x  ( run time )
  12+ 6A13              // Colon Definition
  13+ 6A13                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6A13             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6A13             >
  13+ 6A13             >Dict_Ptr        defl    $
  13+ 6A13             >
  13+ 6A13             >//              ______________________________________________________________________
  13+ 6A13             >//              Heap part
  13+ 6A13             >
  13+ 6A13             >
  13+ 6A13             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3C8             >
  13+ E3C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3C8             >Latest_Definition defl  Heap_Ptr
  13+ E3C8             >
  13+ E3C8             >                // dummy db directives used to calculate length of namec
  13+ E3C8 3A          >                db      ":"
  13+ E3C9             >len_NFA         defl    $ - temp_NFA
  13+ E3C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3C8             >
  13+ E3C8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3C9 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3CA             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3C9 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3CA             >
  13+ E3CA BE 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CC             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CC             >
  13+ E3CC             >mirror_Ptr      defl    $
  13+ E3CC             >
  13+ E3CC 15 6A       >                dw      Dict_Ptr + 2        // xt
  13+ E3CE             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3CE             >
  13+ E3CE             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3CE             >
  13+ E3CE             >//              ______________________________________________________________________
  13+ E3CE             >//              Dictionary part
  13+ E3CE             >
  13+ E3CE             >                org     Dict_Ptr
  13+ 6A13             >
  13+ 6A13 CC 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 6A15             >
  13+ 6A15             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6A15 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6A18             >
  13+ 6A18             >
  13+ 6A18             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6A18             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6A18             >
  13+ 6A18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6A18
  15+ 6A18 0A 6E                        dw      QEXEC                   // ?exec
  16+ 6A1A D5 6D                        dw      STORE_CSP               // !csp
  17+ 6A1C 46 6B 89 69                  dw      CURRENT, FETCH          // current @
  18+ 6A20 40 6B 93 69                  dw      CONTEXT, STORE          // context !
  19+ 6A24 B0 73                        dw      CREATE                  // create  ( forward )
  20+ 6A26 8E 6E                        dw      SMUDGE                  // dmudge
  21+ 6A28 7F 6E                        dw      SQUARED_CLOSE           // ]
  22+ 6A2A CA 6E                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6A2C                                                              // ... immediate
  24+ 6A2C              Enter_Ptr:
  25+ 6A2C                              // via call coded in CFA
  26+ 6A2C EB                           ex      de, hl //**
  27+ 6A2D                              // *** ldhlrp
  28+ 6A2D 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 6A2E 70                           ld      (hl), b
  30+ 6A2F 2B                           dec     hl
  31+ 6A30 71                           ld      (hl), c
  32+ 6A31                              // *** ldrphl
  33+ 6A31 EB                           ex      de, hl //**
  34+ 6A32
  35+ 6A32
  36+ 6A32 C1                           pop     bc                  // points to PFA of "this" word
  37+ 6A33                              next
  37+ 6A33 DD E9       >                jp      (ix)
  38+ 6A35
  39+ 6A35              //  ______________________________________________________________________
  40+ 6A35              //
  41+ 6A35              // ;            --
  42+ 6A35              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 6A35                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 6A35             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 6A35             >
  43+ 6A35             >Dict_Ptr        defl    $
  43+ 6A35             >
  43+ 6A35             >//              ______________________________________________________________________
  43+ 6A35             >//              Heap part
  43+ 6A35             >
  43+ 6A35             >
  43+ 6A35             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3CE             >
  43+ E3CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3CE             >Latest_Definition defl  Heap_Ptr
  43+ E3CE             >
  43+ E3CE             >                // dummy db directives used to calculate length of namec
  43+ E3CE 3B          >                db      ";"
  43+ E3CF             >len_NFA         defl    $ - temp_NFA
  43+ E3CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3CE             >
  43+ E3CE C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3CF 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3D0             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3CF BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3D0             >
  43+ E3D0 C8 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D2             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D2             >
  43+ E3D2             >mirror_Ptr      defl    $
  43+ E3D2             >
  43+ E3D2 37 6A       >                dw      Dict_Ptr + 2        // xt
  43+ E3D4             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D4             >
  43+ E3D4             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D4             >
  43+ E3D4             >//              ______________________________________________________________________
  43+ E3D4             >//              Dictionary part
  43+ E3D4             >
  43+ E3D4             >                org     Dict_Ptr
  43+ 6A35             >
  43+ 6A35 D2 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 6A37             >
  43+ 6A37             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 6A37 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 6A3A             >
  43+ 6A3A             >
  43+ 6A3A             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 6A3A             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 6A3A             >
  43+ 6A3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 6A3A
  45+ 6A3A 2A 6E                        dw      QCSP                    // ?csp
  46+ 6A3C 52 6E 52 68                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 6A40 8E 6E                        dw      SMUDGE                  // smudge
  48+ 6A42 72 6E                        dw      SQUARED_OPEN            // [
  49+ 6A44 52 68                        dw      EXIT                    // ; immediate
  50+ 6A46
  51+ 6A46              //  ______________________________________________________________________
  52+ 6A46              //
  53+ 6A46              // noop         --
  54+ 6A46
  55+ 6A46                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 6A46             >
  55+ 6A46             >Dict_Ptr        defl    $
  55+ 6A46             >
  55+ 6A46             >//              ______________________________________________________________________
  55+ 6A46             >//              Heap part
  55+ 6A46             >
  55+ 6A46             >
  55+ 6A46             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D4             >
  55+ E3D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D4             >Latest_Definition defl  Heap_Ptr
  55+ E3D4             >
  55+ E3D4             >                // dummy db directives used to calculate length of namec
  55+ E3D4 4E 4F 4F 50 >                db      "NOOP"
  55+ E3D8             >len_NFA         defl    $ - temp_NFA
  55+ E3D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D4             >
  55+ E3D4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D5 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3D9             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3D8 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3D9             >
  55+ E3D9 CE 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DB             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DB             >
  55+ E3DB             >mirror_Ptr      defl    $
  55+ E3DB             >
  55+ E3DB 48 6A       >                dw      Dict_Ptr + 2        // xt
  55+ E3DD             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DD             >
  55+ E3DD             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DD             >
  55+ E3DD             >//              ______________________________________________________________________
  55+ E3DD             >//              Dictionary part
  55+ E3DD             >
  55+ E3DD             >                org     Dict_Ptr
  55+ 6A46             >
  55+ 6A46 DB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 6A48             >
  55+ 6A48             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 6A48 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 6A48 ~           >
  55+ 6A48 ~           >
  55+ 6A48             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 6A48             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 6A48             >
  55+ 6A48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 6A48                              next
  56+ 6A48 DD E9       >                jp      (ix)
  57+ 6A4A
  58+ 6A4A              //  ______________________________________________________________________
  59+ 6A4A              //
  60+ 6A4A              // constant     n -- cccc     ( compile time )
  61+ 6A4A              //              -- n          ( run time )
  62+ 6A4A              // Constant definition.
  63+ 6A4A                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 6A4A             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 6A4A             >
  63+ 6A4A             >Dict_Ptr        defl    $
  63+ 6A4A             >
  63+ 6A4A             >//              ______________________________________________________________________
  63+ 6A4A             >//              Heap part
  63+ 6A4A             >
  63+ 6A4A             >
  63+ 6A4A             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DD             >
  63+ E3DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DD             >Latest_Definition defl  Heap_Ptr
  63+ E3DD             >
  63+ E3DD             >                // dummy db directives used to calculate length of namec
  63+ E3DD 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E1 54 41 4E 54 >
  63+ E3E5             >len_NFA         defl    $ - temp_NFA
  63+ E3E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DD             >
  63+ E3DD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3DE 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E2 54 41 4E 54 >
  63+ E3E6             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E5 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E6             >
  63+ E3E6 D4 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3E8             >Prev_Ptr        defl    Heap_Ptr
  63+ E3E8             >
  63+ E3E8             >mirror_Ptr      defl    $
  63+ E3E8             >
  63+ E3E8 4C 6A       >                dw      Dict_Ptr + 2        // xt
  63+ E3EA             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3EA             >
  63+ E3EA             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3EA             >
  63+ E3EA             >//              ______________________________________________________________________
  63+ E3EA             >//              Dictionary part
  63+ E3EA             >
  63+ E3EA             >                org     Dict_Ptr
  63+ 6A4A             >
  63+ 6A4A E8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 6A4C             >
  63+ 6A4C             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 6A4C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 6A4F             >
  63+ 6A4F             >
  63+ 6A4F             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 6A4F             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 6A4F             >
  63+ 6A4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 6A4F B0 73                        dw      CREATE                  // create
  65+ 6A51 BC 6B                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 6A53 CA 6E                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 6A55              Constant_Ptr:
  68+ 6A55
  69+ 6A55
  70+ 6A55 E1                           pop     hl
  71+ 6A56
  72+ 6A56 7E                           ld      a, (hl)
  73+ 6A57 23                           inc     hl
  74+ 6A58 66                           ld      h, (hl)
  75+ 6A59 6F                           ld      l, a
  76+ 6A5A E5                           push    hl
  77+ 6A5B                              next
  77+ 6A5B DD E9       >                jp      (ix)
  78+ 6A5D
  79+ 6A5D              //  ______________________________________________________________________
  80+ 6A5D              //
  81+ 6A5D              // variable     n -- cccc     ( compile time )
  82+ 6A5D              //              -- a          ( run time )
  83+ 6A5D              // Variable definition, n is the initial value.
  84+ 6A5D                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 6A5D             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 6A5D             >
  84+ 6A5D             >Dict_Ptr        defl    $
  84+ 6A5D             >
  84+ 6A5D             >//              ______________________________________________________________________
  84+ 6A5D             >//              Heap part
  84+ 6A5D             >
  84+ 6A5D             >
  84+ 6A5D             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3EA             >
  84+ E3EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3EA             >Latest_Definition defl  Heap_Ptr
  84+ E3EA             >
  84+ E3EA             >                // dummy db directives used to calculate length of namec
  84+ E3EA 56 41 52 49 >                db      "VARIABLE"
  84+ E3EE 41 42 4C 45 >
  84+ E3F2             >len_NFA         defl    $ - temp_NFA
  84+ E3F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3EA             >
  84+ E3EA 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3EB 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3EF 41 42 4C 45 >
  84+ E3F3             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F2 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F3             >
  84+ E3F3 DD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F5             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F5             >
  84+ E3F5             >mirror_Ptr      defl    $
  84+ E3F5             >
  84+ E3F5 5F 6A       >                dw      Dict_Ptr + 2        // xt
  84+ E3F7             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F7             >
  84+ E3F7             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F7             >
  84+ E3F7             >//              ______________________________________________________________________
  84+ E3F7             >//              Dictionary part
  84+ E3F7             >
  84+ E3F7             >                org     Dict_Ptr
  84+ 6A5D             >
  84+ 6A5D F5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 6A5F             >
  84+ 6A5F             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 6A5F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 6A62             >
  84+ 6A62             >
  84+ 6A62             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 6A62             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 6A62             >
  84+ 6A62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 6A62
  86+ 6A62 81 6A                        dw      ZERO
  87+ 6A64 4C 6A                        dw      CONSTANT                // constant
  88+ 6A66 CA 6E                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 6A68              Variable_Ptr:
  90+ 6A68
  91+ 6A68
  92+ 6A68
  93+ 6A68
  94+ 6A68                              next
  94+ 6A68 DD E9       >                jp      (ix)
  95+ 6A6A
  96+ 6A6A              //  ______________________________________________________________________
  97+ 6A6A              //
  98+ 6A6A              // user         b -- cccc     ( compile time )
  99+ 6A6A              //              -- a          ( run time )
 100+ 6A6A              // User variable definition
 101+ 6A6A                              Colon_Def USER, "USER", is_normal
 101+ 6A6A             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 6A6A             >
 101+ 6A6A             >Dict_Ptr        defl    $
 101+ 6A6A             >
 101+ 6A6A             >//              ______________________________________________________________________
 101+ 6A6A             >//              Heap part
 101+ 6A6A             >
 101+ 6A6A             >
 101+ 6A6A             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F7             >
 101+ E3F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F7             >Latest_Definition defl  Heap_Ptr
 101+ E3F7             >
 101+ E3F7             >                // dummy db directives used to calculate length of namec
 101+ E3F7 55 53 45 52 >                db      "USER"
 101+ E3FB             >len_NFA         defl    $ - temp_NFA
 101+ E3FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F7             >
 101+ E3F7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3F8 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FC             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FB D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FC             >
 101+ E3FC EA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E3FE             >Prev_Ptr        defl    Heap_Ptr
 101+ E3FE             >
 101+ E3FE             >mirror_Ptr      defl    $
 101+ E3FE             >
 101+ E3FE 6C 6A       >                dw      Dict_Ptr + 2        // xt
 101+ E400             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E400             >
 101+ E400             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E400             >
 101+ E400             >//              ______________________________________________________________________
 101+ E400             >//              Dictionary part
 101+ E400             >
 101+ E400             >                org     Dict_Ptr
 101+ 6A6A             >
 101+ 6A6A FE 03       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 6A6C             >
 101+ 6A6C             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 6A6C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 6A6F             >
 101+ 6A6F             >
 101+ 6A6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 6A6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 6A6F             >
 101+ 6A6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 6A6F
 103+ 6A6F B0 73                        dw      CREATE                  // create
 104+ 6A71 CB 6B                        dw      CCOMMA                  // c,
 105+ 6A73 CA 6E                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 6A75
 107+ 6A75
 108+ 6A75              User_Ptr:
 109+ 6A75                              // via call coded in CFA
 110+ 6A75 E1                           pop     hl
 111+ 6A76
 112+ 6A76 7E                           ld      a, (hl)
 113+ 6A77 2A 94 63                     ld      hl, (USER_Pointer)
 114+ 6A7A ED 31                        add     hl, a
 115+ 6A7C E5                           push    hl
 116+ 6A7D                              next
 116+ 6A7D DD E9       >                jp      (ix)
 117+ 6A7F
 118+ 6A7F              //  ______________________________________________________________________
 119+ 6A7F              //
 120+ 6A7F                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 6A7F             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 6A7F             >
 120+ 6A7F             >Dict_Ptr        defl    $
 120+ 6A7F             >
 120+ 6A7F             >//              ______________________________________________________________________
 120+ 6A7F             >//              Heap part
 120+ 6A7F             >
 120+ 6A7F             >
 120+ 6A7F             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E400             >
 120+ E400             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E400             >Latest_Definition defl  Heap_Ptr
 120+ E400             >
 120+ E400             >                // dummy db directives used to calculate length of namec
 120+ E400 30          >                db      "0"
 120+ E401             >len_NFA         defl    $ - temp_NFA
 120+ E401             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E400             >
 120+ E400 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E401 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E402             >                org     $-1                 // alter last byte of Name just above to set
 120+ E401 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E402             >
 120+ E402 F7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E404             >Prev_Ptr        defl    Heap_Ptr
 120+ E404             >
 120+ E404             >mirror_Ptr      defl    $
 120+ E404             >
 120+ E404 81 6A       >                dw      Dict_Ptr + 2        // xt
 120+ E406             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E406             >
 120+ E406             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E406             >
 120+ E406             >//              ______________________________________________________________________
 120+ E406             >//              Dictionary part
 120+ E406             >
 120+ E406             >                org     Dict_Ptr
 120+ 6A7F             >
 120+ 6A7F 04 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 6A81             >
 120+ 6A81             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6A81 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6A84             >
 120+ 6A84             >
 120+ 6A84             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6A84             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6A84             >
 120+ 6A84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6A84 00 00       >                dw      0
 121+ 6A86                              Constant_Def ONE        ,   "1"     ,   1
 121+ 6A86             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 6A86             >
 121+ 6A86             >Dict_Ptr        defl    $
 121+ 6A86             >
 121+ 6A86             >//              ______________________________________________________________________
 121+ 6A86             >//              Heap part
 121+ 6A86             >
 121+ 6A86             >
 121+ 6A86             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E406             >
 121+ E406             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E406             >Latest_Definition defl  Heap_Ptr
 121+ E406             >
 121+ E406             >                // dummy db directives used to calculate length of namec
 121+ E406 31          >                db      "1"
 121+ E407             >len_NFA         defl    $ - temp_NFA
 121+ E407             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E406             >
 121+ E406 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E407 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E408             >                org     $-1                 // alter last byte of Name just above to set
 121+ E407 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E408             >
 121+ E408 00 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E40A             >Prev_Ptr        defl    Heap_Ptr
 121+ E40A             >
 121+ E40A             >mirror_Ptr      defl    $
 121+ E40A             >
 121+ E40A 88 6A       >                dw      Dict_Ptr + 2        // xt
 121+ E40C             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40C             >
 121+ E40C             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40C             >
 121+ E40C             >//              ______________________________________________________________________
 121+ E40C             >//              Dictionary part
 121+ E40C             >
 121+ E40C             >                org     Dict_Ptr
 121+ 6A86             >
 121+ 6A86 0A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 6A88             >
 121+ 6A88             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6A88 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6A8B             >
 121+ 6A8B             >
 121+ 6A8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6A8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6A8B             >
 121+ 6A8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6A8B 01 00       >                dw      1
 122+ 6A8D                              Constant_Def TWO        ,   "2"     ,   2
 122+ 6A8D             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 6A8D             >
 122+ 6A8D             >Dict_Ptr        defl    $
 122+ 6A8D             >
 122+ 6A8D             >//              ______________________________________________________________________
 122+ 6A8D             >//              Heap part
 122+ 6A8D             >
 122+ 6A8D             >
 122+ 6A8D             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40C             >
 122+ E40C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40C             >Latest_Definition defl  Heap_Ptr
 122+ E40C             >
 122+ E40C             >                // dummy db directives used to calculate length of namec
 122+ E40C 32          >                db      "2"
 122+ E40D             >len_NFA         defl    $ - temp_NFA
 122+ E40D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40C             >
 122+ E40C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40D 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E40E             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40D B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E40E             >
 122+ E40E 06 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E410             >Prev_Ptr        defl    Heap_Ptr
 122+ E410             >
 122+ E410             >mirror_Ptr      defl    $
 122+ E410             >
 122+ E410 8F 6A       >                dw      Dict_Ptr + 2        // xt
 122+ E412             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E412             >
 122+ E412             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E412             >
 122+ E412             >//              ______________________________________________________________________
 122+ E412             >//              Dictionary part
 122+ E412             >
 122+ E412             >                org     Dict_Ptr
 122+ 6A8D             >
 122+ 6A8D 10 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 6A8F             >
 122+ 6A8F             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6A8F CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6A92             >
 122+ 6A92             >
 122+ 6A92             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6A92             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6A92             >
 122+ 6A92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6A92 02 00       >                dw      2
 123+ 6A94                              Constant_Def THREE      ,   "3"     ,   3
 123+ 6A94             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 6A94             >
 123+ 6A94             >Dict_Ptr        defl    $
 123+ 6A94             >
 123+ 6A94             >//              ______________________________________________________________________
 123+ 6A94             >//              Heap part
 123+ 6A94             >
 123+ 6A94             >
 123+ 6A94             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E412             >
 123+ E412             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E412             >Latest_Definition defl  Heap_Ptr
 123+ E412             >
 123+ E412             >                // dummy db directives used to calculate length of namec
 123+ E412 33          >                db      "3"
 123+ E413             >len_NFA         defl    $ - temp_NFA
 123+ E413             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E412             >
 123+ E412 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E413 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E414             >                org     $-1                 // alter last byte of Name just above to set
 123+ E413 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E414             >
 123+ E414 0C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E416             >Prev_Ptr        defl    Heap_Ptr
 123+ E416             >
 123+ E416             >mirror_Ptr      defl    $
 123+ E416             >
 123+ E416 96 6A       >                dw      Dict_Ptr + 2        // xt
 123+ E418             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E418             >
 123+ E418             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E418             >
 123+ E418             >//              ______________________________________________________________________
 123+ E418             >//              Dictionary part
 123+ E418             >
 123+ E418             >                org     Dict_Ptr
 123+ 6A94             >
 123+ 6A94 16 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 6A96             >
 123+ 6A96             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6A96 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6A99             >
 123+ 6A99             >
 123+ 6A99             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6A99             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6A99             >
 123+ 6A99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6A99 03 00       >                dw      3
 124+ 6A9B                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 6A9B             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 6A9B             >
 124+ 6A9B             >Dict_Ptr        defl    $
 124+ 6A9B             >
 124+ 6A9B             >//              ______________________________________________________________________
 124+ 6A9B             >//              Heap part
 124+ 6A9B             >
 124+ 6A9B             >
 124+ 6A9B             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E418             >
 124+ E418             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E418             >Latest_Definition defl  Heap_Ptr
 124+ E418             >
 124+ E418             >                // dummy db directives used to calculate length of namec
 124+ E418 2D 31       >                db      "-1"
 124+ E41A             >len_NFA         defl    $ - temp_NFA
 124+ E41A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E418             >
 124+ E418 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E419 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41B             >                org     $-1                 // alter last byte of Name just above to set
 124+ E41A B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41B             >
 124+ E41B 12 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41D             >Prev_Ptr        defl    Heap_Ptr
 124+ E41D             >
 124+ E41D             >mirror_Ptr      defl    $
 124+ E41D             >
 124+ E41D 9D 6A       >                dw      Dict_Ptr + 2        // xt
 124+ E41F             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E41F             >
 124+ E41F             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E41F             >
 124+ E41F             >//              ______________________________________________________________________
 124+ E41F             >//              Dictionary part
 124+ E41F             >
 124+ E41F             >                org     Dict_Ptr
 124+ 6A9B             >
 124+ 6A9B 1D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 6A9D             >
 124+ 6A9D             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6A9D CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6AA0             >
 124+ 6AA0             >
 124+ 6AA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6AA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6AA0             >
 124+ 6AA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6AA0 FF FF       >                dw      -1
 125+ 6AA2                              Constant_Def BL         ,   "BL"    , $20
 125+ 6AA2             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 6AA2             >
 125+ 6AA2             >Dict_Ptr        defl    $
 125+ 6AA2             >
 125+ 6AA2             >//              ______________________________________________________________________
 125+ 6AA2             >//              Heap part
 125+ 6AA2             >
 125+ 6AA2             >
 125+ 6AA2             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E41F             >
 125+ E41F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E41F             >Latest_Definition defl  Heap_Ptr
 125+ E41F             >
 125+ E41F             >                // dummy db directives used to calculate length of namec
 125+ E41F 42 4C       >                db      "BL"
 125+ E421             >len_NFA         defl    $ - temp_NFA
 125+ E421             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E41F             >
 125+ E41F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E420 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E422             >                org     $-1                 // alter last byte of Name just above to set
 125+ E421 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E422             >
 125+ E422 18 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E424             >Prev_Ptr        defl    Heap_Ptr
 125+ E424             >
 125+ E424             >mirror_Ptr      defl    $
 125+ E424             >
 125+ E424 A4 6A       >                dw      Dict_Ptr + 2        // xt
 125+ E426             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E426             >
 125+ E426             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E426             >
 125+ E426             >//              ______________________________________________________________________
 125+ E426             >//              Dictionary part
 125+ E426             >
 125+ E426             >                org     Dict_Ptr
 125+ 6AA2             >
 125+ 6AA2 24 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 6AA4             >
 125+ 6AA4             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6AA4 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6AA7             >
 125+ 6AA7             >
 125+ 6AA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6AA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6AA7             >
 125+ 6AA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6AA7 20 00       >                dw      $20
 126+ 6AA9                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 6AA9             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 6AA9             >
 126+ 6AA9             >Dict_Ptr        defl    $
 126+ 6AA9             >
 126+ 6AA9             >//              ______________________________________________________________________
 126+ 6AA9             >//              Heap part
 126+ 6AA9             >
 126+ 6AA9             >
 126+ 6AA9             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E426             >
 126+ E426             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E426             >Latest_Definition defl  Heap_Ptr
 126+ E426             >
 126+ E426             >                // dummy db directives used to calculate length of namec
 126+ E426 43 2F 4C    >                db      "C/L"
 126+ E429             >len_NFA         defl    $ - temp_NFA
 126+ E429             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E426             >
 126+ E426 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E427 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E42A             >                org     $-1                 // alter last byte of Name just above to set
 126+ E429 CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E42A             >
 126+ E42A 1F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42C             >Prev_Ptr        defl    Heap_Ptr
 126+ E42C             >
 126+ E42C             >mirror_Ptr      defl    $
 126+ E42C             >
 126+ E42C AB 6A       >                dw      Dict_Ptr + 2        // xt
 126+ E42E             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E42E             >
 126+ E42E             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E42E             >
 126+ E42E             >//              ______________________________________________________________________
 126+ E42E             >//              Dictionary part
 126+ E42E             >
 126+ E42E             >                org     Dict_Ptr
 126+ 6AA9             >
 126+ 6AA9 2C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 6AAB             >
 126+ 6AAB             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6AAB CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6AAE             >
 126+ 6AAE             >
 126+ 6AAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6AAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6AAE             >
 126+ 6AAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6AAE 40 00       >                dw      64
 127+ 6AB0                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 6AB0             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 6AB0             >
 127+ 6AB0             >Dict_Ptr        defl    $
 127+ 6AB0             >
 127+ 6AB0             >//              ______________________________________________________________________
 127+ 6AB0             >//              Heap part
 127+ 6AB0             >
 127+ 6AB0             >
 127+ 6AB0             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E42E             >
 127+ E42E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E42E             >Latest_Definition defl  Heap_Ptr
 127+ E42E             >
 127+ E42E             >                // dummy db directives used to calculate length of namec
 127+ E42E 42 2F 42 55 >                db      "B/BUF"
 127+ E432 46          >
 127+ E433             >len_NFA         defl    $ - temp_NFA
 127+ E433             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E42E             >
 127+ E42E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E42F 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E433 46          >
 127+ E434             >                org     $-1                 // alter last byte of Name just above to set
 127+ E433 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E434             >
 127+ E434 26 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E436             >Prev_Ptr        defl    Heap_Ptr
 127+ E436             >
 127+ E436             >mirror_Ptr      defl    $
 127+ E436             >
 127+ E436 B2 6A       >                dw      Dict_Ptr + 2        // xt
 127+ E438             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E438             >
 127+ E438             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E438             >
 127+ E438             >//              ______________________________________________________________________
 127+ E438             >//              Dictionary part
 127+ E438             >
 127+ E438             >                org     Dict_Ptr
 127+ 6AB0             >
 127+ 6AB0 36 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 6AB2             >
 127+ 6AB2             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6AB2 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6AB5             >
 127+ 6AB5             >
 127+ 6AB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6AB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6AB5             >
 127+ 6AB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6AB5 00 02       >                dw      512
 128+ 6AB7                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 6AB7             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 6AB7             >
 128+ 6AB7             >Dict_Ptr        defl    $
 128+ 6AB7             >
 128+ 6AB7             >//              ______________________________________________________________________
 128+ 6AB7             >//              Heap part
 128+ 6AB7             >
 128+ 6AB7             >
 128+ 6AB7             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E438             >
 128+ E438             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E438             >Latest_Definition defl  Heap_Ptr
 128+ E438             >
 128+ E438             >                // dummy db directives used to calculate length of namec
 128+ E438 42 2F 53 43 >                db      "B/SCR"
 128+ E43C 52          >
 128+ E43D             >len_NFA         defl    $ - temp_NFA
 128+ E43D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E438             >
 128+ E438 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E439 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43D 52          >
 128+ E43E             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43D D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E43E             >
 128+ E43E 2E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E440             >Prev_Ptr        defl    Heap_Ptr
 128+ E440             >
 128+ E440             >mirror_Ptr      defl    $
 128+ E440             >
 128+ E440 B9 6A       >                dw      Dict_Ptr + 2        // xt
 128+ E442             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E442             >
 128+ E442             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E442             >
 128+ E442             >//              ______________________________________________________________________
 128+ E442             >//              Dictionary part
 128+ E442             >
 128+ E442             >                org     Dict_Ptr
 128+ 6AB7             >
 128+ 6AB7 40 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 6AB9             >
 128+ 6AB9             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6AB9 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6ABC             >
 128+ 6ABC             >
 128+ 6ABC             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6ABC             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6ABC             >
 128+ 6ABC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6ABC 02 00       >                dw      2
 129+ 6ABE                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 6ABE             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 6ABE             >
 129+ 6ABE             >Dict_Ptr        defl    $
 129+ 6ABE             >
 129+ 6ABE             >//              ______________________________________________________________________
 129+ 6ABE             >//              Heap part
 129+ 6ABE             >
 129+ 6ABE             >
 129+ 6ABE             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E442             >
 129+ E442             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E442             >Latest_Definition defl  Heap_Ptr
 129+ E442             >
 129+ E442             >                // dummy db directives used to calculate length of namec
 129+ E442 4C 2F 53 43 >                db      "L/SCR"
 129+ E446 52          >
 129+ E447             >len_NFA         defl    $ - temp_NFA
 129+ E447             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E442             >
 129+ E442 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E443 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E447 52          >
 129+ E448             >                org     $-1                 // alter last byte of Name just above to set
 129+ E447 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E448             >
 129+ E448 38 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E44A             >Prev_Ptr        defl    Heap_Ptr
 129+ E44A             >
 129+ E44A             >mirror_Ptr      defl    $
 129+ E44A             >
 129+ E44A C0 6A       >                dw      Dict_Ptr + 2        // xt
 129+ E44C             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44C             >
 129+ E44C             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44C             >
 129+ E44C             >//              ______________________________________________________________________
 129+ E44C             >//              Dictionary part
 129+ E44C             >
 129+ E44C             >                org     Dict_Ptr
 129+ 6ABE             >
 129+ 6ABE 4A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 6AC0             >
 129+ 6AC0             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 6AC0 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 6AC3             >
 129+ 6AC3             >
 129+ 6AC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 6AC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 6AC3             >
 129+ 6AC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 6AC3 10 00       >                dw      16
 130+ 6AC5
 131+ 6AC5              //  ______________________________________________________________________
 132+ 6AC5              //
 133+ 6AC5              // +origin         --
 134+ 6AC5              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 6AC5              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 6AC5              //              dw      PLUS                    // +
 137+ 6AC5              //              dw      EXIT                    // ;
 138+ 6AC5                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 6AC5             >
 138+ 6AC5             >Dict_Ptr        defl    $
 138+ 6AC5             >
 138+ 6AC5             >//              ______________________________________________________________________
 138+ 6AC5             >//              Heap part
 138+ 6AC5             >
 138+ 6AC5             >
 138+ 6AC5             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44C             >
 138+ E44C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44C             >Latest_Definition defl  Heap_Ptr
 138+ E44C             >
 138+ E44C             >                // dummy db directives used to calculate length of namec
 138+ E44C 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E450 47 49 4E    >
 138+ E453             >len_NFA         defl    $ - temp_NFA
 138+ E453             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44C             >
 138+ E44C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44D 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E451 47 49 4E    >
 138+ E454             >                org     $-1                 // alter last byte of Name just above to set
 138+ E453 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E454             >
 138+ E454 42 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E456             >Prev_Ptr        defl    Heap_Ptr
 138+ E456             >
 138+ E456             >mirror_Ptr      defl    $
 138+ E456             >
 138+ E456 C7 6A       >                dw      Dict_Ptr + 2        // xt
 138+ E458             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E458             >
 138+ E458             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E458             >
 138+ E458             >//              ______________________________________________________________________
 138+ E458             >//              Dictionary part
 138+ E458             >
 138+ E458             >                org     Dict_Ptr
 138+ 6AC5             >
 138+ 6AC5 56 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 6AC7             >
 138+ 6AC7             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6AC7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 6AC7 ~           >
 138+ 6AC7 ~           >
 138+ 6AC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 6AC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 6AC7             >
 138+ 6AC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6AC7 D9                           exx
 140+ 6AC8 E1                           pop     hl
 141+ 6AC9 11 66 63                     ld      de, Cold_origin
 142+ 6ACC 19                           add     hl, de
 143+ 6ACD E5                           push    hl
 144+ 6ACE D9                           exx
 145+ 6ACF                              next
 145+ 6ACF DD E9       >                jp      (ix)
 146+ 6AD1
 147+ 6AD1
 148+ 6AD1              //  ______________________________________________________________________
 149+ 6AD1              //
 150+ 6AD1                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 6AD1             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 6AD1             >
 150+ 6AD1             >Dict_Ptr        defl    $
 150+ 6AD1             >
 150+ 6AD1             >//              ______________________________________________________________________
 150+ 6AD1             >//              Heap part
 150+ 6AD1             >
 150+ 6AD1             >
 150+ 6AD1             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E458             >
 150+ E458             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E458             >Latest_Definition defl  Heap_Ptr
 150+ E458             >
 150+ E458             >                // dummy db directives used to calculate length of namec
 150+ E458 28 4E 45 58 >                db      "(NEXT)"
 150+ E45C 54 29       >
 150+ E45E             >len_NFA         defl    $ - temp_NFA
 150+ E45E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E458             >
 150+ E458 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E459 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45D 54 29       >
 150+ E45F             >                org     $-1                 // alter last byte of Name just above to set
 150+ E45E A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E45F             >
 150+ E45F 4C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E461             >Prev_Ptr        defl    Heap_Ptr
 150+ E461             >
 150+ E461             >mirror_Ptr      defl    $
 150+ E461             >
 150+ E461 D3 6A       >                dw      Dict_Ptr + 2        // xt
 150+ E463             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E463             >
 150+ E463             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E463             >
 150+ E463             >//              ______________________________________________________________________
 150+ E463             >//              Dictionary part
 150+ E463             >
 150+ E463             >                org     Dict_Ptr
 150+ 6AD1             >
 150+ 6AD1 61 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 6AD3             >
 150+ 6AD3             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6AD3 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 6AD6             >
 150+ 6AD6             >
 150+ 6AD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6AD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6AD6             >
 150+ 6AD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6AD6 9A 63       >                dw      Next_Ptr
 151+ 6AD8
 152+ 6AD8              //  ______________________________________________________________________
 153+ 6AD8              //
 154+ 6AD8
 155+ 6AD8                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 6AD8             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 6AD8             >
 155+ 6AD8             >Dict_Ptr        defl    $
 155+ 6AD8             >
 155+ 6AD8             >//              ______________________________________________________________________
 155+ 6AD8             >//              Heap part
 155+ 6AD8             >
 155+ 6AD8             >
 155+ 6AD8             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E463             >
 155+ E463             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E463             >Latest_Definition defl  Heap_Ptr
 155+ E463             >
 155+ E463             >                // dummy db directives used to calculate length of namec
 155+ E463 53 30       >                db      "S0"
 155+ E465             >len_NFA         defl    $ - temp_NFA
 155+ E465             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E463             >
 155+ E463 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E464 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E466             >                org     $-1                 // alter last byte of Name just above to set
 155+ E465 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E466             >
 155+ E466 58 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E468             >Prev_Ptr        defl    Heap_Ptr
 155+ E468             >
 155+ E468             >mirror_Ptr      defl    $
 155+ E468             >
 155+ E468 DA 6A       >                dw      Dict_Ptr + 2        // xt
 155+ E46A             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E46A             >
 155+ E46A             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E46A             >
 155+ E46A             >//              ______________________________________________________________________
 155+ E46A             >//              Dictionary part
 155+ E46A             >
 155+ E46A             >                org     Dict_Ptr
 155+ 6AD8             >
 155+ 6AD8 68 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 6ADA             >
 155+ 6ADA             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6ADA CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6ADD             >
 155+ 6ADD             >
 155+ 6ADD             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6ADD             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6ADD             >
 155+ 6ADD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6ADD 06          >                db      06
 156+ 6ADE                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 6ADE             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 6ADE             >
 156+ 6ADE             >Dict_Ptr        defl    $
 156+ 6ADE             >
 156+ 6ADE             >//              ______________________________________________________________________
 156+ 6ADE             >//              Heap part
 156+ 6ADE             >
 156+ 6ADE             >
 156+ 6ADE             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E46A             >
 156+ E46A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E46A             >Latest_Definition defl  Heap_Ptr
 156+ E46A             >
 156+ E46A             >                // dummy db directives used to calculate length of namec
 156+ E46A 52 30       >                db      "R0"
 156+ E46C             >len_NFA         defl    $ - temp_NFA
 156+ E46C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E46A             >
 156+ E46A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46B 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46D             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46C B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46D             >
 156+ E46D 63 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E46F             >Prev_Ptr        defl    Heap_Ptr
 156+ E46F             >
 156+ E46F             >mirror_Ptr      defl    $
 156+ E46F             >
 156+ E46F E0 6A       >                dw      Dict_Ptr + 2        // xt
 156+ E471             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E471             >
 156+ E471             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E471             >
 156+ E471             >//              ______________________________________________________________________
 156+ E471             >//              Dictionary part
 156+ E471             >
 156+ E471             >                org     Dict_Ptr
 156+ 6ADE             >
 156+ 6ADE 6F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 6AE0             >
 156+ 6AE0             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6AE0 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6AE3             >
 156+ 6AE3             >
 156+ 6AE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6AE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6AE3             >
 156+ 6AE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6AE3 08          >                db      08
 157+ 6AE4                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 6AE4             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 6AE4             >
 157+ 6AE4             >Dict_Ptr        defl    $
 157+ 6AE4             >
 157+ 6AE4             >//              ______________________________________________________________________
 157+ 6AE4             >//              Heap part
 157+ 6AE4             >
 157+ 6AE4             >
 157+ 6AE4             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E471             >
 157+ E471             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E471             >Latest_Definition defl  Heap_Ptr
 157+ E471             >
 157+ E471             >                // dummy db directives used to calculate length of namec
 157+ E471 54 49 42    >                db      "TIB"
 157+ E474             >len_NFA         defl    $ - temp_NFA
 157+ E474             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E471             >
 157+ E471 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E472 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E475             >                org     $-1                 // alter last byte of Name just above to set
 157+ E474 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E475             >
 157+ E475 6A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E477             >Prev_Ptr        defl    Heap_Ptr
 157+ E477             >
 157+ E477             >mirror_Ptr      defl    $
 157+ E477             >
 157+ E477 E6 6A       >                dw      Dict_Ptr + 2        // xt
 157+ E479             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E479             >
 157+ E479             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E479             >
 157+ E479             >//              ______________________________________________________________________
 157+ E479             >//              Dictionary part
 157+ E479             >
 157+ E479             >                org     Dict_Ptr
 157+ 6AE4             >
 157+ 6AE4 77 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 6AE6             >
 157+ 6AE6             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6AE6 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6AE9             >
 157+ 6AE9             >
 157+ 6AE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6AE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6AE9             >
 157+ 6AE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6AE9 0A          >                db      10
 158+ 6AEA                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 6AEA             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 6AEA             >
 158+ 6AEA             >Dict_Ptr        defl    $
 158+ 6AEA             >
 158+ 6AEA             >//              ______________________________________________________________________
 158+ 6AEA             >//              Heap part
 158+ 6AEA             >
 158+ 6AEA             >
 158+ 6AEA             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E479             >
 158+ E479             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E479             >Latest_Definition defl  Heap_Ptr
 158+ E479             >
 158+ E479             >                // dummy db directives used to calculate length of namec
 158+ E479 57 49 44 54 >                db      "WIDTH"
 158+ E47D 48          >
 158+ E47E             >len_NFA         defl    $ - temp_NFA
 158+ E47E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E479             >
 158+ E479 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E47A 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E47E 48          >
 158+ E47F             >                org     $-1                 // alter last byte of Name just above to set
 158+ E47E C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E47F             >
 158+ E47F 71 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E481             >Prev_Ptr        defl    Heap_Ptr
 158+ E481             >
 158+ E481             >mirror_Ptr      defl    $
 158+ E481             >
 158+ E481 EC 6A       >                dw      Dict_Ptr + 2        // xt
 158+ E483             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E483             >
 158+ E483             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E483             >
 158+ E483             >//              ______________________________________________________________________
 158+ E483             >//              Dictionary part
 158+ E483             >
 158+ E483             >                org     Dict_Ptr
 158+ 6AEA             >
 158+ 6AEA 81 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 6AEC             >
 158+ 6AEC             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6AEC CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6AEF             >
 158+ 6AEF             >
 158+ 6AEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6AEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6AEF             >
 158+ 6AEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6AEF 0C          >                db      12
 159+ 6AF0                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 6AF0             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 6AF0             >
 159+ 6AF0             >Dict_Ptr        defl    $
 159+ 6AF0             >
 159+ 6AF0             >//              ______________________________________________________________________
 159+ 6AF0             >//              Heap part
 159+ 6AF0             >
 159+ 6AF0             >
 159+ 6AF0             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E483             >
 159+ E483             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E483             >Latest_Definition defl  Heap_Ptr
 159+ E483             >
 159+ E483             >                // dummy db directives used to calculate length of namec
 159+ E483 57 41 52 4E >                db      "WARNING"
 159+ E487 49 4E 47    >
 159+ E48A             >len_NFA         defl    $ - temp_NFA
 159+ E48A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E483             >
 159+ E483 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E484 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E488 49 4E 47    >
 159+ E48B             >                org     $-1                 // alter last byte of Name just above to set
 159+ E48A C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48B             >
 159+ E48B 79 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48D             >Prev_Ptr        defl    Heap_Ptr
 159+ E48D             >
 159+ E48D             >mirror_Ptr      defl    $
 159+ E48D             >
 159+ E48D F2 6A       >                dw      Dict_Ptr + 2        // xt
 159+ E48F             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E48F             >
 159+ E48F             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E48F             >
 159+ E48F             >//              ______________________________________________________________________
 159+ E48F             >//              Dictionary part
 159+ E48F             >
 159+ E48F             >                org     Dict_Ptr
 159+ 6AF0             >
 159+ 6AF0 8D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 6AF2             >
 159+ 6AF2             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6AF2 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6AF5             >
 159+ 6AF5             >
 159+ 6AF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6AF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6AF5             >
 159+ 6AF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6AF5 0E          >                db      14
 160+ 6AF6                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 6AF6             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 6AF6             >
 160+ 6AF6             >Dict_Ptr        defl    $
 160+ 6AF6             >
 160+ 6AF6             >//              ______________________________________________________________________
 160+ 6AF6             >//              Heap part
 160+ 6AF6             >
 160+ 6AF6             >
 160+ 6AF6             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E48F             >
 160+ E48F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E48F             >Latest_Definition defl  Heap_Ptr
 160+ E48F             >
 160+ E48F             >                // dummy db directives used to calculate length of namec
 160+ E48F 46 45 4E 43 >                db      "FENCE"
 160+ E493 45          >
 160+ E494             >len_NFA         defl    $ - temp_NFA
 160+ E494             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E48F             >
 160+ E48F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E490 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E494 45          >
 160+ E495             >                org     $-1                 // alter last byte of Name just above to set
 160+ E494 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E495             >
 160+ E495 83 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E497             >Prev_Ptr        defl    Heap_Ptr
 160+ E497             >
 160+ E497             >mirror_Ptr      defl    $
 160+ E497             >
 160+ E497 F8 6A       >                dw      Dict_Ptr + 2        // xt
 160+ E499             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E499             >
 160+ E499             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E499             >
 160+ E499             >//              ______________________________________________________________________
 160+ E499             >//              Dictionary part
 160+ E499             >
 160+ E499             >                org     Dict_Ptr
 160+ 6AF6             >
 160+ 6AF6 97 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 6AF8             >
 160+ 6AF8             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6AF8 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6AFB             >
 160+ 6AFB             >
 160+ 6AFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6AFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6AFB             >
 160+ 6AFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6AFB 10          >                db      16
 161+ 6AFC                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 6AFC             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 6AFC             >
 161+ 6AFC             >Dict_Ptr        defl    $
 161+ 6AFC             >
 161+ 6AFC             >//              ______________________________________________________________________
 161+ 6AFC             >//              Heap part
 161+ 6AFC             >
 161+ 6AFC             >
 161+ 6AFC             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E499             >
 161+ E499             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E499             >Latest_Definition defl  Heap_Ptr
 161+ E499             >
 161+ E499             >                // dummy db directives used to calculate length of namec
 161+ E499 44 50       >                db      "DP"
 161+ E49B             >len_NFA         defl    $ - temp_NFA
 161+ E49B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E499             >
 161+ E499 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E49A 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49C             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49B D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49C             >
 161+ E49C 8F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E49E             >Prev_Ptr        defl    Heap_Ptr
 161+ E49E             >
 161+ E49E             >mirror_Ptr      defl    $
 161+ E49E             >
 161+ E49E FE 6A       >                dw      Dict_Ptr + 2        // xt
 161+ E4A0             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E4A0             >
 161+ E4A0             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E4A0             >
 161+ E4A0             >//              ______________________________________________________________________
 161+ E4A0             >//              Dictionary part
 161+ E4A0             >
 161+ E4A0             >                org     Dict_Ptr
 161+ 6AFC             >
 161+ 6AFC 9E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 6AFE             >
 161+ 6AFE             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6AFE CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6B01             >
 161+ 6B01             >
 161+ 6B01             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6B01             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6B01             >
 161+ 6B01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6B01 12          >                db      18
 162+ 6B02                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 6B02             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 6B02             >
 162+ 6B02             >Dict_Ptr        defl    $
 162+ 6B02             >
 162+ 6B02             >//              ______________________________________________________________________
 162+ 6B02             >//              Heap part
 162+ 6B02             >
 162+ 6B02             >
 162+ 6B02             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E4A0             >
 162+ E4A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E4A0             >Latest_Definition defl  Heap_Ptr
 162+ E4A0             >
 162+ E4A0             >                // dummy db directives used to calculate length of namec
 162+ E4A0 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A4 4C 49 4E 4B >
 162+ E4A8             >len_NFA         defl    $ - temp_NFA
 162+ E4A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E4A0             >
 162+ E4A0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A1 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A5 4C 49 4E 4B >
 162+ E4A9             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4A8 CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4A9             >
 162+ E4A9 99 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AB             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AB             >
 162+ E4AB             >mirror_Ptr      defl    $
 162+ E4AB             >
 162+ E4AB 04 6B       >                dw      Dict_Ptr + 2        // xt
 162+ E4AD             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AD             >
 162+ E4AD             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AD             >
 162+ E4AD             >//              ______________________________________________________________________
 162+ E4AD             >//              Dictionary part
 162+ E4AD             >
 162+ E4AD             >                org     Dict_Ptr
 162+ 6B02             >
 162+ 6B02 AB 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6B04             >
 162+ 6B04             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6B04 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6B07             >
 162+ 6B07             >
 162+ 6B07             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6B07             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6B07             >
 162+ 6B07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6B07 14          >                db      20
 163+ 6B08                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 6B08             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 6B08             >
 163+ 6B08             >Dict_Ptr        defl    $
 163+ 6B08             >
 163+ 6B08             >//              ______________________________________________________________________
 163+ 6B08             >//              Heap part
 163+ 6B08             >
 163+ 6B08             >
 163+ 6B08             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AD             >
 163+ E4AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AD             >Latest_Definition defl  Heap_Ptr
 163+ E4AD             >
 163+ E4AD             >                // dummy db directives used to calculate length of namec
 163+ E4AD 46 49 52 53 >                db      "FIRST"
 163+ E4B1 54          >
 163+ E4B2             >len_NFA         defl    $ - temp_NFA
 163+ E4B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AD             >
 163+ E4AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4AE 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B2 54          >
 163+ E4B3             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B2 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B3             >
 163+ E4B3 A0 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B5             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B5             >
 163+ E4B5             >mirror_Ptr      defl    $
 163+ E4B5             >
 163+ E4B5 0A 6B       >                dw      Dict_Ptr + 2        // xt
 163+ E4B7             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B7             >
 163+ E4B7             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B7             >
 163+ E4B7             >//              ______________________________________________________________________
 163+ E4B7             >//              Dictionary part
 163+ E4B7             >
 163+ E4B7             >                org     Dict_Ptr
 163+ 6B08             >
 163+ 6B08 B5 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 6B0A             >
 163+ 6B0A             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6B0A CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6B0D             >
 163+ 6B0D             >
 163+ 6B0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6B0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6B0D             >
 163+ 6B0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6B0D 16          >                db      22
 164+ 6B0E                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 6B0E             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 6B0E             >
 164+ 6B0E             >Dict_Ptr        defl    $
 164+ 6B0E             >
 164+ 6B0E             >//              ______________________________________________________________________
 164+ 6B0E             >//              Heap part
 164+ 6B0E             >
 164+ 6B0E             >
 164+ 6B0E             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B7             >
 164+ E4B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B7             >Latest_Definition defl  Heap_Ptr
 164+ E4B7             >
 164+ E4B7             >                // dummy db directives used to calculate length of namec
 164+ E4B7 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BB 54          >
 164+ E4BC             >len_NFA         defl    $ - temp_NFA
 164+ E4BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B7             >
 164+ E4B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4B8 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BC 54          >
 164+ E4BD             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BC D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BD             >
 164+ E4BD AD 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4BF             >Prev_Ptr        defl    Heap_Ptr
 164+ E4BF             >
 164+ E4BF             >mirror_Ptr      defl    $
 164+ E4BF             >
 164+ E4BF 10 6B       >                dw      Dict_Ptr + 2        // xt
 164+ E4C1             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C1             >
 164+ E4C1             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C1             >
 164+ E4C1             >//              ______________________________________________________________________
 164+ E4C1             >//              Dictionary part
 164+ E4C1             >
 164+ E4C1             >                org     Dict_Ptr
 164+ 6B0E             >
 164+ 6B0E BF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 6B10             >
 164+ 6B10             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6B10 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6B13             >
 164+ 6B13             >
 164+ 6B13             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6B13             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6B13             >
 164+ 6B13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6B13 18          >                db      24
 165+ 6B14                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 6B14             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 6B14             >
 165+ 6B14             >Dict_Ptr        defl    $
 165+ 6B14             >
 165+ 6B14             >//              ______________________________________________________________________
 165+ 6B14             >//              Heap part
 165+ 6B14             >
 165+ 6B14             >
 165+ 6B14             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C1             >
 165+ E4C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C1             >Latest_Definition defl  Heap_Ptr
 165+ E4C1             >
 165+ E4C1             >                // dummy db directives used to calculate length of namec
 165+ E4C1 48 50       >                db      "HP"
 165+ E4C3             >len_NFA         defl    $ - temp_NFA
 165+ E4C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C1             >
 165+ E4C1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C2 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C4             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C3 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C4             >
 165+ E4C4 B7 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C6             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C6             >
 165+ E4C6             >mirror_Ptr      defl    $
 165+ E4C6             >
 165+ E4C6 16 6B       >                dw      Dict_Ptr + 2        // xt
 165+ E4C8             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4C8             >
 165+ E4C8             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4C8             >
 165+ E4C8             >//              ______________________________________________________________________
 165+ E4C8             >//              Dictionary part
 165+ E4C8             >
 165+ E4C8             >                org     Dict_Ptr
 165+ 6B14             >
 165+ 6B14 C6 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 6B16             >
 165+ 6B16             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6B16 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6B19             >
 165+ 6B19             >
 165+ 6B19             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6B19             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6B19             >
 165+ 6B19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6B19 1A          >                db      26
 166+ 6B1A                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 6B1A             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 6B1A             >
 166+ 6B1A             >Dict_Ptr        defl    $
 166+ 6B1A             >
 166+ 6B1A             >//              ______________________________________________________________________
 166+ 6B1A             >//              Heap part
 166+ 6B1A             >
 166+ 6B1A             >
 166+ 6B1A             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4C8             >
 166+ E4C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4C8             >Latest_Definition defl  Heap_Ptr
 166+ E4C8             >
 166+ E4C8             >                // dummy db directives used to calculate length of namec
 166+ E4C8 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CC 45          >
 166+ E4CD             >len_NFA         defl    $ - temp_NFA
 166+ E4CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4C8             >
 166+ E4C8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4C9 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CD 45          >
 166+ E4CE             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CD C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4CE             >
 166+ E4CE C1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4D0             >Prev_Ptr        defl    Heap_Ptr
 166+ E4D0             >
 166+ E4D0             >mirror_Ptr      defl    $
 166+ E4D0             >
 166+ E4D0 1C 6B       >                dw      Dict_Ptr + 2        // xt
 166+ E4D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D2             >
 166+ E4D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D2             >
 166+ E4D2             >//              ______________________________________________________________________
 166+ E4D2             >//              Dictionary part
 166+ E4D2             >
 166+ E4D2             >                org     Dict_Ptr
 166+ 6B1A             >
 166+ 6B1A D0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 6B1C             >
 166+ 6B1C             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6B1C CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6B1F             >
 166+ 6B1F             >
 166+ 6B1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6B1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6B1F             >
 166+ 6B1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6B1F 1C          >                db      28
 167+ 6B20                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 6B20             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 6B20             >
 167+ 6B20             >Dict_Ptr        defl    $
 167+ 6B20             >
 167+ 6B20             >//              ______________________________________________________________________
 167+ 6B20             >//              Heap part
 167+ 6B20             >
 167+ 6B20             >
 167+ 6B20             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D2             >
 167+ E4D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D2             >Latest_Definition defl  Heap_Ptr
 167+ E4D2             >
 167+ E4D2             >                // dummy db directives used to calculate length of namec
 167+ E4D2 42 4C 4B    >                db      "BLK"
 167+ E4D5             >len_NFA         defl    $ - temp_NFA
 167+ E4D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D2             >
 167+ E4D2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D3 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D6             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D5 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D6             >
 167+ E4D6 C8 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4D8             >Prev_Ptr        defl    Heap_Ptr
 167+ E4D8             >
 167+ E4D8             >mirror_Ptr      defl    $
 167+ E4D8             >
 167+ E4D8 22 6B       >                dw      Dict_Ptr + 2        // xt
 167+ E4DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4DA             >
 167+ E4DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4DA             >
 167+ E4DA             >//              ______________________________________________________________________
 167+ E4DA             >//              Dictionary part
 167+ E4DA             >
 167+ E4DA             >                org     Dict_Ptr
 167+ 6B20             >
 167+ 6B20 D8 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 6B22             >
 167+ 6B22             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6B22 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6B25             >
 167+ 6B25             >
 167+ 6B25             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6B25             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6B25             >
 167+ 6B25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6B25 1E          >                db      30
 168+ 6B26                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 6B26             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 6B26             >
 168+ 6B26             >Dict_Ptr        defl    $
 168+ 6B26             >
 168+ 6B26             >//              ______________________________________________________________________
 168+ 6B26             >//              Heap part
 168+ 6B26             >
 168+ 6B26             >
 168+ 6B26             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4DA             >
 168+ E4DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4DA             >Latest_Definition defl  Heap_Ptr
 168+ E4DA             >
 168+ E4DA             >                // dummy db directives used to calculate length of namec
 168+ E4DA 3E 49 4E    >                db      ">IN"
 168+ E4DD             >len_NFA         defl    $ - temp_NFA
 168+ E4DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4DA             >
 168+ E4DA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DB 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4DE             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DD CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4DE             >
 168+ E4DE D2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4E0             >Prev_Ptr        defl    Heap_Ptr
 168+ E4E0             >
 168+ E4E0             >mirror_Ptr      defl    $
 168+ E4E0             >
 168+ E4E0 28 6B       >                dw      Dict_Ptr + 2        // xt
 168+ E4E2             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E2             >
 168+ E4E2             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E2             >
 168+ E4E2             >//              ______________________________________________________________________
 168+ E4E2             >//              Dictionary part
 168+ E4E2             >
 168+ E4E2             >                org     Dict_Ptr
 168+ 6B26             >
 168+ 6B26 E0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 6B28             >
 168+ 6B28             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6B28 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6B2B             >
 168+ 6B2B             >
 168+ 6B2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6B2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6B2B             >
 168+ 6B2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6B2B 20          >                db      32
 169+ 6B2C                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 6B2C             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 6B2C             >
 169+ 6B2C             >Dict_Ptr        defl    $
 169+ 6B2C             >
 169+ 6B2C             >//              ______________________________________________________________________
 169+ 6B2C             >//              Heap part
 169+ 6B2C             >
 169+ 6B2C             >
 169+ 6B2C             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E2             >
 169+ E4E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E2             >Latest_Definition defl  Heap_Ptr
 169+ E4E2             >
 169+ E4E2             >                // dummy db directives used to calculate length of namec
 169+ E4E2 4F 55 54    >                db      "OUT"
 169+ E4E5             >len_NFA         defl    $ - temp_NFA
 169+ E4E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E2             >
 169+ E4E2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E3 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E6             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E5 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E6             >
 169+ E4E6 DA 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4E8             >Prev_Ptr        defl    Heap_Ptr
 169+ E4E8             >
 169+ E4E8             >mirror_Ptr      defl    $
 169+ E4E8             >
 169+ E4E8 2E 6B       >                dw      Dict_Ptr + 2        // xt
 169+ E4EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4EA             >
 169+ E4EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4EA             >
 169+ E4EA             >//              ______________________________________________________________________
 169+ E4EA             >//              Dictionary part
 169+ E4EA             >
 169+ E4EA             >                org     Dict_Ptr
 169+ 6B2C             >
 169+ 6B2C E8 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 6B2E             >
 169+ 6B2E             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6B2E CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6B31             >
 169+ 6B31             >
 169+ 6B31             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6B31             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6B31             >
 169+ 6B31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6B31 22          >                db      34
 170+ 6B32                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 6B32             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 6B32             >
 170+ 6B32             >Dict_Ptr        defl    $
 170+ 6B32             >
 170+ 6B32             >//              ______________________________________________________________________
 170+ 6B32             >//              Heap part
 170+ 6B32             >
 170+ 6B32             >
 170+ 6B32             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4EA             >
 170+ E4EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4EA             >Latest_Definition defl  Heap_Ptr
 170+ E4EA             >
 170+ E4EA             >                // dummy db directives used to calculate length of namec
 170+ E4EA 53 43 52    >                db      "SCR"
 170+ E4ED             >len_NFA         defl    $ - temp_NFA
 170+ E4ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4EA             >
 170+ E4EA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4EB 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4EE             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4ED D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4EE             >
 170+ E4EE E2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4F0             >Prev_Ptr        defl    Heap_Ptr
 170+ E4F0             >
 170+ E4F0             >mirror_Ptr      defl    $
 170+ E4F0             >
 170+ E4F0 34 6B       >                dw      Dict_Ptr + 2        // xt
 170+ E4F2             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F2             >
 170+ E4F2             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F2             >
 170+ E4F2             >//              ______________________________________________________________________
 170+ E4F2             >//              Dictionary part
 170+ E4F2             >
 170+ E4F2             >                org     Dict_Ptr
 170+ 6B32             >
 170+ 6B32 F0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 6B34             >
 170+ 6B34             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6B34 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6B37             >
 170+ 6B37             >
 170+ 6B37             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6B37             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6B37             >
 170+ 6B37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6B37 24          >                db      36
 171+ 6B38                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 6B38             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 6B38             >
 171+ 6B38             >Dict_Ptr        defl    $
 171+ 6B38             >
 171+ 6B38             >//              ______________________________________________________________________
 171+ 6B38             >//              Heap part
 171+ 6B38             >
 171+ 6B38             >
 171+ 6B38             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F2             >
 171+ E4F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F2             >Latest_Definition defl  Heap_Ptr
 171+ E4F2             >
 171+ E4F2             >                // dummy db directives used to calculate length of namec
 171+ E4F2 4F 46 46 53 >                db      "OFFSET"
 171+ E4F6 45 54       >
 171+ E4F8             >len_NFA         defl    $ - temp_NFA
 171+ E4F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F2             >
 171+ E4F2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F3 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F7 45 54       >
 171+ E4F9             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4F8 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4F9             >
 171+ E4F9 EA 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FB             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FB             >
 171+ E4FB             >mirror_Ptr      defl    $
 171+ E4FB             >
 171+ E4FB 3A 6B       >                dw      Dict_Ptr + 2        // xt
 171+ E4FD             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FD             >
 171+ E4FD             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FD             >
 171+ E4FD             >//              ______________________________________________________________________
 171+ E4FD             >//              Dictionary part
 171+ E4FD             >
 171+ E4FD             >                org     Dict_Ptr
 171+ 6B38             >
 171+ 6B38 FB 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 6B3A             >
 171+ 6B3A             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6B3A CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6B3D             >
 171+ 6B3D             >
 171+ 6B3D             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6B3D             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6B3D             >
 171+ 6B3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6B3D 26          >                db      38
 172+ 6B3E                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 6B3E             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 6B3E             >
 172+ 6B3E             >Dict_Ptr        defl    $
 172+ 6B3E             >
 172+ 6B3E             >//              ______________________________________________________________________
 172+ 6B3E             >//              Heap part
 172+ 6B3E             >
 172+ 6B3E             >
 172+ 6B3E             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FD             >
 172+ E4FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FD             >Latest_Definition defl  Heap_Ptr
 172+ E4FD             >
 172+ E4FD             >                // dummy db directives used to calculate length of namec
 172+ E4FD 43 4F 4E 54 >                db      "CONTEXT"
 172+ E501 45 58 54    >
 172+ E504             >len_NFA         defl    $ - temp_NFA
 172+ E504             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FD             >
 172+ E4FD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E4FE 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E502 45 58 54    >
 172+ E505             >                org     $-1                 // alter last byte of Name just above to set
 172+ E504 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E505             >
 172+ E505 F2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E507             >Prev_Ptr        defl    Heap_Ptr
 172+ E507             >
 172+ E507             >mirror_Ptr      defl    $
 172+ E507             >
 172+ E507 40 6B       >                dw      Dict_Ptr + 2        // xt
 172+ E509             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E509             >
 172+ E509             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E509             >
 172+ E509             >//              ______________________________________________________________________
 172+ E509             >//              Dictionary part
 172+ E509             >
 172+ E509             >                org     Dict_Ptr
 172+ 6B3E             >
 172+ 6B3E 07 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 6B40             >
 172+ 6B40             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6B40 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6B43             >
 172+ 6B43             >
 172+ 6B43             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6B43             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6B43             >
 172+ 6B43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6B43 28          >                db      40
 173+ 6B44                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 6B44             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 6B44             >
 173+ 6B44             >Dict_Ptr        defl    $
 173+ 6B44             >
 173+ 6B44             >//              ______________________________________________________________________
 173+ 6B44             >//              Heap part
 173+ 6B44             >
 173+ 6B44             >
 173+ 6B44             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E509             >
 173+ E509             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E509             >Latest_Definition defl  Heap_Ptr
 173+ E509             >
 173+ E509             >                // dummy db directives used to calculate length of namec
 173+ E509 43 55 52 52 >                db      "CURRENT"
 173+ E50D 45 4E 54    >
 173+ E510             >len_NFA         defl    $ - temp_NFA
 173+ E510             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E509             >
 173+ E509 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E50A 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E50E 45 4E 54    >
 173+ E511             >                org     $-1                 // alter last byte of Name just above to set
 173+ E510 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E511             >
 173+ E511 FD 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E513             >Prev_Ptr        defl    Heap_Ptr
 173+ E513             >
 173+ E513             >mirror_Ptr      defl    $
 173+ E513             >
 173+ E513 46 6B       >                dw      Dict_Ptr + 2        // xt
 173+ E515             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E515             >
 173+ E515             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E515             >
 173+ E515             >//              ______________________________________________________________________
 173+ E515             >//              Dictionary part
 173+ E515             >
 173+ E515             >                org     Dict_Ptr
 173+ 6B44             >
 173+ 6B44 13 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 6B46             >
 173+ 6B46             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6B46 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6B49             >
 173+ 6B49             >
 173+ 6B49             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6B49             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6B49             >
 173+ 6B49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6B49 2A          >                db      42
 174+ 6B4A                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 6B4A             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 6B4A             >
 174+ 6B4A             >Dict_Ptr        defl    $
 174+ 6B4A             >
 174+ 6B4A             >//              ______________________________________________________________________
 174+ 6B4A             >//              Heap part
 174+ 6B4A             >
 174+ 6B4A             >
 174+ 6B4A             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E515             >
 174+ E515             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E515             >Latest_Definition defl  Heap_Ptr
 174+ E515             >
 174+ E515             >                // dummy db directives used to calculate length of namec
 174+ E515 53 54 41 54 >                db      "STATE"
 174+ E519 45          >
 174+ E51A             >len_NFA         defl    $ - temp_NFA
 174+ E51A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E515             >
 174+ E515 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E516 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E51A 45          >
 174+ E51B             >                org     $-1                 // alter last byte of Name just above to set
 174+ E51A C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51B             >
 174+ E51B 09 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51D             >Prev_Ptr        defl    Heap_Ptr
 174+ E51D             >
 174+ E51D             >mirror_Ptr      defl    $
 174+ E51D             >
 174+ E51D 4C 6B       >                dw      Dict_Ptr + 2        // xt
 174+ E51F             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E51F             >
 174+ E51F             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E51F             >
 174+ E51F             >//              ______________________________________________________________________
 174+ E51F             >//              Dictionary part
 174+ E51F             >
 174+ E51F             >                org     Dict_Ptr
 174+ 6B4A             >
 174+ 6B4A 1D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 6B4C             >
 174+ 6B4C             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6B4C CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6B4F             >
 174+ 6B4F             >
 174+ 6B4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6B4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6B4F             >
 174+ 6B4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6B4F 2C          >                db      44
 175+ 6B50                              User_Def BASE       , "BASE"      , 46 //
 175+ 6B50             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 6B50             >
 175+ 6B50             >Dict_Ptr        defl    $
 175+ 6B50             >
 175+ 6B50             >//              ______________________________________________________________________
 175+ 6B50             >//              Heap part
 175+ 6B50             >
 175+ 6B50             >
 175+ 6B50             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E51F             >
 175+ E51F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E51F             >Latest_Definition defl  Heap_Ptr
 175+ E51F             >
 175+ E51F             >                // dummy db directives used to calculate length of namec
 175+ E51F 42 41 53 45 >                db      "BASE"
 175+ E523             >len_NFA         defl    $ - temp_NFA
 175+ E523             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E51F             >
 175+ E51F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E520 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E524             >                org     $-1                 // alter last byte of Name just above to set
 175+ E523 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E524             >
 175+ E524 15 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E526             >Prev_Ptr        defl    Heap_Ptr
 175+ E526             >
 175+ E526             >mirror_Ptr      defl    $
 175+ E526             >
 175+ E526 52 6B       >                dw      Dict_Ptr + 2        // xt
 175+ E528             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E528             >
 175+ E528             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E528             >
 175+ E528             >//              ______________________________________________________________________
 175+ E528             >//              Dictionary part
 175+ E528             >
 175+ E528             >                org     Dict_Ptr
 175+ 6B50             >
 175+ 6B50 26 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 6B52             >
 175+ 6B52             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6B52 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6B55             >
 175+ 6B55             >
 175+ 6B55             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6B55             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6B55             >
 175+ 6B55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6B55 2E          >                db      46
 176+ 6B56                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 6B56             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 6B56             >
 176+ 6B56             >Dict_Ptr        defl    $
 176+ 6B56             >
 176+ 6B56             >//              ______________________________________________________________________
 176+ 6B56             >//              Heap part
 176+ 6B56             >
 176+ 6B56             >
 176+ 6B56             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E528             >
 176+ E528             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E528             >Latest_Definition defl  Heap_Ptr
 176+ E528             >
 176+ E528             >                // dummy db directives used to calculate length of namec
 176+ E528 44 50 4C    >                db      "DPL"
 176+ E52B             >len_NFA         defl    $ - temp_NFA
 176+ E52B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E528             >
 176+ E528 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E529 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52C             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52B CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52C             >
 176+ E52C 1F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E52E             >Prev_Ptr        defl    Heap_Ptr
 176+ E52E             >
 176+ E52E             >mirror_Ptr      defl    $
 176+ E52E             >
 176+ E52E 58 6B       >                dw      Dict_Ptr + 2        // xt
 176+ E530             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E530             >
 176+ E530             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E530             >
 176+ E530             >//              ______________________________________________________________________
 176+ E530             >//              Dictionary part
 176+ E530             >
 176+ E530             >                org     Dict_Ptr
 176+ 6B56             >
 176+ 6B56 2E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 6B58             >
 176+ 6B58             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6B58 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6B5B             >
 176+ 6B5B             >
 176+ 6B5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6B5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6B5B             >
 176+ 6B5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6B5B 30          >                db      48
 177+ 6B5C                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 6B5C             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 6B5C             >
 177+ 6B5C             >Dict_Ptr        defl    $
 177+ 6B5C             >
 177+ 6B5C             >//              ______________________________________________________________________
 177+ 6B5C             >//              Heap part
 177+ 6B5C             >
 177+ 6B5C             >
 177+ 6B5C             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E530             >
 177+ E530             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E530             >Latest_Definition defl  Heap_Ptr
 177+ E530             >
 177+ E530             >                // dummy db directives used to calculate length of namec
 177+ E530 46 4C 44    >                db      "FLD"
 177+ E533             >len_NFA         defl    $ - temp_NFA
 177+ E533             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E530             >
 177+ E530 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E531 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E534             >                org     $-1                 // alter last byte of Name just above to set
 177+ E533 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E534             >
 177+ E534 28 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E536             >Prev_Ptr        defl    Heap_Ptr
 177+ E536             >
 177+ E536             >mirror_Ptr      defl    $
 177+ E536             >
 177+ E536 5E 6B       >                dw      Dict_Ptr + 2        // xt
 177+ E538             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E538             >
 177+ E538             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E538             >
 177+ E538             >//              ______________________________________________________________________
 177+ E538             >//              Dictionary part
 177+ E538             >
 177+ E538             >                org     Dict_Ptr
 177+ 6B5C             >
 177+ 6B5C 36 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 6B5E             >
 177+ 6B5E             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6B5E CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6B61             >
 177+ 6B61             >
 177+ 6B61             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6B61             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6B61             >
 177+ 6B61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6B61 32          >                db      50
 178+ 6B62                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 6B62             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 6B62             >
 178+ 6B62             >Dict_Ptr        defl    $
 178+ 6B62             >
 178+ 6B62             >//              ______________________________________________________________________
 178+ 6B62             >//              Heap part
 178+ 6B62             >
 178+ 6B62             >
 178+ 6B62             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E538             >
 178+ E538             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E538             >Latest_Definition defl  Heap_Ptr
 178+ E538             >
 178+ E538             >                // dummy db directives used to calculate length of namec
 178+ E538 43 53 50    >                db      "CSP"
 178+ E53B             >len_NFA         defl    $ - temp_NFA
 178+ E53B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E538             >
 178+ E538 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E539 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53C             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53B D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53C             >
 178+ E53C 30 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E53E             >Prev_Ptr        defl    Heap_Ptr
 178+ E53E             >
 178+ E53E             >mirror_Ptr      defl    $
 178+ E53E             >
 178+ E53E 64 6B       >                dw      Dict_Ptr + 2        // xt
 178+ E540             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E540             >
 178+ E540             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E540             >
 178+ E540             >//              ______________________________________________________________________
 178+ E540             >//              Dictionary part
 178+ E540             >
 178+ E540             >                org     Dict_Ptr
 178+ 6B62             >
 178+ 6B62 3E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 6B64             >
 178+ 6B64             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6B64 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6B67             >
 178+ 6B67             >
 178+ 6B67             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6B67             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6B67             >
 178+ 6B67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6B67 34          >                db      52
 179+ 6B68                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 6B68             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 6B68             >
 179+ 6B68             >Dict_Ptr        defl    $
 179+ 6B68             >
 179+ 6B68             >//              ______________________________________________________________________
 179+ 6B68             >//              Heap part
 179+ 6B68             >
 179+ 6B68             >
 179+ 6B68             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E540             >
 179+ E540             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E540             >Latest_Definition defl  Heap_Ptr
 179+ E540             >
 179+ E540             >                // dummy db directives used to calculate length of namec
 179+ E540 52 23       >                db      "R#"
 179+ E542             >len_NFA         defl    $ - temp_NFA
 179+ E542             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E540             >
 179+ E540 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E541 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E543             >                org     $-1                 // alter last byte of Name just above to set
 179+ E542 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E543             >
 179+ E543 38 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E545             >Prev_Ptr        defl    Heap_Ptr
 179+ E545             >
 179+ E545             >mirror_Ptr      defl    $
 179+ E545             >
 179+ E545 6A 6B       >                dw      Dict_Ptr + 2        // xt
 179+ E547             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E547             >
 179+ E547             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E547             >
 179+ E547             >//              ______________________________________________________________________
 179+ E547             >//              Dictionary part
 179+ E547             >
 179+ E547             >                org     Dict_Ptr
 179+ 6B68             >
 179+ 6B68 45 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 6B6A             >
 179+ 6B6A             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6B6A CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6B6D             >
 179+ 6B6D             >
 179+ 6B6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6B6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6B6D             >
 179+ 6B6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6B6D 36          >                db      54
 180+ 6B6E                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 6B6E             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 6B6E             >
 180+ 6B6E             >Dict_Ptr        defl    $
 180+ 6B6E             >
 180+ 6B6E             >//              ______________________________________________________________________
 180+ 6B6E             >//              Heap part
 180+ 6B6E             >
 180+ 6B6E             >
 180+ 6B6E             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E547             >
 180+ E547             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E547             >Latest_Definition defl  Heap_Ptr
 180+ E547             >
 180+ E547             >                // dummy db directives used to calculate length of namec
 180+ E547 48 4C 44    >                db      "HLD"
 180+ E54A             >len_NFA         defl    $ - temp_NFA
 180+ E54A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E547             >
 180+ E547 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E548 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54B             >                org     $-1                 // alter last byte of Name just above to set
 180+ E54A C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54B             >
 180+ E54B 40 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54D             >Prev_Ptr        defl    Heap_Ptr
 180+ E54D             >
 180+ E54D             >mirror_Ptr      defl    $
 180+ E54D             >
 180+ E54D 70 6B       >                dw      Dict_Ptr + 2        // xt
 180+ E54F             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E54F             >
 180+ E54F             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E54F             >
 180+ E54F             >//              ______________________________________________________________________
 180+ E54F             >//              Dictionary part
 180+ E54F             >
 180+ E54F             >                org     Dict_Ptr
 180+ 6B6E             >
 180+ 6B6E 4D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 6B70             >
 180+ 6B70             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6B70 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6B73             >
 180+ 6B73             >
 180+ 6B73             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6B73             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6B73             >
 180+ 6B73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6B73 38          >                db      56
 181+ 6B74                              User_Def USE        , "USE"       , 58 // address of last used block
 181+ 6B74             >                New_Def  USE, "USE", User_Ptr, is_normal
 181+ 6B74             >
 181+ 6B74             >Dict_Ptr        defl    $
 181+ 6B74             >
 181+ 6B74             >//              ______________________________________________________________________
 181+ 6B74             >//              Heap part
 181+ 6B74             >
 181+ 6B74             >
 181+ 6B74             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E54F             >
 181+ E54F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E54F             >Latest_Definition defl  Heap_Ptr
 181+ E54F             >
 181+ E54F             >                // dummy db directives used to calculate length of namec
 181+ E54F 55 53 45    >                db      "USE"
 181+ E552             >len_NFA         defl    $ - temp_NFA
 181+ E552             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E54F             >
 181+ E54F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E550 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 181+ E553             >                org     $-1                 // alter last byte of Name just above to set
 181+ E552 C5          >                db      {b $} | END_BIT     // msb as name end
 181+ E553             >
 181+ E553 47 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E555             >Prev_Ptr        defl    Heap_Ptr
 181+ E555             >
 181+ E555             >mirror_Ptr      defl    $
 181+ E555             >
 181+ E555 76 6B       >                dw      Dict_Ptr + 2        // xt
 181+ E557             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E557             >
 181+ E557             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E557             >
 181+ E557             >//              ______________________________________________________________________
 181+ E557             >//              Dictionary part
 181+ E557             >
 181+ E557             >                org     Dict_Ptr
 181+ 6B74             >
 181+ 6B74 55 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 6B76             >
 181+ 6B76             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6B76 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6B79             >
 181+ 6B79             >
 181+ 6B79             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6B79             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6B79             >
 181+ 6B79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6B79 3A          >                db      58
 182+ 6B7A                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 6B7A             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 6B7A             >
 182+ 6B7A             >Dict_Ptr        defl    $
 182+ 6B7A             >
 182+ 6B7A             >//              ______________________________________________________________________
 182+ 6B7A             >//              Heap part
 182+ 6B7A             >
 182+ 6B7A             >
 182+ 6B7A             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E557             >
 182+ E557             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E557             >Latest_Definition defl  Heap_Ptr
 182+ E557             >
 182+ E557             >                // dummy db directives used to calculate length of namec
 182+ E557 50 52 45 56 >                db      "PREV"
 182+ E55B             >len_NFA         defl    $ - temp_NFA
 182+ E55B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E557             >
 182+ E557 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E558 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55C             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55B D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55C             >
 182+ E55C 4F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E55E             >Prev_Ptr        defl    Heap_Ptr
 182+ E55E             >
 182+ E55E             >mirror_Ptr      defl    $
 182+ E55E             >
 182+ E55E 7C 6B       >                dw      Dict_Ptr + 2        // xt
 182+ E560             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E560             >
 182+ E560             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E560             >
 182+ E560             >//              ______________________________________________________________________
 182+ E560             >//              Dictionary part
 182+ E560             >
 182+ E560             >                org     Dict_Ptr
 182+ 6B7A             >
 182+ 6B7A 5E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 6B7C             >
 182+ 6B7C             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6B7C CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6B7F             >
 182+ 6B7F             >
 182+ 6B7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6B7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6B7F             >
 182+ 6B7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6B7F 3C          >                db      60
 183+ 6B80                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 6B80             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 6B80             >
 183+ 6B80             >Dict_Ptr        defl    $
 183+ 6B80             >
 183+ 6B80             >//              ______________________________________________________________________
 183+ 6B80             >//              Heap part
 183+ 6B80             >
 183+ 6B80             >
 183+ 6B80             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E560             >
 183+ E560             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E560             >Latest_Definition defl  Heap_Ptr
 183+ E560             >
 183+ E560             >                // dummy db directives used to calculate length of namec
 183+ E560 4C 50       >                db      "LP"
 183+ E562             >len_NFA         defl    $ - temp_NFA
 183+ E562             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E560             >
 183+ E560 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E561 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E563             >                org     $-1                 // alter last byte of Name just above to set
 183+ E562 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E563             >
 183+ E563 57 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E565             >Prev_Ptr        defl    Heap_Ptr
 183+ E565             >
 183+ E565             >mirror_Ptr      defl    $
 183+ E565             >
 183+ E565 82 6B       >                dw      Dict_Ptr + 2        // xt
 183+ E567             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E567             >
 183+ E567             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E567             >
 183+ E567             >//              ______________________________________________________________________
 183+ E567             >//              Dictionary part
 183+ E567             >
 183+ E567             >                org     Dict_Ptr
 183+ 6B80             >
 183+ 6B80 65 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 6B82             >
 183+ 6B82             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6B82 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6B85             >
 183+ 6B85             >
 183+ 6B85             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6B85             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6B85             >
 183+ 6B85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6B85 3E          >                db      62
 184+ 6B86                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 6B86             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 6B86             >
 184+ 6B86             >Dict_Ptr        defl    $
 184+ 6B86             >
 184+ 6B86             >//              ______________________________________________________________________
 184+ 6B86             >//              Heap part
 184+ 6B86             >
 184+ 6B86             >
 184+ 6B86             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E567             >
 184+ E567             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E567             >Latest_Definition defl  Heap_Ptr
 184+ E567             >
 184+ E567             >                // dummy db directives used to calculate length of namec
 184+ E567 50 4C 41 43 >                db      "PLACE"
 184+ E56B 45          >
 184+ E56C             >len_NFA         defl    $ - temp_NFA
 184+ E56C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E567             >
 184+ E567 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E568 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56C 45          >
 184+ E56D             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56C C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E56D             >
 184+ E56D 60 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E56F             >Prev_Ptr        defl    Heap_Ptr
 184+ E56F             >
 184+ E56F             >mirror_Ptr      defl    $
 184+ E56F             >
 184+ E56F 88 6B       >                dw      Dict_Ptr + 2        // xt
 184+ E571             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E571             >
 184+ E571             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E571             >
 184+ E571             >//              ______________________________________________________________________
 184+ E571             >//              Dictionary part
 184+ E571             >
 184+ E571             >                org     Dict_Ptr
 184+ 6B86             >
 184+ 6B86 6F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 6B88             >
 184+ 6B88             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6B88 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6B8B             >
 184+ 6B8B             >
 184+ 6B8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6B8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6B8B             >
 184+ 6B8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6B8B 40          >                db      64
 185+ 6B8C                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 6B8C             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 6B8C             >
 185+ 6B8C             >Dict_Ptr        defl    $
 185+ 6B8C             >
 185+ 6B8C             >//              ______________________________________________________________________
 185+ 6B8C             >//              Heap part
 185+ 6B8C             >
 185+ 6B8C             >
 185+ 6B8C             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E571             >
 185+ E571             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E571             >Latest_Definition defl  Heap_Ptr
 185+ E571             >
 185+ E571             >                // dummy db directives used to calculate length of namec
 185+ E571 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E575 43 45 2D 49 >
 185+ E579 44          >
 185+ E57A             >len_NFA         defl    $ - temp_NFA
 185+ E57A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E571             >
 185+ E571 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E572 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E576 43 45 2D 49 >
 185+ E57A 44          >
 185+ E57B             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57A C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57B             >
 185+ E57B 67 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E57D             >Prev_Ptr        defl    Heap_Ptr
 185+ E57D             >
 185+ E57D             >mirror_Ptr      defl    $
 185+ E57D             >
 185+ E57D 8E 6B       >                dw      Dict_Ptr + 2        // xt
 185+ E57F             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E57F             >
 185+ E57F             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E57F             >
 185+ E57F             >//              ______________________________________________________________________
 185+ E57F             >//              Dictionary part
 185+ E57F             >
 185+ E57F             >                org     Dict_Ptr
 185+ 6B8C             >
 185+ 6B8C 7D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 6B8E             >
 185+ 6B8E             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6B8E CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6B91             >
 185+ 6B91             >
 185+ 6B91             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6B91             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6B91             >
 185+ 6B91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6B91 42          >                db      66
 186+ 6B92                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 6B92             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 6B92             >
 186+ 6B92             >Dict_Ptr        defl    $
 186+ 6B92             >
 186+ 6B92             >//              ______________________________________________________________________
 186+ 6B92             >//              Heap part
 186+ 6B92             >
 186+ 6B92             >
 186+ 6B92             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E57F             >
 186+ E57F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E57F             >Latest_Definition defl  Heap_Ptr
 186+ E57F             >
 186+ E57F             >                // dummy db directives used to calculate length of namec
 186+ E57F 53 50 41 4E >                db      "SPAN"
 186+ E583             >len_NFA         defl    $ - temp_NFA
 186+ E583             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E57F             >
 186+ E57F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E580 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E584             >                org     $-1                 // alter last byte of Name just above to set
 186+ E583 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E584             >
 186+ E584 71 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E586             >Prev_Ptr        defl    Heap_Ptr
 186+ E586             >
 186+ E586             >mirror_Ptr      defl    $
 186+ E586             >
 186+ E586 94 6B       >                dw      Dict_Ptr + 2        // xt
 186+ E588             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E588             >
 186+ E588             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E588             >
 186+ E588             >//              ______________________________________________________________________
 186+ E588             >//              Dictionary part
 186+ E588             >
 186+ E588             >                org     Dict_Ptr
 186+ 6B92             >
 186+ 6B92 86 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 6B94             >
 186+ 6B94             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 6B94 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 6B97             >
 186+ 6B97             >
 186+ 6B97             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 6B97             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 6B97             >
 186+ 6B97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 6B97 44          >                db      68
 187+ 6B98                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 6B98             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 6B98             >
 187+ 6B98             >Dict_Ptr        defl    $
 187+ 6B98             >
 187+ 6B98             >//              ______________________________________________________________________
 187+ 6B98             >//              Heap part
 187+ 6B98             >
 187+ 6B98             >
 187+ 6B98             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E588             >
 187+ E588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E588             >Latest_Definition defl  Heap_Ptr
 187+ E588             >
 187+ E588             >                // dummy db directives used to calculate length of namec
 187+ E588 48 41 4E 44 >                db      "HANDLER"
 187+ E58C 4C 45 52    >
 187+ E58F             >len_NFA         defl    $ - temp_NFA
 187+ E58F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E588             >
 187+ E588 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E589 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E58D 4C 45 52    >
 187+ E590             >                org     $-1                 // alter last byte of Name just above to set
 187+ E58F D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E590             >
 187+ E590 7F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E592             >Prev_Ptr        defl    Heap_Ptr
 187+ E592             >
 187+ E592             >mirror_Ptr      defl    $
 187+ E592             >
 187+ E592 9A 6B       >                dw      Dict_Ptr + 2        // xt
 187+ E594             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E594             >
 187+ E594             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E594             >
 187+ E594             >//              ______________________________________________________________________
 187+ E594             >//              Dictionary part
 187+ E594             >
 187+ E594             >                org     Dict_Ptr
 187+ 6B98             >
 187+ 6B98 92 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 6B9A             >
 187+ 6B9A             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6B9A CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 6B9D             >
 187+ 6B9D             >
 187+ 6B9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6B9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6B9D             >
 187+ 6B9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 6B9D 46          >                db      70
 188+ 6B9E                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 6B9E             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 6B9E             >
 188+ 6B9E             >Dict_Ptr        defl    $
 188+ 6B9E             >
 188+ 6B9E             >//              ______________________________________________________________________
 188+ 6B9E             >//              Heap part
 188+ 6B9E             >
 188+ 6B9E             >
 188+ 6B9E             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E594             >
 188+ E594             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E594             >Latest_Definition defl  Heap_Ptr
 188+ E594             >
 188+ E594             >                // dummy db directives used to calculate length of namec
 188+ E594 45 58 50    >                db      "EXP"
 188+ E597             >len_NFA         defl    $ - temp_NFA
 188+ E597             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E594             >
 188+ E594 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E595 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E598             >                org     $-1                 // alter last byte of Name just above to set
 188+ E597 D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E598             >
 188+ E598 88 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59A             >Prev_Ptr        defl    Heap_Ptr
 188+ E59A             >
 188+ E59A             >mirror_Ptr      defl    $
 188+ E59A             >
 188+ E59A A0 6B       >                dw      Dict_Ptr + 2        // xt
 188+ E59C             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59C             >
 188+ E59C             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59C             >
 188+ E59C             >//              ______________________________________________________________________
 188+ E59C             >//              Dictionary part
 188+ E59C             >
 188+ E59C             >                org     Dict_Ptr
 188+ 6B9E             >
 188+ 6B9E 9A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 6BA0             >
 188+ 6BA0             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6BA0 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 6BA3             >
 188+ 6BA3             >
 188+ 6BA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6BA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6BA3             >
 188+ 6BA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 6BA3 48          >                db      72
 189+ 6BA4
 190+ 6BA4              //  ______________________________________________________________________
 191+ 6BA4              //
 192+ 6BA4              // here         -- a
 193+ 6BA4                              Colon_Def HERE, "HERE", is_normal
 193+ 6BA4             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 6BA4             >
 193+ 6BA4             >Dict_Ptr        defl    $
 193+ 6BA4             >
 193+ 6BA4             >//              ______________________________________________________________________
 193+ 6BA4             >//              Heap part
 193+ 6BA4             >
 193+ 6BA4             >
 193+ 6BA4             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59C             >
 193+ E59C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59C             >Latest_Definition defl  Heap_Ptr
 193+ E59C             >
 193+ E59C             >                // dummy db directives used to calculate length of namec
 193+ E59C 48 45 52 45 >                db      "HERE"
 193+ E5A0             >len_NFA         defl    $ - temp_NFA
 193+ E5A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59C             >
 193+ E59C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E59D 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A1             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A0 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A1             >
 193+ E5A1 94 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A3             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A3             >
 193+ E5A3             >mirror_Ptr      defl    $
 193+ E5A3             >
 193+ E5A3 A6 6B       >                dw      Dict_Ptr + 2        // xt
 193+ E5A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A5             >
 193+ E5A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A5             >
 193+ E5A5             >//              ______________________________________________________________________
 193+ E5A5             >//              Dictionary part
 193+ E5A5             >
 193+ E5A5             >                org     Dict_Ptr
 193+ 6BA4             >
 193+ 6BA4 A3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 6BA6             >
 193+ 6BA6             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 6BA6 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 6BA9             >
 193+ 6BA9             >
 193+ 6BA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 6BA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 6BA9             >
 193+ 6BA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 6BA9 FE 6A 89 69                  dw      DP, FETCH               // dp @
 195+ 6BAD 52 68                        dw      EXIT                    // ;
 196+ 6BAF
 197+ 6BAF              //  ______________________________________________________________________
 198+ 6BAF              //
 199+ 6BAF              // allot        n --
 200+ 6BAF                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 6BAF             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 6BAF             >
 200+ 6BAF             >Dict_Ptr        defl    $
 200+ 6BAF             >
 200+ 6BAF             >//              ______________________________________________________________________
 200+ 6BAF             >//              Heap part
 200+ 6BAF             >
 200+ 6BAF             >
 200+ 6BAF             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A5             >
 200+ E5A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A5             >Latest_Definition defl  Heap_Ptr
 200+ E5A5             >
 200+ E5A5             >                // dummy db directives used to calculate length of namec
 200+ E5A5 41 4C 4C 4F >                db      "ALLOT"
 200+ E5A9 54          >
 200+ E5AA             >len_NFA         defl    $ - temp_NFA
 200+ E5AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A5             >
 200+ E5A5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A6 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AA 54          >
 200+ E5AB             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AA D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AB             >
 200+ E5AB 9C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5AD             >Prev_Ptr        defl    Heap_Ptr
 200+ E5AD             >
 200+ E5AD             >mirror_Ptr      defl    $
 200+ E5AD             >
 200+ E5AD B1 6B       >                dw      Dict_Ptr + 2        // xt
 200+ E5AF             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5AF             >
 200+ E5AF             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5AF             >
 200+ E5AF             >//              ______________________________________________________________________
 200+ E5AF             >//              Dictionary part
 200+ E5AF             >
 200+ E5AF             >                org     Dict_Ptr
 200+ 6BAF             >
 200+ 6BAF AD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 6BB1             >
 200+ 6BB1             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6BB1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 6BB4             >
 200+ 6BB4             >
 200+ 6BB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6BB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6BB4             >
 200+ 6BB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6BB4 FE 6A 71 69                  dw      DP,  PLUSSTORE          // dp +!
 202+ 6BB8 52 68                        dw      EXIT                    // ;
 203+ 6BBA
 204+ 6BBA              //  ______________________________________________________________________
 205+ 6BBA              //
 206+ 6BBA              // comma        n --
 207+ 6BBA                              Colon_Def COMMA, ",", is_normal
 207+ 6BBA             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 6BBA             >
 207+ 6BBA             >Dict_Ptr        defl    $
 207+ 6BBA             >
 207+ 6BBA             >//              ______________________________________________________________________
 207+ 6BBA             >//              Heap part
 207+ 6BBA             >
 207+ 6BBA             >
 207+ 6BBA             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5AF             >
 207+ E5AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5AF             >Latest_Definition defl  Heap_Ptr
 207+ E5AF             >
 207+ E5AF             >                // dummy db directives used to calculate length of namec
 207+ E5AF 2C          >                db      ","
 207+ E5B0             >len_NFA         defl    $ - temp_NFA
 207+ E5B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5AF             >
 207+ E5AF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B0 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B1             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B0 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B1             >
 207+ E5B1 A5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B3             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B3             >
 207+ E5B3             >mirror_Ptr      defl    $
 207+ E5B3             >
 207+ E5B3 BC 6B       >                dw      Dict_Ptr + 2        // xt
 207+ E5B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B5             >
 207+ E5B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B5             >
 207+ E5B5             >//              ______________________________________________________________________
 207+ E5B5             >//              Dictionary part
 207+ E5B5             >
 207+ E5B5             >                org     Dict_Ptr
 207+ 6BBA             >
 207+ 6BBA B3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 6BBC             >
 207+ 6BBC             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 6BBC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 6BBF             >
 207+ 6BBF             >
 207+ 6BBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 6BBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 6BBF             >
 207+ 6BBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 6BBF A6 6B 93 69                  dw      HERE, STORE             // here !
 209+ 6BC3 8F 6A B1 6B                  dw      TWO, ALLOT              // 2 allot
 210+ 6BC7 52 68                        dw      EXIT                    // ;
 211+ 6BC9
 212+ 6BC9              //  ______________________________________________________________________
 213+ 6BC9              //
 214+ 6BC9              // ccomma       c --
 215+ 6BC9                              Colon_Def CCOMMA, "C,", is_normal
 215+ 6BC9             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 6BC9             >
 215+ 6BC9             >Dict_Ptr        defl    $
 215+ 6BC9             >
 215+ 6BC9             >//              ______________________________________________________________________
 215+ 6BC9             >//              Heap part
 215+ 6BC9             >
 215+ 6BC9             >
 215+ 6BC9             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B5             >
 215+ E5B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B5             >Latest_Definition defl  Heap_Ptr
 215+ E5B5             >
 215+ E5B5             >                // dummy db directives used to calculate length of namec
 215+ E5B5 43 2C       >                db      "C,"
 215+ E5B7             >len_NFA         defl    $ - temp_NFA
 215+ E5B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B5             >
 215+ E5B5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B6 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5B8             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5B7 AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5B8             >
 215+ E5B8 AF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BA             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BA             >
 215+ E5BA             >mirror_Ptr      defl    $
 215+ E5BA             >
 215+ E5BA CB 6B       >                dw      Dict_Ptr + 2        // xt
 215+ E5BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BC             >
 215+ E5BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BC             >
 215+ E5BC             >//              ______________________________________________________________________
 215+ E5BC             >//              Dictionary part
 215+ E5BC             >
 215+ E5BC             >                org     Dict_Ptr
 215+ 6BC9             >
 215+ 6BC9 BA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 6BCB             >
 215+ 6BCB             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 6BCB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 6BCE             >
 215+ 6BCE             >
 215+ 6BCE             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 6BCE             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 6BCE             >
 215+ 6BCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 6BCE A6 6B A7 69                  dw      HERE, CSTORE            // here c!
 217+ 6BD2 88 6A B1 6B                  dw      ONE, ALLOT              // 1 allot
 218+ 6BD6 52 68                        dw      EXIT                    // ;
 219+ 6BD8
 220+ 6BD8              //  ______________________________________________________________________
 221+ 6BD8              //
 222+ 6BD8              // s>d          n -- d
 223+ 6BD8              // converts a single precision integer in a double precision
 224+ 6BD8                              New_Def S_TO_D, "S>D", is_code, is_normal
 224+ 6BD8             >
 224+ 6BD8             >Dict_Ptr        defl    $
 224+ 6BD8             >
 224+ 6BD8             >//              ______________________________________________________________________
 224+ 6BD8             >//              Heap part
 224+ 6BD8             >
 224+ 6BD8             >
 224+ 6BD8             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ E5BC             >
 224+ E5BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ E5BC             >Latest_Definition defl  Heap_Ptr
 224+ E5BC             >
 224+ E5BC             >                // dummy db directives used to calculate length of namec
 224+ E5BC 53 3E 44    >                db      "S>D"
 224+ E5BF             >len_NFA         defl    $ - temp_NFA
 224+ E5BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ E5BC             >
 224+ E5BC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ E5BD 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 224+ E5C0             >                org     $-1                 // alter last byte of Name just above to set
 224+ E5BF C4          >                db      {b $} | END_BIT     // msb as name end
 224+ E5C0             >
 224+ E5C0 B5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ E5C2             >Prev_Ptr        defl    Heap_Ptr
 224+ E5C2             >
 224+ E5C2             >mirror_Ptr      defl    $
 224+ E5C2             >
 224+ E5C2 DA 6B       >                dw      Dict_Ptr + 2        // xt
 224+ E5C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ E5C4             >
 224+ E5C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ E5C4             >
 224+ E5C4             >//              ______________________________________________________________________
 224+ E5C4             >//              Dictionary part
 224+ E5C4             >
 224+ E5C4             >                org     Dict_Ptr
 224+ 6BD8             >
 224+ 6BD8 C2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 6BDA             >
 224+ 6BDA             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 6BDA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 224+ 6BDA ~           >
 224+ 6BDA ~           >
 224+ 6BDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 6BDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 6BDA             >
 224+ 6BDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 6BDA E1                           pop     hl
 226+ 6BDB 7C                           ld      a, h
 227+ 6BDC E5                           push    hl
 228+ 6BDD 17                           rla
 229+ 6BDE ED 62                        sbc     hl, hl
 230+ 6BE0 E5                           push    hl
 231+ 6BE1                              next
 231+ 6BE1 DD E9       >                jp      (ix)
 232+ 6BE3
 233+ 6BE3              //  ______________________________________________________________________
 234+ 6BE3              //
 235+ 6BE3              // -            n1 n2 -- n3
 236+ 6BE3              // subtraction
 237+ 6BE3                              New_Def SUBTRACT, "-", is_code, is_normal
 237+ 6BE3             >
 237+ 6BE3             >Dict_Ptr        defl    $
 237+ 6BE3             >
 237+ 6BE3             >//              ______________________________________________________________________
 237+ 6BE3             >//              Heap part
 237+ 6BE3             >
 237+ 6BE3             >
 237+ 6BE3             >                org     (Heap_Ptr & $1FFF) + $E000
 237+ E5C4             >
 237+ E5C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ E5C4             >Latest_Definition defl  Heap_Ptr
 237+ E5C4             >
 237+ E5C4             >                // dummy db directives used to calculate length of namec
 237+ E5C4 2D          >                db      "-"
 237+ E5C5             >len_NFA         defl    $ - temp_NFA
 237+ E5C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ E5C4             >
 237+ E5C4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ E5C5 2D          >                db      "-"               // name string in 7-bit ascii, but
 237+ E5C6             >                org     $-1                 // alter last byte of Name just above to set
 237+ E5C5 AD          >                db      {b $} | END_BIT     // msb as name end
 237+ E5C6             >
 237+ E5C6 BC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 237+ E5C8             >Prev_Ptr        defl    Heap_Ptr
 237+ E5C8             >
 237+ E5C8             >mirror_Ptr      defl    $
 237+ E5C8             >
 237+ E5C8 E5 6B       >                dw      Dict_Ptr + 2        // xt
 237+ E5CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 237+ E5CA             >
 237+ E5CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 237+ E5CA             >
 237+ E5CA             >//              ______________________________________________________________________
 237+ E5CA             >//              Dictionary part
 237+ E5CA             >
 237+ E5CA             >                org     Dict_Ptr
 237+ 6BE3             >
 237+ 6BE3 C8 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 237+ 6BE5             >
 237+ 6BE5             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 6BE5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 237+ 6BE5 ~           >
 237+ 6BE5 ~           >
 237+ 6BE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 6BE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 6BE5             >
 237+ 6BE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 238+ 6BE5 D9                           exx
 239+ 6BE6 D1                           pop     de
 240+ 6BE7 E1                           pop     hl
 241+ 6BE8 A7                           and     a
 242+ 6BE9 ED 52                        sbc     hl, de
 243+ 6BEB E5                           push    hl
 244+ 6BEC D9                           exx
 245+ 6BED                              next
 245+ 6BED DD E9       >                jp      (ix)
 246+ 6BEF
 247+ 6BEF
 248+ 6BEF              //  ______________________________________________________________________
 249+ 6BEF              //
 250+ 6BEF              // =            n1 n2 -- n3
 251+ 6BEF              // equals
 252+ 6BEF                              Colon_Def EQUALS, "=", is_normal
 252+ 6BEF             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 252+ 6BEF             >
 252+ 6BEF             >Dict_Ptr        defl    $
 252+ 6BEF             >
 252+ 6BEF             >//              ______________________________________________________________________
 252+ 6BEF             >//              Heap part
 252+ 6BEF             >
 252+ 6BEF             >
 252+ 6BEF             >                org     (Heap_Ptr & $1FFF) + $E000
 252+ E5CA             >
 252+ E5CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ E5CA             >Latest_Definition defl  Heap_Ptr
 252+ E5CA             >
 252+ E5CA             >                // dummy db directives used to calculate length of namec
 252+ E5CA 3D          >                db      "="
 252+ E5CB             >len_NFA         defl    $ - temp_NFA
 252+ E5CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ E5CA             >
 252+ E5CA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ E5CB 3D          >                db      "="               // name string in 7-bit ascii, but
 252+ E5CC             >                org     $-1                 // alter last byte of Name just above to set
 252+ E5CB BD          >                db      {b $} | END_BIT     // msb as name end
 252+ E5CC             >
 252+ E5CC C4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 252+ E5CE             >Prev_Ptr        defl    Heap_Ptr
 252+ E5CE             >
 252+ E5CE             >mirror_Ptr      defl    $
 252+ E5CE             >
 252+ E5CE F1 6B       >                dw      Dict_Ptr + 2        // xt
 252+ E5D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 252+ E5D0             >
 252+ E5D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 252+ E5D0             >
 252+ E5D0             >//              ______________________________________________________________________
 252+ E5D0             >//              Dictionary part
 252+ E5D0             >
 252+ E5D0             >                org     Dict_Ptr
 252+ 6BEF             >
 252+ 6BEF CE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 252+ 6BF1             >
 252+ 6BF1             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 6BF1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 252+ 6BF4             >
 252+ 6BF4             >
 252+ 6BF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 6BF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 6BF4             >
 252+ 6BF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 6BF4 E5 6B 77 68                  dw      SUBTRACT, ZEQUAL        // - 0=
 254+ 6BF8 52 68                        dw      EXIT                    // ;
 255+ 6BFA
 256+ 6BFA              //  ______________________________________________________________________
 257+ 6BFA              //
 258+ 6BFA              // u<           u1 u2 -- u3
 259+ 6BFA              // unsigned less-than
 260+ 6BFA                              New_Def ULESS, "U<", is_code, is_normal
 260+ 6BFA             >
 260+ 6BFA             >Dict_Ptr        defl    $
 260+ 6BFA             >
 260+ 6BFA             >//              ______________________________________________________________________
 260+ 6BFA             >//              Heap part
 260+ 6BFA             >
 260+ 6BFA             >
 260+ 6BFA             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5D0             >
 260+ E5D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5D0             >Latest_Definition defl  Heap_Ptr
 260+ E5D0             >
 260+ E5D0             >                // dummy db directives used to calculate length of namec
 260+ E5D0 55 3C       >                db      "U<"
 260+ E5D2             >len_NFA         defl    $ - temp_NFA
 260+ E5D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5D0             >
 260+ E5D0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5D1 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 260+ E5D3             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5D2 BC          >                db      {b $} | END_BIT     // msb as name end
 260+ E5D3             >
 260+ E5D3 CA 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5D5             >Prev_Ptr        defl    Heap_Ptr
 260+ E5D5             >
 260+ E5D5             >mirror_Ptr      defl    $
 260+ E5D5             >
 260+ E5D5 FC 6B       >                dw      Dict_Ptr + 2        // xt
 260+ E5D7             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D7             >
 260+ E5D7             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D7             >
 260+ E5D7             >//              ______________________________________________________________________
 260+ E5D7             >//              Dictionary part
 260+ E5D7             >
 260+ E5D7             >                org     Dict_Ptr
 260+ 6BFA             >
 260+ 6BFA D5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6BFC             >
 260+ 6BFC             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6BFC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 6BFC ~           >
 260+ 6BFC ~           >
 260+ 6BFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6BFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6BFC             >
 260+ 6BFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6BFC D9                           exx
 262+ 6BFD D1                           pop     de
 263+ 6BFE E1                           pop     hl
 264+ 6BFF A7                           and     a
 265+ 6C00 ED 52                        sbc     hl, de
 266+ 6C02 ED 62                        sbc     hl, hl
 267+ 6C04 E5                           push    hl
 268+ 6C05 D9                           exx
 269+ 6C06                              next
 269+ 6C06 DD E9       >                jp      (ix)
 270+ 6C08
 271+ 6C08              //  ______________________________________________________________________
 272+ 6C08              //
 273+ 6C08              // <           n1 n2 -- n3
 274+ 6C08              // less-than
 275+ 6C08                              New_Def LESS, "<", is_code, is_normal
 275+ 6C08             >
 275+ 6C08             >Dict_Ptr        defl    $
 275+ 6C08             >
 275+ 6C08             >//              ______________________________________________________________________
 275+ 6C08             >//              Heap part
 275+ 6C08             >
 275+ 6C08             >
 275+ 6C08             >                org     (Heap_Ptr & $1FFF) + $E000
 275+ E5D7             >
 275+ E5D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 275+ E5D7             >Latest_Definition defl  Heap_Ptr
 275+ E5D7             >
 275+ E5D7             >                // dummy db directives used to calculate length of namec
 275+ E5D7 3C          >                db      "<"
 275+ E5D8             >len_NFA         defl    $ - temp_NFA
 275+ E5D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 275+ E5D7             >
 275+ E5D7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 275+ E5D8 3C          >                db      "<"               // name string in 7-bit ascii, but
 275+ E5D9             >                org     $-1                 // alter last byte of Name just above to set
 275+ E5D8 BC          >                db      {b $} | END_BIT     // msb as name end
 275+ E5D9             >
 275+ E5D9 D0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 275+ E5DB             >Prev_Ptr        defl    Heap_Ptr
 275+ E5DB             >
 275+ E5DB             >mirror_Ptr      defl    $
 275+ E5DB             >
 275+ E5DB 0A 6C       >                dw      Dict_Ptr + 2        // xt
 275+ E5DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 275+ E5DD             >
 275+ E5DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 275+ E5DD             >
 275+ E5DD             >//              ______________________________________________________________________
 275+ E5DD             >//              Dictionary part
 275+ E5DD             >
 275+ E5DD             >                org     Dict_Ptr
 275+ 6C08             >
 275+ 6C08 DB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 275+ 6C0A             >
 275+ 6C0A             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 275+ 6C0A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 275+ 6C0A ~           >
 275+ 6C0A ~           >
 275+ 6C0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 275+ 6C0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 275+ 6C0A             >
 275+ 6C0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 276+ 6C0A D9                           exx
 277+ 6C0B D1                           pop     de
 278+ 6C0C E1                           pop     hl
 279+ 6C0D 7C                           ld      a, h
 280+ 6C0E EE 80                        xor     $80
 281+ 6C10 67                           ld      h, a
 282+ 6C11 7A                           ld      a, d
 283+ 6C12 EE 80                        xor     $80
 284+ 6C14 57                           ld      d, a
 285+ 6C15              //              and     a
 286+ 6C15 ED 52                        sbc     hl, de
 287+ 6C17 ED 62                        sbc     hl, hl
 288+ 6C19 E5                           push    hl
 289+ 6C1A D9                           exx
 290+ 6C1B                              next
 290+ 6C1B DD E9       >                jp      (ix)
 291+ 6C1D
 292+ 6C1D              //  ______________________________________________________________________
 293+ 6C1D              //
 294+ 6C1D              // >            n1 n2 -- n3
 295+ 6C1D              // greater than
 296+ 6C1D                              Colon_Def GREATER, ">", is_normal
 296+ 6C1D             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 296+ 6C1D             >
 296+ 6C1D             >Dict_Ptr        defl    $
 296+ 6C1D             >
 296+ 6C1D             >//              ______________________________________________________________________
 296+ 6C1D             >//              Heap part
 296+ 6C1D             >
 296+ 6C1D             >
 296+ 6C1D             >                org     (Heap_Ptr & $1FFF) + $E000
 296+ E5DD             >
 296+ E5DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 296+ E5DD             >Latest_Definition defl  Heap_Ptr
 296+ E5DD             >
 296+ E5DD             >                // dummy db directives used to calculate length of namec
 296+ E5DD 3E          >                db      ">"
 296+ E5DE             >len_NFA         defl    $ - temp_NFA
 296+ E5DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 296+ E5DD             >
 296+ E5DD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 296+ E5DE 3E          >                db      ">"               // name string in 7-bit ascii, but
 296+ E5DF             >                org     $-1                 // alter last byte of Name just above to set
 296+ E5DE BE          >                db      {b $} | END_BIT     // msb as name end
 296+ E5DF             >
 296+ E5DF D7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 296+ E5E1             >Prev_Ptr        defl    Heap_Ptr
 296+ E5E1             >
 296+ E5E1             >mirror_Ptr      defl    $
 296+ E5E1             >
 296+ E5E1 1F 6C       >                dw      Dict_Ptr + 2        // xt
 296+ E5E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 296+ E5E3             >
 296+ E5E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 296+ E5E3             >
 296+ E5E3             >//              ______________________________________________________________________
 296+ E5E3             >//              Dictionary part
 296+ E5E3             >
 296+ E5E3             >                org     Dict_Ptr
 296+ 6C1D             >
 296+ 6C1D E1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 296+ 6C1F             >
 296+ 6C1F             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 296+ 6C1F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 296+ 6C22             >
 296+ 6C22             >
 296+ 6C22             >                endif           ; ok        // for other definitions it "points" the correct handler
 296+ 6C22             >                // Use of "; ok" to suppress "warning[fwdref]"
 296+ 6C22             >
 296+ 6C22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 297+ 6C22 24 69 0A 6C                  dw      SWAP, LESS              // swap <
 298+ 6C26 52 68                        dw      EXIT                    // ;
 299+ 6C28              //  ______________________________________________________________________
 300+ 6C28              //
 301+ 6C28              // min          n1 n2 -- n3
 302+ 6C28              // minimum between n1 and n2
 303+ 6C28                              Colon_Def MIN, "MIN" , is_normal
 303+ 6C28             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 303+ 6C28             >
 303+ 6C28             >Dict_Ptr        defl    $
 303+ 6C28             >
 303+ 6C28             >//              ______________________________________________________________________
 303+ 6C28             >//              Heap part
 303+ 6C28             >
 303+ 6C28             >
 303+ 6C28             >                org     (Heap_Ptr & $1FFF) + $E000
 303+ E5E3             >
 303+ E5E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ E5E3             >Latest_Definition defl  Heap_Ptr
 303+ E5E3             >
 303+ E5E3             >                // dummy db directives used to calculate length of namec
 303+ E5E3 4D 49 4E    >                db      "MIN"
 303+ E5E6             >len_NFA         defl    $ - temp_NFA
 303+ E5E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ E5E3             >
 303+ E5E3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ E5E4 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 303+ E5E7             >                org     $-1                 // alter last byte of Name just above to set
 303+ E5E6 CE          >                db      {b $} | END_BIT     // msb as name end
 303+ E5E7             >
 303+ E5E7 DD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 303+ E5E9             >Prev_Ptr        defl    Heap_Ptr
 303+ E5E9             >
 303+ E5E9             >mirror_Ptr      defl    $
 303+ E5E9             >
 303+ E5E9 2A 6C       >                dw      Dict_Ptr + 2        // xt
 303+ E5EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 303+ E5EB             >
 303+ E5EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 303+ E5EB             >
 303+ E5EB             >//              ______________________________________________________________________
 303+ E5EB             >//              Dictionary part
 303+ E5EB             >
 303+ E5EB             >                org     Dict_Ptr
 303+ 6C28             >
 303+ 6C28 E9 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 303+ 6C2A             >
 303+ 6C2A             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 6C2A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 6C2D             >
 303+ 6C2D             >
 303+ 6C2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 6C2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 6C2D             >
 303+ 6C2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 6C2D 67 69                        dw      TWO_DUP                 // 2dup
 305+ 6C2F 1F 6C                        dw      GREATER                 // >
 306+ 6C31 F5 63                        dw      ZBRANCH
 307+ 6C33 04 00                        dw      Min_Skip - $   // if
 308+ 6C35 24 69                        dw          SWAP                //      swap
 309+ 6C37              Min_Skip:                                       // endif
 310+ 6C37 10 69                        dw      DROP                    // drop
 311+ 6C39 52 68                        dw      EXIT                    // ;
 312+ 6C3B
 313+ 6C3B              //  ______________________________________________________________________
 314+ 6C3B              //
 315+ 6C3B              // max          n1 n2 -- n3
 316+ 6C3B              // maximum between n1 and n2
 317+ 6C3B                              Colon_Def MAX, "MAX", is_normal
 317+ 6C3B             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 317+ 6C3B             >
 317+ 6C3B             >Dict_Ptr        defl    $
 317+ 6C3B             >
 317+ 6C3B             >//              ______________________________________________________________________
 317+ 6C3B             >//              Heap part
 317+ 6C3B             >
 317+ 6C3B             >
 317+ 6C3B             >                org     (Heap_Ptr & $1FFF) + $E000
 317+ E5EB             >
 317+ E5EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 317+ E5EB             >Latest_Definition defl  Heap_Ptr
 317+ E5EB             >
 317+ E5EB             >                // dummy db directives used to calculate length of namec
 317+ E5EB 4D 41 58    >                db      "MAX"
 317+ E5EE             >len_NFA         defl    $ - temp_NFA
 317+ E5EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 317+ E5EB             >
 317+ E5EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 317+ E5EC 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 317+ E5EF             >                org     $-1                 // alter last byte of Name just above to set
 317+ E5EE D8          >                db      {b $} | END_BIT     // msb as name end
 317+ E5EF             >
 317+ E5EF E3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 317+ E5F1             >Prev_Ptr        defl    Heap_Ptr
 317+ E5F1             >
 317+ E5F1             >mirror_Ptr      defl    $
 317+ E5F1             >
 317+ E5F1 3D 6C       >                dw      Dict_Ptr + 2        // xt
 317+ E5F3             >Heap_Ptr        defl    $ - $E000           // save current HP
 317+ E5F3             >
 317+ E5F3             >Current_HP      defl  $ - $E000             // used to set HP once!
 317+ E5F3             >
 317+ E5F3             >//              ______________________________________________________________________
 317+ E5F3             >//              Dictionary part
 317+ E5F3             >
 317+ E5F3             >                org     Dict_Ptr
 317+ 6C3B             >
 317+ 6C3B F1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 317+ 6C3D             >
 317+ 6C3D             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 317+ 6C3D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 317+ 6C40             >
 317+ 6C40             >
 317+ 6C40             >                endif           ; ok        // for other definitions it "points" the correct handler
 317+ 6C40             >                // Use of "; ok" to suppress "warning[fwdref]"
 317+ 6C40             >
 317+ 6C40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 318+ 6C40 67 69                        dw      TWO_DUP                 // 2dup
 319+ 6C42 0A 6C                        dw      LESS                    // <
 320+ 6C44 F5 63                        dw      ZBRANCH
 321+ 6C46 04 00                        dw      Max_Skip - $   // if
 322+ 6C48 24 69                        dw          SWAP                //      swap
 323+ 6C4A              Max_Skip:                                       // endif
 324+ 6C4A 10 69                        dw      DROP                    // drop
 325+ 6C4C 52 68                        dw      EXIT                    // ;
 326+ 6C4E
 327+ 6C4E              //  ______________________________________________________________________
 328+ 6C4E              //
 329+ 6C4E              // ?dup         n -- 0 | n n
 330+ 6C4E              // duplicate if not zero
 331+ 6C4E                              New_Def QDUP, "?DUP", is_code, is_normal
 331+ 6C4E             >
 331+ 6C4E             >Dict_Ptr        defl    $
 331+ 6C4E             >
 331+ 6C4E             >//              ______________________________________________________________________
 331+ 6C4E             >//              Heap part
 331+ 6C4E             >
 331+ 6C4E             >
 331+ 6C4E             >                org     (Heap_Ptr & $1FFF) + $E000
 331+ E5F3             >
 331+ E5F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ E5F3             >Latest_Definition defl  Heap_Ptr
 331+ E5F3             >
 331+ E5F3             >                // dummy db directives used to calculate length of namec
 331+ E5F3 3F 44 55 50 >                db      "?DUP"
 331+ E5F7             >len_NFA         defl    $ - temp_NFA
 331+ E5F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ E5F3             >
 331+ E5F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ E5F4 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 331+ E5F8             >                org     $-1                 // alter last byte of Name just above to set
 331+ E5F7 D0          >                db      {b $} | END_BIT     // msb as name end
 331+ E5F8             >
 331+ E5F8 EB 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 331+ E5FA             >Prev_Ptr        defl    Heap_Ptr
 331+ E5FA             >
 331+ E5FA             >mirror_Ptr      defl    $
 331+ E5FA             >
 331+ E5FA 50 6C       >                dw      Dict_Ptr + 2        // xt
 331+ E5FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 331+ E5FC             >
 331+ E5FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 331+ E5FC             >
 331+ E5FC             >//              ______________________________________________________________________
 331+ E5FC             >//              Dictionary part
 331+ E5FC             >
 331+ E5FC             >                org     Dict_Ptr
 331+ 6C4E             >
 331+ 6C4E FA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 331+ 6C50             >
 331+ 6C50             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 6C50 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 331+ 6C50 ~           >
 331+ 6C50 ~           >
 331+ 6C50             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 6C50             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 6C50             >
 331+ 6C50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 6C50              QDup_Ptr:
 333+ 6C50 E1                           pop     hl
 334+ 6C51 7C                           ld      a, h
 335+ 6C52 B5                           or      l
 336+ 6C53 28 01                        jr      z, QDup_Skip
 337+ 6C55 E5                               push    hl
 338+ 6C56              QDup_Skip:
 339+ 6C56                              psh1
 339+ 6C56 E5          >                push    hl
 339+ 6C57 DD E9       >                jp      (ix)
 340+ 6C59
 341+ 6C59              //  ______________________________________________________________________
 342+ 6C59              //
 343+ 6C59              // -dup         n -- 0 | n n
 344+ 6C59              // duplicate if not zero
 345+ 6C59                              New_Def LDUP, "-DUP", is_code, is_normal
 345+ 6C59             >
 345+ 6C59             >Dict_Ptr        defl    $
 345+ 6C59             >
 345+ 6C59             >//              ______________________________________________________________________
 345+ 6C59             >//              Heap part
 345+ 6C59             >
 345+ 6C59             >
 345+ 6C59             >                org     (Heap_Ptr & $1FFF) + $E000
 345+ E5FC             >
 345+ E5FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 345+ E5FC             >Latest_Definition defl  Heap_Ptr
 345+ E5FC             >
 345+ E5FC             >                // dummy db directives used to calculate length of namec
 345+ E5FC 2D 44 55 50 >                db      "-DUP"
 345+ E600             >len_NFA         defl    $ - temp_NFA
 345+ E600             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 345+ E5FC             >
 345+ E5FC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 345+ E5FD 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 345+ E601             >                org     $-1                 // alter last byte of Name just above to set
 345+ E600 D0          >                db      {b $} | END_BIT     // msb as name end
 345+ E601             >
 345+ E601 F3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 345+ E603             >Prev_Ptr        defl    Heap_Ptr
 345+ E603             >
 345+ E603             >mirror_Ptr      defl    $
 345+ E603             >
 345+ E603 5B 6C       >                dw      Dict_Ptr + 2        // xt
 345+ E605             >Heap_Ptr        defl    $ - $E000           // save current HP
 345+ E605             >
 345+ E605             >Current_HP      defl  $ - $E000             // used to set HP once!
 345+ E605             >
 345+ E605             >//              ______________________________________________________________________
 345+ E605             >//              Dictionary part
 345+ E605             >
 345+ E605             >                org     Dict_Ptr
 345+ 6C59             >
 345+ 6C59 03 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 345+ 6C5B             >
 345+ 6C5B             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 345+ 6C5B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 345+ 6C5B ~           >
 345+ 6C5B ~           >
 345+ 6C5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 345+ 6C5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 345+ 6C5B             >
 345+ 6C5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 346+ 6C5B C3 50 6C                     jp      QDup_Ptr
 347+ 6C5E
 348+ 6C5E              //  ______________________________________________________________________
 349+ 6C5E              //
 350+ 6C5E              // emit         c --
 351+ 6C5E                              Colon_Def EMIT, "EMIT", is_normal
 351+ 6C5E             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 351+ 6C5E             >
 351+ 6C5E             >Dict_Ptr        defl    $
 351+ 6C5E             >
 351+ 6C5E             >//              ______________________________________________________________________
 351+ 6C5E             >//              Heap part
 351+ 6C5E             >
 351+ 6C5E             >
 351+ 6C5E             >                org     (Heap_Ptr & $1FFF) + $E000
 351+ E605             >
 351+ E605             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 351+ E605             >Latest_Definition defl  Heap_Ptr
 351+ E605             >
 351+ E605             >                // dummy db directives used to calculate length of namec
 351+ E605 45 4D 49 54 >                db      "EMIT"
 351+ E609             >len_NFA         defl    $ - temp_NFA
 351+ E609             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 351+ E605             >
 351+ E605 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 351+ E606 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 351+ E60A             >                org     $-1                 // alter last byte of Name just above to set
 351+ E609 D4          >                db      {b $} | END_BIT     // msb as name end
 351+ E60A             >
 351+ E60A FC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 351+ E60C             >Prev_Ptr        defl    Heap_Ptr
 351+ E60C             >
 351+ E60C             >mirror_Ptr      defl    $
 351+ E60C             >
 351+ E60C 60 6C       >                dw      Dict_Ptr + 2        // xt
 351+ E60E             >Heap_Ptr        defl    $ - $E000           // save current HP
 351+ E60E             >
 351+ E60E             >Current_HP      defl  $ - $E000             // used to set HP once!
 351+ E60E             >
 351+ E60E             >//              ______________________________________________________________________
 351+ E60E             >//              Dictionary part
 351+ E60E             >
 351+ E60E             >                org     Dict_Ptr
 351+ 6C5E             >
 351+ 6C5E 0C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 351+ 6C60             >
 351+ 6C60             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 351+ 6C60 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 351+ 6C63             >
 351+ 6C63             >
 351+ 6C63             >                endif           ; ok        // for other definitions it "points" the correct handler
 351+ 6C63             >                // Use of "; ok" to suppress "warning[fwdref]"
 351+ 6C63             >
 351+ 6C63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 352+ 6C63 D4 65                        dw      C_EMIT                      // (?emit)
 353+ 6C65 50 6C                        dw      QDUP                        // ?dup
 354+ 6C67                                                                  // if
 355+ 6C67 F5 63                        dw      ZBRANCH
 356+ 6C69 0A 00                        dw      Emit_Skip - $
 357+ 6C6B A2 65                        dw          EMITC                   //      emitc
 358+ 6C6D 88 6A                        dw          ONE                     //      1
 359+ 6C6F 2E 6B 71 69                  dw          OUT, PLUSSTORE        //      out +!
 360+ 6C73              Emit_Skip:                                          // endif
 361+ 6C73 52 68                        dw      EXIT                        // ;
 362+ 6C75
 363+ 6C75              //  ______________________________________________________________________
 364+ 6C75              //
 365+ 6C75              // space        --
 366+ 6C75                              Colon_Def SPACE, "SPACE", is_normal
 366+ 6C75             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 366+ 6C75             >
 366+ 6C75             >Dict_Ptr        defl    $
 366+ 6C75             >
 366+ 6C75             >//              ______________________________________________________________________
 366+ 6C75             >//              Heap part
 366+ 6C75             >
 366+ 6C75             >
 366+ 6C75             >                org     (Heap_Ptr & $1FFF) + $E000
 366+ E60E             >
 366+ E60E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 366+ E60E             >Latest_Definition defl  Heap_Ptr
 366+ E60E             >
 366+ E60E             >                // dummy db directives used to calculate length of namec
 366+ E60E 53 50 41 43 >                db      "SPACE"
 366+ E612 45          >
 366+ E613             >len_NFA         defl    $ - temp_NFA
 366+ E613             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 366+ E60E             >
 366+ E60E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 366+ E60F 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 366+ E613 45          >
 366+ E614             >                org     $-1                 // alter last byte of Name just above to set
 366+ E613 C5          >                db      {b $} | END_BIT     // msb as name end
 366+ E614             >
 366+ E614 05 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 366+ E616             >Prev_Ptr        defl    Heap_Ptr
 366+ E616             >
 366+ E616             >mirror_Ptr      defl    $
 366+ E616             >
 366+ E616 77 6C       >                dw      Dict_Ptr + 2        // xt
 366+ E618             >Heap_Ptr        defl    $ - $E000           // save current HP
 366+ E618             >
 366+ E618             >Current_HP      defl  $ - $E000             // used to set HP once!
 366+ E618             >
 366+ E618             >//              ______________________________________________________________________
 366+ E618             >//              Dictionary part
 366+ E618             >
 366+ E618             >                org     Dict_Ptr
 366+ 6C75             >
 366+ 6C75 16 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 366+ 6C77             >
 366+ 6C77             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 366+ 6C77 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 366+ 6C7A             >
 366+ 6C7A             >
 366+ 6C7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 366+ 6C7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 366+ 6C7A             >
 366+ 6C7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 367+ 6C7A A4 6A 60 6C                  dw      BL, EMIT                // bl emit
 368+ 6C7E 52 68                        dw      EXIT                    // ;
 369+ 6C80
 370+ 6C80              //  ______________________________________________________________________
 371+ 6C80              //
 372+ 6C80              // traverse     a n -- a
 373+ 6C80              // A dictionary entry is structured as follows
 374+ 6C80              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 375+ 6C80              //      +1   word name, last character is toggled with $80
 376+ 6C80              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 377+ 6C80              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 378+ 6C80              // PFA: +6+n "is_code", definitions have no PFA. // +5
 379+ 6C80              //
 380+ 6C80                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 380+ 6C80             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 380+ 6C80             >
 380+ 6C80             >Dict_Ptr        defl    $
 380+ 6C80             >
 380+ 6C80             >//              ______________________________________________________________________
 380+ 6C80             >//              Heap part
 380+ 6C80             >
 380+ 6C80             >
 380+ 6C80             >                org     (Heap_Ptr & $1FFF) + $E000
 380+ E618             >
 380+ E618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ E618             >Latest_Definition defl  Heap_Ptr
 380+ E618             >
 380+ E618             >                // dummy db directives used to calculate length of namec
 380+ E618 54 52 41 56 >                db      "TRAVERSE"
 380+ E61C 45 52 53 45 >
 380+ E620             >len_NFA         defl    $ - temp_NFA
 380+ E620             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ E618             >
 380+ E618 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ E619 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 380+ E61D 45 52 53 45 >
 380+ E621             >                org     $-1                 // alter last byte of Name just above to set
 380+ E620 C5          >                db      {b $} | END_BIT     // msb as name end
 380+ E621             >
 380+ E621 0E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 380+ E623             >Prev_Ptr        defl    Heap_Ptr
 380+ E623             >
 380+ E623             >mirror_Ptr      defl    $
 380+ E623             >
 380+ E623 82 6C       >                dw      Dict_Ptr + 2        // xt
 380+ E625             >Heap_Ptr        defl    $ - $E000           // save current HP
 380+ E625             >
 380+ E625             >Current_HP      defl  $ - $E000             // used to set HP once!
 380+ E625             >
 380+ E625             >//              ______________________________________________________________________
 380+ E625             >//              Dictionary part
 380+ E625             >
 380+ E625             >                org     Dict_Ptr
 380+ 6C80             >
 380+ 6C80 23 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 380+ 6C82             >
 380+ 6C82             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 6C82 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 6C85             >
 380+ 6C85             >
 380+ 6C85             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 6C85             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 6C85             >
 380+ 6C85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 6C85 24 69                        dw      SWAP                    // swap
 382+ 6C87              Traverse_Begin:                                 // begin
 383+ 6C87 07 69 A5 68                  dw          OVER, PLUS          //      over +
 384+ 6C8B A3 63 7F 00                  dw          LIT, 127            //      127
 385+ 6C8F 07 69 9E 69                  dw          OVER, CFETCH        //      over @
 386+ 6C93 0A 6C                        dw          LESS                //      <
 387+ 6C95                                                              // until
 388+ 6C95 F5 63                        dw      ZBRANCH
 389+ 6C97 F0 FF                        dw      Traverse_Begin - $
 390+ 6C99 15 69                        dw      NIP                     //  nip
 391+ 6C9B 52 68                        dw      EXIT                    //  ;
 392+ 6C9D
 393+ 6C9D              //  ______________________________________________________________________
 394+ 6C9D              //
 395+ 6C9D              // mmu7@        -- n
 396+ 6C9D              // query current page in MMU7 8K-RAM : 0 and 223
 397+ 6C9D
 398+ 6C9D                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 398+ 6C9D             >
 398+ 6C9D             >Dict_Ptr        defl    $
 398+ 6C9D             >
 398+ 6C9D             >//              ______________________________________________________________________
 398+ 6C9D             >//              Heap part
 398+ 6C9D             >
 398+ 6C9D             >
 398+ 6C9D             >                org     (Heap_Ptr & $1FFF) + $E000
 398+ E625             >
 398+ E625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 398+ E625             >Latest_Definition defl  Heap_Ptr
 398+ E625             >
 398+ E625             >                // dummy db directives used to calculate length of namec
 398+ E625 4D 4D 55 37 >                db      "MMU7@"
 398+ E629 40          >
 398+ E62A             >len_NFA         defl    $ - temp_NFA
 398+ E62A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 398+ E625             >
 398+ E625 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 398+ E626 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 398+ E62A 40          >
 398+ E62B             >                org     $-1                 // alter last byte of Name just above to set
 398+ E62A C0          >                db      {b $} | END_BIT     // msb as name end
 398+ E62B             >
 398+ E62B 18 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 398+ E62D             >Prev_Ptr        defl    Heap_Ptr
 398+ E62D             >
 398+ E62D             >mirror_Ptr      defl    $
 398+ E62D             >
 398+ E62D 9F 6C       >                dw      Dict_Ptr + 2        // xt
 398+ E62F             >Heap_Ptr        defl    $ - $E000           // save current HP
 398+ E62F             >
 398+ E62F             >Current_HP      defl  $ - $E000             // used to set HP once!
 398+ E62F             >
 398+ E62F             >//              ______________________________________________________________________
 398+ E62F             >//              Dictionary part
 398+ E62F             >
 398+ E62F             >                org     Dict_Ptr
 398+ 6C9D             >
 398+ 6C9D 2D 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 398+ 6C9F             >
 398+ 6C9F             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 398+ 6C9F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 398+ 6C9F ~           >
 398+ 6C9F ~           >
 398+ 6C9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 398+ 6C9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 398+ 6C9F             >
 398+ 6C9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 399+ 6C9F D9                           exx
 400+ 6CA0 CD 9F 64                     call    MMU7_read
 401+ 6CA3 D9                           exx
 402+ 6CA4 6F                           ld      l, a
 403+ 6CA5 26 00                        ld      h, 0
 404+ 6CA7 E5                           push    hl
 405+ 6CA8                              next
 405+ 6CA8 DD E9       >                jp      (ix)
 406+ 6CAA
 407+ 6CAA              //  ______________________________________________________________________
 408+ 6CAA              //
 409+ 6CAA              // mmu7!        n --
 410+ 6CAA              // set MMU7 8K-RAM page to n given between 0 and 223
 411+ 6CAA              // optimized version that uses NEXTREG n,A Z80n op-code.
 412+ 6CAA
 413+ 6CAA                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 413+ 6CAA             >
 413+ 6CAA             >Dict_Ptr        defl    $
 413+ 6CAA             >
 413+ 6CAA             >//              ______________________________________________________________________
 413+ 6CAA             >//              Heap part
 413+ 6CAA             >
 413+ 6CAA             >
 413+ 6CAA             >                org     (Heap_Ptr & $1FFF) + $E000
 413+ E62F             >
 413+ E62F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 413+ E62F             >Latest_Definition defl  Heap_Ptr
 413+ E62F             >
 413+ E62F             >                // dummy db directives used to calculate length of namec
 413+ E62F 4D 4D 55 37 >                db      "MMU7!"
 413+ E633 21          >
 413+ E634             >len_NFA         defl    $ - temp_NFA
 413+ E634             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 413+ E62F             >
 413+ E62F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 413+ E630 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 413+ E634 21          >
 413+ E635             >                org     $-1                 // alter last byte of Name just above to set
 413+ E634 A1          >                db      {b $} | END_BIT     // msb as name end
 413+ E635             >
 413+ E635 25 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 413+ E637             >Prev_Ptr        defl    Heap_Ptr
 413+ E637             >
 413+ E637             >mirror_Ptr      defl    $
 413+ E637             >
 413+ E637 AC 6C       >                dw      Dict_Ptr + 2        // xt
 413+ E639             >Heap_Ptr        defl    $ - $E000           // save current HP
 413+ E639             >
 413+ E639             >Current_HP      defl  $ - $E000             // used to set HP once!
 413+ E639             >
 413+ E639             >//              ______________________________________________________________________
 413+ E639             >//              Dictionary part
 413+ E639             >
 413+ E639             >                org     Dict_Ptr
 413+ 6CAA             >
 413+ 6CAA 37 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 413+ 6CAC             >
 413+ 6CAC             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 413+ 6CAC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 413+ 6CAC ~           >
 413+ 6CAC ~           >
 413+ 6CAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 413+ 6CAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 413+ 6CAC             >
 413+ 6CAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 414+ 6CAC E1                           pop     hl
 415+ 6CAD 7D                           ld      a, l
 416+ 6CAE ED 92 57                     nextreg 87, a
 417+ 6CB1
 418+ 6CB1                              next
 418+ 6CB1 DD E9       >                jp      (ix)
 419+ 6CB3
 420+ 6CB3              //  ______________________________________________________________________
 421+ 6CB3              //
 422+ 6CB3              // >far         ha -- a n
 423+ 6CB3              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 424+ 6CB3              // take lower bits of H and L as an offset from E000h
 425+ 6CB3              // then return address  a  between E000h-FFFFh
 426+ 6CB3              // and page number n  between 64-71 (40h-47h)
 427+ 6CB3              // For example, in hex:
 428+ 6CB3              //   0000 >FAR  gives  40.E000
 429+ 6CB3              //   1FFF >FAR  gives  40.FFFF
 430+ 6CB3              //   2000 >FAR  gives  41.E000
 431+ 6CB3              //   3FFF >FAR  gives  41.FFFF
 432+ 6CB3              //   EFFF >FAR  gives  47.EFFF
 433+ 6CB3              //   FFFF >FAR  gives  47.FFFF
 434+ 6CB3                              New_Def TO_FAR, ">FAR", is_code, is_normal
 434+ 6CB3             >
 434+ 6CB3             >Dict_Ptr        defl    $
 434+ 6CB3             >
 434+ 6CB3             >//              ______________________________________________________________________
 434+ 6CB3             >//              Heap part
 434+ 6CB3             >
 434+ 6CB3             >
 434+ 6CB3             >                org     (Heap_Ptr & $1FFF) + $E000
 434+ E639             >
 434+ E639             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 434+ E639             >Latest_Definition defl  Heap_Ptr
 434+ E639             >
 434+ E639             >                // dummy db directives used to calculate length of namec
 434+ E639 3E 46 41 52 >                db      ">FAR"
 434+ E63D             >len_NFA         defl    $ - temp_NFA
 434+ E63D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 434+ E639             >
 434+ E639 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 434+ E63A 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 434+ E63E             >                org     $-1                 // alter last byte of Name just above to set
 434+ E63D D2          >                db      {b $} | END_BIT     // msb as name end
 434+ E63E             >
 434+ E63E 2F 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 434+ E640             >Prev_Ptr        defl    Heap_Ptr
 434+ E640             >
 434+ E640             >mirror_Ptr      defl    $
 434+ E640             >
 434+ E640 B5 6C       >                dw      Dict_Ptr + 2        // xt
 434+ E642             >Heap_Ptr        defl    $ - $E000           // save current HP
 434+ E642             >
 434+ E642             >Current_HP      defl  $ - $E000             // used to set HP once!
 434+ E642             >
 434+ E642             >//              ______________________________________________________________________
 434+ E642             >//              Dictionary part
 434+ E642             >
 434+ E642             >                org     Dict_Ptr
 434+ 6CB3             >
 434+ 6CB3 40 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 434+ 6CB5             >
 434+ 6CB5             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 434+ 6CB5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 434+ 6CB5 ~           >
 434+ 6CB5 ~           >
 434+ 6CB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 434+ 6CB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 434+ 6CB5             >
 434+ 6CB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 435+ 6CB5 E1                           pop     hl
 436+ 6CB6 CD AA 64                     call    TO_FAR_rout
 437+ 6CB9 E5                           push    hl
 438+ 6CBA 6F                           ld      l, a
 439+ 6CBB 26 00                        ld      h, 0
 440+ 6CBD E5                           push    hl
 441+ 6CBE                              next
 441+ 6CBE DD E9       >                jp      (ix)
 442+ 6CC0
 443+ 6CC0              //  ______________________________________________________________________
 444+ 6CC0              //
 445+ 6CC0              // <far         a n  -- ha
 446+ 6CC0              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 447+ 6CC0              // reverse of >FAR: encodes a FAR address compressing
 448+ 6CC0              // to bits 765 of H, lower bits of HL address offset from E000h
 449+ 6CC0                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 449+ 6CC0             >
 449+ 6CC0             >Dict_Ptr        defl    $
 449+ 6CC0             >
 449+ 6CC0             >//              ______________________________________________________________________
 449+ 6CC0             >//              Heap part
 449+ 6CC0             >
 449+ 6CC0             >
 449+ 6CC0             >                org     (Heap_Ptr & $1FFF) + $E000
 449+ E642             >
 449+ E642             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 449+ E642             >Latest_Definition defl  Heap_Ptr
 449+ E642             >
 449+ E642             >                // dummy db directives used to calculate length of namec
 449+ E642 3C 46 41 52 >                db      "<FAR"
 449+ E646             >len_NFA         defl    $ - temp_NFA
 449+ E646             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 449+ E642             >
 449+ E642 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 449+ E643 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 449+ E647             >                org     $-1                 // alter last byte of Name just above to set
 449+ E646 D2          >                db      {b $} | END_BIT     // msb as name end
 449+ E647             >
 449+ E647 39 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 449+ E649             >Prev_Ptr        defl    Heap_Ptr
 449+ E649             >
 449+ E649             >mirror_Ptr      defl    $
 449+ E649             >
 449+ E649 C2 6C       >                dw      Dict_Ptr + 2        // xt
 449+ E64B             >Heap_Ptr        defl    $ - $E000           // save current HP
 449+ E64B             >
 449+ E64B             >Current_HP      defl  $ - $E000             // used to set HP once!
 449+ E64B             >
 449+ E64B             >//              ______________________________________________________________________
 449+ E64B             >//              Dictionary part
 449+ E64B             >
 449+ E64B             >                org     Dict_Ptr
 449+ 6CC0             >
 449+ 6CC0 49 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 449+ 6CC2             >
 449+ 6CC2             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 449+ 6CC2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 449+ 6CC2 ~           >
 449+ 6CC2 ~           >
 449+ 6CC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 449+ 6CC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 449+ 6CC2             >
 449+ 6CC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 450+ 6CC2 E1                           pop     hl                  // page number in e
 451+ 6CC3 7D                           ld      a, l
 452+ 6CC4 E6 07                        and     07
 453+ 6CC6 0F                           rrca
 454+ 6CC7 0F                           rrca
 455+ 6CC8 0F                           rrca
 456+ 6CC9 08                           ex      af, af
 457+ 6CCA E1                           pop     hl                  // address in hl
 458+ 6CCB 7C                           ld      a, h
 459+ 6CCC E6 1F                        and     $1F
 460+ 6CCE 67                           ld      h, a
 461+ 6CCF 08                           ex      af, af
 462+ 6CD0 B4                           or      h
 463+ 6CD1 67                           ld      h, a
 464+ 6CD2                              psh1
 464+ 6CD2 E5          >                push    hl
 464+ 6CD3 DD E9       >                jp      (ix)
 465+ 6CD5
 466+ 6CD5              //  ______________________________________________________________________
 467+ 6CD5              //
 468+ 6CD5              // ?mmu7        a -- f
 469+ 6CD5              // query current page in MMU7 8K-RAM : 0 and 223
 470+ 6CD5                              Colon_Def QMMU7, "?MMU7", is_normal
 470+ 6CD5             >                New_Def  QMMU7, "?MMU7", Enter_Ptr, is_normal ; ok
 470+ 6CD5             >
 470+ 6CD5             >Dict_Ptr        defl    $
 470+ 6CD5             >
 470+ 6CD5             >//              ______________________________________________________________________
 470+ 6CD5             >//              Heap part
 470+ 6CD5             >
 470+ 6CD5             >
 470+ 6CD5             >                org     (Heap_Ptr & $1FFF) + $E000
 470+ E64B             >
 470+ E64B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 470+ E64B             >Latest_Definition defl  Heap_Ptr
 470+ E64B             >
 470+ E64B             >                // dummy db directives used to calculate length of namec
 470+ E64B 3F 4D 4D 55 >                db      "?MMU7"
 470+ E64F 37          >
 470+ E650             >len_NFA         defl    $ - temp_NFA
 470+ E650             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 470+ E64B             >
 470+ E64B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 470+ E64C 3F 4D 4D 55 >                db      "?MMU7"               // name string in 7-bit ascii, but
 470+ E650 37          >
 470+ E651             >                org     $-1                 // alter last byte of Name just above to set
 470+ E650 B7          >                db      {b $} | END_BIT     // msb as name end
 470+ E651             >
 470+ E651 42 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 470+ E653             >Prev_Ptr        defl    Heap_Ptr
 470+ E653             >
 470+ E653             >mirror_Ptr      defl    $
 470+ E653             >
 470+ E653 D7 6C       >                dw      Dict_Ptr + 2        // xt
 470+ E655             >Heap_Ptr        defl    $ - $E000           // save current HP
 470+ E655             >
 470+ E655             >Current_HP      defl  $ - $E000             // used to set HP once!
 470+ E655             >
 470+ E655             >//              ______________________________________________________________________
 470+ E655             >//              Dictionary part
 470+ E655             >
 470+ E655             >                org     Dict_Ptr
 470+ 6CD5             >
 470+ 6CD5 53 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 470+ 6CD7             >
 470+ 6CD7             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 470+ 6CD7 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 470+ 6CDA             >
 470+ 6CDA             >
 470+ 6CDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 470+ 6CDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 470+ 6CDA             >
 470+ 6CDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 471+ 6CDA 2B 69                        dw      DUP
 472+ 6CDC A3 63 00 E0                  dw      LIT, $E000
 473+ 6CE0 FC 6B                        dw      ULESS
 474+ 6CE2 85 68                        dw      NOT_OP
 475+ 6CE4 52 68                        dw      EXIT
 476+ 6CE6
 477+ 6CE6              //  ______________________________________________________________________
 478+ 6CE6              //
 479+ 6CE6              // far          hp -- ha
 480+ 6CE6              // query current page in MMU7 8K-RAM : 0 and 223
 481+ 6CE6                              Colon_Def FAR, "FAR", is_normal
 481+ 6CE6             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 481+ 6CE6             >
 481+ 6CE6             >Dict_Ptr        defl    $
 481+ 6CE6             >
 481+ 6CE6             >//              ______________________________________________________________________
 481+ 6CE6             >//              Heap part
 481+ 6CE6             >
 481+ 6CE6             >
 481+ 6CE6             >                org     (Heap_Ptr & $1FFF) + $E000
 481+ E655             >
 481+ E655             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ E655             >Latest_Definition defl  Heap_Ptr
 481+ E655             >
 481+ E655             >                // dummy db directives used to calculate length of namec
 481+ E655 46 41 52    >                db      "FAR"
 481+ E658             >len_NFA         defl    $ - temp_NFA
 481+ E658             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ E655             >
 481+ E655 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ E656 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 481+ E659             >                org     $-1                 // alter last byte of Name just above to set
 481+ E658 D2          >                db      {b $} | END_BIT     // msb as name end
 481+ E659             >
 481+ E659 4B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 481+ E65B             >Prev_Ptr        defl    Heap_Ptr
 481+ E65B             >
 481+ E65B             >mirror_Ptr      defl    $
 481+ E65B             >
 481+ E65B E8 6C       >                dw      Dict_Ptr + 2        // xt
 481+ E65D             >Heap_Ptr        defl    $ - $E000           // save current HP
 481+ E65D             >
 481+ E65D             >Current_HP      defl  $ - $E000             // used to set HP once!
 481+ E65D             >
 481+ E65D             >//              ______________________________________________________________________
 481+ E65D             >//              Dictionary part
 481+ E65D             >
 481+ E65D             >                org     Dict_Ptr
 481+ 6CE6             >
 481+ 6CE6 5B 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 481+ 6CE8             >
 481+ 6CE8             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 6CE8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 6CEB             >
 481+ 6CEB             >
 481+ 6CEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 6CEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 6CEB             >
 481+ 6CEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 6CEB B5 6C                        dw      TO_FAR
 483+ 6CED AC 6C                        dw      MMU7_STORE
 484+ 6CEF 52 68                        dw      EXIT
 485+ 6CF1
 486+ 6CF1              //  ______________________________________________________________________
 487+ 6CF1              //
 488+ 6CF1              // ?heapp       n -- n f
 489+ 6CF1              // query current page in MMU7 8K-RAM : 0 and 223
 490+ 6CF1                              Colon_Def QHEAPP, "?HEAPP", is_normal
 490+ 6CF1             >                New_Def  QHEAPP, "?HEAPP", Enter_Ptr, is_normal ; ok
 490+ 6CF1             >
 490+ 6CF1             >Dict_Ptr        defl    $
 490+ 6CF1             >
 490+ 6CF1             >//              ______________________________________________________________________
 490+ 6CF1             >//              Heap part
 490+ 6CF1             >
 490+ 6CF1             >
 490+ 6CF1             >                org     (Heap_Ptr & $1FFF) + $E000
 490+ E65D             >
 490+ E65D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ E65D             >Latest_Definition defl  Heap_Ptr
 490+ E65D             >
 490+ E65D             >                // dummy db directives used to calculate length of namec
 490+ E65D 3F 48 45 41 >                db      "?HEAPP"
 490+ E661 50 50       >
 490+ E663             >len_NFA         defl    $ - temp_NFA
 490+ E663             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ E65D             >
 490+ E65D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ E65E 3F 48 45 41 >                db      "?HEAPP"               // name string in 7-bit ascii, but
 490+ E662 50 50       >
 490+ E664             >                org     $-1                 // alter last byte of Name just above to set
 490+ E663 D0          >                db      {b $} | END_BIT     // msb as name end
 490+ E664             >
 490+ E664 55 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 490+ E666             >Prev_Ptr        defl    Heap_Ptr
 490+ E666             >
 490+ E666             >mirror_Ptr      defl    $
 490+ E666             >
 490+ E666 F3 6C       >                dw      Dict_Ptr + 2        // xt
 490+ E668             >Heap_Ptr        defl    $ - $E000           // save current HP
 490+ E668             >
 490+ E668             >Current_HP      defl  $ - $E000             // used to set HP once!
 490+ E668             >
 490+ E668             >//              ______________________________________________________________________
 490+ E668             >//              Dictionary part
 490+ E668             >
 490+ E668             >                org     Dict_Ptr
 490+ 6CF1             >
 490+ 6CF1 66 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 490+ 6CF3             >
 490+ 6CF3             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 6CF3 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 6CF6             >
 490+ 6CF6             >
 490+ 6CF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 6CF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 6CF6             >
 490+ 6CF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 6CF6 2B 69                        dw      DUP
 492+ 6CF8 F5 63                        dw      ZBRANCH
 493+ 6CFA 08 00                        dw      QHeap_Skip - $
 494+ 6CFC A3 63 00 60                  dw          LIT, $6000
 495+ 6D00 FC 6B                        dw          ULESS
 496+ 6D02              QHeap_Skip:                                          // endif
 497+ 6D02 52 68                        dw      EXIT                        // ;
 498+ 6D04
 499+ 6D04              //  ______________________________________________________________________
 500+ 6D04              //
 501+ 6D04              // ?>heap       n1 -- n2
 502+ 6D04              // query current page in MMU7 8K-RAM : 0 and 223
 503+ 6D04                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 503+ 6D04             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 503+ 6D04             >
 503+ 6D04             >Dict_Ptr        defl    $
 503+ 6D04             >
 503+ 6D04             >//              ______________________________________________________________________
 503+ 6D04             >//              Heap part
 503+ 6D04             >
 503+ 6D04             >
 503+ 6D04             >                org     (Heap_Ptr & $1FFF) + $E000
 503+ E668             >
 503+ E668             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ E668             >Latest_Definition defl  Heap_Ptr
 503+ E668             >
 503+ E668             >                // dummy db directives used to calculate length of namec
 503+ E668 3F 3E 48 45 >                db      "?>HEAP"
 503+ E66C 41 50       >
 503+ E66E             >len_NFA         defl    $ - temp_NFA
 503+ E66E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ E668             >
 503+ E668 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ E669 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 503+ E66D 41 50       >
 503+ E66F             >                org     $-1                 // alter last byte of Name just above to set
 503+ E66E D0          >                db      {b $} | END_BIT     // msb as name end
 503+ E66F             >
 503+ E66F 5D 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 503+ E671             >Prev_Ptr        defl    Heap_Ptr
 503+ E671             >
 503+ E671             >mirror_Ptr      defl    $
 503+ E671             >
 503+ E671 06 6D       >                dw      Dict_Ptr + 2        // xt
 503+ E673             >Heap_Ptr        defl    $ - $E000           // save current HP
 503+ E673             >
 503+ E673             >Current_HP      defl  $ - $E000             // used to set HP once!
 503+ E673             >
 503+ E673             >//              ______________________________________________________________________
 503+ E673             >//              Dictionary part
 503+ E673             >
 503+ E673             >                org     Dict_Ptr
 503+ 6D04             >
 503+ 6D04 71 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 503+ 6D06             >
 503+ 6D06             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 6D06 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 6D09             >
 503+ 6D09             >
 503+ 6D09             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 6D09             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 6D09             >
 503+ 6D09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 6D09 2B 69                        dw      DUP
 505+ 6D0B F3 6C                        dw      QHEAPP
 506+ 6D0D F5 63                        dw      ZBRANCH
 507+ 6D0F 04 00                        dw      Q2Heap_Skip - $
 508+ 6D11 E8 6C                        dw          FAR
 509+ 6D13              Q2Heap_Skip:                                          // endif
 510+ 6D13 52 68                        dw      EXIT                        // ;
 511+ 6D15
 512+ 6D15              //  ______________________________________________________________________
 513+ 6D15              //
 514+ 6D15              // hp_fetch     -- a
 515+ 6D15                              Colon_Def HP_FETCH, "HP@", is_normal
 515+ 6D15             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 515+ 6D15             >
 515+ 6D15             >Dict_Ptr        defl    $
 515+ 6D15             >
 515+ 6D15             >//              ______________________________________________________________________
 515+ 6D15             >//              Heap part
 515+ 6D15             >
 515+ 6D15             >
 515+ 6D15             >                org     (Heap_Ptr & $1FFF) + $E000
 515+ E673             >
 515+ E673             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ E673             >Latest_Definition defl  Heap_Ptr
 515+ E673             >
 515+ E673             >                // dummy db directives used to calculate length of namec
 515+ E673 48 50 40    >                db      "HP@"
 515+ E676             >len_NFA         defl    $ - temp_NFA
 515+ E676             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ E673             >
 515+ E673 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ E674 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 515+ E677             >                org     $-1                 // alter last byte of Name just above to set
 515+ E676 C0          >                db      {b $} | END_BIT     // msb as name end
 515+ E677             >
 515+ E677 68 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 515+ E679             >Prev_Ptr        defl    Heap_Ptr
 515+ E679             >
 515+ E679             >mirror_Ptr      defl    $
 515+ E679             >
 515+ E679 17 6D       >                dw      Dict_Ptr + 2        // xt
 515+ E67B             >Heap_Ptr        defl    $ - $E000           // save current HP
 515+ E67B             >
 515+ E67B             >Current_HP      defl  $ - $E000             // used to set HP once!
 515+ E67B             >
 515+ E67B             >//              ______________________________________________________________________
 515+ E67B             >//              Dictionary part
 515+ E67B             >
 515+ E67B             >                org     Dict_Ptr
 515+ 6D15             >
 515+ 6D15 79 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 515+ 6D17             >
 515+ 6D17             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 6D17 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 6D1A             >
 515+ 6D1A             >
 515+ 6D1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 6D1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 6D1A             >
 515+ 6D1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 6D1A 16 6B 89 69                  dw      HP, FETCH               // hp @
 517+ 6D1E 52 68                        dw      EXIT                    // ;
 518+ 6D20
 519+ 6D20              //  ______________________________________________________________________
 520+ 6D20              //
 521+ 6D20              // page-watermark   -- n
 522+ 6D20              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 523+ 6D20                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 523+ 6D20             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 523+ 6D20             >
 523+ 6D20             >Dict_Ptr        defl    $
 523+ 6D20             >
 523+ 6D20             >//              ______________________________________________________________________
 523+ 6D20             >//              Heap part
 523+ 6D20             >
 523+ 6D20             >
 523+ 6D20             >                org     (Heap_Ptr & $1FFF) + $E000
 523+ E67B             >
 523+ E67B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ E67B             >Latest_Definition defl  Heap_Ptr
 523+ E67B             >
 523+ E67B             >                // dummy db directives used to calculate length of namec
 523+ E67B 50 41 47 45 >                db      "PAGE-WATERMARK"
 523+ E67F 2D 57 41 54 >
 523+ E683 45 52 4D 41 >
 523+ E687 52 4B       >
 523+ E689             >len_NFA         defl    $ - temp_NFA
 523+ E689             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ E67B             >
 523+ E67B 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ E67C 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 523+ E680 2D 57 41 54 >
 523+ E684 45 52 4D 41 >
 523+ E688 52 4B       >
 523+ E68A             >                org     $-1                 // alter last byte of Name just above to set
 523+ E689 CB          >                db      {b $} | END_BIT     // msb as name end
 523+ E68A             >
 523+ E68A 73 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 523+ E68C             >Prev_Ptr        defl    Heap_Ptr
 523+ E68C             >
 523+ E68C             >mirror_Ptr      defl    $
 523+ E68C             >
 523+ E68C 22 6D       >                dw      Dict_Ptr + 2        // xt
 523+ E68E             >Heap_Ptr        defl    $ - $E000           // save current HP
 523+ E68E             >
 523+ E68E             >Current_HP      defl  $ - $E000             // used to set HP once!
 523+ E68E             >
 523+ E68E             >//              ______________________________________________________________________
 523+ E68E             >//              Dictionary part
 523+ E68E             >
 523+ E68E             >                org     Dict_Ptr
 523+ 6D20             >
 523+ 6D20 8C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 523+ 6D22             >
 523+ 6D22             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 6D22 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 523+ 6D25             >
 523+ 6D25             >
 523+ 6D25             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 6D25             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 6D25             >
 523+ 6D25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 6D25 80 1F       >                dw      $1F80
 524+ 6D27
 525+ 6D27              //  ______________________________________________________________________
 526+ 6D27              //
 527+ 6D27              // skip-hp-page ha -- a
 528+ 6D27                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 528+ 6D27             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 528+ 6D27             >
 528+ 6D27             >Dict_Ptr        defl    $
 528+ 6D27             >
 528+ 6D27             >//              ______________________________________________________________________
 528+ 6D27             >//              Heap part
 528+ 6D27             >
 528+ 6D27             >
 528+ 6D27             >                org     (Heap_Ptr & $1FFF) + $E000
 528+ E68E             >
 528+ E68E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 528+ E68E             >Latest_Definition defl  Heap_Ptr
 528+ E68E             >
 528+ E68E             >                // dummy db directives used to calculate length of namec
 528+ E68E 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 528+ E692 2D 48 50 2D >
 528+ E696 50 41 47 45 >
 528+ E69A             >len_NFA         defl    $ - temp_NFA
 528+ E69A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 528+ E68E             >
 528+ E68E 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 528+ E68F 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 528+ E693 2D 48 50 2D >
 528+ E697 50 41 47 45 >
 528+ E69B             >                org     $-1                 // alter last byte of Name just above to set
 528+ E69A C5          >                db      {b $} | END_BIT     // msb as name end
 528+ E69B             >
 528+ E69B 7B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 528+ E69D             >Prev_Ptr        defl    Heap_Ptr
 528+ E69D             >
 528+ E69D             >mirror_Ptr      defl    $
 528+ E69D             >
 528+ E69D 29 6D       >                dw      Dict_Ptr + 2        // xt
 528+ E69F             >Heap_Ptr        defl    $ - $E000           // save current HP
 528+ E69F             >
 528+ E69F             >Current_HP      defl  $ - $E000             // used to set HP once!
 528+ E69F             >
 528+ E69F             >//              ______________________________________________________________________
 528+ E69F             >//              Dictionary part
 528+ E69F             >
 528+ E69F             >                org     Dict_Ptr
 528+ 6D27             >
 528+ 6D27 9D 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 528+ 6D29             >
 528+ 6D29             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 528+ 6D29 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 528+ 6D2C             >
 528+ 6D2C             >
 528+ 6D2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 528+ 6D2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 528+ 6D2C             >
 528+ 6D2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 529+ 6D2C 17 6D                        dw      HP_FETCH                // hp@
 530+ 6D2E A3 63 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 530+ 6D32 0C 68
 531+ 6D34 A5 68                        dw      PLUS
 532+ 6D36 22 6D                        dw      PAGE_WATERMARK
 533+ 6D38 1F 6C                        dw      GREATER
 534+ 6D3A F5 63                        dw      ZBRANCH
 535+ 6D3C 12 00                        dw      Skip_Skip - $   // if
 536+ 6D3E 17 6D                        dw      HP_FETCH
 537+ 6D40 A3 63 FF 1F                  dw      LIT, $1FFF, OR_OP
 537+ 6D44 1B 68
 538+ 6D46 BE 68 CC 68                  dw      ONE_PLUS, TWO_PLUS
 539+ 6D4A 16 6B 93 69                  dw      HP, STORE
 540+ 6D4E              Skip_Skip:
 541+ 6D4E 52 68                        dw      EXIT                    // ;
 542+ 6D50              //  ______________________________________________________________________
 543+ 6D50              //
 544+ 6D50              // latest       -- nfa
 545+ 6D50                              Colon_Def LATEST, "LATEST", is_normal
 545+ 6D50             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 545+ 6D50             >
 545+ 6D50             >Dict_Ptr        defl    $
 545+ 6D50             >
 545+ 6D50             >//              ______________________________________________________________________
 545+ 6D50             >//              Heap part
 545+ 6D50             >
 545+ 6D50             >
 545+ 6D50             >                org     (Heap_Ptr & $1FFF) + $E000
 545+ E69F             >
 545+ E69F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 545+ E69F             >Latest_Definition defl  Heap_Ptr
 545+ E69F             >
 545+ E69F             >                // dummy db directives used to calculate length of namec
 545+ E69F 4C 41 54 45 >                db      "LATEST"
 545+ E6A3 53 54       >
 545+ E6A5             >len_NFA         defl    $ - temp_NFA
 545+ E6A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 545+ E69F             >
 545+ E69F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 545+ E6A0 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 545+ E6A4 53 54       >
 545+ E6A6             >                org     $-1                 // alter last byte of Name just above to set
 545+ E6A5 D4          >                db      {b $} | END_BIT     // msb as name end
 545+ E6A6             >
 545+ E6A6 8E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 545+ E6A8             >Prev_Ptr        defl    Heap_Ptr
 545+ E6A8             >
 545+ E6A8             >mirror_Ptr      defl    $
 545+ E6A8             >
 545+ E6A8 52 6D       >                dw      Dict_Ptr + 2        // xt
 545+ E6AA             >Heap_Ptr        defl    $ - $E000           // save current HP
 545+ E6AA             >
 545+ E6AA             >Current_HP      defl  $ - $E000             // used to set HP once!
 545+ E6AA             >
 545+ E6AA             >//              ______________________________________________________________________
 545+ E6AA             >//              Dictionary part
 545+ E6AA             >
 545+ E6AA             >                org     Dict_Ptr
 545+ 6D50             >
 545+ 6D50 A8 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 545+ 6D52             >
 545+ 6D52             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 545+ 6D52 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 545+ 6D55             >
 545+ 6D55             >
 545+ 6D55             >                endif           ; ok        // for other definitions it "points" the correct handler
 545+ 6D55             >                // Use of "; ok" to suppress "warning[fwdref]"
 545+ 6D55             >
 545+ 6D55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 546+ 6D55 46 6B                        dw      CURRENT                 // current
 547+ 6D57 89 69 89 69                  dw      FETCH, FETCH            // @ @
 548+ 6D5B E8 6C                        dw      FAR // Q TO HEAP
 549+ 6D5D 52 68                        dw      EXIT                    // ;
 550+ 6D5F
 551+ 6D5F              //  ______________________________________________________________________
 552+ 6D5F              //
 553+ 6D5F              // >body        cfa -- pfa
 554+ 6D5F                              Colon_Def TO_BODY, ">BODY", is_normal
 554+ 6D5F             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 554+ 6D5F             >
 554+ 6D5F             >Dict_Ptr        defl    $
 554+ 6D5F             >
 554+ 6D5F             >//              ______________________________________________________________________
 554+ 6D5F             >//              Heap part
 554+ 6D5F             >
 554+ 6D5F             >
 554+ 6D5F             >                org     (Heap_Ptr & $1FFF) + $E000
 554+ E6AA             >
 554+ E6AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 554+ E6AA             >Latest_Definition defl  Heap_Ptr
 554+ E6AA             >
 554+ E6AA             >                // dummy db directives used to calculate length of namec
 554+ E6AA 3E 42 4F 44 >                db      ">BODY"
 554+ E6AE 59          >
 554+ E6AF             >len_NFA         defl    $ - temp_NFA
 554+ E6AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 554+ E6AA             >
 554+ E6AA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 554+ E6AB 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 554+ E6AF 59          >
 554+ E6B0             >                org     $-1                 // alter last byte of Name just above to set
 554+ E6AF D9          >                db      {b $} | END_BIT     // msb as name end
 554+ E6B0             >
 554+ E6B0 9F 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 554+ E6B2             >Prev_Ptr        defl    Heap_Ptr
 554+ E6B2             >
 554+ E6B2             >mirror_Ptr      defl    $
 554+ E6B2             >
 554+ E6B2 61 6D       >                dw      Dict_Ptr + 2        // xt
 554+ E6B4             >Heap_Ptr        defl    $ - $E000           // save current HP
 554+ E6B4             >
 554+ E6B4             >Current_HP      defl  $ - $E000             // used to set HP once!
 554+ E6B4             >
 554+ E6B4             >//              ______________________________________________________________________
 554+ E6B4             >//              Dictionary part
 554+ E6B4             >
 554+ E6B4             >                org     Dict_Ptr
 554+ 6D5F             >
 554+ 6D5F B2 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 554+ 6D61             >
 554+ 6D61             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 554+ 6D61 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 554+ 6D64             >
 554+ 6D64             >
 554+ 6D64             >                endif           ; ok        // for other definitions it "points" the correct handler
 554+ 6D64             >                // Use of "; ok" to suppress "warning[fwdref]"
 554+ 6D64             >
 554+ 6D64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 555+ 6D64 96 6A A5 68                  dw      THREE, PLUS             // cell+ --> 3 +
 556+ 6D68 52 68                        dw      EXIT                    // ;
 557+ 6D6A
 558+ 6D6A              //  ______________________________________________________________________
 559+ 6D6A              //
 560+ 6D6A              // <name        cfa -- nfa
 561+ 6D6A                              Colon_Def TO_NAME, "<NAME", is_normal
 561+ 6D6A             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 561+ 6D6A             >
 561+ 6D6A             >Dict_Ptr        defl    $
 561+ 6D6A             >
 561+ 6D6A             >//              ______________________________________________________________________
 561+ 6D6A             >//              Heap part
 561+ 6D6A             >
 561+ 6D6A             >
 561+ 6D6A             >                org     (Heap_Ptr & $1FFF) + $E000
 561+ E6B4             >
 561+ E6B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ E6B4             >Latest_Definition defl  Heap_Ptr
 561+ E6B4             >
 561+ E6B4             >                // dummy db directives used to calculate length of namec
 561+ E6B4 3C 4E 41 4D >                db      "<NAME"
 561+ E6B8 45          >
 561+ E6B9             >len_NFA         defl    $ - temp_NFA
 561+ E6B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ E6B4             >
 561+ E6B4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ E6B5 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 561+ E6B9 45          >
 561+ E6BA             >                org     $-1                 // alter last byte of Name just above to set
 561+ E6B9 C5          >                db      {b $} | END_BIT     // msb as name end
 561+ E6BA             >
 561+ E6BA AA 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 561+ E6BC             >Prev_Ptr        defl    Heap_Ptr
 561+ E6BC             >
 561+ E6BC             >mirror_Ptr      defl    $
 561+ E6BC             >
 561+ E6BC 6C 6D       >                dw      Dict_Ptr + 2        // xt
 561+ E6BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 561+ E6BE             >
 561+ E6BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 561+ E6BE             >
 561+ E6BE             >//              ______________________________________________________________________
 561+ E6BE             >//              Dictionary part
 561+ E6BE             >
 561+ E6BE             >                org     Dict_Ptr
 561+ 6D6A             >
 561+ 6D6A BC 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 561+ 6D6C             >
 561+ 6D6C             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 6D6C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 6D6F             >
 561+ 6D6F             >
 561+ 6D6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 6D6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 6D6F             >
 561+ 6D6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 6D6F D9 68                        dw      CELL_MINUS              // cell-
 563+ 6D71 2B 69 89 69                  dw      DUP, FETCH
 564+ 6D75 F3 6C                        dw      QHEAPP
 565+ 6D77 F5 63                        dw      ZBRANCH
 566+ 6D79 08 00                        dw      ToName_Skip - $
 567+ 6D7B 89 69 E8 6C                  dw          FETCH, FAR
 568+ 6D7F D9 68                        dw          CELL_MINUS
 569+ 6D81              ToName_Skip:                                    // endif
 570+ 6D81
 571+ 6D81 C5 68                        dw      ONE_SUBTRACT            // 1-
 572+ 6D83 9D 6A                        dw      NEG_ONE                 // -1
 573+ 6D85 82 6C                        dw      TRAVERSE                // traverse
 574+ 6D87 52 68                        dw      EXIT                    // ;
 575+ 6D89
 576+ 6D89              //  ______________________________________________________________________
 577+ 6D89              //
 578+ 6D89              // cfa          pfa -- cfa
 579+ 6D89                              Colon_Def CFA, "CFA", is_normal
 579+ 6D89             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 579+ 6D89             >
 579+ 6D89             >Dict_Ptr        defl    $
 579+ 6D89             >
 579+ 6D89             >//              ______________________________________________________________________
 579+ 6D89             >//              Heap part
 579+ 6D89             >
 579+ 6D89             >
 579+ 6D89             >                org     (Heap_Ptr & $1FFF) + $E000
 579+ E6BE             >
 579+ E6BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 579+ E6BE             >Latest_Definition defl  Heap_Ptr
 579+ E6BE             >
 579+ E6BE             >                // dummy db directives used to calculate length of namec
 579+ E6BE 43 46 41    >                db      "CFA"
 579+ E6C1             >len_NFA         defl    $ - temp_NFA
 579+ E6C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 579+ E6BE             >
 579+ E6BE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 579+ E6BF 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 579+ E6C2             >                org     $-1                 // alter last byte of Name just above to set
 579+ E6C1 C1          >                db      {b $} | END_BIT     // msb as name end
 579+ E6C2             >
 579+ E6C2 B4 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 579+ E6C4             >Prev_Ptr        defl    Heap_Ptr
 579+ E6C4             >
 579+ E6C4             >mirror_Ptr      defl    $
 579+ E6C4             >
 579+ E6C4 8B 6D       >                dw      Dict_Ptr + 2        // xt
 579+ E6C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 579+ E6C6             >
 579+ E6C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 579+ E6C6             >
 579+ E6C6             >//              ______________________________________________________________________
 579+ E6C6             >//              Dictionary part
 579+ E6C6             >
 579+ E6C6             >                org     Dict_Ptr
 579+ 6D89             >
 579+ 6D89 C4 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 579+ 6D8B             >
 579+ 6D8B             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 579+ 6D8B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 579+ 6D8E             >
 579+ 6D8E             >
 579+ 6D8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 579+ 6D8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 579+ 6D8E             >
 579+ 6D8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 580+ 6D8E 96 6A E5 6B                  dw      THREE, SUBTRACT         // 3 -
 581+ 6D92 52 68                        dw      EXIT                    // ;
 582+ 6D94
 583+ 6D94              //  ______________________________________________________________________
 584+ 6D94              //
 585+ 6D94              // nfa          pfa -- nfa
 586+ 6D94                              Colon_Def NFA, "NFA", is_normal
 586+ 6D94             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 586+ 6D94             >
 586+ 6D94             >Dict_Ptr        defl    $
 586+ 6D94             >
 586+ 6D94             >//              ______________________________________________________________________
 586+ 6D94             >//              Heap part
 586+ 6D94             >
 586+ 6D94             >
 586+ 6D94             >                org     (Heap_Ptr & $1FFF) + $E000
 586+ E6C6             >
 586+ E6C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ E6C6             >Latest_Definition defl  Heap_Ptr
 586+ E6C6             >
 586+ E6C6             >                // dummy db directives used to calculate length of namec
 586+ E6C6 4E 46 41    >                db      "NFA"
 586+ E6C9             >len_NFA         defl    $ - temp_NFA
 586+ E6C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ E6C6             >
 586+ E6C6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ E6C7 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 586+ E6CA             >                org     $-1                 // alter last byte of Name just above to set
 586+ E6C9 C1          >                db      {b $} | END_BIT     // msb as name end
 586+ E6CA             >
 586+ E6CA BE 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 586+ E6CC             >Prev_Ptr        defl    Heap_Ptr
 586+ E6CC             >
 586+ E6CC             >mirror_Ptr      defl    $
 586+ E6CC             >
 586+ E6CC 96 6D       >                dw      Dict_Ptr + 2        // xt
 586+ E6CE             >Heap_Ptr        defl    $ - $E000           // save current HP
 586+ E6CE             >
 586+ E6CE             >Current_HP      defl  $ - $E000             // used to set HP once!
 586+ E6CE             >
 586+ E6CE             >//              ______________________________________________________________________
 586+ E6CE             >//              Dictionary part
 586+ E6CE             >
 586+ E6CE             >                org     Dict_Ptr
 586+ 6D94             >
 586+ 6D94 CC 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 586+ 6D96             >
 586+ 6D96             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 6D96 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 6D99             >
 586+ 6D99             >
 586+ 6D99             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 6D99             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 6D99             >
 586+ 6D99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 6D99 8B 6D                        dw      CFA                     // cfa
 588+ 6D9B 6C 6D                        dw      TO_NAME                 // traverse
 589+ 6D9D 52 68                        dw      EXIT                    // ;
 590+ 6D9F
 591+ 6D9F              //  ______________________________________________________________________
 592+ 6D9F              //
 593+ 6D9F              // lfa          pfa -- lfa
 594+ 6D9F                              Colon_Def LFA, "LFA", is_normal
 594+ 6D9F             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 594+ 6D9F             >
 594+ 6D9F             >Dict_Ptr        defl    $
 594+ 6D9F             >
 594+ 6D9F             >//              ______________________________________________________________________
 594+ 6D9F             >//              Heap part
 594+ 6D9F             >
 594+ 6D9F             >
 594+ 6D9F             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6CE             >
 594+ E6CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6CE             >Latest_Definition defl  Heap_Ptr
 594+ E6CE             >
 594+ E6CE             >                // dummy db directives used to calculate length of namec
 594+ E6CE 4C 46 41    >                db      "LFA"
 594+ E6D1             >len_NFA         defl    $ - temp_NFA
 594+ E6D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6CE             >
 594+ E6CE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6CF 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 594+ E6D2             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6D1 C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6D2             >
 594+ E6D2 C6 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6D4             >Prev_Ptr        defl    Heap_Ptr
 594+ E6D4             >
 594+ E6D4             >mirror_Ptr      defl    $
 594+ E6D4             >
 594+ E6D4 A1 6D       >                dw      Dict_Ptr + 2        // xt
 594+ E6D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6D6             >
 594+ E6D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6D6             >
 594+ E6D6             >//              ______________________________________________________________________
 594+ E6D6             >//              Dictionary part
 594+ E6D6             >
 594+ E6D6             >                org     Dict_Ptr
 594+ 6D9F             >
 594+ 6D9F D4 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 6DA1             >
 594+ 6DA1             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 6DA1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 6DA4             >
 594+ 6DA4             >
 594+ 6DA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 6DA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 6DA4             >
 594+ 6DA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 6DA4 96 6D                        dw      NFA                     // nfa
 596+ 6DA6 88 6A                        dw      ONE                     // 1
 597+ 6DA8 82 6C                        dw      TRAVERSE                // traverse
 598+ 6DAA BE 68                        dw      ONE_PLUS                // 1+
 599+ 6DAC 52 68                        dw      EXIT                    // ;
 600+ 6DAE
 601+ 6DAE              //  ______________________________________________________________________
 602+ 6DAE              //
 603+ 6DAE              // pfa          nfa -- pfa
 604+ 6DAE                              Colon_Def PFA, "PFA", is_normal
 604+ 6DAE             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 604+ 6DAE             >
 604+ 6DAE             >Dict_Ptr        defl    $
 604+ 6DAE             >
 604+ 6DAE             >//              ______________________________________________________________________
 604+ 6DAE             >//              Heap part
 604+ 6DAE             >
 604+ 6DAE             >
 604+ 6DAE             >                org     (Heap_Ptr & $1FFF) + $E000
 604+ E6D6             >
 604+ E6D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 604+ E6D6             >Latest_Definition defl  Heap_Ptr
 604+ E6D6             >
 604+ E6D6             >                // dummy db directives used to calculate length of namec
 604+ E6D6 50 46 41    >                db      "PFA"
 604+ E6D9             >len_NFA         defl    $ - temp_NFA
 604+ E6D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 604+ E6D6             >
 604+ E6D6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 604+ E6D7 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 604+ E6DA             >                org     $-1                 // alter last byte of Name just above to set
 604+ E6D9 C1          >                db      {b $} | END_BIT     // msb as name end
 604+ E6DA             >
 604+ E6DA CE 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 604+ E6DC             >Prev_Ptr        defl    Heap_Ptr
 604+ E6DC             >
 604+ E6DC             >mirror_Ptr      defl    $
 604+ E6DC             >
 604+ E6DC B0 6D       >                dw      Dict_Ptr + 2        // xt
 604+ E6DE             >Heap_Ptr        defl    $ - $E000           // save current HP
 604+ E6DE             >
 604+ E6DE             >Current_HP      defl  $ - $E000             // used to set HP once!
 604+ E6DE             >
 604+ E6DE             >//              ______________________________________________________________________
 604+ E6DE             >//              Dictionary part
 604+ E6DE             >
 604+ E6DE             >                org     Dict_Ptr
 604+ 6DAE             >
 604+ 6DAE DC 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 604+ 6DB0             >
 604+ 6DB0             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 604+ 6DB0 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 604+ 6DB3             >
 604+ 6DB3             >
 604+ 6DB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 604+ 6DB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 604+ 6DB3             >
 604+ 6DB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 605+ 6DB3 06 6D                        dw      QTOHEAP
 606+ 6DB5 88 6A                        dw      ONE                     // 1
 607+ 6DB7 82 6C                        dw      TRAVERSE                // traverse
 608+ 6DB9 BE 68                        dw      ONE_PLUS                // 1+
 609+ 6DBB D4 68                        dw      CELL_PLUS               // cell+
 610+ 6DBD D7 6C                        dw      QMMU7
 611+ 6DBF F5 63                        dw      ZBRANCH
 612+ 6DC1 0E 00                        dw      PFA_Skip - $
 613+ 6DC3 9F 6C                        dw          MMU7_FETCH
 614+ 6DC5 88 6A E5 6B                  dw          ONE, SUBTRACT
 615+ 6DC9 F5 63                        dw          ZBRANCH
 616+ 6DCB 04 00                        dw          PFA_Skip - $
 617+ 6DCD 89 69                        dw              FETCH
 618+ 6DCF              PFA_Skip:                                    // endif
 619+ 6DCF 61 6D                        dw      TO_BODY                 // >body
 620+ 6DD1 52 68                        dw      EXIT                    // ;
 621+ 6DD3
 622+ 6DD3              //  ______________________________________________________________________
 623+ 6DD3              //
 624+ 6DD3              // !csp         --
 625+ 6DD3              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 626+ 6DD3                              Colon_Def STORE_CSP, "!CSP", is_normal
 626+ 6DD3             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 626+ 6DD3             >
 626+ 6DD3             >Dict_Ptr        defl    $
 626+ 6DD3             >
 626+ 6DD3             >//              ______________________________________________________________________
 626+ 6DD3             >//              Heap part
 626+ 6DD3             >
 626+ 6DD3             >
 626+ 6DD3             >                org     (Heap_Ptr & $1FFF) + $E000
 626+ E6DE             >
 626+ E6DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 626+ E6DE             >Latest_Definition defl  Heap_Ptr
 626+ E6DE             >
 626+ E6DE             >                // dummy db directives used to calculate length of namec
 626+ E6DE 21 43 53 50 >                db      "!CSP"
 626+ E6E2             >len_NFA         defl    $ - temp_NFA
 626+ E6E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 626+ E6DE             >
 626+ E6DE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 626+ E6DF 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 626+ E6E3             >                org     $-1                 // alter last byte of Name just above to set
 626+ E6E2 D0          >                db      {b $} | END_BIT     // msb as name end
 626+ E6E3             >
 626+ E6E3 D6 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 626+ E6E5             >Prev_Ptr        defl    Heap_Ptr
 626+ E6E5             >
 626+ E6E5             >mirror_Ptr      defl    $
 626+ E6E5             >
 626+ E6E5 D5 6D       >                dw      Dict_Ptr + 2        // xt
 626+ E6E7             >Heap_Ptr        defl    $ - $E000           // save current HP
 626+ E6E7             >
 626+ E6E7             >Current_HP      defl  $ - $E000             // used to set HP once!
 626+ E6E7             >
 626+ E6E7             >//              ______________________________________________________________________
 626+ E6E7             >//              Dictionary part
 626+ E6E7             >
 626+ E6E7             >                org     Dict_Ptr
 626+ 6DD3             >
 626+ 6DD3 E5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 626+ 6DD5             >
 626+ 6DD5             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 626+ 6DD5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 626+ 6DD8             >
 626+ 6DD8             >
 626+ 6DD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 626+ 6DD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 626+ 6DD8             >
 626+ 6DD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 627+ 6DD8 39 68                        dw      SPFETCH                 // sp@
 628+ 6DDA 64 6B 93 69                  dw      CSP, STORE              // csp !
 629+ 6DDE 52 68                        dw      EXIT                    // ;
 630+ 6DE0
 631+ 6DE0              //  ______________________________________________________________________
 632+ 6DE0              //
 633+ 6DE0              // ?error       f n --
 634+ 6DE0              // rase error n if flag f it true
 635+ 6DE0                              Colon_Def QERROR, "?ERROR", is_normal
 635+ 6DE0             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 635+ 6DE0             >
 635+ 6DE0             >Dict_Ptr        defl    $
 635+ 6DE0             >
 635+ 6DE0             >//              ______________________________________________________________________
 635+ 6DE0             >//              Heap part
 635+ 6DE0             >
 635+ 6DE0             >
 635+ 6DE0             >                org     (Heap_Ptr & $1FFF) + $E000
 635+ E6E7             >
 635+ E6E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 635+ E6E7             >Latest_Definition defl  Heap_Ptr
 635+ E6E7             >
 635+ E6E7             >                // dummy db directives used to calculate length of namec
 635+ E6E7 3F 45 52 52 >                db      "?ERROR"
 635+ E6EB 4F 52       >
 635+ E6ED             >len_NFA         defl    $ - temp_NFA
 635+ E6ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 635+ E6E7             >
 635+ E6E7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 635+ E6E8 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 635+ E6EC 4F 52       >
 635+ E6EE             >                org     $-1                 // alter last byte of Name just above to set
 635+ E6ED D2          >                db      {b $} | END_BIT     // msb as name end
 635+ E6EE             >
 635+ E6EE DE 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 635+ E6F0             >Prev_Ptr        defl    Heap_Ptr
 635+ E6F0             >
 635+ E6F0             >mirror_Ptr      defl    $
 635+ E6F0             >
 635+ E6F0 E2 6D       >                dw      Dict_Ptr + 2        // xt
 635+ E6F2             >Heap_Ptr        defl    $ - $E000           // save current HP
 635+ E6F2             >
 635+ E6F2             >Current_HP      defl  $ - $E000             // used to set HP once!
 635+ E6F2             >
 635+ E6F2             >//              ______________________________________________________________________
 635+ E6F2             >//              Dictionary part
 635+ E6F2             >
 635+ E6F2             >                org     Dict_Ptr
 635+ 6DE0             >
 635+ 6DE0 F0 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 635+ 6DE2             >
 635+ 6DE2             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 635+ 6DE2 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 635+ 6DE5             >
 635+ 6DE5             >
 635+ 6DE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 635+ 6DE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 635+ 6DE5             >
 635+ 6DE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 636+ 6DE5 24 69                        dw      SWAP                    // swap
 637+ 6DE7                                                              // if
 638+ 6DE7 F5 63                        dw      ZBRANCH
 639+ 6DE9 08 00                        dw      QError_Else - $
 640+ 6DEB D4 72                        dw          ERROR               //      error  ( is a forward-ref )
 641+ 6DED                                                              // else
 642+ 6DED E8 63                        dw      BRANCH
 643+ 6DEF 04 00                        dw      QError_Endif - $
 644+ 6DF1              QError_Else:
 645+ 6DF1 10 69                        dw          DROP                //      drop
 646+ 6DF3              QError_Endif:                                   // endif
 647+ 6DF3 52 68                        dw      EXIT                    // ;
 648+ 6DF5
 649+ 6DF5              //  ______________________________________________________________________
 650+ 6DF5              //
 651+ 6DF5              // ?comp       --
 652+ 6DF5              // raise msg #17 if not compiling
 653+ 6DF5                              Colon_Def QCOMP, "?COMP", is_normal
 653+ 6DF5             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 653+ 6DF5             >
 653+ 6DF5             >Dict_Ptr        defl    $
 653+ 6DF5             >
 653+ 6DF5             >//              ______________________________________________________________________
 653+ 6DF5             >//              Heap part
 653+ 6DF5             >
 653+ 6DF5             >
 653+ 6DF5             >                org     (Heap_Ptr & $1FFF) + $E000
 653+ E6F2             >
 653+ E6F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 653+ E6F2             >Latest_Definition defl  Heap_Ptr
 653+ E6F2             >
 653+ E6F2             >                // dummy db directives used to calculate length of namec
 653+ E6F2 3F 43 4F 4D >                db      "?COMP"
 653+ E6F6 50          >
 653+ E6F7             >len_NFA         defl    $ - temp_NFA
 653+ E6F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 653+ E6F2             >
 653+ E6F2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 653+ E6F3 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 653+ E6F7 50          >
 653+ E6F8             >                org     $-1                 // alter last byte of Name just above to set
 653+ E6F7 D0          >                db      {b $} | END_BIT     // msb as name end
 653+ E6F8             >
 653+ E6F8 E7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 653+ E6FA             >Prev_Ptr        defl    Heap_Ptr
 653+ E6FA             >
 653+ E6FA             >mirror_Ptr      defl    $
 653+ E6FA             >
 653+ E6FA F7 6D       >                dw      Dict_Ptr + 2        // xt
 653+ E6FC             >Heap_Ptr        defl    $ - $E000           // save current HP
 653+ E6FC             >
 653+ E6FC             >Current_HP      defl  $ - $E000             // used to set HP once!
 653+ E6FC             >
 653+ E6FC             >//              ______________________________________________________________________
 653+ E6FC             >//              Dictionary part
 653+ E6FC             >
 653+ E6FC             >                org     Dict_Ptr
 653+ 6DF5             >
 653+ 6DF5 FA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 653+ 6DF7             >
 653+ 6DF7             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 653+ 6DF7 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 653+ 6DFA             >
 653+ 6DFA             >
 653+ 6DFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 653+ 6DFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 653+ 6DFA             >
 653+ 6DFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 654+ 6DFA 4C 6B 89 69                  dw      STATE, FETCH            // state @
 655+ 6DFE 77 68                        dw      ZEQUAL                  // 0=
 656+ 6E00 A3 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 657+ 6E04 E2 6D                        dw      QERROR                  // ?error
 658+ 6E06 52 68                        dw      EXIT                    // ;
 659+ 6E08
 660+ 6E08              //  ______________________________________________________________________
 661+ 6E08              //
 662+ 6E08              // ?exec       --
 663+ 6E08              // raise msg #18 if compiling
 664+ 6E08                              Colon_Def QEXEC, "?EXEC", is_normal
 664+ 6E08             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 664+ 6E08             >
 664+ 6E08             >Dict_Ptr        defl    $
 664+ 6E08             >
 664+ 6E08             >//              ______________________________________________________________________
 664+ 6E08             >//              Heap part
 664+ 6E08             >
 664+ 6E08             >
 664+ 6E08             >                org     (Heap_Ptr & $1FFF) + $E000
 664+ E6FC             >
 664+ E6FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 664+ E6FC             >Latest_Definition defl  Heap_Ptr
 664+ E6FC             >
 664+ E6FC             >                // dummy db directives used to calculate length of namec
 664+ E6FC 3F 45 58 45 >                db      "?EXEC"
 664+ E700 43          >
 664+ E701             >len_NFA         defl    $ - temp_NFA
 664+ E701             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 664+ E6FC             >
 664+ E6FC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 664+ E6FD 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 664+ E701 43          >
 664+ E702             >                org     $-1                 // alter last byte of Name just above to set
 664+ E701 C3          >                db      {b $} | END_BIT     // msb as name end
 664+ E702             >
 664+ E702 F2 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 664+ E704             >Prev_Ptr        defl    Heap_Ptr
 664+ E704             >
 664+ E704             >mirror_Ptr      defl    $
 664+ E704             >
 664+ E704 0A 6E       >                dw      Dict_Ptr + 2        // xt
 664+ E706             >Heap_Ptr        defl    $ - $E000           // save current HP
 664+ E706             >
 664+ E706             >Current_HP      defl  $ - $E000             // used to set HP once!
 664+ E706             >
 664+ E706             >//              ______________________________________________________________________
 664+ E706             >//              Dictionary part
 664+ E706             >
 664+ E706             >                org     Dict_Ptr
 664+ 6E08             >
 664+ 6E08 04 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 664+ 6E0A             >
 664+ 6E0A             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 664+ 6E0A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 664+ 6E0D             >
 664+ 6E0D             >
 664+ 6E0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 664+ 6E0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 664+ 6E0D             >
 664+ 6E0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 665+ 6E0D 4C 6B 89 69                  dw      STATE, FETCH            // state @
 666+ 6E11 A3 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 667+ 6E15 E2 6D                        dw      QERROR                  // ?error
 668+ 6E17 52 68                        dw      EXIT                    // ;
 669+ 6E19
 670+ 6E19              //  ______________________________________________________________________
 671+ 6E19              //
 672+ 6E19              // ?pairs       n1 n2 --
 673+ 6E19              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 674+ 6E19                              Colon_Def QPAIRS, "?PAIRS", is_normal
 674+ 6E19             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 674+ 6E19             >
 674+ 6E19             >Dict_Ptr        defl    $
 674+ 6E19             >
 674+ 6E19             >//              ______________________________________________________________________
 674+ 6E19             >//              Heap part
 674+ 6E19             >
 674+ 6E19             >
 674+ 6E19             >                org     (Heap_Ptr & $1FFF) + $E000
 674+ E706             >
 674+ E706             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 674+ E706             >Latest_Definition defl  Heap_Ptr
 674+ E706             >
 674+ E706             >                // dummy db directives used to calculate length of namec
 674+ E706 3F 50 41 49 >                db      "?PAIRS"
 674+ E70A 52 53       >
 674+ E70C             >len_NFA         defl    $ - temp_NFA
 674+ E70C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 674+ E706             >
 674+ E706 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 674+ E707 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 674+ E70B 52 53       >
 674+ E70D             >                org     $-1                 // alter last byte of Name just above to set
 674+ E70C D3          >                db      {b $} | END_BIT     // msb as name end
 674+ E70D             >
 674+ E70D FC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 674+ E70F             >Prev_Ptr        defl    Heap_Ptr
 674+ E70F             >
 674+ E70F             >mirror_Ptr      defl    $
 674+ E70F             >
 674+ E70F 1B 6E       >                dw      Dict_Ptr + 2        // xt
 674+ E711             >Heap_Ptr        defl    $ - $E000           // save current HP
 674+ E711             >
 674+ E711             >Current_HP      defl  $ - $E000             // used to set HP once!
 674+ E711             >
 674+ E711             >//              ______________________________________________________________________
 674+ E711             >//              Dictionary part
 674+ E711             >
 674+ E711             >                org     Dict_Ptr
 674+ 6E19             >
 674+ 6E19 0F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 674+ 6E1B             >
 674+ 6E1B             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 674+ 6E1B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 674+ 6E1E             >
 674+ 6E1E             >
 674+ 6E1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 674+ 6E1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 674+ 6E1E             >
 674+ 6E1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 675+ 6E1E E5 6B                        dw      SUBTRACT                // -
 676+ 6E20 A3 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 677+ 6E24 E2 6D                        dw      QERROR                  // ?error
 678+ 6E26 52 68                        dw      EXIT                    // ;
 679+ 6E28
 680+ 6E28              //  ______________________________________________________________________
 681+ 6E28              //
 682+ 6E28              // ?csp       --
 683+ 6E28              // raise msg #20 if surrent SP in not what previously saved in CSP.
 684+ 6E28              // Compiler relies on that for  syntax checking of structures
 685+ 6E28                              Colon_Def QCSP, "?CSP", is_normal
 685+ 6E28             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 685+ 6E28             >
 685+ 6E28             >Dict_Ptr        defl    $
 685+ 6E28             >
 685+ 6E28             >//              ______________________________________________________________________
 685+ 6E28             >//              Heap part
 685+ 6E28             >
 685+ 6E28             >
 685+ 6E28             >                org     (Heap_Ptr & $1FFF) + $E000
 685+ E711             >
 685+ E711             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 685+ E711             >Latest_Definition defl  Heap_Ptr
 685+ E711             >
 685+ E711             >                // dummy db directives used to calculate length of namec
 685+ E711 3F 43 53 50 >                db      "?CSP"
 685+ E715             >len_NFA         defl    $ - temp_NFA
 685+ E715             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 685+ E711             >
 685+ E711 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 685+ E712 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 685+ E716             >                org     $-1                 // alter last byte of Name just above to set
 685+ E715 D0          >                db      {b $} | END_BIT     // msb as name end
 685+ E716             >
 685+ E716 06 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 685+ E718             >Prev_Ptr        defl    Heap_Ptr
 685+ E718             >
 685+ E718             >mirror_Ptr      defl    $
 685+ E718             >
 685+ E718 2A 6E       >                dw      Dict_Ptr + 2        // xt
 685+ E71A             >Heap_Ptr        defl    $ - $E000           // save current HP
 685+ E71A             >
 685+ E71A             >Current_HP      defl  $ - $E000             // used to set HP once!
 685+ E71A             >
 685+ E71A             >//              ______________________________________________________________________
 685+ E71A             >//              Dictionary part
 685+ E71A             >
 685+ E71A             >                org     Dict_Ptr
 685+ 6E28             >
 685+ 6E28 18 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 685+ 6E2A             >
 685+ 6E2A             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 685+ 6E2A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 685+ 6E2D             >
 685+ 6E2D             >
 685+ 6E2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 685+ 6E2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 685+ 6E2D             >
 685+ 6E2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 686+ 6E2D 39 68                        dw      SPFETCH                 // sp@
 687+ 6E2F 64 6B 89 69                  dw      CSP, FETCH              // csp @
 688+ 6E33 E5 6B                        dw      SUBTRACT                // -
 689+ 6E35 A3 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 690+ 6E39 E2 6D                        dw      QERROR                  // ?error
 691+ 6E3B 52 68                        dw      EXIT                    // ;
 692+ 6E3D
 693+ 6E3D              //  ______________________________________________________________________
 694+ 6E3D              //
 695+ 6E3D              // ?loading      --
 696+ 6E3D              // raise msg #22 if not loading
 697+ 6E3D                              Colon_Def QLOADING, "?LOADING", is_normal
 697+ 6E3D             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 697+ 6E3D             >
 697+ 6E3D             >Dict_Ptr        defl    $
 697+ 6E3D             >
 697+ 6E3D             >//              ______________________________________________________________________
 697+ 6E3D             >//              Heap part
 697+ 6E3D             >
 697+ 6E3D             >
 697+ 6E3D             >                org     (Heap_Ptr & $1FFF) + $E000
 697+ E71A             >
 697+ E71A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 697+ E71A             >Latest_Definition defl  Heap_Ptr
 697+ E71A             >
 697+ E71A             >                // dummy db directives used to calculate length of namec
 697+ E71A 3F 4C 4F 41 >                db      "?LOADING"
 697+ E71E 44 49 4E 47 >
 697+ E722             >len_NFA         defl    $ - temp_NFA
 697+ E722             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 697+ E71A             >
 697+ E71A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 697+ E71B 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 697+ E71F 44 49 4E 47 >
 697+ E723             >                org     $-1                 // alter last byte of Name just above to set
 697+ E722 C7          >                db      {b $} | END_BIT     // msb as name end
 697+ E723             >
 697+ E723 11 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 697+ E725             >Prev_Ptr        defl    Heap_Ptr
 697+ E725             >
 697+ E725             >mirror_Ptr      defl    $
 697+ E725             >
 697+ E725 3F 6E       >                dw      Dict_Ptr + 2        // xt
 697+ E727             >Heap_Ptr        defl    $ - $E000           // save current HP
 697+ E727             >
 697+ E727             >Current_HP      defl  $ - $E000             // used to set HP once!
 697+ E727             >
 697+ E727             >//              ______________________________________________________________________
 697+ E727             >//              Dictionary part
 697+ E727             >
 697+ E727             >                org     Dict_Ptr
 697+ 6E3D             >
 697+ 6E3D 25 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 697+ 6E3F             >
 697+ 6E3F             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 697+ 6E3F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 697+ 6E42             >
 697+ 6E42             >
 697+ 6E42             >                endif           ; ok        // for other definitions it "points" the correct handler
 697+ 6E42             >                // Use of "; ok" to suppress "warning[fwdref]"
 697+ 6E42             >
 697+ 6E42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 698+ 6E42 22 6B 89 69                  dw      BLK, FETCH              // blk @
 699+ 6E46 77 68                        dw      ZEQUAL                  // 0=
 700+ 6E48 A3 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 701+ 6E4C E2 6D                        dw      QERROR                  // ?error
 702+ 6E4E 52 68                        dw      EXIT                    // ;
 703+ 6E50
 704+ 6E50              //  ______________________________________________________________________
 705+ 6E50              //
 706+ 6E50              // compile      --
 707+ 6E50              // compiles the following word
 708+ 6E50                              Colon_Def COMPILE, "COMPILE", is_normal
 708+ 6E50             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 708+ 6E50             >
 708+ 6E50             >Dict_Ptr        defl    $
 708+ 6E50             >
 708+ 6E50             >//              ______________________________________________________________________
 708+ 6E50             >//              Heap part
 708+ 6E50             >
 708+ 6E50             >
 708+ 6E50             >                org     (Heap_Ptr & $1FFF) + $E000
 708+ E727             >
 708+ E727             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 708+ E727             >Latest_Definition defl  Heap_Ptr
 708+ E727             >
 708+ E727             >                // dummy db directives used to calculate length of namec
 708+ E727 43 4F 4D 50 >                db      "COMPILE"
 708+ E72B 49 4C 45    >
 708+ E72E             >len_NFA         defl    $ - temp_NFA
 708+ E72E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 708+ E727             >
 708+ E727 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 708+ E728 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 708+ E72C 49 4C 45    >
 708+ E72F             >                org     $-1                 // alter last byte of Name just above to set
 708+ E72E C5          >                db      {b $} | END_BIT     // msb as name end
 708+ E72F             >
 708+ E72F 1A 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 708+ E731             >Prev_Ptr        defl    Heap_Ptr
 708+ E731             >
 708+ E731             >mirror_Ptr      defl    $
 708+ E731             >
 708+ E731 52 6E       >                dw      Dict_Ptr + 2        // xt
 708+ E733             >Heap_Ptr        defl    $ - $E000           // save current HP
 708+ E733             >
 708+ E733             >Current_HP      defl  $ - $E000             // used to set HP once!
 708+ E733             >
 708+ E733             >//              ______________________________________________________________________
 708+ E733             >//              Dictionary part
 708+ E733             >
 708+ E733             >                org     Dict_Ptr
 708+ 6E50             >
 708+ 6E50 31 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 708+ 6E52             >
 708+ 6E52             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 708+ 6E52 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 708+ 6E55             >
 708+ 6E55             >
 708+ 6E55             >                endif           ; ok        // for other definitions it "points" the correct handler
 708+ 6E55             >                // Use of "; ok" to suppress "warning[fwdref]"
 708+ 6E55             >
 708+ 6E55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 709+ 6E55 F7 6D                        dw      QCOMP                   // ?comp
 710+ 6E57 67 68                        dw      R_TO                    // r>
 711+ 6E59 2B 69 D4 68                  dw      DUP, CELL_PLUS          // dup, cell+
 712+ 6E5D 5C 68                        dw      TO_R                    // >r
 713+ 6E5F 89 69 BC 6B                  dw      FETCH, COMMA            // @ ,
 714+ 6E63 52 68                        dw      EXIT                    // ;
 715+ 6E65
 716+ 6E65              //  ______________________________________________________________________
 717+ 6E65              //
 718+ 6E65              // compile,     --
 719+ 6E65              // compiles the following word
 720+ 6E65                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 720+ 6E65             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 720+ 6E65             >
 720+ 6E65             >Dict_Ptr        defl    $
 720+ 6E65             >
 720+ 6E65             >//              ______________________________________________________________________
 720+ 6E65             >//              Heap part
 720+ 6E65             >
 720+ 6E65             >
 720+ 6E65             >                org     (Heap_Ptr & $1FFF) + $E000
 720+ E733             >
 720+ E733             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 720+ E733             >Latest_Definition defl  Heap_Ptr
 720+ E733             >
 720+ E733             >                // dummy db directives used to calculate length of namec
 720+ E733 43 4F 4D 50 >                db      "COMPILE,"
 720+ E737 49 4C 45 2C >
 720+ E73B             >len_NFA         defl    $ - temp_NFA
 720+ E73B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 720+ E733             >
 720+ E733 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 720+ E734 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 720+ E738 49 4C 45 2C >
 720+ E73C             >                org     $-1                 // alter last byte of Name just above to set
 720+ E73B AC          >                db      {b $} | END_BIT     // msb as name end
 720+ E73C             >
 720+ E73C 27 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 720+ E73E             >Prev_Ptr        defl    Heap_Ptr
 720+ E73E             >
 720+ E73E             >mirror_Ptr      defl    $
 720+ E73E             >
 720+ E73E 67 6E       >                dw      Dict_Ptr + 2        // xt
 720+ E740             >Heap_Ptr        defl    $ - $E000           // save current HP
 720+ E740             >
 720+ E740             >Current_HP      defl  $ - $E000             // used to set HP once!
 720+ E740             >
 720+ E740             >//              ______________________________________________________________________
 720+ E740             >//              Dictionary part
 720+ E740             >
 720+ E740             >                org     Dict_Ptr
 720+ 6E65             >
 720+ 6E65 3E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 720+ 6E67             >
 720+ 6E67             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 720+ 6E67 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 720+ 6E6A             >
 720+ 6E6A             >
 720+ 6E6A             >                endif           ; ok        // for other definitions it "points" the correct handler
 720+ 6E6A             >                // Use of "; ok" to suppress "warning[fwdref]"
 720+ 6E6A             >
 720+ 6E6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 721+ 6E6A F7 6D                        dw      QCOMP                   // ?comp
 722+ 6E6C BC 6B                        dw      COMMA                   // ,
 723+ 6E6E 52 68                        dw      EXIT                    // ;
 724+ 6E70
 725+ 6E70              //  ______________________________________________________________________
 726+ 6E70              //
 727+ 6E70              // [            --
 728+ 6E70              // stop compilation
 729+ 6E70                              Colon_Def SQUARED_OPEN, "[", is_immediate
 729+ 6E70             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 729+ 6E70             >
 729+ 6E70             >Dict_Ptr        defl    $
 729+ 6E70             >
 729+ 6E70             >//              ______________________________________________________________________
 729+ 6E70             >//              Heap part
 729+ 6E70             >
 729+ 6E70             >
 729+ 6E70             >                org     (Heap_Ptr & $1FFF) + $E000
 729+ E740             >
 729+ E740             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 729+ E740             >Latest_Definition defl  Heap_Ptr
 729+ E740             >
 729+ E740             >                // dummy db directives used to calculate length of namec
 729+ E740 5B          >                db      "["
 729+ E741             >len_NFA         defl    $ - temp_NFA
 729+ E741             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 729+ E740             >
 729+ E740 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 729+ E741 5B          >                db      "["               // name string in 7-bit ascii, but
 729+ E742             >                org     $-1                 // alter last byte of Name just above to set
 729+ E741 DB          >                db      {b $} | END_BIT     // msb as name end
 729+ E742             >
 729+ E742 33 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 729+ E744             >Prev_Ptr        defl    Heap_Ptr
 729+ E744             >
 729+ E744             >mirror_Ptr      defl    $
 729+ E744             >
 729+ E744 72 6E       >                dw      Dict_Ptr + 2        // xt
 729+ E746             >Heap_Ptr        defl    $ - $E000           // save current HP
 729+ E746             >
 729+ E746             >Current_HP      defl  $ - $E000             // used to set HP once!
 729+ E746             >
 729+ E746             >//              ______________________________________________________________________
 729+ E746             >//              Dictionary part
 729+ E746             >
 729+ E746             >                org     Dict_Ptr
 729+ 6E70             >
 729+ 6E70 44 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 729+ 6E72             >
 729+ 6E72             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 729+ 6E72 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 729+ 6E75             >
 729+ 6E75             >
 729+ 6E75             >                endif           ; ok        // for other definitions it "points" the correct handler
 729+ 6E75             >                // Use of "; ok" to suppress "warning[fwdref]"
 729+ 6E75             >
 729+ 6E75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 730+ 6E75 81 6A                        dw      ZERO                    // 0
 731+ 6E77 4C 6B 93 69                  dw      STATE, STORE            // state !
 732+ 6E7B 52 68                        dw      EXIT                    // ; immediate
 733+ 6E7D
 734+ 6E7D              //  ______________________________________________________________________
 735+ 6E7D              //
 736+ 6E7D              // ]            --
 737+ 6E7D              // start compilation
 738+ 6E7D                              Colon_Def SQUARED_CLOSE, "]", is_normal
 738+ 6E7D             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 738+ 6E7D             >
 738+ 6E7D             >Dict_Ptr        defl    $
 738+ 6E7D             >
 738+ 6E7D             >//              ______________________________________________________________________
 738+ 6E7D             >//              Heap part
 738+ 6E7D             >
 738+ 6E7D             >
 738+ 6E7D             >                org     (Heap_Ptr & $1FFF) + $E000
 738+ E746             >
 738+ E746             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 738+ E746             >Latest_Definition defl  Heap_Ptr
 738+ E746             >
 738+ E746             >                // dummy db directives used to calculate length of namec
 738+ E746 5D          >                db      "]"
 738+ E747             >len_NFA         defl    $ - temp_NFA
 738+ E747             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 738+ E746             >
 738+ E746 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 738+ E747 5D          >                db      "]"               // name string in 7-bit ascii, but
 738+ E748             >                org     $-1                 // alter last byte of Name just above to set
 738+ E747 DD          >                db      {b $} | END_BIT     // msb as name end
 738+ E748             >
 738+ E748 40 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 738+ E74A             >Prev_Ptr        defl    Heap_Ptr
 738+ E74A             >
 738+ E74A             >mirror_Ptr      defl    $
 738+ E74A             >
 738+ E74A 7F 6E       >                dw      Dict_Ptr + 2        // xt
 738+ E74C             >Heap_Ptr        defl    $ - $E000           // save current HP
 738+ E74C             >
 738+ E74C             >Current_HP      defl  $ - $E000             // used to set HP once!
 738+ E74C             >
 738+ E74C             >//              ______________________________________________________________________
 738+ E74C             >//              Dictionary part
 738+ E74C             >
 738+ E74C             >                org     Dict_Ptr
 738+ 6E7D             >
 738+ 6E7D 4A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 738+ 6E7F             >
 738+ 6E7F             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 738+ 6E7F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 738+ 6E82             >
 738+ 6E82             >
 738+ 6E82             >                endif           ; ok        // for other definitions it "points" the correct handler
 738+ 6E82             >                // Use of "; ok" to suppress "warning[fwdref]"
 738+ 6E82             >
 738+ 6E82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 739+ 6E82 A3 63 C0 00                  dw      LIT, $C0                // 192
 740+ 6E86 4C 6B 93 69                  dw      STATE, STORE            // state !
 741+ 6E8A 52 68                        dw      EXIT                    // ;
 742+ 6E8C
 743+ 6E8C              //  ______________________________________________________________________
 744+ 6E8C              //
 745+ 6E8C              // smudge       --
 746+ 6E8C              // toggle smudge bit of latest definition
 747+ 6E8C                              Colon_Def SMUDGE, "SMUDGE", is_normal
 747+ 6E8C             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 747+ 6E8C             >
 747+ 6E8C             >Dict_Ptr        defl    $
 747+ 6E8C             >
 747+ 6E8C             >//              ______________________________________________________________________
 747+ 6E8C             >//              Heap part
 747+ 6E8C             >
 747+ 6E8C             >
 747+ 6E8C             >                org     (Heap_Ptr & $1FFF) + $E000
 747+ E74C             >
 747+ E74C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 747+ E74C             >Latest_Definition defl  Heap_Ptr
 747+ E74C             >
 747+ E74C             >                // dummy db directives used to calculate length of namec
 747+ E74C 53 4D 55 44 >                db      "SMUDGE"
 747+ E750 47 45       >
 747+ E752             >len_NFA         defl    $ - temp_NFA
 747+ E752             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 747+ E74C             >
 747+ E74C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 747+ E74D 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 747+ E751 47 45       >
 747+ E753             >                org     $-1                 // alter last byte of Name just above to set
 747+ E752 C5          >                db      {b $} | END_BIT     // msb as name end
 747+ E753             >
 747+ E753 46 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 747+ E755             >Prev_Ptr        defl    Heap_Ptr
 747+ E755             >
 747+ E755             >mirror_Ptr      defl    $
 747+ E755             >
 747+ E755 8E 6E       >                dw      Dict_Ptr + 2        // xt
 747+ E757             >Heap_Ptr        defl    $ - $E000           // save current HP
 747+ E757             >
 747+ E757             >Current_HP      defl  $ - $E000             // used to set HP once!
 747+ E757             >
 747+ E757             >//              ______________________________________________________________________
 747+ E757             >//              Dictionary part
 747+ E757             >
 747+ E757             >                org     Dict_Ptr
 747+ 6E8C             >
 747+ 6E8C 55 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 747+ 6E8E             >
 747+ 6E8E             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 747+ 6E8E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 747+ 6E91             >
 747+ 6E91             >
 747+ 6E91             >                endif           ; ok        // for other definitions it "points" the correct handler
 747+ 6E91             >                // Use of "; ok" to suppress "warning[fwdref]"
 747+ 6E91             >
 747+ 6E91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 748+ 6E91 52 6D                        dw      LATEST                  // latest
 749+ 6E93 A3 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 750+ 6E97 80 69                        dw      TOGGLE                  // toggle
 751+ 6E99 52 68                        dw      EXIT                    // ;
 752+ 6E9B
 753+ 6E9B              //  ______________________________________________________________________
 754+ 6E9B              //
 755+ 6E9B              // immediate    --
 756+ 6E9B              // make immediate the latest definition
 757+ 6E9B                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 757+ 6E9B             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 757+ 6E9B             >
 757+ 6E9B             >Dict_Ptr        defl    $
 757+ 6E9B             >
 757+ 6E9B             >//              ______________________________________________________________________
 757+ 6E9B             >//              Heap part
 757+ 6E9B             >
 757+ 6E9B             >
 757+ 6E9B             >                org     (Heap_Ptr & $1FFF) + $E000
 757+ E757             >
 757+ E757             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 757+ E757             >Latest_Definition defl  Heap_Ptr
 757+ E757             >
 757+ E757             >                // dummy db directives used to calculate length of namec
 757+ E757 49 4D 4D 45 >                db      "IMMEDIATE"
 757+ E75B 44 49 41 54 >
 757+ E75F 45          >
 757+ E760             >len_NFA         defl    $ - temp_NFA
 757+ E760             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 757+ E757             >
 757+ E757 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 757+ E758 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 757+ E75C 44 49 41 54 >
 757+ E760 45          >
 757+ E761             >                org     $-1                 // alter last byte of Name just above to set
 757+ E760 C5          >                db      {b $} | END_BIT     // msb as name end
 757+ E761             >
 757+ E761 4C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 757+ E763             >Prev_Ptr        defl    Heap_Ptr
 757+ E763             >
 757+ E763             >mirror_Ptr      defl    $
 757+ E763             >
 757+ E763 9D 6E       >                dw      Dict_Ptr + 2        // xt
 757+ E765             >Heap_Ptr        defl    $ - $E000           // save current HP
 757+ E765             >
 757+ E765             >Current_HP      defl  $ - $E000             // used to set HP once!
 757+ E765             >
 757+ E765             >//              ______________________________________________________________________
 757+ E765             >//              Dictionary part
 757+ E765             >
 757+ E765             >                org     Dict_Ptr
 757+ 6E9B             >
 757+ 6E9B 63 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 757+ 6E9D             >
 757+ 6E9D             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 757+ 6E9D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 757+ 6EA0             >
 757+ 6EA0             >
 757+ 6EA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 757+ 6EA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 757+ 6EA0             >
 757+ 6EA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 758+ 6EA0 52 6D                        dw      LATEST                  // latest
 759+ 6EA2 A3 63 40 00                  dw      LIT, $40                // 64
 760+ 6EA6 80 69                        dw      TOGGLE                  // toggle
 761+ 6EA8 52 68                        dw      EXIT                    // ;
 762+ 6EAA
 763+ 6EAA              //  ______________________________________________________________________
 764+ 6EAA              //
 765+ 6EAA              // hex          --
 766+ 6EAA              // change numeration base
 767+ 6EAA                              Colon_Def HEX, "HEX", is_normal
 767+ 6EAA             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 767+ 6EAA             >
 767+ 6EAA             >Dict_Ptr        defl    $
 767+ 6EAA             >
 767+ 6EAA             >//              ______________________________________________________________________
 767+ 6EAA             >//              Heap part
 767+ 6EAA             >
 767+ 6EAA             >
 767+ 6EAA             >                org     (Heap_Ptr & $1FFF) + $E000
 767+ E765             >
 767+ E765             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 767+ E765             >Latest_Definition defl  Heap_Ptr
 767+ E765             >
 767+ E765             >                // dummy db directives used to calculate length of namec
 767+ E765 48 45 58    >                db      "HEX"
 767+ E768             >len_NFA         defl    $ - temp_NFA
 767+ E768             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 767+ E765             >
 767+ E765 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 767+ E766 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 767+ E769             >                org     $-1                 // alter last byte of Name just above to set
 767+ E768 D8          >                db      {b $} | END_BIT     // msb as name end
 767+ E769             >
 767+ E769 57 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 767+ E76B             >Prev_Ptr        defl    Heap_Ptr
 767+ E76B             >
 767+ E76B             >mirror_Ptr      defl    $
 767+ E76B             >
 767+ E76B AC 6E       >                dw      Dict_Ptr + 2        // xt
 767+ E76D             >Heap_Ptr        defl    $ - $E000           // save current HP
 767+ E76D             >
 767+ E76D             >Current_HP      defl  $ - $E000             // used to set HP once!
 767+ E76D             >
 767+ E76D             >//              ______________________________________________________________________
 767+ E76D             >//              Dictionary part
 767+ E76D             >
 767+ E76D             >                org     Dict_Ptr
 767+ 6EAA             >
 767+ 6EAA 6B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 767+ 6EAC             >
 767+ 6EAC             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 767+ 6EAC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 767+ 6EAF             >
 767+ 6EAF             >
 767+ 6EAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 767+ 6EAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 767+ 6EAF             >
 767+ 6EAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 768+ 6EAF A3 63 10 00                  dw      LIT, 16                 // 16
 769+ 6EB3 52 6B 93 69                  dw      BASE, STORE             // base !
 770+ 6EB7 52 68                        dw      EXIT                    // ;
 771+ 6EB9
 772+ 6EB9              //  ______________________________________________________________________
 773+ 6EB9              //
 774+ 6EB9              // decimal      --
 775+ 6EB9              // change numeration base
 776+ 6EB9                              Colon_Def DECIMAL, "DECIMAL", is_normal
 776+ 6EB9             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 776+ 6EB9             >
 776+ 6EB9             >Dict_Ptr        defl    $
 776+ 6EB9             >
 776+ 6EB9             >//              ______________________________________________________________________
 776+ 6EB9             >//              Heap part
 776+ 6EB9             >
 776+ 6EB9             >
 776+ 6EB9             >                org     (Heap_Ptr & $1FFF) + $E000
 776+ E76D             >
 776+ E76D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 776+ E76D             >Latest_Definition defl  Heap_Ptr
 776+ E76D             >
 776+ E76D             >                // dummy db directives used to calculate length of namec
 776+ E76D 44 45 43 49 >                db      "DECIMAL"
 776+ E771 4D 41 4C    >
 776+ E774             >len_NFA         defl    $ - temp_NFA
 776+ E774             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 776+ E76D             >
 776+ E76D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 776+ E76E 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 776+ E772 4D 41 4C    >
 776+ E775             >                org     $-1                 // alter last byte of Name just above to set
 776+ E774 CC          >                db      {b $} | END_BIT     // msb as name end
 776+ E775             >
 776+ E775 65 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 776+ E777             >Prev_Ptr        defl    Heap_Ptr
 776+ E777             >
 776+ E777             >mirror_Ptr      defl    $
 776+ E777             >
 776+ E777 BB 6E       >                dw      Dict_Ptr + 2        // xt
 776+ E779             >Heap_Ptr        defl    $ - $E000           // save current HP
 776+ E779             >
 776+ E779             >Current_HP      defl  $ - $E000             // used to set HP once!
 776+ E779             >
 776+ E779             >//              ______________________________________________________________________
 776+ E779             >//              Dictionary part
 776+ E779             >
 776+ E779             >                org     Dict_Ptr
 776+ 6EB9             >
 776+ 6EB9 77 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 776+ 6EBB             >
 776+ 6EBB             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 776+ 6EBB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 776+ 6EBE             >
 776+ 6EBE             >
 776+ 6EBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 776+ 6EBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 776+ 6EBE             >
 776+ 6EBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 777+ 6EBE A3 63 0A 00                  dw      LIT, 10                 // 10
 778+ 6EC2 52 6B 93 69                  dw      BASE, STORE             // base !
 779+ 6EC6 52 68                        dw      EXIT                    // ;
 780+ 6EC8
 781+ 6EC8              //  ______________________________________________________________________
 782+ 6EC8              //
 783+ 6EC8              // (;code)       --
 784+ 6EC8              // patch to CFA to call/jump to the "following code"
 785+ 6EC8                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 785+ 6EC8             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 785+ 6EC8             >
 785+ 6EC8             >Dict_Ptr        defl    $
 785+ 6EC8             >
 785+ 6EC8             >//              ______________________________________________________________________
 785+ 6EC8             >//              Heap part
 785+ 6EC8             >
 785+ 6EC8             >
 785+ 6EC8             >                org     (Heap_Ptr & $1FFF) + $E000
 785+ E779             >
 785+ E779             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 785+ E779             >Latest_Definition defl  Heap_Ptr
 785+ E779             >
 785+ E779             >                // dummy db directives used to calculate length of namec
 785+ E779 28 3B 43 4F >                db      "(;CODE)"
 785+ E77D 44 45 29    >
 785+ E780             >len_NFA         defl    $ - temp_NFA
 785+ E780             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 785+ E779             >
 785+ E779 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 785+ E77A 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 785+ E77E 44 45 29    >
 785+ E781             >                org     $-1                 // alter last byte of Name just above to set
 785+ E780 A9          >                db      {b $} | END_BIT     // msb as name end
 785+ E781             >
 785+ E781 6D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 785+ E783             >Prev_Ptr        defl    Heap_Ptr
 785+ E783             >
 785+ E783             >mirror_Ptr      defl    $
 785+ E783             >
 785+ E783 CA 6E       >                dw      Dict_Ptr + 2        // xt
 785+ E785             >Heap_Ptr        defl    $ - $E000           // save current HP
 785+ E785             >
 785+ E785             >Current_HP      defl  $ - $E000             // used to set HP once!
 785+ E785             >
 785+ E785             >//              ______________________________________________________________________
 785+ E785             >//              Dictionary part
 785+ E785             >
 785+ E785             >                org     Dict_Ptr
 785+ 6EC8             >
 785+ 6EC8 83 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 785+ 6ECA             >
 785+ 6ECA             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 785+ 6ECA CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 785+ 6ECD             >
 785+ 6ECD             >
 785+ 6ECD             >                endif           ; ok        // for other definitions it "points" the correct handler
 785+ 6ECD             >                // Use of "; ok" to suppress "warning[fwdref]"
 785+ 6ECD             >
 785+ 6ECD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 786+ 6ECD 67 68                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 787+ 6ECF 52 6D                        dw      LATEST                  // latest   ( Word being defined in this moment )
 788+ 6ED1 B0 6D 8B 6D                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 789+ 6ED5
 790+ 6ED5 A3 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 791+ 6ED9 07 69 A7 69                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 792+ 6EDD BE 68                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 793+ 6EDF
 794+ 6EDF 93 69                        dw      STORE                   // !
 795+ 6EE1 52 68                        dw      EXIT                    // ;
 796+ 6EE3
 797+ 6EE3              //  ______________________________________________________________________
 798+ 6EE3              //
 799+ 6EE3              // ;code        --
 800+ 6EE3                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 800+ 6EE3             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 800+ 6EE3             >
 800+ 6EE3             >Dict_Ptr        defl    $
 800+ 6EE3             >
 800+ 6EE3             >//              ______________________________________________________________________
 800+ 6EE3             >//              Heap part
 800+ 6EE3             >
 800+ 6EE3             >
 800+ 6EE3             >                org     (Heap_Ptr & $1FFF) + $E000
 800+ E785             >
 800+ E785             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 800+ E785             >Latest_Definition defl  Heap_Ptr
 800+ E785             >
 800+ E785             >                // dummy db directives used to calculate length of namec
 800+ E785 3B 43 4F 44 >                db      ";CODE"
 800+ E789 45          >
 800+ E78A             >len_NFA         defl    $ - temp_NFA
 800+ E78A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 800+ E785             >
 800+ E785 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 800+ E786 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 800+ E78A 45          >
 800+ E78B             >                org     $-1                 // alter last byte of Name just above to set
 800+ E78A C5          >                db      {b $} | END_BIT     // msb as name end
 800+ E78B             >
 800+ E78B 79 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 800+ E78D             >Prev_Ptr        defl    Heap_Ptr
 800+ E78D             >
 800+ E78D             >mirror_Ptr      defl    $
 800+ E78D             >
 800+ E78D E5 6E       >                dw      Dict_Ptr + 2        // xt
 800+ E78F             >Heap_Ptr        defl    $ - $E000           // save current HP
 800+ E78F             >
 800+ E78F             >Current_HP      defl  $ - $E000             // used to set HP once!
 800+ E78F             >
 800+ E78F             >//              ______________________________________________________________________
 800+ E78F             >//              Dictionary part
 800+ E78F             >
 800+ E78F             >                org     Dict_Ptr
 800+ 6EE3             >
 800+ 6EE3 8D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 800+ 6EE5             >
 800+ 6EE5             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 800+ 6EE5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 800+ 6EE8             >
 800+ 6EE8             >
 800+ 6EE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 800+ 6EE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 800+ 6EE8             >
 800+ 6EE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 801+ 6EE8 2A 6E                        dw      QCSP                    // ?csp
 802+ 6EEA 52 6E                        dw      COMPILE                 // compile
 803+ 6EEC CA 6E                        dw      C_SEMICOLON_CODE        // (;code)
 804+ 6EEE 72 6E                        dw      SQUARED_OPEN            // [
 805+ 6EF0 48 6A                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 806+ 6EF2 52 68                        dw      EXIT                    // ; immediate
 807+ 6EF4
 808+ 6EF4              //  ______________________________________________________________________
 809+ 6EF4              //
 810+ 6EF4              // <builds      --
 811+ 6EF4                              Colon_Def CBUILDS, "<BUILDS", is_normal
 811+ 6EF4             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 811+ 6EF4             >
 811+ 6EF4             >Dict_Ptr        defl    $
 811+ 6EF4             >
 811+ 6EF4             >//              ______________________________________________________________________
 811+ 6EF4             >//              Heap part
 811+ 6EF4             >
 811+ 6EF4             >
 811+ 6EF4             >                org     (Heap_Ptr & $1FFF) + $E000
 811+ E78F             >
 811+ E78F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 811+ E78F             >Latest_Definition defl  Heap_Ptr
 811+ E78F             >
 811+ E78F             >                // dummy db directives used to calculate length of namec
 811+ E78F 3C 42 55 49 >                db      "<BUILDS"
 811+ E793 4C 44 53    >
 811+ E796             >len_NFA         defl    $ - temp_NFA
 811+ E796             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 811+ E78F             >
 811+ E78F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 811+ E790 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 811+ E794 4C 44 53    >
 811+ E797             >                org     $-1                 // alter last byte of Name just above to set
 811+ E796 D3          >                db      {b $} | END_BIT     // msb as name end
 811+ E797             >
 811+ E797 85 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 811+ E799             >Prev_Ptr        defl    Heap_Ptr
 811+ E799             >
 811+ E799             >mirror_Ptr      defl    $
 811+ E799             >
 811+ E799 F6 6E       >                dw      Dict_Ptr + 2        // xt
 811+ E79B             >Heap_Ptr        defl    $ - $E000           // save current HP
 811+ E79B             >
 811+ E79B             >Current_HP      defl  $ - $E000             // used to set HP once!
 811+ E79B             >
 811+ E79B             >//              ______________________________________________________________________
 811+ E79B             >//              Dictionary part
 811+ E79B             >
 811+ E79B             >                org     Dict_Ptr
 811+ 6EF4             >
 811+ 6EF4 99 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 811+ 6EF6             >
 811+ 6EF6             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 811+ 6EF6 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 811+ 6EF9             >
 811+ 6EF9             >
 811+ 6EF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 811+ 6EF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 811+ 6EF9             >
 811+ 6EF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 812+ 6EF9 81 6A                        dw      ZERO                    // 0
 813+ 6EFB 4C 6A                        dw      CONSTANT                // constant
 814+ 6EFD 52 68                        dw      EXIT                    // ;
 815+ 6EFF
 816+ 6EFF              //  ______________________________________________________________________
 817+ 6EFF              //
 818+ 6EFF              // recurse      --
 819+ 6EFF              //              Colon_Def RECURSE, "RECURSE", is_immediate
 820+ 6EFF              //              dw      QCOMP                   // ?comp
 821+ 6EFF              //              dw      LATEST                  // latest
 822+ 6EFF              //              dw      PFA, CFA                // pfa cfa
 823+ 6EFF              //              dw      COMMA                   // ,
 824+ 6EFF              //              dw      EXIT                    // ; immediate
 825+ 6EFF
 826+ 6EFF              //  ______________________________________________________________________
 827+ 6EFF              //
 828+ 6EFF              // does>     --
 829+ 6EFF                              Colon_Def DOES_TO, "DOES>", is_normal
 829+ 6EFF             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 829+ 6EFF             >
 829+ 6EFF             >Dict_Ptr        defl    $
 829+ 6EFF             >
 829+ 6EFF             >//              ______________________________________________________________________
 829+ 6EFF             >//              Heap part
 829+ 6EFF             >
 829+ 6EFF             >
 829+ 6EFF             >                org     (Heap_Ptr & $1FFF) + $E000
 829+ E79B             >
 829+ E79B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 829+ E79B             >Latest_Definition defl  Heap_Ptr
 829+ E79B             >
 829+ E79B             >                // dummy db directives used to calculate length of namec
 829+ E79B 44 4F 45 53 >                db      "DOES>"
 829+ E79F 3E          >
 829+ E7A0             >len_NFA         defl    $ - temp_NFA
 829+ E7A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 829+ E79B             >
 829+ E79B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 829+ E79C 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 829+ E7A0 3E          >
 829+ E7A1             >                org     $-1                 // alter last byte of Name just above to set
 829+ E7A0 BE          >                db      {b $} | END_BIT     // msb as name end
 829+ E7A1             >
 829+ E7A1 8F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 829+ E7A3             >Prev_Ptr        defl    Heap_Ptr
 829+ E7A3             >
 829+ E7A3             >mirror_Ptr      defl    $
 829+ E7A3             >
 829+ E7A3 01 6F       >                dw      Dict_Ptr + 2        // xt
 829+ E7A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 829+ E7A5             >
 829+ E7A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 829+ E7A5             >
 829+ E7A5             >//              ______________________________________________________________________
 829+ E7A5             >//              Dictionary part
 829+ E7A5             >
 829+ E7A5             >                org     Dict_Ptr
 829+ 6EFF             >
 829+ 6EFF A3 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 829+ 6F01             >
 829+ 6F01             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 829+ 6F01 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 829+ 6F04             >
 829+ 6F04             >
 829+ 6F04             >                endif           ; ok        // for other definitions it "points" the correct handler
 829+ 6F04             >                // Use of "; ok" to suppress "warning[fwdref]"
 829+ 6F04             >
 829+ 6F04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 830+ 6F04 67 68                        dw      R_TO                    // r>
 831+ 6F06 52 6D                        dw      LATEST                  // latest
 832+ 6F08 B0 6D                        dw      PFA                     // pfa
 833+ 6F0A 93 69                        dw      STORE                   // !
 834+ 6F0C CA 6E                        dw      C_SEMICOLON_CODE        // ;code
 835+ 6F0E              Does_Ptr:
 836+ 6F0E                              // via call coded in CFA
 837+ 6F0E EB                           ex      de, hl //**
 838+ 6F0F                              // *** ldhlrp
 839+ 6F0F 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 840+ 6F10 70                           ld      (hl), b
 841+ 6F11 2B                           dec     hl
 842+ 6F12 71                           ld      (hl), c
 843+ 6F13                              // *** ldrphl
 844+ 6F13 EB                           ex      de, hl //**
 845+ 6F14 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 846+ 6F15
 847+ 6F15 4E                           ld      c, (hl)
 848+ 6F16 23                           inc     hl
 849+ 6F17 46                           ld      b, (hl)
 850+ 6F18 23                           inc     hl
 851+ 6F19
 852+ 6F19                              psh1
 852+ 6F19 E5          >                push    hl
 852+ 6F1A DD E9       >                jp      (ix)
 853+ 6F1C                              // SMUDGE !
 854+ 6F1C
 855+ 6F1C              //  ______________________________________________________________________
 856+ 6F1C              //
 857+ 6F1C              // count        a -- a2 n
 858+ 6F1C              // expects a counted string at address a, returns string address and counter
 859+ 6F1C                              New_Def COUNT, "COUNT", is_code, is_normal
 859+ 6F1C             >
 859+ 6F1C             >Dict_Ptr        defl    $
 859+ 6F1C             >
 859+ 6F1C             >//              ______________________________________________________________________
 859+ 6F1C             >//              Heap part
 859+ 6F1C             >
 859+ 6F1C             >
 859+ 6F1C             >                org     (Heap_Ptr & $1FFF) + $E000
 859+ E7A5             >
 859+ E7A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 859+ E7A5             >Latest_Definition defl  Heap_Ptr
 859+ E7A5             >
 859+ E7A5             >                // dummy db directives used to calculate length of namec
 859+ E7A5 43 4F 55 4E >                db      "COUNT"
 859+ E7A9 54          >
 859+ E7AA             >len_NFA         defl    $ - temp_NFA
 859+ E7AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 859+ E7A5             >
 859+ E7A5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 859+ E7A6 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 859+ E7AA 54          >
 859+ E7AB             >                org     $-1                 // alter last byte of Name just above to set
 859+ E7AA D4          >                db      {b $} | END_BIT     // msb as name end
 859+ E7AB             >
 859+ E7AB 9B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 859+ E7AD             >Prev_Ptr        defl    Heap_Ptr
 859+ E7AD             >
 859+ E7AD             >mirror_Ptr      defl    $
 859+ E7AD             >
 859+ E7AD 1E 6F       >                dw      Dict_Ptr + 2        // xt
 859+ E7AF             >Heap_Ptr        defl    $ - $E000           // save current HP
 859+ E7AF             >
 859+ E7AF             >Current_HP      defl  $ - $E000             // used to set HP once!
 859+ E7AF             >
 859+ E7AF             >//              ______________________________________________________________________
 859+ E7AF             >//              Dictionary part
 859+ E7AF             >
 859+ E7AF             >                org     Dict_Ptr
 859+ 6F1C             >
 859+ 6F1C AD 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 859+ 6F1E             >
 859+ 6F1E             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 859+ 6F1E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 859+ 6F1E ~           >
 859+ 6F1E ~           >
 859+ 6F1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 859+ 6F1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 859+ 6F1E             >
 859+ 6F1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 860+ 6F1E D9                           exx
 861+ 6F1F E1                           pop     hl
 862+ 6F20 5E                           ld      e, (hl)
 863+ 6F21 16 00                        ld      d, 0
 864+ 6F23 23                           inc     hl
 865+ 6F24              Count_Here:
 866+ 6F24 E5                           push    hl
 867+ 6F25 D5                           push    de
 868+ 6F26 D9                           exx
 869+ 6F27                              next
 869+ 6F27 DD E9       >                jp      (ix)
 870+ 6F29              //                pop     hl
 871+ 6F29              //                ld      a, (hl)
 872+ 6F29              //                inc     hl
 873+ 6F29              //                push    hl
 874+ 6F29              //                ld      h, 0
 875+ 6F29              //                ld      l, a
 876+ 6F29              //                push    hl
 877+ 6F29              //                next
 878+ 6F29
 879+ 6F29              //  ______________________________________________________________________
 880+ 6F29              //
 881+ 6F29              // bounds       a n -- a+n n
 882+ 6F29              // given an address and a length ( a n ) calculate the bound addresses
 883+ 6F29              // suitable for DO-LOOP
 884+ 6F29                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 884+ 6F29             >
 884+ 6F29             >Dict_Ptr        defl    $
 884+ 6F29             >
 884+ 6F29             >//              ______________________________________________________________________
 884+ 6F29             >//              Heap part
 884+ 6F29             >
 884+ 6F29             >
 884+ 6F29             >                org     (Heap_Ptr & $1FFF) + $E000
 884+ E7AF             >
 884+ E7AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 884+ E7AF             >Latest_Definition defl  Heap_Ptr
 884+ E7AF             >
 884+ E7AF             >                // dummy db directives used to calculate length of namec
 884+ E7AF 42 4F 55 4E >                db      "BOUNDS"
 884+ E7B3 44 53       >
 884+ E7B5             >len_NFA         defl    $ - temp_NFA
 884+ E7B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 884+ E7AF             >
 884+ E7AF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 884+ E7B0 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 884+ E7B4 44 53       >
 884+ E7B6             >                org     $-1                 // alter last byte of Name just above to set
 884+ E7B5 D3          >                db      {b $} | END_BIT     // msb as name end
 884+ E7B6             >
 884+ E7B6 A5 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 884+ E7B8             >Prev_Ptr        defl    Heap_Ptr
 884+ E7B8             >
 884+ E7B8             >mirror_Ptr      defl    $
 884+ E7B8             >
 884+ E7B8 2B 6F       >                dw      Dict_Ptr + 2        // xt
 884+ E7BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 884+ E7BA             >
 884+ E7BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 884+ E7BA             >
 884+ E7BA             >//              ______________________________________________________________________
 884+ E7BA             >//              Dictionary part
 884+ E7BA             >
 884+ E7BA             >                org     Dict_Ptr
 884+ 6F29             >
 884+ 6F29 B8 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 884+ 6F2B             >
 884+ 6F2B             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 884+ 6F2B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 884+ 6F2B ~           >
 884+ 6F2B ~           >
 884+ 6F2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 884+ 6F2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 884+ 6F2B             >
 884+ 6F2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 885+ 6F2B D9                           exx
 886+ 6F2C E1                           pop     hl
 887+ 6F2D D1                           pop     de
 888+ 6F2E 19                           add     hl, de
 889+ 6F2F 18 F3                        jr      Count_Here
 890+ 6F31                              // push    hl
 891+ 6F31                              // push    de
 892+ 6F31                              // exx
 893+ 6F31                              // next
 894+ 6F31
 895+ 6F31              //  ______________________________________________________________________
 896+ 6F31              //
 897+ 6F31              // leave        --
 898+ 6F31              // Compile (leave) to leave current LOOP and jump just after it
 899+ 6F31                              Colon_Def LEAVE, "LEAVE", is_immediate
 899+ 6F31             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 899+ 6F31             >
 899+ 6F31             >Dict_Ptr        defl    $
 899+ 6F31             >
 899+ 6F31             >//              ______________________________________________________________________
 899+ 6F31             >//              Heap part
 899+ 6F31             >
 899+ 6F31             >
 899+ 6F31             >                org     (Heap_Ptr & $1FFF) + $E000
 899+ E7BA             >
 899+ E7BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 899+ E7BA             >Latest_Definition defl  Heap_Ptr
 899+ E7BA             >
 899+ E7BA             >                // dummy db directives used to calculate length of namec
 899+ E7BA 4C 45 41 56 >                db      "LEAVE"
 899+ E7BE 45          >
 899+ E7BF             >len_NFA         defl    $ - temp_NFA
 899+ E7BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 899+ E7BA             >
 899+ E7BA C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 899+ E7BB 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 899+ E7BF 45          >
 899+ E7C0             >                org     $-1                 // alter last byte of Name just above to set
 899+ E7BF C5          >                db      {b $} | END_BIT     // msb as name end
 899+ E7C0             >
 899+ E7C0 AF 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 899+ E7C2             >Prev_Ptr        defl    Heap_Ptr
 899+ E7C2             >
 899+ E7C2             >mirror_Ptr      defl    $
 899+ E7C2             >
 899+ E7C2 33 6F       >                dw      Dict_Ptr + 2        // xt
 899+ E7C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 899+ E7C4             >
 899+ E7C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 899+ E7C4             >
 899+ E7C4             >//              ______________________________________________________________________
 899+ E7C4             >//              Dictionary part
 899+ E7C4             >
 899+ E7C4             >                org     Dict_Ptr
 899+ 6F31             >
 899+ 6F31 C2 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 899+ 6F33             >
 899+ 6F33             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 899+ 6F33 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 899+ 6F36             >
 899+ 6F36             >
 899+ 6F36             >                endif           ; ok        // for other definitions it "points" the correct handler
 899+ 6F36             >                // Use of "; ok" to suppress "warning[fwdref]"
 899+ 6F36             >
 899+ 6F36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 900+ 6F36 52 6E 00 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 901+ 6F3A A6 6B 5C 68                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 901+ 6F3E 81 6A BC 6B
 902+ 6F42 81 6A 81 6A                  dw      ZERO, ZERO
 903+ 6F46 39 68 2B 69                  dw      SPFETCH, DUP
 904+ 6F4A D4 68 D4 68                  dw      CELL_PLUS, CELL_PLUS
 905+ 6F4E 1B 69                        dw      TUCK
 906+ 6F50 64 6B 89 69                  dw      CSP, FETCH
 907+ 6F54 24 69 E5 6B                  dw      SWAP, SUBTRACT
 908+ 6F58 8D 67                        dw      CMOVE
 909+ 6F5A 64 6B 89 69                  dw      CSP, FETCH, CELL_MINUS
 909+ 6F5E D9 68
 910+ 6F60 67 68 07 69                  dw      R_TO, OVER, STORE
 910+ 6F64 93 69
 911+ 6F66 D9 68 81 6A                  dw      CELL_MINUS, ZERO
 912+ 6F6A 24 69 93 69                  dw      SWAP, STORE
 913+ 6F6E 52 68                        dw      EXIT                    // ;
 914+ 6F70
 915+ 6F70              //  ______________________________________________________________________
 916+ 6F70              //
 917+ 6F70              // type         a n --
 918+ 6F70              // Sends to current output channel n characters starting at address a.
 919+ 6F70                              Colon_Def TYPE, "TYPE", is_normal
 919+ 6F70             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 919+ 6F70             >
 919+ 6F70             >Dict_Ptr        defl    $
 919+ 6F70             >
 919+ 6F70             >//              ______________________________________________________________________
 919+ 6F70             >//              Heap part
 919+ 6F70             >
 919+ 6F70             >
 919+ 6F70             >                org     (Heap_Ptr & $1FFF) + $E000
 919+ E7C4             >
 919+ E7C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 919+ E7C4             >Latest_Definition defl  Heap_Ptr
 919+ E7C4             >
 919+ E7C4             >                // dummy db directives used to calculate length of namec
 919+ E7C4 54 59 50 45 >                db      "TYPE"
 919+ E7C8             >len_NFA         defl    $ - temp_NFA
 919+ E7C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 919+ E7C4             >
 919+ E7C4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 919+ E7C5 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 919+ E7C9             >                org     $-1                 // alter last byte of Name just above to set
 919+ E7C8 C5          >                db      {b $} | END_BIT     // msb as name end
 919+ E7C9             >
 919+ E7C9 BA 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 919+ E7CB             >Prev_Ptr        defl    Heap_Ptr
 919+ E7CB             >
 919+ E7CB             >mirror_Ptr      defl    $
 919+ E7CB             >
 919+ E7CB 72 6F       >                dw      Dict_Ptr + 2        // xt
 919+ E7CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 919+ E7CD             >
 919+ E7CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 919+ E7CD             >
 919+ E7CD             >//              ______________________________________________________________________
 919+ E7CD             >//              Dictionary part
 919+ E7CD             >
 919+ E7CD             >                org     Dict_Ptr
 919+ 6F70             >
 919+ 6F70 CB 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 919+ 6F72             >
 919+ 6F72             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 919+ 6F72 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 919+ 6F75             >
 919+ 6F75             >
 919+ 6F75             >                endif           ; ok        // for other definitions it "points" the correct handler
 919+ 6F75             >                // Use of "; ok" to suppress "warning[fwdref]"
 919+ 6F75             >
 919+ 6F75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 920+ 6F75 2B 6F                        dw      BOUNDS                  // bounds
 921+ 6F77 0C 64                        dw      C_Q_DO                  // ?do
 922+ 6F79 0C 00                        dw      Type_Skip - $
 923+ 6F7B              Type_Loop:
 924+ 6F7B 3A 64 9E 69                  dw          I, CFETCH           //      i c@
 925+ 6F7F 60 6C                        dw          EMIT                //      emit
 926+ 6F81 E0 63                        dw      C_LOOP                  // loop
 927+ 6F83 F8 FF                        dw      Type_Loop - $
 928+ 6F85              Type_Skip:
 929+ 6F85 52 68                        dw      EXIT                    // ;
 930+ 6F87
 931+ 6F87              //  ______________________________________________________________________
 932+ 6F87              //
 933+ 6F87              // -trailing    a n1 -- a n2
 934+ 6F87              // Assumes that an n1 bytes-long string is stored at address a
 935+ 6F87              // and the string contains a space delimited word,
 936+ 6F87              // Finds n2 as the position of the first character after the word.
 937+ 6F87                              Colon_Def LTRAILING, "-TRAILING", is_normal
 937+ 6F87             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 937+ 6F87             >
 937+ 6F87             >Dict_Ptr        defl    $
 937+ 6F87             >
 937+ 6F87             >//              ______________________________________________________________________
 937+ 6F87             >//              Heap part
 937+ 6F87             >
 937+ 6F87             >
 937+ 6F87             >                org     (Heap_Ptr & $1FFF) + $E000
 937+ E7CD             >
 937+ E7CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 937+ E7CD             >Latest_Definition defl  Heap_Ptr
 937+ E7CD             >
 937+ E7CD             >                // dummy db directives used to calculate length of namec
 937+ E7CD 2D 54 52 41 >                db      "-TRAILING"
 937+ E7D1 49 4C 49 4E >
 937+ E7D5 47          >
 937+ E7D6             >len_NFA         defl    $ - temp_NFA
 937+ E7D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 937+ E7CD             >
 937+ E7CD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 937+ E7CE 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 937+ E7D2 49 4C 49 4E >
 937+ E7D6 47          >
 937+ E7D7             >                org     $-1                 // alter last byte of Name just above to set
 937+ E7D6 C7          >                db      {b $} | END_BIT     // msb as name end
 937+ E7D7             >
 937+ E7D7 C4 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 937+ E7D9             >Prev_Ptr        defl    Heap_Ptr
 937+ E7D9             >
 937+ E7D9             >mirror_Ptr      defl    $
 937+ E7D9             >
 937+ E7D9 89 6F       >                dw      Dict_Ptr + 2        // xt
 937+ E7DB             >Heap_Ptr        defl    $ - $E000           // save current HP
 937+ E7DB             >
 937+ E7DB             >Current_HP      defl  $ - $E000             // used to set HP once!
 937+ E7DB             >
 937+ E7DB             >//              ______________________________________________________________________
 937+ E7DB             >//              Dictionary part
 937+ E7DB             >
 937+ E7DB             >                org     Dict_Ptr
 937+ 6F87             >
 937+ 6F87 D9 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 937+ 6F89             >
 937+ 6F89             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 937+ 6F89 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 937+ 6F8C             >
 937+ 6F8C             >
 937+ 6F8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 937+ 6F8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 937+ 6F8C             >
 937+ 6F8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 938+ 6F8C 2B 69 81 6A                  dw      DUP, ZERO               // dup 0
 939+ 6F90                                                              // do
 940+ 6F90 0C 64                        dw      C_Q_DO
 941+ 6F92 20 00                        dw      LTrailing_Leave - $
 942+ 6F94              LTrailing_Loop:
 943+ 6F94 67 69 A5 68                  dw          TWO_DUP, PLUS       //      2dup +
 944+ 6F98 C5 68                        dw          ONE_SUBTRACT        //      1-
 945+ 6F9A 9E 69                        dw          CFETCH              //      c@
 946+ 6F9C A4 6A E5 6B                  dw          BL, SUBTRACT        //      bl -
 947+ 6FA0                                                              //      if
 948+ 6FA0 F5 63                        dw          ZBRANCH
 949+ 6FA2 0A 00                        dw          LTrailing_Else - $
 950+ 6FA4 00 64                        dw              C_LEAVE         //          leave
 951+ 6FA6 0C 00                        dw              LTrailing_Leave - $
 952+ 6FA8 E8 63                        dw          BRANCH              //      else
 953+ 6FAA 04 00                        dw          LTrailing_Endif - $
 954+ 6FAC              LTrailing_Else:
 955+ 6FAC C5 68                        dw              ONE_SUBTRACT    //          1-
 956+ 6FAE              LTrailing_Endif:                                //      endif
 957+ 6FAE                                                              // loop
 958+ 6FAE E0 63                        dw      C_LOOP
 959+ 6FB0 E4 FF                        dw      LTrailing_Loop - $
 960+ 6FB2              LTrailing_Leave:
 961+ 6FB2 52 68                        dw      EXIT                    // ;
 962+ 6FB4
 963+ 6FB4              //  ______________________________________________________________________
 964+ 6FB4              //
 965+ 6FB4              // accept       a n1 -- n2
 966+ 6FB4              // Accepts at most n1 characters from terminal and stores them at address a
 967+ 6FB4              // CR stops input. A 'nul' is added as trailer.
 968+ 6FB4              // n2 is the string length. n2 is kept in span user variable also.
 969+ 6FB4                              Colon_Def ACCEPT, "ACCEPT", is_normal
 969+ 6FB4             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 969+ 6FB4             >
 969+ 6FB4             >Dict_Ptr        defl    $
 969+ 6FB4             >
 969+ 6FB4             >//              ______________________________________________________________________
 969+ 6FB4             >//              Heap part
 969+ 6FB4             >
 969+ 6FB4             >
 969+ 6FB4             >                org     (Heap_Ptr & $1FFF) + $E000
 969+ E7DB             >
 969+ E7DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ E7DB             >Latest_Definition defl  Heap_Ptr
 969+ E7DB             >
 969+ E7DB             >                // dummy db directives used to calculate length of namec
 969+ E7DB 41 43 43 45 >                db      "ACCEPT"
 969+ E7DF 50 54       >
 969+ E7E1             >len_NFA         defl    $ - temp_NFA
 969+ E7E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ E7DB             >
 969+ E7DB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ E7DC 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 969+ E7E0 50 54       >
 969+ E7E2             >                org     $-1                 // alter last byte of Name just above to set
 969+ E7E1 D4          >                db      {b $} | END_BIT     // msb as name end
 969+ E7E2             >
 969+ E7E2 CD 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 969+ E7E4             >Prev_Ptr        defl    Heap_Ptr
 969+ E7E4             >
 969+ E7E4             >mirror_Ptr      defl    $
 969+ E7E4             >
 969+ E7E4 B6 6F       >                dw      Dict_Ptr + 2        // xt
 969+ E7E6             >Heap_Ptr        defl    $ - $E000           // save current HP
 969+ E7E6             >
 969+ E7E6             >Current_HP      defl  $ - $E000             // used to set HP once!
 969+ E7E6             >
 969+ E7E6             >//              ______________________________________________________________________
 969+ E7E6             >//              Dictionary part
 969+ E7E6             >
 969+ E7E6             >                org     Dict_Ptr
 969+ 6FB4             >
 969+ 6FB4 E4 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 969+ 6FB6             >
 969+ 6FB6             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 6FB6 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 6FB9             >
 969+ 6FB9             >
 969+ 6FB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 6FB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 6FB9             >
 969+ 6FB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 6FB9 07 69 A5 68                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 970+ 6FBD 07 69
 971+ 6FBF 81 6A 3D 69                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 972+ 6FC3                                                              // do
 973+ 6FC3 0C 64                        dw      C_Q_DO
 974+ 6FC5 8C 00                        dw      Accept_Leave - $
 975+ 6FC7              Accept_Loop:
 976+ 6FC7 38 66                        dw          CUR
 977+ 6FC9 10 69 80 66                  dw          DROP, KEY           //      drop key        ( a  c )
 978+ 6FCD 2B 69                        dw          DUP                 //      dup             ( a  c  c )
 979+ 6FCF A3 63 0E 00                  dw          LIT, $0E            //      0E
 980+ 6FD3 C7 6A                        dw          PLUS_ORIGIN         //      +origin
 981+ 6FD5 89 69                        dw          FETCH               //      @               ( a  c  c  del )
 982+ 6FD7 F1 6B                        dw          EQUALS              //      =               ( a  c  c==del )
 983+ 6FD9                                                              //      if
 984+ 6FD9 F5 63                        dw          ZBRANCH
 985+ 6FDB 2C 00                        dw          Accept_Else_0 - $
 986+ 6FDD 10 69                        dw              DROP            //          drop        ( a  )
 987+ 6FDF 2B 69 3A 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 987+ 6FE3 F1 6B
 988+ 6FE5 88 6A 0C 68                  dw              ONE, AND_OP     //          1 and
 989+ 6FE9 2B 69                        dw              DUP             //          dup         ( a  a==i  a==i )
 990+ 6FEB 67 68                        dw              R_TO            //          r> 2 - + r>
 991+ 6FED E1 68 A5 68                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 992+ 6FF1 5C 68                        dw              TO_R            //
 993+ 6FF3                                                              //          if
 994+ 6FF3 F5 63                        dw              ZBRANCH
 995+ 6FF5 0A 00                        dw              Accept_Else_1 - $
 996+ 6FF7 A3 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 997+ 6FFB                                                              //          else
 998+ 6FFB E8 63                        dw              BRANCH
 999+ 6FFD 06 00                        dw              Accept_Endif_1 - $
1000+ 6FFF              Accept_Else_1:
1001+ 6FFF A3 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1002+ 7003              Accept_Endif_1:                                 //          endif
1003+ 7003 E8 63                        dw          BRANCH
1004+ 7005 2E 00                        dw          Accept_Endif_0 - $
1005+ 7007              Accept_Else_0:                                  //      else
1006+ 7007 2B 69                        dw              DUP             //          dup         ( a  c  c )
1007+ 7009 A3 63 0D 00                  dw              LIT, 13         //          13
1008+ 700D F1 6B                        dw              EQUALS          //          =           ( a  c  c==CR )
1009+ 700F                                                              //          if
1010+ 700F F5 63                        dw              ZBRANCH
1011+ 7011 0C 00                        dw              Accept_Else_2 - $
1012+ 7013 10 69 A4 6A                  dw                  DROP, BL    //              drop bl ( a  bl )
1013+ 7017 81 6A                        dw                  ZERO        //              0       ( a  c  0 )
1014+ 7019                                                              //          else
1015+ 7019 E8 63                        dw              BRANCH
1016+ 701B 04 00                        dw              Accept_Endif_2 - $
1017+ 701D              Accept_Else_2:
1018+ 701D 2B 69                        dw                  DUP         //              dup     ( a  c  c )
1019+ 701F                                                              //          endif
1020+ 701F              Accept_Endif_2:
1021+ 701F 3A 64 A7 69                  dw              I, CSTORE       //          i           ( a  c )
1022+ 7023 2B 69 A4 6A                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1022+ 7027 0A 6C
1023+ 7029                                                              //          if
1024+ 7029 F5 63                        dw              ZBRANCH
1025+ 702B 08 00                        dw              Accept_Endif_3 - $
1026+ 702D 67 68                        dw                  R_TO        //              r>
1027+ 702F C5 68                        dw                  ONE_SUBTRACT//              1-
1028+ 7031 5C 68                        dw                  TO_R        //              >r
1029+ 7033                                                              //          endif
1030+ 7033              Accept_Endif_3:
1031+ 7033              Accept_Endif_0:                                 //      endif
1032+ 7033 60 6C                        dw          EMIT                //      emit
1033+ 7035
1034+ 7035 81 6A 3A 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1034+ 7039 BE 68
1035+ 703B 93 69                        dw          STORE               //          ( zero pad )
1036+ 703D 3A 64                        dw          I                   //      i
1037+ 703F 3A 64 9E 69                  dw          I, CFETCH, ZEQUAL   //      i 0= if
1037+ 7043 77 68
1038+ 7045 F5 63                        dw          ZBRANCH             //
1039+ 7047 06 00                        dw              Accept_Endif_4 - $
1040+ 7049 00 64                        dw                  C_LEAVE     //              leave
1041+ 704B 06 00                        dw                  Accept_Leave - $
1042+ 704D              Accept_Endif_4:                                 //      endif
1043+ 704D                                                              // loop
1044+ 704D E0 63                        dw      C_LOOP
1045+ 704F 78 FF                        dw      Accept_Loop - $
1046+ 7051              Accept_Leave:
1047+ 7051 24 69 E5 6B                  dw      SWAP, SUBTRACT          // swap -
1048+ 7055 BE 68                        dw      ONE_PLUS                // 1+
1049+ 7057 2B 69 94 6B                  dw      DUP, SPAN, STORE        // dup span !
1049+ 705B 93 69
1050+ 705D 52 68                        dw      EXIT                    // ;
1051+ 705F
1052+ 705F              //  ______________________________________________________________________
1053+ 705F              //
1054+ 705F              // expect      a n --
1055+ 705F              // Accepts at most n1 characters from terminal and stores them at address a
1056+ 705F              // CR stops input. A 'nul' is added as trailer.
1057+ 705F              // n2 is the string length. n2 is kept in span user variable also.
1058+ 705F              //              Colon_Def EXPECT, "EXPECT", is_normal
1059+ 705F              //              dw      ACCEPT, DROP            // accept drop
1060+ 705F              //              dw      EXIT                    // ;
1061+ 705F
1062+ 705F              //  ______________________________________________________________________
1063+ 705F              //
1064+ 705F              // query        --
1065+ 705F              // Accept at most 80 character from console. CR stops.
1066+ 705F              // Text is stored in TIB. Variable IN is zeroed.
1067+ 705F                              Colon_Def QUERY, "QUERY", is_normal
1067+ 705F             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1067+ 705F             >
1067+ 705F             >Dict_Ptr        defl    $
1067+ 705F             >
1067+ 705F             >//              ______________________________________________________________________
1067+ 705F             >//              Heap part
1067+ 705F             >
1067+ 705F             >
1067+ 705F             >                org     (Heap_Ptr & $1FFF) + $E000
1067+ E7E6             >
1067+ E7E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1067+ E7E6             >Latest_Definition defl  Heap_Ptr
1067+ E7E6             >
1067+ E7E6             >                // dummy db directives used to calculate length of namec
1067+ E7E6 51 55 45 52 >                db      "QUERY"
1067+ E7EA 59          >
1067+ E7EB             >len_NFA         defl    $ - temp_NFA
1067+ E7EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1067+ E7E6             >
1067+ E7E6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1067+ E7E7 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1067+ E7EB 59          >
1067+ E7EC             >                org     $-1                 // alter last byte of Name just above to set
1067+ E7EB D9          >                db      {b $} | END_BIT     // msb as name end
1067+ E7EC             >
1067+ E7EC DB 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1067+ E7EE             >Prev_Ptr        defl    Heap_Ptr
1067+ E7EE             >
1067+ E7EE             >mirror_Ptr      defl    $
1067+ E7EE             >
1067+ E7EE 61 70       >                dw      Dict_Ptr + 2        // xt
1067+ E7F0             >Heap_Ptr        defl    $ - $E000           // save current HP
1067+ E7F0             >
1067+ E7F0             >Current_HP      defl  $ - $E000             // used to set HP once!
1067+ E7F0             >
1067+ E7F0             >//              ______________________________________________________________________
1067+ E7F0             >//              Dictionary part
1067+ E7F0             >
1067+ E7F0             >                org     Dict_Ptr
1067+ 705F             >
1067+ 705F EE 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1067+ 7061             >
1067+ 7061             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1067+ 7061 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1067+ 7064             >
1067+ 7064             >
1067+ 7064             >                endif           ; ok        // for other definitions it "points" the correct handler
1067+ 7064             >                // Use of "; ok" to suppress "warning[fwdref]"
1067+ 7064             >
1067+ 7064             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1068+ 7064 E6 6A 89 69                  dw      TIB, FETCH              // tib @
1069+ 7068 A3 63 50 00                  dw      LIT, 80                 // 80
1070+ 706C B6 6F 10 69                  dw      ACCEPT, DROP            // accept drop
1071+ 7070 81 6A 28 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
1071+ 7074 93 69
1072+ 7076 52 68                        dw      EXIT                    // ;
1073+ 7078
1074+ 7078              //  ______________________________________________________________________
1075+ 7078              //
1076+ 7078              // fill        a n c --
1077+ 7078              // If n > 0, fills n locations starting from address a with the value c.
1078+ 7078                              New_Def FILL, "FILL", is_code, is_normal
1078+ 7078             >
1078+ 7078             >Dict_Ptr        defl    $
1078+ 7078             >
1078+ 7078             >//              ______________________________________________________________________
1078+ 7078             >//              Heap part
1078+ 7078             >
1078+ 7078             >
1078+ 7078             >                org     (Heap_Ptr & $1FFF) + $E000
1078+ E7F0             >
1078+ E7F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1078+ E7F0             >Latest_Definition defl  Heap_Ptr
1078+ E7F0             >
1078+ E7F0             >                // dummy db directives used to calculate length of namec
1078+ E7F0 46 49 4C 4C >                db      "FILL"
1078+ E7F4             >len_NFA         defl    $ - temp_NFA
1078+ E7F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1078+ E7F0             >
1078+ E7F0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1078+ E7F1 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1078+ E7F5             >                org     $-1                 // alter last byte of Name just above to set
1078+ E7F4 CC          >                db      {b $} | END_BIT     // msb as name end
1078+ E7F5             >
1078+ E7F5 E6 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1078+ E7F7             >Prev_Ptr        defl    Heap_Ptr
1078+ E7F7             >
1078+ E7F7             >mirror_Ptr      defl    $
1078+ E7F7             >
1078+ E7F7 7A 70       >                dw      Dict_Ptr + 2        // xt
1078+ E7F9             >Heap_Ptr        defl    $ - $E000           // save current HP
1078+ E7F9             >
1078+ E7F9             >Current_HP      defl  $ - $E000             // used to set HP once!
1078+ E7F9             >
1078+ E7F9             >//              ______________________________________________________________________
1078+ E7F9             >//              Dictionary part
1078+ E7F9             >
1078+ E7F9             >                org     Dict_Ptr
1078+ 7078             >
1078+ 7078 F7 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1078+ 707A             >
1078+ 707A             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1078+ 707A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1078+ 707A ~           >
1078+ 707A ~           >
1078+ 707A             >                endif           ; ok        // for other definitions it "points" the correct handler
1078+ 707A             >                // Use of "; ok" to suppress "warning[fwdref]"
1078+ 707A             >
1078+ 707A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1079+ 707A D9                           exx
1080+ 707B D1                           pop     de                  // de has character
1081+ 707C C1                           pop     bc                  // bc has counter
1082+ 707D E1                           pop     hl                  // hl has address, save Instruction Pointer
1083+ 707E              Fill_Loop:
1084+ 707E 78                               ld      a, b
1085+ 707F B1                               or      c
1086+ 7080 28 05                        jr      z, Fill_While_End
1087+ 7082 73                               ld      (hl), e
1088+ 7083 0B                               dec     bc
1089+ 7084 23                               inc     hl
1090+ 7085 18 F7                        jr      Fill_Loop
1091+ 7087              Fill_While_End:
1092+ 7087 D9                           exx
1093+ 7088                              next
1093+ 7088 DD E9       >                jp      (ix)
1094+ 708A
1095+ 708A              //  ______________________________________________________________________
1096+ 708A              //
1097+ 708A              // erase        a n --
1098+ 708A              // If n > 0, fills n locations starting from address a with 'nul' characters.
1099+ 708A                              Colon_Def ERASE, "ERASE", is_normal
1099+ 708A             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1099+ 708A             >
1099+ 708A             >Dict_Ptr        defl    $
1099+ 708A             >
1099+ 708A             >//              ______________________________________________________________________
1099+ 708A             >//              Heap part
1099+ 708A             >
1099+ 708A             >
1099+ 708A             >                org     (Heap_Ptr & $1FFF) + $E000
1099+ E7F9             >
1099+ E7F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1099+ E7F9             >Latest_Definition defl  Heap_Ptr
1099+ E7F9             >
1099+ E7F9             >                // dummy db directives used to calculate length of namec
1099+ E7F9 45 52 41 53 >                db      "ERASE"
1099+ E7FD 45          >
1099+ E7FE             >len_NFA         defl    $ - temp_NFA
1099+ E7FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1099+ E7F9             >
1099+ E7F9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1099+ E7FA 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1099+ E7FE 45          >
1099+ E7FF             >                org     $-1                 // alter last byte of Name just above to set
1099+ E7FE C5          >                db      {b $} | END_BIT     // msb as name end
1099+ E7FF             >
1099+ E7FF F0 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1099+ E801             >Prev_Ptr        defl    Heap_Ptr
1099+ E801             >
1099+ E801             >mirror_Ptr      defl    $
1099+ E801             >
1099+ E801 8C 70       >                dw      Dict_Ptr + 2        // xt
1099+ E803             >Heap_Ptr        defl    $ - $E000           // save current HP
1099+ E803             >
1099+ E803             >Current_HP      defl  $ - $E000             // used to set HP once!
1099+ E803             >
1099+ E803             >//              ______________________________________________________________________
1099+ E803             >//              Dictionary part
1099+ E803             >
1099+ E803             >                org     Dict_Ptr
1099+ 708A             >
1099+ 708A 01 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1099+ 708C             >
1099+ 708C             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1099+ 708C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1099+ 708F             >
1099+ 708F             >
1099+ 708F             >                endif           ; ok        // for other definitions it "points" the correct handler
1099+ 708F             >                // Use of "; ok" to suppress "warning[fwdref]"
1099+ 708F             >
1099+ 708F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1100+ 708F 81 6A 7A 70                  dw      ZERO, FILL              // 0 fill
1101+ 7093 52 68                        dw      EXIT                    // ;
1102+ 7095
1103+ 7095              //  ______________________________________________________________________
1104+ 7095              //
1105+ 7095              // blank        a n --
1106+ 7095              // If n > 0, fills n locations starting from address a with 'nul' characters.
1107+ 7095                              Colon_Def BLANK, "BLANK", is_normal
1107+ 7095             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1107+ 7095             >
1107+ 7095             >Dict_Ptr        defl    $
1107+ 7095             >
1107+ 7095             >//              ______________________________________________________________________
1107+ 7095             >//              Heap part
1107+ 7095             >
1107+ 7095             >
1107+ 7095             >                org     (Heap_Ptr & $1FFF) + $E000
1107+ E803             >
1107+ E803             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1107+ E803             >Latest_Definition defl  Heap_Ptr
1107+ E803             >
1107+ E803             >                // dummy db directives used to calculate length of namec
1107+ E803 42 4C 41 4E >                db      "BLANK"
1107+ E807 4B          >
1107+ E808             >len_NFA         defl    $ - temp_NFA
1107+ E808             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1107+ E803             >
1107+ E803 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1107+ E804 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1107+ E808 4B          >
1107+ E809             >                org     $-1                 // alter last byte of Name just above to set
1107+ E808 CB          >                db      {b $} | END_BIT     // msb as name end
1107+ E809             >
1107+ E809 F9 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1107+ E80B             >Prev_Ptr        defl    Heap_Ptr
1107+ E80B             >
1107+ E80B             >mirror_Ptr      defl    $
1107+ E80B             >
1107+ E80B 97 70       >                dw      Dict_Ptr + 2        // xt
1107+ E80D             >Heap_Ptr        defl    $ - $E000           // save current HP
1107+ E80D             >
1107+ E80D             >Current_HP      defl  $ - $E000             // used to set HP once!
1107+ E80D             >
1107+ E80D             >//              ______________________________________________________________________
1107+ E80D             >//              Dictionary part
1107+ E80D             >
1107+ E80D             >                org     Dict_Ptr
1107+ 7095             >
1107+ 7095 0B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1107+ 7097             >
1107+ 7097             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1107+ 7097 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1107+ 709A             >
1107+ 709A             >
1107+ 709A             >                endif           ; ok        // for other definitions it "points" the correct handler
1107+ 709A             >                // Use of "; ok" to suppress "warning[fwdref]"
1107+ 709A             >
1107+ 709A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1108+ 709A A4 6A 7A 70                  dw      BL, FILL                // bl fill
1109+ 709E 52 68                        dw      EXIT                    // ;
1110+ 70A0
1111+ 70A0              //  ______________________________________________________________________
1112+ 70A0              //
1113+ 70A0              // hold         c --
1114+ 70A0              // Used between <# and #> to insert a character c in numeric formatting.
1115+ 70A0                              Colon_Def HOLD, "HOLD", is_normal
1115+ 70A0             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1115+ 70A0             >
1115+ 70A0             >Dict_Ptr        defl    $
1115+ 70A0             >
1115+ 70A0             >//              ______________________________________________________________________
1115+ 70A0             >//              Heap part
1115+ 70A0             >
1115+ 70A0             >
1115+ 70A0             >                org     (Heap_Ptr & $1FFF) + $E000
1115+ E80D             >
1115+ E80D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1115+ E80D             >Latest_Definition defl  Heap_Ptr
1115+ E80D             >
1115+ E80D             >                // dummy db directives used to calculate length of namec
1115+ E80D 48 4F 4C 44 >                db      "HOLD"
1115+ E811             >len_NFA         defl    $ - temp_NFA
1115+ E811             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1115+ E80D             >
1115+ E80D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1115+ E80E 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1115+ E812             >                org     $-1                 // alter last byte of Name just above to set
1115+ E811 C4          >                db      {b $} | END_BIT     // msb as name end
1115+ E812             >
1115+ E812 03 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1115+ E814             >Prev_Ptr        defl    Heap_Ptr
1115+ E814             >
1115+ E814             >mirror_Ptr      defl    $
1115+ E814             >
1115+ E814 A2 70       >                dw      Dict_Ptr + 2        // xt
1115+ E816             >Heap_Ptr        defl    $ - $E000           // save current HP
1115+ E816             >
1115+ E816             >Current_HP      defl  $ - $E000             // used to set HP once!
1115+ E816             >
1115+ E816             >//              ______________________________________________________________________
1115+ E816             >//              Dictionary part
1115+ E816             >
1115+ E816             >                org     Dict_Ptr
1115+ 70A0             >
1115+ 70A0 14 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1115+ 70A2             >
1115+ 70A2             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1115+ 70A2 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1115+ 70A5             >
1115+ 70A5             >
1115+ 70A5             >                endif           ; ok        // for other definitions it "points" the correct handler
1115+ 70A5             >                // Use of "; ok" to suppress "warning[fwdref]"
1115+ 70A5             >
1115+ 70A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1116+ 70A5 9D 6A                        dw      NEG_ONE                 // -1
1117+ 70A7 70 6B 71 69                  dw      HLD, PLUSSTORE          // hld +!
1118+ 70AB 70 6B 89 69                  dw      HLD, FETCH, CSTORE      // hld @ c!
1118+ 70AF A7 69
1119+ 70B1 52 68                        dw      EXIT                    // ;
1120+ 70B3
1121+ 70B3              //  ______________________________________________________________________
1122+ 70B3              //
1123+ 70B3              // pad         -- a
1124+ 70B3              // leaves the buffer text address. This is at a fixed distance over HERE.
1125+ 70B3                              Colon_Def PAD, "PAD", is_normal
1125+ 70B3             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1125+ 70B3             >
1125+ 70B3             >Dict_Ptr        defl    $
1125+ 70B3             >
1125+ 70B3             >//              ______________________________________________________________________
1125+ 70B3             >//              Heap part
1125+ 70B3             >
1125+ 70B3             >
1125+ 70B3             >                org     (Heap_Ptr & $1FFF) + $E000
1125+ E816             >
1125+ E816             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1125+ E816             >Latest_Definition defl  Heap_Ptr
1125+ E816             >
1125+ E816             >                // dummy db directives used to calculate length of namec
1125+ E816 50 41 44    >                db      "PAD"
1125+ E819             >len_NFA         defl    $ - temp_NFA
1125+ E819             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1125+ E816             >
1125+ E816 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1125+ E817 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1125+ E81A             >                org     $-1                 // alter last byte of Name just above to set
1125+ E819 C4          >                db      {b $} | END_BIT     // msb as name end
1125+ E81A             >
1125+ E81A 0D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1125+ E81C             >Prev_Ptr        defl    Heap_Ptr
1125+ E81C             >
1125+ E81C             >mirror_Ptr      defl    $
1125+ E81C             >
1125+ E81C B5 70       >                dw      Dict_Ptr + 2        // xt
1125+ E81E             >Heap_Ptr        defl    $ - $E000           // save current HP
1125+ E81E             >
1125+ E81E             >Current_HP      defl  $ - $E000             // used to set HP once!
1125+ E81E             >
1125+ E81E             >//              ______________________________________________________________________
1125+ E81E             >//              Dictionary part
1125+ E81E             >
1125+ E81E             >                org     Dict_Ptr
1125+ 70B3             >
1125+ 70B3 1C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1125+ 70B5             >
1125+ 70B5             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1125+ 70B5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1125+ 70B8             >
1125+ 70B8             >
1125+ 70B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1125+ 70B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1125+ 70B8             >
1125+ 70B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1126+ 70B8 A6 6B                        dw      HERE                    // here
1127+ 70BA A3 63 44 00                  dw      LIT, 68                 // 68
1128+ 70BE A5 68                        dw      PLUS                    // +
1129+ 70C0 52 68                        dw      EXIT                    // ;
1130+ 70C2
1131+ 70C2              //  ______________________________________________________________________
1132+ 70C2              //
1133+ 70C2              // word         c -- a
1134+ 70C2              // reads characters from input streams until it encouners a c delimiter.
1135+ 70C2              // Stores that packet so it starts from HERE
1136+ 70C2              // WORD leaves a counter as first byte and ends the packet with two spaces.
1137+ 70C2              // Other occurrences of c are ignored.
1138+ 70C2              // If BLK is zero, text is taken from terminal buffer TIB.
1139+ 70C2              // Otherwise text is taken from the disk-block given by BLK.
1140+ 70C2              // "in" variable is incremented of the number of character read.
1141+ 70C2              // The number of characters read is given by ENCLOSE.
1142+ 70C2                              Colon_Def WORD, "WORD", is_normal
1142+ 70C2             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1142+ 70C2             >
1142+ 70C2             >Dict_Ptr        defl    $
1142+ 70C2             >
1142+ 70C2             >//              ______________________________________________________________________
1142+ 70C2             >//              Heap part
1142+ 70C2             >
1142+ 70C2             >
1142+ 70C2             >                org     (Heap_Ptr & $1FFF) + $E000
1142+ E81E             >
1142+ E81E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1142+ E81E             >Latest_Definition defl  Heap_Ptr
1142+ E81E             >
1142+ E81E             >                // dummy db directives used to calculate length of namec
1142+ E81E 57 4F 52 44 >                db      "WORD"
1142+ E822             >len_NFA         defl    $ - temp_NFA
1142+ E822             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1142+ E81E             >
1142+ E81E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1142+ E81F 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1142+ E823             >                org     $-1                 // alter last byte of Name just above to set
1142+ E822 C4          >                db      {b $} | END_BIT     // msb as name end
1142+ E823             >
1142+ E823 16 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1142+ E825             >Prev_Ptr        defl    Heap_Ptr
1142+ E825             >
1142+ E825             >mirror_Ptr      defl    $
1142+ E825             >
1142+ E825 C4 70       >                dw      Dict_Ptr + 2        // xt
1142+ E827             >Heap_Ptr        defl    $ - $E000           // save current HP
1142+ E827             >
1142+ E827             >Current_HP      defl  $ - $E000             // used to set HP once!
1142+ E827             >
1142+ E827             >//              ______________________________________________________________________
1142+ E827             >//              Dictionary part
1142+ E827             >
1142+ E827             >                org     Dict_Ptr
1142+ 70C2             >
1142+ 70C2 25 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1142+ 70C4             >
1142+ 70C4             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1142+ 70C4 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1142+ 70C7             >
1142+ 70C7             >
1142+ 70C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1142+ 70C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1142+ 70C7             >
1142+ 70C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1143+ 70C7 22 6B 89 69                  dw      BLK, FETCH              // blk @
1144+ 70CB                                                              // if
1145+ 70CB F5 63                        dw      ZBRANCH
1146+ 70CD 0C 00                        dw      Word_Else - $
1147+ 70CF 22 6B 89 69                  dw          BLK, FETCH          //      blk @
1148+ 70D3 20 79                        dw          BLOCK               //      block ( forward )
1149+ 70D5                                                              // else
1150+ 70D5 E8 63                        dw      BRANCH
1151+ 70D7 06 00                        dw      Word_Endif - $
1152+ 70D9              Word_Else:
1153+ 70D9 E6 6A 89 69                  dw         TIB, FETCH           //      tib @
1154+ 70DD              Word_Endif:                                     // endif
1155+ 70DD 28 6B 89 69                  dw      TO_IN, FETCH, PLUS      // >in @ +
1155+ 70E1 A5 68
1156+ 70E3 24 69 29 65                  dw      SWAP, ENCLOSE           // swap enclose
1157+ 70E7 A6 6B A3 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1157+ 70EB 22 00 97 70
1158+ 70EF 28 6B 71 69                  dw      TO_IN, PLUSSTORE        // >in @ +
1159+ 70F3 07 69 E5 6B                  dw      OVER, SUBTRACT, TO_R    // over - >r
1159+ 70F7 5C 68
1160+ 70F9 72 68 A6 6B                  dw      R_OP, HERE, CSTORE      // r here c!
1160+ 70FD A7 69
1161+ 70FF A5 68                        dw      PLUS                    // +
1162+ 7101 A6 6B BE 68                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1162+ 7105 67 68
1163+ 7107 8D 67                        dw      CMOVE                   // cmove
1164+ 7109 A6 6B                        dw      HERE                    // here
1165+ 710B 52 68                        dw      EXIT                    // ;
1166+ 710D
1167+ 710D              //  ______________________________________________________________________
1168+ 710D              //
1169+ 710D              // (.")         --
1170+ 710D              // Direct procedure compiled by ." and  .(  It executes TYPE.
1171+ 710D                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1171+ 710D             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1171+ 710D             >
1171+ 710D             >Dict_Ptr        defl    $
1171+ 710D             >
1171+ 710D             >//              ______________________________________________________________________
1171+ 710D             >//              Heap part
1171+ 710D             >
1171+ 710D             >
1171+ 710D             >                org     (Heap_Ptr & $1FFF) + $E000
1171+ E827             >
1171+ E827             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1171+ E827             >Latest_Definition defl  Heap_Ptr
1171+ E827             >
1171+ E827             >                // dummy db directives used to calculate length of namec
1171+ E827 28 2E 22 29 >                db      '(.")'
1171+ E82B             >len_NFA         defl    $ - temp_NFA
1171+ E82B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1171+ E827             >
1171+ E827 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1171+ E828 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1171+ E82C             >                org     $-1                 // alter last byte of Name just above to set
1171+ E82B A9          >                db      {b $} | END_BIT     // msb as name end
1171+ E82C             >
1171+ E82C 1E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1171+ E82E             >Prev_Ptr        defl    Heap_Ptr
1171+ E82E             >
1171+ E82E             >mirror_Ptr      defl    $
1171+ E82E             >
1171+ E82E 0F 71       >                dw      Dict_Ptr + 2        // xt
1171+ E830             >Heap_Ptr        defl    $ - $E000           // save current HP
1171+ E830             >
1171+ E830             >Current_HP      defl  $ - $E000             // used to set HP once!
1171+ E830             >
1171+ E830             >//              ______________________________________________________________________
1171+ E830             >//              Dictionary part
1171+ E830             >
1171+ E830             >                org     Dict_Ptr
1171+ 710D             >
1171+ 710D 2E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1171+ 710F             >
1171+ 710F             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1171+ 710F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1171+ 7112             >
1171+ 7112             >
1171+ 7112             >                endif           ; ok        // for other definitions it "points" the correct handler
1171+ 7112             >                // Use of "; ok" to suppress "warning[fwdref]"
1171+ 7112             >
1171+ 7112             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1172+ 7112 72 68 1E 6F                  dw      R_OP, COUNT             // r count
1173+ 7116 2B 69 BE 68                  dw      DUP, ONE_PLUS           // dup 1+
1174+ 711A 67 68 A5 68                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1174+ 711E 5C 68
1175+ 7120 72 6F                        dw      TYPE                    // type
1176+ 7122 52 68                        dw      EXIT                    // ;
1177+ 7124
1178+ 7124              //  ______________________________________________________________________
1179+ 7124              //
1180+ 7124              // char         -- c
1181+ 7124              // get first character from next input word
1182+ 7124                              Colon_Def CHAR,  "CHAR", is_normal
1182+ 7124             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1182+ 7124             >
1182+ 7124             >Dict_Ptr        defl    $
1182+ 7124             >
1182+ 7124             >//              ______________________________________________________________________
1182+ 7124             >//              Heap part
1182+ 7124             >
1182+ 7124             >
1182+ 7124             >                org     (Heap_Ptr & $1FFF) + $E000
1182+ E830             >
1182+ E830             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1182+ E830             >Latest_Definition defl  Heap_Ptr
1182+ E830             >
1182+ E830             >                // dummy db directives used to calculate length of namec
1182+ E830 43 48 41 52 >                db      "CHAR"
1182+ E834             >len_NFA         defl    $ - temp_NFA
1182+ E834             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1182+ E830             >
1182+ E830 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1182+ E831 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1182+ E835             >                org     $-1                 // alter last byte of Name just above to set
1182+ E834 D2          >                db      {b $} | END_BIT     // msb as name end
1182+ E835             >
1182+ E835 27 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1182+ E837             >Prev_Ptr        defl    Heap_Ptr
1182+ E837             >
1182+ E837             >mirror_Ptr      defl    $
1182+ E837             >
1182+ E837 26 71       >                dw      Dict_Ptr + 2        // xt
1182+ E839             >Heap_Ptr        defl    $ - $E000           // save current HP
1182+ E839             >
1182+ E839             >Current_HP      defl  $ - $E000             // used to set HP once!
1182+ E839             >
1182+ E839             >//              ______________________________________________________________________
1182+ E839             >//              Dictionary part
1182+ E839             >
1182+ E839             >                org     Dict_Ptr
1182+ 7124             >
1182+ 7124 37 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1182+ 7126             >
1182+ 7126             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1182+ 7126 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1182+ 7129             >
1182+ 7129             >
1182+ 7129             >                endif           ; ok        // for other definitions it "points" the correct handler
1182+ 7129             >                // Use of "; ok" to suppress "warning[fwdref]"
1182+ 7129             >
1182+ 7129             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1183+ 7129 A4 6A C4 70                  dw      BL, WORD                // bl word
1184+ 712D BE 68 9E 69                  dw      ONE_PLUS, CFETCH        // 1+ c@
1185+ 7131 52 68                        dw      EXIT                    // ;
1186+ 7133
1187+ 7133              //  ______________________________________________________________________
1188+ 7133              //
1189+ 7133              // ,"           --
1190+ 7133              // compiles a string terminated by " as a counted string from next input stream
1191+ 7133                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1191+ 7133             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1191+ 7133             >
1191+ 7133             >Dict_Ptr        defl    $
1191+ 7133             >
1191+ 7133             >//              ______________________________________________________________________
1191+ 7133             >//              Heap part
1191+ 7133             >
1191+ 7133             >
1191+ 7133             >                org     (Heap_Ptr & $1FFF) + $E000
1191+ E839             >
1191+ E839             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1191+ E839             >Latest_Definition defl  Heap_Ptr
1191+ E839             >
1191+ E839             >                // dummy db directives used to calculate length of namec
1191+ E839 2C 22       >                db      ',"'
1191+ E83B             >len_NFA         defl    $ - temp_NFA
1191+ E83B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1191+ E839             >
1191+ E839 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1191+ E83A 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1191+ E83C             >                org     $-1                 // alter last byte of Name just above to set
1191+ E83B A2          >                db      {b $} | END_BIT     // msb as name end
1191+ E83C             >
1191+ E83C 30 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1191+ E83E             >Prev_Ptr        defl    Heap_Ptr
1191+ E83E             >
1191+ E83E             >mirror_Ptr      defl    $
1191+ E83E             >
1191+ E83E 35 71       >                dw      Dict_Ptr + 2        // xt
1191+ E840             >Heap_Ptr        defl    $ - $E000           // save current HP
1191+ E840             >
1191+ E840             >Current_HP      defl  $ - $E000             // used to set HP once!
1191+ E840             >
1191+ E840             >//              ______________________________________________________________________
1191+ E840             >//              Dictionary part
1191+ E840             >
1191+ E840             >                org     Dict_Ptr
1191+ 7133             >
1191+ 7133 3E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1191+ 7135             >
1191+ 7135             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1191+ 7135 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1191+ 7138             >
1191+ 7138             >
1191+ 7138             >                endif           ; ok        // for other definitions it "points" the correct handler
1191+ 7138             >                // Use of "; ok" to suppress "warning[fwdref]"
1191+ 7138             >
1191+ 7138             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1192+ 7138 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1193+ 713C C4 70                        dw      WORD                    // word
1194+ 713E 9E 69 BE 68                  dw      CFETCH, ONE_PLUS        // c@ 1+
1195+ 7142 B1 6B                        dw      ALLOT                   // allot
1196+ 7144 81 6A CB 6B                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1197+ 7148 52 68                        dw      EXIT
1198+ 714A
1199+ 714A              //  ______________________________________________________________________
1200+ 714A              //
1201+ 714A              // .c           c --
1202+ 714A              // intermediate general purpose string builder, used by ." and .(
1203+ 714A                              Colon_Def DOT_C,  ".C", is_immediate
1203+ 714A             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1203+ 714A             >
1203+ 714A             >Dict_Ptr        defl    $
1203+ 714A             >
1203+ 714A             >//              ______________________________________________________________________
1203+ 714A             >//              Heap part
1203+ 714A             >
1203+ 714A             >
1203+ 714A             >                org     (Heap_Ptr & $1FFF) + $E000
1203+ E840             >
1203+ E840             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ E840             >Latest_Definition defl  Heap_Ptr
1203+ E840             >
1203+ E840             >                // dummy db directives used to calculate length of namec
1203+ E840 2E 43       >                db      ".C"
1203+ E842             >len_NFA         defl    $ - temp_NFA
1203+ E842             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ E840             >
1203+ E840 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ E841 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1203+ E843             >                org     $-1                 // alter last byte of Name just above to set
1203+ E842 C3          >                db      {b $} | END_BIT     // msb as name end
1203+ E843             >
1203+ E843 39 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1203+ E845             >Prev_Ptr        defl    Heap_Ptr
1203+ E845             >
1203+ E845             >mirror_Ptr      defl    $
1203+ E845             >
1203+ E845 4C 71       >                dw      Dict_Ptr + 2        // xt
1203+ E847             >Heap_Ptr        defl    $ - $E000           // save current HP
1203+ E847             >
1203+ E847             >Current_HP      defl  $ - $E000             // used to set HP once!
1203+ E847             >
1203+ E847             >//              ______________________________________________________________________
1203+ E847             >//              Dictionary part
1203+ E847             >
1203+ E847             >                org     Dict_Ptr
1203+ 714A             >
1203+ 714A 45 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1203+ 714C             >
1203+ 714C             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 714C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1203+ 714F             >
1203+ 714F             >
1203+ 714F             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 714F             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 714F             >
1203+ 714F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 714F 4C 6B 89 69                  dw      STATE, FETCH            // state @
1205+ 7153                                                              // if
1206+ 7153 F5 63                        dw      ZBRANCH
1207+ 7155 12 00                        dw      Dot_C_Else - $
1208+ 7157 52 6E 0F 71                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1209+ 715B C4 70 9E 69                  dw          WORD, CFETCH        //      word c@
1210+ 715F BE 68 B1 6B                  dw          ONE_PLUS, ALLOT     //      1+ allot
1211+ 7163                                                              // else
1212+ 7163 E8 63                        dw      BRANCH
1213+ 7165 08 00                        dw      Dot_C_Endif - $
1214+ 7167              Dot_C_Else:
1215+ 7167 C4 70 1E 6F                  dw          WORD, COUNT, TYPE   //      word count type
1215+ 716B 72 6F
1216+ 716D              Dot_C_Endif:                                    // endif
1217+ 716D 52 68                        dw      EXIT                    ;
1218+ 716F
1219+ 716F              //  ______________________________________________________________________
1220+ 716F              //
1221+ 716F              // ."           c --
1222+ 716F                              Colon_Def DOT_QUOTE,  '."', is_immediate
1222+ 716F             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1222+ 716F             >
1222+ 716F             >Dict_Ptr        defl    $
1222+ 716F             >
1222+ 716F             >//              ______________________________________________________________________
1222+ 716F             >//              Heap part
1222+ 716F             >
1222+ 716F             >
1222+ 716F             >                org     (Heap_Ptr & $1FFF) + $E000
1222+ E847             >
1222+ E847             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1222+ E847             >Latest_Definition defl  Heap_Ptr
1222+ E847             >
1222+ E847             >                // dummy db directives used to calculate length of namec
1222+ E847 2E 22       >                db      '."'
1222+ E849             >len_NFA         defl    $ - temp_NFA
1222+ E849             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1222+ E847             >
1222+ E847 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1222+ E848 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1222+ E84A             >                org     $-1                 // alter last byte of Name just above to set
1222+ E849 A2          >                db      {b $} | END_BIT     // msb as name end
1222+ E84A             >
1222+ E84A 40 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1222+ E84C             >Prev_Ptr        defl    Heap_Ptr
1222+ E84C             >
1222+ E84C             >mirror_Ptr      defl    $
1222+ E84C             >
1222+ E84C 71 71       >                dw      Dict_Ptr + 2        // xt
1222+ E84E             >Heap_Ptr        defl    $ - $E000           // save current HP
1222+ E84E             >
1222+ E84E             >Current_HP      defl  $ - $E000             // used to set HP once!
1222+ E84E             >
1222+ E84E             >//              ______________________________________________________________________
1222+ E84E             >//              Dictionary part
1222+ E84E             >
1222+ E84E             >                org     Dict_Ptr
1222+ 716F             >
1222+ 716F 4C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1222+ 7171             >
1222+ 7171             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1222+ 7171 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1222+ 7174             >
1222+ 7174             >
1222+ 7174             >                endif           ; ok        // for other definitions it "points" the correct handler
1222+ 7174             >                // Use of "; ok" to suppress "warning[fwdref]"
1222+ 7174             >
1222+ 7174             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1223+ 7174 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1224+ 7178 4C 71                        dw      DOT_C                   // [compile] .c
1225+ 717A 52 68                        dw      EXIT                    // ; immediate
1226+ 717C
1227+ 717C              //  ______________________________________________________________________
1228+ 717C              //
1229+ 717C              // .(           c --
1230+ 717C                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1230+ 717C             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1230+ 717C             >
1230+ 717C             >Dict_Ptr        defl    $
1230+ 717C             >
1230+ 717C             >//              ______________________________________________________________________
1230+ 717C             >//              Heap part
1230+ 717C             >
1230+ 717C             >
1230+ 717C             >                org     (Heap_Ptr & $1FFF) + $E000
1230+ E84E             >
1230+ E84E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1230+ E84E             >Latest_Definition defl  Heap_Ptr
1230+ E84E             >
1230+ E84E             >                // dummy db directives used to calculate length of namec
1230+ E84E 2E 28       >                db      ".("
1230+ E850             >len_NFA         defl    $ - temp_NFA
1230+ E850             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1230+ E84E             >
1230+ E84E C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1230+ E84F 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1230+ E851             >                org     $-1                 // alter last byte of Name just above to set
1230+ E850 A8          >                db      {b $} | END_BIT     // msb as name end
1230+ E851             >
1230+ E851 47 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1230+ E853             >Prev_Ptr        defl    Heap_Ptr
1230+ E853             >
1230+ E853             >mirror_Ptr      defl    $
1230+ E853             >
1230+ E853 7E 71       >                dw      Dict_Ptr + 2        // xt
1230+ E855             >Heap_Ptr        defl    $ - $E000           // save current HP
1230+ E855             >
1230+ E855             >Current_HP      defl  $ - $E000             // used to set HP once!
1230+ E855             >
1230+ E855             >//              ______________________________________________________________________
1230+ E855             >//              Dictionary part
1230+ E855             >
1230+ E855             >                org     Dict_Ptr
1230+ 717C             >
1230+ 717C 53 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1230+ 717E             >
1230+ 717E             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1230+ 717E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1230+ 7181             >
1230+ 7181             >
1230+ 7181             >                endif           ; ok        // for other definitions it "points" the correct handler
1230+ 7181             >                // Use of "; ok" to suppress "warning[fwdref]"
1230+ 7181             >
1230+ 7181             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1231+ 7181 A3 63 29 00                  dw      LIT, ")"                // [char] )
1232+ 7185 4C 71                        dw      DOT_C                   // [compile] .c
1233+ 7187 52 68                        dw      EXIT                    // ; immediate
1234+ 7189
1235+ 7189              //  ______________________________________________________________________
1236+ 7189              //
1237+ 7189              // (sgn)        a -- a f
1238+ 7189              // determines if char in addr a is a sign (+ or -), and in that case increments
1239+ 7189              // a flag. Returns f as the sign, true for negative, false for positive.
1240+ 7189              // called by NUMBER and (EXP)
1241+ 7189                              Colon_Def CSGN,  "(SGN)", is_normal
1241+ 7189             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1241+ 7189             >
1241+ 7189             >Dict_Ptr        defl    $
1241+ 7189             >
1241+ 7189             >//              ______________________________________________________________________
1241+ 7189             >//              Heap part
1241+ 7189             >
1241+ 7189             >
1241+ 7189             >                org     (Heap_Ptr & $1FFF) + $E000
1241+ E855             >
1241+ E855             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1241+ E855             >Latest_Definition defl  Heap_Ptr
1241+ E855             >
1241+ E855             >                // dummy db directives used to calculate length of namec
1241+ E855 28 53 47 4E >                db      "(SGN)"
1241+ E859 29          >
1241+ E85A             >len_NFA         defl    $ - temp_NFA
1241+ E85A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1241+ E855             >
1241+ E855 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1241+ E856 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1241+ E85A 29          >
1241+ E85B             >                org     $-1                 // alter last byte of Name just above to set
1241+ E85A A9          >                db      {b $} | END_BIT     // msb as name end
1241+ E85B             >
1241+ E85B 4E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1241+ E85D             >Prev_Ptr        defl    Heap_Ptr
1241+ E85D             >
1241+ E85D             >mirror_Ptr      defl    $
1241+ E85D             >
1241+ E85D 8B 71       >                dw      Dict_Ptr + 2        // xt
1241+ E85F             >Heap_Ptr        defl    $ - $E000           // save current HP
1241+ E85F             >
1241+ E85F             >Current_HP      defl  $ - $E000             // used to set HP once!
1241+ E85F             >
1241+ E85F             >//              ______________________________________________________________________
1241+ E85F             >//              Dictionary part
1241+ E85F             >
1241+ E85F             >                org     Dict_Ptr
1241+ 7189             >
1241+ 7189 5D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1241+ 718B             >
1241+ 718B             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1241+ 718B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1241+ 718E             >
1241+ 718E             >
1241+ 718E             >                endif           ; ok        // for other definitions it "points" the correct handler
1241+ 718E             >                // Use of "; ok" to suppress "warning[fwdref]"
1241+ 718E             >
1241+ 718E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1242+ 718E 2B 69 BE 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1242+ 7192 9E 69
1243+ 7194 2B 69 A3 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1243+ 7198 2D 00 F1 6B
1244+ 719C                                                              // if
1245+ 719C F5 63                        dw      ZBRANCH
1246+ 719E 12 00                        dw      CSgn_Else_0 - $
1247+ 71A0 10 69                        dw          DROP                //      drop
1248+ 71A2 BE 68                        dw          ONE_PLUS            //      1+
1249+ 71A4 88 6A 58 6B                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1249+ 71A8 71 69
1250+ 71AA 88 6A                        dw          ONE                 //      1
1251+ 71AC                                                              // else
1252+ 71AC E8 63                        dw      BRANCH
1253+ 71AE 16 00                        dw      CSgn_Endif_0 - $
1254+ 71B0              CSgn_Else_0:
1255+ 71B0 A3 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1255+ 71B4 F1 6B
1256+ 71B6                                                              //      if
1257+ 71B6 F5 63                        dw          ZBRANCH
1258+ 71B8 0A 00                        dw          CSgn_Endif_1 - $
1259+ 71BA BE 68                        dw              ONE_PLUS        //          1+
1260+ 71BC 88 6A 58 6B                  dw              ONE, DPL        //          1 dpl
1261+ 71C0 71 69                        dw              PLUSSTORE       //          +!
1262+ 71C2              CSgn_Endif_1                                    //      endif
1263+ 71C2 81 6A                        dw          ZERO                //      0
1264+ 71C4              CSgn_Endif_0:                                   // endif
1265+ 71C4 52 68                        dw      EXIT
1266+ 71C6
1267+ 71C6              //  ______________________________________________________________________
1268+ 71C6              //
1269+ 71C6              // (number)     d a -- d1 a1
1270+ 71C6              // using the current BASE parse characters stored in address a
1271+ 71C6              // accumulating a double precision integer d
1272+ 71C6              // the process stops at the first not-convertible character
1273+ 71C6              // A double-number is kept in CPU registers as HLDE.
1274+ 71C6              // On the stack a double number is treated as two single numbers
1275+ 71C6              // where HL is on the top of the stack and DE is the second from top,
1276+ 71C6              // so in the stack memory it appears as LHED.
1277+ 71C6              // Instead, in 2VARIABLE a double number is stored as EDLH.
1278+ 71C6                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1278+ 71C6             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1278+ 71C6             >
1278+ 71C6             >Dict_Ptr        defl    $
1278+ 71C6             >
1278+ 71C6             >//              ______________________________________________________________________
1278+ 71C6             >//              Heap part
1278+ 71C6             >
1278+ 71C6             >
1278+ 71C6             >                org     (Heap_Ptr & $1FFF) + $E000
1278+ E85F             >
1278+ E85F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1278+ E85F             >Latest_Definition defl  Heap_Ptr
1278+ E85F             >
1278+ E85F             >                // dummy db directives used to calculate length of namec
1278+ E85F 28 4E 55 4D >                db      "(NUMBER)"
1278+ E863 42 45 52 29 >
1278+ E867             >len_NFA         defl    $ - temp_NFA
1278+ E867             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1278+ E85F             >
1278+ E85F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1278+ E860 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1278+ E864 42 45 52 29 >
1278+ E868             >                org     $-1                 // alter last byte of Name just above to set
1278+ E867 A9          >                db      {b $} | END_BIT     // msb as name end
1278+ E868             >
1278+ E868 55 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1278+ E86A             >Prev_Ptr        defl    Heap_Ptr
1278+ E86A             >
1278+ E86A             >mirror_Ptr      defl    $
1278+ E86A             >
1278+ E86A C8 71       >                dw      Dict_Ptr + 2        // xt
1278+ E86C             >Heap_Ptr        defl    $ - $E000           // save current HP
1278+ E86C             >
1278+ E86C             >Current_HP      defl  $ - $E000             // used to set HP once!
1278+ E86C             >
1278+ E86C             >//              ______________________________________________________________________
1278+ E86C             >//              Dictionary part
1278+ E86C             >
1278+ E86C             >                org     Dict_Ptr
1278+ 71C6             >
1278+ 71C6 6A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1278+ 71C8             >
1278+ 71C8             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1278+ 71C8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1278+ 71CB             >
1278+ 71CB             >
1278+ 71CB             >                endif           ; ok        // for other definitions it "points" the correct handler
1278+ 71CB             >                // Use of "; ok" to suppress "warning[fwdref]"
1278+ 71CB             >
1278+ 71CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1279+ 71CB                                                              // begin
1280+ 71CB              CNumber_Begin:
1281+ 71CB BE 68                        dw          ONE_PLUS            //      1+
1282+ 71CD 2B 69 5C 68                  dw          DUP, TO_R           //      dup >r
1283+ 71D1 9E 69                        dw          CFETCH              //      @
1284+ 71D3 52 6B 89 69                  dw          BASE, FETCH         //      base @
1285+ 71D7 4D 64                        dw          DIGIT               //      digit
1286+ 71D9                                                              // while
1287+ 71D9 F5 63                        dw      ZBRANCH
1288+ 71DB 2C 00                        dw      CNumber_While_end - $
1289+ 71DD 24 69                        dw          SWAP                //      swap
1290+ 71DF 52 6B 89 69                  dw          BASE, FETCH         //      base @
1291+ 71E3 B1 67                        dw          UM_MUL              //      um*
1292+ 71E5 10 69 32 69                  dw          DROP, ROT           //      drop rot
1293+ 71E9 52 6B 89 69                  dw          BASE, FETCH         //      base @
1294+ 71ED B1 67                        dw          UM_MUL              //      um*
1295+ 71EF AF 68                        dw          DPLUS               //      d+
1296+ 71F1 58 6B 89 69                  dw          DPL, FETCH          //      dpl @
1297+ 71F5 BE 68                        dw          ONE_PLUS            //      1+
1298+ 71F7                                                              //      if
1299+ 71F7 F5 63                        dw          ZBRANCH
1300+ 71F9 08 00                        dw          CNumber_Endif - $
1301+ 71FB 88 6A 58 6B                  dw              ONE, DPL        //          1 dpl
1302+ 71FF 71 69                        dw              PLUSSTORE       //          +!
1303+ 7201              CNumber_Endif:                                  //      endif
1304+ 7201 67 68                        dw             R_TO             //      r>  ( balance rp )
1305+ 7203 E8 63                        dw      BRANCH
1306+ 7205 C6 FF                        dw      CNumber_Begin - $
1307+ 7207              CNumber_While_end:                              // repeat
1308+ 7207 67 68                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1309+ 7209 52 68                        dw      EXIT                    // ;
1310+ 720B
1311+ 720B              //  ______________________________________________________________________
1312+ 720B              //
1313+ 720B              // (prefix)
1314+ 720B                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1314+ 720B             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1314+ 720B             >
1314+ 720B             >Dict_Ptr        defl    $
1314+ 720B             >
1314+ 720B             >//              ______________________________________________________________________
1314+ 720B             >//              Heap part
1314+ 720B             >
1314+ 720B             >
1314+ 720B             >                org     (Heap_Ptr & $1FFF) + $E000
1314+ E86C             >
1314+ E86C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1314+ E86C             >Latest_Definition defl  Heap_Ptr
1314+ E86C             >
1314+ E86C             >                // dummy db directives used to calculate length of namec
1314+ E86C 28 50 52 45 >                db      "(PREFIX)"
1314+ E870 46 49 58 29 >
1314+ E874             >len_NFA         defl    $ - temp_NFA
1314+ E874             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1314+ E86C             >
1314+ E86C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1314+ E86D 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1314+ E871 46 49 58 29 >
1314+ E875             >                org     $-1                 // alter last byte of Name just above to set
1314+ E874 A9          >                db      {b $} | END_BIT     // msb as name end
1314+ E875             >
1314+ E875 5F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1314+ E877             >Prev_Ptr        defl    Heap_Ptr
1314+ E877             >
1314+ E877             >mirror_Ptr      defl    $
1314+ E877             >
1314+ E877 0D 72       >                dw      Dict_Ptr + 2        // xt
1314+ E879             >Heap_Ptr        defl    $ - $E000           // save current HP
1314+ E879             >
1314+ E879             >Current_HP      defl  $ - $E000             // used to set HP once!
1314+ E879             >
1314+ E879             >//              ______________________________________________________________________
1314+ E879             >//              Dictionary part
1314+ E879             >
1314+ E879             >                org     Dict_Ptr
1314+ 720B             >
1314+ 720B 77 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1314+ 720D             >
1314+ 720D             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1314+ 720D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1314+ 7210             >
1314+ 7210             >
1314+ 7210             >                endif           ; ok        // for other definitions it "points" the correct handler
1314+ 7210             >                // Use of "; ok" to suppress "warning[fwdref]"
1314+ 7210             >
1314+ 7210             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1315+ 7210 2B 69 BE 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1315+ 7214 9E 69
1316+ 7216 2B 69 5C 68                  dw      DUP, TO_R               // dup >r
1317+ 721A A3 63 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1317+ 721E F1 6B
1318+ 7220                                                              // if
1319+ 7220 F5 63                        dw      ZBRANCH
1320+ 7222 0C 00                        dw      CPrefix_Endif_0 - $
1321+ 7224 BE 68                        dw          ONE_PLUS            //      1+
1322+ 7226 A3 63 10 00                  dw          LIT, 16
1323+ 722A 52 6B 93 69                  dw          BASE, STORE         //      16 base !
1324+ 722E              CPrefix_Endif_0:                                // endif
1325+ 722E 67 68                        dw      R_TO                    // r>
1326+ 7230 A3 63 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1326+ 7234 F1 6B
1327+ 7236                                                              // if
1328+ 7236 F5 63                        dw      ZBRANCH
1329+ 7238 0A 00                        dw      CPrefix_Endif_1 - $
1330+ 723A BE 68                        dw          ONE_PLUS            //      1+
1331+ 723C 8F 6A                        dw          TWO
1332+ 723E 52 6B 93 69                  dw          BASE, STORE         //      2 base !
1333+ 7242              CPrefix_Endif_1:                                // endif
1334+ 7242 52 68                        dw      EXIT
1335+ 7244
1336+ 7244              //  ______________________________________________________________________
1337+ 7244              //
1338+ 7244              // number       a -- d
1339+ 7244                              Colon_Def NUMBER,  "NUMBER", is_normal
1339+ 7244             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1339+ 7244             >
1339+ 7244             >Dict_Ptr        defl    $
1339+ 7244             >
1339+ 7244             >//              ______________________________________________________________________
1339+ 7244             >//              Heap part
1339+ 7244             >
1339+ 7244             >
1339+ 7244             >                org     (Heap_Ptr & $1FFF) + $E000
1339+ E879             >
1339+ E879             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1339+ E879             >Latest_Definition defl  Heap_Ptr
1339+ E879             >
1339+ E879             >                // dummy db directives used to calculate length of namec
1339+ E879 4E 55 4D 42 >                db      "NUMBER"
1339+ E87D 45 52       >
1339+ E87F             >len_NFA         defl    $ - temp_NFA
1339+ E87F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1339+ E879             >
1339+ E879 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1339+ E87A 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1339+ E87E 45 52       >
1339+ E880             >                org     $-1                 // alter last byte of Name just above to set
1339+ E87F D2          >                db      {b $} | END_BIT     // msb as name end
1339+ E880             >
1339+ E880 6C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1339+ E882             >Prev_Ptr        defl    Heap_Ptr
1339+ E882             >
1339+ E882             >mirror_Ptr      defl    $
1339+ E882             >
1339+ E882 46 72       >                dw      Dict_Ptr + 2        // xt
1339+ E884             >Heap_Ptr        defl    $ - $E000           // save current HP
1339+ E884             >
1339+ E884             >Current_HP      defl  $ - $E000             // used to set HP once!
1339+ E884             >
1339+ E884             >//              ______________________________________________________________________
1339+ E884             >//              Dictionary part
1339+ E884             >
1339+ E884             >                org     Dict_Ptr
1339+ 7244             >
1339+ 7244 82 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1339+ 7246             >
1339+ 7246             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1339+ 7246 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1339+ 7249             >
1339+ 7249             >
1339+ 7249             >                endif           ; ok        // for other definitions it "points" the correct handler
1339+ 7249             >                // Use of "; ok" to suppress "warning[fwdref]"
1339+ 7249             >
1339+ 7249             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1340+ 7249 81 6A 81 6A                  dw      ZERO, ZERO              // 0 0
1341+ 724D 32 69                        dw      ROT                     // rot
1342+ 724F 8B 71 5C 68                  dw      CSGN, TO_R              // (sgn) >r
1343+ 7253 9D 6A 58 6B                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1343+ 7257 93 69
1344+ 7259 52 6B 89 69                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1344+ 725D 5C 68
1345+ 725F 0D 72                        dw      CPREFIX                 // (prefix)   // ***
1346+ 7261 C8 71                        dw      CNUMBER                 // (number)
1347+ 7263 2B 69 9E 69                  dw      DUP, CFETCH             // dup c@
1348+ 7267 A3 63 2E 00                  dw      LIT, ".", EQUALS        // [char] . =  ( decimal point )
1348+ 726B F1 6B
1349+ 726D                                                              // if
1350+ 726D F5 63                        dw      ZBRANCH
1351+ 726F 0A 00                        dw      Number_Endif_1 - $
1352+ 7271 81 6A 58 6B                  dw          ZERO, DPL, STORE    //      0 dpl !
1352+ 7275 93 69
1353+ 7277 C8 71                        dw          CNUMBER             //      (number)
1354+ 7279              Number_Endif_1:                                 // endif
1355+ 7279 9E 69 A4 6A                  dw      CFETCH, BL              // c@ bl
1356+ 727D E5 6B 81 6A                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1356+ 7281 E2 6D
1357+ 7283 67 68 52 6B                  dw      R_TO, BASE, STORE       // r> base !  // ***
1357+ 7287 93 69
1358+ 7289 67 68                        dw      R_TO                    // r>
1359+ 728B                                                              // if
1360+ 728B F5 63                        dw      ZBRANCH
1361+ 728D 04 00                        dw      Number_Endif_2 - $
1362+ 728F F4 68                        dw          DMINUS              //      dminus
1363+ 7291              Number_Endif_2:                                 // endif
1364+ 7291 52 68                        dw      EXIT                    // ;
1365+ 7293
1366+ 7293              //  ______________________________________________________________________
1367+ 7293              //
1368+ 7293              // twofind      a -- d
1369+ 7293                              Colon_Def TWOFIND,  "2FIND", is_normal
1369+ 7293             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1369+ 7293             >
1369+ 7293             >Dict_Ptr        defl    $
1369+ 7293             >
1369+ 7293             >//              ______________________________________________________________________
1369+ 7293             >//              Heap part
1369+ 7293             >
1369+ 7293             >
1369+ 7293             >                org     (Heap_Ptr & $1FFF) + $E000
1369+ E884             >
1369+ E884             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1369+ E884             >Latest_Definition defl  Heap_Ptr
1369+ E884             >
1369+ E884             >                // dummy db directives used to calculate length of namec
1369+ E884 32 46 49 4E >                db      "2FIND"
1369+ E888 44          >
1369+ E889             >len_NFA         defl    $ - temp_NFA
1369+ E889             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1369+ E884             >
1369+ E884 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1369+ E885 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1369+ E889 44          >
1369+ E88A             >                org     $-1                 // alter last byte of Name just above to set
1369+ E889 C4          >                db      {b $} | END_BIT     // msb as name end
1369+ E88A             >
1369+ E88A 79 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1369+ E88C             >Prev_Ptr        defl    Heap_Ptr
1369+ E88C             >
1369+ E88C             >mirror_Ptr      defl    $
1369+ E88C             >
1369+ E88C 95 72       >                dw      Dict_Ptr + 2        // xt
1369+ E88E             >Heap_Ptr        defl    $ - $E000           // save current HP
1369+ E88E             >
1369+ E88E             >Current_HP      defl  $ - $E000             // used to set HP once!
1369+ E88E             >
1369+ E88E             >//              ______________________________________________________________________
1369+ E88E             >//              Dictionary part
1369+ E88E             >
1369+ E88E             >                org     Dict_Ptr
1369+ 7293             >
1369+ 7293 8C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1369+ 7295             >
1369+ 7295             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1369+ 7295 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1369+ 7298             >
1369+ 7298             >
1369+ 7298             >                endif           ; ok        // for other definitions it "points" the correct handler
1369+ 7298             >                // Use of "; ok" to suppress "warning[fwdref]"
1369+ 7298             >
1369+ 7298             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1370+ 7298 5C 68 72 68                  dw      TO_R, R_OP              // >r r@
1371+ 729C 40 6B 89 69                  dw      CONTEXT, FETCH, FETCH   // context @ @
1371+ 72A0 89 69
1372+ 72A2 BB 64                        dw      C_FIND                  // (find)
1373+ 72A4 50 6C                        dw      QDUP                    // ?dup
1374+ 72A6 77 68                        dw      ZEQUAL                  // 0=
1375+ 72A8                                                              // if
1376+ 72A8 F5 63                        dw      ZBRANCH
1377+ 72AA 0C 00                        dw      LFind_Endif - $
1378+ 72AC 72 68                        dw          R_OP                //      r@
1379+ 72AE                              // dw          LATEST               //      latest
1380+ 72AE 46 6B 89 69                  dw          CURRENT, FETCH, FETCH   // context @ @
1380+ 72B2 89 69
1381+ 72B4 BB 64                        dw          C_FIND              //      (find)
1382+ 72B6              LFind_Endif:                                    // endif
1383+ 72B6 67 68 10 69                  dw      R_TO, DROP              // r> drop
1384+ 72BA 52 68                        dw      EXIT                    // ;
1385+ 72BC
1386+ 72BC              //  ______________________________________________________________________
1387+ 72BC              //
1388+ 72BC              // -find        a -- d
1389+ 72BC                              Colon_Def LFIND,  "-FIND", is_normal
1389+ 72BC             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1389+ 72BC             >
1389+ 72BC             >Dict_Ptr        defl    $
1389+ 72BC             >
1389+ 72BC             >//              ______________________________________________________________________
1389+ 72BC             >//              Heap part
1389+ 72BC             >
1389+ 72BC             >
1389+ 72BC             >                org     (Heap_Ptr & $1FFF) + $E000
1389+ E88E             >
1389+ E88E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1389+ E88E             >Latest_Definition defl  Heap_Ptr
1389+ E88E             >
1389+ E88E             >                // dummy db directives used to calculate length of namec
1389+ E88E 2D 46 49 4E >                db      "-FIND"
1389+ E892 44          >
1389+ E893             >len_NFA         defl    $ - temp_NFA
1389+ E893             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1389+ E88E             >
1389+ E88E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1389+ E88F 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1389+ E893 44          >
1389+ E894             >                org     $-1                 // alter last byte of Name just above to set
1389+ E893 C4          >                db      {b $} | END_BIT     // msb as name end
1389+ E894             >
1389+ E894 84 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1389+ E896             >Prev_Ptr        defl    Heap_Ptr
1389+ E896             >
1389+ E896             >mirror_Ptr      defl    $
1389+ E896             >
1389+ E896 BE 72       >                dw      Dict_Ptr + 2        // xt
1389+ E898             >Heap_Ptr        defl    $ - $E000           // save current HP
1389+ E898             >
1389+ E898             >Current_HP      defl  $ - $E000             // used to set HP once!
1389+ E898             >
1389+ E898             >//              ______________________________________________________________________
1389+ E898             >//              Dictionary part
1389+ E898             >
1389+ E898             >                org     Dict_Ptr
1389+ 72BC             >
1389+ 72BC 96 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1389+ 72BE             >
1389+ 72BE             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1389+ 72BE CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1389+ 72C1             >
1389+ 72C1             >
1389+ 72C1             >                endif           ; ok        // for other definitions it "points" the correct handler
1389+ 72C1             >                // Use of "; ok" to suppress "warning[fwdref]"
1389+ 72C1             >
1389+ 72C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1390+ 72C1 A4 6A C4 70                  dw      BL, WORD                // bl word
1391+ 72C5 95 72                        dw      TWOFIND                 // 2find
1392+ 72C7 52 68                        dw      EXIT                    // ;
1393+ 72C9
1394+ 72C9              //  ______________________________________________________________________
1395+ 72C9              //
1396+ 72C9              // (abort)      --
1397+ 72C9                              Colon_Def CABORT,  "(ABORT)", is_normal
1397+ 72C9             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1397+ 72C9             >
1397+ 72C9             >Dict_Ptr        defl    $
1397+ 72C9             >
1397+ 72C9             >//              ______________________________________________________________________
1397+ 72C9             >//              Heap part
1397+ 72C9             >
1397+ 72C9             >
1397+ 72C9             >                org     (Heap_Ptr & $1FFF) + $E000
1397+ E898             >
1397+ E898             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1397+ E898             >Latest_Definition defl  Heap_Ptr
1397+ E898             >
1397+ E898             >                // dummy db directives used to calculate length of namec
1397+ E898 28 41 42 4F >                db      "(ABORT)"
1397+ E89C 52 54 29    >
1397+ E89F             >len_NFA         defl    $ - temp_NFA
1397+ E89F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1397+ E898             >
1397+ E898 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1397+ E899 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1397+ E89D 52 54 29    >
1397+ E8A0             >                org     $-1                 // alter last byte of Name just above to set
1397+ E89F A9          >                db      {b $} | END_BIT     // msb as name end
1397+ E8A0             >
1397+ E8A0 8E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1397+ E8A2             >Prev_Ptr        defl    Heap_Ptr
1397+ E8A2             >
1397+ E8A2             >mirror_Ptr      defl    $
1397+ E8A2             >
1397+ E8A2 CB 72       >                dw      Dict_Ptr + 2        // xt
1397+ E8A4             >Heap_Ptr        defl    $ - $E000           // save current HP
1397+ E8A4             >
1397+ E8A4             >Current_HP      defl  $ - $E000             // used to set HP once!
1397+ E8A4             >
1397+ E8A4             >//              ______________________________________________________________________
1397+ E8A4             >//              Dictionary part
1397+ E8A4             >
1397+ E8A4             >                org     Dict_Ptr
1397+ 72C9             >
1397+ 72C9 A2 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1397+ 72CB             >
1397+ 72CB             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1397+ 72CB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1397+ 72CE             >
1397+ 72CE             >
1397+ 72CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1397+ 72CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1397+ 72CE             >
1397+ 72CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1398+ 72CE 5E 75                        dw      ABORT                   // abort
1399+ 72D0 52 68                        dw      EXIT                    // ;
1400+ 72D2
1401+ 72D2              //  ______________________________________________________________________
1402+ 72D2              //
1403+ 72D2              // error        n --
1404+ 72D2              // raise an error
1405+ 72D2              // if WARNING is 0, prints "MSG#n".
1406+ 72D2              // if WARNING is 1, prints line n of screen 4.
1407+ 72D2              // if WARNING is -1 does (ABORT) that normally does ABORT
1408+ 72D2              // value can be negative or beyond block 4.
1409+ 72D2                              Colon_Def ERROR,  "ERROR", is_normal
1409+ 72D2             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1409+ 72D2             >
1409+ 72D2             >Dict_Ptr        defl    $
1409+ 72D2             >
1409+ 72D2             >//              ______________________________________________________________________
1409+ 72D2             >//              Heap part
1409+ 72D2             >
1409+ 72D2             >
1409+ 72D2             >                org     (Heap_Ptr & $1FFF) + $E000
1409+ E8A4             >
1409+ E8A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1409+ E8A4             >Latest_Definition defl  Heap_Ptr
1409+ E8A4             >
1409+ E8A4             >                // dummy db directives used to calculate length of namec
1409+ E8A4 45 52 52 4F >                db      "ERROR"
1409+ E8A8 52          >
1409+ E8A9             >len_NFA         defl    $ - temp_NFA
1409+ E8A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1409+ E8A4             >
1409+ E8A4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1409+ E8A5 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1409+ E8A9 52          >
1409+ E8AA             >                org     $-1                 // alter last byte of Name just above to set
1409+ E8A9 D2          >                db      {b $} | END_BIT     // msb as name end
1409+ E8AA             >
1409+ E8AA 98 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1409+ E8AC             >Prev_Ptr        defl    Heap_Ptr
1409+ E8AC             >
1409+ E8AC             >mirror_Ptr      defl    $
1409+ E8AC             >
1409+ E8AC D4 72       >                dw      Dict_Ptr + 2        // xt
1409+ E8AE             >Heap_Ptr        defl    $ - $E000           // save current HP
1409+ E8AE             >
1409+ E8AE             >Current_HP      defl  $ - $E000             // used to set HP once!
1409+ E8AE             >
1409+ E8AE             >//              ______________________________________________________________________
1409+ E8AE             >//              Dictionary part
1409+ E8AE             >
1409+ E8AE             >                org     Dict_Ptr
1409+ 72D2             >
1409+ 72D2 AC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1409+ 72D4             >
1409+ 72D4             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1409+ 72D4 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1409+ 72D7             >
1409+ 72D7             >
1409+ 72D7             >                endif           ; ok        // for other definitions it "points" the correct handler
1409+ 72D7             >                // Use of "; ok" to suppress "warning[fwdref]"
1409+ 72D7             >
1409+ 72D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1410+ 72D7 F2 6A 89 69                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1410+ 72DB 8A 68
1411+ 72DD                                                              // if
1412+ 72DD F5 63                        dw      ZBRANCH
1413+ 72DF 04 00                        dw      Error_Endif_1 - $
1414+ 72E1 CB 72                        dw          CABORT              //      (abort)
1415+ 72E3              Error_Endif_1:                                  // endif
1416+ 72E3 A6 6B 1E 6F                  dw      HERE, COUNT, TYPE       // here count type
1416+ 72E7 72 6F
1417+ 72E9 0F 71                        dw      C_DOT_QUOTE             // .( ? )
1418+ 72EB 02 3F 20                     db      2, "? "
1419+ 72EE 33 77                        dw      MESSAGE                 // message  ( forward )
1420+ 72F0 DA 6A 89 69                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1420+ 72F4 42 68
1421+ 72F6 22 6B 89 69                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1421+ 72FA 50 6C
1422+ 72FC                                                              // if
1423+ 72FC F5 63                        dw      ZBRANCH
1424+ 72FE 08 00                        dw      Error_Endif_2 - $
1425+ 7300 28 6B 89 69                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1425+ 7304 24 69
1426+ 7306              Error_Endif_2:                                  // endif
1427+ 7306 22 75                        dw      QUIT                    // quit ( forward )
1428+ 7308 52 68                        dw      EXIT                    // ;
1429+ 730A              //  ______________________________________________________________________
1430+ 730A              //
1431+ 730A              // id.          nfa --
1432+ 730A                              Colon_Def ID_DOT,  "ID.", is_normal
1432+ 730A             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1432+ 730A             >
1432+ 730A             >Dict_Ptr        defl    $
1432+ 730A             >
1432+ 730A             >//              ______________________________________________________________________
1432+ 730A             >//              Heap part
1432+ 730A             >
1432+ 730A             >
1432+ 730A             >                org     (Heap_Ptr & $1FFF) + $E000
1432+ E8AE             >
1432+ E8AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1432+ E8AE             >Latest_Definition defl  Heap_Ptr
1432+ E8AE             >
1432+ E8AE             >                // dummy db directives used to calculate length of namec
1432+ E8AE 49 44 2E    >                db      "ID."
1432+ E8B1             >len_NFA         defl    $ - temp_NFA
1432+ E8B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1432+ E8AE             >
1432+ E8AE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1432+ E8AF 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1432+ E8B2             >                org     $-1                 // alter last byte of Name just above to set
1432+ E8B1 AE          >                db      {b $} | END_BIT     // msb as name end
1432+ E8B2             >
1432+ E8B2 A4 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1432+ E8B4             >Prev_Ptr        defl    Heap_Ptr
1432+ E8B4             >
1432+ E8B4             >mirror_Ptr      defl    $
1432+ E8B4             >
1432+ E8B4 0C 73       >                dw      Dict_Ptr + 2        // xt
1432+ E8B6             >Heap_Ptr        defl    $ - $E000           // save current HP
1432+ E8B6             >
1432+ E8B6             >Current_HP      defl  $ - $E000             // used to set HP once!
1432+ E8B6             >
1432+ E8B6             >//              ______________________________________________________________________
1432+ E8B6             >//              Dictionary part
1432+ E8B6             >
1432+ E8B6             >                org     Dict_Ptr
1432+ 730A             >
1432+ 730A B4 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1432+ 730C             >
1432+ 730C             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1432+ 730C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1432+ 730F             >
1432+ 730F             >
1432+ 730F             >                endif           ; ok        // for other definitions it "points" the correct handler
1432+ 730F             >                // Use of "; ok" to suppress "warning[fwdref]"
1432+ 730F             >
1432+ 730F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1433+ 730F 06 6D                        dw      QTOHEAP
1434+ 7311 2B 69 88 6A                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1434+ 7315 82 6C
1435+ 7317 BE 68                        dw      ONE_PLUS                // 1+
1436+ 7319 07 69 E5 6B                  dw      OVER, SUBTRACT          // over -
1437+ 731D 2B 69 5C 68                  dw      DUP, TO_R               // >r
1438+ 7321 B5 70 24 69                  dw      PAD, SWAP               // pad swap
1439+ 7325 8D 67                        dw      CMOVE                   // cmove
1440+ 7327 B5 70 BE 68                  dw      PAD, ONE_PLUS           // pad 1+
1441+ 732B 67 68 C5 68                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1442+ 732F 72 6F 77 6C                  dw      TYPE, SPACE             // type
1443+ 7333 52 68                        dw      EXIT                    // ;
1444+ 7335
1445+ 7335              //  ______________________________________________________________________
1446+ 7335              //
1447+ 7335              // code         -- cccc
1448+ 7335                              Colon_Def CODE,  "CODE", is_normal
1448+ 7335             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1448+ 7335             >
1448+ 7335             >Dict_Ptr        defl    $
1448+ 7335             >
1448+ 7335             >//              ______________________________________________________________________
1448+ 7335             >//              Heap part
1448+ 7335             >
1448+ 7335             >
1448+ 7335             >                org     (Heap_Ptr & $1FFF) + $E000
1448+ E8B6             >
1448+ E8B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1448+ E8B6             >Latest_Definition defl  Heap_Ptr
1448+ E8B6             >
1448+ E8B6             >                // dummy db directives used to calculate length of namec
1448+ E8B6 43 4F 44 45 >                db      "CODE"
1448+ E8BA             >len_NFA         defl    $ - temp_NFA
1448+ E8BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1448+ E8B6             >
1448+ E8B6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1448+ E8B7 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1448+ E8BB             >                org     $-1                 // alter last byte of Name just above to set
1448+ E8BA C5          >                db      {b $} | END_BIT     // msb as name end
1448+ E8BB             >
1448+ E8BB AE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1448+ E8BD             >Prev_Ptr        defl    Heap_Ptr
1448+ E8BD             >
1448+ E8BD             >mirror_Ptr      defl    $
1448+ E8BD             >
1448+ E8BD 37 73       >                dw      Dict_Ptr + 2        // xt
1448+ E8BF             >Heap_Ptr        defl    $ - $E000           // save current HP
1448+ E8BF             >
1448+ E8BF             >Current_HP      defl  $ - $E000             // used to set HP once!
1448+ E8BF             >
1448+ E8BF             >//              ______________________________________________________________________
1448+ E8BF             >//              Dictionary part
1448+ E8BF             >
1448+ E8BF             >                org     Dict_Ptr
1448+ 7335             >
1448+ 7335 BD 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1448+ 7337             >
1448+ 7337             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1448+ 7337 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1448+ 733A             >
1448+ 733A             >
1448+ 733A             >                endif           ; ok        // for other definitions it "points" the correct handler
1448+ 733A             >                // Use of "; ok" to suppress "warning[fwdref]"
1448+ 733A             >
1448+ 733A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1449+ 733A BE 72                        dw      LFIND                   // -find
1450+ 733C                                                              // if
1451+ 733C F5 63                        dw      ZBRANCH
1452+ 733E 10 00                        dw      Code_Endif - $
1453+ 7340 10 69                        dw          DROP                //      drop
1454+ 7342 6C 6D 0C 73                  dw          TO_NAME, ID_DOT     //      >name id.
1455+ 7346 A3 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1455+ 734A 33 77
1456+ 734C 77 6C                        dw          SPACE               //      space
1457+ 734E              Code_Endif:                                     // endif
1458+ 734E A6 6B                        dw      HERE                    // here
1459+ 7350                                                              // ( ---- here begins NFA ---- )
1460+ 7350 2B 69 9E 69                  dw      DUP, CFETCH             // dup c@
1461+ 7354 EC 6A 89 69                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1461+ 7358 2A 6C
1462+ 735A BE 68                        dw      ONE_PLUS                // 1+
1463+ 735C 2B 69 B1 6B                  dw      DUP, ALLOT              // dup allot
1464+ 7360 D4 68 D4 68                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1465+ 7364 5C 68                        dw      TO_R                    // >r
1466+ 7366 2B 69                        dw      DUP                     // dup
1467+ 7368 A3 63                        dw      LIT
1468+ 736A A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1469+ 736C 80 69                        dw      TOGGLE                  // toggle
1470+ 736E A6 6B C5 68                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1471+ 7372 A3 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1471+ 7376 80 69
1472+ 7378                                                              // ( ---- here is LFA ---- )
1473+ 7378 46 6B 89 69                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1473+ 737C 89 69
1474+ 737E BC 6B                        dw      COMMA
1475+ 7380 2B 69 D4 68                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1475+ 7384 BC 6B
1476+ 7386 17 6D                        dw      HP_FETCH                // hp@
1477+ 7388 46 6B 89 69                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1477+ 738C 93 69
1478+ 738E 17 6D E8 6C                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1479+ 7392 72 68 8D 67                  dw      R_OP, CMOVE
1480+ 7396 72 68 E6 68                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1480+ 739A B1 6B
1481+ 739C 67 68 16 6B                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1481+ 73A0 71 69
1482+ 73A2 17 6D D9 68                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1483+ 73A6 BC 6B                        dw      COMMA
1484+ 73A8 81 6A 29 6D                  dw      ZERO, SKIP_HP_PAGE
1485+ 73AC                                                              // ( ---- here is LFA ---- )
1486+ 73AC 52 68                        dw      EXIT                    // ;
1487+ 73AE
1488+ 73AE              //  ______________________________________________________________________
1489+ 73AE              //
1490+ 73AE              // create       -- cccc     ( compile time )
1491+ 73AE              //              -- a        ( run time )
1492+ 73AE                              Colon_Def CREATE,  "CREATE", is_normal
1492+ 73AE             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1492+ 73AE             >
1492+ 73AE             >Dict_Ptr        defl    $
1492+ 73AE             >
1492+ 73AE             >//              ______________________________________________________________________
1492+ 73AE             >//              Heap part
1492+ 73AE             >
1492+ 73AE             >
1492+ 73AE             >                org     (Heap_Ptr & $1FFF) + $E000
1492+ E8BF             >
1492+ E8BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1492+ E8BF             >Latest_Definition defl  Heap_Ptr
1492+ E8BF             >
1492+ E8BF             >                // dummy db directives used to calculate length of namec
1492+ E8BF 43 52 45 41 >                db      "CREATE"
1492+ E8C3 54 45       >
1492+ E8C5             >len_NFA         defl    $ - temp_NFA
1492+ E8C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1492+ E8BF             >
1492+ E8BF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1492+ E8C0 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1492+ E8C4 54 45       >
1492+ E8C6             >                org     $-1                 // alter last byte of Name just above to set
1492+ E8C5 C5          >                db      {b $} | END_BIT     // msb as name end
1492+ E8C6             >
1492+ E8C6 B6 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1492+ E8C8             >Prev_Ptr        defl    Heap_Ptr
1492+ E8C8             >
1492+ E8C8             >mirror_Ptr      defl    $
1492+ E8C8             >
1492+ E8C8 B0 73       >                dw      Dict_Ptr + 2        // xt
1492+ E8CA             >Heap_Ptr        defl    $ - $E000           // save current HP
1492+ E8CA             >
1492+ E8CA             >Current_HP      defl  $ - $E000             // used to set HP once!
1492+ E8CA             >
1492+ E8CA             >//              ______________________________________________________________________
1492+ E8CA             >//              Dictionary part
1492+ E8CA             >
1492+ E8CA             >                org     Dict_Ptr
1492+ 73AE             >
1492+ 73AE C8 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1492+ 73B0             >
1492+ 73B0             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1492+ 73B0 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1492+ 73B3             >
1492+ 73B3             >
1492+ 73B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1492+ 73B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1492+ 73B3             >
1492+ 73B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1493+ 73B3 37 73 8E 6E                  dw      CODE, SMUDGE            // code smudge
1494+ 73B7 A3 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1494+ 73BB CB 6B
1495+ 73BD A3 63 68 6A                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1495+ 73C1 BC 6B
1496+ 73C3 CA 6E                        dw      C_SEMICOLON_CODE
1497+ 73C5                              // this routine is called from the call coded in CFA
1498+ 73C5              Create_Ptr:
1499+ 73C5
1500+ 73C5
1501+ 73C5
1502+ 73C5                              next
1502+ 73C5 DD E9       >                jp      (ix)
1503+ 73C7
1504+ 73C7              //  ______________________________________________________________________
1505+ 73C7              //
1506+ 73C7              // [compile]    -- cccc     ( compile time )
1507+ 73C7                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1507+ 73C7             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1507+ 73C7             >
1507+ 73C7             >Dict_Ptr        defl    $
1507+ 73C7             >
1507+ 73C7             >//              ______________________________________________________________________
1507+ 73C7             >//              Heap part
1507+ 73C7             >
1507+ 73C7             >
1507+ 73C7             >                org     (Heap_Ptr & $1FFF) + $E000
1507+ E8CA             >
1507+ E8CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1507+ E8CA             >Latest_Definition defl  Heap_Ptr
1507+ E8CA             >
1507+ E8CA             >                // dummy db directives used to calculate length of namec
1507+ E8CA 5B 43 4F 4D >                db      "[COMPILE]"
1507+ E8CE 50 49 4C 45 >
1507+ E8D2 5D          >
1507+ E8D3             >len_NFA         defl    $ - temp_NFA
1507+ E8D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1507+ E8CA             >
1507+ E8CA C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1507+ E8CB 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1507+ E8CF 50 49 4C 45 >
1507+ E8D3 5D          >
1507+ E8D4             >                org     $-1                 // alter last byte of Name just above to set
1507+ E8D3 DD          >                db      {b $} | END_BIT     // msb as name end
1507+ E8D4             >
1507+ E8D4 BF 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1507+ E8D6             >Prev_Ptr        defl    Heap_Ptr
1507+ E8D6             >
1507+ E8D6             >mirror_Ptr      defl    $
1507+ E8D6             >
1507+ E8D6 C9 73       >                dw      Dict_Ptr + 2        // xt
1507+ E8D8             >Heap_Ptr        defl    $ - $E000           // save current HP
1507+ E8D8             >
1507+ E8D8             >Current_HP      defl  $ - $E000             // used to set HP once!
1507+ E8D8             >
1507+ E8D8             >//              ______________________________________________________________________
1507+ E8D8             >//              Dictionary part
1507+ E8D8             >
1507+ E8D8             >                org     Dict_Ptr
1507+ 73C7             >
1507+ 73C7 D6 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1507+ 73C9             >
1507+ 73C9             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1507+ 73C9 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1507+ 73CC             >
1507+ 73CC             >
1507+ 73CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1507+ 73CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1507+ 73CC             >
1507+ 73CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1508+ 73CC BE 72                        dw      LFIND                   // -find      (  cfa  b  f  )
1509+ 73CE 77 68                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1510+ 73D0 81 6A E2 6D                  dw      ZERO, QERROR            // 0 ?error
1511+ 73D4 10 69                        dw      DROP                    // drop       (  cfa  )
1512+ 73D6 BC 6B                        dw      COMMA                   // ,
1513+ 73D8 52 68                        dw      EXIT                    // ; immediate
1514+ 73DA
1515+ 73DA              //  ______________________________________________________________________
1516+ 73DA              //
1517+ 73DA              // literal      n --      ( compile time )
1518+ 73DA                              Colon_Def LITERAL,  "LITERAL", is_immediate
1518+ 73DA             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1518+ 73DA             >
1518+ 73DA             >Dict_Ptr        defl    $
1518+ 73DA             >
1518+ 73DA             >//              ______________________________________________________________________
1518+ 73DA             >//              Heap part
1518+ 73DA             >
1518+ 73DA             >
1518+ 73DA             >                org     (Heap_Ptr & $1FFF) + $E000
1518+ E8D8             >
1518+ E8D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1518+ E8D8             >Latest_Definition defl  Heap_Ptr
1518+ E8D8             >
1518+ E8D8             >                // dummy db directives used to calculate length of namec
1518+ E8D8 4C 49 54 45 >                db      "LITERAL"
1518+ E8DC 52 41 4C    >
1518+ E8DF             >len_NFA         defl    $ - temp_NFA
1518+ E8DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1518+ E8D8             >
1518+ E8D8 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1518+ E8D9 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1518+ E8DD 52 41 4C    >
1518+ E8E0             >                org     $-1                 // alter last byte of Name just above to set
1518+ E8DF CC          >                db      {b $} | END_BIT     // msb as name end
1518+ E8E0             >
1518+ E8E0 CA 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1518+ E8E2             >Prev_Ptr        defl    Heap_Ptr
1518+ E8E2             >
1518+ E8E2             >mirror_Ptr      defl    $
1518+ E8E2             >
1518+ E8E2 DC 73       >                dw      Dict_Ptr + 2        // xt
1518+ E8E4             >Heap_Ptr        defl    $ - $E000           // save current HP
1518+ E8E4             >
1518+ E8E4             >Current_HP      defl  $ - $E000             // used to set HP once!
1518+ E8E4             >
1518+ E8E4             >//              ______________________________________________________________________
1518+ E8E4             >//              Dictionary part
1518+ E8E4             >
1518+ E8E4             >                org     Dict_Ptr
1518+ 73DA             >
1518+ 73DA E2 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1518+ 73DC             >
1518+ 73DC             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1518+ 73DC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1518+ 73DF             >
1518+ 73DF             >
1518+ 73DF             >                endif           ; ok        // for other definitions it "points" the correct handler
1518+ 73DF             >                // Use of "; ok" to suppress "warning[fwdref]"
1518+ 73DF             >
1518+ 73DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1519+ 73DF 4C 6B 89 69                  dw      STATE, FETCH            // state @
1520+ 73E3                                                              // if
1521+ 73E3 F5 63                        dw      ZBRANCH
1522+ 73E5 08 00                        dw      Literal_Endif - $
1523+ 73E7 52 6E A3 63                  dw          COMPILE, LIT        //      compile lit
1524+ 73EB BC 6B                        dw          COMMA               //      ,
1525+ 73ED              Literal_Endif:                                  // endif
1526+ 73ED 52 68                        dw      EXIT                    // ; immediate
1527+ 73EF
1528+ 73EF              //  ______________________________________________________________________
1529+ 73EF              //
1530+ 73EF              // dliteral     n --      ( compile time )
1531+ 73EF                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1531+ 73EF             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1531+ 73EF             >
1531+ 73EF             >Dict_Ptr        defl    $
1531+ 73EF             >
1531+ 73EF             >//              ______________________________________________________________________
1531+ 73EF             >//              Heap part
1531+ 73EF             >
1531+ 73EF             >
1531+ 73EF             >                org     (Heap_Ptr & $1FFF) + $E000
1531+ E8E4             >
1531+ E8E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1531+ E8E4             >Latest_Definition defl  Heap_Ptr
1531+ E8E4             >
1531+ E8E4             >                // dummy db directives used to calculate length of namec
1531+ E8E4 44 4C 49 54 >                db      "DLITERAL"
1531+ E8E8 45 52 41 4C >
1531+ E8EC             >len_NFA         defl    $ - temp_NFA
1531+ E8EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1531+ E8E4             >
1531+ E8E4 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1531+ E8E5 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1531+ E8E9 45 52 41 4C >
1531+ E8ED             >                org     $-1                 // alter last byte of Name just above to set
1531+ E8EC CC          >                db      {b $} | END_BIT     // msb as name end
1531+ E8ED             >
1531+ E8ED D8 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1531+ E8EF             >Prev_Ptr        defl    Heap_Ptr
1531+ E8EF             >
1531+ E8EF             >mirror_Ptr      defl    $
1531+ E8EF             >
1531+ E8EF F1 73       >                dw      Dict_Ptr + 2        // xt
1531+ E8F1             >Heap_Ptr        defl    $ - $E000           // save current HP
1531+ E8F1             >
1531+ E8F1             >Current_HP      defl  $ - $E000             // used to set HP once!
1531+ E8F1             >
1531+ E8F1             >//              ______________________________________________________________________
1531+ E8F1             >//              Dictionary part
1531+ E8F1             >
1531+ E8F1             >                org     Dict_Ptr
1531+ 73EF             >
1531+ 73EF EF 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1531+ 73F1             >
1531+ 73F1             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1531+ 73F1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1531+ 73F4             >
1531+ 73F4             >
1531+ 73F4             >                endif           ; ok        // for other definitions it "points" the correct handler
1531+ 73F4             >                // Use of "; ok" to suppress "warning[fwdref]"
1531+ 73F4             >
1531+ 73F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1532+ 73F4 4C 6B 89 69                  dw      STATE, FETCH            // state @
1533+ 73F8                                                              // if
1534+ 73F8 F5 63                        dw      ZBRANCH
1535+ 73FA 08 00                        dw      DLiteral_Endif - $
1536+ 73FC 24 69                        dw          SWAP                //      swap
1537+ 73FE DC 73 DC 73                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1538+ 7402              DLiteral_Endif:                                 // endif
1539+ 7402 52 68                        dw      EXIT                    // ; immediate
1540+ 7404
1541+ 7404              //  ______________________________________________________________________
1542+ 7404              //
1543+ 7404              // [char]       n --      ( compile time )
1544+ 7404              // inside colon definition, gets first character from next input word
1545+ 7404              // and compiles it as literal.
1546+ 7404                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1546+ 7404             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1546+ 7404             >
1546+ 7404             >Dict_Ptr        defl    $
1546+ 7404             >
1546+ 7404             >//              ______________________________________________________________________
1546+ 7404             >//              Heap part
1546+ 7404             >
1546+ 7404             >
1546+ 7404             >                org     (Heap_Ptr & $1FFF) + $E000
1546+ E8F1             >
1546+ E8F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1546+ E8F1             >Latest_Definition defl  Heap_Ptr
1546+ E8F1             >
1546+ E8F1             >                // dummy db directives used to calculate length of namec
1546+ E8F1 5B 43 48 41 >                db      "[CHAR]"
1546+ E8F5 52 5D       >
1546+ E8F7             >len_NFA         defl    $ - temp_NFA
1546+ E8F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1546+ E8F1             >
1546+ E8F1 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1546+ E8F2 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1546+ E8F6 52 5D       >
1546+ E8F8             >                org     $-1                 // alter last byte of Name just above to set
1546+ E8F7 DD          >                db      {b $} | END_BIT     // msb as name end
1546+ E8F8             >
1546+ E8F8 E4 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1546+ E8FA             >Prev_Ptr        defl    Heap_Ptr
1546+ E8FA             >
1546+ E8FA             >mirror_Ptr      defl    $
1546+ E8FA             >
1546+ E8FA 06 74       >                dw      Dict_Ptr + 2        // xt
1546+ E8FC             >Heap_Ptr        defl    $ - $E000           // save current HP
1546+ E8FC             >
1546+ E8FC             >Current_HP      defl  $ - $E000             // used to set HP once!
1546+ E8FC             >
1546+ E8FC             >//              ______________________________________________________________________
1546+ E8FC             >//              Dictionary part
1546+ E8FC             >
1546+ E8FC             >                org     Dict_Ptr
1546+ 7404             >
1546+ 7404 FA 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1546+ 7406             >
1546+ 7406             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1546+ 7406 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1546+ 7409             >
1546+ 7409             >
1546+ 7409             >                endif           ; ok        // for other definitions it "points" the correct handler
1546+ 7409             >                // Use of "; ok" to suppress "warning[fwdref]"
1546+ 7409             >
1546+ 7409             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1547+ 7409 26 71 DC 73                  dw      CHAR, LITERAL           // char [compile] literal
1548+ 740D 52 68                        dw      EXIT                    // ; immediate
1549+ 740F
1550+ 740F              //  ______________________________________________________________________
1551+ 740F              //
1552+ 740F              // 0x00         n --      ( compile time )
1553+ 740F                              Colon_Def NUL_WORD,  $00, is_immediate
1553+ 740F             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1553+ 740F             >
1553+ 740F             >Dict_Ptr        defl    $
1553+ 740F             >
1553+ 740F             >//              ______________________________________________________________________
1553+ 740F             >//              Heap part
1553+ 740F             >
1553+ 740F             >
1553+ 740F             >                org     (Heap_Ptr & $1FFF) + $E000
1553+ E8FC             >
1553+ E8FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1553+ E8FC             >Latest_Definition defl  Heap_Ptr
1553+ E8FC             >
1553+ E8FC             >                // dummy db directives used to calculate length of namec
1553+ E8FC 00          >                db      $00
1553+ E8FD             >len_NFA         defl    $ - temp_NFA
1553+ E8FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1553+ E8FC             >
1553+ E8FC C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1553+ E8FD 00          >                db      $00               // name string in 7-bit ascii, but
1553+ E8FE             >                org     $-1                 // alter last byte of Name just above to set
1553+ E8FD 80          >                db      {b $} | END_BIT     // msb as name end
1553+ E8FE             >
1553+ E8FE F1 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1553+ E900             >Prev_Ptr        defl    Heap_Ptr
1553+ E900             >
1553+ E900             >mirror_Ptr      defl    $
1553+ E900             >
1553+ E900 11 74       >                dw      Dict_Ptr + 2        // xt
1553+ E902             >Heap_Ptr        defl    $ - $E000           // save current HP
1553+ E902             >
1553+ E902             >Current_HP      defl  $ - $E000             // used to set HP once!
1553+ E902             >
1553+ E902             >//              ______________________________________________________________________
1553+ E902             >//              Dictionary part
1553+ E902             >
1553+ E902             >                org     Dict_Ptr
1553+ 740F             >
1553+ 740F 00 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1553+ 7411             >
1553+ 7411             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1553+ 7411 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1553+ 7414             >
1553+ 7414             >
1553+ 7414             >                endif           ; ok        // for other definitions it "points" the correct handler
1553+ 7414             >                // Use of "; ok" to suppress "warning[fwdref]"
1553+ 7414             >
1553+ 7414             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1554+ 7414 22 6B 89 69                  dw      BLK, FETCH, ONE         // blk @ 1
1554+ 7418 88 6A
1555+ 741A 1F 6C                        dw      GREATER                 // > if
1556+ 741C                                                              // if
1557+ 741C F5 63                        dw      ZBRANCH
1558+ 741E 28 00                        dw      Nul_Else_1 - $
1559+ 7420 88 6A 22 6B                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1559+ 7424 71 69
1560+ 7426 81 6A 28 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
1560+ 742A 93 69
1561+ 742C 22 6B 89 69                  dw          BLK, FETCH          //      blk @
1562+ 7430 B9 6A                        dw          BSCR                //      b/scr
1563+ 7432 C5 68                        dw          ONE_SUBTRACT        //      1 -
1564+ 7434 0C 68                        dw          AND_OP              //      and  ( this is tricky )
1565+ 7436 77 68                        dw          ZEQUAL              //      0=
1566+ 7438                                                              //      if
1567+ 7438 F5 63                        dw          ZBRANCH
1568+ 743A 08 00                        dw          Nul_Endif_2 - $
1569+ 743C 0A 6E                        dw              QEXEC           //          ?exec
1570+ 743E 67 68 10 69                  dw              R_TO, DROP      //          r> drop
1571+ 7442              Nul_Endif_2:                                    //      endif
1572+ 7442 E8 63                        dw      BRANCH
1573+ 7444 06 00                        dw      Nul_Endif_1 - $
1574+ 7446              Nul_Else_1:                                     // else
1575+ 7446 67 68 10 69                  dw          R_TO, DROP          //      r> drop
1576+ 744A              Nul_Endif_1:                                    // endif
1577+ 744A 52 68                        dw      EXIT                    // ;
1578+ 744C
1579+ 744C              //  ______________________________________________________________________
1580+ 744C              //
1581+ 744C              // ?stack       --
1582+ 744C              // Raise error #1 if stack is empty and you pop it
1583+ 744C              // Raise error #7 if stack is full.
1584+ 744C              // This means SP must always stay between HERE and FFFF
1585+ 744C              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1586+ 744C              // for Next 8K MMU paging this is $DOE8
1587+ 744C                              Colon_Def QSTACK, "?STACK", is_normal
1587+ 744C             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1587+ 744C             >
1587+ 744C             >Dict_Ptr        defl    $
1587+ 744C             >
1587+ 744C             >//              ______________________________________________________________________
1587+ 744C             >//              Heap part
1587+ 744C             >
1587+ 744C             >
1587+ 744C             >                org     (Heap_Ptr & $1FFF) + $E000
1587+ E902             >
1587+ E902             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1587+ E902             >Latest_Definition defl  Heap_Ptr
1587+ E902             >
1587+ E902             >                // dummy db directives used to calculate length of namec
1587+ E902 3F 53 54 41 >                db      "?STACK"
1587+ E906 43 4B       >
1587+ E908             >len_NFA         defl    $ - temp_NFA
1587+ E908             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1587+ E902             >
1587+ E902 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1587+ E903 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1587+ E907 43 4B       >
1587+ E909             >                org     $-1                 // alter last byte of Name just above to set
1587+ E908 CB          >                db      {b $} | END_BIT     // msb as name end
1587+ E909             >
1587+ E909 FC 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1587+ E90B             >Prev_Ptr        defl    Heap_Ptr
1587+ E90B             >
1587+ E90B             >mirror_Ptr      defl    $
1587+ E90B             >
1587+ E90B 4E 74       >                dw      Dict_Ptr + 2        // xt
1587+ E90D             >Heap_Ptr        defl    $ - $E000           // save current HP
1587+ E90D             >
1587+ E90D             >Current_HP      defl  $ - $E000             // used to set HP once!
1587+ E90D             >
1587+ E90D             >//              ______________________________________________________________________
1587+ E90D             >//              Dictionary part
1587+ E90D             >
1587+ E90D             >                org     Dict_Ptr
1587+ 744C             >
1587+ 744C 0B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1587+ 744E             >
1587+ 744E             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1587+ 744E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1587+ 7451             >
1587+ 7451             >
1587+ 7451             >                endif           ; ok        // for other definitions it "points" the correct handler
1587+ 7451             >                // Use of "; ok" to suppress "warning[fwdref]"
1587+ 7451             >
1587+ 7451             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1588+ 7451 39 68                        dw      SPFETCH                 // sp@
1589+ 7453 DA 6A 89 69                  dw      S0, FETCH               // s0 @
1590+ 7457 24 69 FC 6B                  dw      SWAP, ULESS             // swap u<
1591+ 745B 88 6A E2 6D                  dw      ONE, QERROR             // 1 ?error
1592+ 745F A6 6B                        dw      HERE                    // here
1593+ 7461 DA 6A 89 69                  dw      S0, FETCH, LESS         // s0 @ <
1593+ 7465 0A 6C
1594+ 7467                                                              // if
1595+ 7467 F5 63                        dw      ZBRANCH
1596+ 7469 14 00                        dw      QStack_Endif - $
1597+ 746B 39 68                        dw          SPFETCH             //      sp@
1598+ 746D A6 6B A3 63                  dw          HERE, LIT, 128      //      here 128
1598+ 7471 80 00
1599+ 7473 A5 68 FC 6B                  dw          PLUS, ULESS         //      plus u<
1600+ 7477 A3 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1600+ 747B E2 6D
1601+ 747D              QStack_Endif:                                   // endif
1602+ 747D 52 68                        dw      EXIT                    // ;
1603+ 747F
1604+ 747F
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
 122  747F                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
   1+ 747F              //  ______________________________________________________________________
   2+ 747F              //
   3+ 747F              //  L2.asm
   4+ 747F              //
   5+ 747F              //  Level-2 3dos
   6+ 747F              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 747F              //  ______________________________________________________________________
   8+ 747F
   9+ 747F
  10+ 747F              //  ______________________________________________________________________
  11+ 747F              //
  12+ 747F              // interpret    --
  13+ 747F              // This is the text interpreter.
  14+ 747F              // It executes or compiles, depending on STATE, the text coming from
  15+ 747F              // current input stream.
  16+ 747F              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 747F              // the word is interpreted as numeric and converted, using current BASE,
  18+ 747F              // leaving on top of stack a single or double precision number, depending
  19+ 747F              // on the presence of a decimal point.
  20+ 747F              // If the number conversion fails, the terminal is notified with ? followed
  21+ 747F              // by the offending word.
  22+ 747F                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 747F             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 747F             >
  22+ 747F             >Dict_Ptr        defl    $
  22+ 747F             >
  22+ 747F             >//              ______________________________________________________________________
  22+ 747F             >//              Heap part
  22+ 747F             >
  22+ 747F             >
  22+ 747F             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E90D             >
  22+ E90D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E90D             >Latest_Definition defl  Heap_Ptr
  22+ E90D             >
  22+ E90D             >                // dummy db directives used to calculate length of namec
  22+ E90D 49 4E 54 45 >                db      "INTERPRET"
  22+ E911 52 50 52 45 >
  22+ E915 54          >
  22+ E916             >len_NFA         defl    $ - temp_NFA
  22+ E916             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E90D             >
  22+ E90D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E90E 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E912 52 50 52 45 >
  22+ E916 54          >
  22+ E917             >                org     $-1                 // alter last byte of Name just above to set
  22+ E916 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E917             >
  22+ E917 02 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E919             >Prev_Ptr        defl    Heap_Ptr
  22+ E919             >
  22+ E919             >mirror_Ptr      defl    $
  22+ E919             >
  22+ E919 81 74       >                dw      Dict_Ptr + 2        // xt
  22+ E91B             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E91B             >
  22+ E91B             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E91B             >
  22+ E91B             >//              ______________________________________________________________________
  22+ E91B             >//              Dictionary part
  22+ E91B             >
  22+ E91B             >                org     Dict_Ptr
  22+ 747F             >
  22+ 747F 19 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 7481             >
  22+ 7481             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 7481 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 7484             >
  22+ 7484             >
  22+ 7484             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 7484             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 7484             >
  22+ 7484             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 7484
  24+ 7484              Interpret_Begin:                                        // begin
  25+ 7484 BE 72                        dw          LFIND                       //      -find
  26+ 7486                                                                      //      if
  27+ 7486 F5 63                        dw          ZBRANCH
  28+ 7488 1A 00                        dw          Interpret_Else_1 - $
  29+ 748A 4C 6B 89 69                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 748E 0A 6C
  30+ 7490                                                                      //          if
  31+ 7490 F5 63                        dw              ZBRANCH
  32+ 7492 08 00                        dw              Interpret_Else_2 - $
  33+ 7494 67 6E                        dw                  COMPILE_XT          //              compile,
  34+ 7496                                                                      //          else
  35+ 7496 E8 63                        dw              BRANCH
  36+ 7498 06 00                        dw              Interpret_Endif_2 - $
  37+ 749A              Interpret_Else_2:
  38+ 749A AE 63 48 6A                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 749E              Interpret_Endif_2:                                      //          endif
  40+ 749E                                                                      //      else
  41+ 749E E8 63                        dw          BRANCH
  42+ 74A0 1A 00                        dw          Interpret_Endif_1 - $
  43+ 74A2              Interpret_Else_1:
  44+ 74A2 A6 6B 46 72                  dw              HERE, NUMBER            //          here number
  45+ 74A6 58 6B 89 69                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 74AA BE 68
  46+ 74AC                                                                      //          if
  47+ 74AC F5 63                        dw              ZBRANCH
  48+ 74AE 08 00                        dw              Interpret_Else_3 - $
  49+ 74B0              //              dw                  NMODE, FETCH        //              nmode @
  50+ 74B0              //                                                      //              if
  51+ 74B0              //              dw                  ZBRANCH
  52+ 74B0              //              dw                  Interpret_Endif_4 - $
  53+ 74B0              //              dw                      ONE, ZERO       //                  1 0
  54+ 74B0              //              dw                      TWO_DROP        //                  2drop
  55+ 74B0              //Interpret_Endif_4:                                      //              endif
  56+ 74B0 F1 73                        dw                  DLITERAL            //              [compile] dliteral
  57+ 74B2                                                                      //          else
  58+ 74B2 E8 63                        dw              BRANCH
  59+ 74B4 06 00                        dw              Interpret_Endif_3 - $
  60+ 74B6              Interpret_Else_3:
  61+ 74B6 10 69                        dw                  DROP                //              drop
  62+ 74B8 DC 73                        dw                  LITERAL             //              [compile]  literal
  63+ 74BA              Interpret_Endif_3:                                      //          endif
  64+ 74BA              Interpret_Endif_1:                                      //      endif
  65+ 74BA 4E 74                        dw          QSTACK                      //      ?stack
  66+ 74BC B3 66                        dw          QTERMINAL                   //      ?terminal
  67+ 74BE                                                                      //      if
  68+ 74BE F5 63                        dw          ZBRANCH
  69+ 74C0 04 00                        dw          Interpret_Endif_5 - $
  70+ 74C2 22 75                        dw              QUIT                    //          quit
  71+ 74C4              Interpret_Endif_5:                                      //      endif
  72+ 74C4 E8 63                        dw      BRANCH
  73+ 74C6 BE FF                        dw      Interpret_Begin - $
  74+ 74C8 52 68                        dw      EXIT                            // ;
  75+ 74CA
  76+ 74CA              //  ______________________________________________________________________
  77+ 74CA              //
  78+ 74CA              // vocabulary   -- cccc     ( compile time )
  79+ 74CA              // Defining word used in the form   VOCABULARY cccc
  80+ 74CA              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 74CA              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 74CA              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 74CA              // so new definitions can be inserted in that vocabulary.
  84+ 74CA                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 74CA             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 74CA             >
  84+ 74CA             >Dict_Ptr        defl    $
  84+ 74CA             >
  84+ 74CA             >//              ______________________________________________________________________
  84+ 74CA             >//              Heap part
  84+ 74CA             >
  84+ 74CA             >
  84+ 74CA             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E91B             >
  84+ E91B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E91B             >Latest_Definition defl  Heap_Ptr
  84+ E91B             >
  84+ E91B             >                // dummy db directives used to calculate length of namec
  84+ E91B 56 4F 43 41 >                db      "VOCABULARY"
  84+ E91F 42 55 4C 41 >
  84+ E923 52 59       >
  84+ E925             >len_NFA         defl    $ - temp_NFA
  84+ E925             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E91B             >
  84+ E91B 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E91C 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E920 42 55 4C 41 >
  84+ E924 52 59       >
  84+ E926             >                org     $-1                 // alter last byte of Name just above to set
  84+ E925 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E926             >
  84+ E926 0D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E928             >Prev_Ptr        defl    Heap_Ptr
  84+ E928             >
  84+ E928             >mirror_Ptr      defl    $
  84+ E928             >
  84+ E928 CC 74       >                dw      Dict_Ptr + 2        // xt
  84+ E92A             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E92A             >
  84+ E92A             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E92A             >
  84+ E92A             >//              ______________________________________________________________________
  84+ E92A             >//              Dictionary part
  84+ E92A             >
  84+ E92A             >                org     Dict_Ptr
  84+ 74CA             >
  84+ 74CA 28 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 74CC             >
  84+ 74CC             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 74CC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 74CF             >
  84+ 74CF             >
  84+ 74CF             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 74CF             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 74CF             >
  84+ 74CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 74CF
  86+ 74CF F6 6E                        dw      CBUILDS
  87+ 74D1
  88+ 74D1 A3 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 74D5 BC 6B
  89+ 74D7 46 6B 89 69                  dw      CURRENT, FETCH          // current @
  90+ 74DB D9 68 BC 6B                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 74DF A6 6B                        dw      HERE                    // here
  92+ 74E1 04 6B 89 69                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 74E5 BC 6B
  93+ 74E7 04 6B 93 69                  dw      VOC_LINK, STORE         // voc-link !
  94+ 74EB
  95+ 74EB 01 6F                        dw      DOES_TO                 // does>
  96+ 74ED              Vocabulary_Does:
  97+ 74ED D4 68                        dw      CELL_PLUS               // cell+
  98+ 74EF 40 6B 93 69                  dw      CONTEXT, STORE          // context !
  99+ 74F3 52 68                        dw      EXIT                    // ;
 100+ 74F5
 101+ 74F5              //  ______________________________________________________________________
 102+ 74F5              //
 103+ 74F5              // forth        --
 104+ 74F5              // Name of the first vocabulary.
 105+ 74F5              // It makes FORTH the CONTEXT vocabulary.
 106+ 74F5              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 74F5              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 74F5              // of a colon definition to be able to select the vocabulary.
 109+ 74F5
 110+ 74F5                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 74F5             >
 110+ 74F5             >Dict_Ptr        defl    $
 110+ 74F5             >
 110+ 74F5             >//              ______________________________________________________________________
 110+ 74F5             >//              Heap part
 110+ 74F5             >
 110+ 74F5             >
 110+ 74F5             >                org     (Heap_Ptr & $1FFF) + $E000
 110+ E92A             >
 110+ E92A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ E92A             >Latest_Definition defl  Heap_Ptr
 110+ E92A             >
 110+ E92A             >                // dummy db directives used to calculate length of namec
 110+ E92A 46 4F 52 54 >                db      "FORTH"
 110+ E92E 48          >
 110+ E92F             >len_NFA         defl    $ - temp_NFA
 110+ E92F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ E92A             >
 110+ E92A C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ E92B 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ E92F 48          >
 110+ E930             >                org     $-1                 // alter last byte of Name just above to set
 110+ E92F C8          >                db      {b $} | END_BIT     // msb as name end
 110+ E930             >
 110+ E930 1B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 110+ E932             >Prev_Ptr        defl    Heap_Ptr
 110+ E932             >
 110+ E932             >mirror_Ptr      defl    $
 110+ E932             >
 110+ E932 F7 74       >                dw      Dict_Ptr + 2        // xt
 110+ E934             >Heap_Ptr        defl    $ - $E000           // save current HP
 110+ E934             >
 110+ E934             >Current_HP      defl  $ - $E000             // used to set HP once!
 110+ E934             >
 110+ E934             >//              ______________________________________________________________________
 110+ E934             >//              Dictionary part
 110+ E934             >
 110+ E934             >                org     Dict_Ptr
 110+ 74F5             >
 110+ 74F5 32 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 110+ 74F7             >
 110+ 74F7             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 74F7 CD 0E 6F    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 74FA             >
 110+ 74FA             >
 110+ 74FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 74FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 74FA             >
 110+ 74FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 74FA ED 74                        dw      Vocabulary_Does
 112+ 74FC 81 A0                        db      $81, $A0
 113+ 74FE              Forth_Latest_Ptr:
 114+ 74FE 2A 09                        dw      Latest_Definition
 115+ 7500              Voclink_Ptr:
 116+ 7500 00 00                        dw      0
 117+ 7502              // Any new vocabulary is structured as follow:
 118+ 7502              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7502              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7502              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7502              //       at creations it points to the null-word of its parent vocabulary
 122+ 7502              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7502              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7502              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7502              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7502              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7502              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7502
 129+ 7502              //  ______________________________________________________________________
 130+ 7502              //
 131+ 7502              // definitions  --
 132+ 7502              // Used in the form  cccc DEFINITIONS
 133+ 7502              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7502              // vocabulary cccc.
 135+ 7502                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7502             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7502             >
 135+ 7502             >Dict_Ptr        defl    $
 135+ 7502             >
 135+ 7502             >//              ______________________________________________________________________
 135+ 7502             >//              Heap part
 135+ 7502             >
 135+ 7502             >
 135+ 7502             >                org     (Heap_Ptr & $1FFF) + $E000
 135+ E934             >
 135+ E934             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ E934             >Latest_Definition defl  Heap_Ptr
 135+ E934             >
 135+ E934             >                // dummy db directives used to calculate length of namec
 135+ E934 44 45 46 49 >                db      "DEFINITIONS"
 135+ E938 4E 49 54 49 >
 135+ E93C 4F 4E 53    >
 135+ E93F             >len_NFA         defl    $ - temp_NFA
 135+ E93F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ E934             >
 135+ E934 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ E935 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ E939 4E 49 54 49 >
 135+ E93D 4F 4E 53    >
 135+ E940             >                org     $-1                 // alter last byte of Name just above to set
 135+ E93F D3          >                db      {b $} | END_BIT     // msb as name end
 135+ E940             >
 135+ E940 2A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 135+ E942             >Prev_Ptr        defl    Heap_Ptr
 135+ E942             >
 135+ E942             >mirror_Ptr      defl    $
 135+ E942             >
 135+ E942 04 75       >                dw      Dict_Ptr + 2        // xt
 135+ E944             >Heap_Ptr        defl    $ - $E000           // save current HP
 135+ E944             >
 135+ E944             >Current_HP      defl  $ - $E000             // used to set HP once!
 135+ E944             >
 135+ E944             >//              ______________________________________________________________________
 135+ E944             >//              Dictionary part
 135+ E944             >
 135+ E944             >                org     Dict_Ptr
 135+ 7502             >
 135+ 7502 42 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 135+ 7504             >
 135+ 7504             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7504 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7507             >
 135+ 7507             >
 135+ 7507             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7507             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7507             >
 135+ 7507             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7507 40 6B 89 69                  dw      CONTEXT, FETCH          // context @
 137+ 750B 46 6B 93 69                  dw      CURRENT, STORE          // current !
 138+ 750F 52 68                        dw      EXIT                    // ;
 139+ 7511
 140+ 7511              //  ______________________________________________________________________
 141+ 7511              //
 142+ 7511              // (            -- cccc )
 143+ 7511              // the following text is interpreted as a comment until a closing )
 144+ 7511                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7511             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7511             >
 144+ 7511             >Dict_Ptr        defl    $
 144+ 7511             >
 144+ 7511             >//              ______________________________________________________________________
 144+ 7511             >//              Heap part
 144+ 7511             >
 144+ 7511             >
 144+ 7511             >                org     (Heap_Ptr & $1FFF) + $E000
 144+ E944             >
 144+ E944             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ E944             >Latest_Definition defl  Heap_Ptr
 144+ E944             >
 144+ E944             >                // dummy db directives used to calculate length of namec
 144+ E944 28          >                db      "("
 144+ E945             >len_NFA         defl    $ - temp_NFA
 144+ E945             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ E944             >
 144+ E944 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ E945 28          >                db      "("               // name string in 7-bit ascii, but
 144+ E946             >                org     $-1                 // alter last byte of Name just above to set
 144+ E945 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ E946             >
 144+ E946 34 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 144+ E948             >Prev_Ptr        defl    Heap_Ptr
 144+ E948             >
 144+ E948             >mirror_Ptr      defl    $
 144+ E948             >
 144+ E948 13 75       >                dw      Dict_Ptr + 2        // xt
 144+ E94A             >Heap_Ptr        defl    $ - $E000           // save current HP
 144+ E94A             >
 144+ E94A             >Current_HP      defl  $ - $E000             // used to set HP once!
 144+ E94A             >
 144+ E94A             >//              ______________________________________________________________________
 144+ E94A             >//              Dictionary part
 144+ E94A             >
 144+ E94A             >                org     Dict_Ptr
 144+ 7511             >
 144+ 7511 48 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 144+ 7513             >
 144+ 7513             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7513 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7516             >
 144+ 7516             >
 144+ 7516             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7516             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7516             >
 144+ 7516             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7516 A3 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 751A C4 70 10 69                  dw      WORD, DROP              // word drop
 147+ 751E 52 68                        dw      EXIT                    // ;
 148+ 7520
 149+ 7520              //  ______________________________________________________________________
 150+ 7520              //
 151+ 7520              // quit         --
 152+ 7520              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7520                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7520             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7520             >
 153+ 7520             >Dict_Ptr        defl    $
 153+ 7520             >
 153+ 7520             >//              ______________________________________________________________________
 153+ 7520             >//              Heap part
 153+ 7520             >
 153+ 7520             >
 153+ 7520             >                org     (Heap_Ptr & $1FFF) + $E000
 153+ E94A             >
 153+ E94A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ E94A             >Latest_Definition defl  Heap_Ptr
 153+ E94A             >
 153+ E94A             >                // dummy db directives used to calculate length of namec
 153+ E94A 51 55 49 54 >                db      "QUIT"
 153+ E94E             >len_NFA         defl    $ - temp_NFA
 153+ E94E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ E94A             >
 153+ E94A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ E94B 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ E94F             >                org     $-1                 // alter last byte of Name just above to set
 153+ E94E D4          >                db      {b $} | END_BIT     // msb as name end
 153+ E94F             >
 153+ E94F 44 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 153+ E951             >Prev_Ptr        defl    Heap_Ptr
 153+ E951             >
 153+ E951             >mirror_Ptr      defl    $
 153+ E951             >
 153+ E951 22 75       >                dw      Dict_Ptr + 2        // xt
 153+ E953             >Heap_Ptr        defl    $ - $E000           // save current HP
 153+ E953             >
 153+ E953             >Current_HP      defl  $ - $E000             // used to set HP once!
 153+ E953             >
 153+ E953             >//              ______________________________________________________________________
 153+ E953             >//              Dictionary part
 153+ E953             >
 153+ E953             >                org     Dict_Ptr
 153+ 7520             >
 153+ 7520 51 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 153+ 7522             >
 153+ 7522             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7522 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7525             >
 153+ 7525             >
 153+ 7525             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7525             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7525             >
 153+ 7525             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7525
 155+ 7525 8E 6B 89 69                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7529 FF 66 10 69                  dw      F_CLOSE, DROP           // f_close drop
 157+ 752D 81 6A 8E 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7531 93 69
 158+ 7533 81 6A 22 6B                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7537 93 69
 159+ 7539 72 6E                        dw      SQUARED_OPEN            // [compile] [
 160+ 753B                                                              // begin
 161+ 753B              Quit_Begin:
 162+ 753B E0 6A 89 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 753F 4D 68
 163+ 7541 B6 65                        dw      CR                      //      cr
 164+ 7543 61 70                        dw      QUERY                   //      query
 165+ 7545              Next_Breakpoint_1:
 166+ 7545 81 74                        dw      INTERPRET               //      interpret
 167+ 7547 4C 6B 89 69                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 754B 77 68
 168+ 754D                                                              //      if
 169+ 754D F5 63                        dw      ZBRANCH
 170+ 754F 07 00                        dw      Quit_Endif - $
 171+ 7551 0F 71                        dw          C_DOT_QUOTE
 172+ 7553 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 7556              Quit_Endif:                                     //      else
 174+ 7556                                                              // again
 175+ 7556 E8 63                        dw      BRANCH
 176+ 7558 E3 FF                        dw      Quit_Begin - $
 177+ 755A 52 68                        dw      EXIT                    // ;
 178+ 755C
 179+ 755C              //  ______________________________________________________________________
 180+ 755C              //
 181+ 755C              // abort        --
 182+ 755C                              Colon_Def ABORT, "ABORT", is_normal
 182+ 755C             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 755C             >
 182+ 755C             >Dict_Ptr        defl    $
 182+ 755C             >
 182+ 755C             >//              ______________________________________________________________________
 182+ 755C             >//              Heap part
 182+ 755C             >
 182+ 755C             >
 182+ 755C             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E953             >
 182+ E953             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E953             >Latest_Definition defl  Heap_Ptr
 182+ E953             >
 182+ E953             >                // dummy db directives used to calculate length of namec
 182+ E953 41 42 4F 52 >                db      "ABORT"
 182+ E957 54          >
 182+ E958             >len_NFA         defl    $ - temp_NFA
 182+ E958             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E953             >
 182+ E953 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E954 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ E958 54          >
 182+ E959             >                org     $-1                 // alter last byte of Name just above to set
 182+ E958 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ E959             >
 182+ E959 4A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E95B             >Prev_Ptr        defl    Heap_Ptr
 182+ E95B             >
 182+ E95B             >mirror_Ptr      defl    $
 182+ E95B             >
 182+ E95B 5E 75       >                dw      Dict_Ptr + 2        // xt
 182+ E95D             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E95D             >
 182+ E95D             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E95D             >
 182+ E95D             >//              ______________________________________________________________________
 182+ E95D             >//              Dictionary part
 182+ E95D             >
 182+ E95D             >                org     Dict_Ptr
 182+ 755C             >
 182+ 755C 5B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 755E             >
 182+ 755E             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 755E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 7561             >
 182+ 7561             >
 182+ 7561             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 7561             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 7561             >
 182+ 7561             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 7561 DA 6A 89 69                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 7565 42 68
 184+ 7567 BB 6E                        dw      DECIMAL                 // decimal
 185+ 7569 F7 74                        dw      FORTH                   // [compile] forth
 186+ 756B 04 75                        dw      DEFINITIONS             // definitions
 187+ 756D              Autoexec_Ptr:
 188+ 756D 7B 7F                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 756F 22 75                        dw      QUIT                    // quit
 190+ 7571 52 68                        dw      EXIT                    // ;
 191+ 7573
 192+ 7573              //  ______________________________________________________________________
 193+ 7573              //
 194+ 7573              // warm         --
 195+ 7573                              Colon_Def WARM, "WARM", is_normal
 195+ 7573             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 7573             >
 195+ 7573             >Dict_Ptr        defl    $
 195+ 7573             >
 195+ 7573             >//              ______________________________________________________________________
 195+ 7573             >//              Heap part
 195+ 7573             >
 195+ 7573             >
 195+ 7573             >                org     (Heap_Ptr & $1FFF) + $E000
 195+ E95D             >
 195+ E95D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ E95D             >Latest_Definition defl  Heap_Ptr
 195+ E95D             >
 195+ E95D             >                // dummy db directives used to calculate length of namec
 195+ E95D 57 41 52 4D >                db      "WARM"
 195+ E961             >len_NFA         defl    $ - temp_NFA
 195+ E961             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ E95D             >
 195+ E95D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ E95E 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ E962             >                org     $-1                 // alter last byte of Name just above to set
 195+ E961 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ E962             >
 195+ E962 53 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 195+ E964             >Prev_Ptr        defl    Heap_Ptr
 195+ E964             >
 195+ E964             >mirror_Ptr      defl    $
 195+ E964             >
 195+ E964 75 75       >                dw      Dict_Ptr + 2        // xt
 195+ E966             >Heap_Ptr        defl    $ - $E000           // save current HP
 195+ E966             >
 195+ E966             >Current_HP      defl  $ - $E000             // used to set HP once!
 195+ E966             >
 195+ E966             >//              ______________________________________________________________________
 195+ E966             >//              Dictionary part
 195+ E966             >
 195+ E966             >                org     Dict_Ptr
 195+ 7573             >
 195+ 7573 64 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 195+ 7575             >
 195+ 7575             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 7575 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 7578             >
 195+ 7578             >
 195+ 7578             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 7578             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 7578             >
 195+ 7578             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 7578 31 78                        dw      BLK_INIT                // blk-init
 197+ 757A 55 7F                        dw      SPLASH                  // splash
 198+ 757C A3 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 7580 60 6C
 199+ 7582 5E 75                        dw      ABORT                   // abort
 200+ 7584 52 68                        dw      EXIT                    // exit
 201+ 7586
 202+ 7586              //  ______________________________________________________________________
 203+ 7586              //
 204+ 7586              // cold         --
 205+ 7586                              Colon_Def COLD, "COLD", is_normal
 205+ 7586             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 7586             >
 205+ 7586             >Dict_Ptr        defl    $
 205+ 7586             >
 205+ 7586             >//              ______________________________________________________________________
 205+ 7586             >//              Heap part
 205+ 7586             >
 205+ 7586             >
 205+ 7586             >                org     (Heap_Ptr & $1FFF) + $E000
 205+ E966             >
 205+ E966             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ E966             >Latest_Definition defl  Heap_Ptr
 205+ E966             >
 205+ E966             >                // dummy db directives used to calculate length of namec
 205+ E966 43 4F 4C 44 >                db      "COLD"
 205+ E96A             >len_NFA         defl    $ - temp_NFA
 205+ E96A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ E966             >
 205+ E966 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ E967 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ E96B             >                org     $-1                 // alter last byte of Name just above to set
 205+ E96A C4          >                db      {b $} | END_BIT     // msb as name end
 205+ E96B             >
 205+ E96B 5D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 205+ E96D             >Prev_Ptr        defl    Heap_Ptr
 205+ E96D             >
 205+ E96D             >mirror_Ptr      defl    $
 205+ E96D             >
 205+ E96D 88 75       >                dw      Dict_Ptr + 2        // xt
 205+ E96F             >Heap_Ptr        defl    $ - $E000           // save current HP
 205+ E96F             >
 205+ E96F             >Current_HP      defl  $ - $E000             // used to set HP once!
 205+ E96F             >
 205+ E96F             >//              ______________________________________________________________________
 205+ E96F             >//              Dictionary part
 205+ E96F             >
 205+ E96F             >                org     Dict_Ptr
 205+ 7586             >
 205+ 7586 6D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 205+ 7588             >
 205+ 7588             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 7588 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 758B             >
 205+ 758B             >
 205+ 758B             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 758B             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 758B             >
 205+ 758B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 758B A3 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 758F A3 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 7593 89 69                        dw      FETCH                   // @
 209+ 7595 A3 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 7599 A5 68
 210+ 759B A3 63 16 00                  dw      LIT, 22                 // 22
 211+ 759F 8D 67                        dw      CMOVE
 212+ 75A1 A3 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 75A5 89 69                        dw      FETCH                   // @
 214+ 75A7 A3 63 FE 74                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 75AB 93 69                        dw      STORE                   // !
 216+ 75AD 81 6A 1C 6B                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 75B1 93 69
 217+ 75B3 0A 6B 89 69                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 75B7 2B 69
 218+ 75B9 76 6B 93 69                  dw      USE, STORE              // use !
 219+ 75BD 7C 6B 93 69                  dw      PREV, STORE             // prev !
 220+ 75C1 A3 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 75C5 88 6B 93 69
 221+ 75C9              //              dw      LIT, 8
 222+ 75C9              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 75C9
 224+ 75C9 75 75        Warm_Start:     dw      WARM
 225+ 75CB 88 75        Cold_Start:     dw      COLD
 226+ 75CD 52 68                        dw      EXIT
 227+ 75CF
 228+ 75CF              //  ______________________________________________________________________
 229+ 75CF              WarmRoutine:
 230+ 75CF              ColdRoutine:
 231+ 75CF DD 21 9A 63                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 232+ 75D3
 233+ 75D3 D9                           exx
 234+ 75D4 E5                           push    hl                      // save Basic's return address
 235+ 75D5 D9                           exx
 236+ 75D6 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 75DA
 238+ 75DA                              // pre-set the four main 16-bit registers
 239+ 75DA ED 7B 78 63                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 240+ 75DE 2A 7A 63                     ld      hl, (R0_origin)         // Return Stack Pointer
 241+ 75E1                              // ld      de, (R0_origin)         // Return Stack Pointer
 242+ 75E1                              ldrphl
 242+ 75E1 22 96 63    >                ld      (RP_Pointer),hl
 243+ 75E4 EB                           ex      de, hl
 244+ 75E5 01 C9 75                     ld      bc, Warm_Start          // Instruction Pointer
 245+ 75E8
 246+ 75E8 38 02                        jr      c, Warm_Skip
 247+ 75EA 03                           inc     bc
 248+ 75EB 03                           inc     bc
 249+ 75EC              Warm_Skip:
 250+ 75EC                              next
 250+ 75EC DD E9       >                jp      (ix)
 251+ 75EE
 252+ 75EE              //  ______________________________________________________________________
 253+ 75EE              //
 254+ 75EE              // basic        --
 255+ 75EE                              New_Def BASIC, "BASIC", is_code, is_normal
 255+ 75EE             >
 255+ 75EE             >Dict_Ptr        defl    $
 255+ 75EE             >
 255+ 75EE             >//              ______________________________________________________________________
 255+ 75EE             >//              Heap part
 255+ 75EE             >
 255+ 75EE             >
 255+ 75EE             >                org     (Heap_Ptr & $1FFF) + $E000
 255+ E96F             >
 255+ E96F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 255+ E96F             >Latest_Definition defl  Heap_Ptr
 255+ E96F             >
 255+ E96F             >                // dummy db directives used to calculate length of namec
 255+ E96F 42 41 53 49 >                db      "BASIC"
 255+ E973 43          >
 255+ E974             >len_NFA         defl    $ - temp_NFA
 255+ E974             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 255+ E96F             >
 255+ E96F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 255+ E970 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 255+ E974 43          >
 255+ E975             >                org     $-1                 // alter last byte of Name just above to set
 255+ E974 C3          >                db      {b $} | END_BIT     // msb as name end
 255+ E975             >
 255+ E975 66 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 255+ E977             >Prev_Ptr        defl    Heap_Ptr
 255+ E977             >
 255+ E977             >mirror_Ptr      defl    $
 255+ E977             >
 255+ E977 F0 75       >                dw      Dict_Ptr + 2        // xt
 255+ E979             >Heap_Ptr        defl    $ - $E000           // save current HP
 255+ E979             >
 255+ E979             >Current_HP      defl  $ - $E000             // used to set HP once!
 255+ E979             >
 255+ E979             >//              ______________________________________________________________________
 255+ E979             >//              Dictionary part
 255+ E979             >
 255+ E979             >                org     Dict_Ptr
 255+ 75EE             >
 255+ 75EE 77 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 255+ 75F0             >
 255+ 75F0             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 255+ 75F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 255+ 75F0 ~           >
 255+ 75F0 ~           >
 255+ 75F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 255+ 75F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 255+ 75F0             >
 255+ 75F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 256+ 75F0 C1                           pop     bc                      // return  TOS  value to Basic
 257+ 75F1 21 00 00                     ld      hl, 0
 258+ 75F4 39                           add     hl, sp
 259+ 75F5 ED 7B 6E 63                  ld      sp, (SP_Basic)          // restore Basic's SP
 260+ 75F9              //              nop
 261+ 75F9 22 6E 63                     ld      (SP_Basic),hl           // but also save Forth's
 262+ 75FC D9                           exx
 263+ 75FD E1                           pop     hl                      // restore h'l'
 264+ 75FE D9                           exx
 265+ 75FF C9                           ret                             // to where USR Basic was left
 266+ 7600
 267+ 7600              //  ______________________________________________________________________
 268+ 7600              //
 269+ 7600              // +-           n1 n2 -- n3
 270+ 7600              // leaves n1 with the sign of n2 as n3.
 271+ 7600                              Colon_Def PLUS_MINUS, "+-", is_normal
 271+ 7600             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 271+ 7600             >
 271+ 7600             >Dict_Ptr        defl    $
 271+ 7600             >
 271+ 7600             >//              ______________________________________________________________________
 271+ 7600             >//              Heap part
 271+ 7600             >
 271+ 7600             >
 271+ 7600             >                org     (Heap_Ptr & $1FFF) + $E000
 271+ E979             >
 271+ E979             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 271+ E979             >Latest_Definition defl  Heap_Ptr
 271+ E979             >
 271+ E979             >                // dummy db directives used to calculate length of namec
 271+ E979 2B 2D       >                db      "+-"
 271+ E97B             >len_NFA         defl    $ - temp_NFA
 271+ E97B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 271+ E979             >
 271+ E979 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 271+ E97A 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 271+ E97C             >                org     $-1                 // alter last byte of Name just above to set
 271+ E97B AD          >                db      {b $} | END_BIT     // msb as name end
 271+ E97C             >
 271+ E97C 6F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 271+ E97E             >Prev_Ptr        defl    Heap_Ptr
 271+ E97E             >
 271+ E97E             >mirror_Ptr      defl    $
 271+ E97E             >
 271+ E97E 02 76       >                dw      Dict_Ptr + 2        // xt
 271+ E980             >Heap_Ptr        defl    $ - $E000           // save current HP
 271+ E980             >
 271+ E980             >Current_HP      defl  $ - $E000             // used to set HP once!
 271+ E980             >
 271+ E980             >//              ______________________________________________________________________
 271+ E980             >//              Dictionary part
 271+ E980             >
 271+ E980             >                org     Dict_Ptr
 271+ 7600             >
 271+ 7600 7E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 271+ 7602             >
 271+ 7602             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 271+ 7602 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 271+ 7605             >
 271+ 7605             >
 271+ 7605             >                endif           ; ok        // for other definitions it "points" the correct handler
 271+ 7605             >                // Use of "; ok" to suppress "warning[fwdref]"
 271+ 7605             >
 271+ 7605             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 272+ 7605 8A 68                        dw      ZLESS                   // 0<
 273+ 7607                                                              // if
 274+ 7607 F5 63                        dw      ZBRANCH
 275+ 7609 04 00                        dw      Plus_Minus_Endif - $
 276+ 760B E6 68                        dw          MINUS               //      minus
 277+ 760D              Plus_Minus_Endif:                               // endif
 278+ 760D 52 68                        dw      EXIT                    // ;
 279+ 760F
 280+ 760F              //  ______________________________________________________________________
 281+ 760F              //
 282+ 760F              // d+-          d1 n -- d2
 283+ 760F              // leaves d1 with the sign of n as d2.
 284+ 760F                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 284+ 760F             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 284+ 760F             >
 284+ 760F             >Dict_Ptr        defl    $
 284+ 760F             >
 284+ 760F             >//              ______________________________________________________________________
 284+ 760F             >//              Heap part
 284+ 760F             >
 284+ 760F             >
 284+ 760F             >                org     (Heap_Ptr & $1FFF) + $E000
 284+ E980             >
 284+ E980             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ E980             >Latest_Definition defl  Heap_Ptr
 284+ E980             >
 284+ E980             >                // dummy db directives used to calculate length of namec
 284+ E980 44 2B 2D    >                db      "D+-"
 284+ E983             >len_NFA         defl    $ - temp_NFA
 284+ E983             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ E980             >
 284+ E980 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ E981 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 284+ E984             >                org     $-1                 // alter last byte of Name just above to set
 284+ E983 AD          >                db      {b $} | END_BIT     // msb as name end
 284+ E984             >
 284+ E984 79 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 284+ E986             >Prev_Ptr        defl    Heap_Ptr
 284+ E986             >
 284+ E986             >mirror_Ptr      defl    $
 284+ E986             >
 284+ E986 11 76       >                dw      Dict_Ptr + 2        // xt
 284+ E988             >Heap_Ptr        defl    $ - $E000           // save current HP
 284+ E988             >
 284+ E988             >Current_HP      defl  $ - $E000             // used to set HP once!
 284+ E988             >
 284+ E988             >//              ______________________________________________________________________
 284+ E988             >//              Dictionary part
 284+ E988             >
 284+ E988             >                org     Dict_Ptr
 284+ 760F             >
 284+ 760F 86 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 284+ 7611             >
 284+ 7611             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 7611 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 284+ 7614             >
 284+ 7614             >
 284+ 7614             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 7614             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 7614             >
 284+ 7614             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 7614 8A 68                        dw      ZLESS                   // 0<
 286+ 7616                                                              // if
 287+ 7616 F5 63                        dw      ZBRANCH
 288+ 7618 04 00                        dw      DPlus_Minus_Endif - $
 289+ 761A F4 68                        dw          DMINUS              //      dminus
 290+ 761C              DPlus_Minus_Endif:                              // endif
 291+ 761C 52 68                        dw      EXIT                    // ;
 292+ 761E
 293+ 761E              //  ______________________________________________________________________
 294+ 761E              //
 295+ 761E              // abs          n1 -- n2
 296+ 761E                              Colon_Def ABS_OP, "ABS", is_normal
 296+ 761E             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 296+ 761E             >
 296+ 761E             >Dict_Ptr        defl    $
 296+ 761E             >
 296+ 761E             >//              ______________________________________________________________________
 296+ 761E             >//              Heap part
 296+ 761E             >
 296+ 761E             >
 296+ 761E             >                org     (Heap_Ptr & $1FFF) + $E000
 296+ E988             >
 296+ E988             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 296+ E988             >Latest_Definition defl  Heap_Ptr
 296+ E988             >
 296+ E988             >                // dummy db directives used to calculate length of namec
 296+ E988 41 42 53    >                db      "ABS"
 296+ E98B             >len_NFA         defl    $ - temp_NFA
 296+ E98B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 296+ E988             >
 296+ E988 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 296+ E989 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 296+ E98C             >                org     $-1                 // alter last byte of Name just above to set
 296+ E98B D3          >                db      {b $} | END_BIT     // msb as name end
 296+ E98C             >
 296+ E98C 80 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 296+ E98E             >Prev_Ptr        defl    Heap_Ptr
 296+ E98E             >
 296+ E98E             >mirror_Ptr      defl    $
 296+ E98E             >
 296+ E98E 20 76       >                dw      Dict_Ptr + 2        // xt
 296+ E990             >Heap_Ptr        defl    $ - $E000           // save current HP
 296+ E990             >
 296+ E990             >Current_HP      defl  $ - $E000             // used to set HP once!
 296+ E990             >
 296+ E990             >//              ______________________________________________________________________
 296+ E990             >//              Dictionary part
 296+ E990             >
 296+ E990             >                org     Dict_Ptr
 296+ 761E             >
 296+ 761E 8E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 296+ 7620             >
 296+ 7620             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 296+ 7620 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 296+ 7623             >
 296+ 7623             >
 296+ 7623             >                endif           ; ok        // for other definitions it "points" the correct handler
 296+ 7623             >                // Use of "; ok" to suppress "warning[fwdref]"
 296+ 7623             >
 296+ 7623             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 297+ 7623 2B 69                        dw      DUP                     // dup
 298+ 7625 02 76                        dw      PLUS_MINUS              // +-
 299+ 7627 52 68                        dw      EXIT                    // ;
 300+ 7629
 301+ 7629              //  ______________________________________________________________________
 302+ 7629              //
 303+ 7629              // dabs         d1 -- d2
 304+ 7629                              Colon_Def DABS, "DABS", is_normal
 304+ 7629             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 304+ 7629             >
 304+ 7629             >Dict_Ptr        defl    $
 304+ 7629             >
 304+ 7629             >//              ______________________________________________________________________
 304+ 7629             >//              Heap part
 304+ 7629             >
 304+ 7629             >
 304+ 7629             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E990             >
 304+ E990             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E990             >Latest_Definition defl  Heap_Ptr
 304+ E990             >
 304+ E990             >                // dummy db directives used to calculate length of namec
 304+ E990 44 41 42 53 >                db      "DABS"
 304+ E994             >len_NFA         defl    $ - temp_NFA
 304+ E994             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E990             >
 304+ E990 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E991 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 304+ E995             >                org     $-1                 // alter last byte of Name just above to set
 304+ E994 D3          >                db      {b $} | END_BIT     // msb as name end
 304+ E995             >
 304+ E995 88 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E997             >Prev_Ptr        defl    Heap_Ptr
 304+ E997             >
 304+ E997             >mirror_Ptr      defl    $
 304+ E997             >
 304+ E997 2B 76       >                dw      Dict_Ptr + 2        // xt
 304+ E999             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E999             >
 304+ E999             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E999             >
 304+ E999             >//              ______________________________________________________________________
 304+ E999             >//              Dictionary part
 304+ E999             >
 304+ E999             >                org     Dict_Ptr
 304+ 7629             >
 304+ 7629 97 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 762B             >
 304+ 762B             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 762B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 762E             >
 304+ 762E             >
 304+ 762E             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 762E             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 762E             >
 304+ 762E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 762E 2B 69                        dw      DUP                     // dup
 306+ 7630 11 76                        dw      DPLUS_MINUS             // d+-
 307+ 7632 52 68                        dw      EXIT                    // ;
 308+ 7634
 309+ 7634              //  ______________________________________________________________________
 310+ 7634              //
 311+ 7634              // m*           n1 n2 -- d
 312+ 7634              // multiply two integer giving a double
 313+ 7634                              Colon_Def MMUL, "M*", is_normal
 313+ 7634             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 313+ 7634             >
 313+ 7634             >Dict_Ptr        defl    $
 313+ 7634             >
 313+ 7634             >//              ______________________________________________________________________
 313+ 7634             >//              Heap part
 313+ 7634             >
 313+ 7634             >
 313+ 7634             >                org     (Heap_Ptr & $1FFF) + $E000
 313+ E999             >
 313+ E999             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 313+ E999             >Latest_Definition defl  Heap_Ptr
 313+ E999             >
 313+ E999             >                // dummy db directives used to calculate length of namec
 313+ E999 4D 2A       >                db      "M*"
 313+ E99B             >len_NFA         defl    $ - temp_NFA
 313+ E99B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 313+ E999             >
 313+ E999 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 313+ E99A 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 313+ E99C             >                org     $-1                 // alter last byte of Name just above to set
 313+ E99B AA          >                db      {b $} | END_BIT     // msb as name end
 313+ E99C             >
 313+ E99C 90 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 313+ E99E             >Prev_Ptr        defl    Heap_Ptr
 313+ E99E             >
 313+ E99E             >mirror_Ptr      defl    $
 313+ E99E             >
 313+ E99E 36 76       >                dw      Dict_Ptr + 2        // xt
 313+ E9A0             >Heap_Ptr        defl    $ - $E000           // save current HP
 313+ E9A0             >
 313+ E9A0             >Current_HP      defl  $ - $E000             // used to set HP once!
 313+ E9A0             >
 313+ E9A0             >//              ______________________________________________________________________
 313+ E9A0             >//              Dictionary part
 313+ E9A0             >
 313+ E9A0             >                org     Dict_Ptr
 313+ 7634             >
 313+ 7634 9E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 313+ 7636             >
 313+ 7636             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 313+ 7636 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 313+ 7639             >
 313+ 7639             >
 313+ 7639             >                endif           ; ok        // for other definitions it "points" the correct handler
 313+ 7639             >                // Use of "; ok" to suppress "warning[fwdref]"
 313+ 7639             >
 313+ 7639             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 314+ 7639 67 69 2A 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 314+ 763D 5C 68
 315+ 763F 20 76 24 69                  dw      ABS_OP, SWAP            // abs swap
 316+ 7643 20 76 B1 67                  dw      ABS_OP, UM_MUL          // abs um*
 317+ 7647 67 68 11 76                  dw      R_TO, DPLUS_MINUS       // r> d+-
 318+ 764B 52 68                        dw      EXIT                    // ;
 319+ 764D
 320+ 764D              //  ______________________________________________________________________
 321+ 764D              //
 322+ 764D              // sm/rem       d n -- q r
 323+ 764D              // Symmetric division: divides a double into n giving quotient q and remainder r
 324+ 764D              // the remainder has the sign of d.
 325+ 764D                              Colon_Def SMDIVM, "SM/REM", is_normal
 325+ 764D             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 325+ 764D             >
 325+ 764D             >Dict_Ptr        defl    $
 325+ 764D             >
 325+ 764D             >//              ______________________________________________________________________
 325+ 764D             >//              Heap part
 325+ 764D             >
 325+ 764D             >
 325+ 764D             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E9A0             >
 325+ E9A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E9A0             >Latest_Definition defl  Heap_Ptr
 325+ E9A0             >
 325+ E9A0             >                // dummy db directives used to calculate length of namec
 325+ E9A0 53 4D 2F 52 >                db      "SM/REM"
 325+ E9A4 45 4D       >
 325+ E9A6             >len_NFA         defl    $ - temp_NFA
 325+ E9A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E9A0             >
 325+ E9A0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E9A1 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 325+ E9A5 45 4D       >
 325+ E9A7             >                org     $-1                 // alter last byte of Name just above to set
 325+ E9A6 CD          >                db      {b $} | END_BIT     // msb as name end
 325+ E9A7             >
 325+ E9A7 99 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E9A9             >Prev_Ptr        defl    Heap_Ptr
 325+ E9A9             >
 325+ E9A9             >mirror_Ptr      defl    $
 325+ E9A9             >
 325+ E9A9 4F 76       >                dw      Dict_Ptr + 2        // xt
 325+ E9AB             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E9AB             >
 325+ E9AB             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E9AB             >
 325+ E9AB             >//              ______________________________________________________________________
 325+ E9AB             >//              Dictionary part
 325+ E9AB             >
 325+ E9AB             >                org     Dict_Ptr
 325+ 764D             >
 325+ 764D A9 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 764F             >
 325+ 764F             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 764F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 7652             >
 325+ 7652             >
 325+ 7652             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 7652             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 7652             >
 325+ 7652             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 7652 07 69 5C 68                  dw      OVER, TO_R, TO_R        // over >r >r
 326+ 7656 5C 68
 327+ 7658 2B 76 72 68                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 327+ 765C 20 76
 328+ 765E D9 67                        dw      UMDIVMOD                // um/mod
 329+ 7660 67 68                        dw      R_TO                    // r>
 330+ 7662 72 68 2A 68                  dw      R_OP, XOR_OP            // r xor
 331+ 7666 02 76 24 69                  dw      PLUS_MINUS, SWAP        // +- swap
 332+ 766A 67 68                        dw      R_TO                    // r>
 333+ 766C 02 76 24 69                  dw      PLUS_MINUS, SWAP        // +- swap
 334+ 7670 52 68                        dw      EXIT                    // ;
 335+ 7672
 336+ 7672              //  ______________________________________________________________________
 337+ 7672              //
 338+ 7672              // fm/mod       d n -- q r
 339+ 7672              // Floored division: divides a double into n giving quotient q and remainder r
 340+ 7672              // the remainder has the sign of d.
 341+ 7672                              Colon_Def FMDIVM, "FM/MOD", is_normal
 341+ 7672             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 341+ 7672             >
 341+ 7672             >Dict_Ptr        defl    $
 341+ 7672             >
 341+ 7672             >//              ______________________________________________________________________
 341+ 7672             >//              Heap part
 341+ 7672             >
 341+ 7672             >
 341+ 7672             >                org     (Heap_Ptr & $1FFF) + $E000
 341+ E9AB             >
 341+ E9AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 341+ E9AB             >Latest_Definition defl  Heap_Ptr
 341+ E9AB             >
 341+ E9AB             >                // dummy db directives used to calculate length of namec
 341+ E9AB 46 4D 2F 4D >                db      "FM/MOD"
 341+ E9AF 4F 44       >
 341+ E9B1             >len_NFA         defl    $ - temp_NFA
 341+ E9B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 341+ E9AB             >
 341+ E9AB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 341+ E9AC 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 341+ E9B0 4F 44       >
 341+ E9B2             >                org     $-1                 // alter last byte of Name just above to set
 341+ E9B1 C4          >                db      {b $} | END_BIT     // msb as name end
 341+ E9B2             >
 341+ E9B2 A0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 341+ E9B4             >Prev_Ptr        defl    Heap_Ptr
 341+ E9B4             >
 341+ E9B4             >mirror_Ptr      defl    $
 341+ E9B4             >
 341+ E9B4 74 76       >                dw      Dict_Ptr + 2        // xt
 341+ E9B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 341+ E9B6             >
 341+ E9B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 341+ E9B6             >
 341+ E9B6             >//              ______________________________________________________________________
 341+ E9B6             >//              Dictionary part
 341+ E9B6             >
 341+ E9B6             >                org     Dict_Ptr
 341+ 7672             >
 341+ 7672 B4 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 341+ 7674             >
 341+ 7674             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 341+ 7674 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 341+ 7677             >
 341+ 7677             >
 341+ 7677             >                endif           ; ok        // for other definitions it "points" the correct handler
 341+ 7677             >                // Use of "; ok" to suppress "warning[fwdref]"
 341+ 7677             >
 341+ 7677             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 342+ 7677 2B 69 5C 68                  dw      DUP, TO_R               // dup >r
 343+ 767B 4F 76                        dw      SMDIVM
 344+ 767D 07 69 2B 69                  dw      OVER, DUP
 345+ 7681 77 68 77 68                  dw      ZEQUAL, ZEQUAL
 346+ 7685 24 69 8A 68                  dw      SWAP, ZLESS
 347+ 7689 72 68 8A 68                  dw      R_OP, ZLESS
 348+ 768D 2A 68 0C 68                  dw      XOR_OP, AND_OP
 349+ 7691 F5 63                        dw      ZBRANCH
 350+ 7693 10 00                        dw      Fm_Mod_Else - $
 351+ 7695 C5 68                        dw          ONE_SUBTRACT
 352+ 7697 24 69 67 68                  dw          SWAP, R_TO
 353+ 769B A5 68 24 69                  dw          PLUS, SWAP
 354+ 769F E8 63                        dw      BRANCH
 355+ 76A1 06 00                        dw      Fm_Mod_Endif - $
 356+ 76A3              Fm_Mod_Else:
 357+ 76A3 67 68 10 69                  dw          R_TO, DROP
 358+ 76A7              Fm_Mod_Endif:
 359+ 76A7 52 68                        dw      EXIT
 360+ 76A9              //              dw      TWO_DUP                 // 2dup
 361+ 76A9              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 362+ 76A9              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 363+ 76A9              //              dw      UMDIVMOD                // um/mod
 364+ 76A9              //              dw      SWAP                    // swap
 365+ 76A9              //              dw      II, ZLESS               // i'
 366+ 76A9              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 367+ 76A9              //              dw      R_TO                    // r>
 368+ 76A9              //              dw      PLUS_MINUS, SWAP        // +- swap
 369+ 76A9              //              dw      R_OP                    // r@
 370+ 76A9              //              dw      ZLESS                   // i'
 371+ 76A9              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 372+ 76A9              //              dw      R_TO                    // r>
 373+ 76A9              //              dw      PLUS_MINUS              // +- swap
 374+ 76A9              //              dw      EXIT                    // ;
 375+ 76A9
 376+ 76A9              //  ______________________________________________________________________
 377+ 76A9              //
 378+ 76A9              // m/mod        d n -- q r
 379+ 76A9              // multiply two integer giving a double
 380+ 76A9                              Colon_Def MDIVM, "M/MOD", is_normal
 380+ 76A9             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 380+ 76A9             >
 380+ 76A9             >Dict_Ptr        defl    $
 380+ 76A9             >
 380+ 76A9             >//              ______________________________________________________________________
 380+ 76A9             >//              Heap part
 380+ 76A9             >
 380+ 76A9             >
 380+ 76A9             >                org     (Heap_Ptr & $1FFF) + $E000
 380+ E9B6             >
 380+ E9B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ E9B6             >Latest_Definition defl  Heap_Ptr
 380+ E9B6             >
 380+ E9B6             >                // dummy db directives used to calculate length of namec
 380+ E9B6 4D 2F 4D 4F >                db      "M/MOD"
 380+ E9BA 44          >
 380+ E9BB             >len_NFA         defl    $ - temp_NFA
 380+ E9BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ E9B6             >
 380+ E9B6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ E9B7 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 380+ E9BB 44          >
 380+ E9BC             >                org     $-1                 // alter last byte of Name just above to set
 380+ E9BB C4          >                db      {b $} | END_BIT     // msb as name end
 380+ E9BC             >
 380+ E9BC AB 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 380+ E9BE             >Prev_Ptr        defl    Heap_Ptr
 380+ E9BE             >
 380+ E9BE             >mirror_Ptr      defl    $
 380+ E9BE             >
 380+ E9BE AB 76       >                dw      Dict_Ptr + 2        // xt
 380+ E9C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 380+ E9C0             >
 380+ E9C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 380+ E9C0             >
 380+ E9C0             >//              ______________________________________________________________________
 380+ E9C0             >//              Dictionary part
 380+ E9C0             >
 380+ E9C0             >                org     Dict_Ptr
 380+ 76A9             >
 380+ 76A9 BE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 380+ 76AB             >
 380+ 76AB             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 76AB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 76AE             >
 380+ 76AE             >
 380+ 76AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 76AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 76AE             >
 380+ 76AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 76AE 4F 76                        dw      SMDIVM
 382+ 76B0 52 68                        dw      EXIT                    // ;
 383+ 76B2
 384+ 76B2              //  ______________________________________________________________________
 385+ 76B2              //
 386+ 76B2              // m/           d n -- q
 387+ 76B2              // multiply two integer giving a double
 388+ 76B2                              Colon_Def MDIV, "M/", is_normal
 388+ 76B2             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 388+ 76B2             >
 388+ 76B2             >Dict_Ptr        defl    $
 388+ 76B2             >
 388+ 76B2             >//              ______________________________________________________________________
 388+ 76B2             >//              Heap part
 388+ 76B2             >
 388+ 76B2             >
 388+ 76B2             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E9C0             >
 388+ E9C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E9C0             >Latest_Definition defl  Heap_Ptr
 388+ E9C0             >
 388+ E9C0             >                // dummy db directives used to calculate length of namec
 388+ E9C0 4D 2F       >                db      "M/"
 388+ E9C2             >len_NFA         defl    $ - temp_NFA
 388+ E9C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E9C0             >
 388+ E9C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E9C1 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 388+ E9C3             >                org     $-1                 // alter last byte of Name just above to set
 388+ E9C2 AF          >                db      {b $} | END_BIT     // msb as name end
 388+ E9C3             >
 388+ E9C3 B6 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E9C5             >Prev_Ptr        defl    Heap_Ptr
 388+ E9C5             >
 388+ E9C5             >mirror_Ptr      defl    $
 388+ E9C5             >
 388+ E9C5 B4 76       >                dw      Dict_Ptr + 2        // xt
 388+ E9C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E9C7             >
 388+ E9C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E9C7             >
 388+ E9C7             >//              ______________________________________________________________________
 388+ E9C7             >//              Dictionary part
 388+ E9C7             >
 388+ E9C7             >                org     Dict_Ptr
 388+ 76B2             >
 388+ 76B2 C5 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 76B4             >
 388+ 76B4             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 76B4 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 76B7             >
 388+ 76B7             >
 388+ 76B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 76B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 76B7             >
 388+ 76B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 76B7 AB 76 15 69                  dw      MDIVM, NIP
 390+ 76BB 52 68                        dw      EXIT                    // ;
 391+ 76BD
 392+ 76BD              //  ______________________________________________________________________
 393+ 76BD              //
 394+ 76BD              // *            n1 n2 -- n3
 395+ 76BD              // multiply two integer
 396+ 76BD                              Colon_Def MUL, "*", is_normal
 396+ 76BD             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 396+ 76BD             >
 396+ 76BD             >Dict_Ptr        defl    $
 396+ 76BD             >
 396+ 76BD             >//              ______________________________________________________________________
 396+ 76BD             >//              Heap part
 396+ 76BD             >
 396+ 76BD             >
 396+ 76BD             >                org     (Heap_Ptr & $1FFF) + $E000
 396+ E9C7             >
 396+ E9C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 396+ E9C7             >Latest_Definition defl  Heap_Ptr
 396+ E9C7             >
 396+ E9C7             >                // dummy db directives used to calculate length of namec
 396+ E9C7 2A          >                db      "*"
 396+ E9C8             >len_NFA         defl    $ - temp_NFA
 396+ E9C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 396+ E9C7             >
 396+ E9C7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 396+ E9C8 2A          >                db      "*"               // name string in 7-bit ascii, but
 396+ E9C9             >                org     $-1                 // alter last byte of Name just above to set
 396+ E9C8 AA          >                db      {b $} | END_BIT     // msb as name end
 396+ E9C9             >
 396+ E9C9 C0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 396+ E9CB             >Prev_Ptr        defl    Heap_Ptr
 396+ E9CB             >
 396+ E9CB             >mirror_Ptr      defl    $
 396+ E9CB             >
 396+ E9CB BF 76       >                dw      Dict_Ptr + 2        // xt
 396+ E9CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 396+ E9CD             >
 396+ E9CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 396+ E9CD             >
 396+ E9CD             >//              ______________________________________________________________________
 396+ E9CD             >//              Dictionary part
 396+ E9CD             >
 396+ E9CD             >                org     Dict_Ptr
 396+ 76BD             >
 396+ 76BD CB 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 396+ 76BF             >
 396+ 76BF             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 396+ 76BF CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 396+ 76C2             >
 396+ 76C2             >
 396+ 76C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 396+ 76C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 396+ 76C2             >
 396+ 76C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 397+ 76C2 36 76 10 69                  dw      MMUL, DROP              // m* drop
 398+ 76C6 52 68                        dw      EXIT                    // ;
 399+ 76C8
 400+ 76C8              //  ______________________________________________________________________
 401+ 76C8              //
 402+ 76C8              // /mod         n1 n2 -- n3 n4
 403+ 76C8              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 404+ 76C8              // The remainder has the sign of n1
 405+ 76C8                              Colon_Def DIVMOD, "/MOD", is_normal
 405+ 76C8             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 405+ 76C8             >
 405+ 76C8             >Dict_Ptr        defl    $
 405+ 76C8             >
 405+ 76C8             >//              ______________________________________________________________________
 405+ 76C8             >//              Heap part
 405+ 76C8             >
 405+ 76C8             >
 405+ 76C8             >                org     (Heap_Ptr & $1FFF) + $E000
 405+ E9CD             >
 405+ E9CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ E9CD             >Latest_Definition defl  Heap_Ptr
 405+ E9CD             >
 405+ E9CD             >                // dummy db directives used to calculate length of namec
 405+ E9CD 2F 4D 4F 44 >                db      "/MOD"
 405+ E9D1             >len_NFA         defl    $ - temp_NFA
 405+ E9D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ E9CD             >
 405+ E9CD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ E9CE 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 405+ E9D2             >                org     $-1                 // alter last byte of Name just above to set
 405+ E9D1 C4          >                db      {b $} | END_BIT     // msb as name end
 405+ E9D2             >
 405+ E9D2 C7 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 405+ E9D4             >Prev_Ptr        defl    Heap_Ptr
 405+ E9D4             >
 405+ E9D4             >mirror_Ptr      defl    $
 405+ E9D4             >
 405+ E9D4 CA 76       >                dw      Dict_Ptr + 2        // xt
 405+ E9D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 405+ E9D6             >
 405+ E9D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 405+ E9D6             >
 405+ E9D6             >//              ______________________________________________________________________
 405+ E9D6             >//              Dictionary part
 405+ E9D6             >
 405+ E9D6             >                org     Dict_Ptr
 405+ 76C8             >
 405+ 76C8 D4 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 405+ 76CA             >
 405+ 76CA             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 76CA CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 76CD             >
 405+ 76CD             >
 405+ 76CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 76CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 76CD             >
 405+ 76CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 76CD 5C 68 DA 6B                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 406+ 76D1 67 68
 407+ 76D3 AB 76                        dw      MDIVM                   // m/mod
 408+ 76D5 52 68                        dw      EXIT                    // ;
 409+ 76D7
 410+ 76D7              //  ______________________________________________________________________
 411+ 76D7              //
 412+ 76D7              // /            n1 n2 -- n3
 413+ 76D7              // division
 414+ 76D7                              Colon_Def DIV, "/", is_normal
 414+ 76D7             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 414+ 76D7             >
 414+ 76D7             >Dict_Ptr        defl    $
 414+ 76D7             >
 414+ 76D7             >//              ______________________________________________________________________
 414+ 76D7             >//              Heap part
 414+ 76D7             >
 414+ 76D7             >
 414+ 76D7             >                org     (Heap_Ptr & $1FFF) + $E000
 414+ E9D6             >
 414+ E9D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 414+ E9D6             >Latest_Definition defl  Heap_Ptr
 414+ E9D6             >
 414+ E9D6             >                // dummy db directives used to calculate length of namec
 414+ E9D6 2F          >                db      "/"
 414+ E9D7             >len_NFA         defl    $ - temp_NFA
 414+ E9D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 414+ E9D6             >
 414+ E9D6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 414+ E9D7 2F          >                db      "/"               // name string in 7-bit ascii, but
 414+ E9D8             >                org     $-1                 // alter last byte of Name just above to set
 414+ E9D7 AF          >                db      {b $} | END_BIT     // msb as name end
 414+ E9D8             >
 414+ E9D8 CD 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 414+ E9DA             >Prev_Ptr        defl    Heap_Ptr
 414+ E9DA             >
 414+ E9DA             >mirror_Ptr      defl    $
 414+ E9DA             >
 414+ E9DA D9 76       >                dw      Dict_Ptr + 2        // xt
 414+ E9DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 414+ E9DC             >
 414+ E9DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 414+ E9DC             >
 414+ E9DC             >//              ______________________________________________________________________
 414+ E9DC             >//              Dictionary part
 414+ E9DC             >
 414+ E9DC             >                org     Dict_Ptr
 414+ 76D7             >
 414+ 76D7 DA 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 414+ 76D9             >
 414+ 76D9             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 414+ 76D9 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 414+ 76DC             >
 414+ 76DC             >
 414+ 76DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 414+ 76DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 414+ 76DC             >
 414+ 76DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 415+ 76DC CA 76 15 69                  dw      DIVMOD, NIP             // /mod nip
 416+ 76E0 52 68                        dw      EXIT                    // ;
 417+ 76E2
 418+ 76E2              //  ______________________________________________________________________
 419+ 76E2              //
 420+ 76E2              // mod          n1 n2 -- n3
 421+ 76E2                              Colon_Def MOD, "MOD", is_normal
 421+ 76E2             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 421+ 76E2             >
 421+ 76E2             >Dict_Ptr        defl    $
 421+ 76E2             >
 421+ 76E2             >//              ______________________________________________________________________
 421+ 76E2             >//              Heap part
 421+ 76E2             >
 421+ 76E2             >
 421+ 76E2             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E9DC             >
 421+ E9DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E9DC             >Latest_Definition defl  Heap_Ptr
 421+ E9DC             >
 421+ E9DC             >                // dummy db directives used to calculate length of namec
 421+ E9DC 4D 4F 44    >                db      "MOD"
 421+ E9DF             >len_NFA         defl    $ - temp_NFA
 421+ E9DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E9DC             >
 421+ E9DC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E9DD 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 421+ E9E0             >                org     $-1                 // alter last byte of Name just above to set
 421+ E9DF C4          >                db      {b $} | END_BIT     // msb as name end
 421+ E9E0             >
 421+ E9E0 D6 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E9E2             >Prev_Ptr        defl    Heap_Ptr
 421+ E9E2             >
 421+ E9E2             >mirror_Ptr      defl    $
 421+ E9E2             >
 421+ E9E2 E4 76       >                dw      Dict_Ptr + 2        // xt
 421+ E9E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E9E4             >
 421+ E9E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E9E4             >
 421+ E9E4             >//              ______________________________________________________________________
 421+ E9E4             >//              Dictionary part
 421+ E9E4             >
 421+ E9E4             >                org     Dict_Ptr
 421+ 76E2             >
 421+ 76E2 E2 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 76E4             >
 421+ 76E4             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 76E4 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 76E7             >
 421+ 76E7             >
 421+ 76E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 76E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 76E7             >
 421+ 76E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 76E7 CA 76 10 69                  dw      DIVMOD, DROP            // /mod drop
 423+ 76EB 52 68                        dw      EXIT                    // ;
 424+ 76ED
 425+ 76ED              //  ______________________________________________________________________
 426+ 76ED              //
 427+ 76ED              // */mod        n1 n2 n3 -- n4 n5
 428+ 76ED              // leaves the quotient n5 and the remainder n4 of the operation
 429+ 76ED              // (n1 * n2) / n3. The intermediate passage through a double number
 430+ 76ED              // avoids loss of precision
 431+ 76ED                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 431+ 76ED             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 431+ 76ED             >
 431+ 76ED             >Dict_Ptr        defl    $
 431+ 76ED             >
 431+ 76ED             >//              ______________________________________________________________________
 431+ 76ED             >//              Heap part
 431+ 76ED             >
 431+ 76ED             >
 431+ 76ED             >                org     (Heap_Ptr & $1FFF) + $E000
 431+ E9E4             >
 431+ E9E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 431+ E9E4             >Latest_Definition defl  Heap_Ptr
 431+ E9E4             >
 431+ E9E4             >                // dummy db directives used to calculate length of namec
 431+ E9E4 2A 2F 4D 4F >                db      "*/MOD"
 431+ E9E8 44          >
 431+ E9E9             >len_NFA         defl    $ - temp_NFA
 431+ E9E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 431+ E9E4             >
 431+ E9E4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 431+ E9E5 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 431+ E9E9 44          >
 431+ E9EA             >                org     $-1                 // alter last byte of Name just above to set
 431+ E9E9 C4          >                db      {b $} | END_BIT     // msb as name end
 431+ E9EA             >
 431+ E9EA DC 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 431+ E9EC             >Prev_Ptr        defl    Heap_Ptr
 431+ E9EC             >
 431+ E9EC             >mirror_Ptr      defl    $
 431+ E9EC             >
 431+ E9EC EF 76       >                dw      Dict_Ptr + 2        // xt
 431+ E9EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 431+ E9EE             >
 431+ E9EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 431+ E9EE             >
 431+ E9EE             >//              ______________________________________________________________________
 431+ E9EE             >//              Dictionary part
 431+ E9EE             >
 431+ E9EE             >                org     Dict_Ptr
 431+ 76ED             >
 431+ 76ED EC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 431+ 76EF             >
 431+ 76EF             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 431+ 76EF CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 431+ 76F2             >
 431+ 76F2             >
 431+ 76F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 431+ 76F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 431+ 76F2             >
 431+ 76F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 432+ 76F2 5C 68 36 76                  dw      TO_R, MMUL              // >r  m*
 433+ 76F6 67 68 AB 76                  dw      R_TO, MDIVM             // r>  m/mod
 434+ 76FA 52 68                        dw      EXIT                    // ;
 435+ 76FC
 436+ 76FC              //  ______________________________________________________________________
 437+ 76FC              //
 438+ 76FC              // */          n1 n2 n3 -- n4
 439+ 76FC              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 440+ 76FC                              Colon_Def MUL_DIV, "*/", is_normal
 440+ 76FC             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 440+ 76FC             >
 440+ 76FC             >Dict_Ptr        defl    $
 440+ 76FC             >
 440+ 76FC             >//              ______________________________________________________________________
 440+ 76FC             >//              Heap part
 440+ 76FC             >
 440+ 76FC             >
 440+ 76FC             >                org     (Heap_Ptr & $1FFF) + $E000
 440+ E9EE             >
 440+ E9EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 440+ E9EE             >Latest_Definition defl  Heap_Ptr
 440+ E9EE             >
 440+ E9EE             >                // dummy db directives used to calculate length of namec
 440+ E9EE 2A 2F       >                db      "*/"
 440+ E9F0             >len_NFA         defl    $ - temp_NFA
 440+ E9F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 440+ E9EE             >
 440+ E9EE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 440+ E9EF 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 440+ E9F1             >                org     $-1                 // alter last byte of Name just above to set
 440+ E9F0 AF          >                db      {b $} | END_BIT     // msb as name end
 440+ E9F1             >
 440+ E9F1 E4 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 440+ E9F3             >Prev_Ptr        defl    Heap_Ptr
 440+ E9F3             >
 440+ E9F3             >mirror_Ptr      defl    $
 440+ E9F3             >
 440+ E9F3 FE 76       >                dw      Dict_Ptr + 2        // xt
 440+ E9F5             >Heap_Ptr        defl    $ - $E000           // save current HP
 440+ E9F5             >
 440+ E9F5             >Current_HP      defl  $ - $E000             // used to set HP once!
 440+ E9F5             >
 440+ E9F5             >//              ______________________________________________________________________
 440+ E9F5             >//              Dictionary part
 440+ E9F5             >
 440+ E9F5             >                org     Dict_Ptr
 440+ 76FC             >
 440+ 76FC F3 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 440+ 76FE             >
 440+ 76FE             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 440+ 76FE CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 440+ 7701             >
 440+ 7701             >
 440+ 7701             >                endif           ; ok        // for other definitions it "points" the correct handler
 440+ 7701             >                // Use of "; ok" to suppress "warning[fwdref]"
 440+ 7701             >
 440+ 7701             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 441+ 7701 EF 76                        dw     MUL_DIV_MOD              // */mod
 442+ 7703 15 69                        dw     NIP                      // nip
 443+ 7705 52 68                        dw     EXIT                     // ;
 444+ 7707
 445+ 7707
 446+ 7707              //  ______________________________________________________________________
 447+ 7707              //
 448+ 7707              // m/mod        ud1 u2 -- u3 ud4
 449+ 7707              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 450+ 7707              // All terms are unsigned.
 451+ 7707              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 452+ 7707              //              dw      TO_R                    // >r           ( ud1 )
 453+ 7707              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 454+ 7707              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 455+ 7707              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 456+ 7707              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 457+ 7707              //              dw      EXIT                    // ;
 458+ 7707
 459+ 7707              //  ______________________________________________________________________
 460+ 7707              //
 461+ 7707              // (line)       n1 n2 -- a b
 462+ 7707              // sends the line n1 of block n2 to the disk buffer.
 463+ 7707              // it returns the address a and ca counter b = C/L meaning a whole line.
 464+ 7707                              Colon_Def CLINE, "(LINE)", is_normal
 464+ 7707             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 464+ 7707             >
 464+ 7707             >Dict_Ptr        defl    $
 464+ 7707             >
 464+ 7707             >//              ______________________________________________________________________
 464+ 7707             >//              Heap part
 464+ 7707             >
 464+ 7707             >
 464+ 7707             >                org     (Heap_Ptr & $1FFF) + $E000
 464+ E9F5             >
 464+ E9F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 464+ E9F5             >Latest_Definition defl  Heap_Ptr
 464+ E9F5             >
 464+ E9F5             >                // dummy db directives used to calculate length of namec
 464+ E9F5 28 4C 49 4E >                db      "(LINE)"
 464+ E9F9 45 29       >
 464+ E9FB             >len_NFA         defl    $ - temp_NFA
 464+ E9FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 464+ E9F5             >
 464+ E9F5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 464+ E9F6 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 464+ E9FA 45 29       >
 464+ E9FC             >                org     $-1                 // alter last byte of Name just above to set
 464+ E9FB A9          >                db      {b $} | END_BIT     // msb as name end
 464+ E9FC             >
 464+ E9FC EE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 464+ E9FE             >Prev_Ptr        defl    Heap_Ptr
 464+ E9FE             >
 464+ E9FE             >mirror_Ptr      defl    $
 464+ E9FE             >
 464+ E9FE 09 77       >                dw      Dict_Ptr + 2        // xt
 464+ EA00             >Heap_Ptr        defl    $ - $E000           // save current HP
 464+ EA00             >
 464+ EA00             >Current_HP      defl  $ - $E000             // used to set HP once!
 464+ EA00             >
 464+ EA00             >//              ______________________________________________________________________
 464+ EA00             >//              Dictionary part
 464+ EA00             >
 464+ EA00             >                org     Dict_Ptr
 464+ 7707             >
 464+ 7707 FE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 464+ 7709             >
 464+ 7709             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 464+ 7709 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 464+ 770C             >
 464+ 770C             >
 464+ 770C             >                endif           ; ok        // for other definitions it "points" the correct handler
 464+ 770C             >                // Use of "; ok" to suppress "warning[fwdref]"
 464+ 770C             >
 464+ 770C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 465+ 770C 5C 68                        dw      TO_R                    // >r
 466+ 770E AB 6A                        dw      CL                      // c/l
 467+ 7710 B2 6A EF 76                  dw      BBUF, MUL_DIV_MOD       // */mod
 468+ 7714 67 68                        dw      R_TO                    // r>
 469+ 7716 B9 6A BF 76                  dw      BSCR, MUL, PLUS         // b/scr * +
 469+ 771A A5 68
 470+ 771C 20 79                        dw      BLOCK                   // block   ( forward )
 471+ 771E A5 68                        dw      PLUS                    // +
 472+ 7720 AB 6A                        dw      CL                      // c/l
 473+ 7722 52 68                        dw      EXIT                    // ;
 474+ 7724
 475+ 7724              //  ______________________________________________________________________
 476+ 7724              //
 477+ 7724              // .line        n1 n2 --
 478+ 7724              // Sends to output line  n1  of screen n2.
 479+ 7724                              Colon_Def DOT_LINE, ".LINE", is_normal
 479+ 7724             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 479+ 7724             >
 479+ 7724             >Dict_Ptr        defl    $
 479+ 7724             >
 479+ 7724             >//              ______________________________________________________________________
 479+ 7724             >//              Heap part
 479+ 7724             >
 479+ 7724             >
 479+ 7724             >                org     (Heap_Ptr & $1FFF) + $E000
 479+ EA00             >
 479+ EA00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 479+ EA00             >Latest_Definition defl  Heap_Ptr
 479+ EA00             >
 479+ EA00             >                // dummy db directives used to calculate length of namec
 479+ EA00 2E 4C 49 4E >                db      ".LINE"
 479+ EA04 45          >
 479+ EA05             >len_NFA         defl    $ - temp_NFA
 479+ EA05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 479+ EA00             >
 479+ EA00 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 479+ EA01 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 479+ EA05 45          >
 479+ EA06             >                org     $-1                 // alter last byte of Name just above to set
 479+ EA05 C5          >                db      {b $} | END_BIT     // msb as name end
 479+ EA06             >
 479+ EA06 F5 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 479+ EA08             >Prev_Ptr        defl    Heap_Ptr
 479+ EA08             >
 479+ EA08             >mirror_Ptr      defl    $
 479+ EA08             >
 479+ EA08 26 77       >                dw      Dict_Ptr + 2        // xt
 479+ EA0A             >Heap_Ptr        defl    $ - $E000           // save current HP
 479+ EA0A             >
 479+ EA0A             >Current_HP      defl  $ - $E000             // used to set HP once!
 479+ EA0A             >
 479+ EA0A             >//              ______________________________________________________________________
 479+ EA0A             >//              Dictionary part
 479+ EA0A             >
 479+ EA0A             >                org     Dict_Ptr
 479+ 7724             >
 479+ 7724 08 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 479+ 7726             >
 479+ 7726             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 479+ 7726 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 479+ 7729             >
 479+ 7729             >
 479+ 7729             >                endif           ; ok        // for other definitions it "points" the correct handler
 479+ 7729             >                // Use of "; ok" to suppress "warning[fwdref]"
 479+ 7729             >
 479+ 7729             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 480+ 7729 09 77 89 6F                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 480+ 772D 72 6F
 481+ 772F 52 68                        dw      EXIT                    // ;
 482+ 7731
 483+ 7731              //  ______________________________________________________________________
 484+ 7731              //
 485+ 7731              // message       n1 n2 --
 486+ 7731              // prints error message to current channel.
 487+ 7731              // if WARNING is 0, prints "MSG#n".
 488+ 7731              // if WARNING is 1, prints line n of screen 4.
 489+ 7731              // if WARNING is -1, see ERROR
 490+ 7731              // value can be negative or beyond block 4.
 491+ 7731                              Colon_Def MESSAGE, "MESSAGE", is_normal
 491+ 7731             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 491+ 7731             >
 491+ 7731             >Dict_Ptr        defl    $
 491+ 7731             >
 491+ 7731             >//              ______________________________________________________________________
 491+ 7731             >//              Heap part
 491+ 7731             >
 491+ 7731             >
 491+ 7731             >                org     (Heap_Ptr & $1FFF) + $E000
 491+ EA0A             >
 491+ EA0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 491+ EA0A             >Latest_Definition defl  Heap_Ptr
 491+ EA0A             >
 491+ EA0A             >                // dummy db directives used to calculate length of namec
 491+ EA0A 4D 45 53 53 >                db      "MESSAGE"
 491+ EA0E 41 47 45    >
 491+ EA11             >len_NFA         defl    $ - temp_NFA
 491+ EA11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 491+ EA0A             >
 491+ EA0A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 491+ EA0B 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 491+ EA0F 41 47 45    >
 491+ EA12             >                org     $-1                 // alter last byte of Name just above to set
 491+ EA11 C5          >                db      {b $} | END_BIT     // msb as name end
 491+ EA12             >
 491+ EA12 00 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 491+ EA14             >Prev_Ptr        defl    Heap_Ptr
 491+ EA14             >
 491+ EA14             >mirror_Ptr      defl    $
 491+ EA14             >
 491+ EA14 33 77       >                dw      Dict_Ptr + 2        // xt
 491+ EA16             >Heap_Ptr        defl    $ - $E000           // save current HP
 491+ EA16             >
 491+ EA16             >Current_HP      defl  $ - $E000             // used to set HP once!
 491+ EA16             >
 491+ EA16             >//              ______________________________________________________________________
 491+ EA16             >//              Dictionary part
 491+ EA16             >
 491+ EA16             >                org     Dict_Ptr
 491+ 7731             >
 491+ 7731 14 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 491+ 7733             >
 491+ 7733             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 491+ 7733 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 491+ 7736             >
 491+ 7736             >
 491+ 7736             >                endif           ; ok        // for other definitions it "points" the correct handler
 491+ 7736             >                // Use of "; ok" to suppress "warning[fwdref]"
 491+ 7736             >
 491+ 7736             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 492+ 7736 F2 6A 89 69                  dw      WARNING, FETCH          // warning @
 493+ 773A                                                              // if
 494+ 773A F5 63                        dw      ZBRANCH
 495+ 773C 18 00                        dw      Message_Else - $
 496+ 773E A3 63 04 00                  dw          LIT, 4              //      4
 497+ 7742 3A 6B 89 69                  dw          OFFSET, FETCH       //      offset @
 498+ 7746 B9 6A D9 76                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 498+ 774A E5 6B
 499+ 774C 26 77                        dw          DOT_LINE            //      .line
 500+ 774E 77 6C                        dw          SPACE               //      space
 501+ 7750                                                              // else
 502+ 7750
 503+ 7750 E8 63                        dw      BRANCH
 504+ 7752 0B 00                        dw      Message_ENdif - $
 505+ 7754              Message_Else:
 506+ 7754 0F 71                        dw          C_DOT_QUOTE         //      .( msg#)
 507+ 7756 04 6D 73 67                  db          4, "msg#"
 507+ 775A 23
 508+ 775B 64 7E                        dw          DOT                 //      .  ( forward )
 509+ 775D              Message_ENdif:                                  // endif
 510+ 775D 52 68                        dw      EXIT                    // ;
 511+ 775F
 512+ 775F
 513+ 775F              //  ______________________________________________________________________
 514+ 775F              //
 515+ 775F              // device
 516+ 775F                              Variable_Def DEVICE,   "DEVICE",   2
 516+ 775F             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 516+ 775F             >
 516+ 775F             >Dict_Ptr        defl    $
 516+ 775F             >
 516+ 775F             >//              ______________________________________________________________________
 516+ 775F             >//              Heap part
 516+ 775F             >
 516+ 775F             >
 516+ 775F             >                org     (Heap_Ptr & $1FFF) + $E000
 516+ EA16             >
 516+ EA16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ EA16             >Latest_Definition defl  Heap_Ptr
 516+ EA16             >
 516+ EA16             >                // dummy db directives used to calculate length of namec
 516+ EA16 44 45 56 49 >                db      "DEVICE"
 516+ EA1A 43 45       >
 516+ EA1C             >len_NFA         defl    $ - temp_NFA
 516+ EA1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ EA16             >
 516+ EA16 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ EA17 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 516+ EA1B 43 45       >
 516+ EA1D             >                org     $-1                 // alter last byte of Name just above to set
 516+ EA1C C5          >                db      {b $} | END_BIT     // msb as name end
 516+ EA1D             >
 516+ EA1D 0A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 516+ EA1F             >Prev_Ptr        defl    Heap_Ptr
 516+ EA1F             >
 516+ EA1F             >mirror_Ptr      defl    $
 516+ EA1F             >
 516+ EA1F 61 77       >                dw      Dict_Ptr + 2        // xt
 516+ EA21             >Heap_Ptr        defl    $ - $E000           // save current HP
 516+ EA21             >
 516+ EA21             >Current_HP      defl  $ - $E000             // used to set HP once!
 516+ EA21             >
 516+ EA21             >//              ______________________________________________________________________
 516+ EA21             >//              Dictionary part
 516+ EA21             >
 516+ EA21             >                org     Dict_Ptr
 516+ 775F             >
 516+ 775F 1F 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 516+ 7761             >
 516+ 7761             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 7761 CD 68 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 516+ 7764             >
 516+ 7764             >
 516+ 7764             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 7764             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 7764             >
 516+ 7764             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 7764 02 00       >                dw      2
 517+ 7766
 518+ 7766              //  ______________________________________________________________________
 519+ 7766
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
 123  7766                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
   1+ 7766              //  ______________________________________________________________________
   2+ 7766              //
   3+ 7766              //  next-opt.asm
   4+ 7766              //
   5+ 7766              //  ZX Spectrum Next - peculiar definitions
   6+ 7766              //  ______________________________________________________________________
   7+ 7766
   8+ 7766              //  ______________________________________________________________________
   9+ 7766              //
  10+ 7766              // reg@         n -- b
  11+ 7766              // read Next REGister n giving byte b
  12+ 7766              //
  13+ 7766              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 7766              //              dw      LIT, $243B
  15+ 7766              //              dw      PSTORE
  16+ 7766              //              dw      LIT, $253B
  17+ 7766              //              dw      PFETCH
  18+ 7766              //              dw      EXIT
  19+ 7766                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 7766             >
  19+ 7766             >Dict_Ptr        defl    $
  19+ 7766             >
  19+ 7766             >//              ______________________________________________________________________
  19+ 7766             >//              Heap part
  19+ 7766             >
  19+ 7766             >
  19+ 7766             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA21             >
  19+ EA21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA21             >Latest_Definition defl  Heap_Ptr
  19+ EA21             >
  19+ EA21             >                // dummy db directives used to calculate length of namec
  19+ EA21 52 45 47 40 >                db      "REG@"
  19+ EA25             >len_NFA         defl    $ - temp_NFA
  19+ EA25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA21             >
  19+ EA21 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA22 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA26             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA25 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA26             >
  19+ EA26 16 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA28             >Prev_Ptr        defl    Heap_Ptr
  19+ EA28             >
  19+ EA28             >mirror_Ptr      defl    $
  19+ EA28             >
  19+ EA28 68 77       >                dw      Dict_Ptr + 2        // xt
  19+ EA2A             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA2A             >
  19+ EA2A             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA2A             >
  19+ EA2A             >//              ______________________________________________________________________
  19+ EA2A             >//              Dictionary part
  19+ EA2A             >
  19+ EA2A             >                org     Dict_Ptr
  19+ 7766             >
  19+ 7766 28 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 7768             >
  19+ 7768             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 7768 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 7768 ~           >
  19+ 7768 ~           >
  19+ 7768             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 7768             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 7768             >
  19+ 7768             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 7768 D9                           exx
  21+ 7769 01 3B 24                     ld      bc, $243B
  22+ 776C E1                           pop     hl
  23+ 776D ED 69                        out     (c), l
  24+ 776F 04                           inc     b
  25+ 7770 ED 68                        in      l, (c)
  26+ 7772 E5                           push    hl
  27+ 7773 D9                           exx
  28+ 7774                              next
  28+ 7774 DD E9       >                jp      (ix)
  29+ 7776
  30+ 7776
  31+ 7776              //  ______________________________________________________________________
  32+ 7776              //
  33+ 7776              // reg!         b n --
  34+ 7776              // write value b to Next REGister n
  35+ 7776              //
  36+ 7776              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 7776              //              dw      LIT, $243B
  38+ 7776              //              dw      PSTORE
  39+ 7776              //              dw      LIT, $253B
  40+ 7776              //              dw      PSTORE
  41+ 7776              //              dw      EXIT
  42+ 7776                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 7776             >
  42+ 7776             >Dict_Ptr        defl    $
  42+ 7776             >
  42+ 7776             >//              ______________________________________________________________________
  42+ 7776             >//              Heap part
  42+ 7776             >
  42+ 7776             >
  42+ 7776             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA2A             >
  42+ EA2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA2A             >Latest_Definition defl  Heap_Ptr
  42+ EA2A             >
  42+ EA2A             >                // dummy db directives used to calculate length of namec
  42+ EA2A 52 45 47 21 >                db      "REG!"
  42+ EA2E             >len_NFA         defl    $ - temp_NFA
  42+ EA2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA2A             >
  42+ EA2A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA2B 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA2F             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA2E A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA2F             >
  42+ EA2F 21 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA31             >Prev_Ptr        defl    Heap_Ptr
  42+ EA31             >
  42+ EA31             >mirror_Ptr      defl    $
  42+ EA31             >
  42+ EA31 78 77       >                dw      Dict_Ptr + 2        // xt
  42+ EA33             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA33             >
  42+ EA33             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA33             >
  42+ EA33             >//              ______________________________________________________________________
  42+ EA33             >//              Dictionary part
  42+ EA33             >
  42+ EA33             >                org     Dict_Ptr
  42+ 7776             >
  42+ 7776 31 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 7778             >
  42+ 7778             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 7778 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 7778 ~           >
  42+ 7778 ~           >
  42+ 7778             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 7778             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 7778             >
  42+ 7778             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 7778 D9                           exx
  44+ 7779 01 3B 24                     ld      bc, $243B
  45+ 777C E1                           pop     hl
  46+ 777D ED 69                        out     (c), l
  47+ 777F 04                           inc     b
  48+ 7780 E1                           pop     hl
  49+ 7781 ED 69                        out     (c), l
  50+ 7783 D9                           exx
  51+ 7784                              next
  51+ 7784 DD E9       >                jp      (ix)
  52+ 7786
  53+ 7786
  54+ 7786              //  ______________________________________________________________________
  55+ 7786              //
  56+ 7786              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 7786              // NextZXOS call wrapper.
  58+ 7786              //  n1 = hl register parameter value
  59+ 7786              //  n2 = de register parameter value
  60+ 7786              //  n3 = bc register parameter value
  61+ 7786              //  n4 =  a register parameter value
  62+ 7786              //   a = routine address in ROM 3
  63+ 7786              // ----
  64+ 7786              //  n5 = hl returned value
  65+ 7786              //  n6 = de returned value
  66+ 7786              //  n7 = bc returned value
  67+ 7786              //  n8 =  a returned value
  68+ 7786              //   f
  69+ 7786                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 7786             >
  69+ 7786             >Dict_Ptr        defl    $
  69+ 7786             >
  69+ 7786             >//              ______________________________________________________________________
  69+ 7786             >//              Heap part
  69+ 7786             >
  69+ 7786             >
  69+ 7786             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA33             >
  69+ EA33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA33             >Latest_Definition defl  Heap_Ptr
  69+ EA33             >
  69+ EA33             >                // dummy db directives used to calculate length of namec
  69+ EA33 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA37 44 4F 53    >
  69+ EA3A             >len_NFA         defl    $ - temp_NFA
  69+ EA3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA33             >
  69+ EA33 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA34 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA38 44 4F 53    >
  69+ EA3B             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA3A D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA3B             >
  69+ EA3B 2A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA3D             >Prev_Ptr        defl    Heap_Ptr
  69+ EA3D             >
  69+ EA3D             >mirror_Ptr      defl    $
  69+ EA3D             >
  69+ EA3D 88 77       >                dw      Dict_Ptr + 2        // xt
  69+ EA3F             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA3F             >
  69+ EA3F             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA3F             >
  69+ EA3F             >//              ______________________________________________________________________
  69+ EA3F             >//              Dictionary part
  69+ EA3F             >
  69+ EA3F             >                org     Dict_Ptr
  69+ 7786             >
  69+ 7786 3D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 7788             >
  69+ 7788             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 7788 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 7788 ~           >
  69+ 7788 ~           >
  69+ 7788             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 7788             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 7788             >
  69+ 7788             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 7788 D9                            exx
  71+ 7789 E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 778A D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 778B 7B                            ld      a, e
  74+ 778C C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 778D D1                            pop     de                  // de' argument              //  n1
  76+ 778E E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 778F D9                           exx
  78+ 7790 E1                           pop     hl                  // entry address a
  79+ 7791 DD E5                        push    ix
  80+ 7793 D5                           push    de
  81+ 7794 C5                           push    bc
  82+ 7795 EB                           ex      de, hl              // de is entry address
  83+ 7796              //              ld      (SP_Saved), sp
  84+ 7796              //              ld      sp, Cold_origin - 5
  85+ 7796 0E 07                        ld      c, 7                // use 7 RAM Bank
  86+ 7798
  87+ 7798 CF                           rst     08
  88+ 7799 94                           db      $94
  89+ 779A
  90+ 779A              //              ld      sp, (SP_Saved)
  91+ 779A              //              push    ix
  92+ 779A              //              pop     hl
  93+ 779A              //              ld      (IX_Echo), hl
  94+ 779A DD 22 98 63                  ld      (IX_Echo), ix
  95+ 779E
  96+ 779E D9                           exx
  97+ 779F C1                           pop     bc
  98+ 77A0 D1                           pop     de
  99+ 77A1 DD E1                        pop     ix
 100+ 77A3 D9                            exx
 101+ 77A4 E5                            push    hl
 102+ 77A5 D5                            push    de
 103+ 77A6 C5                            push    bc
 104+ 77A7 26 00                         ld      h, 0
 105+ 77A9 6F                            ld      l, a
 106+ 77AA E5                            push    hl
 107+ 77AB D9                           exx
 108+ 77AC ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 109+ 77AE 23                           inc     hl                  //  0 for OK ; 1 for ko
 110+ 77AF E5                           push    hl
 111+ 77B0                              next
 111+ 77B0 DD E9       >                jp      (ix)
 112+ 77B2
 113+ 77B2              //  ______________________________________________________________________
 114+ 77B2              //
 115+ 77B2              // blk-fh
 116+ 77B2                              Variable_Def BLK_FH,   "BLK-FH",   1
 116+ 77B2             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 116+ 77B2             >
 116+ 77B2             >Dict_Ptr        defl    $
 116+ 77B2             >
 116+ 77B2             >//              ______________________________________________________________________
 116+ 77B2             >//              Heap part
 116+ 77B2             >
 116+ 77B2             >
 116+ 77B2             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ EA3F             >
 116+ EA3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ EA3F             >Latest_Definition defl  Heap_Ptr
 116+ EA3F             >
 116+ EA3F             >                // dummy db directives used to calculate length of namec
 116+ EA3F 42 4C 4B 2D >                db      "BLK-FH"
 116+ EA43 46 48       >
 116+ EA45             >len_NFA         defl    $ - temp_NFA
 116+ EA45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ EA3F             >
 116+ EA3F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ EA40 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 116+ EA44 46 48       >
 116+ EA46             >                org     $-1                 // alter last byte of Name just above to set
 116+ EA45 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ EA46             >
 116+ EA46 33 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ EA48             >Prev_Ptr        defl    Heap_Ptr
 116+ EA48             >
 116+ EA48             >mirror_Ptr      defl    $
 116+ EA48             >
 116+ EA48 B4 77       >                dw      Dict_Ptr + 2        // xt
 116+ EA4A             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ EA4A             >
 116+ EA4A             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ EA4A             >
 116+ EA4A             >//              ______________________________________________________________________
 116+ EA4A             >//              Dictionary part
 116+ EA4A             >
 116+ EA4A             >                org     Dict_Ptr
 116+ 77B2             >
 116+ 77B2 48 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 77B4             >
 116+ 77B4             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 77B4 CD 68 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 116+ 77B7             >
 116+ 77B7             >
 116+ 77B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 77B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 77B7             >
 116+ 77B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 116+ 77B7 01 00       >                dw      1
 117+ 77B9
 118+ 77B9                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 118+ 77B9             >
 118+ 77B9             >Dict_Ptr        defl    $
 118+ 77B9             >
 118+ 77B9             >//              ______________________________________________________________________
 118+ 77B9             >//              Heap part
 118+ 77B9             >
 118+ 77B9             >
 118+ 77B9             >                org     (Heap_Ptr & $1FFF) + $E000
 118+ EA4A             >
 118+ EA4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ EA4A             >Latest_Definition defl  Heap_Ptr
 118+ EA4A             >
 118+ EA4A             >                // dummy db directives used to calculate length of namec
 118+ EA4A 42 4C 4B 2D >                db      "BLK-FNAME"
 118+ EA4E 46 4E 41 4D >
 118+ EA52 45          >
 118+ EA53             >len_NFA         defl    $ - temp_NFA
 118+ EA53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ EA4A             >
 118+ EA4A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ EA4B 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 118+ EA4F 46 4E 41 4D >
 118+ EA53 45          >
 118+ EA54             >                org     $-1                 // alter last byte of Name just above to set
 118+ EA53 C5          >                db      {b $} | END_BIT     // msb as name end
 118+ EA54             >
 118+ EA54 3F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 118+ EA56             >Prev_Ptr        defl    Heap_Ptr
 118+ EA56             >
 118+ EA56             >mirror_Ptr      defl    $
 118+ EA56             >
 118+ EA56 BB 77       >                dw      Dict_Ptr + 2        // xt
 118+ EA58             >Heap_Ptr        defl    $ - $E000           // save current HP
 118+ EA58             >
 118+ EA58             >Current_HP      defl  $ - $E000             // used to set HP once!
 118+ EA58             >
 118+ EA58             >//              ______________________________________________________________________
 118+ EA58             >//              Dictionary part
 118+ EA58             >
 118+ EA58             >                org     Dict_Ptr
 118+ 77B9             >
 118+ 77B9 56 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 118+ 77BB             >
 118+ 77BB             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 77BB CD C5 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 118+ 77BE             >
 118+ 77BE             >
 118+ 77BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 77BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 77BE             >
 118+ 77BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 77BE 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 119+ 77C2 6F 63 6B 73
 119+ 77C6 2D 36 34 2E
 119+ 77CA 62 69 6E 00
 120+ 77CE 00 00 00...                  ds      24
 121+ 77E6
 122+ 77E6              //  ______________________________________________________________________
 123+ 77E6              //
 124+ 77E6              // blk-seek     n --
 125+ 77E6              // seek block n  within blocks!.bin  file
 126+ 77E6                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 126+ 77E6             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 126+ 77E6             >
 126+ 77E6             >Dict_Ptr        defl    $
 126+ 77E6             >
 126+ 77E6             >//              ______________________________________________________________________
 126+ 77E6             >//              Heap part
 126+ 77E6             >
 126+ 77E6             >
 126+ 77E6             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ EA58             >
 126+ EA58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ EA58             >Latest_Definition defl  Heap_Ptr
 126+ EA58             >
 126+ EA58             >                // dummy db directives used to calculate length of namec
 126+ EA58 42 4C 4B 2D >                db      "BLK-SEEK"
 126+ EA5C 53 45 45 4B >
 126+ EA60             >len_NFA         defl    $ - temp_NFA
 126+ EA60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ EA58             >
 126+ EA58 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ EA59 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 126+ EA5D 53 45 45 4B >
 126+ EA61             >                org     $-1                 // alter last byte of Name just above to set
 126+ EA60 CB          >                db      {b $} | END_BIT     // msb as name end
 126+ EA61             >
 126+ EA61 4A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ EA63             >Prev_Ptr        defl    Heap_Ptr
 126+ EA63             >
 126+ EA63             >mirror_Ptr      defl    $
 126+ EA63             >
 126+ EA63 E8 77       >                dw      Dict_Ptr + 2        // xt
 126+ EA65             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ EA65             >
 126+ EA65             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ EA65             >
 126+ EA65             >//              ______________________________________________________________________
 126+ EA65             >//              Dictionary part
 126+ EA65             >
 126+ EA65             >                org     Dict_Ptr
 126+ 77E6             >
 126+ 77E6 63 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 77E8             >
 126+ 77E8             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 77E8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 126+ 77EB             >
 126+ 77EB             >
 126+ 77EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 77EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 77EB             >
 126+ 77EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 77EB B2 6A 36 76                  dw  BBUF, MMUL
 128+ 77EF B4 77 89 69                  dw  BLK_FH, FETCH
 129+ 77F3 E3 66                        dw  F_SEEK
 130+ 77F5 A3 63 2D 00                  dw  LIT, $2D, QERROR
 130+ 77F9 E2 6D
 131+ 77FB 52 68                        dw  EXIT
 132+ 77FD
 133+ 77FD              //  ______________________________________________________________________
 134+ 77FD              //
 135+ 77FD              // blk-read     n --
 136+ 77FD              // seek block n  within blocks!.bin  file
 137+ 77FD                              Colon_Def BLK_READ, "BLK-READ", is_normal
 137+ 77FD             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 137+ 77FD             >
 137+ 77FD             >Dict_Ptr        defl    $
 137+ 77FD             >
 137+ 77FD             >//              ______________________________________________________________________
 137+ 77FD             >//              Heap part
 137+ 77FD             >
 137+ 77FD             >
 137+ 77FD             >                org     (Heap_Ptr & $1FFF) + $E000
 137+ EA65             >
 137+ EA65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ EA65             >Latest_Definition defl  Heap_Ptr
 137+ EA65             >
 137+ EA65             >                // dummy db directives used to calculate length of namec
 137+ EA65 42 4C 4B 2D >                db      "BLK-READ"
 137+ EA69 52 45 41 44 >
 137+ EA6D             >len_NFA         defl    $ - temp_NFA
 137+ EA6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ EA65             >
 137+ EA65 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ EA66 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 137+ EA6A 52 45 41 44 >
 137+ EA6E             >                org     $-1                 // alter last byte of Name just above to set
 137+ EA6D C4          >                db      {b $} | END_BIT     // msb as name end
 137+ EA6E             >
 137+ EA6E 58 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 137+ EA70             >Prev_Ptr        defl    Heap_Ptr
 137+ EA70             >
 137+ EA70             >mirror_Ptr      defl    $
 137+ EA70             >
 137+ EA70 FF 77       >                dw      Dict_Ptr + 2        // xt
 137+ EA72             >Heap_Ptr        defl    $ - $E000           // save current HP
 137+ EA72             >
 137+ EA72             >Current_HP      defl  $ - $E000             // used to set HP once!
 137+ EA72             >
 137+ EA72             >//              ______________________________________________________________________
 137+ EA72             >//              Dictionary part
 137+ EA72             >
 137+ EA72             >                org     Dict_Ptr
 137+ 77FD             >
 137+ 77FD 70 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 137+ 77FF             >
 137+ 77FF             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 77FF CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 137+ 7802             >
 137+ 7802             >
 137+ 7802             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 7802             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 7802             >
 137+ 7802             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 7802 E8 77                        dw  BLK_SEEK
 139+ 7804 B2 6A                        dw  BBUF
 140+ 7806 B4 77 89 69                  dw  BLK_FH, FETCH
 141+ 780A 2F 67                        dw  F_READ
 142+ 780C A3 63 2E 00                  dw  LIT, $2E, QERROR
 142+ 7810 E2 6D
 143+ 7812 10 69                        dw  DROP
 144+ 7814 52 68                        dw  EXIT
 145+ 7816
 146+ 7816              //  ______________________________________________________________________
 147+ 7816              //
 148+ 7816              // blk-write     n --
 149+ 7816              // seek block n  within blocks!.bin  file
 150+ 7816                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 150+ 7816             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 150+ 7816             >
 150+ 7816             >Dict_Ptr        defl    $
 150+ 7816             >
 150+ 7816             >//              ______________________________________________________________________
 150+ 7816             >//              Heap part
 150+ 7816             >
 150+ 7816             >
 150+ 7816             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ EA72             >
 150+ EA72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ EA72             >Latest_Definition defl  Heap_Ptr
 150+ EA72             >
 150+ EA72             >                // dummy db directives used to calculate length of namec
 150+ EA72 42 4C 4B 2D >                db      "BLK-WRITE"
 150+ EA76 57 52 49 54 >
 150+ EA7A 45          >
 150+ EA7B             >len_NFA         defl    $ - temp_NFA
 150+ EA7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ EA72             >
 150+ EA72 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ EA73 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 150+ EA77 57 52 49 54 >
 150+ EA7B 45          >
 150+ EA7C             >                org     $-1                 // alter last byte of Name just above to set
 150+ EA7B C5          >                db      {b $} | END_BIT     // msb as name end
 150+ EA7C             >
 150+ EA7C 65 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ EA7E             >Prev_Ptr        defl    Heap_Ptr
 150+ EA7E             >
 150+ EA7E             >mirror_Ptr      defl    $
 150+ EA7E             >
 150+ EA7E 18 78       >                dw      Dict_Ptr + 2        // xt
 150+ EA80             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ EA80             >
 150+ EA80             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ EA80             >
 150+ EA80             >//              ______________________________________________________________________
 150+ EA80             >//              Dictionary part
 150+ EA80             >
 150+ EA80             >                org     Dict_Ptr
 150+ 7816             >
 150+ 7816 7E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 7818             >
 150+ 7818             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 7818 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 150+ 781B             >
 150+ 781B             >
 150+ 781B             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 781B             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 781B             >
 150+ 781B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 781B E8 77                        dw  BLK_SEEK
 152+ 781D B2 6A                        dw  BBUF
 153+ 781F B4 77 89 69                  dw  BLK_FH, FETCH
 154+ 7823 4A 67                        dw  F_WRITE
 155+ 7825 A3 63 2F 00                  dw  LIT, $2F, QERROR
 155+ 7829 E2 6D
 156+ 782B 10 69                        dw  DROP
 157+ 782D 52 68                        dw  EXIT
 158+ 782F
 159+ 782F              //  ______________________________________________________________________
 160+ 782F              //
 161+ 782F              // blk-init     n --
 162+ 782F              // seek block n  within blocks!.bin  file
 163+ 782F                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 163+ 782F             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 163+ 782F             >
 163+ 782F             >Dict_Ptr        defl    $
 163+ 782F             >
 163+ 782F             >//              ______________________________________________________________________
 163+ 782F             >//              Heap part
 163+ 782F             >
 163+ 782F             >
 163+ 782F             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ EA80             >
 163+ EA80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ EA80             >Latest_Definition defl  Heap_Ptr
 163+ EA80             >
 163+ EA80             >                // dummy db directives used to calculate length of namec
 163+ EA80 42 4C 4B 2D >                db      "BLK-INIT"
 163+ EA84 49 4E 49 54 >
 163+ EA88             >len_NFA         defl    $ - temp_NFA
 163+ EA88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ EA80             >
 163+ EA80 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ EA81 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 163+ EA85 49 4E 49 54 >
 163+ EA89             >                org     $-1                 // alter last byte of Name just above to set
 163+ EA88 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ EA89             >
 163+ EA89 72 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ EA8B             >Prev_Ptr        defl    Heap_Ptr
 163+ EA8B             >
 163+ EA8B             >mirror_Ptr      defl    $
 163+ EA8B             >
 163+ EA8B 31 78       >                dw      Dict_Ptr + 2        // xt
 163+ EA8D             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ EA8D             >
 163+ EA8D             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ EA8D             >
 163+ EA8D             >//              ______________________________________________________________________
 163+ EA8D             >//              Dictionary part
 163+ EA8D             >
 163+ EA8D             >                org     Dict_Ptr
 163+ 782F             >
 163+ 782F 8B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 7831             >
 163+ 7831             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 7831 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 163+ 7834             >
 163+ 7834             >
 163+ 7834             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 7834             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 7834             >
 163+ 7834             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 7834 B4 77 89 69                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 164+ 7838 FF 66 10 69
 165+ 783C BB 77 BE 68                  dw  BLK_FNAME, ONE_PLUS
 166+ 7840 A6 6B 96 6A                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 166+ 7844 5A 67
 167+ 7846 A3 63 2C 00                  dw  LIT, $2C, QERROR
 167+ 784A E2 6D
 168+ 784C B4 77 93 69                  dw  BLK_FH, STORE
 169+ 7850 52 68                        dw  EXIT
 170+ 7852
 171+ 7852              //  ______________________________________________________________________
 172+ 7852              //
 173+ 7852              // #sec
 174+ 7852              // number of 512-Byte "sectors" available on thie sysstem.
 175+ 7852              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 176+ 7852
 177+ 7852                              Constant_Def NSEC , "#SEC", 32767
 177+ 7852             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 177+ 7852             >
 177+ 7852             >Dict_Ptr        defl    $
 177+ 7852             >
 177+ 7852             >//              ______________________________________________________________________
 177+ 7852             >//              Heap part
 177+ 7852             >
 177+ 7852             >
 177+ 7852             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ EA8D             >
 177+ EA8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ EA8D             >Latest_Definition defl  Heap_Ptr
 177+ EA8D             >
 177+ EA8D             >                // dummy db directives used to calculate length of namec
 177+ EA8D 23 53 45 43 >                db      "#SEC"
 177+ EA91             >len_NFA         defl    $ - temp_NFA
 177+ EA91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ EA8D             >
 177+ EA8D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ EA8E 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 177+ EA92             >                org     $-1                 // alter last byte of Name just above to set
 177+ EA91 C3          >                db      {b $} | END_BIT     // msb as name end
 177+ EA92             >
 177+ EA92 80 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ EA94             >Prev_Ptr        defl    Heap_Ptr
 177+ EA94             >
 177+ EA94             >mirror_Ptr      defl    $
 177+ EA94             >
 177+ EA94 54 78       >                dw      Dict_Ptr + 2        // xt
 177+ EA96             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ EA96             >
 177+ EA96             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ EA96             >
 177+ EA96             >//              ______________________________________________________________________
 177+ EA96             >//              Dictionary part
 177+ EA96             >
 177+ EA96             >                org     Dict_Ptr
 177+ 7852             >
 177+ 7852 94 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 7854             >
 177+ 7854             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 7854 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 177+ 7857             >
 177+ 7857             >
 177+ 7857             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 7857             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 7857             >
 177+ 7857             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 7857 FF 7F       >                dw      32767
 178+ 7859
 179+ 7859              //  ______________________________________________________________________
 180+ 7859
 181+ 7859
 182+ 7859
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
 124  7859                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
   1+ 7859              //  ______________________________________________________________________
   2+ 7859              //
   3+ 7859              //  L3.asm
   4+ 7859              //
   5+ 7859              //  Continuation of L2.asm
   6+ 7859              //  I/O Block definitions
   7+ 7859              //  ______________________________________________________________________
   8+ 7859
   9+ 7859
  10+ 7859              //  ______________________________________________________________________
  11+ 7859              //
  12+ 7859              // r/w          a n f --
  13+ 7859              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7859                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7859             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7859             >
  14+ 7859             >Dict_Ptr        defl    $
  14+ 7859             >
  14+ 7859             >//              ______________________________________________________________________
  14+ 7859             >//              Heap part
  14+ 7859             >
  14+ 7859             >
  14+ 7859             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EA96             >
  14+ EA96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EA96             >Latest_Definition defl  Heap_Ptr
  14+ EA96             >
  14+ EA96             >                // dummy db directives used to calculate length of namec
  14+ EA96 52 2F 57    >                db      "R/W"
  14+ EA99             >len_NFA         defl    $ - temp_NFA
  14+ EA99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EA96             >
  14+ EA96 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EA97 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EA9A             >                org     $-1                 // alter last byte of Name just above to set
  14+ EA99 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EA9A             >
  14+ EA9A 8D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EA9C             >Prev_Ptr        defl    Heap_Ptr
  14+ EA9C             >
  14+ EA9C             >mirror_Ptr      defl    $
  14+ EA9C             >
  14+ EA9C 5B 78       >                dw      Dict_Ptr + 2        // xt
  14+ EA9E             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EA9E             >
  14+ EA9E             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EA9E             >
  14+ EA9E             >//              ______________________________________________________________________
  14+ EA9E             >//              Dictionary part
  14+ EA9E             >
  14+ EA9E             >                org     Dict_Ptr
  14+ 7859             >
  14+ 7859 9C 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 785B             >
  14+ 785B             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 785B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 785E             >
  14+ 785E             >
  14+ 785E             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 785E             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 785E             >
  14+ 785E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 785E 5C 68                        dw      TO_R                    // >r
  16+ 7860 C5 68                        dw      ONE_SUBTRACT            // 1-
  17+ 7862 2B 69 8A 68                  dw      DUP, ZLESS              // dup 0<
  18+ 7866 07 69 54 78                  dw      OVER, NSEC              // over #sec
  19+ 786A C5 68 1F 6C                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 786E 1B 68                        dw      OR_OP                   // or
  21+ 7870 A3 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7874 E2 6D
  22+ 7876 67 68                        dw      R_TO                    // r>
  23+ 7878                                                              // if
  24+ 7878 F5 63                        dw      ZBRANCH
  25+ 787A 08 00                        dw      Read_Write_Else - $
  26+ 787C FF 77                        dw          BLK_READ            //      blk-read
  27+ 787E E8 63                        dw      BRANCH
  28+ 7880 04 00                        dw      Read_Write_Endif - $
  29+ 7882              Read_Write_Else:                                // else
  30+ 7882 18 78                        dw          BLK_WRITE           //      blk-write
  31+ 7884              Read_Write_Endif:                               // endif
  32+ 7884 52 68                        dw      EXIT                    // ;
  33+ 7886
  34+ 7886
  35+ 7886              //  ______________________________________________________________________
  36+ 7886              //
  37+ 7886              // +buf        a1 -- a2 f
  38+ 7886              // advences to next buffer, cyclically rotating along them
  39+ 7886                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7886             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7886             >
  39+ 7886             >Dict_Ptr        defl    $
  39+ 7886             >
  39+ 7886             >//              ______________________________________________________________________
  39+ 7886             >//              Heap part
  39+ 7886             >
  39+ 7886             >
  39+ 7886             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EA9E             >
  39+ EA9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EA9E             >Latest_Definition defl  Heap_Ptr
  39+ EA9E             >
  39+ EA9E             >                // dummy db directives used to calculate length of namec
  39+ EA9E 2B 42 55 46 >                db      "+BUF"
  39+ EAA2             >len_NFA         defl    $ - temp_NFA
  39+ EAA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EA9E             >
  39+ EA9E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EA9F 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EAA3             >                org     $-1                 // alter last byte of Name just above to set
  39+ EAA2 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EAA3             >
  39+ EAA3 96 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EAA5             >Prev_Ptr        defl    Heap_Ptr
  39+ EAA5             >
  39+ EAA5             >mirror_Ptr      defl    $
  39+ EAA5             >
  39+ EAA5 88 78       >                dw      Dict_Ptr + 2        // xt
  39+ EAA7             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EAA7             >
  39+ EAA7             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EAA7             >
  39+ EAA7             >//              ______________________________________________________________________
  39+ EAA7             >//              Dictionary part
  39+ EAA7             >
  39+ EAA7             >                org     Dict_Ptr
  39+ 7886             >
  39+ 7886 A5 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 7888             >
  39+ 7888             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7888 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 788B             >
  39+ 788B             >
  39+ 788B             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 788B             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 788B             >
  39+ 788B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 788B A3 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 788F A5 68
  41+ 7891 2B 69 10 6B                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7895 89 69
  42+ 7897 F1 6B                        dw      EQUALS                  // =
  43+ 7899                                                              // if
  44+ 7899 F5 63                        dw      ZBRANCH
  45+ 789B 08 00                        dw      PBuf_Endif - $
  46+ 789D 10 69                        dw          DROP                //      drop
  47+ 789F 0A 6B 89 69                  dw          FIRST, FETCH        //      first @
  48+ 78A3              PBuf_Endif:                                     // endif
  49+ 78A3 2B 69 7C 6B                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 78A7 89 69
  50+ 78A9 E5 6B                        dw      SUBTRACT                // -
  51+ 78AB 52 68                        dw      EXIT                    // ;
  52+ 78AD
  53+ 78AD              //  ______________________________________________________________________
  54+ 78AD              //
  55+ 78AD              // update       --
  56+ 78AD              // mark the last used block to be written to disk
  57+ 78AD                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 78AD             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 78AD             >
  57+ 78AD             >Dict_Ptr        defl    $
  57+ 78AD             >
  57+ 78AD             >//              ______________________________________________________________________
  57+ 78AD             >//              Heap part
  57+ 78AD             >
  57+ 78AD             >
  57+ 78AD             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EAA7             >
  57+ EAA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EAA7             >Latest_Definition defl  Heap_Ptr
  57+ EAA7             >
  57+ EAA7             >                // dummy db directives used to calculate length of namec
  57+ EAA7 55 50 44 41 >                db      "UPDATE"
  57+ EAAB 54 45       >
  57+ EAAD             >len_NFA         defl    $ - temp_NFA
  57+ EAAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EAA7             >
  57+ EAA7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EAA8 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EAAC 54 45       >
  57+ EAAE             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAAD C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAAE             >
  57+ EAAE 9E 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EAB0             >Prev_Ptr        defl    Heap_Ptr
  57+ EAB0             >
  57+ EAB0             >mirror_Ptr      defl    $
  57+ EAB0             >
  57+ EAB0 AF 78       >                dw      Dict_Ptr + 2        // xt
  57+ EAB2             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EAB2             >
  57+ EAB2             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EAB2             >
  57+ EAB2             >//              ______________________________________________________________________
  57+ EAB2             >//              Dictionary part
  57+ EAB2             >
  57+ EAB2             >                org     Dict_Ptr
  57+ 78AD             >
  57+ 78AD B0 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 78AF             >
  57+ 78AF             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 78AF CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 78B2             >
  57+ 78B2             >
  57+ 78B2             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 78B2             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 78B2             >
  57+ 78B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 78B2 7C 6B 89 69                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 78B6 89 69
  59+ 78B8 A3 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 78BC 1B 68
  60+ 78BE 7C 6B 89 69                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 78C2 93 69
  61+ 78C4 52 68                        dw      EXIT                    // ;
  62+ 78C6
  63+ 78C6
  64+ 78C6              //  ______________________________________________________________________
  65+ 78C6              //
  66+ 78C6              // empty-buffers --
  67+ 78C6                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 78C6             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 78C6             >
  67+ 78C6             >Dict_Ptr        defl    $
  67+ 78C6             >
  67+ 78C6             >//              ______________________________________________________________________
  67+ 78C6             >//              Heap part
  67+ 78C6             >
  67+ 78C6             >
  67+ 78C6             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EAB2             >
  67+ EAB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EAB2             >Latest_Definition defl  Heap_Ptr
  67+ EAB2             >
  67+ EAB2             >                // dummy db directives used to calculate length of namec
  67+ EAB2 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAB6 59 2D 42 55 >
  67+ EABA 46 46 45 52 >
  67+ EABE 53          >
  67+ EABF             >len_NFA         defl    $ - temp_NFA
  67+ EABF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EAB2             >
  67+ EAB2 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EAB3 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAB7 59 2D 42 55 >
  67+ EABB 46 46 45 52 >
  67+ EABF 53          >
  67+ EAC0             >                org     $-1                 // alter last byte of Name just above to set
  67+ EABF D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EAC0             >
  67+ EAC0 A7 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EAC2             >Prev_Ptr        defl    Heap_Ptr
  67+ EAC2             >
  67+ EAC2             >mirror_Ptr      defl    $
  67+ EAC2             >
  67+ EAC2 C8 78       >                dw      Dict_Ptr + 2        // xt
  67+ EAC4             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EAC4             >
  67+ EAC4             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EAC4             >
  67+ EAC4             >//              ______________________________________________________________________
  67+ EAC4             >//              Dictionary part
  67+ EAC4             >
  67+ EAC4             >                org     Dict_Ptr
  67+ 78C6             >
  67+ 78C6 C2 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 78C8             >
  67+ 78C8             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 78C8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 78CB             >
  67+ 78CB             >
  67+ 78CB             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 78CB             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 78CB             >
  67+ 78CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 78CB 0A 6B 89 69                  dw      FIRST, FETCH            // first @
  69+ 78CF 10 6B 89 69                  dw      LIMIT, FETCH            // limit @
  70+ 78D3 07 69 E5 6B                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 78D7 8C 70
  71+ 78D9 52 68                        dw      EXIT                    // ;
  72+ 78DB
  73+ 78DB              //  ______________________________________________________________________
  74+ 78DB              //
  75+ 78DB              // buffer       n -- a
  76+ 78DB              // read block n and gives the address to a buffer
  77+ 78DB              // any block previously inside the buffer, if modified, is rewritten to
  78+ 78DB              // disk before reading the block n.
  79+ 78DB
  80+ 78DB                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 78DB             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 78DB             >
  80+ 78DB             >Dict_Ptr        defl    $
  80+ 78DB             >
  80+ 78DB             >//              ______________________________________________________________________
  80+ 78DB             >//              Heap part
  80+ 78DB             >
  80+ 78DB             >
  80+ 78DB             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EAC4             >
  80+ EAC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EAC4             >Latest_Definition defl  Heap_Ptr
  80+ EAC4             >
  80+ EAC4             >                // dummy db directives used to calculate length of namec
  80+ EAC4 42 55 46 46 >                db      "BUFFER"
  80+ EAC8 45 52       >
  80+ EACA             >len_NFA         defl    $ - temp_NFA
  80+ EACA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EAC4             >
  80+ EAC4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EAC5 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAC9 45 52       >
  80+ EACB             >                org     $-1                 // alter last byte of Name just above to set
  80+ EACA D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EACB             >
  80+ EACB B2 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EACD             >Prev_Ptr        defl    Heap_Ptr
  80+ EACD             >
  80+ EACD             >mirror_Ptr      defl    $
  80+ EACD             >
  80+ EACD DD 78       >                dw      Dict_Ptr + 2        // xt
  80+ EACF             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EACF             >
  80+ EACF             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EACF             >
  80+ EACF             >//              ______________________________________________________________________
  80+ EACF             >//              Dictionary part
  80+ EACF             >
  80+ EACF             >                org     Dict_Ptr
  80+ 78DB             >
  80+ 78DB CD 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 78DD             >
  80+ 78DD             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 78DD CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 78E0             >
  80+ 78E0             >
  80+ 78E0             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 78E0             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 78E0             >
  80+ 78E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 78E0 76 6B 89 69                  dw      USE, FETCH              // use @
  82+ 78E4 2B 69 5C 68                  dw      DUP, TO_R               // dup >r
  83+ 78E8                                                              // begin
  84+ 78E8              Buffer_Begin:
  85+ 78E8 88 78                        dw          PBUF                //      +buf
  86+ 78EA                                                              // until
  87+ 78EA F5 63                        dw      ZBRANCH
  88+ 78EC FC FF                        dw      Buffer_Begin - $
  89+ 78EE 76 6B 93 69                  dw      USE, STORE              // use !
  90+ 78F2 72 68 89 69                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 78F6 8A 68
  91+ 78F8                                                              // if
  92+ 78F8 F5 63                        dw      ZBRANCH
  93+ 78FA 14 00                        dw      Buffer_Endif - $
  94+ 78FC 72 68 D4 68                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7900 72 68 89 69                  dw          R_OP, FETCH         //      r fetch
  96+ 7904 A3 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7908 0C 68                        dw          AND_OP              //      and
  98+ 790A 81 6A 5B 78                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 790E              Buffer_Endif:                                   // endif
 100+ 790E 72 68 93 69                  dw      R_OP, STORE             // r !
 101+ 7912 72 68 7C 6B                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7916 93 69
 102+ 7918 67 68 D4 68                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 791C 52 68                        dw      EXIT                    // ;
 104+ 791E
 105+ 791E              //  ______________________________________________________________________
 106+ 791E              //
 107+ 791E              // block        n -- a
 108+ 791E              // Leaves the buffer address that contains the block n.
 109+ 791E              // If the block is not already present, it will be loaded from disk
 110+ 791E              // The block previously inside the buffer, if modified, is rewritten to
 111+ 791E              // disk before reading the block n.
 112+ 791E              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 791E
 114+ 791E                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 791E             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 791E             >
 114+ 791E             >Dict_Ptr        defl    $
 114+ 791E             >
 114+ 791E             >//              ______________________________________________________________________
 114+ 791E             >//              Heap part
 114+ 791E             >
 114+ 791E             >
 114+ 791E             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EACF             >
 114+ EACF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EACF             >Latest_Definition defl  Heap_Ptr
 114+ EACF             >
 114+ EACF             >                // dummy db directives used to calculate length of namec
 114+ EACF 42 4C 4F 43 >                db      "BLOCK"
 114+ EAD3 4B          >
 114+ EAD4             >len_NFA         defl    $ - temp_NFA
 114+ EAD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EACF             >
 114+ EACF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EAD0 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAD4 4B          >
 114+ EAD5             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAD4 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAD5             >
 114+ EAD5 C4 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAD7             >Prev_Ptr        defl    Heap_Ptr
 114+ EAD7             >
 114+ EAD7             >mirror_Ptr      defl    $
 114+ EAD7             >
 114+ EAD7 20 79       >                dw      Dict_Ptr + 2        // xt
 114+ EAD9             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAD9             >
 114+ EAD9             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAD9             >
 114+ EAD9             >//              ______________________________________________________________________
 114+ EAD9             >//              Dictionary part
 114+ EAD9             >
 114+ EAD9             >                org     Dict_Ptr
 114+ 791E             >
 114+ 791E D7 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 7920             >
 114+ 7920             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7920 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7923             >
 114+ 7923             >
 114+ 7923             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7923             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7923             >
 114+ 7923             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7923 3A 6B 89 69                  dw      OFFSET, FETCH           // offset @
 116+ 7927 A5 68 5C 68                  dw      PLUS, TO_R              // + >r
 117+ 792B 7C 6B 89 69                  dw      PREV, FETCH             // prev @
 118+ 792F 2B 69 89 69                  dw      DUP, FETCH              // dup @
 119+ 7933 72 68 E5 6B                  dw      R_OP, SUBTRACT          // r -
 120+ 7937 2B 69 A5 68                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 793B                                                              // if
 122+ 793B F5 63                        dw        ZBRANCH
 123+ 793D 32 00                        dw        Block_Endif_1 - $
 124+ 793F              Block_Begin:                                    //      begin
 125+ 793F 88 78 77 68                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7943                                                              //          if
 127+ 7943 F5 63                        dw          ZBRANCH
 128+ 7945 12 00                        dw          Block_Endif_2 - $
 129+ 7947 10 69                        dw              DROP            //              drop
 130+ 7949 72 68 DD 78                  dw              R_OP, BUFFER    //              r buffer
 131+ 794D 2B 69                        dw              DUP             //              dup
 132+ 794F 72 68 88 6A                  dw              R_OP, ONE       //              r 1
 133+ 7953 5B 78                        dw              READ_WRITE      //              r/w
 134+ 7955 E1 68                        dw              TWO_MINUS       //              2-
 135+ 7957              Block_Endif_2:                                  //          endif
 136+ 7957 2B 69 89 69                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 795B 72 68
 137+ 795D E5 6B 2B 69                  dw          SUBTRACT, DUP       //          - dup
 138+ 7961 A5 68 77 68                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7965                                                              //      until
 140+ 7965 F5 63                        dw        ZBRANCH
 141+ 7967 D8 FF                        dw        Block_Begin - $
 142+ 7969 2B 69 7C 6B                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 796D 93 69
 143+ 796F              Block_Endif_1:                                  // endif
 144+ 796F 67 68 10 69                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7973 D4 68
 145+ 7975 52 68                        dw      EXIT                    // ;
 146+ 7977
 147+ 7977              //  ______________________________________________________________________
 148+ 7977              //
 149+ 7977              // #buff        -- n
 150+ 7977              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7977                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7977             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7977             >
 151+ 7977             >Dict_Ptr        defl    $
 151+ 7977             >
 151+ 7977             >//              ______________________________________________________________________
 151+ 7977             >//              Heap part
 151+ 7977             >
 151+ 7977             >
 151+ 7977             >                org     (Heap_Ptr & $1FFF) + $E000
 151+ EAD9             >
 151+ EAD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ EAD9             >Latest_Definition defl  Heap_Ptr
 151+ EAD9             >
 151+ EAD9             >                // dummy db directives used to calculate length of namec
 151+ EAD9 23 42 55 46 >                db      "#BUFF"
 151+ EADD 46          >
 151+ EADE             >len_NFA         defl    $ - temp_NFA
 151+ EADE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ EAD9             >
 151+ EAD9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ EADA 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ EADE 46          >
 151+ EADF             >                org     $-1                 // alter last byte of Name just above to set
 151+ EADE C6          >                db      {b $} | END_BIT     // msb as name end
 151+ EADF             >
 151+ EADF CF 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 151+ EAE1             >Prev_Ptr        defl    Heap_Ptr
 151+ EAE1             >
 151+ EAE1             >mirror_Ptr      defl    $
 151+ EAE1             >
 151+ EAE1 79 79       >                dw      Dict_Ptr + 2        // xt
 151+ EAE3             >Heap_Ptr        defl    $ - $E000           // save current HP
 151+ EAE3             >
 151+ EAE3             >Current_HP      defl  $ - $E000             // used to set HP once!
 151+ EAE3             >
 151+ EAE3             >//              ______________________________________________________________________
 151+ EAE3             >//              Dictionary part
 151+ EAE3             >
 151+ EAE3             >                org     Dict_Ptr
 151+ 7977             >
 151+ 7977 E1 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 151+ 7979             >
 151+ 7979             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7979 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 797C             >
 151+ 797C             >
 151+ 797C             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 797C             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 797C             >
 151+ 797C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 797C 07 00       >                dw      7
 152+ 797E
 153+ 797E              //  ______________________________________________________________________
 154+ 797E              //
 155+ 797E              // flush        --
 156+ 797E                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 797E             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 797E             >
 156+ 797E             >Dict_Ptr        defl    $
 156+ 797E             >
 156+ 797E             >//              ______________________________________________________________________
 156+ 797E             >//              Heap part
 156+ 797E             >
 156+ 797E             >
 156+ 797E             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ EAE3             >
 156+ EAE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ EAE3             >Latest_Definition defl  Heap_Ptr
 156+ EAE3             >
 156+ EAE3             >                // dummy db directives used to calculate length of namec
 156+ EAE3 46 4C 55 53 >                db      "FLUSH"
 156+ EAE7 48          >
 156+ EAE8             >len_NFA         defl    $ - temp_NFA
 156+ EAE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ EAE3             >
 156+ EAE3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ EAE4 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ EAE8 48          >
 156+ EAE9             >                org     $-1                 // alter last byte of Name just above to set
 156+ EAE8 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ EAE9             >
 156+ EAE9 D9 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ EAEB             >Prev_Ptr        defl    Heap_Ptr
 156+ EAEB             >
 156+ EAEB             >mirror_Ptr      defl    $
 156+ EAEB             >
 156+ EAEB 80 79       >                dw      Dict_Ptr + 2        // xt
 156+ EAED             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ EAED             >
 156+ EAED             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ EAED             >
 156+ EAED             >//              ______________________________________________________________________
 156+ EAED             >//              Dictionary part
 156+ EAED             >
 156+ EAED             >                org     Dict_Ptr
 156+ 797E             >
 156+ 797E EB 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 7980             >
 156+ 7980             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7980 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7983             >
 156+ 7983             >
 156+ 7983             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7983             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7983             >
 156+ 7983             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7983 79 79 BE 68                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7987 81 6A
 158+ 7989              Flush_Do:                                       // do
 159+ 7989 34 64                        dw      C_DO
 160+ 798B 81 6A DD 78                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 798F 10 69
 161+ 7991                                                              // loop
 162+ 7991 E0 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7995 B4 77 89 69                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7999 0B 67 10 69                  dw      F_SYNC, DROP            // f_sync drop
 165+ 799D 52 68                        dw      EXIT                    // exit
 166+ 799F
 167+ 799F              //  ______________________________________________________________________
 168+ 799F              //
 169+ 799F              // f_getline    a m fh -- n
 170+ 799F              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 799F              // Address a is left for subsequent processing
 172+ 799F              // and n as the actual number of byte read, that is the length of line
 173+ 799F                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 799F             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 799F             >
 173+ 799F             >Dict_Ptr        defl    $
 173+ 799F             >
 173+ 799F             >//              ______________________________________________________________________
 173+ 799F             >//              Heap part
 173+ 799F             >
 173+ 799F             >
 173+ 799F             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ EAED             >
 173+ EAED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ EAED             >Latest_Definition defl  Heap_Ptr
 173+ EAED             >
 173+ EAED             >                // dummy db directives used to calculate length of namec
 173+ EAED 46 5F 47 45 >                db      "F_GETLINE"
 173+ EAF1 54 4C 49 4E >
 173+ EAF5 45          >
 173+ EAF6             >len_NFA         defl    $ - temp_NFA
 173+ EAF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ EAED             >
 173+ EAED 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ EAEE 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ EAF2 54 4C 49 4E >
 173+ EAF6 45          >
 173+ EAF7             >                org     $-1                 // alter last byte of Name just above to set
 173+ EAF6 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ EAF7             >
 173+ EAF7 E3 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ EAF9             >Prev_Ptr        defl    Heap_Ptr
 173+ EAF9             >
 173+ EAF9             >mirror_Ptr      defl    $
 173+ EAF9             >
 173+ EAF9 A1 79       >                dw      Dict_Ptr + 2        // xt
 173+ EAFB             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ EAFB             >
 173+ EAFB             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ EAFB             >
 173+ EAFB             >//              ______________________________________________________________________
 173+ EAFB             >//              Dictionary part
 173+ EAFB             >
 173+ EAFB             >                org     Dict_Ptr
 173+ 799F             >
 173+ 799F F9 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 79A1             >
 173+ 79A1             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 79A1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 79A4             >
 173+ 79A4             >
 173+ 79A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 79A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 79A4             >
 173+ 79A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 79A4 5C 68                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 79A6 1B 69                        dw      TUCK                    // tuck             ( m a m )
 176+ 79A8 72 68 17 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 79AC A3 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 79B0 E2 6D
 178+ 79B2
 179+ 79B2 5A 69 07 69                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 79B6 BE 68 24 69                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 79BA
 182+ 79BA 72 68 2F 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 79BE A3 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 79C2 E2 6D
 184+ 79C4                                                              // if ( at least 1 chr was read )  \  fh
 185+ 79C4 F5 63                        dw      ZBRANCH
 186+ 79C6 3C 00                        dw      FGetline_Else - $
 187+ 79C8 A3 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 79CC 29 65
 188+ 79CE 10 69 15 69                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 79D2 24 69                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 79D4 A3 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 79D8 29 65
 191+ 79DA 10 69 15 69                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 79DE 32 69 2A 6C                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 79E2 2B 69 94 6B                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 79E6 93 69
 194+ 79E8 2B 69 5C 68                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 79EC 5A 69 67 68                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 79F0 81 6A AF 68                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 79F4 67 68 E3 66                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 79F8 A3 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 79FC E2 6D
 199+ 79FE                                                              // else
 200+ 79FE E8 63                        dw      BRANCH
 201+ 7A00 0C 00                        dw      FGetline_Endif - $
 202+ 7A02              FGetline_Else:
 203+ 7A02 67 68                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7A04 5A 69 54 69                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7A08 10 69 81 6A                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7A0C              FGetline_Endif:                                 // endif
 207+ 7A0C 5C 68 2B 69                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7A10 2B 69
 208+ 7A12 BE 68 24 69                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7A16 72 68 8D 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7A1A 67 69 A5 68                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7A1E 81 6A 24 69                  dw      ZERO, SWAP              // 0 swap
 212+ 7A22 D9 68 93 69                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7A26 72 68 A5 68                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7A2A C5 68
 214+ 7A2C 24 69 72 68                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7A30 E5 6B
 215+ 7A32 97 70                        dw      BLANK                   // blank
 216+ 7A34 67 68                        dw      R_TO                    // r>                   ( n )
 217+ 7A36 52 68                        dw      EXIT                    // ;
 218+ 7A38
 219+ 7A38              //  ______________________________________________________________________
 220+ 7A38              //
 221+ 7A38              // f_include    fh --
 222+ 7A38              // Given a filehandle includes the source from file
 223+ 7A38                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7A38             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7A38             >
 223+ 7A38             >Dict_Ptr        defl    $
 223+ 7A38             >
 223+ 7A38             >//              ______________________________________________________________________
 223+ 7A38             >//              Heap part
 223+ 7A38             >
 223+ 7A38             >
 223+ 7A38             >                org     (Heap_Ptr & $1FFF) + $E000
 223+ EAFB             >
 223+ EAFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ EAFB             >Latest_Definition defl  Heap_Ptr
 223+ EAFB             >
 223+ EAFB             >                // dummy db directives used to calculate length of namec
 223+ EAFB 46 5F 49 4E >                db      "F_INCLUDE"
 223+ EAFF 43 4C 55 44 >
 223+ EB03 45          >
 223+ EB04             >len_NFA         defl    $ - temp_NFA
 223+ EB04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ EAFB             >
 223+ EAFB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ EAFC 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ EB00 43 4C 55 44 >
 223+ EB04 45          >
 223+ EB05             >                org     $-1                 // alter last byte of Name just above to set
 223+ EB04 C5          >                db      {b $} | END_BIT     // msb as name end
 223+ EB05             >
 223+ EB05 ED 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 223+ EB07             >Prev_Ptr        defl    Heap_Ptr
 223+ EB07             >
 223+ EB07             >mirror_Ptr      defl    $
 223+ EB07             >
 223+ EB07 3A 7A       >                dw      Dict_Ptr + 2        // xt
 223+ EB09             >Heap_Ptr        defl    $ - $E000           // save current HP
 223+ EB09             >
 223+ EB09             >Current_HP      defl  $ - $E000             // used to set HP once!
 223+ EB09             >
 223+ EB09             >//              ______________________________________________________________________
 223+ EB09             >//              Dictionary part
 223+ EB09             >
 223+ EB09             >                org     Dict_Ptr
 223+ 7A38             >
 223+ 7A38 07 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 223+ 7A3A             >
 223+ 7A3A             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7A3A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7A3D             >
 223+ 7A3D             >
 223+ 7A3D             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7A3D             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7A3D             >
 223+ 7A3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7A3D 22 6B 89 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7A41 5C 68
 225+ 7A43 28 6B 89 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7A47 5C 68
 226+ 7A49 8E 6B 89 69                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7A4D 5C 68
 227+ 7A4F 72 68                        dw      R_OP                    // r
 228+ 7A51                                                              // if
 229+ 7A51 F5 63                        dw      ZBRANCH
 230+ 7A53 20 00                        dw      FInclude_Else_1 - $
 231+ 7A55 72 68 17 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7A59 A3 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7A5D E2 6D
 233+ 7A5F 28 6B 89 69                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7A63 E1 68                        dw          TWO_MINUS
 235+ 7A65 94 6B 89 69                  dw          SPAN, FETCH         //      span @ -
 236+ 7A69 E5 6B                        dw          SUBTRACT
 237+ 7A6B DA 6B AF 68                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7A6F                                                              // else
 239+ 7A6F E8 63                        dw      BRANCH
 240+ 7A71 06 00                        dw      FInclude_Endif_1 - $
 241+ 7A73              FInclude_Else_1:
 242+ 7A73 81 6A 81 6A                  dw          ZERO, ZERO          //      0 0
 243+ 7A77                                                              // endif
 244+ 7A77              FInclude_Endif_1:
 245+ 7A77 5C 68 5C 68                  dw      TO_R, TO_R              // >r >r
 246+ 7A7B 8E 6B 93 69                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7A7F              FInclude_Begin:                                 // begin
 248+ 7A7F 88 6A 20 79                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7A83 B2 6A
 249+ 7A85 67 69 97 70                  dw          TWO_DUP, BLANK      //      2dup blank
 250+ 7A89 24 69 BE 68                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7A8D 24 69 D9 68                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7A91 8E 6B 89 69                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7A95 A1 79                        dw          F_GETLINE           //      f_getline
 254+ 7A97                                                              // while
 255+ 7A97 F5 63                        dw      ZBRANCH
 256+ 7A99 14 00                        dw      FInclude_Repeat - $
 257+ 7A9B 88 6A 22 6B                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7A9F 93 69
 258+ 7AA1 81 6A 28 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7AA5 93 69
 259+ 7AA7 81 74                        dw          INTERPRET           //      interpret
 260+ 7AA9 E8 63                        dw      BRANCH
 261+ 7AAB D4 FF                        dw      FInclude_Begin - $
 262+ 7AAD              FInclude_Repeat:                                // repeat
 263+ 7AAD 8E 6B 89 69                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7AB1 81 6A 8E 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7AB5 93 69
 265+ 7AB7 FF 66                        dw      F_CLOSE                 // f_close
 266+ 7AB9 A3 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7ABD E2 6D
 267+ 7ABF 67 68 67 68                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7AC3 67 68
 268+ 7AC5 2B 69 8E 6B                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7AC9 93 69
 269+ 7ACB                                                              // if
 270+ 7ACB F5 63                        dw      ZBRANCH
 271+ 7ACD 12 00                        dw      FInclude_Else_2 - $
 272+ 7ACF 8E 6B 89 69                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7AD3 E3 66                        dw          F_SEEK              //      f_seek
 274+ 7AD5 A3 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7AD9 E2 6D
 275+ 7ADB                                                              // else
 276+ 7ADB E8 63                        dw      BRANCH
 277+ 7ADD 04 00                        dw      FInclude_Endif_2 - $
 278+ 7ADF              FInclude_Else_2:
 279+ 7ADF 54 69                        dw          TWO_DROP            //      2drop
 280+ 7AE1              FInclude_Endif_2:                               // endif
 281+ 7AE1 67 68 28 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7AE5 93 69
 282+ 7AE7 67 68 22 6B                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7AEB 93 69
 283+ 7AED 52 68                        dw      EXIT                    // ;
 284+ 7AEF
 285+ 7AEF              //  ______________________________________________________________________
 286+ 7AEF              //
 287+ 7AEF              // open<         -- fh
 288+ 7AEF              // Open the following filename and return it file-handle
 289+ 7AEF              // Used in the form OPEN CCCC
 290+ 7AEF                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7AEF             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7AEF             >
 290+ 7AEF             >Dict_Ptr        defl    $
 290+ 7AEF             >
 290+ 7AEF             >//              ______________________________________________________________________
 290+ 7AEF             >//              Heap part
 290+ 7AEF             >
 290+ 7AEF             >
 290+ 7AEF             >                org     (Heap_Ptr & $1FFF) + $E000
 290+ EB09             >
 290+ EB09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ EB09             >Latest_Definition defl  Heap_Ptr
 290+ EB09             >
 290+ EB09             >                // dummy db directives used to calculate length of namec
 290+ EB09 4F 50 45 4E >                db      "OPEN<"
 290+ EB0D 3C          >
 290+ EB0E             >len_NFA         defl    $ - temp_NFA
 290+ EB0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ EB09             >
 290+ EB09 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ EB0A 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ EB0E 3C          >
 290+ EB0F             >                org     $-1                 // alter last byte of Name just above to set
 290+ EB0E BC          >                db      {b $} | END_BIT     // msb as name end
 290+ EB0F             >
 290+ EB0F FB 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 290+ EB11             >Prev_Ptr        defl    Heap_Ptr
 290+ EB11             >
 290+ EB11             >mirror_Ptr      defl    $
 290+ EB11             >
 290+ EB11 F1 7A       >                dw      Dict_Ptr + 2        // xt
 290+ EB13             >Heap_Ptr        defl    $ - $E000           // save current HP
 290+ EB13             >
 290+ EB13             >Current_HP      defl  $ - $E000             // used to set HP once!
 290+ EB13             >
 290+ EB13             >//              ______________________________________________________________________
 290+ EB13             >//              Dictionary part
 290+ EB13             >
 290+ EB13             >                org     Dict_Ptr
 290+ 7AEF             >
 290+ 7AEF 11 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 290+ 7AF1             >
 290+ 7AF1             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7AF1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7AF4             >
 290+ 7AF4             >
 290+ 7AF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7AF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7AF4             >
 290+ 7AF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7AF4 A4 6A                        dw      BL
 292+ 7AF6 C4 70 1E 6F                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7AFA 07 69
 293+ 7AFC A5 68 81 6A                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7B00 24 69 93 69
 294+ 7B04 B5 70 88 6A                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7B08 5A 67
 295+ 7B0A A3 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7B0E E2 6D                        dw      QERROR                  // ?error
 297+ 7B10 52 68                        dw      EXIT                    // ;
 298+ 7B12
 299+ 7B12              //  ______________________________________________________________________
 300+ 7B12              //
 301+ 7B12              // include      -- cccc
 302+ 7B12              // Include the following filename
 303+ 7B12                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7B12             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7B12             >
 303+ 7B12             >Dict_Ptr        defl    $
 303+ 7B12             >
 303+ 7B12             >//              ______________________________________________________________________
 303+ 7B12             >//              Heap part
 303+ 7B12             >
 303+ 7B12             >
 303+ 7B12             >                org     (Heap_Ptr & $1FFF) + $E000
 303+ EB13             >
 303+ EB13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ EB13             >Latest_Definition defl  Heap_Ptr
 303+ EB13             >
 303+ EB13             >                // dummy db directives used to calculate length of namec
 303+ EB13 49 4E 43 4C >                db      "INCLUDE"
 303+ EB17 55 44 45    >
 303+ EB1A             >len_NFA         defl    $ - temp_NFA
 303+ EB1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ EB13             >
 303+ EB13 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ EB14 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ EB18 55 44 45    >
 303+ EB1B             >                org     $-1                 // alter last byte of Name just above to set
 303+ EB1A C5          >                db      {b $} | END_BIT     // msb as name end
 303+ EB1B             >
 303+ EB1B 09 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 303+ EB1D             >Prev_Ptr        defl    Heap_Ptr
 303+ EB1D             >
 303+ EB1D             >mirror_Ptr      defl    $
 303+ EB1D             >
 303+ EB1D 14 7B       >                dw      Dict_Ptr + 2        // xt
 303+ EB1F             >Heap_Ptr        defl    $ - $E000           // save current HP
 303+ EB1F             >
 303+ EB1F             >Current_HP      defl  $ - $E000             // used to set HP once!
 303+ EB1F             >
 303+ EB1F             >//              ______________________________________________________________________
 303+ EB1F             >//              Dictionary part
 303+ EB1F             >
 303+ EB1F             >                org     Dict_Ptr
 303+ 7B12             >
 303+ 7B12 1D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 303+ 7B14             >
 303+ 7B14             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7B14 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7B17             >
 303+ 7B17             >
 303+ 7B17             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7B17             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7B17             >
 303+ 7B17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7B17 F1 7A                        dw      OPEN_FH                 // open
 305+ 7B19 2B 69 3A 7A                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7B1D FF 66 10 69                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7B21 52 68                        dw      EXIT                    // ;
 308+ 7B23
 309+ 7B23              //  ______________________________________________________________________
 310+ 7B23              //
 311+ 7B23              // needs
 312+ 7B23              // check for cccc exists in vocabulary
 313+ 7B23              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7B23
 315+ 7B23              // temp filename cccc.f as counted string zero-padded
 316+ 7B23                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7B23             >
 316+ 7B23             >Dict_Ptr        defl    $
 316+ 7B23             >
 316+ 7B23             >//              ______________________________________________________________________
 316+ 7B23             >//              Heap part
 316+ 7B23             >
 316+ 7B23             >
 316+ 7B23             >                org     (Heap_Ptr & $1FFF) + $E000
 316+ EB1F             >
 316+ EB1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ EB1F             >Latest_Definition defl  Heap_Ptr
 316+ EB1F             >
 316+ EB1F             >                // dummy db directives used to calculate length of namec
 316+ EB1F 4E 45 45 44 >                db      "NEEDS-W"
 316+ EB23 53 2D 57    >
 316+ EB26             >len_NFA         defl    $ - temp_NFA
 316+ EB26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ EB1F             >
 316+ EB1F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ EB20 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ EB24 53 2D 57    >
 316+ EB27             >                org     $-1                 // alter last byte of Name just above to set
 316+ EB26 D7          >                db      {b $} | END_BIT     // msb as name end
 316+ EB27             >
 316+ EB27 13 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 316+ EB29             >Prev_Ptr        defl    Heap_Ptr
 316+ EB29             >
 316+ EB29             >mirror_Ptr      defl    $
 316+ EB29             >
 316+ EB29 25 7B       >                dw      Dict_Ptr + 2        // xt
 316+ EB2B             >Heap_Ptr        defl    $ - $E000           // save current HP
 316+ EB2B             >
 316+ EB2B             >Current_HP      defl  $ - $E000             // used to set HP once!
 316+ EB2B             >
 316+ EB2B             >//              ______________________________________________________________________
 316+ EB2B             >//              Dictionary part
 316+ EB2B             >
 316+ EB2B             >                org     Dict_Ptr
 316+ 7B23             >
 316+ 7B23 29 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 316+ 7B25             >
 316+ 7B25             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7B25 CD C5 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7B28             >
 316+ 7B28             >
 316+ 7B28             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7B28             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7B28             >
 316+ 7B28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7B28 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7B4B              // temp complete path+filename
 319+ 7B4B                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7B4B             >
 319+ 7B4B             >Dict_Ptr        defl    $
 319+ 7B4B             >
 319+ 7B4B             >//              ______________________________________________________________________
 319+ 7B4B             >//              Heap part
 319+ 7B4B             >
 319+ 7B4B             >
 319+ 7B4B             >                org     (Heap_Ptr & $1FFF) + $E000
 319+ EB2B             >
 319+ EB2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ EB2B             >Latest_Definition defl  Heap_Ptr
 319+ EB2B             >
 319+ EB2B             >                // dummy db directives used to calculate length of namec
 319+ EB2B 4E 45 45 44 >                db      "NEEDS-FN"
 319+ EB2F 53 2D 46 4E >
 319+ EB33             >len_NFA         defl    $ - temp_NFA
 319+ EB33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ EB2B             >
 319+ EB2B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ EB2C 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ EB30 53 2D 46 4E >
 319+ EB34             >                org     $-1                 // alter last byte of Name just above to set
 319+ EB33 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ EB34             >
 319+ EB34 1F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 319+ EB36             >Prev_Ptr        defl    Heap_Ptr
 319+ EB36             >
 319+ EB36             >mirror_Ptr      defl    $
 319+ EB36             >
 319+ EB36 4D 7B       >                dw      Dict_Ptr + 2        // xt
 319+ EB38             >Heap_Ptr        defl    $ - $E000           // save current HP
 319+ EB38             >
 319+ EB38             >Current_HP      defl  $ - $E000             // used to set HP once!
 319+ EB38             >
 319+ EB38             >//              ______________________________________________________________________
 319+ EB38             >//              Dictionary part
 319+ EB38             >
 319+ EB38             >                org     Dict_Ptr
 319+ 7B4B             >
 319+ 7B4B 36 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 319+ 7B4D             >
 319+ 7B4D             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7B4D CD C5 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7B50             >
 319+ 7B50             >
 319+ 7B50             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7B50             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7B50             >
 319+ 7B50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7B50 00 00 00...                  ds      40
 321+ 7B78              // constant path
 322+ 7B78                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 7B78             >
 322+ 7B78             >Dict_Ptr        defl    $
 322+ 7B78             >
 322+ 7B78             >//              ______________________________________________________________________
 322+ 7B78             >//              Heap part
 322+ 7B78             >
 322+ 7B78             >
 322+ 7B78             >                org     (Heap_Ptr & $1FFF) + $E000
 322+ EB38             >
 322+ EB38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ EB38             >Latest_Definition defl  Heap_Ptr
 322+ EB38             >
 322+ EB38             >                // dummy db directives used to calculate length of namec
 322+ EB38 4E 45 45 44 >                db      "NEEDS-INC"
 322+ EB3C 53 2D 49 4E >
 322+ EB40 43          >
 322+ EB41             >len_NFA         defl    $ - temp_NFA
 322+ EB41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ EB38             >
 322+ EB38 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ EB39 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ EB3D 53 2D 49 4E >
 322+ EB41 43          >
 322+ EB42             >                org     $-1                 // alter last byte of Name just above to set
 322+ EB41 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ EB42             >
 322+ EB42 2B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 322+ EB44             >Prev_Ptr        defl    Heap_Ptr
 322+ EB44             >
 322+ EB44             >mirror_Ptr      defl    $
 322+ EB44             >
 322+ EB44 7A 7B       >                dw      Dict_Ptr + 2        // xt
 322+ EB46             >Heap_Ptr        defl    $ - $E000           // save current HP
 322+ EB46             >
 322+ EB46             >Current_HP      defl  $ - $E000             // used to set HP once!
 322+ EB46             >
 322+ EB46             >//              ______________________________________________________________________
 322+ EB46             >//              Dictionary part
 322+ EB46             >
 322+ EB46             >                org     Dict_Ptr
 322+ 7B78             >
 322+ 7B78 44 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 322+ 7B7A             >
 322+ 7B7A             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 7B7A CD C5 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 7B7D             >
 322+ 7B7D             >
 322+ 7B7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 7B7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 7B7D             >
 322+ 7B7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 7B7D 04 69 6E 63                  db      4, "inc/", 0
 323+ 7B81 2F 00
 324+ 7B83                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 7B83             >
 324+ 7B83             >Dict_Ptr        defl    $
 324+ 7B83             >
 324+ 7B83             >//              ______________________________________________________________________
 324+ 7B83             >//              Heap part
 324+ 7B83             >
 324+ 7B83             >
 324+ 7B83             >                org     (Heap_Ptr & $1FFF) + $E000
 324+ EB46             >
 324+ EB46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ EB46             >Latest_Definition defl  Heap_Ptr
 324+ EB46             >
 324+ EB46             >                // dummy db directives used to calculate length of namec
 324+ EB46 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ EB4A 53 2D 4C 49 >
 324+ EB4E 42          >
 324+ EB4F             >len_NFA         defl    $ - temp_NFA
 324+ EB4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ EB46             >
 324+ EB46 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ EB47 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ EB4B 53 2D 4C 49 >
 324+ EB4F 42          >
 324+ EB50             >                org     $-1                 // alter last byte of Name just above to set
 324+ EB4F C2          >                db      {b $} | END_BIT     // msb as name end
 324+ EB50             >
 324+ EB50 38 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 324+ EB52             >Prev_Ptr        defl    Heap_Ptr
 324+ EB52             >
 324+ EB52             >mirror_Ptr      defl    $
 324+ EB52             >
 324+ EB52 85 7B       >                dw      Dict_Ptr + 2        // xt
 324+ EB54             >Heap_Ptr        defl    $ - $E000           // save current HP
 324+ EB54             >
 324+ EB54             >Current_HP      defl  $ - $E000             // used to set HP once!
 324+ EB54             >
 324+ EB54             >//              ______________________________________________________________________
 324+ EB54             >//              Dictionary part
 324+ EB54             >
 324+ EB54             >                org     Dict_Ptr
 324+ 7B83             >
 324+ 7B83 52 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 324+ 7B85             >
 324+ 7B85             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 7B85 CD C5 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 7B88             >
 324+ 7B88             >
 324+ 7B88             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 7B88             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 7B88             >
 324+ 7B88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 7B88 04 6C 69 62                  db      4, "lib/", 0
 325+ 7B8C 2F 00
 326+ 7B8E
 327+ 7B8E              // Concatenate path at a and filename and include it
 328+ 7B8E              // No error is issued if filename doesn't exist.
 329+ 7B8E                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 7B8E             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 7B8E             >
 329+ 7B8E             >Dict_Ptr        defl    $
 329+ 7B8E             >
 329+ 7B8E             >//              ______________________________________________________________________
 329+ 7B8E             >//              Heap part
 329+ 7B8E             >
 329+ 7B8E             >
 329+ 7B8E             >                org     (Heap_Ptr & $1FFF) + $E000
 329+ EB54             >
 329+ EB54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ EB54             >Latest_Definition defl  Heap_Ptr
 329+ EB54             >
 329+ EB54             >                // dummy db directives used to calculate length of namec
 329+ EB54 4E 45 45 44 >                db      "NEEDS/"
 329+ EB58 53 2F       >
 329+ EB5A             >len_NFA         defl    $ - temp_NFA
 329+ EB5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ EB54             >
 329+ EB54 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ EB55 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ EB59 53 2F       >
 329+ EB5B             >                org     $-1                 // alter last byte of Name just above to set
 329+ EB5A AF          >                db      {b $} | END_BIT     // msb as name end
 329+ EB5B             >
 329+ EB5B 46 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 329+ EB5D             >Prev_Ptr        defl    Heap_Ptr
 329+ EB5D             >
 329+ EB5D             >mirror_Ptr      defl    $
 329+ EB5D             >
 329+ EB5D 90 7B       >                dw      Dict_Ptr + 2        // xt
 329+ EB5F             >Heap_Ptr        defl    $ - $E000           // save current HP
 329+ EB5F             >
 329+ EB5F             >Current_HP      defl  $ - $E000             // used to set HP once!
 329+ EB5F             >
 329+ EB5F             >//              ______________________________________________________________________
 329+ EB5F             >//              Dictionary part
 329+ EB5F             >
 329+ EB5F             >                org     Dict_Ptr
 329+ 7B8E             >
 329+ 7B8E 5D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 329+ 7B90             >
 329+ 7B90             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 7B90 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 7B93             >
 329+ 7B93             >
 329+ 7B93             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 7B93             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 7B93             >
 329+ 7B93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 7B93 1E 6F 1B 69                  dw      COUNT, TUCK             // n a n
 331+ 7B97 4D 7B 24 69                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 7B9B 8D 67
 332+ 7B9D 4D 7B A5 68                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 7BA1 25 7B BE 68                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 7BA5 24 69
 334+ 7BA7 A3 63 23 00                  dw      LIT, 35
 335+ 7BAB 8D 67                        dw      CMOVE
 336+ 7BAD 4D 7B                        dw      NEEDS_FN
 337+ 7BAF B5 70 88 6A                  dw      PAD, ONE, F_OPEN
 337+ 7BB3 5A 67
 338+ 7BB5 77 68                        dw      ZEQUAL
 339+ 7BB7 F5 63                        dw      ZBRANCH
 340+ 7BB9 08 00                        dw      Needs_1 - $
 341+ 7BBB 3A 7A                        dw          F_INCLUDE
 342+ 7BBD E8 63                        dw      BRANCH
 343+ 7BBF 04 00                        dw      Needs_2 - $
 344+ 7BC1              Needs_1:
 345+ 7BC1              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 7BC1              //              dw          LIT, 43, MESSAGE
 347+ 7BC1 10 69                        dw          DROP
 348+ 7BC3              Needs_2:
 349+ 7BC3 52 68                        dw      EXIT                    // ;
 350+ 7BC5
 351+ 7BC5
 352+ 7BC5                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 7BC5             >
 352+ 7BC5             >Dict_Ptr        defl    $
 352+ 7BC5             >
 352+ 7BC5             >//              ______________________________________________________________________
 352+ 7BC5             >//              Heap part
 352+ 7BC5             >
 352+ 7BC5             >
 352+ 7BC5             >                org     (Heap_Ptr & $1FFF) + $E000
 352+ EB5F             >
 352+ EB5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ EB5F             >Latest_Definition defl  Heap_Ptr
 352+ EB5F             >
 352+ EB5F             >                // dummy db directives used to calculate length of namec
 352+ EB5F 4E 44 4F 4D >                db      "NDOM"
 352+ EB63             >len_NFA         defl    $ - temp_NFA
 352+ EB63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ EB5F             >
 352+ EB5F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ EB60 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ EB64             >                org     $-1                 // alter last byte of Name just above to set
 352+ EB63 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ EB64             >
 352+ EB64 54 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 352+ EB66             >Prev_Ptr        defl    Heap_Ptr
 352+ EB66             >
 352+ EB66             >mirror_Ptr      defl    $
 352+ EB66             >
 352+ EB66 C7 7B       >                dw      Dict_Ptr + 2        // xt
 352+ EB68             >Heap_Ptr        defl    $ - $E000           // save current HP
 352+ EB68             >
 352+ EB68             >Current_HP      defl  $ - $E000             // used to set HP once!
 352+ EB68             >
 352+ EB68             >//              ______________________________________________________________________
 352+ EB68             >//              Dictionary part
 352+ EB68             >
 352+ EB68             >                org     Dict_Ptr
 352+ 7BC5             >
 352+ 7BC5 66 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 352+ 7BC7             >
 352+ 7BC7             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 7BC7 CD C5 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 7BCA             >
 352+ 7BCA             >
 352+ 7BCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 7BCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 7BCA             >
 352+ 7BCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 7BCA              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 7BCA 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 7BCE 7C 5C 3C 3E
 354+ 7BD2 22
 355+ 7BD3 00                           db 0
 356+ 7BD4
 357+ 7BD4                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 357+ 7BD4             >
 357+ 7BD4             >Dict_Ptr        defl    $
 357+ 7BD4             >
 357+ 7BD4             >//              ______________________________________________________________________
 357+ 7BD4             >//              Heap part
 357+ 7BD4             >
 357+ 7BD4             >
 357+ 7BD4             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ EB68             >
 357+ EB68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ EB68             >Latest_Definition defl  Heap_Ptr
 357+ EB68             >
 357+ EB68             >                // dummy db directives used to calculate length of namec
 357+ EB68 4E 43 44 4D >                db      "NCDM"
 357+ EB6C             >len_NFA         defl    $ - temp_NFA
 357+ EB6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ EB68             >
 357+ EB68 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ EB69 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 357+ EB6D             >                org     $-1                 // alter last byte of Name just above to set
 357+ EB6C CD          >                db      {b $} | END_BIT     // msb as name end
 357+ EB6D             >
 357+ EB6D 5F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ EB6F             >Prev_Ptr        defl    Heap_Ptr
 357+ EB6F             >
 357+ EB6F             >mirror_Ptr      defl    $
 357+ EB6F             >
 357+ EB6F D6 7B       >                dw      Dict_Ptr + 2        // xt
 357+ EB71             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ EB71             >
 357+ EB71             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ EB71             >
 357+ EB71             >//              ______________________________________________________________________
 357+ EB71             >//              Dictionary part
 357+ EB71             >
 357+ EB71             >                org     Dict_Ptr
 357+ 7BD4             >
 357+ 7BD4 6F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 7BD6             >
 357+ 7BD6             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 7BD6 CD C5 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 357+ 7BD9             >
 357+ 7BD9             >
 357+ 7BD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 7BD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 7BD9             >
 357+ 7BD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 7BD9              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 359+ 7BD9 5F 5E 25 26                  db '_^%&$_{}~'
 359+ 7BDD 24 5F 7B 7D
 359+ 7BE1 7E
 360+ 7BE2 00                           db 0
 361+ 7BE3
 362+ 7BE3              // Replace illegal character in filename using the map here above
 363+ 7BE3              // at the moment we need only  "
 364+ 7BE3                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 364+ 7BE3             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 364+ 7BE3             >
 364+ 7BE3             >Dict_Ptr        defl    $
 364+ 7BE3             >
 364+ 7BE3             >//              ______________________________________________________________________
 364+ 7BE3             >//              Heap part
 364+ 7BE3             >
 364+ 7BE3             >
 364+ 7BE3             >                org     (Heap_Ptr & $1FFF) + $E000
 364+ EB71             >
 364+ EB71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ EB71             >Latest_Definition defl  Heap_Ptr
 364+ EB71             >
 364+ EB71             >                // dummy db directives used to calculate length of namec
 364+ EB71 4D 41 50 2D >                db      "MAP-FN"
 364+ EB75 46 4E       >
 364+ EB77             >len_NFA         defl    $ - temp_NFA
 364+ EB77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ EB71             >
 364+ EB71 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ EB72 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 364+ EB76 46 4E       >
 364+ EB78             >                org     $-1                 // alter last byte of Name just above to set
 364+ EB77 CE          >                db      {b $} | END_BIT     // msb as name end
 364+ EB78             >
 364+ EB78 68 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 364+ EB7A             >Prev_Ptr        defl    Heap_Ptr
 364+ EB7A             >
 364+ EB7A             >mirror_Ptr      defl    $
 364+ EB7A             >
 364+ EB7A E5 7B       >                dw      Dict_Ptr + 2        // xt
 364+ EB7C             >Heap_Ptr        defl    $ - $E000           // save current HP
 364+ EB7C             >
 364+ EB7C             >Current_HP      defl  $ - $E000             // used to set HP once!
 364+ EB7C             >
 364+ EB7C             >//              ______________________________________________________________________
 364+ EB7C             >//              Dictionary part
 364+ EB7C             >
 364+ EB7C             >                org     Dict_Ptr
 364+ 7BE3             >
 364+ 7BE3 7A 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 364+ 7BE5             >
 364+ 7BE5             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 7BE5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 7BE8             >
 364+ 7BE8             >
 364+ 7BE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 7BE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 7BE8             >
 364+ 7BE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 7BE8 1E 6F 2B 6F                  dw      COUNT, BOUNDS
 366+ 7BEC 34 64                        dw      C_DO
 367+ 7BEE              Needs_3:
 368+ 7BEE D6 7B C7 7B                  dw          NCDM, NDOM, LIT, 10
 368+ 7BF2 A3 63 0A 00
 369+ 7BF6 3A 64 9E 69                  dw          I, CFETCH
 370+ 7BFA 5B 65                        dw          C_MAP
 371+ 7BFC 3A 64 A7 69                  dw          I, CSTORE
 372+ 7C00              Needs_4:
 373+ 7C00 E0 63                        dw      C_LOOP
 374+ 7C02 EC FF                        dw      Needs_3 - $
 375+ 7C04 52 68                        dw      EXIT
 376+ 7C06
 377+ 7C06
 378+ 7C06              // include  "path/cccc.f" if cccc is not defined
 379+ 7C06              // filename cccc.f is temporary stored at NEEDS-W
 380+ 7C06                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 380+ 7C06             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 380+ 7C06             >
 380+ 7C06             >Dict_Ptr        defl    $
 380+ 7C06             >
 380+ 7C06             >//              ______________________________________________________________________
 380+ 7C06             >//              Heap part
 380+ 7C06             >
 380+ 7C06             >
 380+ 7C06             >                org     (Heap_Ptr & $1FFF) + $E000
 380+ EB7C             >
 380+ EB7C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ EB7C             >Latest_Definition defl  Heap_Ptr
 380+ EB7C             >
 380+ EB7C             >                // dummy db directives used to calculate length of namec
 380+ EB7C 4E 45 45 44 >                db      "NEEDS-F"
 380+ EB80 53 2D 46    >
 380+ EB83             >len_NFA         defl    $ - temp_NFA
 380+ EB83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ EB7C             >
 380+ EB7C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ EB7D 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 380+ EB81 53 2D 46    >
 380+ EB84             >                org     $-1                 // alter last byte of Name just above to set
 380+ EB83 C6          >                db      {b $} | END_BIT     // msb as name end
 380+ EB84             >
 380+ EB84 71 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 380+ EB86             >Prev_Ptr        defl    Heap_Ptr
 380+ EB86             >
 380+ EB86             >mirror_Ptr      defl    $
 380+ EB86             >
 380+ EB86 08 7C       >                dw      Dict_Ptr + 2        // xt
 380+ EB88             >Heap_Ptr        defl    $ - $E000           // save current HP
 380+ EB88             >
 380+ EB88             >Current_HP      defl  $ - $E000             // used to set HP once!
 380+ EB88             >
 380+ EB88             >//              ______________________________________________________________________
 380+ EB88             >//              Dictionary part
 380+ EB88             >
 380+ EB88             >                org     Dict_Ptr
 380+ 7C06             >
 380+ 7C06 86 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 380+ 7C08             >
 380+ 7C08             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 7C08 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 7C0B             >
 380+ 7C0B             >
 380+ 7C0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 7C0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 7C0B             >
 380+ 7C0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 7C0B BE 72                        dw      LFIND
 382+ 7C0D F5 63                        dw      ZBRANCH
 383+ 7C0F 0A 00                        dw      Needs_5 - $
 384+ 7C11
 385+ 7C11 10 69 54 69                  dw          DROP, TWO_DROP
 386+ 7C15 E8 63                        dw      BRANCH
 387+ 7C17 2C 00                        dw      Needs_6 - $
 388+ 7C19              Needs_5:
 389+ 7C19 25 7B                        dw          NEEDS_W
 390+ 7C1B A3 63 23 00                  dw          LIT, 35
 391+ 7C1F 8C 70                        dw          ERASE                   // a
 392+ 7C21 A6 6B 9E 69                  dw          HERE, CFETCH, ONE_PLUS  // a n
 392+ 7C25 BE 68
 393+ 7C27 A6 6B 07 69                  dw          HERE, OVER              // a n here n
 394+ 7C2B 25 7B 24 69                  dw          NEEDS_W, SWAP, CMOVE    // a n
 394+ 7C2F 8D 67
 395+ 7C31 25 7B E5 7B                  dw          NEEDS_W, NEEDS_CHECK
 396+ 7C35 25 7B A5 68                  dw          NEEDS_W, PLUS           // a a1+1
 397+ 7C39 A3 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 398+ 7C3D 24 69 93 69                  dw          SWAP, STORE             // a
 399+ 7C41 90 7B                        dw          NEEDS_SLASH
 400+ 7C43              Needs_6:
 401+ 7C43 52 68                        dw      EXIT
 402+ 7C45
 403+ 7C45
 404+ 7C45              // check for cccc exists in vocabulary
 405+ 7C45              // if it doesn't then  INCLUDE  inc/cccc.F
 406+ 7C45              // search in inc subdirectory
 407+ 7C45                              Colon_Def NEEDS, "NEEDS", is_normal
 407+ 7C45             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 407+ 7C45             >
 407+ 7C45             >Dict_Ptr        defl    $
 407+ 7C45             >
 407+ 7C45             >//              ______________________________________________________________________
 407+ 7C45             >//              Heap part
 407+ 7C45             >
 407+ 7C45             >
 407+ 7C45             >                org     (Heap_Ptr & $1FFF) + $E000
 407+ EB88             >
 407+ EB88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ EB88             >Latest_Definition defl  Heap_Ptr
 407+ EB88             >
 407+ EB88             >                // dummy db directives used to calculate length of namec
 407+ EB88 4E 45 45 44 >                db      "NEEDS"
 407+ EB8C 53          >
 407+ EB8D             >len_NFA         defl    $ - temp_NFA
 407+ EB8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ EB88             >
 407+ EB88 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ EB89 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 407+ EB8D 53          >
 407+ EB8E             >                org     $-1                 // alter last byte of Name just above to set
 407+ EB8D D3          >                db      {b $} | END_BIT     // msb as name end
 407+ EB8E             >
 407+ EB8E 7C 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 407+ EB90             >Prev_Ptr        defl    Heap_Ptr
 407+ EB90             >
 407+ EB90             >mirror_Ptr      defl    $
 407+ EB90             >
 407+ EB90 47 7C       >                dw      Dict_Ptr + 2        // xt
 407+ EB92             >Heap_Ptr        defl    $ - $E000           // save current HP
 407+ EB92             >
 407+ EB92             >Current_HP      defl  $ - $E000             // used to set HP once!
 407+ EB92             >
 407+ EB92             >//              ______________________________________________________________________
 407+ EB92             >//              Dictionary part
 407+ EB92             >
 407+ EB92             >                org     Dict_Ptr
 407+ 7C45             >
 407+ 7C45 90 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 407+ 7C47             >
 407+ 7C47             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 7C47 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 7C4A             >
 407+ 7C4A             >
 407+ 7C4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 7C4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 7C4A             >
 407+ 7C4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 7C4A 28 6B 89 69                  dw      TO_IN, FETCH
 409+ 7C4E 2B 69                        dw      DUP
 410+ 7C50 7A 7B 08 7C                  dw      NEEDS_INC, NEEDS_PATH
 411+ 7C54 28 6B 93 69                  dw      TO_IN, STORE
 412+ 7C58 85 7B 08 7C                  dw      NEEDS_LIB, NEEDS_PATH
 413+ 7C5C 28 6B 93 69                  dw      TO_IN, STORE
 414+ 7C60 BE 72                        dw      LFIND
 415+ 7C62 F5 63                        dw      ZBRANCH
 416+ 7C64 08 00                        dw      Needs_10 - $
 417+ 7C66 54 69                        dw          TWO_DROP
 418+ 7C68 E8 63                        dw      BRANCH
 419+ 7C6A 10 00                        dw      Needs_11 - $
 420+ 7C6C              Needs_10:
 421+ 7C6C 25 7B 1E 6F                  dw      NEEDS_W, COUNT, TYPE, SPACE
 421+ 7C70 72 6F 77 6C
 422+ 7C74 A3 63 2B 00                  dw      LIT, 43, MESSAGE
 422+ 7C78 33 77
 423+ 7C7A              Needs_11:
 424+ 7C7A 52 68                        dw      EXIT
 425+ 7C7C
 426+ 7C7C
 427+ 7C7C              //  ______________________________________________________________________
 428+ 7C7C              //
 429+ 7C7C              // load         n --
 430+ 7C7C                              Colon_Def LOAD, "LOAD", is_normal
 430+ 7C7C             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 430+ 7C7C             >
 430+ 7C7C             >Dict_Ptr        defl    $
 430+ 7C7C             >
 430+ 7C7C             >//              ______________________________________________________________________
 430+ 7C7C             >//              Heap part
 430+ 7C7C             >
 430+ 7C7C             >
 430+ 7C7C             >                org     (Heap_Ptr & $1FFF) + $E000
 430+ EB92             >
 430+ EB92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 430+ EB92             >Latest_Definition defl  Heap_Ptr
 430+ EB92             >
 430+ EB92             >                // dummy db directives used to calculate length of namec
 430+ EB92 4C 4F 41 44 >                db      "LOAD"
 430+ EB96             >len_NFA         defl    $ - temp_NFA
 430+ EB96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 430+ EB92             >
 430+ EB92 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 430+ EB93 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 430+ EB97             >                org     $-1                 // alter last byte of Name just above to set
 430+ EB96 C4          >                db      {b $} | END_BIT     // msb as name end
 430+ EB97             >
 430+ EB97 88 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 430+ EB99             >Prev_Ptr        defl    Heap_Ptr
 430+ EB99             >
 430+ EB99             >mirror_Ptr      defl    $
 430+ EB99             >
 430+ EB99 7E 7C       >                dw      Dict_Ptr + 2        // xt
 430+ EB9B             >Heap_Ptr        defl    $ - $E000           // save current HP
 430+ EB9B             >
 430+ EB9B             >Current_HP      defl  $ - $E000             // used to set HP once!
 430+ EB9B             >
 430+ EB9B             >//              ______________________________________________________________________
 430+ EB9B             >//              Dictionary part
 430+ EB9B             >
 430+ EB9B             >                org     Dict_Ptr
 430+ 7C7C             >
 430+ 7C7C 99 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 430+ 7C7E             >
 430+ 7C7E             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 430+ 7C7E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 430+ 7C81             >
 430+ 7C81             >
 430+ 7C81             >                endif           ; ok        // for other definitions it "points" the correct handler
 430+ 7C81             >                // Use of "; ok" to suppress "warning[fwdref]"
 430+ 7C81             >
 430+ 7C81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 431+ 7C81 22 6B 89 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 431+ 7C85 5C 68
 432+ 7C87 28 6B 89 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 432+ 7C8B 5C 68
 433+ 7C8D
 434+ 7C8D 81 6A 28 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 434+ 7C91 93 69
 435+ 7C93 B9 6A BF 76                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 435+ 7C97 22 6B 93 69
 436+ 7C9B 81 74                        dw      INTERPRET               // interpret
 437+ 7C9D
 438+ 7C9D 67 68 28 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 438+ 7CA1 93 69
 439+ 7CA3 67 68 22 6B                  dw      R_TO, BLK, STORE        // r> blk !
 439+ 7CA7 93 69
 440+ 7CA9 52 68                        dw      EXIT                    // ;
 441+ 7CAB
 442+ 7CAB              //  ______________________________________________________________________
 443+ 7CAB              //
 444+ 7CAB              // -->          --
 445+ 7CAB                              Colon_Def LOAD_NEXT, "-->", is_immediate
 445+ 7CAB             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 445+ 7CAB             >
 445+ 7CAB             >Dict_Ptr        defl    $
 445+ 7CAB             >
 445+ 7CAB             >//              ______________________________________________________________________
 445+ 7CAB             >//              Heap part
 445+ 7CAB             >
 445+ 7CAB             >
 445+ 7CAB             >                org     (Heap_Ptr & $1FFF) + $E000
 445+ EB9B             >
 445+ EB9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ EB9B             >Latest_Definition defl  Heap_Ptr
 445+ EB9B             >
 445+ EB9B             >                // dummy db directives used to calculate length of namec
 445+ EB9B 2D 2D 3E    >                db      "-->"
 445+ EB9E             >len_NFA         defl    $ - temp_NFA
 445+ EB9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ EB9B             >
 445+ EB9B C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ EB9C 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 445+ EB9F             >                org     $-1                 // alter last byte of Name just above to set
 445+ EB9E BE          >                db      {b $} | END_BIT     // msb as name end
 445+ EB9F             >
 445+ EB9F 92 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 445+ EBA1             >Prev_Ptr        defl    Heap_Ptr
 445+ EBA1             >
 445+ EBA1             >mirror_Ptr      defl    $
 445+ EBA1             >
 445+ EBA1 AD 7C       >                dw      Dict_Ptr + 2        // xt
 445+ EBA3             >Heap_Ptr        defl    $ - $E000           // save current HP
 445+ EBA3             >
 445+ EBA3             >Current_HP      defl  $ - $E000             // used to set HP once!
 445+ EBA3             >
 445+ EBA3             >//              ______________________________________________________________________
 445+ EBA3             >//              Dictionary part
 445+ EBA3             >
 445+ EBA3             >                org     Dict_Ptr
 445+ 7CAB             >
 445+ 7CAB A1 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 445+ 7CAD             >
 445+ 7CAD             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 7CAD CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 7CB0             >
 445+ 7CB0             >
 445+ 7CB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 7CB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 7CB0             >
 445+ 7CB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 7CB0 3F 6E                        dw      QLOADING                // ?loading
 447+ 7CB2 81 6A 28 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 447+ 7CB6 93 69
 448+ 7CB8 B9 6A                        dw      BSCR                    // b/scr
 449+ 7CBA 22 6B 89 69                  dw      BLK, FETCH              // blk @
 450+ 7CBE 07 69                        dw      OVER                    // over
 451+ 7CC0 E4 76                        dw      MOD                     // mod
 452+ 7CC2 E5 6B                        dw      SUBTRACT                // -
 453+ 7CC4 22 6B 71 69                  dw      BLK, PLUSSTORE          // +!
 454+ 7CC8 52 68                        dw      EXIT                    // ;
 455+ 7CCA
 456+ 7CCA              //  ______________________________________________________________________
 457+ 7CCA              //
 458+ 7CCA              // '            -- xt
 459+ 7CCA                              Colon_Def TICK, "'", is_normal
 459+ 7CCA             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 459+ 7CCA             >
 459+ 7CCA             >Dict_Ptr        defl    $
 459+ 7CCA             >
 459+ 7CCA             >//              ______________________________________________________________________
 459+ 7CCA             >//              Heap part
 459+ 7CCA             >
 459+ 7CCA             >
 459+ 7CCA             >                org     (Heap_Ptr & $1FFF) + $E000
 459+ EBA3             >
 459+ EBA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 459+ EBA3             >Latest_Definition defl  Heap_Ptr
 459+ EBA3             >
 459+ EBA3             >                // dummy db directives used to calculate length of namec
 459+ EBA3 27          >                db      "'"
 459+ EBA4             >len_NFA         defl    $ - temp_NFA
 459+ EBA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 459+ EBA3             >
 459+ EBA3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 459+ EBA4 27          >                db      "'"               // name string in 7-bit ascii, but
 459+ EBA5             >                org     $-1                 // alter last byte of Name just above to set
 459+ EBA4 A7          >                db      {b $} | END_BIT     // msb as name end
 459+ EBA5             >
 459+ EBA5 9B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 459+ EBA7             >Prev_Ptr        defl    Heap_Ptr
 459+ EBA7             >
 459+ EBA7             >mirror_Ptr      defl    $
 459+ EBA7             >
 459+ EBA7 CC 7C       >                dw      Dict_Ptr + 2        // xt
 459+ EBA9             >Heap_Ptr        defl    $ - $E000           // save current HP
 459+ EBA9             >
 459+ EBA9             >Current_HP      defl  $ - $E000             // used to set HP once!
 459+ EBA9             >
 459+ EBA9             >//              ______________________________________________________________________
 459+ EBA9             >//              Dictionary part
 459+ EBA9             >
 459+ EBA9             >                org     Dict_Ptr
 459+ 7CCA             >
 459+ 7CCA A7 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 459+ 7CCC             >
 459+ 7CCC             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 459+ 7CCC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 459+ 7CCF             >
 459+ 7CCF             >
 459+ 7CCF             >                endif           ; ok        // for other definitions it "points" the correct handler
 459+ 7CCF             >                // Use of "; ok" to suppress "warning[fwdref]"
 459+ 7CCF             >
 459+ 7CCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 460+ 7CCF BE 72                        dw      LFIND                   // -find
 461+ 7CD1 77 68                        dw      ZEQUAL                  // 0=
 462+ 7CD3 81 6A E2 6D                  dw      ZERO, QERROR            // 0 ?error
 463+ 7CD7 10 69                        dw      DROP                    // drop
 464+ 7CD9 52 68                        dw      EXIT                    // ;
 465+ 7CDB
 466+ 7CDB              //  ______________________________________________________________________
 467+ 7CDB              //
 468+ 7CDB              // forget       -- cccc
 469+ 7CDB                              Colon_Def FORGET, "FORGET", is_normal
 469+ 7CDB             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 469+ 7CDB             >
 469+ 7CDB             >Dict_Ptr        defl    $
 469+ 7CDB             >
 469+ 7CDB             >//              ______________________________________________________________________
 469+ 7CDB             >//              Heap part
 469+ 7CDB             >
 469+ 7CDB             >
 469+ 7CDB             >                org     (Heap_Ptr & $1FFF) + $E000
 469+ EBA9             >
 469+ EBA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 469+ EBA9             >Latest_Definition defl  Heap_Ptr
 469+ EBA9             >
 469+ EBA9             >                // dummy db directives used to calculate length of namec
 469+ EBA9 46 4F 52 47 >                db      "FORGET"
 469+ EBAD 45 54       >
 469+ EBAF             >len_NFA         defl    $ - temp_NFA
 469+ EBAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 469+ EBA9             >
 469+ EBA9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 469+ EBAA 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 469+ EBAE 45 54       >
 469+ EBB0             >                org     $-1                 // alter last byte of Name just above to set
 469+ EBAF D4          >                db      {b $} | END_BIT     // msb as name end
 469+ EBB0             >
 469+ EBB0 A3 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 469+ EBB2             >Prev_Ptr        defl    Heap_Ptr
 469+ EBB2             >
 469+ EBB2             >mirror_Ptr      defl    $
 469+ EBB2             >
 469+ EBB2 DD 7C       >                dw      Dict_Ptr + 2        // xt
 469+ EBB4             >Heap_Ptr        defl    $ - $E000           // save current HP
 469+ EBB4             >
 469+ EBB4             >Current_HP      defl  $ - $E000             // used to set HP once!
 469+ EBB4             >
 469+ EBB4             >//              ______________________________________________________________________
 469+ EBB4             >//              Dictionary part
 469+ EBB4             >
 469+ EBB4             >                org     Dict_Ptr
 469+ 7CDB             >
 469+ 7CDB B2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 469+ 7CDD             >
 469+ 7CDD             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 469+ 7CDD CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 469+ 7CE0             >
 469+ 7CE0             >
 469+ 7CE0             >                endif           ; ok        // for other definitions it "points" the correct handler
 469+ 7CE0             >                // Use of "; ok" to suppress "warning[fwdref]"
 469+ 7CE0             >
 469+ 7CE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 470+ 7CE0 46 6B 89 69                  dw      CURRENT, FETCH          // current @
 471+ 7CE4 40 6B 89 69                  dw      CONTEXT, FETCH          // context @
 472+ 7CE8 E5 6B A3 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 472+ 7CEC 17 00 E2 6D
 473+ 7CF0 CC 7C 61 6D                  dw      TICK, TO_BODY           // ' >body
 474+ 7CF4 2B 69 F8 6A                  dw      DUP, FENCE, FETCH       // dup fence @
 474+ 7CF8 89 69
 475+ 7CFA FC 6B A3 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 475+ 7CFE 15 00 E2 6D
 476+ 7D02 2B 69 96 6D                  dw      DUP, NFA                // dup nfa
 477+ 7D06
 478+ 7D06                          //  dw      DUP
 479+ 7D06                          //  dw      LIT, $E000, LESS
 480+ 7D06                          //  dw      MMU7_FETCH, ONE, EQUALS
 481+ 7D06                          //  dw      OR_OP, NOT_OP
 482+ 7D06                          //  dw      ZBRANCH
 483+ 7D06                          //  dw      Forget_then - $
 484+ 7D06
 485+ 7D06 9F 6C C2 6C                  dw      MMU7_FETCH, FROM_FAR
 486+ 7D0A 16 6B 93 69                  dw      HP, STORE
 487+ 7D0E 2B 69 8B 6D                  dw      DUP, CFA, CELL_MINUS
 487+ 7D12 D9 68
 488+ 7D14              // Forget_then:
 489+ 7D14 FE 6A 93 69                  dw      DP, STORE               // dp !
 490+ 7D18 A1 6D 89 69                  dw      LFA, FETCH              // lfa @
 491+ 7D1C 40 6B 89 69                  dw      CONTEXT, FETCH, STORE   // context @ !
 491+ 7D20 93 69
 492+ 7D22 52 68                        dw      EXIT                    // ;
 493+ 7D24
 494+ 7D24              //  ______________________________________________________________________
 495+ 7D24              //
 496+ 7D24              // marker       -- cccc
 497+ 7D24                              Colon_Def MARKER, "MARKER", is_immediate
 497+ 7D24             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 497+ 7D24             >
 497+ 7D24             >Dict_Ptr        defl    $
 497+ 7D24             >
 497+ 7D24             >//              ______________________________________________________________________
 497+ 7D24             >//              Heap part
 497+ 7D24             >
 497+ 7D24             >
 497+ 7D24             >                org     (Heap_Ptr & $1FFF) + $E000
 497+ EBB4             >
 497+ EBB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 497+ EBB4             >Latest_Definition defl  Heap_Ptr
 497+ EBB4             >
 497+ EBB4             >                // dummy db directives used to calculate length of namec
 497+ EBB4 4D 41 52 4B >                db      "MARKER"
 497+ EBB8 45 52       >
 497+ EBBA             >len_NFA         defl    $ - temp_NFA
 497+ EBBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 497+ EBB4             >
 497+ EBB4 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 497+ EBB5 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 497+ EBB9 45 52       >
 497+ EBBB             >                org     $-1                 // alter last byte of Name just above to set
 497+ EBBA D2          >                db      {b $} | END_BIT     // msb as name end
 497+ EBBB             >
 497+ EBBB A9 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 497+ EBBD             >Prev_Ptr        defl    Heap_Ptr
 497+ EBBD             >
 497+ EBBD             >mirror_Ptr      defl    $
 497+ EBBD             >
 497+ EBBD 26 7D       >                dw      Dict_Ptr + 2        // xt
 497+ EBBF             >Heap_Ptr        defl    $ - $E000           // save current HP
 497+ EBBF             >
 497+ EBBF             >Current_HP      defl  $ - $E000             // used to set HP once!
 497+ EBBF             >
 497+ EBBF             >//              ______________________________________________________________________
 497+ EBBF             >//              Dictionary part
 497+ EBBF             >
 497+ EBBF             >                org     Dict_Ptr
 497+ 7D24             >
 497+ 7D24 BD 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 497+ 7D26             >
 497+ 7D26             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 497+ 7D26 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 497+ 7D29             >
 497+ 7D29             >
 497+ 7D29             >                endif           ; ok        // for other definitions it "points" the correct handler
 497+ 7D29             >                // Use of "; ok" to suppress "warning[fwdref]"
 497+ 7D29             >
 497+ 7D29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 498+ 7D29 F6 6E                        dw      CBUILDS
 499+ 7D2B 04 6B 89 69                  dw      VOC_LINK, FETCH, COMMA
 499+ 7D2F BC 6B
 500+ 7D31 46 6B 89 69                  dw      CURRENT, FETCH, COMMA
 500+ 7D35 BC 6B
 501+ 7D37 40 6B 89 69                  dw      CONTEXT, FETCH, COMMA
 501+ 7D3B BC 6B
 502+ 7D3D 46 6B 89 69                  dw      CURRENT, FETCH, FETCH,  COMMA
 502+ 7D41 89 69 BC 6B
 503+ 7D45 52 6D B0 6D                  dw      LATEST, PFA, LFA, FETCH, COMMA
 503+ 7D49 A1 6D 89 69
 503+ 7D4D BC 6B
 504+ 7D4F 01 6F                        dw      DOES_TO
 505+ 7D51 2B 69 89 69                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 505+ 7D55 04 6B 93 69
 505+ 7D59 D4 68
 506+ 7D5B 2B 69 89 69                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 506+ 7D5F 46 6B 93 69
 506+ 7D63 D4 68
 507+ 7D65 2B 69 89 69                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 507+ 7D69 40 6B 93 69
 507+ 7D6D D4 68
 508+ 7D6F 2B 69 89 69                  dw      DUP, FETCH
 509+ 7D73                          //  dw      DUP, QHEAPP
 510+ 7D73                          //  dw      ZBRANCH
 511+ 7D73                          //  dw      Marker_then - $
 512+ 7D73 2B 69 16 6B                  dw          DUP, HP, STORE
 512+ 7D77 93 69
 513+ 7D79 B0 6D 8B 6D                  dw          PFA, CFA, CELL_MINUS
 513+ 7D7D D9 68
 514+ 7D7F              // Marker_then:
 515+ 7D7F FE 6A 93 69                  dw      DP, STORE, CELL_PLUS
 515+ 7D83 D4 68
 516+ 7D85 89 69 46 6B                  dw      FETCH, CURRENT, FETCH, STORE
 516+ 7D89 89 69 93 69
 517+ 7D8D 52 68                        dw      EXIT
 518+ 7D8F
 519+ 7D8F              //  ______________________________________________________________________
 520+ 7D8F              //
 521+ 7D8F              // spaces       n --
 522+ 7D8F                              Colon_Def SPACES, "SPACES", is_normal
 522+ 7D8F             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 522+ 7D8F             >
 522+ 7D8F             >Dict_Ptr        defl    $
 522+ 7D8F             >
 522+ 7D8F             >//              ______________________________________________________________________
 522+ 7D8F             >//              Heap part
 522+ 7D8F             >
 522+ 7D8F             >
 522+ 7D8F             >                org     (Heap_Ptr & $1FFF) + $E000
 522+ EBBF             >
 522+ EBBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ EBBF             >Latest_Definition defl  Heap_Ptr
 522+ EBBF             >
 522+ EBBF             >                // dummy db directives used to calculate length of namec
 522+ EBBF 53 50 41 43 >                db      "SPACES"
 522+ EBC3 45 53       >
 522+ EBC5             >len_NFA         defl    $ - temp_NFA
 522+ EBC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ EBBF             >
 522+ EBBF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ EBC0 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 522+ EBC4 45 53       >
 522+ EBC6             >                org     $-1                 // alter last byte of Name just above to set
 522+ EBC5 D3          >                db      {b $} | END_BIT     // msb as name end
 522+ EBC6             >
 522+ EBC6 B4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 522+ EBC8             >Prev_Ptr        defl    Heap_Ptr
 522+ EBC8             >
 522+ EBC8             >mirror_Ptr      defl    $
 522+ EBC8             >
 522+ EBC8 91 7D       >                dw      Dict_Ptr + 2        // xt
 522+ EBCA             >Heap_Ptr        defl    $ - $E000           // save current HP
 522+ EBCA             >
 522+ EBCA             >Current_HP      defl  $ - $E000             // used to set HP once!
 522+ EBCA             >
 522+ EBCA             >//              ______________________________________________________________________
 522+ EBCA             >//              Dictionary part
 522+ EBCA             >
 522+ EBCA             >                org     Dict_Ptr
 522+ 7D8F             >
 522+ 7D8F C8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 522+ 7D91             >
 522+ 7D91             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 7D91 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 7D94             >
 522+ 7D94             >
 522+ 7D94             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 7D94             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 7D94             >
 522+ 7D94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 7D94 81 6A 3D 6C                  dw      ZERO, MAX
 524+ 7D98 81 6A 0C 64                  dw      ZERO, C_Q_DO
 525+ 7D9C 08 00                        dw      Spaces_Leave - $
 526+ 7D9E              Spaces_Loop:
 527+ 7D9E 77 6C                        dw          SPACE
 528+ 7DA0 E0 63                        dw      C_LOOP
 529+ 7DA2 FC FF                        dw      Spaces_Loop - $
 530+ 7DA4              Spaces_Leave:
 531+ 7DA4 52 68                        dw      EXIT                    // ;
 532+ 7DA6
 533+ 7DA6              //  ______________________________________________________________________
 534+ 7DA6              //
 535+ 7DA6              // <#           --
 536+ 7DA6                              Colon_Def BEGIN_DASH, "<#", is_normal
 536+ 7DA6             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 536+ 7DA6             >
 536+ 7DA6             >Dict_Ptr        defl    $
 536+ 7DA6             >
 536+ 7DA6             >//              ______________________________________________________________________
 536+ 7DA6             >//              Heap part
 536+ 7DA6             >
 536+ 7DA6             >
 536+ 7DA6             >                org     (Heap_Ptr & $1FFF) + $E000
 536+ EBCA             >
 536+ EBCA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ EBCA             >Latest_Definition defl  Heap_Ptr
 536+ EBCA             >
 536+ EBCA             >                // dummy db directives used to calculate length of namec
 536+ EBCA 3C 23       >                db      "<#"
 536+ EBCC             >len_NFA         defl    $ - temp_NFA
 536+ EBCC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ EBCA             >
 536+ EBCA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ EBCB 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 536+ EBCD             >                org     $-1                 // alter last byte of Name just above to set
 536+ EBCC A3          >                db      {b $} | END_BIT     // msb as name end
 536+ EBCD             >
 536+ EBCD BF 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 536+ EBCF             >Prev_Ptr        defl    Heap_Ptr
 536+ EBCF             >
 536+ EBCF             >mirror_Ptr      defl    $
 536+ EBCF             >
 536+ EBCF A8 7D       >                dw      Dict_Ptr + 2        // xt
 536+ EBD1             >Heap_Ptr        defl    $ - $E000           // save current HP
 536+ EBD1             >
 536+ EBD1             >Current_HP      defl  $ - $E000             // used to set HP once!
 536+ EBD1             >
 536+ EBD1             >//              ______________________________________________________________________
 536+ EBD1             >//              Dictionary part
 536+ EBD1             >
 536+ EBD1             >                org     Dict_Ptr
 536+ 7DA6             >
 536+ 7DA6 CF 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 536+ 7DA8             >
 536+ 7DA8             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 7DA8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 536+ 7DAB             >
 536+ 7DAB             >
 536+ 7DAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 7DAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 7DAB             >
 536+ 7DAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 7DAB B5 70 70 6B                  dw      PAD, HLD, STORE
 537+ 7DAF 93 69
 538+ 7DB1 52 68                        dw      EXIT
 539+ 7DB3
 540+ 7DB3              //  ______________________________________________________________________
 541+ 7DB3              //
 542+ 7DB3              // #>           --
 543+ 7DB3                              Colon_Def DASH_END, "#>", is_normal
 543+ 7DB3             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 543+ 7DB3             >
 543+ 7DB3             >Dict_Ptr        defl    $
 543+ 7DB3             >
 543+ 7DB3             >//              ______________________________________________________________________
 543+ 7DB3             >//              Heap part
 543+ 7DB3             >
 543+ 7DB3             >
 543+ 7DB3             >                org     (Heap_Ptr & $1FFF) + $E000
 543+ EBD1             >
 543+ EBD1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 543+ EBD1             >Latest_Definition defl  Heap_Ptr
 543+ EBD1             >
 543+ EBD1             >                // dummy db directives used to calculate length of namec
 543+ EBD1 23 3E       >                db      "#>"
 543+ EBD3             >len_NFA         defl    $ - temp_NFA
 543+ EBD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 543+ EBD1             >
 543+ EBD1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 543+ EBD2 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 543+ EBD4             >                org     $-1                 // alter last byte of Name just above to set
 543+ EBD3 BE          >                db      {b $} | END_BIT     // msb as name end
 543+ EBD4             >
 543+ EBD4 CA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 543+ EBD6             >Prev_Ptr        defl    Heap_Ptr
 543+ EBD6             >
 543+ EBD6             >mirror_Ptr      defl    $
 543+ EBD6             >
 543+ EBD6 B5 7D       >                dw      Dict_Ptr + 2        // xt
 543+ EBD8             >Heap_Ptr        defl    $ - $E000           // save current HP
 543+ EBD8             >
 543+ EBD8             >Current_HP      defl  $ - $E000             // used to set HP once!
 543+ EBD8             >
 543+ EBD8             >//              ______________________________________________________________________
 543+ EBD8             >//              Dictionary part
 543+ EBD8             >
 543+ EBD8             >                org     Dict_Ptr
 543+ 7DB3             >
 543+ 7DB3 D6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 543+ 7DB5             >
 543+ 7DB5             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 543+ 7DB5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 543+ 7DB8             >
 543+ 7DB8             >
 543+ 7DB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 543+ 7DB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 543+ 7DB8             >
 543+ 7DB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 544+ 7DB8 54 69                        dw      TWO_DROP
 545+ 7DBA 70 6B 89 69                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 545+ 7DBE B5 70 07 69
 545+ 7DC2 E5 6B
 546+ 7DC4 52 68                        dw      EXIT
 547+ 7DC6
 548+ 7DC6              //  ______________________________________________________________________
 549+ 7DC6              //
 550+ 7DC6              // sign         n d -- d
 551+ 7DC6                              Colon_Def SIGN, "SIGN", is_normal
 551+ 7DC6             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 551+ 7DC6             >
 551+ 7DC6             >Dict_Ptr        defl    $
 551+ 7DC6             >
 551+ 7DC6             >//              ______________________________________________________________________
 551+ 7DC6             >//              Heap part
 551+ 7DC6             >
 551+ 7DC6             >
 551+ 7DC6             >                org     (Heap_Ptr & $1FFF) + $E000
 551+ EBD8             >
 551+ EBD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 551+ EBD8             >Latest_Definition defl  Heap_Ptr
 551+ EBD8             >
 551+ EBD8             >                // dummy db directives used to calculate length of namec
 551+ EBD8 53 49 47 4E >                db      "SIGN"
 551+ EBDC             >len_NFA         defl    $ - temp_NFA
 551+ EBDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 551+ EBD8             >
 551+ EBD8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 551+ EBD9 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 551+ EBDD             >                org     $-1                 // alter last byte of Name just above to set
 551+ EBDC CE          >                db      {b $} | END_BIT     // msb as name end
 551+ EBDD             >
 551+ EBDD D1 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 551+ EBDF             >Prev_Ptr        defl    Heap_Ptr
 551+ EBDF             >
 551+ EBDF             >mirror_Ptr      defl    $
 551+ EBDF             >
 551+ EBDF C8 7D       >                dw      Dict_Ptr + 2        // xt
 551+ EBE1             >Heap_Ptr        defl    $ - $E000           // save current HP
 551+ EBE1             >
 551+ EBE1             >Current_HP      defl  $ - $E000             // used to set HP once!
 551+ EBE1             >
 551+ EBE1             >//              ______________________________________________________________________
 551+ EBE1             >//              Dictionary part
 551+ EBE1             >
 551+ EBE1             >                org     Dict_Ptr
 551+ 7DC6             >
 551+ 7DC6 DF 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 551+ 7DC8             >
 551+ 7DC8             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 551+ 7DC8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 551+ 7DCB             >
 551+ 7DCB             >
 551+ 7DCB             >                endif           ; ok        // for other definitions it "points" the correct handler
 551+ 7DCB             >                // Use of "; ok" to suppress "warning[fwdref]"
 551+ 7DCB             >
 551+ 7DCB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 552+ 7DCB 8A 68                        dw      ZLESS
 553+ 7DCD F5 63                        dw      ZBRANCH
 554+ 7DCF 08 00                        dw      Sign_Endif - $
 555+ 7DD1 A3 63 2D 00                  dw          LIT, 45, HOLD
 555+ 7DD5 A2 70
 556+ 7DD7              Sign_Endif:
 557+ 7DD7 52 68                        dw      EXIT
 558+ 7DD9
 559+ 7DD9              //  ______________________________________________________________________
 560+ 7DD9              //
 561+ 7DD9              // #           d1 -- d2
 562+ 7DD9                              Colon_Def DASH, "#", is_normal
 562+ 7DD9             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 562+ 7DD9             >
 562+ 7DD9             >Dict_Ptr        defl    $
 562+ 7DD9             >
 562+ 7DD9             >//              ______________________________________________________________________
 562+ 7DD9             >//              Heap part
 562+ 7DD9             >
 562+ 7DD9             >
 562+ 7DD9             >                org     (Heap_Ptr & $1FFF) + $E000
 562+ EBE1             >
 562+ EBE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ EBE1             >Latest_Definition defl  Heap_Ptr
 562+ EBE1             >
 562+ EBE1             >                // dummy db directives used to calculate length of namec
 562+ EBE1 23          >                db      "#"
 562+ EBE2             >len_NFA         defl    $ - temp_NFA
 562+ EBE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ EBE1             >
 562+ EBE1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ EBE2 23          >                db      "#"               // name string in 7-bit ascii, but
 562+ EBE3             >                org     $-1                 // alter last byte of Name just above to set
 562+ EBE2 A3          >                db      {b $} | END_BIT     // msb as name end
 562+ EBE3             >
 562+ EBE3 D8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 562+ EBE5             >Prev_Ptr        defl    Heap_Ptr
 562+ EBE5             >
 562+ EBE5             >mirror_Ptr      defl    $
 562+ EBE5             >
 562+ EBE5 DB 7D       >                dw      Dict_Ptr + 2        // xt
 562+ EBE7             >Heap_Ptr        defl    $ - $E000           // save current HP
 562+ EBE7             >
 562+ EBE7             >Current_HP      defl  $ - $E000             // used to set HP once!
 562+ EBE7             >
 562+ EBE7             >//              ______________________________________________________________________
 562+ EBE7             >//              Dictionary part
 562+ EBE7             >
 562+ EBE7             >                org     Dict_Ptr
 562+ 7DD9             >
 562+ 7DD9 E5 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 562+ 7DDB             >
 562+ 7DDB             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 7DDB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 7DDE             >
 562+ 7DDE             >
 562+ 7DDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 7DDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 7DDE             >
 562+ 7DDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 7DDE 52 6B 89 69                  dw      BASE, FETCH
 564+ 7DE2
 565+ 7DE2 5C 68                        dw      TO_R                    // >r           ( ud1 )
 566+ 7DE4 81 6A 72 68                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 566+ 7DE8 D9 67
 567+ 7DEA 67 68 24 69                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 567+ 7DEE 5C 68
 568+ 7DF0 D9 67                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 569+ 7DF2 67 68                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 570+ 7DF4
 571+ 7DF4 32 69                        dw      ROT
 572+ 7DF6 A3 63 09 00                  dw      LIT, 9, OVER, LESS
 572+ 7DFA 07 69 0A 6C
 573+ 7DFE F5 63                        dw      ZBRANCH
 574+ 7E00 08 00                        dw      Dash_Endif - $
 575+ 7E02 A3 63 07 00                  dw          LIT, 7, PLUS
 575+ 7E06 A5 68
 576+ 7E08              Dash_Endif:
 577+ 7E08
 578+ 7E08 A3 63 30 00                  dw      LIT, 48, PLUS, HOLD
 578+ 7E0C A5 68 A2 70
 579+ 7E10 52 68                        dw      EXIT
 580+ 7E12
 581+ 7E12              //  ______________________________________________________________________
 582+ 7E12              //
 583+ 7E12              // #s           d1 -- d2
 584+ 7E12                              Colon_Def DASHES, "#S", is_normal
 584+ 7E12             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 584+ 7E12             >
 584+ 7E12             >Dict_Ptr        defl    $
 584+ 7E12             >
 584+ 7E12             >//              ______________________________________________________________________
 584+ 7E12             >//              Heap part
 584+ 7E12             >
 584+ 7E12             >
 584+ 7E12             >                org     (Heap_Ptr & $1FFF) + $E000
 584+ EBE7             >
 584+ EBE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 584+ EBE7             >Latest_Definition defl  Heap_Ptr
 584+ EBE7             >
 584+ EBE7             >                // dummy db directives used to calculate length of namec
 584+ EBE7 23 53       >                db      "#S"
 584+ EBE9             >len_NFA         defl    $ - temp_NFA
 584+ EBE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 584+ EBE7             >
 584+ EBE7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 584+ EBE8 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 584+ EBEA             >                org     $-1                 // alter last byte of Name just above to set
 584+ EBE9 D3          >                db      {b $} | END_BIT     // msb as name end
 584+ EBEA             >
 584+ EBEA E1 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 584+ EBEC             >Prev_Ptr        defl    Heap_Ptr
 584+ EBEC             >
 584+ EBEC             >mirror_Ptr      defl    $
 584+ EBEC             >
 584+ EBEC 14 7E       >                dw      Dict_Ptr + 2        // xt
 584+ EBEE             >Heap_Ptr        defl    $ - $E000           // save current HP
 584+ EBEE             >
 584+ EBEE             >Current_HP      defl  $ - $E000             // used to set HP once!
 584+ EBEE             >
 584+ EBEE             >//              ______________________________________________________________________
 584+ EBEE             >//              Dictionary part
 584+ EBEE             >
 584+ EBEE             >                org     Dict_Ptr
 584+ 7E12             >
 584+ 7E12 EC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 584+ 7E14             >
 584+ 7E14             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 584+ 7E14 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 584+ 7E17             >
 584+ 7E17             >
 584+ 7E17             >                endif           ; ok        // for other definitions it "points" the correct handler
 584+ 7E17             >                // Use of "; ok" to suppress "warning[fwdref]"
 584+ 7E17             >
 584+ 7E17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 585+ 7E17              Dashes_Begin:
 586+ 7E17 DB 7D 67 69                  dw      DASH, TWO_DUP
 587+ 7E1B 1B 68 77 68                  dw          OR_OP, ZEQUAL
 588+ 7E1F F5 63                        dw      ZBRANCH
 589+ 7E21 F6 FF                        dw      Dashes_Begin - $
 590+ 7E23 52 68                        dw      EXIT
 591+ 7E25
 592+ 7E25              //  ______________________________________________________________________
 593+ 7E25              //
 594+ 7E25              // d.r          d n --
 595+ 7E25                              Colon_Def D_DOT_R, "D.R", is_normal
 595+ 7E25             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 595+ 7E25             >
 595+ 7E25             >Dict_Ptr        defl    $
 595+ 7E25             >
 595+ 7E25             >//              ______________________________________________________________________
 595+ 7E25             >//              Heap part
 595+ 7E25             >
 595+ 7E25             >
 595+ 7E25             >                org     (Heap_Ptr & $1FFF) + $E000
 595+ EBEE             >
 595+ EBEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 595+ EBEE             >Latest_Definition defl  Heap_Ptr
 595+ EBEE             >
 595+ EBEE             >                // dummy db directives used to calculate length of namec
 595+ EBEE 44 2E 52    >                db      "D.R"
 595+ EBF1             >len_NFA         defl    $ - temp_NFA
 595+ EBF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 595+ EBEE             >
 595+ EBEE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 595+ EBEF 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 595+ EBF2             >                org     $-1                 // alter last byte of Name just above to set
 595+ EBF1 D2          >                db      {b $} | END_BIT     // msb as name end
 595+ EBF2             >
 595+ EBF2 E7 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 595+ EBF4             >Prev_Ptr        defl    Heap_Ptr
 595+ EBF4             >
 595+ EBF4             >mirror_Ptr      defl    $
 595+ EBF4             >
 595+ EBF4 27 7E       >                dw      Dict_Ptr + 2        // xt
 595+ EBF6             >Heap_Ptr        defl    $ - $E000           // save current HP
 595+ EBF6             >
 595+ EBF6             >Current_HP      defl  $ - $E000             // used to set HP once!
 595+ EBF6             >
 595+ EBF6             >//              ______________________________________________________________________
 595+ EBF6             >//              Dictionary part
 595+ EBF6             >
 595+ EBF6             >                org     Dict_Ptr
 595+ 7E25             >
 595+ 7E25 F4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 595+ 7E27             >
 595+ 7E27             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 595+ 7E27 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 595+ 7E2A             >
 595+ 7E2A             >
 595+ 7E2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 595+ 7E2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 595+ 7E2A             >
 595+ 7E2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 596+ 7E2A 5C 68                        dw      TO_R
 597+ 7E2C 1B 69 2B 76                  dw      TUCK, DABS
 598+ 7E30 A8 7D 14 7E                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 598+ 7E34 32 69 C8 7D
 598+ 7E38 B5 7D
 599+ 7E3A 67 68                        dw      R_TO
 600+ 7E3C 07 69 E5 6B                  dw      OVER, SUBTRACT, SPACES, TYPE
 600+ 7E40 91 7D 72 6F
 601+ 7E44 52 68                        dw      EXIT
 602+ 7E46
 603+ 7E46              //  ______________________________________________________________________
 604+ 7E46              //
 605+ 7E46              // .r           n1 n2 --
 606+ 7E46                              Colon_Def DOT_R, ".R", is_normal
 606+ 7E46             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 606+ 7E46             >
 606+ 7E46             >Dict_Ptr        defl    $
 606+ 7E46             >
 606+ 7E46             >//              ______________________________________________________________________
 606+ 7E46             >//              Heap part
 606+ 7E46             >
 606+ 7E46             >
 606+ 7E46             >                org     (Heap_Ptr & $1FFF) + $E000
 606+ EBF6             >
 606+ EBF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 606+ EBF6             >Latest_Definition defl  Heap_Ptr
 606+ EBF6             >
 606+ EBF6             >                // dummy db directives used to calculate length of namec
 606+ EBF6 2E 52       >                db      ".R"
 606+ EBF8             >len_NFA         defl    $ - temp_NFA
 606+ EBF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 606+ EBF6             >
 606+ EBF6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 606+ EBF7 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 606+ EBF9             >                org     $-1                 // alter last byte of Name just above to set
 606+ EBF8 D2          >                db      {b $} | END_BIT     // msb as name end
 606+ EBF9             >
 606+ EBF9 EE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 606+ EBFB             >Prev_Ptr        defl    Heap_Ptr
 606+ EBFB             >
 606+ EBFB             >mirror_Ptr      defl    $
 606+ EBFB             >
 606+ EBFB 48 7E       >                dw      Dict_Ptr + 2        // xt
 606+ EBFD             >Heap_Ptr        defl    $ - $E000           // save current HP
 606+ EBFD             >
 606+ EBFD             >Current_HP      defl  $ - $E000             // used to set HP once!
 606+ EBFD             >
 606+ EBFD             >//              ______________________________________________________________________
 606+ EBFD             >//              Dictionary part
 606+ EBFD             >
 606+ EBFD             >                org     Dict_Ptr
 606+ 7E46             >
 606+ 7E46 FB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 606+ 7E48             >
 606+ 7E48             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 606+ 7E48 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 606+ 7E4B             >
 606+ 7E4B             >
 606+ 7E4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 606+ 7E4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 606+ 7E4B             >
 606+ 7E4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 607+ 7E4B 5C 68                        dw      TO_R
 608+ 7E4D DA 6B 67 68                  dw      S_TO_D, R_TO
 609+ 7E51 27 7E                        dw      D_DOT_R
 610+ 7E53 52 68                        dw      EXIT
 611+ 7E55
 612+ 7E55              //  ______________________________________________________________________
 613+ 7E55              //
 614+ 7E55              // d.           d --
 615+ 7E55                              Colon_Def D_DOT, "D.", is_normal
 615+ 7E55             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 615+ 7E55             >
 615+ 7E55             >Dict_Ptr        defl    $
 615+ 7E55             >
 615+ 7E55             >//              ______________________________________________________________________
 615+ 7E55             >//              Heap part
 615+ 7E55             >
 615+ 7E55             >
 615+ 7E55             >                org     (Heap_Ptr & $1FFF) + $E000
 615+ EBFD             >
 615+ EBFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ EBFD             >Latest_Definition defl  Heap_Ptr
 615+ EBFD             >
 615+ EBFD             >                // dummy db directives used to calculate length of namec
 615+ EBFD 44 2E       >                db      "D."
 615+ EBFF             >len_NFA         defl    $ - temp_NFA
 615+ EBFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ EBFD             >
 615+ EBFD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ EBFE 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 615+ EC00             >                org     $-1                 // alter last byte of Name just above to set
 615+ EBFF AE          >                db      {b $} | END_BIT     // msb as name end
 615+ EC00             >
 615+ EC00 F6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 615+ EC02             >Prev_Ptr        defl    Heap_Ptr
 615+ EC02             >
 615+ EC02             >mirror_Ptr      defl    $
 615+ EC02             >
 615+ EC02 57 7E       >                dw      Dict_Ptr + 2        // xt
 615+ EC04             >Heap_Ptr        defl    $ - $E000           // save current HP
 615+ EC04             >
 615+ EC04             >Current_HP      defl  $ - $E000             // used to set HP once!
 615+ EC04             >
 615+ EC04             >//              ______________________________________________________________________
 615+ EC04             >//              Dictionary part
 615+ EC04             >
 615+ EC04             >                org     Dict_Ptr
 615+ 7E55             >
 615+ 7E55 02 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 615+ 7E57             >
 615+ 7E57             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 7E57 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 615+ 7E5A             >
 615+ 7E5A             >
 615+ 7E5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 7E5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 7E5A             >
 615+ 7E5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 7E5A 81 6A 27 7E                  dw      ZERO, D_DOT_R, SPACE
 616+ 7E5E 77 6C
 617+ 7E60 52 68                        dw      EXIT
 618+ 7E62
 619+ 7E62              //  ______________________________________________________________________
 620+ 7E62              //
 621+ 7E62              // .            n --
 622+ 7E62                              Colon_Def DOT, ".", is_normal
 622+ 7E62             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 622+ 7E62             >
 622+ 7E62             >Dict_Ptr        defl    $
 622+ 7E62             >
 622+ 7E62             >//              ______________________________________________________________________
 622+ 7E62             >//              Heap part
 622+ 7E62             >
 622+ 7E62             >
 622+ 7E62             >                org     (Heap_Ptr & $1FFF) + $E000
 622+ EC04             >
 622+ EC04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 622+ EC04             >Latest_Definition defl  Heap_Ptr
 622+ EC04             >
 622+ EC04             >                // dummy db directives used to calculate length of namec
 622+ EC04 2E          >                db      "."
 622+ EC05             >len_NFA         defl    $ - temp_NFA
 622+ EC05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 622+ EC04             >
 622+ EC04 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 622+ EC05 2E          >                db      "."               // name string in 7-bit ascii, but
 622+ EC06             >                org     $-1                 // alter last byte of Name just above to set
 622+ EC05 AE          >                db      {b $} | END_BIT     // msb as name end
 622+ EC06             >
 622+ EC06 FD 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 622+ EC08             >Prev_Ptr        defl    Heap_Ptr
 622+ EC08             >
 622+ EC08             >mirror_Ptr      defl    $
 622+ EC08             >
 622+ EC08 64 7E       >                dw      Dict_Ptr + 2        // xt
 622+ EC0A             >Heap_Ptr        defl    $ - $E000           // save current HP
 622+ EC0A             >
 622+ EC0A             >Current_HP      defl  $ - $E000             // used to set HP once!
 622+ EC0A             >
 622+ EC0A             >//              ______________________________________________________________________
 622+ EC0A             >//              Dictionary part
 622+ EC0A             >
 622+ EC0A             >                org     Dict_Ptr
 622+ 7E62             >
 622+ 7E62 08 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 622+ 7E64             >
 622+ 7E64             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 622+ 7E64 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 622+ 7E67             >
 622+ 7E67             >
 622+ 7E67             >                endif           ; ok        // for other definitions it "points" the correct handler
 622+ 7E67             >                // Use of "; ok" to suppress "warning[fwdref]"
 622+ 7E67             >
 622+ 7E67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 623+ 7E67 DA 6B 57 7E                  dw      S_TO_D, D_DOT
 624+ 7E6B 52 68                        dw      EXIT
 625+ 7E6D
 626+ 7E6D              //  ______________________________________________________________________
 627+ 7E6D              //
 628+ 7E6D              // ?            n --
 629+ 7E6D                              Colon_Def QUESTION, "?", is_normal
 629+ 7E6D             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 629+ 7E6D             >
 629+ 7E6D             >Dict_Ptr        defl    $
 629+ 7E6D             >
 629+ 7E6D             >//              ______________________________________________________________________
 629+ 7E6D             >//              Heap part
 629+ 7E6D             >
 629+ 7E6D             >
 629+ 7E6D             >                org     (Heap_Ptr & $1FFF) + $E000
 629+ EC0A             >
 629+ EC0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 629+ EC0A             >Latest_Definition defl  Heap_Ptr
 629+ EC0A             >
 629+ EC0A             >                // dummy db directives used to calculate length of namec
 629+ EC0A 3F          >                db      "?"
 629+ EC0B             >len_NFA         defl    $ - temp_NFA
 629+ EC0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 629+ EC0A             >
 629+ EC0A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 629+ EC0B 3F          >                db      "?"               // name string in 7-bit ascii, but
 629+ EC0C             >                org     $-1                 // alter last byte of Name just above to set
 629+ EC0B BF          >                db      {b $} | END_BIT     // msb as name end
 629+ EC0C             >
 629+ EC0C 04 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 629+ EC0E             >Prev_Ptr        defl    Heap_Ptr
 629+ EC0E             >
 629+ EC0E             >mirror_Ptr      defl    $
 629+ EC0E             >
 629+ EC0E 6F 7E       >                dw      Dict_Ptr + 2        // xt
 629+ EC10             >Heap_Ptr        defl    $ - $E000           // save current HP
 629+ EC10             >
 629+ EC10             >Current_HP      defl  $ - $E000             // used to set HP once!
 629+ EC10             >
 629+ EC10             >//              ______________________________________________________________________
 629+ EC10             >//              Dictionary part
 629+ EC10             >
 629+ EC10             >                org     Dict_Ptr
 629+ 7E6D             >
 629+ 7E6D 0E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 629+ 7E6F             >
 629+ 7E6F             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 629+ 7E6F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 629+ 7E72             >
 629+ 7E72             >
 629+ 7E72             >                endif           ; ok        // for other definitions it "points" the correct handler
 629+ 7E72             >                // Use of "; ok" to suppress "warning[fwdref]"
 629+ 7E72             >
 629+ 7E72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 630+ 7E72 89 69 64 7E                  dw      FETCH, DOT
 631+ 7E76 52 68                        dw      EXIT
 632+ 7E78
 633+ 7E78              //  ______________________________________________________________________
 634+ 7E78              //
 635+ 7E78              // u.           u --
 636+ 7E78                              Colon_Def U_DOT, "U.", is_normal
 636+ 7E78             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 636+ 7E78             >
 636+ 7E78             >Dict_Ptr        defl    $
 636+ 7E78             >
 636+ 7E78             >//              ______________________________________________________________________
 636+ 7E78             >//              Heap part
 636+ 7E78             >
 636+ 7E78             >
 636+ 7E78             >                org     (Heap_Ptr & $1FFF) + $E000
 636+ EC10             >
 636+ EC10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 636+ EC10             >Latest_Definition defl  Heap_Ptr
 636+ EC10             >
 636+ EC10             >                // dummy db directives used to calculate length of namec
 636+ EC10 55 2E       >                db      "U."
 636+ EC12             >len_NFA         defl    $ - temp_NFA
 636+ EC12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 636+ EC10             >
 636+ EC10 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 636+ EC11 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 636+ EC13             >                org     $-1                 // alter last byte of Name just above to set
 636+ EC12 AE          >                db      {b $} | END_BIT     // msb as name end
 636+ EC13             >
 636+ EC13 0A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 636+ EC15             >Prev_Ptr        defl    Heap_Ptr
 636+ EC15             >
 636+ EC15             >mirror_Ptr      defl    $
 636+ EC15             >
 636+ EC15 7A 7E       >                dw      Dict_Ptr + 2        // xt
 636+ EC17             >Heap_Ptr        defl    $ - $E000           // save current HP
 636+ EC17             >
 636+ EC17             >Current_HP      defl  $ - $E000             // used to set HP once!
 636+ EC17             >
 636+ EC17             >//              ______________________________________________________________________
 636+ EC17             >//              Dictionary part
 636+ EC17             >
 636+ EC17             >                org     Dict_Ptr
 636+ 7E78             >
 636+ 7E78 15 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 636+ 7E7A             >
 636+ 7E7A             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 636+ 7E7A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 636+ 7E7D             >
 636+ 7E7D             >
 636+ 7E7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 636+ 7E7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 636+ 7E7D             >
 636+ 7E7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 637+ 7E7D 81 6A 57 7E                  dw      ZERO, D_DOT
 638+ 7E81 52 68                        dw      EXIT
 639+ 7E83
 640+ 7E83              //  ______________________________________________________________________
 641+ 7E83              //
 642+ 7E83              // words        --
 643+ 7E83                              Colon_Def WORDS, "WORDS", is_normal
 643+ 7E83             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 643+ 7E83             >
 643+ 7E83             >Dict_Ptr        defl    $
 643+ 7E83             >
 643+ 7E83             >//              ______________________________________________________________________
 643+ 7E83             >//              Heap part
 643+ 7E83             >
 643+ 7E83             >
 643+ 7E83             >                org     (Heap_Ptr & $1FFF) + $E000
 643+ EC17             >
 643+ EC17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ EC17             >Latest_Definition defl  Heap_Ptr
 643+ EC17             >
 643+ EC17             >                // dummy db directives used to calculate length of namec
 643+ EC17 57 4F 52 44 >                db      "WORDS"
 643+ EC1B 53          >
 643+ EC1C             >len_NFA         defl    $ - temp_NFA
 643+ EC1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ EC17             >
 643+ EC17 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ EC18 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 643+ EC1C 53          >
 643+ EC1D             >                org     $-1                 // alter last byte of Name just above to set
 643+ EC1C D3          >                db      {b $} | END_BIT     // msb as name end
 643+ EC1D             >
 643+ EC1D 10 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 643+ EC1F             >Prev_Ptr        defl    Heap_Ptr
 643+ EC1F             >
 643+ EC1F             >mirror_Ptr      defl    $
 643+ EC1F             >
 643+ EC1F 85 7E       >                dw      Dict_Ptr + 2        // xt
 643+ EC21             >Heap_Ptr        defl    $ - $E000           // save current HP
 643+ EC21             >
 643+ EC21             >Current_HP      defl  $ - $E000             // used to set HP once!
 643+ EC21             >
 643+ EC21             >//              ______________________________________________________________________
 643+ EC21             >//              Dictionary part
 643+ EC21             >
 643+ EC21             >                org     Dict_Ptr
 643+ 7E83             >
 643+ 7E83 1F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 643+ 7E85             >
 643+ 7E85             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 7E85 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 7E88             >
 643+ 7E88             >
 643+ 7E88             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 7E88             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 7E88             >
 643+ 7E88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 7E88 A3 63 80 00                  dw      LIT, 128, OUT, STORE
 644+ 7E8C 2E 6B 93 69
 645+ 7E90 40 6B 89 69                  dw      CONTEXT, FETCH, FETCH
 645+ 7E94 89 69
 646+ 7E96              Words_Begin:
 647+ 7E96 E8 6C                        dw          FAR // Q TO HEAP
 648+ 7E98 2B 69 9E 69                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 648+ 7E9C A3 63 1F 00
 648+ 7EA0 0C 68
 649+ 7EA2 2E 6B 89 69                  dw          OUT, FETCH, PLUS
 649+ 7EA6 A5 68
 650+ 7EA8 AB 6A 0A 6C                  dw          CL, LESS, ZEQUAL
 650+ 7EAC 77 68
 651+ 7EAE F5 63                        dw          ZBRANCH
 652+ 7EB0 0A 00                        dw          Words_Endif - $
 653+ 7EB2 B6 65 81 6A                  dw              CR, ZERO, OUT, STORE
 653+ 7EB6 2E 6B 93 69
 654+ 7EBA              Words_Endif:
 655+ 7EBA 2B 69 0C 73                  dw          DUP, ID_DOT
 656+ 7EBE 88 6A 82 6C                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 656+ 7EC2 BE 68 89 69
 657+ 7EC6 2B 69 77 68                  dw          DUP, ZEQUAL
 658+ 7ECA B3 66 1B 68                  dw          QTERMINAL, OR_OP
 659+ 7ECE F5 63                        dw      ZBRANCH
 660+ 7ED0 C6 FF                        dw      Words_Begin - $
 661+ 7ED2 10 69                        dw      DROP
 662+ 7ED4 52 68                        dw      EXIT
 663+ 7ED6
 664+ 7ED6              //  ______________________________________________________________________
 665+ 7ED6              //
 666+ 7ED6              // list         n --
 667+ 7ED6                              Colon_Def LIST, "LIST", is_normal
 667+ 7ED6             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 667+ 7ED6             >
 667+ 7ED6             >Dict_Ptr        defl    $
 667+ 7ED6             >
 667+ 7ED6             >//              ______________________________________________________________________
 667+ 7ED6             >//              Heap part
 667+ 7ED6             >
 667+ 7ED6             >
 667+ 7ED6             >                org     (Heap_Ptr & $1FFF) + $E000
 667+ EC21             >
 667+ EC21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 667+ EC21             >Latest_Definition defl  Heap_Ptr
 667+ EC21             >
 667+ EC21             >                // dummy db directives used to calculate length of namec
 667+ EC21 4C 49 53 54 >                db      "LIST"
 667+ EC25             >len_NFA         defl    $ - temp_NFA
 667+ EC25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 667+ EC21             >
 667+ EC21 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 667+ EC22 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 667+ EC26             >                org     $-1                 // alter last byte of Name just above to set
 667+ EC25 D4          >                db      {b $} | END_BIT     // msb as name end
 667+ EC26             >
 667+ EC26 17 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 667+ EC28             >Prev_Ptr        defl    Heap_Ptr
 667+ EC28             >
 667+ EC28             >mirror_Ptr      defl    $
 667+ EC28             >
 667+ EC28 D8 7E       >                dw      Dict_Ptr + 2        // xt
 667+ EC2A             >Heap_Ptr        defl    $ - $E000           // save current HP
 667+ EC2A             >
 667+ EC2A             >Current_HP      defl  $ - $E000             // used to set HP once!
 667+ EC2A             >
 667+ EC2A             >//              ______________________________________________________________________
 667+ EC2A             >//              Dictionary part
 667+ EC2A             >
 667+ EC2A             >                org     Dict_Ptr
 667+ 7ED6             >
 667+ 7ED6 28 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 667+ 7ED8             >
 667+ 7ED8             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 667+ 7ED8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 667+ 7EDB             >
 667+ 7EDB             >
 667+ 7EDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 667+ 7EDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 667+ 7EDB             >
 667+ 7EDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 668+ 7EDB BB 6E B6 65                  dw      DECIMAL, CR
 669+ 7EDF 2B 69 34 6B                  dw      DUP, SCR, STORE
 669+ 7EE3 93 69
 670+ 7EE5 0F 71                        dw      C_DOT_QUOTE
 671+ 7EE7 05 53 63 72                  db      5, "Scr# "
 671+ 7EEB 23 20
 672+ 7EED 64 7E                        dw      DOT
 673+ 7EEF C0 6A 81 6A                  dw      LSCR, ZERO, C_DO
 673+ 7EF3 34 64
 674+ 7EF5              List_Loop:
 675+ 7EF5 B6 65                        dw          CR
 676+ 7EF7 3A 64 96 6A                  dw          I, THREE
 677+ 7EFB 48 7E 77 6C                  dw          DOT_R, SPACE
 678+ 7EFF 3A 64 34 6B                  dw          I, SCR, FETCH, DOT_LINE
 678+ 7F03 89 69 26 77
 679+ 7F07 B3 66                        dw          QTERMINAL
 680+ 7F09 F5 63                        dw          ZBRANCH
 681+ 7F0B 06 00                        dw          List_Endif - $
 682+ 7F0D 00 64                        dw              C_LEAVE
 683+ 7F0F 06 00                        dw              List_Leave - $
 684+ 7F11              List_Endif:
 685+ 7F11 E0 63                        dw      C_LOOP
 686+ 7F13 E2 FF                        dw      List_Loop - $
 687+ 7F15              List_Leave:
 688+ 7F15 B6 65                        dw      CR
 689+ 7F17 52 68                        dw      EXIT
 690+ 7F19
 691+ 7F19              //  ______________________________________________________________________
 692+ 7F19              //
 693+ 7F19              // index        n1 n2 --
 694+ 7F19                              Colon_Def INDEX, "INDEX", is_normal
 694+ 7F19             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 694+ 7F19             >
 694+ 7F19             >Dict_Ptr        defl    $
 694+ 7F19             >
 694+ 7F19             >//              ______________________________________________________________________
 694+ 7F19             >//              Heap part
 694+ 7F19             >
 694+ 7F19             >
 694+ 7F19             >                org     (Heap_Ptr & $1FFF) + $E000
 694+ EC2A             >
 694+ EC2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ EC2A             >Latest_Definition defl  Heap_Ptr
 694+ EC2A             >
 694+ EC2A             >                // dummy db directives used to calculate length of namec
 694+ EC2A 49 4E 44 45 >                db      "INDEX"
 694+ EC2E 58          >
 694+ EC2F             >len_NFA         defl    $ - temp_NFA
 694+ EC2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ EC2A             >
 694+ EC2A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ EC2B 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 694+ EC2F 58          >
 694+ EC30             >                org     $-1                 // alter last byte of Name just above to set
 694+ EC2F D8          >                db      {b $} | END_BIT     // msb as name end
 694+ EC30             >
 694+ EC30 21 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 694+ EC32             >Prev_Ptr        defl    Heap_Ptr
 694+ EC32             >
 694+ EC32             >mirror_Ptr      defl    $
 694+ EC32             >
 694+ EC32 1B 7F       >                dw      Dict_Ptr + 2        // xt
 694+ EC34             >Heap_Ptr        defl    $ - $E000           // save current HP
 694+ EC34             >
 694+ EC34             >Current_HP      defl  $ - $E000             // used to set HP once!
 694+ EC34             >
 694+ EC34             >//              ______________________________________________________________________
 694+ EC34             >//              Dictionary part
 694+ EC34             >
 694+ EC34             >                org     Dict_Ptr
 694+ 7F19             >
 694+ 7F19 32 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 694+ 7F1B             >
 694+ 7F1B             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 7F1B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 7F1E             >
 694+ 7F1E             >
 694+ 7F1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 7F1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 7F1E             >
 694+ 7F1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 7F1E BE 68 24 69                  dw      ONE_PLUS, SWAP, C_DO
 695+ 7F22 34 64
 696+ 7F24              Index_Loop:
 697+ 7F24 B6 65 3A 64                  dw          CR, I, THREE
 697+ 7F28 96 6A
 698+ 7F2A 48 7E 77 6C                  dw          DOT_R, SPACE
 699+ 7F2E 81 6A 3A 64                  dw          ZERO, I, DOT_LINE
 699+ 7F32 26 77
 700+ 7F34 B3 66                        dw          QTERMINAL
 701+ 7F36 F5 63                        dw          ZBRANCH
 702+ 7F38 06 00                        dw          Index_Endif - $
 703+ 7F3A 00 64                        dw              C_LEAVE
 704+ 7F3C 06 00                        dw              Index_Leave - $
 705+ 7F3E              Index_Endif:
 706+ 7F3E E0 63                        dw      C_LOOP
 707+ 7F40 E4 FF                        dw      Index_Loop - $
 708+ 7F42              Index_Leave:
 709+ 7F42 B6 65                        dw      CR
 710+ 7F44 52 68                        dw      EXIT
 711+ 7F46
 712+ 7F46              //  ______________________________________________________________________
 713+ 7F46              //
 714+ 7F46              // cls          --
 715+ 7F46                              Colon_Def CLS, "CLS", is_normal
 715+ 7F46             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 715+ 7F46             >
 715+ 7F46             >Dict_Ptr        defl    $
 715+ 7F46             >
 715+ 7F46             >//              ______________________________________________________________________
 715+ 7F46             >//              Heap part
 715+ 7F46             >
 715+ 7F46             >
 715+ 7F46             >                org     (Heap_Ptr & $1FFF) + $E000
 715+ EC34             >
 715+ EC34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 715+ EC34             >Latest_Definition defl  Heap_Ptr
 715+ EC34             >
 715+ EC34             >                // dummy db directives used to calculate length of namec
 715+ EC34 43 4C 53    >                db      "CLS"
 715+ EC37             >len_NFA         defl    $ - temp_NFA
 715+ EC37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 715+ EC34             >
 715+ EC34 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 715+ EC35 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 715+ EC38             >                org     $-1                 // alter last byte of Name just above to set
 715+ EC37 D3          >                db      {b $} | END_BIT     // msb as name end
 715+ EC38             >
 715+ EC38 2A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 715+ EC3A             >Prev_Ptr        defl    Heap_Ptr
 715+ EC3A             >
 715+ EC3A             >mirror_Ptr      defl    $
 715+ EC3A             >
 715+ EC3A 48 7F       >                dw      Dict_Ptr + 2        // xt
 715+ EC3C             >Heap_Ptr        defl    $ - $E000           // save current HP
 715+ EC3C             >
 715+ EC3C             >Current_HP      defl  $ - $E000             // used to set HP once!
 715+ EC3C             >
 715+ EC3C             >//              ______________________________________________________________________
 715+ EC3C             >//              Dictionary part
 715+ EC3C             >
 715+ EC3C             >                org     Dict_Ptr
 715+ 7F46             >
 715+ 7F46 3A 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 715+ 7F48             >
 715+ 7F48             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 715+ 7F48 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 715+ 7F4B             >
 715+ 7F4B             >
 715+ 7F4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 715+ 7F4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 715+ 7F4B             >
 715+ 7F4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 716+ 7F4B A3 63 0E 00                  dw      LIT, $0E, EMITC
 716+ 7F4F A2 65
 717+ 7F51 52 68                        dw      EXIT
 718+ 7F53
 719+ 7F53              //  ______________________________________________________________________
 720+ 7F53              //
 721+ 7F53              // splash       --
 722+ 7F53              //              Colon_Def SPLASH, "SPLASH", is_normal
 723+ 7F53              //              dw      CLS
 724+ 7F53              //              dw      C_DOT_QUOTE
 725+ 7F53              //              db      87
 726+ 7F53              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 727+ 7F53              //              db      "Heap Vocabulary - build 20230809", 13  // 33
 728+ 7F53              //              db      "1990-2023 Matteo Vitturi", 13        // 25
 729+ 7F53              //              dw      EXIT
 730+ 7F53
 731+ 7F53              //  ______________________________________________________________________
 732+ 7F53              //
 733+ 7F53              // splash       --
 734+ 7F53                              Colon_Def SPLASH, "SPLASH", is_normal
 734+ 7F53             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 734+ 7F53             >
 734+ 7F53             >Dict_Ptr        defl    $
 734+ 7F53             >
 734+ 7F53             >//              ______________________________________________________________________
 734+ 7F53             >//              Heap part
 734+ 7F53             >
 734+ 7F53             >
 734+ 7F53             >                org     (Heap_Ptr & $1FFF) + $E000
 734+ EC3C             >
 734+ EC3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 734+ EC3C             >Latest_Definition defl  Heap_Ptr
 734+ EC3C             >
 734+ EC3C             >                // dummy db directives used to calculate length of namec
 734+ EC3C 53 50 4C 41 >                db      "SPLASH"
 734+ EC40 53 48       >
 734+ EC42             >len_NFA         defl    $ - temp_NFA
 734+ EC42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 734+ EC3C             >
 734+ EC3C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 734+ EC3D 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 734+ EC41 53 48       >
 734+ EC43             >                org     $-1                 // alter last byte of Name just above to set
 734+ EC42 C8          >                db      {b $} | END_BIT     // msb as name end
 734+ EC43             >
 734+ EC43 34 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 734+ EC45             >Prev_Ptr        defl    Heap_Ptr
 734+ EC45             >
 734+ EC45             >mirror_Ptr      defl    $
 734+ EC45             >
 734+ EC45 55 7F       >                dw      Dict_Ptr + 2        // xt
 734+ EC47             >Heap_Ptr        defl    $ - $E000           // save current HP
 734+ EC47             >
 734+ EC47             >Current_HP      defl  $ - $E000             // used to set HP once!
 734+ EC47             >
 734+ EC47             >//              ______________________________________________________________________
 734+ EC47             >//              Dictionary part
 734+ EC47             >
 734+ EC47             >                org     Dict_Ptr
 734+ 7F53             >
 734+ 7F53 45 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 734+ 7F55             >
 734+ 7F55             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 734+ 7F55 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 734+ 7F58             >
 734+ 7F58             >
 734+ 7F58             >                endif           ; ok        // for other definitions it "points" the correct handler
 734+ 7F58             >                // Use of "; ok" to suppress "warning[fwdref]"
 734+ 7F58             >
 734+ 7F58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 735+ 7F58 48 7F                        dw      CLS
 736+ 7F5A A3 63 02 00                  dw      LIT, Splash_Ptr
 737+ 7F5E B5 6C AC 6C                  dw      TO_FAR, MMU7_STORE
 738+ 7F62 1E 6F 72 6F                  dw      COUNT, TYPE
 739+ 7F66 52 68                        dw      EXIT
 740+ 7F68
 741+ 7F68              //  ______________________________________________________________________
 742+ 7F68              //
 743+ 7F68              // video        --
 744+ 7F68                              Colon_Def VIDEO, "VIDEO", is_normal
 744+ 7F68             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 744+ 7F68             >
 744+ 7F68             >Dict_Ptr        defl    $
 744+ 7F68             >
 744+ 7F68             >//              ______________________________________________________________________
 744+ 7F68             >//              Heap part
 744+ 7F68             >
 744+ 7F68             >
 744+ 7F68             >                org     (Heap_Ptr & $1FFF) + $E000
 744+ EC47             >
 744+ EC47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 744+ EC47             >Latest_Definition defl  Heap_Ptr
 744+ EC47             >
 744+ EC47             >                // dummy db directives used to calculate length of namec
 744+ EC47 56 49 44 45 >                db      "VIDEO"
 744+ EC4B 4F          >
 744+ EC4C             >len_NFA         defl    $ - temp_NFA
 744+ EC4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 744+ EC47             >
 744+ EC47 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 744+ EC48 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 744+ EC4C 4F          >
 744+ EC4D             >                org     $-1                 // alter last byte of Name just above to set
 744+ EC4C CF          >                db      {b $} | END_BIT     // msb as name end
 744+ EC4D             >
 744+ EC4D 3C 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 744+ EC4F             >Prev_Ptr        defl    Heap_Ptr
 744+ EC4F             >
 744+ EC4F             >mirror_Ptr      defl    $
 744+ EC4F             >
 744+ EC4F 6A 7F       >                dw      Dict_Ptr + 2        // xt
 744+ EC51             >Heap_Ptr        defl    $ - $E000           // save current HP
 744+ EC51             >
 744+ EC51             >Current_HP      defl  $ - $E000             // used to set HP once!
 744+ EC51             >
 744+ EC51             >//              ______________________________________________________________________
 744+ EC51             >//              Dictionary part
 744+ EC51             >
 744+ EC51             >                org     Dict_Ptr
 744+ 7F68             >
 744+ 7F68 4F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 744+ 7F6A             >
 744+ 7F6A             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 744+ 7F6A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 744+ 7F6D             >
 744+ 7F6D             >
 744+ 7F6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 744+ 7F6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 744+ 7F6D             >
 744+ 7F6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 745+ 7F6D 8F 6A 2B 69                  dw      TWO, DUP, DEVICE, STORE
 745+ 7F71 61 77 93 69
 746+ 7F75 C7 66                        dw      SELECT
 747+ 7F77 52 68                        dw      EXIT
 748+ 7F79
 749+ 7F79              //  ______________________________________________________________________
 750+ 7F79              //
 751+ 7F79              // autoexec     --
 752+ 7F79              // this word is called the first time the Forth system boot to
 753+ 7F79              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 754+ 7F79                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 754+ 7F79             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 754+ 7F79             >
 754+ 7F79             >Dict_Ptr        defl    $
 754+ 7F79             >
 754+ 7F79             >//              ______________________________________________________________________
 754+ 7F79             >//              Heap part
 754+ 7F79             >
 754+ 7F79             >
 754+ 7F79             >                org     (Heap_Ptr & $1FFF) + $E000
 754+ EC51             >
 754+ EC51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 754+ EC51             >Latest_Definition defl  Heap_Ptr
 754+ EC51             >
 754+ EC51             >                // dummy db directives used to calculate length of namec
 754+ EC51 41 55 54 4F >                db      "AUTOEXEC"
 754+ EC55 45 58 45 43 >
 754+ EC59             >len_NFA         defl    $ - temp_NFA
 754+ EC59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 754+ EC51             >
 754+ EC51 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 754+ EC52 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 754+ EC56 45 58 45 43 >
 754+ EC5A             >                org     $-1                 // alter last byte of Name just above to set
 754+ EC59 C3          >                db      {b $} | END_BIT     // msb as name end
 754+ EC5A             >
 754+ EC5A 47 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 754+ EC5C             >Prev_Ptr        defl    Heap_Ptr
 754+ EC5C             >
 754+ EC5C             >mirror_Ptr      defl    $
 754+ EC5C             >
 754+ EC5C 7B 7F       >                dw      Dict_Ptr + 2        // xt
 754+ EC5E             >Heap_Ptr        defl    $ - $E000           // save current HP
 754+ EC5E             >
 754+ EC5E             >Current_HP      defl  $ - $E000             // used to set HP once!
 754+ EC5E             >
 754+ EC5E             >//              ______________________________________________________________________
 754+ EC5E             >//              Dictionary part
 754+ EC5E             >
 754+ EC5E             >                org     Dict_Ptr
 754+ 7F79             >
 754+ 7F79 5C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 754+ 7F7B             >
 754+ 7F7B             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 754+ 7F7B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 754+ 7F7E             >
 754+ 7F7E             >
 754+ 7F7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 754+ 7F7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 754+ 7F7E             >
 754+ 7F7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 755+ 7F7E A3 63 0B 00                  dw      LIT, 11
 756+ 7F82 A3 63 48 6A                  dw      LIT, NOOP
 757+ 7F86 A3 63 6D 75                  dw      LIT, Autoexec_Ptr
 758+ 7F8A 93 69                        dw      STORE
 759+ 7F8C 7E 7C                        dw      LOAD
 760+ 7F8E 22 75                        dw      QUIT
 761+ 7F90 52 68                        dw      EXIT
 762+ 7F92
 763+ 7F92
 764+ 7F92              //  ______________________________________________________________________
 765+ 7F92              //
 766+ 7F92              // bye     --
 767+ 7F92              //
 768+ 7F92                              Colon_Def BYE, "BYE", is_normal
 768+ 7F92             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 768+ 7F92             >
 768+ 7F92             >Dict_Ptr        defl    $
 768+ 7F92             >
 768+ 7F92             >//              ______________________________________________________________________
 768+ 7F92             >//              Heap part
 768+ 7F92             >
 768+ 7F92             >
 768+ 7F92             >                org     (Heap_Ptr & $1FFF) + $E000
 768+ EC5E             >
 768+ EC5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 768+ EC5E             >Latest_Definition defl  Heap_Ptr
 768+ EC5E             >
 768+ EC5E             >                // dummy db directives used to calculate length of namec
 768+ EC5E 42 59 45    >                db      "BYE"
 768+ EC61             >len_NFA         defl    $ - temp_NFA
 768+ EC61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 768+ EC5E             >
 768+ EC5E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 768+ EC5F 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 768+ EC62             >                org     $-1                 // alter last byte of Name just above to set
 768+ EC61 C5          >                db      {b $} | END_BIT     // msb as name end
 768+ EC62             >
 768+ EC62 51 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 768+ EC64             >Prev_Ptr        defl    Heap_Ptr
 768+ EC64             >
 768+ EC64             >mirror_Ptr      defl    $
 768+ EC64             >
 768+ EC64 94 7F       >                dw      Dict_Ptr + 2        // xt
 768+ EC66             >Heap_Ptr        defl    $ - $E000           // save current HP
 768+ EC66             >
 768+ EC66             >Current_HP      defl  $ - $E000             // used to set HP once!
 768+ EC66             >
 768+ EC66             >//              ______________________________________________________________________
 768+ EC66             >//              Dictionary part
 768+ EC66             >
 768+ EC66             >                org     Dict_Ptr
 768+ 7F92             >
 768+ 7F92 64 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 768+ 7F94             >
 768+ 7F94             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 768+ 7F94 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 768+ 7F97             >
 768+ 7F97             >
 768+ 7F97             >                endif           ; ok        // for other definitions it "points" the correct handler
 768+ 7F97             >                // Use of "; ok" to suppress "warning[fwdref]"
 768+ 7F97             >
 768+ 7F97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 769+ 7F97 80 79                        dw      FLUSH
 770+ 7F99 C8 78                        dw      EMPTY_BUFFERS
 771+ 7F9B B4 77 89 69                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 771+ 7F9F FF 66 10 69
 772+ 7FA3 81 6A C7 6A                  dw      ZERO, PLUS_ORIGIN
 773+ 7FA7 F0 75                        dw      BASIC
 774+ 7FA9
 775+ 7FA9              //  ______________________________________________________________________
 776+ 7FA9              //
 777+ 7FA9              // invv     --
 778+ 7FA9              //
 779+ 7FA9              //              Colon_Def INVV, "INVV", is_normal
 780+ 7FA9              //              dw      LIT, 20, EMITC, ONE, EMITC
 781+ 7FA9              //              dw      EXIT
 782+ 7FA9
 783+ 7FA9              //  ______________________________________________________________________
 784+ 7FA9              //
 785+ 7FA9              // truv     --
 786+ 7FA9              //
 787+ 7FA9              //              Colon_Def TRUV, "TRUV", is_normal
 788+ 7FA9              //              dw      LIT, 20, EMITC, ZERO, EMITC
 789+ 7FA9              //              dw      EXIT
 790+ 7FA9
 791+ 7FA9              //  ______________________________________________________________________
 792+ 7FA9              //
 793+ 7FA9              // mark     --
 794+ 7FA9              //
 795+ 7FA9              //              Colon_Def MARK, "MARK", is_normal
 796+ 7FA9              //              dw      INVV, TYPE, TRUV
 797+ 7FA9              //              dw      EXIT
 798+ 7FA9
 799+ 7FA9              //  ______________________________________________________________________
 800+ 7FA9              //
 801+ 7FA9              // back     --
 802+ 7FA9              //
 803+ 7FA9                              Colon_Def BACK, "BACK", is_normal
 803+ 7FA9             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 803+ 7FA9             >
 803+ 7FA9             >Dict_Ptr        defl    $
 803+ 7FA9             >
 803+ 7FA9             >//              ______________________________________________________________________
 803+ 7FA9             >//              Heap part
 803+ 7FA9             >
 803+ 7FA9             >
 803+ 7FA9             >                org     (Heap_Ptr & $1FFF) + $E000
 803+ EC66             >
 803+ EC66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 803+ EC66             >Latest_Definition defl  Heap_Ptr
 803+ EC66             >
 803+ EC66             >                // dummy db directives used to calculate length of namec
 803+ EC66 42 41 43 4B >                db      "BACK"
 803+ EC6A             >len_NFA         defl    $ - temp_NFA
 803+ EC6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 803+ EC66             >
 803+ EC66 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 803+ EC67 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 803+ EC6B             >                org     $-1                 // alter last byte of Name just above to set
 803+ EC6A CB          >                db      {b $} | END_BIT     // msb as name end
 803+ EC6B             >
 803+ EC6B 5E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 803+ EC6D             >Prev_Ptr        defl    Heap_Ptr
 803+ EC6D             >
 803+ EC6D             >mirror_Ptr      defl    $
 803+ EC6D             >
 803+ EC6D AB 7F       >                dw      Dict_Ptr + 2        // xt
 803+ EC6F             >Heap_Ptr        defl    $ - $E000           // save current HP
 803+ EC6F             >
 803+ EC6F             >Current_HP      defl  $ - $E000             // used to set HP once!
 803+ EC6F             >
 803+ EC6F             >//              ______________________________________________________________________
 803+ EC6F             >//              Dictionary part
 803+ EC6F             >
 803+ EC6F             >                org     Dict_Ptr
 803+ 7FA9             >
 803+ 7FA9 6D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 803+ 7FAB             >
 803+ 7FAB             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 803+ 7FAB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 803+ 7FAE             >
 803+ 7FAE             >
 803+ 7FAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 803+ 7FAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 803+ 7FAE             >
 803+ 7FAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 804+ 7FAE A6 6B E5 6B                  dw      HERE, SUBTRACT, COMMA
 804+ 7FB2 BC 6B
 805+ 7FB4 52 68                        dw      EXIT
 806+ 7FB6
 807+ 7FB6              //  ______________________________________________________________________
 808+ 7FB6              //
 809+ 7FB6              // if          ( -- a 2 ) \ compile-time
 810+ 7FB6              // IF ... THEN
 811+ 7FB6              // IF ... ELSE ... ENDIF
 812+ 7FB6                              Colon_Def IF, "IF", is_immediate
 812+ 7FB6             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 812+ 7FB6             >
 812+ 7FB6             >Dict_Ptr        defl    $
 812+ 7FB6             >
 812+ 7FB6             >//              ______________________________________________________________________
 812+ 7FB6             >//              Heap part
 812+ 7FB6             >
 812+ 7FB6             >
 812+ 7FB6             >                org     (Heap_Ptr & $1FFF) + $E000
 812+ EC6F             >
 812+ EC6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 812+ EC6F             >Latest_Definition defl  Heap_Ptr
 812+ EC6F             >
 812+ EC6F             >                // dummy db directives used to calculate length of namec
 812+ EC6F 49 46       >                db      "IF"
 812+ EC71             >len_NFA         defl    $ - temp_NFA
 812+ EC71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 812+ EC6F             >
 812+ EC6F C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 812+ EC70 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 812+ EC72             >                org     $-1                 // alter last byte of Name just above to set
 812+ EC71 C6          >                db      {b $} | END_BIT     // msb as name end
 812+ EC72             >
 812+ EC72 66 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 812+ EC74             >Prev_Ptr        defl    Heap_Ptr
 812+ EC74             >
 812+ EC74             >mirror_Ptr      defl    $
 812+ EC74             >
 812+ EC74 B8 7F       >                dw      Dict_Ptr + 2        // xt
 812+ EC76             >Heap_Ptr        defl    $ - $E000           // save current HP
 812+ EC76             >
 812+ EC76             >Current_HP      defl  $ - $E000             // used to set HP once!
 812+ EC76             >
 812+ EC76             >//              ______________________________________________________________________
 812+ EC76             >//              Dictionary part
 812+ EC76             >
 812+ EC76             >                org     Dict_Ptr
 812+ 7FB6             >
 812+ 7FB6 74 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 812+ 7FB8             >
 812+ 7FB8             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 812+ 7FB8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 812+ 7FBB             >
 812+ 7FBB             >
 812+ 7FBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 812+ 7FBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 812+ 7FBB             >
 812+ 7FBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 813+ 7FBB 52 6E F5 63                  dw      COMPILE, ZBRANCH
 814+ 7FBF A6 6B 81 6A                  dw      HERE, ZERO, COMMA
 814+ 7FC3 BC 6B
 815+ 7FC5 8F 6A                        dw      TWO
 816+ 7FC7 52 68                        dw      EXIT
 817+ 7FC9
 818+ 7FC9              //  ______________________________________________________________________
 819+ 7FC9              //
 820+ 7FC9              // then        ( a 2 -- ) \ compile-time
 821+ 7FC9              //
 822+ 7FC9                              Colon_Def THEN, "THEN", is_immediate
 822+ 7FC9             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 822+ 7FC9             >
 822+ 7FC9             >Dict_Ptr        defl    $
 822+ 7FC9             >
 822+ 7FC9             >//              ______________________________________________________________________
 822+ 7FC9             >//              Heap part
 822+ 7FC9             >
 822+ 7FC9             >
 822+ 7FC9             >                org     (Heap_Ptr & $1FFF) + $E000
 822+ EC76             >
 822+ EC76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 822+ EC76             >Latest_Definition defl  Heap_Ptr
 822+ EC76             >
 822+ EC76             >                // dummy db directives used to calculate length of namec
 822+ EC76 54 48 45 4E >                db      "THEN"
 822+ EC7A             >len_NFA         defl    $ - temp_NFA
 822+ EC7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 822+ EC76             >
 822+ EC76 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 822+ EC77 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 822+ EC7B             >                org     $-1                 // alter last byte of Name just above to set
 822+ EC7A CE          >                db      {b $} | END_BIT     // msb as name end
 822+ EC7B             >
 822+ EC7B 6F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 822+ EC7D             >Prev_Ptr        defl    Heap_Ptr
 822+ EC7D             >
 822+ EC7D             >mirror_Ptr      defl    $
 822+ EC7D             >
 822+ EC7D CB 7F       >                dw      Dict_Ptr + 2        // xt
 822+ EC7F             >Heap_Ptr        defl    $ - $E000           // save current HP
 822+ EC7F             >
 822+ EC7F             >Current_HP      defl  $ - $E000             // used to set HP once!
 822+ EC7F             >
 822+ EC7F             >//              ______________________________________________________________________
 822+ EC7F             >//              Dictionary part
 822+ EC7F             >
 822+ EC7F             >                org     Dict_Ptr
 822+ 7FC9             >
 822+ 7FC9 7D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 822+ 7FCB             >
 822+ 7FCB             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 822+ 7FCB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 822+ 7FCE             >
 822+ 7FCE             >
 822+ 7FCE             >                endif           ; ok        // for other definitions it "points" the correct handler
 822+ 7FCE             >                // Use of "; ok" to suppress "warning[fwdref]"
 822+ 7FCE             >
 822+ 7FCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 823+ 7FCE F7 6D                        dw      QCOMP
 824+ 7FD0 8F 6A 1B 6E                  dw      TWO, QPAIRS
 825+ 7FD4 A6 6B 07 69                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 825+ 7FD8 E5 6B 24 69
 825+ 7FDC 93 69
 826+ 7FDE 52 68                        dw      EXIT
 827+ 7FE0
 828+ 7FE0              //  ______________________________________________________________________
 829+ 7FE0              //
 830+ 7FE0              // endif       ( a 2 -- ) \ compile-time
 831+ 7FE0              //
 832+ 7FE0                              Colon_Def ENDIF, "ENDIF", is_immediate
 832+ 7FE0             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 832+ 7FE0             >
 832+ 7FE0             >Dict_Ptr        defl    $
 832+ 7FE0             >
 832+ 7FE0             >//              ______________________________________________________________________
 832+ 7FE0             >//              Heap part
 832+ 7FE0             >
 832+ 7FE0             >
 832+ 7FE0             >                org     (Heap_Ptr & $1FFF) + $E000
 832+ EC7F             >
 832+ EC7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 832+ EC7F             >Latest_Definition defl  Heap_Ptr
 832+ EC7F             >
 832+ EC7F             >                // dummy db directives used to calculate length of namec
 832+ EC7F 45 4E 44 49 >                db      "ENDIF"
 832+ EC83 46          >
 832+ EC84             >len_NFA         defl    $ - temp_NFA
 832+ EC84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 832+ EC7F             >
 832+ EC7F C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 832+ EC80 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 832+ EC84 46          >
 832+ EC85             >                org     $-1                 // alter last byte of Name just above to set
 832+ EC84 C6          >                db      {b $} | END_BIT     // msb as name end
 832+ EC85             >
 832+ EC85 76 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 832+ EC87             >Prev_Ptr        defl    Heap_Ptr
 832+ EC87             >
 832+ EC87             >mirror_Ptr      defl    $
 832+ EC87             >
 832+ EC87 E2 7F       >                dw      Dict_Ptr + 2        // xt
 832+ EC89             >Heap_Ptr        defl    $ - $E000           // save current HP
 832+ EC89             >
 832+ EC89             >Current_HP      defl  $ - $E000             // used to set HP once!
 832+ EC89             >
 832+ EC89             >//              ______________________________________________________________________
 832+ EC89             >//              Dictionary part
 832+ EC89             >
 832+ EC89             >                org     Dict_Ptr
 832+ 7FE0             >
 832+ 7FE0 87 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 832+ 7FE2             >
 832+ 7FE2             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 832+ 7FE2 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 832+ 7FE5             >
 832+ 7FE5             >
 832+ 7FE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 832+ 7FE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 832+ 7FE5             >
 832+ 7FE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 833+ 7FE5 CB 7F                        dw      THEN
 834+ 7FE7 52 68                        dw      EXIT
 835+ 7FE9
 836+ 7FE9              //  ______________________________________________________________________
 837+ 7FE9              //
 838+ 7FE9              // else        ( a1 2 -- a2 2 ) \ compile-time
 839+ 7FE9              //
 840+ 7FE9                              Colon_Def ELSE, "ELSE", is_immediate
 840+ 7FE9             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 840+ 7FE9             >
 840+ 7FE9             >Dict_Ptr        defl    $
 840+ 7FE9             >
 840+ 7FE9             >//              ______________________________________________________________________
 840+ 7FE9             >//              Heap part
 840+ 7FE9             >
 840+ 7FE9             >
 840+ 7FE9             >                org     (Heap_Ptr & $1FFF) + $E000
 840+ EC89             >
 840+ EC89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 840+ EC89             >Latest_Definition defl  Heap_Ptr
 840+ EC89             >
 840+ EC89             >                // dummy db directives used to calculate length of namec
 840+ EC89 45 4C 53 45 >                db      "ELSE"
 840+ EC8D             >len_NFA         defl    $ - temp_NFA
 840+ EC8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 840+ EC89             >
 840+ EC89 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 840+ EC8A 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 840+ EC8E             >                org     $-1                 // alter last byte of Name just above to set
 840+ EC8D C5          >                db      {b $} | END_BIT     // msb as name end
 840+ EC8E             >
 840+ EC8E 7F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 840+ EC90             >Prev_Ptr        defl    Heap_Ptr
 840+ EC90             >
 840+ EC90             >mirror_Ptr      defl    $
 840+ EC90             >
 840+ EC90 EB 7F       >                dw      Dict_Ptr + 2        // xt
 840+ EC92             >Heap_Ptr        defl    $ - $E000           // save current HP
 840+ EC92             >
 840+ EC92             >Current_HP      defl  $ - $E000             // used to set HP once!
 840+ EC92             >
 840+ EC92             >//              ______________________________________________________________________
 840+ EC92             >//              Dictionary part
 840+ EC92             >
 840+ EC92             >                org     Dict_Ptr
 840+ 7FE9             >
 840+ 7FE9 90 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 840+ 7FEB             >
 840+ 7FEB             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 840+ 7FEB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 840+ 7FEE             >
 840+ 7FEE             >
 840+ 7FEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 840+ 7FEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 840+ 7FEE             >
 840+ 7FEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 841+ 7FEE F7 6D                        dw      QCOMP
 842+ 7FF0 8F 6A 1B 6E                  dw      TWO, QPAIRS
 843+ 7FF4 52 6E E8 63                  dw      COMPILE, BRANCH
 844+ 7FF8 A6 6B 81 6A                  dw      HERE, ZERO, COMMA
 844+ 7FFC BC 6B
 845+ 7FFE 24 69 8F 6A                  dw      SWAP, TWO, THEN
 845+ 8002 CB 7F
 846+ 8004 8F 6A                        dw      TWO
 847+ 8006 52 68                        dw      EXIT
 848+ 8008
 849+ 8008              //  ______________________________________________________________________
 850+ 8008              //
 851+ 8008              // begin        ( -- a 1 ) \ compile-time
 852+ 8008              // BEGIN ... AGAIN
 853+ 8008              // BEGIN ... f UNTIL
 854+ 8008              // BEGIN ... f WHILE ... REPEAT
 855+ 8008                              Colon_Def BEGIN, "BEGIN", is_immediate
 855+ 8008             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 855+ 8008             >
 855+ 8008             >Dict_Ptr        defl    $
 855+ 8008             >
 855+ 8008             >//              ______________________________________________________________________
 855+ 8008             >//              Heap part
 855+ 8008             >
 855+ 8008             >
 855+ 8008             >                org     (Heap_Ptr & $1FFF) + $E000
 855+ EC92             >
 855+ EC92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ EC92             >Latest_Definition defl  Heap_Ptr
 855+ EC92             >
 855+ EC92             >                // dummy db directives used to calculate length of namec
 855+ EC92 42 45 47 49 >                db      "BEGIN"
 855+ EC96 4E          >
 855+ EC97             >len_NFA         defl    $ - temp_NFA
 855+ EC97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ EC92             >
 855+ EC92 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ EC93 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 855+ EC97 4E          >
 855+ EC98             >                org     $-1                 // alter last byte of Name just above to set
 855+ EC97 CE          >                db      {b $} | END_BIT     // msb as name end
 855+ EC98             >
 855+ EC98 89 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 855+ EC9A             >Prev_Ptr        defl    Heap_Ptr
 855+ EC9A             >
 855+ EC9A             >mirror_Ptr      defl    $
 855+ EC9A             >
 855+ EC9A 0A 80       >                dw      Dict_Ptr + 2        // xt
 855+ EC9C             >Heap_Ptr        defl    $ - $E000           // save current HP
 855+ EC9C             >
 855+ EC9C             >Current_HP      defl  $ - $E000             // used to set HP once!
 855+ EC9C             >
 855+ EC9C             >//              ______________________________________________________________________
 855+ EC9C             >//              Dictionary part
 855+ EC9C             >
 855+ EC9C             >                org     Dict_Ptr
 855+ 8008             >
 855+ 8008 9A 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 855+ 800A             >
 855+ 800A             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 800A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 855+ 800D             >
 855+ 800D             >
 855+ 800D             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 800D             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 800D             >
 855+ 800D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 800D F7 6D                        dw      QCOMP
 857+ 800F A6 6B                        dw      HERE
 858+ 8011 8F 6A                        dw      TWO
 859+ 8013 52 68                        dw      EXIT
 860+ 8015
 861+ 8015              //  ______________________________________________________________________
 862+ 8015              //
 863+ 8015              // again        ( a 1 -- ) \ compile-time
 864+ 8015                              Colon_Def AGAIN, "AGAIN", is_immediate
 864+ 8015             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 864+ 8015             >
 864+ 8015             >Dict_Ptr        defl    $
 864+ 8015             >
 864+ 8015             >//              ______________________________________________________________________
 864+ 8015             >//              Heap part
 864+ 8015             >
 864+ 8015             >
 864+ 8015             >                org     (Heap_Ptr & $1FFF) + $E000
 864+ EC9C             >
 864+ EC9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 864+ EC9C             >Latest_Definition defl  Heap_Ptr
 864+ EC9C             >
 864+ EC9C             >                // dummy db directives used to calculate length of namec
 864+ EC9C 41 47 41 49 >                db      "AGAIN"
 864+ ECA0 4E          >
 864+ ECA1             >len_NFA         defl    $ - temp_NFA
 864+ ECA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 864+ EC9C             >
 864+ EC9C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 864+ EC9D 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 864+ ECA1 4E          >
 864+ ECA2             >                org     $-1                 // alter last byte of Name just above to set
 864+ ECA1 CE          >                db      {b $} | END_BIT     // msb as name end
 864+ ECA2             >
 864+ ECA2 92 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 864+ ECA4             >Prev_Ptr        defl    Heap_Ptr
 864+ ECA4             >
 864+ ECA4             >mirror_Ptr      defl    $
 864+ ECA4             >
 864+ ECA4 17 80       >                dw      Dict_Ptr + 2        // xt
 864+ ECA6             >Heap_Ptr        defl    $ - $E000           // save current HP
 864+ ECA6             >
 864+ ECA6             >Current_HP      defl  $ - $E000             // used to set HP once!
 864+ ECA6             >
 864+ ECA6             >//              ______________________________________________________________________
 864+ ECA6             >//              Dictionary part
 864+ ECA6             >
 864+ ECA6             >                org     Dict_Ptr
 864+ 8015             >
 864+ 8015 A4 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 864+ 8017             >
 864+ 8017             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 864+ 8017 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 864+ 801A             >
 864+ 801A             >
 864+ 801A             >                endif           ; ok        // for other definitions it "points" the correct handler
 864+ 801A             >                // Use of "; ok" to suppress "warning[fwdref]"
 864+ 801A             >
 864+ 801A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 865+ 801A F7 6D                        dw      QCOMP
 866+ 801C 8F 6A 1B 6E                  dw      TWO, QPAIRS
 867+ 8020 52 6E E8 63                  dw      COMPILE, BRANCH
 868+ 8024 AB 7F                        dw      BACK
 869+ 8026 52 68                        dw      EXIT
 870+ 8028
 871+ 8028              //  ______________________________________________________________________
 872+ 8028              //
 873+ 8028              // until        ( a 1 -- ) \ compile-time
 874+ 8028                              Colon_Def UNTIL, "UNTIL", is_immediate
 874+ 8028             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 874+ 8028             >
 874+ 8028             >Dict_Ptr        defl    $
 874+ 8028             >
 874+ 8028             >//              ______________________________________________________________________
 874+ 8028             >//              Heap part
 874+ 8028             >
 874+ 8028             >
 874+ 8028             >                org     (Heap_Ptr & $1FFF) + $E000
 874+ ECA6             >
 874+ ECA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 874+ ECA6             >Latest_Definition defl  Heap_Ptr
 874+ ECA6             >
 874+ ECA6             >                // dummy db directives used to calculate length of namec
 874+ ECA6 55 4E 54 49 >                db      "UNTIL"
 874+ ECAA 4C          >
 874+ ECAB             >len_NFA         defl    $ - temp_NFA
 874+ ECAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 874+ ECA6             >
 874+ ECA6 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 874+ ECA7 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 874+ ECAB 4C          >
 874+ ECAC             >                org     $-1                 // alter last byte of Name just above to set
 874+ ECAB CC          >                db      {b $} | END_BIT     // msb as name end
 874+ ECAC             >
 874+ ECAC 9C 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 874+ ECAE             >Prev_Ptr        defl    Heap_Ptr
 874+ ECAE             >
 874+ ECAE             >mirror_Ptr      defl    $
 874+ ECAE             >
 874+ ECAE 2A 80       >                dw      Dict_Ptr + 2        // xt
 874+ ECB0             >Heap_Ptr        defl    $ - $E000           // save current HP
 874+ ECB0             >
 874+ ECB0             >Current_HP      defl  $ - $E000             // used to set HP once!
 874+ ECB0             >
 874+ ECB0             >//              ______________________________________________________________________
 874+ ECB0             >//              Dictionary part
 874+ ECB0             >
 874+ ECB0             >                org     Dict_Ptr
 874+ 8028             >
 874+ 8028 AE 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 874+ 802A             >
 874+ 802A             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 874+ 802A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 874+ 802D             >
 874+ 802D             >
 874+ 802D             >                endif           ; ok        // for other definitions it "points" the correct handler
 874+ 802D             >                // Use of "; ok" to suppress "warning[fwdref]"
 874+ 802D             >
 874+ 802D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 875+ 802D F7 6D                        dw      QCOMP
 876+ 802F 8F 6A 1B 6E                  dw      TWO, QPAIRS
 877+ 8033 52 6E F5 63                  dw      COMPILE, ZBRANCH
 878+ 8037 AB 7F                        dw      BACK
 879+ 8039 52 68                        dw      EXIT
 880+ 803B
 881+ 803B              //  ______________________________________________________________________
 882+ 803B              //
 883+ 803B              // end          ( a 1 -- ) \ compile-time
 884+ 803B                              Colon_Def END, "END", is_immediate
 884+ 803B             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 884+ 803B             >
 884+ 803B             >Dict_Ptr        defl    $
 884+ 803B             >
 884+ 803B             >//              ______________________________________________________________________
 884+ 803B             >//              Heap part
 884+ 803B             >
 884+ 803B             >
 884+ 803B             >                org     (Heap_Ptr & $1FFF) + $E000
 884+ ECB0             >
 884+ ECB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 884+ ECB0             >Latest_Definition defl  Heap_Ptr
 884+ ECB0             >
 884+ ECB0             >                // dummy db directives used to calculate length of namec
 884+ ECB0 45 4E 44    >                db      "END"
 884+ ECB3             >len_NFA         defl    $ - temp_NFA
 884+ ECB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 884+ ECB0             >
 884+ ECB0 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 884+ ECB1 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 884+ ECB4             >                org     $-1                 // alter last byte of Name just above to set
 884+ ECB3 C4          >                db      {b $} | END_BIT     // msb as name end
 884+ ECB4             >
 884+ ECB4 A6 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 884+ ECB6             >Prev_Ptr        defl    Heap_Ptr
 884+ ECB6             >
 884+ ECB6             >mirror_Ptr      defl    $
 884+ ECB6             >
 884+ ECB6 3D 80       >                dw      Dict_Ptr + 2        // xt
 884+ ECB8             >Heap_Ptr        defl    $ - $E000           // save current HP
 884+ ECB8             >
 884+ ECB8             >Current_HP      defl  $ - $E000             // used to set HP once!
 884+ ECB8             >
 884+ ECB8             >//              ______________________________________________________________________
 884+ ECB8             >//              Dictionary part
 884+ ECB8             >
 884+ ECB8             >                org     Dict_Ptr
 884+ 803B             >
 884+ 803B B6 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 884+ 803D             >
 884+ 803D             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 884+ 803D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 884+ 8040             >
 884+ 8040             >
 884+ 8040             >                endif           ; ok        // for other definitions it "points" the correct handler
 884+ 8040             >                // Use of "; ok" to suppress "warning[fwdref]"
 884+ 8040             >
 884+ 8040             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 885+ 8040 2A 80                        dw      UNTIL
 886+ 8042 52 68                        dw      EXIT
 887+ 8044
 888+ 8044              //  ______________________________________________________________________
 889+ 8044              //
 890+ 8044              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 891+ 8044                              Colon_Def WHILE, "WHILE", is_immediate
 891+ 8044             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 891+ 8044             >
 891+ 8044             >Dict_Ptr        defl    $
 891+ 8044             >
 891+ 8044             >//              ______________________________________________________________________
 891+ 8044             >//              Heap part
 891+ 8044             >
 891+ 8044             >
 891+ 8044             >                org     (Heap_Ptr & $1FFF) + $E000
 891+ ECB8             >
 891+ ECB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 891+ ECB8             >Latest_Definition defl  Heap_Ptr
 891+ ECB8             >
 891+ ECB8             >                // dummy db directives used to calculate length of namec
 891+ ECB8 57 48 49 4C >                db      "WHILE"
 891+ ECBC 45          >
 891+ ECBD             >len_NFA         defl    $ - temp_NFA
 891+ ECBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 891+ ECB8             >
 891+ ECB8 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 891+ ECB9 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 891+ ECBD 45          >
 891+ ECBE             >                org     $-1                 // alter last byte of Name just above to set
 891+ ECBD C5          >                db      {b $} | END_BIT     // msb as name end
 891+ ECBE             >
 891+ ECBE B0 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 891+ ECC0             >Prev_Ptr        defl    Heap_Ptr
 891+ ECC0             >
 891+ ECC0             >mirror_Ptr      defl    $
 891+ ECC0             >
 891+ ECC0 46 80       >                dw      Dict_Ptr + 2        // xt
 891+ ECC2             >Heap_Ptr        defl    $ - $E000           // save current HP
 891+ ECC2             >
 891+ ECC2             >Current_HP      defl  $ - $E000             // used to set HP once!
 891+ ECC2             >
 891+ ECC2             >//              ______________________________________________________________________
 891+ ECC2             >//              Dictionary part
 891+ ECC2             >
 891+ ECC2             >                org     Dict_Ptr
 891+ 8044             >
 891+ 8044 C0 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 891+ 8046             >
 891+ 8046             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 891+ 8046 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 891+ 8049             >
 891+ 8049             >
 891+ 8049             >                endif           ; ok        // for other definitions it "points" the correct handler
 891+ 8049             >                // Use of "; ok" to suppress "warning[fwdref]"
 891+ 8049             >
 891+ 8049             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 892+ 8049 B8 7F                        dw      IF
 893+ 804B              //              dw      TWO_PLUS // ( that is 4 )
 894+ 804B 5A 69                        dw      TWO_SWAP
 895+ 804D 52 68                        dw      EXIT
 896+ 804F
 897+ 804F              //  ______________________________________________________________________
 898+ 804F              //
 899+ 804F              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 900+ 804F                              Colon_Def REPEAT, "REPEAT", is_immediate
 900+ 804F             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 900+ 804F             >
 900+ 804F             >Dict_Ptr        defl    $
 900+ 804F             >
 900+ 804F             >//              ______________________________________________________________________
 900+ 804F             >//              Heap part
 900+ 804F             >
 900+ 804F             >
 900+ 804F             >                org     (Heap_Ptr & $1FFF) + $E000
 900+ ECC2             >
 900+ ECC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 900+ ECC2             >Latest_Definition defl  Heap_Ptr
 900+ ECC2             >
 900+ ECC2             >                // dummy db directives used to calculate length of namec
 900+ ECC2 52 45 50 45 >                db      "REPEAT"
 900+ ECC6 41 54       >
 900+ ECC8             >len_NFA         defl    $ - temp_NFA
 900+ ECC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 900+ ECC2             >
 900+ ECC2 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 900+ ECC3 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 900+ ECC7 41 54       >
 900+ ECC9             >                org     $-1                 // alter last byte of Name just above to set
 900+ ECC8 D4          >                db      {b $} | END_BIT     // msb as name end
 900+ ECC9             >
 900+ ECC9 B8 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 900+ ECCB             >Prev_Ptr        defl    Heap_Ptr
 900+ ECCB             >
 900+ ECCB             >mirror_Ptr      defl    $
 900+ ECCB             >
 900+ ECCB 51 80       >                dw      Dict_Ptr + 2        // xt
 900+ ECCD             >Heap_Ptr        defl    $ - $E000           // save current HP
 900+ ECCD             >
 900+ ECCD             >Current_HP      defl  $ - $E000             // used to set HP once!
 900+ ECCD             >
 900+ ECCD             >//              ______________________________________________________________________
 900+ ECCD             >//              Dictionary part
 900+ ECCD             >
 900+ ECCD             >                org     Dict_Ptr
 900+ 804F             >
 900+ 804F CB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 900+ 8051             >
 900+ 8051             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 900+ 8051 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 900+ 8054             >
 900+ 8054             >
 900+ 8054             >                endif           ; ok        // for other definitions it "points" the correct handler
 900+ 8054             >                // Use of "; ok" to suppress "warning[fwdref]"
 900+ 8054             >
 900+ 8054             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 901+ 8054 17 80                        dw      AGAIN
 902+ 8056              //              dw      TWO_MINUS
 903+ 8056 CB 7F                        dw      THEN
 904+ 8058 52 68                        dw      EXIT
 905+ 805A
 906+ 805A              //  ______________________________________________________________________
 907+ 805A              //
 908+ 805A              // ?do-
 909+ 805A              // special version of "BACK" used by ?DO and LOOP
 910+ 805A                              Colon_Def C_DO_BACK, "?DO-", is_normal
 910+ 805A             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 910+ 805A             >
 910+ 805A             >Dict_Ptr        defl    $
 910+ 805A             >
 910+ 805A             >//              ______________________________________________________________________
 910+ 805A             >//              Heap part
 910+ 805A             >
 910+ 805A             >
 910+ 805A             >                org     (Heap_Ptr & $1FFF) + $E000
 910+ ECCD             >
 910+ ECCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 910+ ECCD             >Latest_Definition defl  Heap_Ptr
 910+ ECCD             >
 910+ ECCD             >                // dummy db directives used to calculate length of namec
 910+ ECCD 3F 44 4F 2D >                db      "?DO-"
 910+ ECD1             >len_NFA         defl    $ - temp_NFA
 910+ ECD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 910+ ECCD             >
 910+ ECCD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 910+ ECCE 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 910+ ECD2             >                org     $-1                 // alter last byte of Name just above to set
 910+ ECD1 AD          >                db      {b $} | END_BIT     // msb as name end
 910+ ECD2             >
 910+ ECD2 C2 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 910+ ECD4             >Prev_Ptr        defl    Heap_Ptr
 910+ ECD4             >
 910+ ECD4             >mirror_Ptr      defl    $
 910+ ECD4             >
 910+ ECD4 5C 80       >                dw      Dict_Ptr + 2        // xt
 910+ ECD6             >Heap_Ptr        defl    $ - $E000           // save current HP
 910+ ECD6             >
 910+ ECD6             >Current_HP      defl  $ - $E000             // used to set HP once!
 910+ ECD6             >
 910+ ECD6             >//              ______________________________________________________________________
 910+ ECD6             >//              Dictionary part
 910+ ECD6             >
 910+ ECD6             >                org     Dict_Ptr
 910+ 805A             >
 910+ 805A D4 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 910+ 805C             >
 910+ 805C             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 910+ 805C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 910+ 805F             >
 910+ 805F             >
 910+ 805F             >                endif           ; ok        // for other definitions it "points" the correct handler
 910+ 805F             >                // Use of "; ok" to suppress "warning[fwdref]"
 910+ 805F             >
 910+ 805F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 911+ 805F AB 7F                        dw      BACK
 912+ 8061              CDoBack_Begin:
 913+ 8061 39 68 64 6B                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 913+ 8065 89 69 E5 6B
 914+ 8069 F5 63                        dw      ZBRANCH
 915+ 806B 0A 00                        dw      CDoBack_While - $
 916+ 806D CC 68 CB 7F                  dw          TWO_PLUS, THEN
 917+ 8071 E8 63                        dw      BRANCH
 918+ 8073 EE FF                        dw      CDoBack_Begin - $
 919+ 8075              CDoBack_While:
 920+ 8075 2A 6E 64 6B                  dw      QCSP, CSP, STORE
 920+ 8079 93 69
 921+ 807B 52 68                        dw      EXIT
 922+ 807D
 923+ 807D              //  ______________________________________________________________________
 924+ 807D              //
 925+ 807D              // do
 926+ 807D              // DO  ... LOOP
 927+ 807D              // DO  ... n +LOOP
 928+ 807D              // ?DO ... LOOP
 929+ 807D              // ?DO ... n +LOOP
 930+ 807D                              Colon_Def DO, "DO", is_immediate
 930+ 807D             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 930+ 807D             >
 930+ 807D             >Dict_Ptr        defl    $
 930+ 807D             >
 930+ 807D             >//              ______________________________________________________________________
 930+ 807D             >//              Heap part
 930+ 807D             >
 930+ 807D             >
 930+ 807D             >                org     (Heap_Ptr & $1FFF) + $E000
 930+ ECD6             >
 930+ ECD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 930+ ECD6             >Latest_Definition defl  Heap_Ptr
 930+ ECD6             >
 930+ ECD6             >                // dummy db directives used to calculate length of namec
 930+ ECD6 44 4F       >                db      "DO"
 930+ ECD8             >len_NFA         defl    $ - temp_NFA
 930+ ECD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 930+ ECD6             >
 930+ ECD6 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 930+ ECD7 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 930+ ECD9             >                org     $-1                 // alter last byte of Name just above to set
 930+ ECD8 CF          >                db      {b $} | END_BIT     // msb as name end
 930+ ECD9             >
 930+ ECD9 CD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 930+ ECDB             >Prev_Ptr        defl    Heap_Ptr
 930+ ECDB             >
 930+ ECDB             >mirror_Ptr      defl    $
 930+ ECDB             >
 930+ ECDB 7F 80       >                dw      Dict_Ptr + 2        // xt
 930+ ECDD             >Heap_Ptr        defl    $ - $E000           // save current HP
 930+ ECDD             >
 930+ ECDD             >Current_HP      defl  $ - $E000             // used to set HP once!
 930+ ECDD             >
 930+ ECDD             >//              ______________________________________________________________________
 930+ ECDD             >//              Dictionary part
 930+ ECDD             >
 930+ ECDD             >                org     Dict_Ptr
 930+ 807D             >
 930+ 807D DB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 930+ 807F             >
 930+ 807F             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 930+ 807F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 930+ 8082             >
 930+ 8082             >
 930+ 8082             >                endif           ; ok        // for other definitions it "points" the correct handler
 930+ 8082             >                // Use of "; ok" to suppress "warning[fwdref]"
 930+ 8082             >
 930+ 8082             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 931+ 8082 52 6E 34 64                  dw      COMPILE, C_DO
 932+ 8086 64 6B 89 69                  dw      CSP, FETCH, STORE_CSP
 932+ 808A D5 6D
 933+ 808C A6 6B 96 6A                  dw      HERE, THREE
 934+ 8090 52 68                        dw      EXIT
 935+ 8092
 936+ 8092              //  ______________________________________________________________________
 937+ 8092              //
 938+ 8092              // loop
 939+ 8092                              Colon_Def LOOP, "LOOP", is_immediate
 939+ 8092             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 939+ 8092             >
 939+ 8092             >Dict_Ptr        defl    $
 939+ 8092             >
 939+ 8092             >//              ______________________________________________________________________
 939+ 8092             >//              Heap part
 939+ 8092             >
 939+ 8092             >
 939+ 8092             >                org     (Heap_Ptr & $1FFF) + $E000
 939+ ECDD             >
 939+ ECDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 939+ ECDD             >Latest_Definition defl  Heap_Ptr
 939+ ECDD             >
 939+ ECDD             >                // dummy db directives used to calculate length of namec
 939+ ECDD 4C 4F 4F 50 >                db      "LOOP"
 939+ ECE1             >len_NFA         defl    $ - temp_NFA
 939+ ECE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 939+ ECDD             >
 939+ ECDD C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 939+ ECDE 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 939+ ECE2             >                org     $-1                 // alter last byte of Name just above to set
 939+ ECE1 D0          >                db      {b $} | END_BIT     // msb as name end
 939+ ECE2             >
 939+ ECE2 D6 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 939+ ECE4             >Prev_Ptr        defl    Heap_Ptr
 939+ ECE4             >
 939+ ECE4             >mirror_Ptr      defl    $
 939+ ECE4             >
 939+ ECE4 94 80       >                dw      Dict_Ptr + 2        // xt
 939+ ECE6             >Heap_Ptr        defl    $ - $E000           // save current HP
 939+ ECE6             >
 939+ ECE6             >Current_HP      defl  $ - $E000             // used to set HP once!
 939+ ECE6             >
 939+ ECE6             >//              ______________________________________________________________________
 939+ ECE6             >//              Dictionary part
 939+ ECE6             >
 939+ ECE6             >                org     Dict_Ptr
 939+ 8092             >
 939+ 8092 E4 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 939+ 8094             >
 939+ 8094             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 939+ 8094 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 939+ 8097             >
 939+ 8097             >
 939+ 8097             >                endif           ; ok        // for other definitions it "points" the correct handler
 939+ 8097             >                // Use of "; ok" to suppress "warning[fwdref]"
 939+ 8097             >
 939+ 8097             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 940+ 8097 96 6A 1B 6E                  dw      THREE, QPAIRS
 941+ 809B 52 6E E0 63                  dw      COMPILE, C_LOOP
 942+ 809F 5C 80                        dw      C_DO_BACK
 943+ 80A1 52 68                        dw      EXIT
 944+ 80A3
 945+ 80A3              //  ______________________________________________________________________
 946+ 80A3              //
 947+ 80A3              // +loop
 948+ 80A3                              Colon_Def PLOOP, "+LOOP", is_immediate
 948+ 80A3             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 948+ 80A3             >
 948+ 80A3             >Dict_Ptr        defl    $
 948+ 80A3             >
 948+ 80A3             >//              ______________________________________________________________________
 948+ 80A3             >//              Heap part
 948+ 80A3             >
 948+ 80A3             >
 948+ 80A3             >                org     (Heap_Ptr & $1FFF) + $E000
 948+ ECE6             >
 948+ ECE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ ECE6             >Latest_Definition defl  Heap_Ptr
 948+ ECE6             >
 948+ ECE6             >                // dummy db directives used to calculate length of namec
 948+ ECE6 2B 4C 4F 4F >                db      "+LOOP"
 948+ ECEA 50          >
 948+ ECEB             >len_NFA         defl    $ - temp_NFA
 948+ ECEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ ECE6             >
 948+ ECE6 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ ECE7 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 948+ ECEB 50          >
 948+ ECEC             >                org     $-1                 // alter last byte of Name just above to set
 948+ ECEB D0          >                db      {b $} | END_BIT     // msb as name end
 948+ ECEC             >
 948+ ECEC DD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 948+ ECEE             >Prev_Ptr        defl    Heap_Ptr
 948+ ECEE             >
 948+ ECEE             >mirror_Ptr      defl    $
 948+ ECEE             >
 948+ ECEE A5 80       >                dw      Dict_Ptr + 2        // xt
 948+ ECF0             >Heap_Ptr        defl    $ - $E000           // save current HP
 948+ ECF0             >
 948+ ECF0             >Current_HP      defl  $ - $E000             // used to set HP once!
 948+ ECF0             >
 948+ ECF0             >//              ______________________________________________________________________
 948+ ECF0             >//              Dictionary part
 948+ ECF0             >
 948+ ECF0             >                org     Dict_Ptr
 948+ 80A3             >
 948+ 80A3 EE 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 948+ 80A5             >
 948+ 80A5             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 80A5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 80A8             >
 948+ 80A8             >
 948+ 80A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 80A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 80A8             >
 948+ 80A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 80A8 96 6A 1B 6E                  dw      THREE, QPAIRS
 950+ 80AC 52 6E B1 63                  dw      COMPILE, C_PLOOP
 951+ 80B0 5C 80                        dw      C_DO_BACK
 952+ 80B2 52 68                        dw      EXIT
 953+ 80B4
 954+ 80B4              //  ______________________________________________________________________
 955+ 80B4              //
 956+ 80B4              // ?do
 957+ 80B4                              Colon_Def QDO, "?DO", is_immediate
 957+ 80B4             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 957+ 80B4             >
 957+ 80B4             >Dict_Ptr        defl    $
 957+ 80B4             >
 957+ 80B4             >//              ______________________________________________________________________
 957+ 80B4             >//              Heap part
 957+ 80B4             >
 957+ 80B4             >
 957+ 80B4             >                org     (Heap_Ptr & $1FFF) + $E000
 957+ ECF0             >
 957+ ECF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 957+ ECF0             >Latest_Definition defl  Heap_Ptr
 957+ ECF0             >
 957+ ECF0             >                // dummy db directives used to calculate length of namec
 957+ ECF0 3F 44 4F    >                db      "?DO"
 957+ ECF3             >len_NFA         defl    $ - temp_NFA
 957+ ECF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 957+ ECF0             >
 957+ ECF0 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 957+ ECF1 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 957+ ECF4             >                org     $-1                 // alter last byte of Name just above to set
 957+ ECF3 CF          >                db      {b $} | END_BIT     // msb as name end
 957+ ECF4             >
 957+ ECF4 E6 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 957+ ECF6             >Prev_Ptr        defl    Heap_Ptr
 957+ ECF6             >
 957+ ECF6             >mirror_Ptr      defl    $
 957+ ECF6             >
 957+ ECF6 B6 80       >                dw      Dict_Ptr + 2        // xt
 957+ ECF8             >Heap_Ptr        defl    $ - $E000           // save current HP
 957+ ECF8             >
 957+ ECF8             >Current_HP      defl  $ - $E000             // used to set HP once!
 957+ ECF8             >
 957+ ECF8             >//              ______________________________________________________________________
 957+ ECF8             >//              Dictionary part
 957+ ECF8             >
 957+ ECF8             >                org     Dict_Ptr
 957+ 80B4             >
 957+ 80B4 F6 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 957+ 80B6             >
 957+ 80B6             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 957+ 80B6 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 957+ 80B9             >
 957+ 80B9             >
 957+ 80B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 957+ 80B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 957+ 80B9             >
 957+ 80B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 958+ 80B9 52 6E 0C 64                  dw      COMPILE, C_Q_DO
 959+ 80BD 64 6B 89 69                  dw      CSP, FETCH, STORE_CSP
 959+ 80C1 D5 6D
 960+ 80C3 A6 6B 81 6A                  dw      HERE, ZERO, COMMA, ZERO
 960+ 80C7 BC 6B 81 6A
 961+ 80CB A6 6B 96 6A                  dw      HERE, THREE
 962+ 80CF 52 68                        dw      EXIT
 963+ 80D1
 964+ 80D1              //  ______________________________________________________________________
 965+ 80D1              //
 966+ 80D1              // \
 967+ 80D1                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 967+ 80D1             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 967+ 80D1             >
 967+ 80D1             >Dict_Ptr        defl    $
 967+ 80D1             >
 967+ 80D1             >//              ______________________________________________________________________
 967+ 80D1             >//              Heap part
 967+ 80D1             >
 967+ 80D1             >
 967+ 80D1             >                org     (Heap_Ptr & $1FFF) + $E000
 967+ ECF8             >
 967+ ECF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 967+ ECF8             >Latest_Definition defl  Heap_Ptr
 967+ ECF8             >
 967+ ECF8             >                // dummy db directives used to calculate length of namec
 967+ ECF8 5C          >                db      "\\"
 967+ ECF9             >len_NFA         defl    $ - temp_NFA
 967+ ECF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 967+ ECF8             >
 967+ ECF8 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 967+ ECF9 5C          >                db      "\\"               // name string in 7-bit ascii, but
 967+ ECFA             >                org     $-1                 // alter last byte of Name just above to set
 967+ ECF9 DC          >                db      {b $} | END_BIT     // msb as name end
 967+ ECFA             >
 967+ ECFA F0 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 967+ ECFC             >Prev_Ptr        defl    Heap_Ptr
 967+ ECFC             >
 967+ ECFC             >mirror_Ptr      defl    $
 967+ ECFC             >
 967+ ECFC D3 80       >                dw      Dict_Ptr + 2        // xt
 967+ ECFE             >Heap_Ptr        defl    $ - $E000           // save current HP
 967+ ECFE             >
 967+ ECFE             >Current_HP      defl  $ - $E000             // used to set HP once!
 967+ ECFE             >
 967+ ECFE             >//              ______________________________________________________________________
 967+ ECFE             >//              Dictionary part
 967+ ECFE             >
 967+ ECFE             >                org     Dict_Ptr
 967+ 80D1             >
 967+ 80D1 FC 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 967+ 80D3             >
 967+ 80D3             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 967+ 80D3 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 967+ 80D6             >
 967+ 80D6             >
 967+ 80D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 967+ 80D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 967+ 80D6             >
 967+ 80D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 968+ 80D6 22 6B 89 69                  dw      BLK, FETCH
 969+ 80DA F5 63                        dw      ZBRANCH
 970+ 80DC 30 00                        dw      Backslash_Else_1 - $
 971+ 80DE 22 6B 89 69                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 971+ 80E2 88 6A 1F 6C
 972+ 80E6 F5 63                        dw          ZBRANCH
 973+ 80E8 18 00                        dw          Backslash_Else_2 - $
 974+ 80EA 28 6B 89 69                  dw              TO_IN, FETCH, CL, MOD, CL
 974+ 80EE AB 6A E4 76
 974+ 80F2 AB 6A
 975+ 80F4 24 69 E5 6B                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 975+ 80F8 28 6B 71 69
 976+ 80FC E8 63                        dw          BRANCH
 977+ 80FE 0A 00                        dw          Backslash_Endif_2 - $
 978+ 8100              Backslash_Else_2:
 979+ 8100 B2 6A D9 68                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 979+ 8104 28 6B 93 69
 980+ 8108              Backslash_Endif_2:
 981+ 8108 E8 63                        dw      BRANCH
 982+ 810A 10 00                        dw      Backslash_Endif_1 - $
 983+ 810C              Backslash_Else_1:
 984+ 810C 81 6A E6 6A                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
 984+ 8110 89 69 28 6B
 984+ 8114 89 69 A5 68
 984+ 8118 93 69
 985+ 811A              Backslash_Endif_1:
 986+ 811A 52 68                        dw      EXIT
 987+ 811C
 988+ 811C              Fence_Word:
 989+ 811C              //  ______________________________________________________________________
 990+ 811C              //
 991+ 811C
 992+ 811C 00           Here_Dictionary db      0
 993+ 811D
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
 125  811D
 126  811D              // now we save the compiled file so we can either run it or debug it
 127  811D                              SAVENEX OPEN "output/main.nex", ORIGIN
 128  811D                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 129  811D                              SAVENEX CFG  0
 130  811D                              SAVENEX BANK 2, 0
 131  811D                              SAVENEX AUTO
 132  811D                              SAVENEX CLOSE
 133  811D
 134  811D              //              PAGE 7 ;set 7 page to current slot
 135  811D              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 136  811D              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 137  811D
 138  811D                              SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, 9999
 139  811D                              SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 140  811D
 141  811D                              SAVEBIN "output/forth17d.bin", ORIGIN, 9999
 142  811D                              SAVEBIN "output/ram7.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 143  811D
 144  811D                              // To load on ZX Spectrum Next you have to type
 145  811D                              //      LOAD "ram7.bin" BANK 16
 146  811D                              //      LOAD "forth17d.bin" CODE
 147  811D
 148  811D                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
