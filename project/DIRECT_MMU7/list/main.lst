# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  build 20231004
   8  0000              //
   9  0000              //  Direct-Threaded version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2023
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     0
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  68  0000 ~            ORIGIN          equ     $9B21   -$80             // for binary comparison with single compilation
  69  0000 ~            Heap_Ptr        defl    $1F80                       // HP before compilation
  70  0000 ~            Heap_offset     defl    $2000
  71  0000 ~
  72  0000                              endif
  73  0000              //  ______________________________________________________________________
  74  0000
  75  0000                              if (  0 == DEBUGGING )
  76  0000              ORIGIN          equ     $6366                   // binary and Tape
  77  0000              // ORIGIN          equ     $9A93                // binary and Tape
  78  0000              Heap_Ptr        defl    $0002
  79  0000              Heap_offset     defl     0
  80  0000
  81  0000                              endif
  82  0000              //  ______________________________________________________________________
  83  0000
  84  0000                              if (  1 == DEBUGGING )
  85  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  86  0000 ~            Heap_Ptr        defl    $0002
  87  0000 ~            Heap_offset     defl     0
  88  0000 ~
  89  0000                              endif
  90  0000              //  ______________________________________________________________________
  91  0000
  92  0000                              DEVICE  ZXSPECTRUMNEXT
  93  0000
  94  0000                              ORG     ORIGIN
  95  6366
  96  6366                              if ( -1 == DEBUGGING )
  97  6366 ~                            ds 128                            // for binary comparison
  98  6366                              endif
  99  6366
 100  6366              //  ______________________________________________________________________
 101  6366              //
 102  6366              //  Naming convention for Label vs Forth correspondance
 103  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 104  6366              //    - Leading "0" is converted into "Z_"
 105  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
 106  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 107  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 108  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 109  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 110  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 111  6366              //    - Equal sign "=" is converted in EQUAL
 112  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 113  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 114  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 115  6366              //    - Exclamation mark "!" is converted in STORE
 116  6366              //    - At-Sign "@" is converted in FETCH
 117  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 118  6366
 119  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              Dict_Ptr        defl    0
  94+ 6366              // Heap_Ptr        defl    $0002
  95+ 6366              Prev_Ptr        defl    0
  96+ 6366              mirror_Ptr      defl    0
  97+ 6366
  98+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  99+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
 100+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 101+ 6366
 102+ 6366
 103+ 6366              Behave          macro   xp
 104+ 6366 ~            temp_PTR        defl    $                   // save this org
 105+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 106+ 6366 ~                            dw      xp
 107+ 6366 ~                            org     temp_PTR
 108+ 6366                              endm
 109+ 6366
 110+ 6366              //  ______________________________________________________________________
 111+ 6366              //
 112+ 6366              //  Create a new "low-level" definition
 113+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 114+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 115+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 116+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 117+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 118+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 119+ 6366              //  This macro acts much like the standard Forth definition CREATE
 120+ 6366
 121+ 6366              New_Def         macro   label, namec, runcode, bits
 122+ 6366 ~
 123+ 6366 ~            Dict_Ptr        defl    $
 124+ 6366 ~
 125+ 6366 ~            //              ______________________________________________________________________
 126+ 6366 ~            //              Heap part
 127+ 6366 ~
 128+ 6366 ~
 129+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 130+ 6366 ~
 131+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 6366 ~            Latest_Definition defl  Heap_Ptr
 133+ 6366 ~
 134+ 6366 ~                            // dummy db directives used to calculate length of namec
 135+ 6366 ~                            db      namec
 136+ 6366 ~            len_NFA         defl    $ - temp_NFA
 137+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 6366 ~
 139+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 141+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 142+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 143+ 6366 ~
 144+ 6366 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 145+ 6366 ~            Prev_Ptr        defl    Heap_Ptr
 146+ 6366 ~
 147+ 6366 ~            mirror_Ptr      defl    $
 148+ 6366 ~
 149+ 6366 ~                            dw      Dict_Ptr + 2        // xt
 150+ 6366 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 151+ 6366 ~
 152+ 6366 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 153+ 6366 ~
 154+ 6366 ~            //              ______________________________________________________________________
 155+ 6366 ~            //              Dictionary part
 156+ 6366 ~
 157+ 6366 ~                            org     Dict_Ptr
 158+ 6366 ~
 159+ 6366 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 160+ 6366 ~
 161+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 163+ 6366 ~
 164+ 6366 ~
 165+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6366 ~
 168+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6366                              endm
 170+ 6366
 171+ 6366              //  ______________________________________________________________________
 172+ 6366              //
 173+ 6366              // Create a "constant"
 174+ 6366              // The constant value is compiled in first PFA cell
 175+ 6366              Constant_Def    macro   label, namec, constant_value
 176+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 177+ 6366 ~                            dw      constant_value
 178+ 6366                              endm
 179+ 6366
 180+ 6366              //  ______________________________________________________________________
 181+ 6366              //
 182+ 6366              // Create a "variable"
 183+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 184+ 6366              // this allow creation of "variables" which content is  of any length
 185+ 6366              Variable_Def    macro   label, namec, initial_value
 186+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 187+ 6366 ~                            dw      initial_value
 188+ 6366                              endm
 189+ 6366
 190+ 6366              //  ______________________________________________________________________
 191+ 6366              //
 192+ 6366              // Create a "user"
 193+ 6366              // It uses a single byte as offset to calculate the address of the variable
 194+ 6366              User_Def        macro   label, namec, offset_value
 195+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 196+ 6366 ~                            db      offset_value
 197+ 6366                              endm
 198+ 6366
 199+ 6366              //  ______________________________________________________________________
 200+ 6366              //
 201+ 6366              // Create a "colon-definition"
 202+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 203+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 204+ 6366              Colon_Def       macro   label, namec, bits
 205+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 206+ 6366                              endm
 207+ 6366
 208+ 6366              //  ______________________________________________________________________
 209+ 6366              //
 210+ 6366              // Create a "heap-string"
 211+ 6366              Start_Heap      macro
 212+ 6366 ~            temp_ORG        defl    $                   // save this ORG
 213+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 214+ 6366 ~
 215+ 6366                              endm
 216+ 6366
 217+ 6366              End_Heap        macro
 218+ 6366 ~            Heap_Ptr        defl    $ - $E000
 219+ 6366 ~                            org     temp_ORG
 220+ 6366 ~
 221+ 6366                              endm
 222+ 6366
 223+ 6366
 224+ 6366              //  ______________________________________________________________________
 225+ 6366              //
 226+ 6366
 227+ 6366
 228+ 6366
 229+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 230+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 231+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 232+ 6366              USER_system:    equ     $D188               // User variables zone.
 233+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 234+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 235+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
 120  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366              Cold_origin:
   9+ 6366 A7                           and     a
  10+ 6367 C3 3E 76                     jp      ColdRoutine
  11+ 636A              Warm_origin:
  12+ 636A 37                           scf
  13+ 636B C3 3E 76                     jp      WarmRoutine
  14+ 636E
  15+ 636E              // +008
  16+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  17+ 6370
  18+ 6370              // +00A
  19+ 6370 00 0E                        dw      $0E00
  20+ 6372
  21+ 6372              // +00C
  22+ 6372 1A 0D        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 6374
  24+ 6374              // +00E
  25+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 6376
  27+ 6376              // +010
  28+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 6378
  30+ 6378              // +012
  31+ 6378 E8 D0        S0_origin:      dw      S0_system
  32+ 637A 88 D1        R0_origin:      dw      R0_system
  33+ 637C E8 D0        TIB_origin:     dw      TIB_system
  34+ 637E 1F 00        WIDTH_origin:   dw      31
  35+ 6380 01 00        WARNING_origin: dw      1
  36+ 6382 92 81        FENCE_origin:   dw      Fence_Word
  37+ 6384 92 81        DP_origin       dw      Fence_Word
  38+ 6386 53 75        VOCLINK_origin: dw      Voclink_Ptr
  39+ 6388 E4 D1                        dw      FIRST_system
  40+ 638A 00 E0                        dw      LIMIT_system
  41+ 638C 20 0D        HP_origin:      dw      Current_HP
  42+ 638E
  43+ 638E              // +028
  44+ 638E 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638F 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6390 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6391 00                           db      0
  48+ 6392
  49+ 6392              // +02C
  50+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  51+ 6394
  52+ 6394              // +02E
  53+ 6394 88 D1        USER_Pointer:   dw      USER_system
  54+ 6396
  55+ 6396              // +030
  56+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 6398
  58+ 6398              // +32
  59+ 6398 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 639A
  61+ 639A
  62+ 639A                              Start_Heap
  62+ 639A             >temp_ORG        defl    $                   // save this ORG
  62+ 639A             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002 6F                           db      120 - 9
  65+ E003 20 76 2D 46                  db      " v-Forth 1.7 - NextZXOS version ", $0D      // 36
  65+ E007 6F 72 74 68
  65+ E00B 20 31 2E 37
  65+ E00F 20 2D 20 4E
  65+ E013 65 78 74 5A
  65+ E017 58 4F 53 20
  65+ E01B 76 65 72 73
  65+ E01F 69 6F 6E 20
  65+ E023 0D
  66+ E024 20 48 65 61                  db      " Heap Vocabulary - build 2023-10-04 ", $0D  // 40
  66+ E028 70 20 56 6F
  66+ E02C 63 61 62 75
  66+ E030 6C 61 72 79
  66+ E034 20 2D 20 62
  66+ E038 75 69 6C 64
  66+ E03C 20 32 30 32
  66+ E040 33 2D 31 30
  66+ E044 2D 30 34 20
  66+ E048 0D
  67+ E049 20 4D 49 54                  db      " MIT License ", 127                         // 17
  67+ E04D 20 4C 69 63
  67+ E051 65 6E 73 65
  67+ E055 20 7F
  68+ E057 20 31 39 39                  db      " 1990-2023 Matteo Vitturi ", $0D            // 27
  68+ E05B 30 2D 32 30
  68+ E05F 32 33 20 4D
  68+ E063 61 74 74 65
  68+ E067 6F 20 56 69
  68+ E06B 74 74 75 72
  68+ E06F 69 20 0D
  69+ E072 20                           db      " "
  70+ E073                              End_Heap
  70+ E073             >Heap_Ptr        defl    $ - $E000
  70+ E073             >                org     temp_ORG
  70+ 639A             >
  71+ 639A
  72+ 639A              //  ______________________________________________________________________
  73+ 639A
  74+ 639A              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 639A              // instead of their equivalent long sequences.
  76+ 639A
  77+ 639A              //  ______________________________________________________________________
  78+ 639A
  79+ 639A              // address for "next" - inner interpreter
  80+ 639A              // This address must always be pointed by IX
  81+ 639A              // "next" macro simply does a  jp(ix)  instruction
  82+ 639A
  83+ 639A              // Psh2_Ptr:       push    de
  84+ 639A              // Psh1_Ptr:       push    hl
  85+ 639A
  86+ 639A              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 639A
  88+ 639A                              if ( 1 == DEBUGGING )
  89+ 639A ~                            ld      hl, Next_Breakpoint_1
  90+ 639A ~                            and     a
  91+ 639A ~                            sbc     hl, bc
  92+ 639A ~                            jr      nz, Next_Continue
  93+ 639A ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 639A                              endif
  95+ 639A
  96+ 639A              Next_Continue:
  97+ 639A 0A                           ld      a, (bc)
  98+ 639B 03                           inc     bc
  99+ 639C 6F                           ld      l, a
 100+ 639D 0A                           ld      a, (bc)
 101+ 639E 03                           inc     bc
 102+ 639F 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 63A0
 104+ 63A0              // Execute xt i.e. CFA held in HL
 105+ 63A0              Exec_Ptr:
 106+ 63A0
 107+ 63A0
 108+ 63A0
 109+ 63A0
 110+ 63A0 E9                           jp      (hl)                // and jump to it
 111+ 63A1                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 63A1
 113+ 63A1              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 63A1              // 0x00         n --      ( compile time )
 115+ 63A1              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 63A1              //              next
 117+ 63A1
 118+ 63A1              //  ______________________________________________________________________
 119+ 63A1              //
 120+ 63A1              // lit          -- x
 121+ 63A1              // puts on top of stack the value of the following word.
 122+ 63A1              // it is compiled in colon definition before a literal number
 123+ 63A1
 124+ 63A1                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 63A1             >
 124+ 63A1             >Dict_Ptr        defl    $
 124+ 63A1             >
 124+ 63A1             >//              ______________________________________________________________________
 124+ 63A1             >//              Heap part
 124+ 63A1             >
 124+ 63A1             >
 124+ 63A1             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E073             >
 124+ E073             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E073             >Latest_Definition defl  Heap_Ptr
 124+ E073             >
 124+ E073             >                // dummy db directives used to calculate length of namec
 124+ E073 4C 49 54    >                db      "LIT"
 124+ E076             >len_NFA         defl    $ - temp_NFA
 124+ E076             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E073             >
 124+ E073 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E074 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E077             >                org     $-1                 // alter last byte of Name just above to set
 124+ E076 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E077             >
 124+ E077 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E079             >Prev_Ptr        defl    Heap_Ptr
 124+ E079             >
 124+ E079             >mirror_Ptr      defl    $
 124+ E079             >
 124+ E079 A3 63       >                dw      Dict_Ptr + 2        // xt
 124+ E07B             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E07B             >
 124+ E07B             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E07B             >
 124+ E07B             >//              ______________________________________________________________________
 124+ E07B             >//              Dictionary part
 124+ E07B             >
 124+ E07B             >                org     Dict_Ptr
 124+ 63A1             >
 124+ 63A1 79 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 63A3             >
 124+ 63A3             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 63A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 63A3 ~           >
 124+ 63A3 ~           >
 124+ 63A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 63A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 63A3             >
 124+ 63A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 63A3
 126+ 63A3 0A                           ld      a, (bc)
 127+ 63A4 03                           inc     bc
 128+ 63A5 6F                           ld      l, a
 129+ 63A6 0A                           ld      a, (bc)
 130+ 63A7 03                           inc     bc
 131+ 63A8 67                           ld      h, a
 132+ 63A9 E5                           push    hl
 133+ 63AA                              next
 133+ 63AA DD E9       >                jp      (ix)
 134+ 63AC
 135+ 63AC              //  ______________________________________________________________________
 136+ 63AC              //
 137+ 63AC              // execute      i*x xt -- j*x
 138+ 63AC              // execution token. usually xt is given by CFA
 139+ 63AC
 140+ 63AC                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 63AC             >
 140+ 63AC             >Dict_Ptr        defl    $
 140+ 63AC             >
 140+ 63AC             >//              ______________________________________________________________________
 140+ 63AC             >//              Heap part
 140+ 63AC             >
 140+ 63AC             >
 140+ 63AC             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E07B             >
 140+ E07B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E07B             >Latest_Definition defl  Heap_Ptr
 140+ E07B             >
 140+ E07B             >                // dummy db directives used to calculate length of namec
 140+ E07B 45 58 45 43 >                db      "EXECUTE"
 140+ E07F 55 54 45    >
 140+ E082             >len_NFA         defl    $ - temp_NFA
 140+ E082             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E07B             >
 140+ E07B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E07C 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E080 55 54 45    >
 140+ E083             >                org     $-1                 // alter last byte of Name just above to set
 140+ E082 C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E083             >
 140+ E083 73 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E085             >Prev_Ptr        defl    Heap_Ptr
 140+ E085             >
 140+ E085             >mirror_Ptr      defl    $
 140+ E085             >
 140+ E085 AE 63       >                dw      Dict_Ptr + 2        // xt
 140+ E087             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E087             >
 140+ E087             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E087             >
 140+ E087             >//              ______________________________________________________________________
 140+ E087             >//              Dictionary part
 140+ E087             >
 140+ E087             >                org     Dict_Ptr
 140+ 63AC             >
 140+ 63AC 85 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 63AE             >
 140+ 63AE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 63AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 63AE ~           >
 140+ 63AE ~           >
 140+ 63AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 63AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 63AE             >
 140+ 63AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 63AE C9                           ret
 142+ 63AF
 143+ 63AF              //  ______________________________________________________________________
 144+ 63AF              //
 145+ 63AF              // brk
 146+ 63AF              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 63AF              //              next
 148+ 63AF
 149+ 63AF
 150+ 63AF
 151+ 63AF              //  ______________________________________________________________________
 152+ 63AF              //
 153+ 63AF              // (+loop)      n --
 154+ 63AF              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 63AF              // keep track of index and limit, they are accessed via I and I'
 156+ 63AF              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 63AF              // between the loop limit minus one and the loop limit, continue execution
 158+ 63AF              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 63AF              // parameters and continue execution immediately following the loop.
 160+ 63AF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 63AF             >
 160+ 63AF             >Dict_Ptr        defl    $
 160+ 63AF             >
 160+ 63AF             >//              ______________________________________________________________________
 160+ 63AF             >//              Heap part
 160+ 63AF             >
 160+ 63AF             >
 160+ 63AF             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E087             >
 160+ E087             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E087             >Latest_Definition defl  Heap_Ptr
 160+ E087             >
 160+ E087             >                // dummy db directives used to calculate length of namec
 160+ E087 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E08B 4F 50 29    >
 160+ E08E             >len_NFA         defl    $ - temp_NFA
 160+ E08E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E087             >
 160+ E087 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E088 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E08C 4F 50 29    >
 160+ E08F             >                org     $-1                 // alter last byte of Name just above to set
 160+ E08E A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E08F             >
 160+ E08F 7B 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E091             >Prev_Ptr        defl    Heap_Ptr
 160+ E091             >
 160+ E091             >mirror_Ptr      defl    $
 160+ E091             >
 160+ E091 B1 63       >                dw      Dict_Ptr + 2        // xt
 160+ E093             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E093             >
 160+ E093             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E093             >
 160+ E093             >//              ______________________________________________________________________
 160+ E093             >//              Dictionary part
 160+ E093             >
 160+ E093             >                org     Dict_Ptr
 160+ 63AF             >
 160+ 63AF 91 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 63B1             >
 160+ 63B1             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 63B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 63B1 ~           >
 160+ 63B1 ~           >
 160+ 63B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 63B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 63B1             >
 160+ 63B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 63B1
 162+ 63B1              Loop_Ptr:
 163+ 63B1 E1                           pop     hl                  // get increment
 164+ 63B2 EB                           ex      de, hl
 165+ 63B3                              // *** ldhlrp
 166+ 63B3 C5                           push    bc                  // Save IP
 167+ 63B4 42                           ld      b, d                // bc is increment
 168+ 63B5 4B                           ld      c, e
 169+ 63B6 E5                           push    hl
 170+ 63B7 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 63B8 7B                           ld      a, e                // de keeps index before increment.
 172+ 63B9 81                           add     c
 173+ 63BA 77                           ld      (hl), a
 174+ 63BB 23                           inc     hl
 175+ 63BC 56                           ld      d, (hl)
 176+ 63BD 7A                           ld      a, d
 177+ 63BE 88                           adc     b
 178+ 63BF 77                           ld      (hl),a
 179+ 63C0 23                           inc     hl
 180+ 63C1
 181+ 63C1 7B                           ld      a, e
 182+ 63C2 96                           sub     (hl)
 183+ 63C3 5F                           ld      e, a
 184+ 63C4 23                           inc     hl
 185+ 63C5 7A                           ld      a, d
 186+ 63C6 9E                           sbc     (hl)
 187+ 63C7 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 63C8
 189+ 63C8 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 63C9 09                           add     hl, bc
 191+ 63CA CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 63CC 28 01                        jr      z, Loop_NegativeIncrement
 193+ 63CE 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 63CF              Loop_NegativeIncrement:
 195+ 63CF 38 04                        jr      c, Loop_Endif
 196+ 63D1 D1                               pop     de              // Discard RP+3, retrieve original RP
 197+ 63D2 C1                               pop     bc                  // Retrieve IP
 198+ 63D3 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 199+ 63D5              Loop_Endif:
 200+ 63D5 C1                           pop     bc                  // discard original RP
 201+ 63D6 EB                           ex      de, hl
 202+ 63D7 23                           inc     hl                  // keep    RP+4 (exit from loop)
 203+ 63D8                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 204+ 63D8 EB                           ex      de, hl
 205+ 63D9 C1                           pop     bc                  // Retrieve IP
 206+ 63DA 03                           inc     bc                  // skip branch-style offset
 207+ 63DB 03                           inc     bc
 208+ 63DC                              next
 208+ 63DC DD E9       >                jp      (ix)
 209+ 63DE
 210+ 63DE              //  ______________________________________________________________________
 211+ 63DE              //
 212+ 63DE              // (loop)       n --
 213+ 63DE              // same as (LOOP) but index is incremented by 1
 214+ 63DE              // compiled by LOOP.
 215+ 63DE                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 215+ 63DE             >
 215+ 63DE             >Dict_Ptr        defl    $
 215+ 63DE             >
 215+ 63DE             >//              ______________________________________________________________________
 215+ 63DE             >//              Heap part
 215+ 63DE             >
 215+ 63DE             >
 215+ 63DE             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E093             >
 215+ E093             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E093             >Latest_Definition defl  Heap_Ptr
 215+ E093             >
 215+ E093             >                // dummy db directives used to calculate length of namec
 215+ E093 28 4C 4F 4F >                db      "(LOOP)"
 215+ E097 50 29       >
 215+ E099             >len_NFA         defl    $ - temp_NFA
 215+ E099             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E093             >
 215+ E093 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E094 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 215+ E098 50 29       >
 215+ E09A             >                org     $-1                 // alter last byte of Name just above to set
 215+ E099 A9          >                db      {b $} | END_BIT     // msb as name end
 215+ E09A             >
 215+ E09A 87 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E09C             >Prev_Ptr        defl    Heap_Ptr
 215+ E09C             >
 215+ E09C             >mirror_Ptr      defl    $
 215+ E09C             >
 215+ E09C E0 63       >                dw      Dict_Ptr + 2        // xt
 215+ E09E             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E09E             >
 215+ E09E             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E09E             >
 215+ E09E             >//              ______________________________________________________________________
 215+ E09E             >//              Dictionary part
 215+ E09E             >
 215+ E09E             >                org     Dict_Ptr
 215+ 63DE             >
 215+ 63DE 9C 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 63E0             >
 215+ 63E0             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 63E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 215+ 63E0 ~           >
 215+ 63E0 ~           >
 215+ 63E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 63E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 63E0             >
 215+ 63E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 63E0 ED 8A 00 01                  push    1
 217+ 63E4 18 CB                        jr      Loop_Ptr
 218+ 63E6
 219+ 63E6              //  ______________________________________________________________________
 220+ 63E6              //
 221+ 63E6              // branch       --
 222+ 63E6              // unconditional branch in colon definition using the following cell as an offset from current IP value
 223+ 63E6              // compiled by ELSE, AGAIN and some other immediate words
 224+ 63E6
 225+ 63E6                              New_Def BRANCH, "BRANCH", is_code, is_normal
 225+ 63E6             >
 225+ 63E6             >Dict_Ptr        defl    $
 225+ 63E6             >
 225+ 63E6             >//              ______________________________________________________________________
 225+ 63E6             >//              Heap part
 225+ 63E6             >
 225+ 63E6             >
 225+ 63E6             >                org     (Heap_Ptr & $1FFF) + $E000
 225+ E09E             >
 225+ E09E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ E09E             >Latest_Definition defl  Heap_Ptr
 225+ E09E             >
 225+ E09E             >                // dummy db directives used to calculate length of namec
 225+ E09E 42 52 41 4E >                db      "BRANCH"
 225+ E0A2 43 48       >
 225+ E0A4             >len_NFA         defl    $ - temp_NFA
 225+ E0A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ E09E             >
 225+ E09E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ E09F 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 225+ E0A3 43 48       >
 225+ E0A5             >                org     $-1                 // alter last byte of Name just above to set
 225+ E0A4 C8          >                db      {b $} | END_BIT     // msb as name end
 225+ E0A5             >
 225+ E0A5 93 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 225+ E0A7             >Prev_Ptr        defl    Heap_Ptr
 225+ E0A7             >
 225+ E0A7             >mirror_Ptr      defl    $
 225+ E0A7             >
 225+ E0A7 E8 63       >                dw      Dict_Ptr + 2        // xt
 225+ E0A9             >Heap_Ptr        defl    $ - $E000           // save current HP
 225+ E0A9             >
 225+ E0A9             >Current_HP      defl  $ - $E000             // used to set HP once!
 225+ E0A9             >
 225+ E0A9             >//              ______________________________________________________________________
 225+ E0A9             >//              Dictionary part
 225+ E0A9             >
 225+ E0A9             >                org     Dict_Ptr
 225+ 63E6             >
 225+ 63E6 A7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 225+ 63E8             >
 225+ 63E8             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 63E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 63E8 ~           >
 225+ 63E8 ~           >
 225+ 63E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 63E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 63E8             >
 225+ 63E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 63E8              Branch_Ptr:
 227+ 63E8 0A                           ld      a, (bc)
 228+ 63E9 6F                           ld      l, a
 229+ 63EA 03                           inc     bc
 230+ 63EB 0A                           ld      a, (bc)
 231+ 63EC 67                           ld      h, a
 232+ 63ED 0B                           dec     bc
 233+ 63EE 09                           add     hl, bc
 234+ 63EF 4D                           ld      c, l
 235+ 63F0 44                           ld      b, h
 236+ 63F1                              next
 236+ 63F1 DD E9       >                jp      (ix)
 237+ 63F3
 238+ 63F3
 239+ 63F3              //  ______________________________________________________________________
 240+ 63F3              //
 241+ 63F3              // 0branch      f --
 242+ 63F3              // conditional branch if the top-of-stack is ZERO or FALSE.
 243+ 63F3              // compiled by IF, UNTIL and some other immediate words
 244+ 63F3
 245+ 63F3                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 245+ 63F3             >
 245+ 63F3             >Dict_Ptr        defl    $
 245+ 63F3             >
 245+ 63F3             >//              ______________________________________________________________________
 245+ 63F3             >//              Heap part
 245+ 63F3             >
 245+ 63F3             >
 245+ 63F3             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E0A9             >
 245+ E0A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E0A9             >Latest_Definition defl  Heap_Ptr
 245+ E0A9             >
 245+ E0A9             >                // dummy db directives used to calculate length of namec
 245+ E0A9 30 42 52 41 >                db      "0BRANCH"
 245+ E0AD 4E 43 48    >
 245+ E0B0             >len_NFA         defl    $ - temp_NFA
 245+ E0B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E0A9             >
 245+ E0A9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E0AA 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 245+ E0AE 4E 43 48    >
 245+ E0B1             >                org     $-1                 // alter last byte of Name just above to set
 245+ E0B0 C8          >                db      {b $} | END_BIT     // msb as name end
 245+ E0B1             >
 245+ E0B1 9E 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E0B3             >Prev_Ptr        defl    Heap_Ptr
 245+ E0B3             >
 245+ E0B3             >mirror_Ptr      defl    $
 245+ E0B3             >
 245+ E0B3 F5 63       >                dw      Dict_Ptr + 2        // xt
 245+ E0B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E0B5             >
 245+ E0B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E0B5             >
 245+ E0B5             >//              ______________________________________________________________________
 245+ E0B5             >//              Dictionary part
 245+ E0B5             >
 245+ E0B5             >                org     Dict_Ptr
 245+ 63F3             >
 245+ 63F3 B3 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 63F5             >
 245+ 63F5             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 63F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 63F5 ~           >
 245+ 63F5 ~           >
 245+ 63F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 63F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 63F5             >
 245+ 63F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 63F5              ZBranch_Ptr:
 247+ 63F5 E1                           pop     hl
 248+ 63F6 7D                           ld      a, l
 249+ 63F7 B4                           or      h
 250+ 63F8 28 EE                        jr      z, Branch_Ptr
 251+ 63FA 03                           inc     bc                  // if not branch, skip offset cell.
 252+ 63FB 03                           inc     bc
 253+ 63FC                              next
 253+ 63FC DD E9       >                jp      (ix)
 254+ 63FE
 255+ 63FE              //  ______________________________________________________________________
 256+ 63FE              //
 257+ 63FE              // (leave)        --
 258+ 63FE              // compiled by LEAVE
 259+ 63FE              // this forces to exit from loop and jump past
 260+ 63FE                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 260+ 63FE             >
 260+ 63FE             >Dict_Ptr        defl    $
 260+ 63FE             >
 260+ 63FE             >//              ______________________________________________________________________
 260+ 63FE             >//              Heap part
 260+ 63FE             >
 260+ 63FE             >
 260+ 63FE             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E0B5             >
 260+ E0B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E0B5             >Latest_Definition defl  Heap_Ptr
 260+ E0B5             >
 260+ E0B5             >                // dummy db directives used to calculate length of namec
 260+ E0B5 28 4C 45 41 >                db      "(LEAVE)"
 260+ E0B9 56 45 29    >
 260+ E0BC             >len_NFA         defl    $ - temp_NFA
 260+ E0BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E0B5             >
 260+ E0B5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E0B6 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 260+ E0BA 56 45 29    >
 260+ E0BD             >                org     $-1                 // alter last byte of Name just above to set
 260+ E0BC A9          >                db      {b $} | END_BIT     // msb as name end
 260+ E0BD             >
 260+ E0BD A9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E0BF             >Prev_Ptr        defl    Heap_Ptr
 260+ E0BF             >
 260+ E0BF             >mirror_Ptr      defl    $
 260+ E0BF             >
 260+ E0BF 00 64       >                dw      Dict_Ptr + 2        // xt
 260+ E0C1             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E0C1             >
 260+ E0C1             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E0C1             >
 260+ E0C1             >//              ______________________________________________________________________
 260+ E0C1             >//              Dictionary part
 260+ E0C1             >
 260+ E0C1             >                org     Dict_Ptr
 260+ 63FE             >
 260+ 63FE BF 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6400             >
 260+ 6400             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6400 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 6400 ~           >
 260+ 6400 ~           >
 260+ 6400             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6400             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6400             >
 260+ 6400             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6400 EB                           ex      de, hl
 262+ 6401                              // *** ldhlrp
 263+ 6401 3E 04                        ld      a, 4
 264+ 6403 ED 31                        add     hl, a
 265+ 6405                              // *** ldrphl
 266+ 6405 EB                           ex      de, hl
 267+ 6406 18 E0                        jr      Branch_Ptr       // perform branch consuming following cell
 268+ 6408                              next
 268+ 6408 DD E9       >                jp      (ix)
 269+ 640A
 270+ 640A              //  ______________________________________________________________________
 271+ 640A              //
 272+ 640A              // (?do)        lim ind --
 273+ 640A              // compiled by ?DO to make a loop checking for lim == ind first
 274+ 640A              // at run-time (?DO) must be followed by a BRANCH offset
 275+ 640A              // used to skip the loop if lim == ind
 276+ 640A                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 276+ 640A             >
 276+ 640A             >Dict_Ptr        defl    $
 276+ 640A             >
 276+ 640A             >//              ______________________________________________________________________
 276+ 640A             >//              Heap part
 276+ 640A             >
 276+ 640A             >
 276+ 640A             >                org     (Heap_Ptr & $1FFF) + $E000
 276+ E0C1             >
 276+ E0C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ E0C1             >Latest_Definition defl  Heap_Ptr
 276+ E0C1             >
 276+ E0C1             >                // dummy db directives used to calculate length of namec
 276+ E0C1 28 3F 44 4F >                db      "(?DO)"
 276+ E0C5 29          >
 276+ E0C6             >len_NFA         defl    $ - temp_NFA
 276+ E0C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ E0C1             >
 276+ E0C1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ E0C2 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 276+ E0C6 29          >
 276+ E0C7             >                org     $-1                 // alter last byte of Name just above to set
 276+ E0C6 A9          >                db      {b $} | END_BIT     // msb as name end
 276+ E0C7             >
 276+ E0C7 B5 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 276+ E0C9             >Prev_Ptr        defl    Heap_Ptr
 276+ E0C9             >
 276+ E0C9             >mirror_Ptr      defl    $
 276+ E0C9             >
 276+ E0C9 0C 64       >                dw      Dict_Ptr + 2        // xt
 276+ E0CB             >Heap_Ptr        defl    $ - $E000           // save current HP
 276+ E0CB             >
 276+ E0CB             >Current_HP      defl  $ - $E000             // used to set HP once!
 276+ E0CB             >
 276+ E0CB             >//              ______________________________________________________________________
 276+ E0CB             >//              Dictionary part
 276+ E0CB             >
 276+ E0CB             >                org     Dict_Ptr
 276+ 640A             >
 276+ 640A C9 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 276+ 640C             >
 276+ 640C             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 640C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 276+ 640C ~           >
 276+ 640C ~           >
 276+ 640C             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 640C             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 640C             >
 276+ 640C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 640C D9                           exx
 278+ 640D D1                            pop     de                  // de has the index
 279+ 640E E1                            pop     hl                  // hl has the limit
 280+ 640F 44                            ld      b, h
 281+ 6410 4D                            ld      c, l
 282+ 6411 E5                            push    hl                  // put them back to stack for later
 283+ 6412 D5                            push    de
 284+ 6413 A7                            and     a                   // reset carry flag
 285+ 6414 ED 52                         sbc     hl, de              // compute limit - index
 286+ 6416 D9                           exx
 287+ 6417 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 288+ 6419 E1                               pop     hl
 289+ 641A E1                               pop     hl
 290+ 641B 18 CB                            jr      Branch_Ptr          // perform branch consuming following cell
 291+ 641D              Do_Ptr:
 292+ 641D                              // *** ldhlrp                 // prepare RP
 293+ 641D                              // *** ex      de, hl
 294+ 641D                              // dec     de
 295+ 641D                              // dec     de
 296+ 641D                              // dec     de
 297+ 641D                              // dec     de
 298+ 641D ED 35 FC FF                  add     de, -4
 299+ 6421 D5                           push    de                  // pass it to h'l'
 300+ 6422                              // *** ex      de, hl
 301+ 6422                              // *** ldrphl
 302+ 6422 D9                           exx
 303+ 6423 E1                            pop     hl
 304+ 6424
 305+ 6424                               // store index as top RP
 306+ 6424 D1                            pop     de
 307+ 6425 73                            ld      (hl), e
 308+ 6426 23                            inc     hl
 309+ 6427 72                            ld      (hl), d
 310+ 6428 23                            inc     hl
 311+ 6429                               // stores lim as second from top RP
 312+ 6429 D1                            pop     de
 313+ 642A 73                            ld      (hl), e
 314+ 642B 23                            inc     hl
 315+ 642C 72                            ld      (hl), d
 316+ 642D D9                           exx
 317+ 642E                              // skip branch-style offseet
 318+ 642E 03                           inc     bc
 319+ 642F 03                           inc     bc
 320+ 6430                              next
 320+ 6430 DD E9       >                jp      (ix)
 321+ 6432
 322+ 6432              //  ______________________________________________________________________
 323+ 6432              //
 324+ 6432              // (do)        lim ind --
 325+ 6432              // compiled by DO to make a loop checking for lim == ind first
 326+ 6432              // this is a simpler version of (?DO)
 327+ 6432                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 6432             >
 327+ 6432             >Dict_Ptr        defl    $
 327+ 6432             >
 327+ 6432             >//              ______________________________________________________________________
 327+ 6432             >//              Heap part
 327+ 6432             >
 327+ 6432             >
 327+ 6432             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0CB             >
 327+ E0CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0CB             >Latest_Definition defl  Heap_Ptr
 327+ E0CB             >
 327+ E0CB             >                // dummy db directives used to calculate length of namec
 327+ E0CB 28 44 4F 29 >                db      "(DO)"
 327+ E0CF             >len_NFA         defl    $ - temp_NFA
 327+ E0CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0CB             >
 327+ E0CB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0CC 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0D0             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0CF A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0D0             >
 327+ E0D0 C1 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0D2             >Prev_Ptr        defl    Heap_Ptr
 327+ E0D2             >
 327+ E0D2             >mirror_Ptr      defl    $
 327+ E0D2             >
 327+ E0D2 34 64       >                dw      Dict_Ptr + 2        // xt
 327+ E0D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0D4             >
 327+ E0D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0D4             >
 327+ E0D4             >//              ______________________________________________________________________
 327+ E0D4             >//              Dictionary part
 327+ E0D4             >
 327+ E0D4             >                org     Dict_Ptr
 327+ 6432             >
 327+ 6432 D2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 6434             >
 327+ 6434             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 6434 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 6434 ~           >
 327+ 6434 ~           >
 327+ 6434             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 6434             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 6434             >
 327+ 6434             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 6434 0B                           dec     bc                  // prepare IP beforehand
 329+ 6435 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 330+ 6436 18 E5                        jr      Do_Ptr
 331+ 6438
 332+ 6438              //  ______________________________________________________________________
 333+ 6438              //
 334+ 6438              // i            -- n
 335+ 6438              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 6438              // the current value of the index-loop
 337+ 6438                              New_Def I, "I", is_code, is_normal
 337+ 6438             >
 337+ 6438             >Dict_Ptr        defl    $
 337+ 6438             >
 337+ 6438             >//              ______________________________________________________________________
 337+ 6438             >//              Heap part
 337+ 6438             >
 337+ 6438             >
 337+ 6438             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0D4             >
 337+ E0D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0D4             >Latest_Definition defl  Heap_Ptr
 337+ E0D4             >
 337+ E0D4             >                // dummy db directives used to calculate length of namec
 337+ E0D4 49          >                db      "I"
 337+ E0D5             >len_NFA         defl    $ - temp_NFA
 337+ E0D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0D4             >
 337+ E0D4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D5 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D6             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D5 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D6             >
 337+ E0D6 CB 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D8             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D8             >
 337+ E0D8             >mirror_Ptr      defl    $
 337+ E0D8             >
 337+ E0D8 3A 64       >                dw      Dict_Ptr + 2        // xt
 337+ E0DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0DA             >
 337+ E0DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0DA             >
 337+ E0DA             >//              ______________________________________________________________________
 337+ E0DA             >//              Dictionary part
 337+ E0DA             >
 337+ E0DA             >                org     Dict_Ptr
 337+ 6438             >
 337+ 6438 D8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 643A             >
 337+ 643A             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 643A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 643A ~           >
 337+ 643A ~           >
 337+ 643A             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 643A             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 643A             >
 337+ 643A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 643A              I_Ptr:
 339+ 643A 62                           ld      h, d
 340+ 643B 6B                           ld      l, e
 341+ 643C                              // *** ldhlrp
 342+ 643C              I_Ptr_prime:
 343+ 643C 7E                           ld      a, (hl)
 344+ 643D 23                           inc     hl
 345+ 643E 66                           ld      h, (hl)
 346+ 643F 6F                           ld      l, a
 347+ 6440 E5                           push    hl
 348+ 6441                              next
 348+ 6441 DD E9       >                jp      (ix)
 349+ 6443
 350+ 6443
 351+ 6443              //  ______________________________________________________________________
 352+ 6443              //
 353+ 6443              // i'            -- n
 354+ 6443              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 6443              // the limit of the index-loop
 356+ 6443
 357+ 6443                              New_Def II, "I'", is_code, is_normal
 357+ 6443             >
 357+ 6443             >Dict_Ptr        defl    $
 357+ 6443             >
 357+ 6443             >//              ______________________________________________________________________
 357+ 6443             >//              Heap part
 357+ 6443             >
 357+ 6443             >
 357+ 6443             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0DA             >
 357+ E0DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0DA             >Latest_Definition defl  Heap_Ptr
 357+ E0DA             >
 357+ E0DA             >                // dummy db directives used to calculate length of namec
 357+ E0DA 49 27       >                db      "I'"
 357+ E0DC             >len_NFA         defl    $ - temp_NFA
 357+ E0DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0DA             >
 357+ E0DA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0DB 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0DD             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0DC A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0DD             >
 357+ E0DD D4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0DF             >Prev_Ptr        defl    Heap_Ptr
 357+ E0DF             >
 357+ E0DF             >mirror_Ptr      defl    $
 357+ E0DF             >
 357+ E0DF 45 64       >                dw      Dict_Ptr + 2        // xt
 357+ E0E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0E1             >
 357+ E0E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0E1             >
 357+ E0E1             >//              ______________________________________________________________________
 357+ E0E1             >//              Dictionary part
 357+ E0E1             >
 357+ E0E1             >                org     Dict_Ptr
 357+ 6443             >
 357+ 6443 DF 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 6445             >
 357+ 6445             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 6445 ~           >
 357+ 6445 ~           >
 357+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 6445             >
 357+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 6445 62                           ld      h, d
 359+ 6446 6B                           ld      l, e
 360+ 6447                              // *** ldhlrp
 361+ 6447 23                           inc     hl
 362+ 6448 23                           inc     hl
 363+ 6449 18 F1                        jr      I_Ptr_prime
 364+ 644B
 365+ 644B
 366+ 644B              //  ______________________________________________________________________
 367+ 644B              //
 368+ 644B              // digit        c n -- u tf  |  ff
 369+ 644B              // convert a character c using base n
 370+ 644B              // returns a unsigned number and a true flag
 371+ 644B              // or just a false flag if the conversion fails
 372+ 644B                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 644B             >
 372+ 644B             >Dict_Ptr        defl    $
 372+ 644B             >
 372+ 644B             >//              ______________________________________________________________________
 372+ 644B             >//              Heap part
 372+ 644B             >
 372+ 644B             >
 372+ 644B             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0E1             >
 372+ E0E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0E1             >Latest_Definition defl  Heap_Ptr
 372+ E0E1             >
 372+ E0E1             >                // dummy db directives used to calculate length of namec
 372+ E0E1 44 49 47 49 >                db      "DIGIT"
 372+ E0E5 54          >
 372+ E0E6             >len_NFA         defl    $ - temp_NFA
 372+ E0E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0E1             >
 372+ E0E1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0E2 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E6 54          >
 372+ E0E7             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E6 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E7             >
 372+ E0E7 DA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0E9             >Prev_Ptr        defl    Heap_Ptr
 372+ E0E9             >
 372+ E0E9             >mirror_Ptr      defl    $
 372+ E0E9             >
 372+ E0E9 4D 64       >                dw      Dict_Ptr + 2        // xt
 372+ E0EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0EB             >
 372+ E0EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0EB             >
 372+ E0EB             >//              ______________________________________________________________________
 372+ E0EB             >//              Dictionary part
 372+ E0EB             >
 372+ E0EB             >                org     Dict_Ptr
 372+ 644B             >
 372+ 644B E9 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 644D             >
 372+ 644D             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 644D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 644D ~           >
 372+ 644D ~           >
 372+ 644D             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 644D             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 644D             >
 372+ 644D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 644D D9                           exx
 374+ 644E E1                           pop     hl                  // l has the base
 375+ 644F D1                           pop     de                  // e has the digit
 376+ 6450 7B                           ld      a, e
 377+ 6451 FE 60                        cp      $60                 // check if lowercase
 378+ 6453 38 02                        jr      c, Digit_Uppercase
 379+ 6455 D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 6457              Digit_Uppercase:
 381+ 6457 D6 30                        sub     $30
 382+ 6459 38 16                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 645B FE 0A                            cp      $0A
 384+ 645D 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 645F D6 07                                sub     7                   // try hex and subtract 7
 386+ 6461 FE 0A                                cp      $0A
 387+ 6463 38 0C                                jr      c,  Digit_Fail      // it is not hex !
 388+ 6465
 389+ 6465              Digit_Decimal:
 390+ 6465                              // compare digit
 391+ 6465 BD                           cp      l                   // compare with base
 392+ 6466 30 09                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 6468 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 6469 21 01 00                         ld      hl, 1
 395+ 646C D5                               push    de
 396+ 646D E5                               push    hl
 397+ 646E D9                               exx
 398+ 646F                                  next
 398+ 646F DD E9       >                jp      (ix)
 399+ 6471              Digit_Fail:
 400+ 6471 21 00 00                     ld      hl, 0
 401+ 6474 E5                           push    hl
 402+ 6475 D9                           exx
 403+ 6476                              next
 403+ 6476 DD E9       >                jp      (ix)
 404+ 6478
 405+ 6478              //  ______________________________________________________________________
 406+ 6478              //
 407+ 6478              //  parametric uppercase routine
 408+ 6478              //  depending on the following op-code the routine can be by-passed
 409+ 6478              //  changing the behaviour of some callers.
 410+ 6478              //  If it is "ret" then the system is Case-Sensitive
 411+ 6478              //  If it is "Nop" then the system is Case-Insensitive
 412+ 6478              //  Only A register is touched.
 413+ 6478 00           Case_Sensitive: nop                         // Default is case-insensitive.
 414+ 6479              Case_Upper:
 415+ 6479 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 416+ 647B D8                           ret     c                   // no change if A < "a"
 417+ 647C FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 418+ 647E D0                           ret     nc                  // no change if A > "z"
 419+ 647F D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 420+ 6481 C9                           ret
 421+ 6482
 422+ 6482              //  ______________________________________________________________________
 423+ 6482              //
 424+ 6482              //  caseon      --
 425+ 6482              // set system case-sensitivity on
 426+ 6482              // it patches a RET/NOP at the beginning of the uppercase-routine
 427+ 6482                              New_Def CASEON, "CASEON", is_code, is_normal
 427+ 6482             >
 427+ 6482             >Dict_Ptr        defl    $
 427+ 6482             >
 427+ 6482             >//              ______________________________________________________________________
 427+ 6482             >//              Heap part
 427+ 6482             >
 427+ 6482             >
 427+ 6482             >                org     (Heap_Ptr & $1FFF) + $E000
 427+ E0EB             >
 427+ E0EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ E0EB             >Latest_Definition defl  Heap_Ptr
 427+ E0EB             >
 427+ E0EB             >                // dummy db directives used to calculate length of namec
 427+ E0EB 43 41 53 45 >                db      "CASEON"
 427+ E0EF 4F 4E       >
 427+ E0F1             >len_NFA         defl    $ - temp_NFA
 427+ E0F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ E0EB             >
 427+ E0EB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ E0EC 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 427+ E0F0 4F 4E       >
 427+ E0F2             >                org     $-1                 // alter last byte of Name just above to set
 427+ E0F1 CE          >                db      {b $} | END_BIT     // msb as name end
 427+ E0F2             >
 427+ E0F2 E1 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 427+ E0F4             >Prev_Ptr        defl    Heap_Ptr
 427+ E0F4             >
 427+ E0F4             >mirror_Ptr      defl    $
 427+ E0F4             >
 427+ E0F4 84 64       >                dw      Dict_Ptr + 2        // xt
 427+ E0F6             >Heap_Ptr        defl    $ - $E000           // save current HP
 427+ E0F6             >
 427+ E0F6             >Current_HP      defl  $ - $E000             // used to set HP once!
 427+ E0F6             >
 427+ E0F6             >//              ______________________________________________________________________
 427+ E0F6             >//              Dictionary part
 427+ E0F6             >
 427+ E0F6             >                org     Dict_Ptr
 427+ 6482             >
 427+ 6482 F4 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 427+ 6484             >
 427+ 6484             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 6484 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 427+ 6484 ~           >
 427+ 6484 ~           >
 427+ 6484             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 6484             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 6484             >
 427+ 6484             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 6484 3E C9                        ld      a, $C9              // "ret"
 429+ 6486 32 78 64                     ld      (Case_Sensitive), a
 430+ 6489                              next
 430+ 6489 DD E9       >                jp      (ix)
 431+ 648B
 432+ 648B              //  ______________________________________________________________________
 433+ 648B              //
 434+ 648B              //  caseoff     --
 435+ 648B              // set system case-sensitivity on
 436+ 648B              // it patches a RET/NOP at the beginning of the uppercase-routine
 437+ 648B                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 437+ 648B             >
 437+ 648B             >Dict_Ptr        defl    $
 437+ 648B             >
 437+ 648B             >//              ______________________________________________________________________
 437+ 648B             >//              Heap part
 437+ 648B             >
 437+ 648B             >
 437+ 648B             >                org     (Heap_Ptr & $1FFF) + $E000
 437+ E0F6             >
 437+ E0F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ E0F6             >Latest_Definition defl  Heap_Ptr
 437+ E0F6             >
 437+ E0F6             >                // dummy db directives used to calculate length of namec
 437+ E0F6 43 41 53 45 >                db      "CASEOFF"
 437+ E0FA 4F 46 46    >
 437+ E0FD             >len_NFA         defl    $ - temp_NFA
 437+ E0FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ E0F6             >
 437+ E0F6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ E0F7 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 437+ E0FB 4F 46 46    >
 437+ E0FE             >                org     $-1                 // alter last byte of Name just above to set
 437+ E0FD C6          >                db      {b $} | END_BIT     // msb as name end
 437+ E0FE             >
 437+ E0FE EB 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 437+ E100             >Prev_Ptr        defl    Heap_Ptr
 437+ E100             >
 437+ E100             >mirror_Ptr      defl    $
 437+ E100             >
 437+ E100 8D 64       >                dw      Dict_Ptr + 2        // xt
 437+ E102             >Heap_Ptr        defl    $ - $E000           // save current HP
 437+ E102             >
 437+ E102             >Current_HP      defl  $ - $E000             // used to set HP once!
 437+ E102             >
 437+ E102             >//              ______________________________________________________________________
 437+ E102             >//              Dictionary part
 437+ E102             >
 437+ E102             >                org     Dict_Ptr
 437+ 648B             >
 437+ 648B 00 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 437+ 648D             >
 437+ 648D             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 648D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 437+ 648D ~           >
 437+ 648D ~           >
 437+ 648D             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 648D             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 648D             >
 437+ 648D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 648D 3E 00                        ld      a, $00              // "nop"
 439+ 648F 32 78 64                     ld      (Case_Sensitive), a
 440+ 6492                              next
 440+ 6492 DD E9       >                jp      (ix)
 441+ 6494
 442+ 6494              //  ______________________________________________________________________
 443+ 6494              //
 444+ 6494              //  upper       c1 -- c1 | c2
 445+ 6494              // character on top of stack is forced to Uppercase.
 446+ 6494                              New_Def UPPER, "UPPER", is_code, is_normal
 446+ 6494             >
 446+ 6494             >Dict_Ptr        defl    $
 446+ 6494             >
 446+ 6494             >//              ______________________________________________________________________
 446+ 6494             >//              Heap part
 446+ 6494             >
 446+ 6494             >
 446+ 6494             >                org     (Heap_Ptr & $1FFF) + $E000
 446+ E102             >
 446+ E102             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ E102             >Latest_Definition defl  Heap_Ptr
 446+ E102             >
 446+ E102             >                // dummy db directives used to calculate length of namec
 446+ E102 55 50 50 45 >                db      "UPPER"
 446+ E106 52          >
 446+ E107             >len_NFA         defl    $ - temp_NFA
 446+ E107             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ E102             >
 446+ E102 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ E103 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 446+ E107 52          >
 446+ E108             >                org     $-1                 // alter last byte of Name just above to set
 446+ E107 D2          >                db      {b $} | END_BIT     // msb as name end
 446+ E108             >
 446+ E108 F6 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 446+ E10A             >Prev_Ptr        defl    Heap_Ptr
 446+ E10A             >
 446+ E10A             >mirror_Ptr      defl    $
 446+ E10A             >
 446+ E10A 96 64       >                dw      Dict_Ptr + 2        // xt
 446+ E10C             >Heap_Ptr        defl    $ - $E000           // save current HP
 446+ E10C             >
 446+ E10C             >Current_HP      defl  $ - $E000             // used to set HP once!
 446+ E10C             >
 446+ E10C             >//              ______________________________________________________________________
 446+ E10C             >//              Dictionary part
 446+ E10C             >
 446+ E10C             >                org     Dict_Ptr
 446+ 6494             >
 446+ 6494 0A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 446+ 6496             >
 446+ 6496             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 6496 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 446+ 6496 ~           >
 446+ 6496 ~           >
 446+ 6496             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 6496             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 6496             >
 446+ 6496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 6496 E1                           pop     hl
 448+ 6497 7D                           ld      a, l
 449+ 6498 CD 79 64                     call    Case_Upper
 450+ 649B 6F                           ld      l, a
 451+ 649C
 452+ 649C                              psh1
 452+ 649C E5          >                push    hl
 452+ 649D DD E9       >                jp      (ix)
 453+ 649F
 454+ 649F              //  ______________________________________________________________________
 455+ 649F
 456+ 649F              MMU7_read:
 457+ 649F 01 3B 24                     ld      bc, $243B
 458+ 64A2 3E 57                        ld      a, 87
 459+ 64A4 ED 79                        out     (c), a
 460+ 64A6 04                           inc     b
 461+ 64A7 ED 78                        in      a, (c)
 462+ 64A9 C9                           ret
 463+ 64AA
 464+ 64AA              //  ______________________________________________________________________
 465+ 64AA
 466+ 64AA              TO_FAR_rout:
 467+ 64AA 7C                           ld      a, h
 468+ 64AB 08                           ex      af, af
 469+ 64AC 7C                           ld      a, h
 470+ 64AD F6 E0                        or      $E0
 471+ 64AF 67                           ld      h, a
 472+ 64B0 08                           ex      af, af
 473+ 64B1 07                           rlca
 474+ 64B2 07                           rlca
 475+ 64B3 07                           rlca
 476+ 64B4 E6 07                        and     $07
 477+ 64B6 C6 20                        add     $20
 478+ 64B8 C9                           ret
 479+ 64B9
 480+ 64B9
 481+ 64B9              //  ______________________________________________________________________
 482+ 64B9              //
 483+ 64B9              // (find)       addr voc -- 0 | cfa b 1
 484+ 64B9              // vocabulary search,
 485+ 64B9              // - voc is starting word's NFA
 486+ 64B9              // - addr is the string to be searched for
 487+ 64B9              // On success, it returns the CFA of found word, the first NFA byte
 488+ 64B9              // (which contains length and some flags) and a true flag.
 489+ 64B9              // On fail, a false flag  (no more: leaves addr unchanged)
 490+ 64B9                              New_Def C_FIND, "(FIND)", is_code, is_normal
 490+ 64B9             >
 490+ 64B9             >Dict_Ptr        defl    $
 490+ 64B9             >
 490+ 64B9             >//              ______________________________________________________________________
 490+ 64B9             >//              Heap part
 490+ 64B9             >
 490+ 64B9             >
 490+ 64B9             >                org     (Heap_Ptr & $1FFF) + $E000
 490+ E10C             >
 490+ E10C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ E10C             >Latest_Definition defl  Heap_Ptr
 490+ E10C             >
 490+ E10C             >                // dummy db directives used to calculate length of namec
 490+ E10C 28 46 49 4E >                db      "(FIND)"
 490+ E110 44 29       >
 490+ E112             >len_NFA         defl    $ - temp_NFA
 490+ E112             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ E10C             >
 490+ E10C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ E10D 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 490+ E111 44 29       >
 490+ E113             >                org     $-1                 // alter last byte of Name just above to set
 490+ E112 A9          >                db      {b $} | END_BIT     // msb as name end
 490+ E113             >
 490+ E113 02 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 490+ E115             >Prev_Ptr        defl    Heap_Ptr
 490+ E115             >
 490+ E115             >mirror_Ptr      defl    $
 490+ E115             >
 490+ E115 BB 64       >                dw      Dict_Ptr + 2        // xt
 490+ E117             >Heap_Ptr        defl    $ - $E000           // save current HP
 490+ E117             >
 490+ E117             >Current_HP      defl  $ - $E000             // used to set HP once!
 490+ E117             >
 490+ E117             >//              ______________________________________________________________________
 490+ E117             >//              Dictionary part
 490+ E117             >
 490+ E117             >                org     Dict_Ptr
 490+ 64B9             >
 490+ 64B9 15 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 490+ 64BB             >
 490+ 64BB             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 64BB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 490+ 64BB ~           >
 490+ 64BB ~           >
 490+ 64BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 64BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 64BB             >
 490+ 64BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 64BB D9                           exx
 492+ 64BC CD 9F 64                     call    MMU7_read
 493+ 64BF D9                           exx
 494+ 64C0 6F                           ld      l, a
 495+ 64C1 D9                           exx
 496+ 64C2
 497+ 64C2 D1                           pop     de                      // de has dictionary pointer
 498+ 64C3              Find_VocabularyLoop:
 499+ 64C3 7A                               ld      a, d
 500+ 64C4 D6 60                            sub     $60
 501+ 64C6 30 08                            jr      nc, Find_far_endif
 502+ 64C8 EB                                   ex      de, hl
 503+ 64C9 CD AA 64                             call    TO_FAR_rout
 504+ 64CC EB                                   ex      de, hl
 505+ 64CD ED 92 57                             nextreg 87, a
 506+ 64D0              Find_far_endif:
 507+ 64D0 E1                               pop     hl                  // string pointer to search for
 508+ 64D1 E5                               push    hl                  // keep it on stack too for the end.
 509+ 64D2 1A                               ld      a, (de)             // save NFA length byte
 510+ 64D3 08                               ex      af,af'              // for later use (!)
 511+ 64D4 1A                               ld      a, (de)             // reload NFA length byte
 512+ 64D5 AE                               xor     (hl)                // check if same length
 513+ 64D6 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 514+ 64D8                                  // word and text haven't the same length, skip to next vocabulary entry
 515+ 64D8 20 33                            jr      nz, Find_DifferentLenght
 516+ 64DA
 517+ 64DA              Find_ThisWord:      // begin loop
 518+ 64DA 23                                   inc     hl
 519+ 64DB 13                                   inc     de
 520+ 64DC 1A                                   ld      a, (de)
 521+ 64DD                                      // case insensitive option - begin
 522+ 64DD                                      // push    bc
 523+ 64DD E6 80                                and     $80                 // split A in msb and the rest
 524+ 64DF 47                                   ld      b, a
 525+ 64E0 1A                                   ld      a, (de)
 526+ 64E1 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 527+ 64E3 CD 78 64                             call    Case_Sensitive      // uppercase routine
 528+ 64E6 4F                                   ld      c, a
 529+ 64E7 7E                                   ld      a, (hl)
 530+ 64E8 CD 78 64                             call    Case_Sensitive      // uppercase routine
 531+ 64EB A9                                   xor     c
 532+ 64EC A8                                   xor     b
 533+ 64ED                                      // pop     bc
 534+ 64ED                                      // case insensitive option - end
 535+ 64ED 87                                   add     a                   // ignore msb during compare
 536+ 64EE 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 537+ 64F0
 538+ 64F0                                  // loop back until last byte msb is found set
 539+ 64F0                                  // that bit marks the ending char of this word
 540+ 64F0 30 E8                            jr      nc, Find_ThisWord
 541+ 64F2
 542+ 64F2                                  // match found !
 543+ 64F2 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 544+ 64F5 19                               add     hl, de
 545+ 64F6
 546+ 64F6                              //  ld      a, h
 547+ 64F6                              //  and     $E0
 548+ 64F6                              //  xor     h
 549+ 64F6                              //  jr      nz, Non_MMU7
 550+ 64F6                                  //  call    MMU7_read
 551+ 64F6                                  //  dec     a
 552+ 64F6                                  //  jr      z, Non_MMU7
 553+ 64F6 5E                                       ld      e, (hl)
 554+ 64F7 23                                       inc     hl
 555+ 64F8 56                                       ld      d, (hl)
 556+ 64F9 EB                                       ex      de, hl
 557+ 64FA              //Non_MMU7:
 558+ 64FA E3                               ex      (sp), hl            // CFA on stack and drop addr
 559+ 64FB 08                               ex      af, af'             // retrieve NFA byte (!)
 560+ 64FC 5F                               ld      e, a
 561+ 64FD 16 00                            ld      d, 0
 562+ 64FF 21 FF FF                         ld      hl, -1
 563+ 6502 D5                               push    de
 564+ 6503 E5                               push    hl
 565+ 6504 D9                               exx
 566+ 6505 7D                               ld      a, l
 567+ 6506 ED 92 57                         nextreg 87, a
 568+ 6509                                  next
 568+ 6509 DD E9       >                jp      (ix)
 569+ 650B
 570+ 650B              Find_DidntMatch: // didn't match (*)
 571+ 650B 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 572+ 650D
 573+ 650D              Find_DifferentLenght:
 574+ 650D                                  // consume chars until the end of the word
 575+ 650D                                  // that is last byte msb is found set
 576+ 650D 13                                   inc     de
 577+ 650E 1A                                   ld      a, (de)
 578+ 650F 87                                   add     a, a
 579+ 6510 30 FB                            jr      nc, Find_DifferentLenght
 580+ 6512
 581+ 6512              Find_WordEnd:   // word-end  found (**)
 582+ 6512                                  // take LFA and use it
 583+ 6512 13                               inc     de
 584+ 6513 EB                               ex      de, hl
 585+ 6514 5E                               ld      e, (hl)
 586+ 6515 23                               inc     hl
 587+ 6516 56                               ld      d, (hl)
 588+ 6517 7A                               ld      a, d
 589+ 6518 B3                               or      e
 590+ 6519
 591+ 6519                              // loop until end of vocabulary
 592+ 6519 20 A8                        jr      nz, Find_VocabularyLoop
 593+ 651B
 594+ 651B E1                           pop     hl              // without this, leaves addr unchanged
 595+ 651C 21 00 00                     ld      hl, 0
 596+ 651F E5                           push    hl
 597+ 6520 D9                           exx
 598+ 6521 7D                           ld      a, l
 599+ 6522 ED 92 57                     nextreg 87, a
 600+ 6525                              next
 600+ 6525 DD E9       >                jp      (ix)
 601+ 6527
 602+ 6527              //  ______________________________________________________________________
 603+ 6527              //
 604+ 6527              // enclose      a c -- a  n1 n2 n3
 605+ 6527              // starting from a, using delimiter c, determines the offsets:
 606+ 6527              //   n1   the first character non-delimiter
 607+ 6527              //   n2   the first delimiter after the text
 608+ 6527              //   n3   the first character non enclosed.
 609+ 6527              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 610+ 6527              // an uncoditional delimiter.
 611+ 6527              // Examples:
 612+ 6527              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 613+ 6527              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 614+ 6527              // iii:	c  c  'nul'          -- 2  3  2
 615+ 6527                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 615+ 6527             >
 615+ 6527             >Dict_Ptr        defl    $
 615+ 6527             >
 615+ 6527             >//              ______________________________________________________________________
 615+ 6527             >//              Heap part
 615+ 6527             >
 615+ 6527             >
 615+ 6527             >                org     (Heap_Ptr & $1FFF) + $E000
 615+ E117             >
 615+ E117             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ E117             >Latest_Definition defl  Heap_Ptr
 615+ E117             >
 615+ E117             >                // dummy db directives used to calculate length of namec
 615+ E117 45 4E 43 4C >                db      "ENCLOSE"
 615+ E11B 4F 53 45    >
 615+ E11E             >len_NFA         defl    $ - temp_NFA
 615+ E11E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ E117             >
 615+ E117 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ E118 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 615+ E11C 4F 53 45    >
 615+ E11F             >                org     $-1                 // alter last byte of Name just above to set
 615+ E11E C5          >                db      {b $} | END_BIT     // msb as name end
 615+ E11F             >
 615+ E11F 0C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 615+ E121             >Prev_Ptr        defl    Heap_Ptr
 615+ E121             >
 615+ E121             >mirror_Ptr      defl    $
 615+ E121             >
 615+ E121 29 65       >                dw      Dict_Ptr + 2        // xt
 615+ E123             >Heap_Ptr        defl    $ - $E000           // save current HP
 615+ E123             >
 615+ E123             >Current_HP      defl  $ - $E000             // used to set HP once!
 615+ E123             >
 615+ E123             >//              ______________________________________________________________________
 615+ E123             >//              Dictionary part
 615+ E123             >
 615+ E123             >                org     Dict_Ptr
 615+ 6527             >
 615+ 6527 21 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 615+ 6529             >
 615+ 6529             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 6529 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 615+ 6529 ~           >
 615+ 6529 ~           >
 615+ 6529             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 6529             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 6529             >
 615+ 6529             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 6529 D9                           exx
 617+ 652A D1                           pop     de                  //  e has the character
 618+ 652B E1                           pop     hl                  // hl has the string address
 619+ 652C E5                           push    hl
 620+ 652D 7B                           ld      a, e
 621+ 652E 11 FF FF                     ld      de, -1              // let's start from -1
 622+ 6531 2B                           dec     hl
 623+ 6532              Enclose_NonDelimiter:
 624+ 6532                              // find first non delimiter
 625+ 6532 23                               inc     hl
 626+ 6533 13                               inc     de
 627+ 6534 BE                               cp      (hl)
 628+ 6535 28 FB                        jr      z, Enclose_NonDelimiter
 629+ 6537 D5                           push    de
 630+ 6538
 631+ 6538                              // push    bc                  // save Instruction Pointer
 632+ 6538
 633+ 6538 4F                           ld      c, a                // save char
 634+ 6539 7E                           ld      a, (hl)
 635+ 653A A7                           and     a                   // stop if 0x00
 636+ 653B 20 07                        jr      nz, Enclose_NextChar
 637+ 653D                              /// case iii. no more character in string
 638+ 653D                                  // pop     bc                  // restore Instruction Pointer
 639+ 653D 13                               inc     de
 640+ 653E D5                               push    de
 641+ 653F 1B                               dec     de
 642+ 6540 D5                               push    de
 643+ 6541 D9                               exx
 644+ 6542                                  next
 644+ 6542 DD E9       >                jp      (ix)
 645+ 6544              Enclose_NextChar:
 646+ 6544 79                               ld      a, c
 647+ 6545 23                               inc     hl
 648+ 6546 13                               inc     de
 649+ 6547 BE                               cp      (hl)
 650+ 6548 20 06                            jr      nz, Enclose_NonSeparator
 651+ 654A                                      // case i. first non enclosed
 652+ 654A                                      // pop     bc                  // restore Instruction Pointer
 653+ 654A D5                                   push    de
 654+ 654B 13                                   inc     de
 655+ 654C D5                                   push    de
 656+ 654D D9                                   exx
 657+ 654E                                      next
 657+ 654E DD E9       >                jp      (ix)
 658+ 6550              Enclose_NonSeparator:
 659+ 6550 7E                               ld      a, (hl)
 660+ 6551 A7                               and     a
 661+ 6552 20 F0                        jr      nz, Enclose_NextChar
 662+ 6554
 663+ 6554                              // case ii. separator & terminator
 664+ 6554                              // pop     bc                  // restore Instruction Pointer
 665+ 6554 D5                           push    de
 666+ 6555 D5                           push    de
 667+ 6556 D9                           exx
 668+ 6557                              next
 668+ 6557 DD E9       >                jp      (ix)
 669+ 6559
 670+ 6559              //  ______________________________________________________________________
 671+ 6559              //
 672+ 6559              // (map)        a2 a1 n c1 -- c2
 673+ 6559              // translate character c1 using mapping string a2 and a2
 674+ 6559              // if c1 is not present within string a1 then
 675+ 6559              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 676+ 6559                              New_Def C_MAP, "(MAP)", is_code, is_normal
 676+ 6559             >
 676+ 6559             >Dict_Ptr        defl    $
 676+ 6559             >
 676+ 6559             >//              ______________________________________________________________________
 676+ 6559             >//              Heap part
 676+ 6559             >
 676+ 6559             >
 676+ 6559             >                org     (Heap_Ptr & $1FFF) + $E000
 676+ E123             >
 676+ E123             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 676+ E123             >Latest_Definition defl  Heap_Ptr
 676+ E123             >
 676+ E123             >                // dummy db directives used to calculate length of namec
 676+ E123 28 4D 41 50 >                db      "(MAP)"
 676+ E127 29          >
 676+ E128             >len_NFA         defl    $ - temp_NFA
 676+ E128             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 676+ E123             >
 676+ E123 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 676+ E124 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 676+ E128 29          >
 676+ E129             >                org     $-1                 // alter last byte of Name just above to set
 676+ E128 A9          >                db      {b $} | END_BIT     // msb as name end
 676+ E129             >
 676+ E129 17 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 676+ E12B             >Prev_Ptr        defl    Heap_Ptr
 676+ E12B             >
 676+ E12B             >mirror_Ptr      defl    $
 676+ E12B             >
 676+ E12B 5B 65       >                dw      Dict_Ptr + 2        // xt
 676+ E12D             >Heap_Ptr        defl    $ - $E000           // save current HP
 676+ E12D             >
 676+ E12D             >Current_HP      defl  $ - $E000             // used to set HP once!
 676+ E12D             >
 676+ E12D             >//              ______________________________________________________________________
 676+ E12D             >//              Dictionary part
 676+ E12D             >
 676+ E12D             >                org     Dict_Ptr
 676+ 6559             >
 676+ 6559 2B 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 676+ 655B             >
 676+ 655B             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 676+ 655B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 676+ 655B ~           >
 676+ 655B ~           >
 676+ 655B             >                endif           ; ok        // for other definitions it "points" the correct handler
 676+ 655B             >                // Use of "; ok" to suppress "warning[fwdref]"
 676+ 655B             >
 676+ 655B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 677+ 655B D9                           exx
 678+ 655C E1                           pop     hl
 679+ 655D 7D                           ld      a, l
 680+ 655E C1                           pop     bc
 681+ 655F E1                           pop     hl
 682+ 6560 50                           ld      d, b
 683+ 6561 59                           ld      e, c
 684+ 6562 ED B1                        cpir
 685+ 6564 E1                           pop     hl
 686+ 6565 20 05                        jr      nz, C_Map_Then
 686+ 6567
 687+ 6567 19                               add     hl, de
 688+ 6568 2B                               dec     hl
 689+ 6569 ED 42                            sbc     hl, bc
 690+ 656B 7E                               ld      a, (hl)
 691+ 656C              C_Map_Then:
 692+ 656C 6F                           ld      l, a
 693+ 656D 26 00                        ld      h, 0
 694+ 656F E5                           push    hl
 695+ 6570 D9                           exx
 696+ 6571                              next
 696+ 6571 DD E9       >                jp      (ix)
 697+ 6573
 698+ 6573              //  ______________________________________________________________________
 699+ 6573              //
 700+ 6573              // (compare)    a1 a2 n -- b
 701+ 6573              // this word performs a lexicographic compare of n bytes of text at address a1
 702+ 6573              // with n bytes of text at address a2. It returns numeric a value:
 703+ 6573              //  0 : if strings are equal
 704+ 6573              // +1 : if string at a1 greater than string at a2
 705+ 6573              // -1 : if string at a1 less than string at a2
 706+ 6573              // strings can be 256 bytes in length at most.
 707+ 6573                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 707+ 6573             >
 707+ 6573             >Dict_Ptr        defl    $
 707+ 6573             >
 707+ 6573             >//              ______________________________________________________________________
 707+ 6573             >//              Heap part
 707+ 6573             >
 707+ 6573             >
 707+ 6573             >                org     (Heap_Ptr & $1FFF) + $E000
 707+ E12D             >
 707+ E12D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 707+ E12D             >Latest_Definition defl  Heap_Ptr
 707+ E12D             >
 707+ E12D             >                // dummy db directives used to calculate length of namec
 707+ E12D 28 43 4F 4D >                db      "(COMPARE)"
 707+ E131 50 41 52 45 >
 707+ E135 29          >
 707+ E136             >len_NFA         defl    $ - temp_NFA
 707+ E136             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 707+ E12D             >
 707+ E12D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 707+ E12E 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 707+ E132 50 41 52 45 >
 707+ E136 29          >
 707+ E137             >                org     $-1                 // alter last byte of Name just above to set
 707+ E136 A9          >                db      {b $} | END_BIT     // msb as name end
 707+ E137             >
 707+ E137 23 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 707+ E139             >Prev_Ptr        defl    Heap_Ptr
 707+ E139             >
 707+ E139             >mirror_Ptr      defl    $
 707+ E139             >
 707+ E139 75 65       >                dw      Dict_Ptr + 2        // xt
 707+ E13B             >Heap_Ptr        defl    $ - $E000           // save current HP
 707+ E13B             >
 707+ E13B             >Current_HP      defl  $ - $E000             // used to set HP once!
 707+ E13B             >
 707+ E13B             >//              ______________________________________________________________________
 707+ E13B             >//              Dictionary part
 707+ E13B             >
 707+ E13B             >                org     Dict_Ptr
 707+ 6573             >
 707+ 6573 39 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 707+ 6575             >
 707+ 6575             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 707+ 6575 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 707+ 6575 ~           >
 707+ 6575 ~           >
 707+ 6575             >                endif           ; ok        // for other definitions it "points" the correct handler
 707+ 6575             >                // Use of "; ok" to suppress "warning[fwdref]"
 707+ 6575             >
 707+ 6575             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 708+ 6575 D9                           exx
 709+ 6576 E1                           pop     hl                  // Number of bytes
 710+ 6577 7D                           ld      a, l
 711+ 6578 E1                           pop     hl                  // hl points string a2
 712+ 6579 D1                           pop     de                  // hl points string a1
 713+ 657A              //              push    bc                  // Instruction pointer on stack
 714+ 657A 47                           ld      b, a
 715+ 657B              C_Compare_Loop:
 716+ 657B 7E                               ld      a, (hl)
 717+ 657C CD 78 64                         call    Case_Sensitive
 718+ 657F 4F                               ld      c, a
 719+ 6580 1A                               ld      a, (de)
 720+ 6581 CD 78 64                         call    Case_Sensitive
 721+ 6584 B9                               cp      c
 722+ 6585 13                               inc     de
 723+ 6586 23                               inc     hl
 724+ 6587 28 0E                            jr      z, C_Compare_Equal
 725+ 6589 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 726+ 658B 21 01 00                                 ld      hl, 1               // a1 gt a2
 727+ 658E 18 03                                jr      C_Compare_Then      // Else
 728+ 6590              C_Compare_NotLessThan:
 729+ 6590 21 FF FF                                 ld      hl, -1              // a1 lt a2
 730+ 6593              C_Compare_Then:                                 // Endif
 731+ 6593              //                      pop     bc              // restore Instruction Pointer
 732+ 6593 E5                                   push    hl
 733+ 6594 D9                                   exx
 734+ 6595
 735+ 6595                                      next
 735+ 6595 DD E9       >                jp      (ix)
 736+ 6597
 737+ 6597              C_Compare_Equal:
 738+ 6597 10 E2                        djnz    C_Compare_Loop
 739+ 6599 21 00 00                     ld      hl, 0               // a1 eq a2
 740+ 659C              //              pop     bc                  // restore Instruction Pointer
 741+ 659C E5                           push    hl
 742+ 659D D9                           exx
 743+ 659E
 744+ 659E                              next
 744+ 659E DD E9       >                jp      (ix)
 745+ 65A0
 746+ 65A0              //  ______________________________________________________________________
 747+ 65A0              //
 748+ 65A0              // emitc        c --
 749+ 65A0              // low level emit, calls ROM routine at #10 to send a character to
 750+ 65A0              // the the current channel (see SELECT to change stream-channel)
 751+ 65A0                              New_Def EMITC, "EMITC", is_code, is_normal
 751+ 65A0             >
 751+ 65A0             >Dict_Ptr        defl    $
 751+ 65A0             >
 751+ 65A0             >//              ______________________________________________________________________
 751+ 65A0             >//              Heap part
 751+ 65A0             >
 751+ 65A0             >
 751+ 65A0             >                org     (Heap_Ptr & $1FFF) + $E000
 751+ E13B             >
 751+ E13B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 751+ E13B             >Latest_Definition defl  Heap_Ptr
 751+ E13B             >
 751+ E13B             >                // dummy db directives used to calculate length of namec
 751+ E13B 45 4D 49 54 >                db      "EMITC"
 751+ E13F 43          >
 751+ E140             >len_NFA         defl    $ - temp_NFA
 751+ E140             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 751+ E13B             >
 751+ E13B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 751+ E13C 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 751+ E140 43          >
 751+ E141             >                org     $-1                 // alter last byte of Name just above to set
 751+ E140 C3          >                db      {b $} | END_BIT     // msb as name end
 751+ E141             >
 751+ E141 2D 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 751+ E143             >Prev_Ptr        defl    Heap_Ptr
 751+ E143             >
 751+ E143             >mirror_Ptr      defl    $
 751+ E143             >
 751+ E143 A2 65       >                dw      Dict_Ptr + 2        // xt
 751+ E145             >Heap_Ptr        defl    $ - $E000           // save current HP
 751+ E145             >
 751+ E145             >Current_HP      defl  $ - $E000             // used to set HP once!
 751+ E145             >
 751+ E145             >//              ______________________________________________________________________
 751+ E145             >//              Dictionary part
 751+ E145             >
 751+ E145             >                org     Dict_Ptr
 751+ 65A0             >
 751+ 65A0 43 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 751+ 65A2             >
 751+ 65A2             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 751+ 65A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 751+ 65A2 ~           >
 751+ 65A2 ~           >
 751+ 65A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 751+ 65A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 751+ 65A2             >
 751+ 65A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 752+ 65A2 E1                           pop     hl
 753+ 65A3 7D                           ld      a, l
 754+ 65A4              Emitc_Ptr:
 755+ 65A4 C5                           push    bc
 756+ 65A5 D5                           push    de
 757+ 65A6 DD E5                        push    ix
 758+ 65A8 D7                           rst     $10
 759+ 65A9 DD E1                        pop     ix
 760+ 65AB D1                           pop     de
 761+ 65AC C1                           pop     bc
 762+ 65AD 3E FF                        ld      a, 255            // max possible
 763+ 65AF 32 8C 5C                     ld      (SCR_CT), a
 764+ 65B2                              next
 764+ 65B2 DD E9       >                jp      (ix)
 765+ 65B4
 766+ 65B4              //  ______________________________________________________________________
 767+ 65B4              //
 768+ 65B4              // cr           --
 769+ 65B4              // send a CR via EMITC
 770+ 65B4                              New_Def CR, "CR", is_code, is_normal
 770+ 65B4             >
 770+ 65B4             >Dict_Ptr        defl    $
 770+ 65B4             >
 770+ 65B4             >//              ______________________________________________________________________
 770+ 65B4             >//              Heap part
 770+ 65B4             >
 770+ 65B4             >
 770+ 65B4             >                org     (Heap_Ptr & $1FFF) + $E000
 770+ E145             >
 770+ E145             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 770+ E145             >Latest_Definition defl  Heap_Ptr
 770+ E145             >
 770+ E145             >                // dummy db directives used to calculate length of namec
 770+ E145 43 52       >                db      "CR"
 770+ E147             >len_NFA         defl    $ - temp_NFA
 770+ E147             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 770+ E145             >
 770+ E145 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 770+ E146 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 770+ E148             >                org     $-1                 // alter last byte of Name just above to set
 770+ E147 D2          >                db      {b $} | END_BIT     // msb as name end
 770+ E148             >
 770+ E148 3B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 770+ E14A             >Prev_Ptr        defl    Heap_Ptr
 770+ E14A             >
 770+ E14A             >mirror_Ptr      defl    $
 770+ E14A             >
 770+ E14A B6 65       >                dw      Dict_Ptr + 2        // xt
 770+ E14C             >Heap_Ptr        defl    $ - $E000           // save current HP
 770+ E14C             >
 770+ E14C             >Current_HP      defl  $ - $E000             // used to set HP once!
 770+ E14C             >
 770+ E14C             >//              ______________________________________________________________________
 770+ E14C             >//              Dictionary part
 770+ E14C             >
 770+ E14C             >                org     Dict_Ptr
 770+ 65B4             >
 770+ 65B4 4A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 770+ 65B6             >
 770+ 65B6             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 770+ 65B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 770+ 65B6 ~           >
 770+ 65B6 ~           >
 770+ 65B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 770+ 65B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 770+ 65B6             >
 770+ 65B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 771+ 65B6
 772+ 65B6 3E 0D                        ld      a, CR_CHAR
 773+ 65B8 18 EA                        jr      Emitc_Ptr
 774+ 65BA
 775+ 65BA              Emitc_Vec:
 776+ 65BA F3 65                        dw      C_Emit_Printable  // comma
 777+ 65BC FA 65                        dw      C_Emit_Bel        // bel
 778+ 65BE F3 65                        dw      C_Emit_Printable  // bs
 779+ 65C0 12 66                        dw      C_Emit_Tab        // tab
 780+ 65C2 F3 65                        dw      C_Emit_Printable  // cr
 781+ 65C4 19 66                        dw      C_Emit_NL         // lf (unix newline)
 782+ 65C6 F3 65                        dw      C_Emit_Printable  // blank
 783+ 65C8 F3 65                        dw      C_Emit_Printable  // blank
 784+ 65CA
 785+ 65CA              Emit_Selector_Start:
 786+ 65CA 06                           db      $06                 // comma
 787+ 65CB 07                           db      $07                 // bel
 788+ 65CC 08                           db      $08                 // bs
 789+ 65CD 09                           db      $09                 // tab
 790+ 65CE 0D                           db      $0D                 // cr
 791+ 65CF 0A                           db      $0A                 // lf (unix newline)
 792+ 65D0 20                           db      $20
 793+ 65D1              Emit_Selector_End:
 794+ 65D1 20                           db      $20
 795+ 65D2
 796+ 65D2              //  ______________________________________________________________________
 797+ 65D2              //
 798+ 65D2              // (?emit)      c1 -- c2 | c1
 799+ 65D2              // decode a character to be sent via EMIT
 800+ 65D2              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 801+ 65D2              // the routine should resolve anything and convert the character anyway.
 802+ 65D2                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 802+ 65D2             >
 802+ 65D2             >Dict_Ptr        defl    $
 802+ 65D2             >
 802+ 65D2             >//              ______________________________________________________________________
 802+ 65D2             >//              Heap part
 802+ 65D2             >
 802+ 65D2             >
 802+ 65D2             >                org     (Heap_Ptr & $1FFF) + $E000
 802+ E14C             >
 802+ E14C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 802+ E14C             >Latest_Definition defl  Heap_Ptr
 802+ E14C             >
 802+ E14C             >                // dummy db directives used to calculate length of namec
 802+ E14C 28 3F 45 4D >                db      "(?EMIT)"
 802+ E150 49 54 29    >
 802+ E153             >len_NFA         defl    $ - temp_NFA
 802+ E153             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 802+ E14C             >
 802+ E14C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 802+ E14D 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 802+ E151 49 54 29    >
 802+ E154             >                org     $-1                 // alter last byte of Name just above to set
 802+ E153 A9          >                db      {b $} | END_BIT     // msb as name end
 802+ E154             >
 802+ E154 45 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 802+ E156             >Prev_Ptr        defl    Heap_Ptr
 802+ E156             >
 802+ E156             >mirror_Ptr      defl    $
 802+ E156             >
 802+ E156 D4 65       >                dw      Dict_Ptr + 2        // xt
 802+ E158             >Heap_Ptr        defl    $ - $E000           // save current HP
 802+ E158             >
 802+ E158             >Current_HP      defl  $ - $E000             // used to set HP once!
 802+ E158             >
 802+ E158             >//              ______________________________________________________________________
 802+ E158             >//              Dictionary part
 802+ E158             >
 802+ E158             >                org     Dict_Ptr
 802+ 65D2             >
 802+ 65D2 56 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 802+ 65D4             >
 802+ 65D4             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 802+ 65D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 802+ 65D4 ~           >
 802+ 65D4 ~           >
 802+ 65D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 802+ 65D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 802+ 65D4             >
 802+ 65D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 803+ 65D4 D9                           exx
 804+ 65D5 D1                           pop     de
 805+ 65D6 7B                           ld      a, e                //  de has c1
 806+ 65D7 E6 7F                        and     $7F                 // 7-bit ascii only
 807+ 65D9                              // push    bc                  // save Instruction Pointer
 808+ 65D9 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 809+ 65DC 21 D1 65                     ld      hl, Emit_Selector_End
 810+ 65DF ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 811+ 65E1 20 0A                        jr      nz, C_Emit_Not_Found
 812+ 65E3                                  // Found then decode it
 813+ 65E3 21 BA 65                         ld      hl, Emitc_Vec
 814+ 65E6 09                               add     hl, bc
 815+ 65E7 09                               add     hl, bc
 816+ 65E8 5E                               ld      e, (hl)
 817+ 65E9 23                               inc     hl
 818+ 65EA 56                               ld      d, (hl)
 819+ 65EB EB                               ex      de, hl
 820+ 65EC                                  // pop     bc                  // restore Instruction Pointer
 821+ 65EC E9                               jp      (hl)                // one of the following labels
 822+ 65ED              C_Emit_Not_Found:
 823+ 65ED                              // pop     bc                  // restore Instruction Pointer
 824+ 65ED FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 825+ 65EF 30 02                        jr      nc, C_Emit_Printable
 826+ 65F1 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 827+ 65F3              C_Emit_Printable:
 828+ 65F3 6F                           ld      l, a
 829+ 65F4 26 00                        ld      h, 0
 830+ 65F6 E5                           push    hl
 831+ 65F7 D9                           exx
 832+ 65F8                              next
 832+ 65F8 DD E9       >                jp      (ix)
 833+ 65FA
 834+ 65FA              C_Emit_Bel:
 835+ 65FA D9                            exx
 836+ 65FB C5                           push    bc                  // save Instruction Pointer
 837+ 65FC D5                           push    de
 838+ 65FD 11 00 01                     ld      de, $0100
 839+ 6600 21 00 02                     ld      hl, $0200
 840+ 6603 DD E5                        push    ix                  // save Next Pointer
 841+ 6605 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 842+ 6608 DD E1                        pop     ix                  // restore Next Pointer
 843+ 660A D1                           pop     de
 844+ 660B C1                           pop     bc                  // restore Instruction Pointer
 845+ 660C 21 00 00                     ld      hl, NUL_CHAR
 846+ 660F E5                           push    hl
 847+ 6610                              next
 847+ 6610 DD E9       >                jp      (ix)
 848+ 6612
 849+ 6612 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 850+ 6615 E5                           push    hl
 851+ 6616 D9                           exx
 852+ 6617                              next
 852+ 6617 DD E9       >                jp      (ix)
 853+ 6619
 854+ 6619 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 855+ 661C E5                           push    hl
 856+ 661D D9                           exx
 857+ 661E                              next
 857+ 661E DD E9       >                jp      (ix)
 858+ 6620
 859+ 6620              //  ______________________________________________________________________
 860+ 6620
 861+ 6620              Key_Table:
 862+ 6620 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 863+ 6621 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 864+ 6622 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 865+ 6623 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 866+ 6624 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 867+ 6625 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 868+ 6626 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 869+ 6627 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 870+ 6628 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 871+ 6629 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 872+ 662A C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 873+ 662B              Key_MapTo:
 874+ 662B 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 875+ 662C 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 876+ 662D 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 877+ 662E 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 878+ 662F 5D                           db      $5D                 //  6: SYMBOL+U : ]
 879+ 6630 5B                           db      $5B                 //  5: SYMBOL+Y : [
 880+ 6631 7D                           db      $7D                 //  4: SYMBOL+G : }
 881+ 6632 7B                           db      $7B                 //  3: SYMBOL+F : {
 882+ 6633 5C                           db      $5C                 //  2: SYMBOl+D : //
 883+ 6634 7C                           db      $7C                 //  1: SYMBOL+S : |
 884+ 6635 7E                           db      $7E                 //  0: SYMBOL+A : ~
 885+ 6636
 886+ 6636              //  ______________________________________________________________________
 887+ 6636              //
 888+ 6636              // curs         -- c
 889+ 6636              // wait for a keypress
 890+ 6636              // This definition need Standard ROM Interrupt to be served
 891+ 6636
 892+ 6636                              New_Def CUR, "CURS", is_code, is_normal
 892+ 6636             >
 892+ 6636             >Dict_Ptr        defl    $
 892+ 6636             >
 892+ 6636             >//              ______________________________________________________________________
 892+ 6636             >//              Heap part
 892+ 6636             >
 892+ 6636             >
 892+ 6636             >                org     (Heap_Ptr & $1FFF) + $E000
 892+ E158             >
 892+ E158             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 892+ E158             >Latest_Definition defl  Heap_Ptr
 892+ E158             >
 892+ E158             >                // dummy db directives used to calculate length of namec
 892+ E158 43 55 52 53 >                db      "CURS"
 892+ E15C             >len_NFA         defl    $ - temp_NFA
 892+ E15C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 892+ E158             >
 892+ E158 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 892+ E159 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 892+ E15D             >                org     $-1                 // alter last byte of Name just above to set
 892+ E15C D3          >                db      {b $} | END_BIT     // msb as name end
 892+ E15D             >
 892+ E15D 4C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 892+ E15F             >Prev_Ptr        defl    Heap_Ptr
 892+ E15F             >
 892+ E15F             >mirror_Ptr      defl    $
 892+ E15F             >
 892+ E15F 38 66       >                dw      Dict_Ptr + 2        // xt
 892+ E161             >Heap_Ptr        defl    $ - $E000           // save current HP
 892+ E161             >
 892+ E161             >Current_HP      defl  $ - $E000             // used to set HP once!
 892+ E161             >
 892+ E161             >//              ______________________________________________________________________
 892+ E161             >//              Dictionary part
 892+ E161             >
 892+ E161             >                org     Dict_Ptr
 892+ 6636             >
 892+ 6636 5F 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 892+ 6638             >
 892+ 6638             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 892+ 6638 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 892+ 6638 ~           >
 892+ 6638 ~           >
 892+ 6638             >                endif           ; ok        // for other definitions it "points" the correct handler
 892+ 6638             >                // Use of "; ok" to suppress "warning[fwdref]"
 892+ 6638             >
 892+ 6638             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 893+ 6638
 894+ 6638 C5                           push    bc                  // save Instruction Pointer
 895+ 6639 D5                           push    de                  // save Return Stack Pointer
 896+ 663A DD E5                        push    ix
 897+ 663C ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 898+ 6640 31 61 63                     ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 899+ 6643 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 900+ 6647
 901+ 6647              Cur_Wait:
 902+ 6647 76                               halt
 903+ 6648 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 904+ 664A CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 905+ 664D
 906+ 664D                                  // software-flash: flips face every 320 ms
 907+ 664D 3E 20                            ld      a, $20              // Timing based
 908+ 664F FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 909+ 6652
 910+ 6652 3A 8E 63                         ld      a, (Block_Face)     // see origin.asm
 911+ 6655 20 0C                            jr      nz, Cur_Cursor
 912+ 6657 3A 8F 63                             ld      a, (Half_Face)      // see origin.asm
 913+ 665A FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 914+ 665E 28 03                                jr      z, Cur_Cursor
 915+ 6660 3A 90 63                                 ld      a, (Underscore_Face) // see origin
 916+ 6663              Cur_Cursor:
 917+ 6663 D7                               rst     $10
 918+ 6664 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 919+ 6666 D7                               rst     $10
 920+ 6667
 921+ 6667 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 922+ 666B 28 DA                        jr      z, Cur_Wait
 923+ 666D
 924+ 666D 76                           halt    // this is to sync flashing cursor.
 925+ 666E
 926+ 666E 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 927+ 6670 D7                           rst     $10
 928+ 6671 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 929+ 6673 D7                           rst     $10
 930+ 6674
 931+ 6674 ED 7B 92 63                  ld      sp, (SP_Saved)
 932+ 6678
 933+ 6678 DD E1                        pop     ix
 934+ 667A D1                           pop     de                  // Restore Return Stack Pointer
 935+ 667B C1                           pop     bc                  // Restore Instruction Pointer
 936+ 667C                              next
 936+ 667C DD E9       >                jp      (ix)
 937+ 667E
 938+ 667E
 939+ 667E              //  ______________________________________________________________________
 940+ 667E              //
 941+ 667E              // key          -- c
 942+ 667E              // This definition need Standard ROM Interrupt to be served
 943+ 667E
 944+ 667E                              New_Def KEY, "KEY", is_code, is_normal
 944+ 667E             >
 944+ 667E             >Dict_Ptr        defl    $
 944+ 667E             >
 944+ 667E             >//              ______________________________________________________________________
 944+ 667E             >//              Heap part
 944+ 667E             >
 944+ 667E             >
 944+ 667E             >                org     (Heap_Ptr & $1FFF) + $E000
 944+ E161             >
 944+ E161             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 944+ E161             >Latest_Definition defl  Heap_Ptr
 944+ E161             >
 944+ E161             >                // dummy db directives used to calculate length of namec
 944+ E161 4B 45 59    >                db      "KEY"
 944+ E164             >len_NFA         defl    $ - temp_NFA
 944+ E164             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 944+ E161             >
 944+ E161 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 944+ E162 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 944+ E165             >                org     $-1                 // alter last byte of Name just above to set
 944+ E164 D9          >                db      {b $} | END_BIT     // msb as name end
 944+ E165             >
 944+ E165 58 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 944+ E167             >Prev_Ptr        defl    Heap_Ptr
 944+ E167             >
 944+ E167             >mirror_Ptr      defl    $
 944+ E167             >
 944+ E167 80 66       >                dw      Dict_Ptr + 2        // xt
 944+ E169             >Heap_Ptr        defl    $ - $E000           // save current HP
 944+ E169             >
 944+ E169             >Current_HP      defl  $ - $E000             // used to set HP once!
 944+ E169             >
 944+ E169             >//              ______________________________________________________________________
 944+ E169             >//              Dictionary part
 944+ E169             >
 944+ E169             >                org     Dict_Ptr
 944+ 667E             >
 944+ 667E 67 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 944+ 6680             >
 944+ 6680             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 944+ 6680 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 944+ 6680 ~           >
 944+ 6680 ~           >
 944+ 6680             >                endif           ; ok        // for other definitions it "points" the correct handler
 944+ 6680             >                // Use of "; ok" to suppress "warning[fwdref]"
 944+ 6680             >
 944+ 6680             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 945+ 6680
 946+ 6680 C5                           push    bc                  // Save Instruction Pointer
 947+ 6681
 948+ 6681              Key_Wait:
 949+ 6681 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 950+ 6685 28 FA                        jr      z, Key_Wait
 951+ 6687
 952+ 6687 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 953+ 668A
 954+ 668A                              // decode character from above table
 955+ 668A 21 20 66                     ld      hl, Key_Table
 956+ 668D 01 0B 00                     ld      bc, $000B
 957+ 6690 ED B1                        cpir
 958+ 6692 20 05                        jr      nz, Key_DontMap
 959+ 6694 21 2B 66                         ld      hl, Key_MapTo
 960+ 6697 09                               add     hl, bc
 961+ 6698 7E                               ld      a, (hl)
 962+ 6699 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 963+ 669B 20 09                        jr      nz, Key_NoCapsLock
 964+ 669D 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 965+ 66A0 7E                               ld      a, (hl)
 966+ 66A1 EE 08                            xor     $08
 967+ 66A3 77                               ld      (hl), a
 968+ 66A4 3E 00                            ld      a, NUL_CHAR
 969+ 66A6 6F           Key_NoCapsLock: ld      l, a
 970+ 66A7 26 00                        ld      h, 0                // Prepare TOS
 971+ 66A9
 972+ 66A9 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 973+ 66AD
 974+ 66AD C1                           pop     bc                  // Restore Instruction Pointer
 975+ 66AE
 976+ 66AE                              psh1
 976+ 66AE E5          >                push    hl
 976+ 66AF DD E9       >                jp      (ix)
 977+ 66B1
 978+ 66B1
 979+ 66B1              //  ______________________________________________________________________
 980+ 66B1              //
 981+ 66B1              // click        --
 982+ 66B1              // This definition need Standard ROM Interrupt to be served
 983+ 66B1              //
 984+ 66B1              //              New_Def CLICK, "CLICK", is_code, is_normal
 985+ 66B1              //
 986+ 66B1              //                push    bc
 987+ 66B1              //              ld      a, ($5C48)          // BORDCR system variable
 988+ 66B1              //              rra
 989+ 66B1              //              rra
 990+ 66B1              //              rra
 991+ 66B1              //              or      $18                 // quick'n'dirty click
 992+ 66B1              //              out     ($fe), a
 993+ 66B1              //              ld      b, 0
 994+ 66B1              //              djnz    $                   // wait loop
 995+ 66B1              //              xor     $18
 996+ 66B1              //              out     ($fe), a
 997+ 66B1              //                pop     bc
 998+ 66B1
 999+ 66B1              //              next
1000+ 66B1
1001+ 66B1              //  ______________________________________________________________________
1002+ 66B1              //
1003+ 66B1              // key?         -- f
1004+ 66B1              // key available
1005+ 66B1              //
1006+ 66B1              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1007+ 66B1              //
1008+ 66B1              //              ld      hl, 0000
1009+ 66B1              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1010+ 66B1              //              jr      z, Key_Q
1011+ 66B1              //                  dec     hl
1012+ 66B1              // Key_Q:
1013+ 66B1              //                psh1
1014+ 66B1              //              next
1015+ 66B1
1016+ 66B1              //  ______________________________________________________________________
1017+ 66B1              //
1018+ 66B1              // ?terminal    -- FALSE | TRUE
1019+ 66B1              // test for BREAK keypress
1020+ 66B1                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1020+ 66B1             >
1020+ 66B1             >Dict_Ptr        defl    $
1020+ 66B1             >
1020+ 66B1             >//              ______________________________________________________________________
1020+ 66B1             >//              Heap part
1020+ 66B1             >
1020+ 66B1             >
1020+ 66B1             >                org     (Heap_Ptr & $1FFF) + $E000
1020+ E169             >
1020+ E169             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ E169             >Latest_Definition defl  Heap_Ptr
1020+ E169             >
1020+ E169             >                // dummy db directives used to calculate length of namec
1020+ E169 3F 54 45 52 >                db      "?TERMINAL"
1020+ E16D 4D 49 4E 41 >
1020+ E171 4C          >
1020+ E172             >len_NFA         defl    $ - temp_NFA
1020+ E172             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ E169             >
1020+ E169 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ E16A 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1020+ E16E 4D 49 4E 41 >
1020+ E172 4C          >
1020+ E173             >                org     $-1                 // alter last byte of Name just above to set
1020+ E172 CC          >                db      {b $} | END_BIT     // msb as name end
1020+ E173             >
1020+ E173 61 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1020+ E175             >Prev_Ptr        defl    Heap_Ptr
1020+ E175             >
1020+ E175             >mirror_Ptr      defl    $
1020+ E175             >
1020+ E175 B3 66       >                dw      Dict_Ptr + 2        // xt
1020+ E177             >Heap_Ptr        defl    $ - $E000           // save current HP
1020+ E177             >
1020+ E177             >Current_HP      defl  $ - $E000             // used to set HP once!
1020+ E177             >
1020+ E177             >//              ______________________________________________________________________
1020+ E177             >//              Dictionary part
1020+ E177             >
1020+ E177             >                org     Dict_Ptr
1020+ 66B1             >
1020+ 66B1 75 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1020+ 66B3             >
1020+ 66B3             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 66B3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1020+ 66B3 ~           >
1020+ 66B3 ~           >
1020+ 66B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 66B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 66B3             >
1020+ 66B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 66B3 D9                           exx
1022+ 66B4 01 FE 7F                     ld      bc, $7ffe
1023+ 66B7 ED 50                        in      d, (c)
1024+ 66B9 41                           ld      b, c
1025+ 66BA ED 78                        in      a, (c)
1026+ 66BC B2                           or       d
1027+ 66BD 1F                           rra
1028+ 66BE 3F                           ccf
1029+ 66BF ED 62                        sbc     hl, hl
1030+ 66C1 E5                           push    hl
1031+ 66C2 D9                           exx
1032+ 66C3                              next
1032+ 66C3 DD E9       >                jp      (ix)
1033+ 66C5
1034+ 66C5
1035+ 66C5              //  ______________________________________________________________________
1036+ 66C5              //
1037+ 66C5              // inkey        -- c | 0
1038+ 66C5              // call ROM inkey$ routine, returns c or "zero".
1039+ 66C5              //
1040+ 66C5              //              New_Def INKEY, "INKEY", is_code, is_normal
1041+ 66C5              //              push    bc
1042+ 66C5              //              push    de
1043+ 66C5              //              ld      (SP_Saved), sp
1044+ 66C5              //              ld      sp, Cold_origin - 5
1045+ 66C5              //              push    ix
1046+ 66C5              //              call    $15E6                   // instead of 15E9
1047+ 66C5              //              pop     ix
1048+ 66C5              //              ld      sp, (SP_Saved)
1049+ 66C5              //              ld      l, a
1050+ 66C5              //              ld      h, 0
1051+ 66C5              //              pop     de
1052+ 66C5              //              pop     bc
1053+ 66C5              //              psh1
1054+ 66C5
1055+ 66C5              //  ______________________________________________________________________
1056+ 66C5              //
1057+ 66C5              // select      n --
1058+ 66C5              // selects the given channel number
1059+ 66C5
1060+ 66C5                              New_Def SELECT, "SELECT", is_code, is_normal
1060+ 66C5             >
1060+ 66C5             >Dict_Ptr        defl    $
1060+ 66C5             >
1060+ 66C5             >//              ______________________________________________________________________
1060+ 66C5             >//              Heap part
1060+ 66C5             >
1060+ 66C5             >
1060+ 66C5             >                org     (Heap_Ptr & $1FFF) + $E000
1060+ E177             >
1060+ E177             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1060+ E177             >Latest_Definition defl  Heap_Ptr
1060+ E177             >
1060+ E177             >                // dummy db directives used to calculate length of namec
1060+ E177 53 45 4C 45 >                db      "SELECT"
1060+ E17B 43 54       >
1060+ E17D             >len_NFA         defl    $ - temp_NFA
1060+ E17D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1060+ E177             >
1060+ E177 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1060+ E178 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1060+ E17C 43 54       >
1060+ E17E             >                org     $-1                 // alter last byte of Name just above to set
1060+ E17D D4          >                db      {b $} | END_BIT     // msb as name end
1060+ E17E             >
1060+ E17E 69 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1060+ E180             >Prev_Ptr        defl    Heap_Ptr
1060+ E180             >
1060+ E180             >mirror_Ptr      defl    $
1060+ E180             >
1060+ E180 C7 66       >                dw      Dict_Ptr + 2        // xt
1060+ E182             >Heap_Ptr        defl    $ - $E000           // save current HP
1060+ E182             >
1060+ E182             >Current_HP      defl  $ - $E000             // used to set HP once!
1060+ E182             >
1060+ E182             >//              ______________________________________________________________________
1060+ E182             >//              Dictionary part
1060+ E182             >
1060+ E182             >                org     Dict_Ptr
1060+ 66C5             >
1060+ 66C5 80 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1060+ 66C7             >
1060+ 66C7             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1060+ 66C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1060+ 66C7 ~           >
1060+ 66C7 ~           >
1060+ 66C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1060+ 66C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1060+ 66C7             >
1060+ 66C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1061+ 66C7 E1                           pop     hl
1062+ 66C8 C5                           push    bc
1063+ 66C9 D5                           push    de
1064+ 66CA 7D                           ld      a, l
1065+ 66CB ED 73 92 63                  ld      (SP_Saved), sp
1066+ 66CF 31 61 63                     ld      sp, Cold_origin - 5
1067+ 66D2 DD E5                        push    ix
1068+ 66D4 CD 01 16                     call    $1601
1069+ 66D7 DD E1                        pop     ix
1070+ 66D9 ED 7B 92 63                  ld      sp, (SP_Saved)
1071+ 66DD D1                           pop     de
1072+ 66DE C1                           pop     bc
1073+ 66DF                              next
1073+ 66DF DD E9       >                jp      (ix)
1074+ 66E1
1075+ 66E1              //  ______________________________________________________________________
1076+ 66E1              //
1077+ 66E1              // ZX Spectrum Next - Low Level disk primitives.
1078+ 66E1              // this include is "here" for backward compatibility
1079+ 66E1
1080+ 66E1                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
   1++66E1              //  ______________________________________________________________________
   2++66E1              //
   3++66E1              //  next-opt.asm
   4++66E1              //
   5++66E1              //  ZX Spectrum Next - peculiar definitions
   6++66E1              //  ______________________________________________________________________
   7++66E1
   8++66E1              //  ______________________________________________________________________
   9++66E1              //
  10++66E1              // f_seek       d u -- f
  11++66E1              // Seek to position d in file-handle u.
  12++66E1              // Return a false-flag 0 on success, True flag on error
  13++66E1                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++66E1             >
  13++66E1             >Dict_Ptr        defl    $
  13++66E1             >
  13++66E1             >//              ______________________________________________________________________
  13++66E1             >//              Heap part
  13++66E1             >
  13++66E1             >
  13++66E1             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E182             >
  13++E182             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E182             >Latest_Definition defl  Heap_Ptr
  13++E182             >
  13++E182             >                // dummy db directives used to calculate length of namec
  13++E182 46 5F 53 45 >                db      "F_SEEK"
  13++E186 45 4B       >
  13++E188             >len_NFA         defl    $ - temp_NFA
  13++E188             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E182             >
  13++E182 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E183 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E187 45 4B       >
  13++E189             >                org     $-1                 // alter last byte of Name just above to set
  13++E188 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E189             >
  13++E189 77 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E18B             >Prev_Ptr        defl    Heap_Ptr
  13++E18B             >
  13++E18B             >mirror_Ptr      defl    $
  13++E18B             >
  13++E18B E3 66       >                dw      Dict_Ptr + 2        // xt
  13++E18D             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E18D             >
  13++E18D             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E18D             >
  13++E18D             >//              ______________________________________________________________________
  13++E18D             >//              Dictionary part
  13++E18D             >
  13++E18D             >                org     Dict_Ptr
  13++66E1             >
  13++66E1 8B 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++66E3             >
  13++66E3             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++66E3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++66E3 ~           >
  13++66E3 ~           >
  13++66E3             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++66E3             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++66E3             >
  13++66E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++66E3 D9                            exx
  15++66E4 E1                            pop     hl                  // file-handle
  16++66E5 7D                            ld      a, l
  17++66E6 C1                            pop     bc                  // bc has high-word of d
  18++66E7 D1                            pop     de
  19++66E8 D9                           exx
  20++66E9 DD E5                        push    ix
  21++66EB D5                           push    de
  22++66EC C5                           push    bc                  // save Instruction Pointer
  23++66ED D9                            exx
  24++66EE DD 21 00 00                   ld      ix, 0
  25++66F2 CF                            rst     $08
  26++66F3 9F                            db      $9F
  27++66F4              F_Seek_Exit:
  28++66F4 C1                           pop     bc                  // restore Instruction Pointer
  29++66F5 D1                           pop     de
  30++66F6 DD E1                        pop     ix
  31++66F8 ED 62                        sbc     hl, hl              // to get 0 or -1
  32++66FA
  33++66FA                              psh1
  33++66FA E5          >                push    hl
  33++66FB DD E9       >                jp      (ix)
  34++66FD
  35++66FD              //  ______________________________________________________________________
  36++66FD              //
  37++66FD              // f_close      u -- f
  38++66FD              // Close file-handle u.
  39++66FD              // Return 0 on success, True flag on error
  40++66FD
  41++66FD                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  41++66FD             >
  41++66FD             >Dict_Ptr        defl    $
  41++66FD             >
  41++66FD             >//              ______________________________________________________________________
  41++66FD             >//              Heap part
  41++66FD             >
  41++66FD             >
  41++66FD             >                org     (Heap_Ptr & $1FFF) + $E000
  41++E18D             >
  41++E18D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41++E18D             >Latest_Definition defl  Heap_Ptr
  41++E18D             >
  41++E18D             >                // dummy db directives used to calculate length of namec
  41++E18D 46 5F 43 4C >                db      "F_CLOSE"
  41++E191 4F 53 45    >
  41++E194             >len_NFA         defl    $ - temp_NFA
  41++E194             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41++E18D             >
  41++E18D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  41++E18E 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  41++E192 4F 53 45    >
  41++E195             >                org     $-1                 // alter last byte of Name just above to set
  41++E194 C5          >                db      {b $} | END_BIT     // msb as name end
  41++E195             >
  41++E195 82 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  41++E197             >Prev_Ptr        defl    Heap_Ptr
  41++E197             >
  41++E197             >mirror_Ptr      defl    $
  41++E197             >
  41++E197 FF 66       >                dw      Dict_Ptr + 2        // xt
  41++E199             >Heap_Ptr        defl    $ - $E000           // save current HP
  41++E199             >
  41++E199             >Current_HP      defl  $ - $E000             // used to set HP once!
  41++E199             >
  41++E199             >//              ______________________________________________________________________
  41++E199             >//              Dictionary part
  41++E199             >
  41++E199             >                org     Dict_Ptr
  41++66FD             >
  41++66FD 97 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  41++66FF             >
  41++66FF             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  41++66FF ~           >                call    runcode ; ok        // for primitive definitions  actual code
  41++66FF ~           >
  41++66FF ~           >
  41++66FF             >                endif           ; ok        // for other definitions it "points" the correct handler
  41++66FF             >                // Use of "; ok" to suppress "warning[fwdref]"
  41++66FF             >
  41++66FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42++66FF
  43++66FF E1                           pop     hl
  44++6700 7D                           ld      a, l                // file-handle
  45++6701 DD E5                        push    ix
  46++6703 D5                           push    de
  47++6704 C5                           push    bc                  // Save Instruction pointer
  48++6705 CF                           rst     $08
  49++6706 9B                           db      $9B
  50++6707 18 EB                        jr      F_Seek_Exit
  51++6709              //              pop     de
  52++6709              //              pop     bc
  53++6709              //              pop     ix
  54++6709              //              sbc     hl, hl
  55++6709              //              psh1
  56++6709
  57++6709              //  ______________________________________________________________________
  58++6709              //
  59++6709              // f_sync      u -- f
  60++6709              // Close file-handle u.
  61++6709              // Return 0 on success, True flag on error
  62++6709
  63++6709                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  63++6709             >
  63++6709             >Dict_Ptr        defl    $
  63++6709             >
  63++6709             >//              ______________________________________________________________________
  63++6709             >//              Heap part
  63++6709             >
  63++6709             >
  63++6709             >                org     (Heap_Ptr & $1FFF) + $E000
  63++E199             >
  63++E199             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63++E199             >Latest_Definition defl  Heap_Ptr
  63++E199             >
  63++E199             >                // dummy db directives used to calculate length of namec
  63++E199 46 5F 53 59 >                db      "F_SYNC"
  63++E19D 4E 43       >
  63++E19F             >len_NFA         defl    $ - temp_NFA
  63++E19F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63++E199             >
  63++E199 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63++E19A 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  63++E19E 4E 43       >
  63++E1A0             >                org     $-1                 // alter last byte of Name just above to set
  63++E19F C3          >                db      {b $} | END_BIT     // msb as name end
  63++E1A0             >
  63++E1A0 8D 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63++E1A2             >Prev_Ptr        defl    Heap_Ptr
  63++E1A2             >
  63++E1A2             >mirror_Ptr      defl    $
  63++E1A2             >
  63++E1A2 0B 67       >                dw      Dict_Ptr + 2        // xt
  63++E1A4             >Heap_Ptr        defl    $ - $E000           // save current HP
  63++E1A4             >
  63++E1A4             >Current_HP      defl  $ - $E000             // used to set HP once!
  63++E1A4             >
  63++E1A4             >//              ______________________________________________________________________
  63++E1A4             >//              Dictionary part
  63++E1A4             >
  63++E1A4             >                org     Dict_Ptr
  63++6709             >
  63++6709 A2 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  63++670B             >
  63++670B             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  63++670B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  63++670B ~           >
  63++670B ~           >
  63++670B             >                endif           ; ok        // for other definitions it "points" the correct handler
  63++670B             >                // Use of "; ok" to suppress "warning[fwdref]"
  63++670B             >
  63++670B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64++670B E1                           pop     hl
  65++670C 7D                           ld      a, l                // file-handle
  66++670D DD E5                        push    ix
  67++670F D5                           push    de
  68++6710 C5                           push    bc
  69++6711 CF                           rst     $08
  70++6712 9C                           db      $9C
  71++6713 18 DF                        jr      F_Seek_Exit
  72++6715              //              pop     de
  73++6715              //              pop     bc
  74++6715              //              pop     ix
  75++6715              //              sbc     hl, hl
  76++6715              //              psh1
  77++6715
  78++6715              //  ______________________________________________________________________
  79++6715              //
  80++6715              // f_fgetpos    u -- d f
  81++6715              // Seek to position d in file-handle u.
  82++6715              // Return a false-flag 0 on success, True flag on error
  83++6715                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  83++6715             >
  83++6715             >Dict_Ptr        defl    $
  83++6715             >
  83++6715             >//              ______________________________________________________________________
  83++6715             >//              Heap part
  83++6715             >
  83++6715             >
  83++6715             >                org     (Heap_Ptr & $1FFF) + $E000
  83++E1A4             >
  83++E1A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  83++E1A4             >Latest_Definition defl  Heap_Ptr
  83++E1A4             >
  83++E1A4             >                // dummy db directives used to calculate length of namec
  83++E1A4 46 5F 46 47 >                db      "F_FGETPOS"
  83++E1A8 45 54 50 4F >
  83++E1AC 53          >
  83++E1AD             >len_NFA         defl    $ - temp_NFA
  83++E1AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  83++E1A4             >
  83++E1A4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  83++E1A5 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  83++E1A9 45 54 50 4F >
  83++E1AD 53          >
  83++E1AE             >                org     $-1                 // alter last byte of Name just above to set
  83++E1AD D3          >                db      {b $} | END_BIT     // msb as name end
  83++E1AE             >
  83++E1AE 99 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  83++E1B0             >Prev_Ptr        defl    Heap_Ptr
  83++E1B0             >
  83++E1B0             >mirror_Ptr      defl    $
  83++E1B0             >
  83++E1B0 17 67       >                dw      Dict_Ptr + 2        // xt
  83++E1B2             >Heap_Ptr        defl    $ - $E000           // save current HP
  83++E1B2             >
  83++E1B2             >Current_HP      defl  $ - $E000             // used to set HP once!
  83++E1B2             >
  83++E1B2             >//              ______________________________________________________________________
  83++E1B2             >//              Dictionary part
  83++E1B2             >
  83++E1B2             >                org     Dict_Ptr
  83++6715             >
  83++6715 B0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  83++6717             >
  83++6717             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  83++6717 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  83++6717 ~           >
  83++6717 ~           >
  83++6717             >                endif           ; ok        // for other definitions it "points" the correct handler
  83++6717             >                // Use of "; ok" to suppress "warning[fwdref]"
  83++6717             >
  83++6717             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  84++6717 E1                            pop     hl
  85++6718 7D                            ld      a, l                // file-handle
  86++6719 DD E5                         push    ix
  87++671B D5                            push    de
  88++671C C5                            push    bc
  89++671D CF                            rst     $08
  90++671E A0                            db      $A0
  91++671F D9                           exx
  92++6720 C1                           pop     bc                  // IP
  93++6721 D1                           pop     de                  // Return Stack Pointer
  94++6722 DD E1                        pop     ix
  95++6724 D9                            exx
  96++6725 D5                            push    de
  97++6726 C5                            push    bc
  98++6727 ED 62                         sbc     hl, hl
  99++6729 E5                            push    hl
 100++672A D9                           exx
 101++672B                              next
 101++672B DD E9       >                jp      (ix)
 102++672D
 103++672D              //  ______________________________________________________________________
 104++672D              //
 105++672D              // f_read       a b u -- n f
 106++672D              // Read b bytes from file-handle u to address a
 107++672D              // Return the actual number n of bytes read
 108++672D              // Return 0 on success, True flag on error
 109++672D                              New_Def F_READ, "F_READ", is_code, is_normal
 109++672D             >
 109++672D             >Dict_Ptr        defl    $
 109++672D             >
 109++672D             >//              ______________________________________________________________________
 109++672D             >//              Heap part
 109++672D             >
 109++672D             >
 109++672D             >                org     (Heap_Ptr & $1FFF) + $E000
 109++E1B2             >
 109++E1B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 109++E1B2             >Latest_Definition defl  Heap_Ptr
 109++E1B2             >
 109++E1B2             >                // dummy db directives used to calculate length of namec
 109++E1B2 46 5F 52 45 >                db      "F_READ"
 109++E1B6 41 44       >
 109++E1B8             >len_NFA         defl    $ - temp_NFA
 109++E1B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 109++E1B2             >
 109++E1B2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 109++E1B3 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 109++E1B7 41 44       >
 109++E1B9             >                org     $-1                 // alter last byte of Name just above to set
 109++E1B8 C4          >                db      {b $} | END_BIT     // msb as name end
 109++E1B9             >
 109++E1B9 A4 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 109++E1BB             >Prev_Ptr        defl    Heap_Ptr
 109++E1BB             >
 109++E1BB             >mirror_Ptr      defl    $
 109++E1BB             >
 109++E1BB 2F 67       >                dw      Dict_Ptr + 2        // xt
 109++E1BD             >Heap_Ptr        defl    $ - $E000           // save current HP
 109++E1BD             >
 109++E1BD             >Current_HP      defl  $ - $E000             // used to set HP once!
 109++E1BD             >
 109++E1BD             >//              ______________________________________________________________________
 109++E1BD             >//              Dictionary part
 109++E1BD             >
 109++E1BD             >                org     Dict_Ptr
 109++672D             >
 109++672D BB 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 109++672F             >
 109++672F             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 109++672F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 109++672F ~           >
 109++672F ~           >
 109++672F             >                endif           ; ok        // for other definitions it "points" the correct handler
 109++672F             >                // Use of "; ok" to suppress "warning[fwdref]"
 109++672F             >
 109++672F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 110++672F D9                            exx
 111++6730 E1                            pop     hl
 112++6731 7D                            ld      a, l                // file-handle
 113++6732 C1                            pop     bc                  // bc has bytes to read
 114++6733 DD E3                         ex      (sp), ix            // ix has address
 115++6735 D9                           exx
 116++6736 D5                           push    de                  // Save Return Stack pointer
 117++6737 C5                           push    bc                  // Save Instruction pointer
 118++6738 D9                            exx
 119++6739 CF                            rst     $08
 120++673A 9D                            db      $9D
 121++673B              F_Read_Exit:
 122++673B D9                           exx
 123++673C C1                           pop     bc                  // Restore Instruction pointer
 124++673D D1                           pop     de                  // Restore Return Stack pointer
 125++673E DD E1                        pop     ix                  // Restore ix
 126++6740 D9                            exx
 127++6741 D5                            push    de                  // bytes involved in i/o operation
 128++6742 ED 62                         sbc     hl, hl
 129++6744 E5                            push    hl
 130++6745 D9                           exx
 131++6746                              next
 131++6746 DD E9       >                jp      (ix)
 132++6748
 133++6748              //  ______________________________________________________________________
 134++6748              //
 135++6748              // f_write      a b u -- n f
 136++6748              // Write bytes currently stored at address a to file-handle u.
 137++6748              // Return the actual n bytes written and 0 on success, True flag on error.
 138++6748                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 138++6748             >
 138++6748             >Dict_Ptr        defl    $
 138++6748             >
 138++6748             >//              ______________________________________________________________________
 138++6748             >//              Heap part
 138++6748             >
 138++6748             >
 138++6748             >                org     (Heap_Ptr & $1FFF) + $E000
 138++E1BD             >
 138++E1BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138++E1BD             >Latest_Definition defl  Heap_Ptr
 138++E1BD             >
 138++E1BD             >                // dummy db directives used to calculate length of namec
 138++E1BD 46 5F 57 52 >                db      "F_WRITE"
 138++E1C1 49 54 45    >
 138++E1C4             >len_NFA         defl    $ - temp_NFA
 138++E1C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138++E1BD             >
 138++E1BD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138++E1BE 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 138++E1C2 49 54 45    >
 138++E1C5             >                org     $-1                 // alter last byte of Name just above to set
 138++E1C4 C5          >                db      {b $} | END_BIT     // msb as name end
 138++E1C5             >
 138++E1C5 B2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138++E1C7             >Prev_Ptr        defl    Heap_Ptr
 138++E1C7             >
 138++E1C7             >mirror_Ptr      defl    $
 138++E1C7             >
 138++E1C7 4A 67       >                dw      Dict_Ptr + 2        // xt
 138++E1C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 138++E1C9             >
 138++E1C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 138++E1C9             >
 138++E1C9             >//              ______________________________________________________________________
 138++E1C9             >//              Dictionary part
 138++E1C9             >
 138++E1C9             >                org     Dict_Ptr
 138++6748             >
 138++6748 C7 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 138++674A             >
 138++674A             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138++674A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138++674A ~           >
 138++674A ~           >
 138++674A             >                endif           ; ok        // for other definitions it "points" the correct handler
 138++674A             >                // Use of "; ok" to suppress "warning[fwdref]"
 138++674A             >
 138++674A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139++674A D9                            exx
 140++674B E1                            pop     hl
 141++674C 7D                            ld      a, l                // file-handle
 142++674D C1                            pop     bc                  // bc has bytes to read
 143++674E DD E3                         ex      (sp), ix            // ix has address
 144++6750 D9                           exx
 145++6751 D5                           push    de                  // Save Return Stack pointer
 146++6752 C5                           push    bc                  // Save Instruction pointer
 147++6753 D9                            exx
 148++6754 CF                            rst     $08
 149++6755 9E                            db      $9E
 150++6756 18 E3                         jr F_Read_Exit
 151++6758              //                exx
 152++6758              //                pop     de                  // Restore Return Stack pointer
 153++6758              //                pop     bc                  // Restore Instruction pointer
 154++6758              //                pop     ix                  // Restore ix
 155++6758              //                 exx
 156++6758              //                 push    de                  // bytes involved in i/o operation
 157++6758              //                 sbc     hl, hl
 158++6758              //                 push    hl
 159++6758              //                exx
 160++6758              //                next
 161++6758
 162++6758              //  ______________________________________________________________________
 163++6758              //
 164++6758              // f_open       a1 a2 b -- u f
 165++6758              // open a file
 166++6758              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 167++6758              // a2 is address to an 8-byte header data used in some cases.
 168++6758              // b is access mode-byte, that is a combination of:
 169++6758              // any/all of:
 170++6758              //   esx_mode_read          $01 request read access
 171++6758              //   esx_mode_write         $02 request write access
 172++6758              //   esx_mode_use_header    $40 read/write +3DOS header
 173++6758              // plus one of:
 174++6758              //   esx_mode_open_exist    $00 only open existing file
 175++6758              //   esx_mode_open_creat    $08 open existing or create file
 176++6758              //   esx_mode_creat_noexist $04 create new file, error if exists
 177++6758              //   esx_mode_creat_trunc   $0c create new file, delete existing
 178++6758              // Return file-handle u and 0 on success, True flag on error
 179++6758                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 179++6758             >
 179++6758             >Dict_Ptr        defl    $
 179++6758             >
 179++6758             >//              ______________________________________________________________________
 179++6758             >//              Heap part
 179++6758             >
 179++6758             >
 179++6758             >                org     (Heap_Ptr & $1FFF) + $E000
 179++E1C9             >
 179++E1C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179++E1C9             >Latest_Definition defl  Heap_Ptr
 179++E1C9             >
 179++E1C9             >                // dummy db directives used to calculate length of namec
 179++E1C9 46 5F 4F 50 >                db      "F_OPEN"
 179++E1CD 45 4E       >
 179++E1CF             >len_NFA         defl    $ - temp_NFA
 179++E1CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179++E1C9             >
 179++E1C9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179++E1CA 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 179++E1CE 45 4E       >
 179++E1D0             >                org     $-1                 // alter last byte of Name just above to set
 179++E1CF CE          >                db      {b $} | END_BIT     // msb as name end
 179++E1D0             >
 179++E1D0 BD 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179++E1D2             >Prev_Ptr        defl    Heap_Ptr
 179++E1D2             >
 179++E1D2             >mirror_Ptr      defl    $
 179++E1D2             >
 179++E1D2 5A 67       >                dw      Dict_Ptr + 2        // xt
 179++E1D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 179++E1D4             >
 179++E1D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 179++E1D4             >
 179++E1D4             >//              ______________________________________________________________________
 179++E1D4             >//              Dictionary part
 179++E1D4             >
 179++E1D4             >                org     Dict_Ptr
 179++6758             >
 179++6758 D2 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 179++675A             >
 179++675A             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 179++675A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 179++675A ~           >
 179++675A ~           >
 179++675A             >                endif           ; ok        // for other definitions it "points" the correct handler
 179++675A             >                // Use of "; ok" to suppress "warning[fwdref]"
 179++675A             >
 179++675A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180++675A D9                            exx
 181++675B C1                            pop     bc                  // file-mode
 182++675C 41                            ld      b, c                // file-mode
 183++675D D1                            pop     de                  // 8-bytes buffer if any
 184++675E DD E3                         ex      (sp), ix            // filespec nul-terminated
 185++6760 D9                           exx
 186++6761 D5                           push    de                  // Save Return Stack pointer
 187++6762 C5                           push    bc                  // Save Instruction pointer
 188++6763 D9                            exx
 189++6764 3E 2A                         ld      a, "*"
 190++6766 CF                            rst     $08
 191++6767 9A                            db      $9A
 192++6768              F_Open_Exit:
 193++6768 5F                            ld      e, a                // return the handle-number
 194++6769 16 00                         ld      d, 0
 195++676B 18 CE                        jr F_Read_Exit
 196++676D
 197++676D              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 198++676D              //   \ FILENAME 1+ PAD 1 F_OPEN
 199++676D              //   \ DROP
 200++676D              //   \ F_CLOSE
 201++676D
 202++676D
 203++676D              //  ______________________________________________________________________
 204++676D              //
 205++676D              // f_opendir    a1 -- u f
 206++676D              // open a file
 207++676D                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 207++676D             >
 207++676D             >Dict_Ptr        defl    $
 207++676D             >
 207++676D             >//              ______________________________________________________________________
 207++676D             >//              Heap part
 207++676D             >
 207++676D             >
 207++676D             >                org     (Heap_Ptr & $1FFF) + $E000
 207++E1D4             >
 207++E1D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207++E1D4             >Latest_Definition defl  Heap_Ptr
 207++E1D4             >
 207++E1D4             >                // dummy db directives used to calculate length of namec
 207++E1D4 46 5F 4F 50 >                db      "F_OPENDIR"
 207++E1D8 45 4E 44 49 >
 207++E1DC 52          >
 207++E1DD             >len_NFA         defl    $ - temp_NFA
 207++E1DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207++E1D4             >
 207++E1D4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207++E1D5 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 207++E1D9 45 4E 44 49 >
 207++E1DD 52          >
 207++E1DE             >                org     $-1                 // alter last byte of Name just above to set
 207++E1DD D2          >                db      {b $} | END_BIT     // msb as name end
 207++E1DE             >
 207++E1DE C9 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207++E1E0             >Prev_Ptr        defl    Heap_Ptr
 207++E1E0             >
 207++E1E0             >mirror_Ptr      defl    $
 207++E1E0             >
 207++E1E0 6F 67       >                dw      Dict_Ptr + 2        // xt
 207++E1E2             >Heap_Ptr        defl    $ - $E000           // save current HP
 207++E1E2             >
 207++E1E2             >Current_HP      defl  $ - $E000             // used to set HP once!
 207++E1E2             >
 207++E1E2             >//              ______________________________________________________________________
 207++E1E2             >//              Dictionary part
 207++E1E2             >
 207++E1E2             >                org     Dict_Ptr
 207++676D             >
 207++676D E0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 207++676F             >
 207++676F             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 207++676F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 207++676F ~           >
 207++676F ~           >
 207++676F             >                endif           ; ok        // for other definitions it "points" the correct handler
 207++676F             >                // Use of "; ok" to suppress "warning[fwdref]"
 207++676F             >
 207++676F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208++676F DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++6771 D5                           push    de                  // Save Return Stack pointer
 210++6772 C5                           push    bc                  // Save Instruction pointer
 211++6773 06 10                        ld      b, $10              // file-mode
 212++6775 3E 43                        ld      a, "C"
 213++6777 CF                           rst     $08
 214++6778 A3                           db      $A3
 215++6779 18 ED                        jr      F_Open_Exit
 216++677B
 217++677B
 218++677B              //  ______________________________________________________________________
 219++677B              //
 220++677B              // f_readdir    a1 a2 b -- u f
 221++677B              // open a file
 222++677B                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 222++677B             >
 222++677B             >Dict_Ptr        defl    $
 222++677B             >
 222++677B             >//              ______________________________________________________________________
 222++677B             >//              Heap part
 222++677B             >
 222++677B             >
 222++677B             >                org     (Heap_Ptr & $1FFF) + $E000
 222++E1E2             >
 222++E1E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222++E1E2             >Latest_Definition defl  Heap_Ptr
 222++E1E2             >
 222++E1E2             >                // dummy db directives used to calculate length of namec
 222++E1E2 46 5F 52 45 >                db      "F_READDIR"
 222++E1E6 41 44 44 49 >
 222++E1EA 52          >
 222++E1EB             >len_NFA         defl    $ - temp_NFA
 222++E1EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222++E1E2             >
 222++E1E2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222++E1E3 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 222++E1E7 41 44 44 49 >
 222++E1EB 52          >
 222++E1EC             >                org     $-1                 // alter last byte of Name just above to set
 222++E1EB D2          >                db      {b $} | END_BIT     // msb as name end
 222++E1EC             >
 222++E1EC D4 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 222++E1EE             >Prev_Ptr        defl    Heap_Ptr
 222++E1EE             >
 222++E1EE             >mirror_Ptr      defl    $
 222++E1EE             >
 222++E1EE 7D 67       >                dw      Dict_Ptr + 2        // xt
 222++E1F0             >Heap_Ptr        defl    $ - $E000           // save current HP
 222++E1F0             >
 222++E1F0             >Current_HP      defl  $ - $E000             // used to set HP once!
 222++E1F0             >
 222++E1F0             >//              ______________________________________________________________________
 222++E1F0             >//              Dictionary part
 222++E1F0             >
 222++E1F0             >                org     Dict_Ptr
 222++677B             >
 222++677B EE 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 222++677D             >
 222++677D             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 222++677D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 222++677D ~           >
 222++677D ~           >
 222++677D             >                endif           ; ok        // for other definitions it "points" the correct handler
 222++677D             >                // Use of "; ok" to suppress "warning[fwdref]"
 222++677D             >
 222++677D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223++677D D9                            exx
 224++677E E1                            pop     hl
 225++677F 7D                            ld      a, l
 226++6780 D1                            pop     de
 227++6781 DD E3                         ex      (sp), ix            // filespec nul-terminated
 228++6783 D9                           exx
 229++6784 D5                           push    de                  // Save Return Stack pointer
 230++6785 C5                           push    bc                  // Save Instruction pointer
 231++6786 D9                            exx
 232++6787 CF                            rst     $08
 233++6788 A4                            db      $A4
 234++6789 18 DD                         jr      F_Open_Exit
 235++678B
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
1081+ 678B
1082+ 678B
1083+ 678B              //  ______________________________________________________________________
1084+ 678B              //
1085+ 678B              // cmove    a1 a2 u --
1086+ 678B              // If u > 0, moves memory content starting at address a1 for n bytes long
1087+ 678B              // storing then starting at address addr2.
1088+ 678B              // The content of a1 is moved first. See CMOVE> also.
1089+ 678B                              New_Def CMOVE, "CMOVE", is_code, is_normal
1089+ 678B             >
1089+ 678B             >Dict_Ptr        defl    $
1089+ 678B             >
1089+ 678B             >//              ______________________________________________________________________
1089+ 678B             >//              Heap part
1089+ 678B             >
1089+ 678B             >
1089+ 678B             >                org     (Heap_Ptr & $1FFF) + $E000
1089+ E1F0             >
1089+ E1F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1089+ E1F0             >Latest_Definition defl  Heap_Ptr
1089+ E1F0             >
1089+ E1F0             >                // dummy db directives used to calculate length of namec
1089+ E1F0 43 4D 4F 56 >                db      "CMOVE"
1089+ E1F4 45          >
1089+ E1F5             >len_NFA         defl    $ - temp_NFA
1089+ E1F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1089+ E1F0             >
1089+ E1F0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1089+ E1F1 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1089+ E1F5 45          >
1089+ E1F6             >                org     $-1                 // alter last byte of Name just above to set
1089+ E1F5 C5          >                db      {b $} | END_BIT     // msb as name end
1089+ E1F6             >
1089+ E1F6 E2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1089+ E1F8             >Prev_Ptr        defl    Heap_Ptr
1089+ E1F8             >
1089+ E1F8             >mirror_Ptr      defl    $
1089+ E1F8             >
1089+ E1F8 8D 67       >                dw      Dict_Ptr + 2        // xt
1089+ E1FA             >Heap_Ptr        defl    $ - $E000           // save current HP
1089+ E1FA             >
1089+ E1FA             >Current_HP      defl  $ - $E000             // used to set HP once!
1089+ E1FA             >
1089+ E1FA             >//              ______________________________________________________________________
1089+ E1FA             >//              Dictionary part
1089+ E1FA             >
1089+ E1FA             >                org     Dict_Ptr
1089+ 678B             >
1089+ 678B F8 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1089+ 678D             >
1089+ 678D             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1089+ 678D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1089+ 678D ~           >
1089+ 678D ~           >
1089+ 678D             >                endif           ; ok        // for other definitions it "points" the correct handler
1089+ 678D             >                // Use of "; ok" to suppress "warning[fwdref]"
1089+ 678D             >
1089+ 678D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1090+ 678D D9                           exx
1091+ 678E
1092+ 678E C1                           pop     bc                  // bc has counter
1093+ 678F D1                           pop     de                  // de now has dest
1094+ 6790 E1                           pop     hl                 // hl has source, save Instruction Pointer
1095+ 6791 78                           ld      a, b
1096+ 6792 B1                           or      c
1097+ 6793 28 02                        jr      z, Cmove_NoMove
1098+ 6795 ED B0                            ldir
1099+ 6797              Cmove_NoMove:
1100+ 6797 D9                           exx
1101+ 6798
1102+ 6798                              next
1102+ 6798 DD E9       >                jp      (ix)
1103+ 679A
1104+ 679A              //  ______________________________________________________________________
1105+ 679A              //
1106+ 679A              // cmove>    a1 a2 u --
1107+ 679A              // If u > 0, moves memory content starting at address a1 for n bytes long
1108+ 679A              // storing then starting at address addr2.
1109+ 679A              // The content of a1 is moved last. See cmove.
1110+ 679A                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1110+ 679A             >
1110+ 679A             >Dict_Ptr        defl    $
1110+ 679A             >
1110+ 679A             >//              ______________________________________________________________________
1110+ 679A             >//              Heap part
1110+ 679A             >
1110+ 679A             >
1110+ 679A             >                org     (Heap_Ptr & $1FFF) + $E000
1110+ E1FA             >
1110+ E1FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1110+ E1FA             >Latest_Definition defl  Heap_Ptr
1110+ E1FA             >
1110+ E1FA             >                // dummy db directives used to calculate length of namec
1110+ E1FA 43 4D 4F 56 >                db      "CMOVE>"
1110+ E1FE 45 3E       >
1110+ E200             >len_NFA         defl    $ - temp_NFA
1110+ E200             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1110+ E1FA             >
1110+ E1FA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1110+ E1FB 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1110+ E1FF 45 3E       >
1110+ E201             >                org     $-1                 // alter last byte of Name just above to set
1110+ E200 BE          >                db      {b $} | END_BIT     // msb as name end
1110+ E201             >
1110+ E201 F0 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1110+ E203             >Prev_Ptr        defl    Heap_Ptr
1110+ E203             >
1110+ E203             >mirror_Ptr      defl    $
1110+ E203             >
1110+ E203 9C 67       >                dw      Dict_Ptr + 2        // xt
1110+ E205             >Heap_Ptr        defl    $ - $E000           // save current HP
1110+ E205             >
1110+ E205             >Current_HP      defl  $ - $E000             // used to set HP once!
1110+ E205             >
1110+ E205             >//              ______________________________________________________________________
1110+ E205             >//              Dictionary part
1110+ E205             >
1110+ E205             >                org     Dict_Ptr
1110+ 679A             >
1110+ 679A 03 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1110+ 679C             >
1110+ 679C             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1110+ 679C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1110+ 679C ~           >
1110+ 679C ~           >
1110+ 679C             >                endif           ; ok        // for other definitions it "points" the correct handler
1110+ 679C             >                // Use of "; ok" to suppress "warning[fwdref]"
1110+ 679C             >
1110+ 679C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1111+ 679C D9                           exx
1112+ 679D
1113+ 679D C1                           pop     bc                  // bc has counter
1114+ 679E D1                           pop     de                  // de has dest
1115+ 679F E1                           pop     hl                  // hl has source, save Instruction Pointer
1116+ 67A0 78                           ld      a, b
1117+ 67A1 B1                           or      c
1118+ 67A2 28 08                        jr      z, CmoveV_NoMove
1119+ 67A4 EB                               ex      de, hl              // compute address to
1120+ 67A5 09                               add     hl, bc              // operate backward
1121+ 67A6 2B                               dec     hl
1122+ 67A7 EB                               ex      de, hl
1123+ 67A8 09                               add     hl, bc
1124+ 67A9 2B                               dec     hl
1125+ 67AA ED B8                            lddr                        // backward
1126+ 67AC              CmoveV_NoMove:
1127+ 67AC D9                           exx
1128+ 67AD
1129+ 67AD                              next
1129+ 67AD DD E9       >                jp      (ix)
1130+ 67AF
1131+ 67AF              //  ______________________________________________________________________
1132+ 67AF              //
1133+ 67AF              // um*      u1 u2 -- ud
1134+ 67AF              // Unsigned multiplication
1135+ 67AF              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1136+ 67AF              // On the stack a double number is treated as two single numbers
1137+ 67AF              // where DE is on the top of the stack and HL is the second from top,
1138+ 67AF              // Instead, in 2VARIABLE a double number is stored as EDLH.
1139+ 67AF              // this definition could use "MUL" Z80N new op-code.
1140+ 67AF                              New_Def UM_MUL, "UM*", is_code, is_normal
1140+ 67AF             >
1140+ 67AF             >Dict_Ptr        defl    $
1140+ 67AF             >
1140+ 67AF             >//              ______________________________________________________________________
1140+ 67AF             >//              Heap part
1140+ 67AF             >
1140+ 67AF             >
1140+ 67AF             >                org     (Heap_Ptr & $1FFF) + $E000
1140+ E205             >
1140+ E205             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1140+ E205             >Latest_Definition defl  Heap_Ptr
1140+ E205             >
1140+ E205             >                // dummy db directives used to calculate length of namec
1140+ E205 55 4D 2A    >                db      "UM*"
1140+ E208             >len_NFA         defl    $ - temp_NFA
1140+ E208             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1140+ E205             >
1140+ E205 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1140+ E206 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1140+ E209             >                org     $-1                 // alter last byte of Name just above to set
1140+ E208 AA          >                db      {b $} | END_BIT     // msb as name end
1140+ E209             >
1140+ E209 FA 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1140+ E20B             >Prev_Ptr        defl    Heap_Ptr
1140+ E20B             >
1140+ E20B             >mirror_Ptr      defl    $
1140+ E20B             >
1140+ E20B B1 67       >                dw      Dict_Ptr + 2        // xt
1140+ E20D             >Heap_Ptr        defl    $ - $E000           // save current HP
1140+ E20D             >
1140+ E20D             >Current_HP      defl  $ - $E000             // used to set HP once!
1140+ E20D             >
1140+ E20D             >//              ______________________________________________________________________
1140+ E20D             >//              Dictionary part
1140+ E20D             >
1140+ E20D             >                org     Dict_Ptr
1140+ 67AF             >
1140+ 67AF 0B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1140+ 67B1             >
1140+ 67B1             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1140+ 67B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1140+ 67B1 ~           >
1140+ 67B1 ~           >
1140+ 67B1             >                endif           ; ok        // for other definitions it "points" the correct handler
1140+ 67B1             >                // Use of "; ok" to suppress "warning[fwdref]"
1140+ 67B1             >
1140+ 67B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1141+ 67B1 D9                           exx
1142+ 67B2 D1                           pop     de                    // de has u2 operand
1143+ 67B3 E1                           pop     hl                    // hl has u1 operand
1144+ 67B4 45                           ld      b, l
1145+ 67B5 4B                           ld      c, e
1146+ 67B6 5D                           ld      e, l
1147+ 67B7 6A                           ld      l, d
1148+ 67B8 E5                           push    hl
1149+ 67B9 69                           ld      l, c
1150+ 67BA ED 30                        mul
1151+ 67BC EB                           ex      de, hl
1152+ 67BD ED 30                        mul
1153+ 67BF AF                           xor     a
1154+ 67C0 19                           add     hl, de
1155+ 67C1 8F                           adc     a
1156+ 67C2 59                           ld      e, c
1157+ 67C3 50                           ld      d, b
1158+ 67C4 ED 30                        mul
1159+ 67C6 47                           ld      b, a
1160+ 67C7 4C                           ld      c, h
1161+ 67C8 7A                           ld      a, d
1162+ 67C9 85                           add     l
1163+ 67CA 67                           ld      h, a
1164+ 67CB 6B                           ld      l, e
1165+ 67CC D1                           pop     de
1166+ 67CD ED 30                        mul
1167+ 67CF EB                           ex      de, hl
1168+ 67D0 ED 4A                        adc     hl, bc
1169+ 67D2 D5                           push    de
1170+ 67D3 E5                           push    hl
1171+ 67D4 D9                           exx
1172+ 67D5                              next
1172+ 67D5 DD E9       >                jp      (ix)
1173+ 67D7
1174+ 67D7              //  ______________________________________________________________________
1175+ 67D7              //
1176+ 67D7              // um/mod      ud u1 -- q r
1177+ 67D7              // divides ud into u1 giving quotient q and remainder r
1178+ 67D7              // algorithm takes 16 bit at a time starting from msb
1179+ 67D7              // DE grows from lsb upward with quotient result
1180+ 67D7              // HL keeps the remainder at each stage of division
1181+ 67D7              // each loop 'lowers' the next binary digit to form the current dividend
1182+ 67D7                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1182+ 67D7             >
1182+ 67D7             >Dict_Ptr        defl    $
1182+ 67D7             >
1182+ 67D7             >//              ______________________________________________________________________
1182+ 67D7             >//              Heap part
1182+ 67D7             >
1182+ 67D7             >
1182+ 67D7             >                org     (Heap_Ptr & $1FFF) + $E000
1182+ E20D             >
1182+ E20D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1182+ E20D             >Latest_Definition defl  Heap_Ptr
1182+ E20D             >
1182+ E20D             >                // dummy db directives used to calculate length of namec
1182+ E20D 55 4D 2F 4D >                db      "UM/MOD"
1182+ E211 4F 44       >
1182+ E213             >len_NFA         defl    $ - temp_NFA
1182+ E213             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1182+ E20D             >
1182+ E20D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1182+ E20E 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1182+ E212 4F 44       >
1182+ E214             >                org     $-1                 // alter last byte of Name just above to set
1182+ E213 C4          >                db      {b $} | END_BIT     // msb as name end
1182+ E214             >
1182+ E214 05 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1182+ E216             >Prev_Ptr        defl    Heap_Ptr
1182+ E216             >
1182+ E216             >mirror_Ptr      defl    $
1182+ E216             >
1182+ E216 D9 67       >                dw      Dict_Ptr + 2        // xt
1182+ E218             >Heap_Ptr        defl    $ - $E000           // save current HP
1182+ E218             >
1182+ E218             >Current_HP      defl  $ - $E000             // used to set HP once!
1182+ E218             >
1182+ E218             >//              ______________________________________________________________________
1182+ E218             >//              Dictionary part
1182+ E218             >
1182+ E218             >                org     Dict_Ptr
1182+ 67D7             >
1182+ 67D7 16 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1182+ 67D9             >
1182+ 67D9             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1182+ 67D9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1182+ 67D9 ~           >
1182+ 67D9 ~           >
1182+ 67D9             >                endif           ; ok        // for other definitions it "points" the correct handler
1182+ 67D9             >                // Use of "; ok" to suppress "warning[fwdref]"
1182+ 67D9             >
1182+ 67D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1183+ 67D9 D9                           exx
1184+ 67DA C1                           pop     bc                      // divisor
1185+ 67DB
1186+ 67DB E1                           pop     hl                      // < high part
1187+ 67DC D1                           pop     de                      // < low part and
1188+ 67DD
1189+ 67DD 7D                           ld      a, l                    // check without changing arguments
1190+ 67DE 91                           sub     c                       // if divisor is greater than high part
1191+ 67DF 7C                           ld      a, h                    // so quotient will be in range
1192+ 67E0 98                           sbc     a, b
1193+ 67E1 30 20                        jr      nc, Um_DivMod_OutOfRange
1194+ 67E3 3E 10                            ld      a, 16
1195+ 67E5              Um_DivMod_Loop:
1196+ 67E5 CB 23                                sla     e
1197+ 67E7 CB 12                                rl      d
1198+ 67E9 ED 6A                                adc     hl, hl
1199+ 67EB 30 05                                jr      nc, Um_DivMod_Carry
1200+ 67ED A7                                       and     a
1201+ 67EE ED 42                                    sbc     hl, bc
1202+ 67F0 18 07                                jr      Um_DivMod_Endif    // else
1203+ 67F2              Um_DivMod_Carry:
1204+ 67F2 A7                                       and     a
1205+ 67F3 ED 42                                    sbc     hl, bc
1206+ 67F5 30 02                                    jr      nc, Um_DivMod_Endif
1207+ 67F7 09                                           add     hl, bc
1208+ 67F8 1B                                           dec     de
1209+ 67F9              Um_DivMod_Endif:                                   // endif
1210+ 67F9 13                                   inc     de
1211+ 67FA 3D                                   dec     a
1212+ 67FB 20 E8                            jr      nz, Um_DivMod_Loop
1213+ 67FD EB                               ex      de, hl
1214+ 67FE              Um_DivMod_Bailout:
1215+ 67FE D5                               push    de                  // de := remanider
1216+ 67FF E5                               push    hl                  // hl := quotient
1217+ 6800 D9                               exx
1218+ 6801                                  next
1218+ 6801 DD E9       >                jp      (ix)
1219+ 6803
1220+ 6803              Um_DivMod_OutOfRange:
1221+ 6803 21 FF FF                     ld      hl, -1
1222+ 6806 54                           ld      d, h
1223+ 6807 5D                           ld      e, l
1224+ 6808 18 F4                        jr      Um_DivMod_Bailout
1225+ 680A
1226+ 680A              //  ______________________________________________________________________
1227+ 680A              //
1228+ 680A              // and          n1 n2 -- n3
1229+ 680A              // bit logical AND. Returns n3 as n1 & n2
1230+ 680A                              New_Def AND_OP, "AND", is_code, is_normal
1230+ 680A             >
1230+ 680A             >Dict_Ptr        defl    $
1230+ 680A             >
1230+ 680A             >//              ______________________________________________________________________
1230+ 680A             >//              Heap part
1230+ 680A             >
1230+ 680A             >
1230+ 680A             >                org     (Heap_Ptr & $1FFF) + $E000
1230+ E218             >
1230+ E218             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1230+ E218             >Latest_Definition defl  Heap_Ptr
1230+ E218             >
1230+ E218             >                // dummy db directives used to calculate length of namec
1230+ E218 41 4E 44    >                db      "AND"
1230+ E21B             >len_NFA         defl    $ - temp_NFA
1230+ E21B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1230+ E218             >
1230+ E218 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1230+ E219 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1230+ E21C             >                org     $-1                 // alter last byte of Name just above to set
1230+ E21B C4          >                db      {b $} | END_BIT     // msb as name end
1230+ E21C             >
1230+ E21C 0D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1230+ E21E             >Prev_Ptr        defl    Heap_Ptr
1230+ E21E             >
1230+ E21E             >mirror_Ptr      defl    $
1230+ E21E             >
1230+ E21E 0C 68       >                dw      Dict_Ptr + 2        // xt
1230+ E220             >Heap_Ptr        defl    $ - $E000           // save current HP
1230+ E220             >
1230+ E220             >Current_HP      defl  $ - $E000             // used to set HP once!
1230+ E220             >
1230+ E220             >//              ______________________________________________________________________
1230+ E220             >//              Dictionary part
1230+ E220             >
1230+ E220             >                org     Dict_Ptr
1230+ 680A             >
1230+ 680A 1E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1230+ 680C             >
1230+ 680C             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1230+ 680C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1230+ 680C ~           >
1230+ 680C ~           >
1230+ 680C             >                endif           ; ok        // for other definitions it "points" the correct handler
1230+ 680C             >                // Use of "; ok" to suppress "warning[fwdref]"
1230+ 680C             >
1230+ 680C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1231+ 680C D9                           exx
1232+ 680D D1                           pop     de
1233+ 680E E1                           pop     hl
1234+ 680F 7B                           ld      a, e
1235+ 6810 A5                           and     l
1236+ 6811 6F                           ld      l, a
1237+ 6812 7A                           ld      a, d
1238+ 6813 A4                           and     h
1239+ 6814              Boolean_exit:
1240+ 6814 67                           ld      h, a
1241+ 6815 E5                           push    hl
1242+ 6816 D9                           exx
1243+ 6817                              next
1243+ 6817 DD E9       >                jp      (ix)
1244+ 6819
1245+ 6819              //  ______________________________________________________________________
1246+ 6819              //
1247+ 6819              // or           n1 n2 -- n3
1248+ 6819              // bit logical OR. Returns n3 as n1 | n2
1249+ 6819                              New_Def OR_OP, "OR", is_code, is_normal
1249+ 6819             >
1249+ 6819             >Dict_Ptr        defl    $
1249+ 6819             >
1249+ 6819             >//              ______________________________________________________________________
1249+ 6819             >//              Heap part
1249+ 6819             >
1249+ 6819             >
1249+ 6819             >                org     (Heap_Ptr & $1FFF) + $E000
1249+ E220             >
1249+ E220             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1249+ E220             >Latest_Definition defl  Heap_Ptr
1249+ E220             >
1249+ E220             >                // dummy db directives used to calculate length of namec
1249+ E220 4F 52       >                db      "OR"
1249+ E222             >len_NFA         defl    $ - temp_NFA
1249+ E222             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1249+ E220             >
1249+ E220 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1249+ E221 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1249+ E223             >                org     $-1                 // alter last byte of Name just above to set
1249+ E222 D2          >                db      {b $} | END_BIT     // msb as name end
1249+ E223             >
1249+ E223 18 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1249+ E225             >Prev_Ptr        defl    Heap_Ptr
1249+ E225             >
1249+ E225             >mirror_Ptr      defl    $
1249+ E225             >
1249+ E225 1B 68       >                dw      Dict_Ptr + 2        // xt
1249+ E227             >Heap_Ptr        defl    $ - $E000           // save current HP
1249+ E227             >
1249+ E227             >Current_HP      defl  $ - $E000             // used to set HP once!
1249+ E227             >
1249+ E227             >//              ______________________________________________________________________
1249+ E227             >//              Dictionary part
1249+ E227             >
1249+ E227             >                org     Dict_Ptr
1249+ 6819             >
1249+ 6819 25 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1249+ 681B             >
1249+ 681B             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1249+ 681B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1249+ 681B ~           >
1249+ 681B ~           >
1249+ 681B             >                endif           ; ok        // for other definitions it "points" the correct handler
1249+ 681B             >                // Use of "; ok" to suppress "warning[fwdref]"
1249+ 681B             >
1249+ 681B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1250+ 681B D9                           exx
1251+ 681C D1                           pop     de
1252+ 681D E1                           pop     hl
1253+ 681E 7B                           ld      a, e
1254+ 681F B5                           or      l
1255+ 6820 6F                           ld      l, a
1256+ 6821 7A                           ld      a, d
1257+ 6822 B4                           or      h
1258+ 6823 18 EF                        jr      Boolean_exit
1259+ 6825                        //    ld      h, a
1260+ 6825                        //    push    hl
1261+ 6825                        //    exx
1262+ 6825                        //    next
1263+ 6825
1264+ 6825              //  ______________________________________________________________________
1265+ 6825              //
1266+ 6825              // xor          n1 n2 -- n3
1267+ 6825              // bit logical OR. Returns n3 as n1 ^ n2
1268+ 6825                              New_Def XOR_OP, "XOR", is_code, is_normal
1268+ 6825             >
1268+ 6825             >Dict_Ptr        defl    $
1268+ 6825             >
1268+ 6825             >//              ______________________________________________________________________
1268+ 6825             >//              Heap part
1268+ 6825             >
1268+ 6825             >
1268+ 6825             >                org     (Heap_Ptr & $1FFF) + $E000
1268+ E227             >
1268+ E227             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1268+ E227             >Latest_Definition defl  Heap_Ptr
1268+ E227             >
1268+ E227             >                // dummy db directives used to calculate length of namec
1268+ E227 58 4F 52    >                db      "XOR"
1268+ E22A             >len_NFA         defl    $ - temp_NFA
1268+ E22A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1268+ E227             >
1268+ E227 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1268+ E228 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1268+ E22B             >                org     $-1                 // alter last byte of Name just above to set
1268+ E22A D2          >                db      {b $} | END_BIT     // msb as name end
1268+ E22B             >
1268+ E22B 20 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1268+ E22D             >Prev_Ptr        defl    Heap_Ptr
1268+ E22D             >
1268+ E22D             >mirror_Ptr      defl    $
1268+ E22D             >
1268+ E22D 27 68       >                dw      Dict_Ptr + 2        // xt
1268+ E22F             >Heap_Ptr        defl    $ - $E000           // save current HP
1268+ E22F             >
1268+ E22F             >Current_HP      defl  $ - $E000             // used to set HP once!
1268+ E22F             >
1268+ E22F             >//              ______________________________________________________________________
1268+ E22F             >//              Dictionary part
1268+ E22F             >
1268+ E22F             >                org     Dict_Ptr
1268+ 6825             >
1268+ 6825 2D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1268+ 6827             >
1268+ 6827             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1268+ 6827 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1268+ 6827 ~           >
1268+ 6827 ~           >
1268+ 6827             >                endif           ; ok        // for other definitions it "points" the correct handler
1268+ 6827             >                // Use of "; ok" to suppress "warning[fwdref]"
1268+ 6827             >
1268+ 6827             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1269+ 6827 D9                           exx
1270+ 6828 D1                           pop     de
1271+ 6829 E1                           pop     hl
1272+ 682A 7B                           ld      a, e
1273+ 682B AD                           xor     l
1274+ 682C 6F                           ld      l, a
1275+ 682D 7A                           ld      a, d
1276+ 682E AC                           xor     h
1277+ 682F 18 E3                        jr      Boolean_exit
1278+ 6831                        //    ld      h, a
1279+ 6831                        //    push    hl
1280+ 6831                        //    exx
1281+ 6831                        //    next
1282+ 6831
1283+ 6831              //  ______________________________________________________________________
1284+ 6831              //
1285+ 6831              // sp@      -- a
1286+ 6831              // returns on top of stack the value of SP before execution
1287+ 6831                              New_Def SPFETCH, "SP@", is_code, is_normal
1287+ 6831             >
1287+ 6831             >Dict_Ptr        defl    $
1287+ 6831             >
1287+ 6831             >//              ______________________________________________________________________
1287+ 6831             >//              Heap part
1287+ 6831             >
1287+ 6831             >
1287+ 6831             >                org     (Heap_Ptr & $1FFF) + $E000
1287+ E22F             >
1287+ E22F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ E22F             >Latest_Definition defl  Heap_Ptr
1287+ E22F             >
1287+ E22F             >                // dummy db directives used to calculate length of namec
1287+ E22F 53 50 40    >                db      "SP@"
1287+ E232             >len_NFA         defl    $ - temp_NFA
1287+ E232             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ E22F             >
1287+ E22F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ E230 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1287+ E233             >                org     $-1                 // alter last byte of Name just above to set
1287+ E232 C0          >                db      {b $} | END_BIT     // msb as name end
1287+ E233             >
1287+ E233 27 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1287+ E235             >Prev_Ptr        defl    Heap_Ptr
1287+ E235             >
1287+ E235             >mirror_Ptr      defl    $
1287+ E235             >
1287+ E235 33 68       >                dw      Dict_Ptr + 2        // xt
1287+ E237             >Heap_Ptr        defl    $ - $E000           // save current HP
1287+ E237             >
1287+ E237             >Current_HP      defl  $ - $E000             // used to set HP once!
1287+ E237             >
1287+ E237             >//              ______________________________________________________________________
1287+ E237             >//              Dictionary part
1287+ E237             >
1287+ E237             >                org     Dict_Ptr
1287+ 6831             >
1287+ 6831 35 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1287+ 6833             >
1287+ 6833             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 6833 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1287+ 6833 ~           >
1287+ 6833 ~           >
1287+ 6833             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 6833             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 6833             >
1287+ 6833             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 6833
1289+ 6833 21 00 00                     ld      hl, 0
1290+ 6836 39                           add     hl, sp
1291+ 6837
1292+ 6837                              psh1
1292+ 6837 E5          >                push    hl
1292+ 6838 DD E9       >                jp      (ix)
1293+ 683A
1294+ 683A              //  ______________________________________________________________________
1295+ 683A              //
1296+ 683A              // sp!      a --
1297+ 683A              // restore SP to the initial value passed
1298+ 683A              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1299+ 683A                              New_Def SPSTORE, "SP!", is_code, is_normal
1299+ 683A             >
1299+ 683A             >Dict_Ptr        defl    $
1299+ 683A             >
1299+ 683A             >//              ______________________________________________________________________
1299+ 683A             >//              Heap part
1299+ 683A             >
1299+ 683A             >
1299+ 683A             >                org     (Heap_Ptr & $1FFF) + $E000
1299+ E237             >
1299+ E237             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1299+ E237             >Latest_Definition defl  Heap_Ptr
1299+ E237             >
1299+ E237             >                // dummy db directives used to calculate length of namec
1299+ E237 53 50 21    >                db      "SP!"
1299+ E23A             >len_NFA         defl    $ - temp_NFA
1299+ E23A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1299+ E237             >
1299+ E237 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1299+ E238 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1299+ E23B             >                org     $-1                 // alter last byte of Name just above to set
1299+ E23A A1          >                db      {b $} | END_BIT     // msb as name end
1299+ E23B             >
1299+ E23B 2F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1299+ E23D             >Prev_Ptr        defl    Heap_Ptr
1299+ E23D             >
1299+ E23D             >mirror_Ptr      defl    $
1299+ E23D             >
1299+ E23D 3C 68       >                dw      Dict_Ptr + 2        // xt
1299+ E23F             >Heap_Ptr        defl    $ - $E000           // save current HP
1299+ E23F             >
1299+ E23F             >Current_HP      defl  $ - $E000             // used to set HP once!
1299+ E23F             >
1299+ E23F             >//              ______________________________________________________________________
1299+ E23F             >//              Dictionary part
1299+ E23F             >
1299+ E23F             >                org     Dict_Ptr
1299+ 683A             >
1299+ 683A 3D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1299+ 683C             >
1299+ 683C             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1299+ 683C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1299+ 683C ~           >
1299+ 683C ~           >
1299+ 683C             >                endif           ; ok        // for other definitions it "points" the correct handler
1299+ 683C             >                // Use of "; ok" to suppress "warning[fwdref]"
1299+ 683C             >
1299+ 683C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1300+ 683C E1                           pop     hl
1301+ 683D F9                           ld      sp, hl
1302+ 683E
1303+ 683E                              next
1303+ 683E DD E9       >                jp      (ix)
1304+ 6840
1305+ 6840              //  ______________________________________________________________________
1306+ 6840              //
1307+ 6840              // rp@      -- a
1308+ 6840              // returns on top of stack the value of Return-Pointer
1309+ 6840                              New_Def RPFETCH, "RP@", is_code, is_normal
1309+ 6840             >
1309+ 6840             >Dict_Ptr        defl    $
1309+ 6840             >
1309+ 6840             >//              ______________________________________________________________________
1309+ 6840             >//              Heap part
1309+ 6840             >
1309+ 6840             >
1309+ 6840             >                org     (Heap_Ptr & $1FFF) + $E000
1309+ E23F             >
1309+ E23F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1309+ E23F             >Latest_Definition defl  Heap_Ptr
1309+ E23F             >
1309+ E23F             >                // dummy db directives used to calculate length of namec
1309+ E23F 52 50 40    >                db      "RP@"
1309+ E242             >len_NFA         defl    $ - temp_NFA
1309+ E242             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1309+ E23F             >
1309+ E23F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1309+ E240 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1309+ E243             >                org     $-1                 // alter last byte of Name just above to set
1309+ E242 C0          >                db      {b $} | END_BIT     // msb as name end
1309+ E243             >
1309+ E243 37 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1309+ E245             >Prev_Ptr        defl    Heap_Ptr
1309+ E245             >
1309+ E245             >mirror_Ptr      defl    $
1309+ E245             >
1309+ E245 42 68       >                dw      Dict_Ptr + 2        // xt
1309+ E247             >Heap_Ptr        defl    $ - $E000           // save current HP
1309+ E247             >
1309+ E247             >Current_HP      defl  $ - $E000             // used to set HP once!
1309+ E247             >
1309+ E247             >//              ______________________________________________________________________
1309+ E247             >//              Dictionary part
1309+ E247             >
1309+ E247             >                org     Dict_Ptr
1309+ 6840             >
1309+ 6840 45 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1309+ 6842             >
1309+ 6842             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1309+ 6842 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1309+ 6842 ~           >
1309+ 6842 ~           >
1309+ 6842             >                endif           ; ok        // for other definitions it "points" the correct handler
1309+ 6842             >                // Use of "; ok" to suppress "warning[fwdref]"
1309+ 6842             >
1309+ 6842             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1310+ 6842
1311+ 6842                              // *** ldhlrp
1312+ 6842                              // *** ex      de, hl
1313+ 6842 D5                           push de
1314+ 6843
1315+ 6843                              next
1315+ 6843 DD E9       >                jp      (ix)
1316+ 6845
1317+ 6845              //  ______________________________________________________________________
1318+ 6845              //
1319+ 6845              // rp!      a --
1320+ 6845              // restore RP to the initial value passed
1321+ 6845              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1322+ 6845                              New_Def RPSTORE, "RP!", is_code, is_normal
1322+ 6845             >
1322+ 6845             >Dict_Ptr        defl    $
1322+ 6845             >
1322+ 6845             >//              ______________________________________________________________________
1322+ 6845             >//              Heap part
1322+ 6845             >
1322+ 6845             >
1322+ 6845             >                org     (Heap_Ptr & $1FFF) + $E000
1322+ E247             >
1322+ E247             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1322+ E247             >Latest_Definition defl  Heap_Ptr
1322+ E247             >
1322+ E247             >                // dummy db directives used to calculate length of namec
1322+ E247 52 50 21    >                db      "RP!"
1322+ E24A             >len_NFA         defl    $ - temp_NFA
1322+ E24A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1322+ E247             >
1322+ E247 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1322+ E248 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1322+ E24B             >                org     $-1                 // alter last byte of Name just above to set
1322+ E24A A1          >                db      {b $} | END_BIT     // msb as name end
1322+ E24B             >
1322+ E24B 3F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1322+ E24D             >Prev_Ptr        defl    Heap_Ptr
1322+ E24D             >
1322+ E24D             >mirror_Ptr      defl    $
1322+ E24D             >
1322+ E24D 47 68       >                dw      Dict_Ptr + 2        // xt
1322+ E24F             >Heap_Ptr        defl    $ - $E000           // save current HP
1322+ E24F             >
1322+ E24F             >Current_HP      defl  $ - $E000             // used to set HP once!
1322+ E24F             >
1322+ E24F             >//              ______________________________________________________________________
1322+ E24F             >//              Dictionary part
1322+ E24F             >
1322+ E24F             >                org     Dict_Ptr
1322+ 6845             >
1322+ 6845 4D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1322+ 6847             >
1322+ 6847             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1322+ 6847 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1322+ 6847 ~           >
1322+ 6847 ~           >
1322+ 6847             >                endif           ; ok        // for other definitions it "points" the correct handler
1322+ 6847             >                // Use of "; ok" to suppress "warning[fwdref]"
1322+ 6847             >
1322+ 6847             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1323+ 6847 D1                           pop     de
1324+ 6848                              // *** ex      de, hl
1325+ 6848                              // *** ldrphl
1326+ 6848
1327+ 6848                              next
1327+ 6848 DD E9       >                jp      (ix)
1328+ 684A
1329+ 684A              //  ______________________________________________________________________
1330+ 684A              //
1331+ 684A              // exit       --
1332+ 684A              // exits back to the caller word
1333+ 684A                              New_Def EXIT, "EXIT", is_code, is_normal
1333+ 684A             >
1333+ 684A             >Dict_Ptr        defl    $
1333+ 684A             >
1333+ 684A             >//              ______________________________________________________________________
1333+ 684A             >//              Heap part
1333+ 684A             >
1333+ 684A             >
1333+ 684A             >                org     (Heap_Ptr & $1FFF) + $E000
1333+ E24F             >
1333+ E24F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1333+ E24F             >Latest_Definition defl  Heap_Ptr
1333+ E24F             >
1333+ E24F             >                // dummy db directives used to calculate length of namec
1333+ E24F 45 58 49 54 >                db      "EXIT"
1333+ E253             >len_NFA         defl    $ - temp_NFA
1333+ E253             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1333+ E24F             >
1333+ E24F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1333+ E250 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1333+ E254             >                org     $-1                 // alter last byte of Name just above to set
1333+ E253 D4          >                db      {b $} | END_BIT     // msb as name end
1333+ E254             >
1333+ E254 47 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1333+ E256             >Prev_Ptr        defl    Heap_Ptr
1333+ E256             >
1333+ E256             >mirror_Ptr      defl    $
1333+ E256             >
1333+ E256 4C 68       >                dw      Dict_Ptr + 2        // xt
1333+ E258             >Heap_Ptr        defl    $ - $E000           // save current HP
1333+ E258             >
1333+ E258             >Current_HP      defl  $ - $E000             // used to set HP once!
1333+ E258             >
1333+ E258             >//              ______________________________________________________________________
1333+ E258             >//              Dictionary part
1333+ E258             >
1333+ E258             >                org     Dict_Ptr
1333+ 684A             >
1333+ 684A 56 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1333+ 684C             >
1333+ 684C             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1333+ 684C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1333+ 684C ~           >
1333+ 684C ~           >
1333+ 684C             >                endif           ; ok        // for other definitions it "points" the correct handler
1333+ 684C             >                // Use of "; ok" to suppress "warning[fwdref]"
1333+ 684C             >
1333+ 684C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1334+ 684C EB                           ex      de, hl
1335+ 684D                              // *** ldhlrp                      // Get Return Stack Pointer
1336+ 684D 4E                           ld      c, (hl)             // pop Instruction Pointer
1337+ 684E 23                           inc     hl                  // from Return Stack
1338+ 684F 46                           ld      b, (hl)
1339+ 6850 23                           inc     hl
1340+ 6851                              // *** ldrphl                      // Set Return Stack Pointer
1341+ 6851 EB                           ex      de, hl
1342+ 6852                              next
1342+ 6852 DD E9       >                jp      (ix)
1343+ 6854
1344+ 6854              //  ______________________________________________________________________
1345+ 6854              //
1346+ 6854              // lastl      --
1347+ 6854              // exits back to the caller word
1348+ 6854              //              New_Def EXIT, "LASTL", is_code, is_normal
1349+ 6854              //              push    de
1350+ 6854              //              ex      de, hl //**
1351+ 6854              //              // *** ldhlrp                      // Get Return Stack Pointer
1352+ 6854              //              ld      e, (hl)             // pop Instruction Pointer
1353+ 6854              //              inc     hl                  // from Return Stack
1354+ 6854              //              ld      d, (hl)
1355+ 6854              //              inc     hl
1356+ 6854              //              ld      (hl), e
1357+ 6854              //              inc     hl
1358+ 6854              //              ld      (hl), d
1359+ 6854              //              add     hl, -3
1360+ 6854              //              pop     de
1361+ 6854              //              next
1362+ 6854
1363+ 6854              //  ______________________________________________________________________
1364+ 6854              //
1365+ 6854              // >r      n --
1366+ 6854              // pop from calculator-stack and push into return-stack
1367+ 6854                              New_Def TO_R, ">R", is_code, is_normal
1367+ 6854             >
1367+ 6854             >Dict_Ptr        defl    $
1367+ 6854             >
1367+ 6854             >//              ______________________________________________________________________
1367+ 6854             >//              Heap part
1367+ 6854             >
1367+ 6854             >
1367+ 6854             >                org     (Heap_Ptr & $1FFF) + $E000
1367+ E258             >
1367+ E258             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1367+ E258             >Latest_Definition defl  Heap_Ptr
1367+ E258             >
1367+ E258             >                // dummy db directives used to calculate length of namec
1367+ E258 3E 52       >                db      ">R"
1367+ E25A             >len_NFA         defl    $ - temp_NFA
1367+ E25A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1367+ E258             >
1367+ E258 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1367+ E259 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1367+ E25B             >                org     $-1                 // alter last byte of Name just above to set
1367+ E25A D2          >                db      {b $} | END_BIT     // msb as name end
1367+ E25B             >
1367+ E25B 4F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1367+ E25D             >Prev_Ptr        defl    Heap_Ptr
1367+ E25D             >
1367+ E25D             >mirror_Ptr      defl    $
1367+ E25D             >
1367+ E25D 56 68       >                dw      Dict_Ptr + 2        // xt
1367+ E25F             >Heap_Ptr        defl    $ - $E000           // save current HP
1367+ E25F             >
1367+ E25F             >Current_HP      defl  $ - $E000             // used to set HP once!
1367+ E25F             >
1367+ E25F             >//              ______________________________________________________________________
1367+ E25F             >//              Dictionary part
1367+ E25F             >
1367+ E25F             >                org     Dict_Ptr
1367+ 6854             >
1367+ 6854 5D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1367+ 6856             >
1367+ 6856             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1367+ 6856 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1367+ 6856 ~           >
1367+ 6856 ~           >
1367+ 6856             >                endif           ; ok        // for other definitions it "points" the correct handler
1367+ 6856             >                // Use of "; ok" to suppress "warning[fwdref]"
1367+ 6856             >
1367+ 6856             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1368+ 6856 E1                           pop     hl
1369+ 6857 EB                           ex      de, hl //**
1370+ 6858                              // *** ldhlrp
1371+ 6858 2B                           dec     hl
1372+ 6859 72                           ld      (hl), d             // store current TOS
1373+ 685A 2B                           dec     hl                  // to Return Stack
1374+ 685B 73                           ld      (hl), e
1375+ 685C                              // *** ldrphl
1376+ 685C EB                           ex      de, hl //**
1377+ 685D                              next
1377+ 685D DD E9       >                jp      (ix)
1378+ 685F
1379+ 685F              //  ______________________________________________________________________
1380+ 685F              //
1381+ 685F              // r>      -- n
1382+ 685F              // pop from return-stack and push into calculator-stack
1383+ 685F                              New_Def R_TO, "R>", is_code, is_normal
1383+ 685F             >
1383+ 685F             >Dict_Ptr        defl    $
1383+ 685F             >
1383+ 685F             >//              ______________________________________________________________________
1383+ 685F             >//              Heap part
1383+ 685F             >
1383+ 685F             >
1383+ 685F             >                org     (Heap_Ptr & $1FFF) + $E000
1383+ E25F             >
1383+ E25F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1383+ E25F             >Latest_Definition defl  Heap_Ptr
1383+ E25F             >
1383+ E25F             >                // dummy db directives used to calculate length of namec
1383+ E25F 52 3E       >                db      "R>"
1383+ E261             >len_NFA         defl    $ - temp_NFA
1383+ E261             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1383+ E25F             >
1383+ E25F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1383+ E260 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1383+ E262             >                org     $-1                 // alter last byte of Name just above to set
1383+ E261 BE          >                db      {b $} | END_BIT     // msb as name end
1383+ E262             >
1383+ E262 58 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1383+ E264             >Prev_Ptr        defl    Heap_Ptr
1383+ E264             >
1383+ E264             >mirror_Ptr      defl    $
1383+ E264             >
1383+ E264 61 68       >                dw      Dict_Ptr + 2        // xt
1383+ E266             >Heap_Ptr        defl    $ - $E000           // save current HP
1383+ E266             >
1383+ E266             >Current_HP      defl  $ - $E000             // used to set HP once!
1383+ E266             >
1383+ E266             >//              ______________________________________________________________________
1383+ E266             >//              Dictionary part
1383+ E266             >
1383+ E266             >                org     Dict_Ptr
1383+ 685F             >
1383+ 685F 64 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1383+ 6861             >
1383+ 6861             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1383+ 6861 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1383+ 6861 ~           >
1383+ 6861 ~           >
1383+ 6861             >                endif           ; ok        // for other definitions it "points" the correct handler
1383+ 6861             >                // Use of "; ok" to suppress "warning[fwdref]"
1383+ 6861             >
1383+ 6861             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1384+ 6861
1385+ 6861 EB                           ex      de, hl //**
1386+ 6862                              // *** ldhlrp
1387+ 6862 5E                           ld      e, (hl)             // retrieve from Return Stack
1388+ 6863 23                           inc     hl
1389+ 6864 56                           ld      d, (hl)
1390+ 6865 23                           inc     hl
1391+ 6866                              // *** ldrphl
1392+ 6866 EB                           ex      de, hl //**
1393+ 6867 E5                           push    hl
1394+ 6868                              next
1394+ 6868 DD E9       >                jp      (ix)
1395+ 686A
1396+ 686A              //  ______________________________________________________________________
1397+ 686A              //
1398+ 686A              // r@           -- n
1399+ 686A              // return on top of stack the value of top of return-stack
1400+ 686A              // Since this is the same as I, we alter R's CFA to jump there
1401+ 686A                              New_Def R_OP, "R@", is_code, is_normal
1401+ 686A             >
1401+ 686A             >Dict_Ptr        defl    $
1401+ 686A             >
1401+ 686A             >//              ______________________________________________________________________
1401+ 686A             >//              Heap part
1401+ 686A             >
1401+ 686A             >
1401+ 686A             >                org     (Heap_Ptr & $1FFF) + $E000
1401+ E266             >
1401+ E266             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1401+ E266             >Latest_Definition defl  Heap_Ptr
1401+ E266             >
1401+ E266             >                // dummy db directives used to calculate length of namec
1401+ E266 52 40       >                db      "R@"
1401+ E268             >len_NFA         defl    $ - temp_NFA
1401+ E268             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1401+ E266             >
1401+ E266 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1401+ E267 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1401+ E269             >                org     $-1                 // alter last byte of Name just above to set
1401+ E268 C0          >                db      {b $} | END_BIT     // msb as name end
1401+ E269             >
1401+ E269 5F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1401+ E26B             >Prev_Ptr        defl    Heap_Ptr
1401+ E26B             >
1401+ E26B             >mirror_Ptr      defl    $
1401+ E26B             >
1401+ E26B 6C 68       >                dw      Dict_Ptr + 2        // xt
1401+ E26D             >Heap_Ptr        defl    $ - $E000           // save current HP
1401+ E26D             >
1401+ E26D             >Current_HP      defl  $ - $E000             // used to set HP once!
1401+ E26D             >
1401+ E26D             >//              ______________________________________________________________________
1401+ E26D             >//              Dictionary part
1401+ E26D             >
1401+ E26D             >                org     Dict_Ptr
1401+ 686A             >
1401+ 686A 6B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1401+ 686C             >
1401+ 686C             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1401+ 686C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1401+ 686C ~           >
1401+ 686C ~           >
1401+ 686C             >                endif           ; ok        // for other definitions it "points" the correct handler
1401+ 686C             >                // Use of "; ok" to suppress "warning[fwdref]"
1401+ 686C             >
1401+ 686C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1402+ 686C                          //  Behave  I_Ptr
1403+ 686C C3 3A 64                     jp      I_Ptr
1404+ 686F
1405+ 686F              //  ______________________________________________________________________
1406+ 686F              //
1407+ 686F              // r            -- n
1408+ 686F              // return on top of stack the value of top of return-stack
1409+ 686F              // Since this is the same as I, we alter R's CFA to jump there
1410+ 686F              //              New_Def R_OLD, "R", is_code, is_normal
1411+ 686F              //              jp      I_Ptr
1412+ 686F
1413+ 686F              //  ______________________________________________________________________
1414+ 686F              //
1415+ 686F              // 0=           n -- f
1416+ 686F              // true (non zero) if n is zero, false (0) elsewere
1417+ 686F                              New_Def ZEQUAL, "0=", is_code, is_normal
1417+ 686F             >
1417+ 686F             >Dict_Ptr        defl    $
1417+ 686F             >
1417+ 686F             >//              ______________________________________________________________________
1417+ 686F             >//              Heap part
1417+ 686F             >
1417+ 686F             >
1417+ 686F             >                org     (Heap_Ptr & $1FFF) + $E000
1417+ E26D             >
1417+ E26D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1417+ E26D             >Latest_Definition defl  Heap_Ptr
1417+ E26D             >
1417+ E26D             >                // dummy db directives used to calculate length of namec
1417+ E26D 30 3D       >                db      "0="
1417+ E26F             >len_NFA         defl    $ - temp_NFA
1417+ E26F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1417+ E26D             >
1417+ E26D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1417+ E26E 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1417+ E270             >                org     $-1                 // alter last byte of Name just above to set
1417+ E26F BD          >                db      {b $} | END_BIT     // msb as name end
1417+ E270             >
1417+ E270 66 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1417+ E272             >Prev_Ptr        defl    Heap_Ptr
1417+ E272             >
1417+ E272             >mirror_Ptr      defl    $
1417+ E272             >
1417+ E272 71 68       >                dw      Dict_Ptr + 2        // xt
1417+ E274             >Heap_Ptr        defl    $ - $E000           // save current HP
1417+ E274             >
1417+ E274             >Current_HP      defl  $ - $E000             // used to set HP once!
1417+ E274             >
1417+ E274             >//              ______________________________________________________________________
1417+ E274             >//              Dictionary part
1417+ E274             >
1417+ E274             >                org     Dict_Ptr
1417+ 686F             >
1417+ 686F 72 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1417+ 6871             >
1417+ 6871             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1417+ 6871 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1417+ 6871 ~           >
1417+ 6871 ~           >
1417+ 6871             >                endif           ; ok        // for other definitions it "points" the correct handler
1417+ 6871             >                // Use of "; ok" to suppress "warning[fwdref]"
1417+ 6871             >
1417+ 6871             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1418+ 6871              Zero_Equal:
1419+ 6871 E1                           pop     hl
1420+ 6872 7D                           ld      a, l
1421+ 6873 B4                           or      h
1422+ 6874 21 00 00                     ld      hl, FALSE_FLAG
1423+ 6877 20 01                        jr      nz, ZEqual_Skip
1424+ 6879 2B                               dec     hl
1425+ 687A              ZEqual_Skip:
1426+ 687A                              psh1
1426+ 687A E5          >                push    hl
1426+ 687B DD E9       >                jp      (ix)
1427+ 687D
1428+ 687D              //  ______________________________________________________________________
1429+ 687D              //
1430+ 687D              // not         a1 -- a2
1431+ 687D              // increment by 2 top of stack
1432+ 687D                              New_Def NOT_OP, "NOT", is_code, is_normal
1432+ 687D             >
1432+ 687D             >Dict_Ptr        defl    $
1432+ 687D             >
1432+ 687D             >//              ______________________________________________________________________
1432+ 687D             >//              Heap part
1432+ 687D             >
1432+ 687D             >
1432+ 687D             >                org     (Heap_Ptr & $1FFF) + $E000
1432+ E274             >
1432+ E274             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1432+ E274             >Latest_Definition defl  Heap_Ptr
1432+ E274             >
1432+ E274             >                // dummy db directives used to calculate length of namec
1432+ E274 4E 4F 54    >                db      "NOT"
1432+ E277             >len_NFA         defl    $ - temp_NFA
1432+ E277             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1432+ E274             >
1432+ E274 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1432+ E275 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1432+ E278             >                org     $-1                 // alter last byte of Name just above to set
1432+ E277 D4          >                db      {b $} | END_BIT     // msb as name end
1432+ E278             >
1432+ E278 6D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1432+ E27A             >Prev_Ptr        defl    Heap_Ptr
1432+ E27A             >
1432+ E27A             >mirror_Ptr      defl    $
1432+ E27A             >
1432+ E27A 7F 68       >                dw      Dict_Ptr + 2        // xt
1432+ E27C             >Heap_Ptr        defl    $ - $E000           // save current HP
1432+ E27C             >
1432+ E27C             >Current_HP      defl  $ - $E000             // used to set HP once!
1432+ E27C             >
1432+ E27C             >//              ______________________________________________________________________
1432+ E27C             >//              Dictionary part
1432+ E27C             >
1432+ E27C             >                org     Dict_Ptr
1432+ 687D             >
1432+ 687D 7A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1432+ 687F             >
1432+ 687F             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1432+ 687F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1432+ 687F ~           >
1432+ 687F ~           >
1432+ 687F             >                endif           ; ok        // for other definitions it "points" the correct handler
1432+ 687F             >                // Use of "; ok" to suppress "warning[fwdref]"
1432+ 687F             >
1432+ 687F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1433+ 687F                          //  Behave  Zero_Equal
1434+ 687F C3 71 68                     jp      Zero_Equal
1435+ 6882
1436+ 6882              //  ______________________________________________________________________
1437+ 6882              //
1438+ 6882              // 0<           n -- f
1439+ 6882              // true (non zero) if n is less than zero, false (0) elsewere
1440+ 6882                              New_Def ZLESS, "0<", is_code, is_normal
1440+ 6882             >
1440+ 6882             >Dict_Ptr        defl    $
1440+ 6882             >
1440+ 6882             >//              ______________________________________________________________________
1440+ 6882             >//              Heap part
1440+ 6882             >
1440+ 6882             >
1440+ 6882             >                org     (Heap_Ptr & $1FFF) + $E000
1440+ E27C             >
1440+ E27C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1440+ E27C             >Latest_Definition defl  Heap_Ptr
1440+ E27C             >
1440+ E27C             >                // dummy db directives used to calculate length of namec
1440+ E27C 30 3C       >                db      "0<"
1440+ E27E             >len_NFA         defl    $ - temp_NFA
1440+ E27E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1440+ E27C             >
1440+ E27C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1440+ E27D 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1440+ E27F             >                org     $-1                 // alter last byte of Name just above to set
1440+ E27E BC          >                db      {b $} | END_BIT     // msb as name end
1440+ E27F             >
1440+ E27F 74 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1440+ E281             >Prev_Ptr        defl    Heap_Ptr
1440+ E281             >
1440+ E281             >mirror_Ptr      defl    $
1440+ E281             >
1440+ E281 84 68       >                dw      Dict_Ptr + 2        // xt
1440+ E283             >Heap_Ptr        defl    $ - $E000           // save current HP
1440+ E283             >
1440+ E283             >Current_HP      defl  $ - $E000             // used to set HP once!
1440+ E283             >
1440+ E283             >//              ______________________________________________________________________
1440+ E283             >//              Dictionary part
1440+ E283             >
1440+ E283             >                org     Dict_Ptr
1440+ 6882             >
1440+ 6882 81 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1440+ 6884             >
1440+ 6884             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1440+ 6884 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1440+ 6884 ~           >
1440+ 6884 ~           >
1440+ 6884             >                endif           ; ok        // for other definitions it "points" the correct handler
1440+ 6884             >                // Use of "; ok" to suppress "warning[fwdref]"
1440+ 6884             >
1440+ 6884             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1441+ 6884 E1                           pop     hl
1442+ 6885 29                           add     hl, hl
1443+ 6886 ED 62                        sbc     hl, hl
1444+ 6888                              psh1
1444+ 6888 E5          >                push    hl
1444+ 6889 DD E9       >                jp      (ix)
1445+ 688B
1446+ 688B              //  ______________________________________________________________________
1447+ 688B              //
1448+ 688B              // 0>           n -- f
1449+ 688B              // true (non zero) if n is less than zero, false (0) elsewere
1450+ 688B                              New_Def ZGREATER, "0>", is_code, is_normal
1450+ 688B             >
1450+ 688B             >Dict_Ptr        defl    $
1450+ 688B             >
1450+ 688B             >//              ______________________________________________________________________
1450+ 688B             >//              Heap part
1450+ 688B             >
1450+ 688B             >
1450+ 688B             >                org     (Heap_Ptr & $1FFF) + $E000
1450+ E283             >
1450+ E283             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1450+ E283             >Latest_Definition defl  Heap_Ptr
1450+ E283             >
1450+ E283             >                // dummy db directives used to calculate length of namec
1450+ E283 30 3E       >                db      "0>"
1450+ E285             >len_NFA         defl    $ - temp_NFA
1450+ E285             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1450+ E283             >
1450+ E283 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1450+ E284 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1450+ E286             >                org     $-1                 // alter last byte of Name just above to set
1450+ E285 BE          >                db      {b $} | END_BIT     // msb as name end
1450+ E286             >
1450+ E286 7C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1450+ E288             >Prev_Ptr        defl    Heap_Ptr
1450+ E288             >
1450+ E288             >mirror_Ptr      defl    $
1450+ E288             >
1450+ E288 8D 68       >                dw      Dict_Ptr + 2        // xt
1450+ E28A             >Heap_Ptr        defl    $ - $E000           // save current HP
1450+ E28A             >
1450+ E28A             >Current_HP      defl  $ - $E000             // used to set HP once!
1450+ E28A             >
1450+ E28A             >//              ______________________________________________________________________
1450+ E28A             >//              Dictionary part
1450+ E28A             >
1450+ E28A             >                org     Dict_Ptr
1450+ 688B             >
1450+ 688B 88 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1450+ 688D             >
1450+ 688D             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1450+ 688D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1450+ 688D ~           >
1450+ 688D ~           >
1450+ 688D             >                endif           ; ok        // for other definitions it "points" the correct handler
1450+ 688D             >                // Use of "; ok" to suppress "warning[fwdref]"
1450+ 688D             >
1450+ 688D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1451+ 688D E1                           pop     hl
1452+ 688E 7D                           ld      a, l
1453+ 688F B4                           or      h
1454+ 6890 29                           add     hl, hl
1455+ 6891 21 00 00                     ld      hl, FALSE_FLAG
1456+ 6894 38 04                        jr      c, ZGreater_Skip
1457+ 6896 A7                               and     a
1458+ 6897 28 01                            jr      z, ZGreater_Skip
1459+ 6899 2B                                   dec     hl
1460+ 689A              ZGreater_Skip:
1461+ 689A                              psh1
1461+ 689A E5          >                push    hl
1461+ 689B DD E9       >                jp      (ix)
1462+ 689D
1463+ 689D              //  ______________________________________________________________________
1464+ 689D              //
1465+ 689D              // +            n1 n2 -- n3
1466+ 689D              // returns the unsigned sum of two top values
1467+ 689D                              New_Def PLUS, "+", is_code, is_normal
1467+ 689D             >
1467+ 689D             >Dict_Ptr        defl    $
1467+ 689D             >
1467+ 689D             >//              ______________________________________________________________________
1467+ 689D             >//              Heap part
1467+ 689D             >
1467+ 689D             >
1467+ 689D             >                org     (Heap_Ptr & $1FFF) + $E000
1467+ E28A             >
1467+ E28A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1467+ E28A             >Latest_Definition defl  Heap_Ptr
1467+ E28A             >
1467+ E28A             >                // dummy db directives used to calculate length of namec
1467+ E28A 2B          >                db      "+"
1467+ E28B             >len_NFA         defl    $ - temp_NFA
1467+ E28B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1467+ E28A             >
1467+ E28A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1467+ E28B 2B          >                db      "+"               // name string in 7-bit ascii, but
1467+ E28C             >                org     $-1                 // alter last byte of Name just above to set
1467+ E28B AB          >                db      {b $} | END_BIT     // msb as name end
1467+ E28C             >
1467+ E28C 83 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1467+ E28E             >Prev_Ptr        defl    Heap_Ptr
1467+ E28E             >
1467+ E28E             >mirror_Ptr      defl    $
1467+ E28E             >
1467+ E28E 9F 68       >                dw      Dict_Ptr + 2        // xt
1467+ E290             >Heap_Ptr        defl    $ - $E000           // save current HP
1467+ E290             >
1467+ E290             >Current_HP      defl  $ - $E000             // used to set HP once!
1467+ E290             >
1467+ E290             >//              ______________________________________________________________________
1467+ E290             >//              Dictionary part
1467+ E290             >
1467+ E290             >                org     Dict_Ptr
1467+ 689D             >
1467+ 689D 8E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1467+ 689F             >
1467+ 689F             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1467+ 689F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1467+ 689F ~           >
1467+ 689F ~           >
1467+ 689F             >                endif           ; ok        // for other definitions it "points" the correct handler
1467+ 689F             >                // Use of "; ok" to suppress "warning[fwdref]"
1467+ 689F             >
1467+ 689F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1468+ 689F D9                           exx
1469+ 68A0 E1                           pop     hl
1470+ 68A1 D1                           pop     de
1471+ 68A2 19                           add     hl, de
1472+ 68A3 E5                           push    hl
1473+ 68A4 D9                           exx
1474+ 68A5                              next
1474+ 68A5 DD E9       >                jp      (ix)
1475+ 68A7
1476+ 68A7
1477+ 68A7              //  ______________________________________________________________________
1478+ 68A7              //
1479+ 68A7              // d+           d1 d2 -- d3
1480+ 68A7              // returns the unsigned sum of two top double-numbers
1481+ 68A7              //      d2  d1
1482+ 68A7              //      h l h l
1483+ 68A7              // SP   LHEDLHED
1484+ 68A7              // SP  +01234567
1485+ 68A7                              New_Def DPLUS, "D+", is_code, is_normal
1485+ 68A7             >
1485+ 68A7             >Dict_Ptr        defl    $
1485+ 68A7             >
1485+ 68A7             >//              ______________________________________________________________________
1485+ 68A7             >//              Heap part
1485+ 68A7             >
1485+ 68A7             >
1485+ 68A7             >                org     (Heap_Ptr & $1FFF) + $E000
1485+ E290             >
1485+ E290             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1485+ E290             >Latest_Definition defl  Heap_Ptr
1485+ E290             >
1485+ E290             >                // dummy db directives used to calculate length of namec
1485+ E290 44 2B       >                db      "D+"
1485+ E292             >len_NFA         defl    $ - temp_NFA
1485+ E292             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1485+ E290             >
1485+ E290 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1485+ E291 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1485+ E293             >                org     $-1                 // alter last byte of Name just above to set
1485+ E292 AB          >                db      {b $} | END_BIT     // msb as name end
1485+ E293             >
1485+ E293 8A 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1485+ E295             >Prev_Ptr        defl    Heap_Ptr
1485+ E295             >
1485+ E295             >mirror_Ptr      defl    $
1485+ E295             >
1485+ E295 A9 68       >                dw      Dict_Ptr + 2        // xt
1485+ E297             >Heap_Ptr        defl    $ - $E000           // save current HP
1485+ E297             >
1485+ E297             >Current_HP      defl  $ - $E000             // used to set HP once!
1485+ E297             >
1485+ E297             >//              ______________________________________________________________________
1485+ E297             >//              Dictionary part
1485+ E297             >
1485+ E297             >                org     Dict_Ptr
1485+ 68A7             >
1485+ 68A7 95 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1485+ 68A9             >
1485+ 68A9             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1485+ 68A9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1485+ 68A9 ~           >
1485+ 68A9 ~           >
1485+ 68A9             >                endif           ; ok        // for other definitions it "points" the correct handler
1485+ 68A9             >                // Use of "; ok" to suppress "warning[fwdref]"
1485+ 68A9             >
1485+ 68A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1486+ 68A9
1487+ 68A9 D9                           exx
1488+ 68AA C1                           pop     bc                  // bc := d2.H
1489+ 68AB D1                           pop     de                  // hl := d2.L
1490+ 68AC E1                           pop     hl                  // d1.H
1491+ 68AD E3                           ex      (sp), hl            // d1.L
1492+ 68AE 19                           add     hl, de              // hl := d2.L + d1.L
1493+ 68AF E3                           ex      (sp), hl            // d1.H
1494+ 68B0 ED 4A                        adc     hl, bc              // d1.H + d2.H
1495+ 68B2 E5                           push    hl
1496+ 68B3 D9                           exx
1497+ 68B4                              next
1497+ 68B4 DD E9       >                jp      (ix)
1498+ 68B6
1499+ 68B6              //  ______________________________________________________________________
1500+ 68B6              //
1501+ 68B6              // 1+           n1 -- n2
1502+ 68B6              // increment by 1 top of stack
1503+ 68B6                              New_Def ONE_PLUS, "1+", is_code, is_normal
1503+ 68B6             >
1503+ 68B6             >Dict_Ptr        defl    $
1503+ 68B6             >
1503+ 68B6             >//              ______________________________________________________________________
1503+ 68B6             >//              Heap part
1503+ 68B6             >
1503+ 68B6             >
1503+ 68B6             >                org     (Heap_Ptr & $1FFF) + $E000
1503+ E297             >
1503+ E297             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1503+ E297             >Latest_Definition defl  Heap_Ptr
1503+ E297             >
1503+ E297             >                // dummy db directives used to calculate length of namec
1503+ E297 31 2B       >                db      "1+"
1503+ E299             >len_NFA         defl    $ - temp_NFA
1503+ E299             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1503+ E297             >
1503+ E297 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1503+ E298 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1503+ E29A             >                org     $-1                 // alter last byte of Name just above to set
1503+ E299 AB          >                db      {b $} | END_BIT     // msb as name end
1503+ E29A             >
1503+ E29A 90 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1503+ E29C             >Prev_Ptr        defl    Heap_Ptr
1503+ E29C             >
1503+ E29C             >mirror_Ptr      defl    $
1503+ E29C             >
1503+ E29C B8 68       >                dw      Dict_Ptr + 2        // xt
1503+ E29E             >Heap_Ptr        defl    $ - $E000           // save current HP
1503+ E29E             >
1503+ E29E             >Current_HP      defl  $ - $E000             // used to set HP once!
1503+ E29E             >
1503+ E29E             >//              ______________________________________________________________________
1503+ E29E             >//              Dictionary part
1503+ E29E             >
1503+ E29E             >                org     Dict_Ptr
1503+ 68B6             >
1503+ 68B6 9C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1503+ 68B8             >
1503+ 68B8             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1503+ 68B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1503+ 68B8 ~           >
1503+ 68B8 ~           >
1503+ 68B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1503+ 68B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1503+ 68B8             >
1503+ 68B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1504+ 68B8 E1                           pop     hl
1505+ 68B9 23                           inc     hl
1506+ 68BA
1507+ 68BA                              psh1
1507+ 68BA E5          >                push    hl
1507+ 68BB DD E9       >                jp      (ix)
1508+ 68BD
1509+ 68BD              //  ______________________________________________________________________
1510+ 68BD              //
1511+ 68BD              // 1-           n1 -- n2
1512+ 68BD              // decrement by 1 top of stack
1513+ 68BD                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1513+ 68BD             >
1513+ 68BD             >Dict_Ptr        defl    $
1513+ 68BD             >
1513+ 68BD             >//              ______________________________________________________________________
1513+ 68BD             >//              Heap part
1513+ 68BD             >
1513+ 68BD             >
1513+ 68BD             >                org     (Heap_Ptr & $1FFF) + $E000
1513+ E29E             >
1513+ E29E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1513+ E29E             >Latest_Definition defl  Heap_Ptr
1513+ E29E             >
1513+ E29E             >                // dummy db directives used to calculate length of namec
1513+ E29E 31 2D       >                db      "1-"
1513+ E2A0             >len_NFA         defl    $ - temp_NFA
1513+ E2A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1513+ E29E             >
1513+ E29E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1513+ E29F 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1513+ E2A1             >                org     $-1                 // alter last byte of Name just above to set
1513+ E2A0 AD          >                db      {b $} | END_BIT     // msb as name end
1513+ E2A1             >
1513+ E2A1 97 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1513+ E2A3             >Prev_Ptr        defl    Heap_Ptr
1513+ E2A3             >
1513+ E2A3             >mirror_Ptr      defl    $
1513+ E2A3             >
1513+ E2A3 BF 68       >                dw      Dict_Ptr + 2        // xt
1513+ E2A5             >Heap_Ptr        defl    $ - $E000           // save current HP
1513+ E2A5             >
1513+ E2A5             >Current_HP      defl  $ - $E000             // used to set HP once!
1513+ E2A5             >
1513+ E2A5             >//              ______________________________________________________________________
1513+ E2A5             >//              Dictionary part
1513+ E2A5             >
1513+ E2A5             >                org     Dict_Ptr
1513+ 68BD             >
1513+ 68BD A3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1513+ 68BF             >
1513+ 68BF             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1513+ 68BF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1513+ 68BF ~           >
1513+ 68BF ~           >
1513+ 68BF             >                endif           ; ok        // for other definitions it "points" the correct handler
1513+ 68BF             >                // Use of "; ok" to suppress "warning[fwdref]"
1513+ 68BF             >
1513+ 68BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1514+ 68BF E1                           pop     hl
1515+ 68C0 2B                           dec     hl
1516+ 68C1
1517+ 68C1                              psh1
1517+ 68C1 E5          >                push    hl
1517+ 68C2 DD E9       >                jp      (ix)
1518+ 68C4
1519+ 68C4              //  ______________________________________________________________________
1520+ 68C4              //
1521+ 68C4              // 2+           n1 -- n2
1522+ 68C4              // increment by 2 top of stack
1523+ 68C4                              New_Def TWO_PLUS, "2+", is_code, is_normal
1523+ 68C4             >
1523+ 68C4             >Dict_Ptr        defl    $
1523+ 68C4             >
1523+ 68C4             >//              ______________________________________________________________________
1523+ 68C4             >//              Heap part
1523+ 68C4             >
1523+ 68C4             >
1523+ 68C4             >                org     (Heap_Ptr & $1FFF) + $E000
1523+ E2A5             >
1523+ E2A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1523+ E2A5             >Latest_Definition defl  Heap_Ptr
1523+ E2A5             >
1523+ E2A5             >                // dummy db directives used to calculate length of namec
1523+ E2A5 32 2B       >                db      "2+"
1523+ E2A7             >len_NFA         defl    $ - temp_NFA
1523+ E2A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1523+ E2A5             >
1523+ E2A5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1523+ E2A6 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1523+ E2A8             >                org     $-1                 // alter last byte of Name just above to set
1523+ E2A7 AB          >                db      {b $} | END_BIT     // msb as name end
1523+ E2A8             >
1523+ E2A8 9E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1523+ E2AA             >Prev_Ptr        defl    Heap_Ptr
1523+ E2AA             >
1523+ E2AA             >mirror_Ptr      defl    $
1523+ E2AA             >
1523+ E2AA C6 68       >                dw      Dict_Ptr + 2        // xt
1523+ E2AC             >Heap_Ptr        defl    $ - $E000           // save current HP
1523+ E2AC             >
1523+ E2AC             >Current_HP      defl  $ - $E000             // used to set HP once!
1523+ E2AC             >
1523+ E2AC             >//              ______________________________________________________________________
1523+ E2AC             >//              Dictionary part
1523+ E2AC             >
1523+ E2AC             >                org     Dict_Ptr
1523+ 68C4             >
1523+ 68C4 AA 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1523+ 68C6             >
1523+ 68C6             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1523+ 68C6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1523+ 68C6 ~           >
1523+ 68C6 ~           >
1523+ 68C6             >                endif           ; ok        // for other definitions it "points" the correct handler
1523+ 68C6             >                // Use of "; ok" to suppress "warning[fwdref]"
1523+ 68C6             >
1523+ 68C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1524+ 68C6              Two_Plus:
1525+ 68C6 E1                           pop     hl
1526+ 68C7 23                           inc     hl
1527+ 68C8 23                           inc     hl
1528+ 68C9
1529+ 68C9                              psh1
1529+ 68C9 E5          >                push    hl
1529+ 68CA DD E9       >                jp      (ix)
1530+ 68CC
1531+ 68CC              //  ______________________________________________________________________
1532+ 68CC              //
1533+ 68CC              // cell+        a1 -- a2
1534+ 68CC              // increment by 2 top of stack
1535+ 68CC                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1535+ 68CC             >
1535+ 68CC             >Dict_Ptr        defl    $
1535+ 68CC             >
1535+ 68CC             >//              ______________________________________________________________________
1535+ 68CC             >//              Heap part
1535+ 68CC             >
1535+ 68CC             >
1535+ 68CC             >                org     (Heap_Ptr & $1FFF) + $E000
1535+ E2AC             >
1535+ E2AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1535+ E2AC             >Latest_Definition defl  Heap_Ptr
1535+ E2AC             >
1535+ E2AC             >                // dummy db directives used to calculate length of namec
1535+ E2AC 43 45 4C 4C >                db      "CELL+"
1535+ E2B0 2B          >
1535+ E2B1             >len_NFA         defl    $ - temp_NFA
1535+ E2B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1535+ E2AC             >
1535+ E2AC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1535+ E2AD 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1535+ E2B1 2B          >
1535+ E2B2             >                org     $-1                 // alter last byte of Name just above to set
1535+ E2B1 AB          >                db      {b $} | END_BIT     // msb as name end
1535+ E2B2             >
1535+ E2B2 A5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1535+ E2B4             >Prev_Ptr        defl    Heap_Ptr
1535+ E2B4             >
1535+ E2B4             >mirror_Ptr      defl    $
1535+ E2B4             >
1535+ E2B4 CE 68       >                dw      Dict_Ptr + 2        // xt
1535+ E2B6             >Heap_Ptr        defl    $ - $E000           // save current HP
1535+ E2B6             >
1535+ E2B6             >Current_HP      defl  $ - $E000             // used to set HP once!
1535+ E2B6             >
1535+ E2B6             >//              ______________________________________________________________________
1535+ E2B6             >//              Dictionary part
1535+ E2B6             >
1535+ E2B6             >                org     Dict_Ptr
1535+ 68CC             >
1535+ 68CC B4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1535+ 68CE             >
1535+ 68CE             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1535+ 68CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1535+ 68CE ~           >
1535+ 68CE ~           >
1535+ 68CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1535+ 68CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1535+ 68CE             >
1535+ 68CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1536+ 68CE C3 C6 68                     jp      Two_Plus
1537+ 68D1
1538+ 68D1              //  ______________________________________________________________________
1539+ 68D1              //
1540+ 68D1              // align        a1 -- a2
1541+ 68D1              // align memory : not used
1542+ 68D1              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1543+ 68D1              //            next
1544+ 68D1
1545+ 68D1              //  ______________________________________________________________________
1546+ 68D1              //
1547+ 68D1              // cell-        a1 -- a2
1548+ 68D1              // decrement by 2 top of stack
1549+ 68D1                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1549+ 68D1             >
1549+ 68D1             >Dict_Ptr        defl    $
1549+ 68D1             >
1549+ 68D1             >//              ______________________________________________________________________
1549+ 68D1             >//              Heap part
1549+ 68D1             >
1549+ 68D1             >
1549+ 68D1             >                org     (Heap_Ptr & $1FFF) + $E000
1549+ E2B6             >
1549+ E2B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1549+ E2B6             >Latest_Definition defl  Heap_Ptr
1549+ E2B6             >
1549+ E2B6             >                // dummy db directives used to calculate length of namec
1549+ E2B6 43 45 4C 4C >                db      "CELL-"
1549+ E2BA 2D          >
1549+ E2BB             >len_NFA         defl    $ - temp_NFA
1549+ E2BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1549+ E2B6             >
1549+ E2B6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1549+ E2B7 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1549+ E2BB 2D          >
1549+ E2BC             >                org     $-1                 // alter last byte of Name just above to set
1549+ E2BB AD          >                db      {b $} | END_BIT     // msb as name end
1549+ E2BC             >
1549+ E2BC AC 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1549+ E2BE             >Prev_Ptr        defl    Heap_Ptr
1549+ E2BE             >
1549+ E2BE             >mirror_Ptr      defl    $
1549+ E2BE             >
1549+ E2BE D3 68       >                dw      Dict_Ptr + 2        // xt
1549+ E2C0             >Heap_Ptr        defl    $ - $E000           // save current HP
1549+ E2C0             >
1549+ E2C0             >Current_HP      defl  $ - $E000             // used to set HP once!
1549+ E2C0             >
1549+ E2C0             >//              ______________________________________________________________________
1549+ E2C0             >//              Dictionary part
1549+ E2C0             >
1549+ E2C0             >                org     Dict_Ptr
1549+ 68D1             >
1549+ 68D1 BE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1549+ 68D3             >
1549+ 68D3             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1549+ 68D3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1549+ 68D3 ~           >
1549+ 68D3 ~           >
1549+ 68D3             >                endif           ; ok        // for other definitions it "points" the correct handler
1549+ 68D3             >                // Use of "; ok" to suppress "warning[fwdref]"
1549+ 68D3             >
1549+ 68D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1550+ 68D3              CellMinus:
1551+ 68D3 E1                           pop     hl
1552+ 68D4 2B                           dec     hl
1553+ 68D5 2B                           dec     hl
1554+ 68D6
1555+ 68D6                              psh1
1555+ 68D6 E5          >                push    hl
1555+ 68D7 DD E9       >                jp      (ix)
1556+ 68D9
1557+ 68D9              //  ______________________________________________________________________
1558+ 68D9              //
1559+ 68D9              // 2-           a1 -- a2
1560+ 68D9              // decrement by 2 top of stack
1561+ 68D9                              New_Def TWO_MINUS, "2-", is_code, is_normal
1561+ 68D9             >
1561+ 68D9             >Dict_Ptr        defl    $
1561+ 68D9             >
1561+ 68D9             >//              ______________________________________________________________________
1561+ 68D9             >//              Heap part
1561+ 68D9             >
1561+ 68D9             >
1561+ 68D9             >                org     (Heap_Ptr & $1FFF) + $E000
1561+ E2C0             >
1561+ E2C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1561+ E2C0             >Latest_Definition defl  Heap_Ptr
1561+ E2C0             >
1561+ E2C0             >                // dummy db directives used to calculate length of namec
1561+ E2C0 32 2D       >                db      "2-"
1561+ E2C2             >len_NFA         defl    $ - temp_NFA
1561+ E2C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1561+ E2C0             >
1561+ E2C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1561+ E2C1 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1561+ E2C3             >                org     $-1                 // alter last byte of Name just above to set
1561+ E2C2 AD          >                db      {b $} | END_BIT     // msb as name end
1561+ E2C3             >
1561+ E2C3 B6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1561+ E2C5             >Prev_Ptr        defl    Heap_Ptr
1561+ E2C5             >
1561+ E2C5             >mirror_Ptr      defl    $
1561+ E2C5             >
1561+ E2C5 DB 68       >                dw      Dict_Ptr + 2        // xt
1561+ E2C7             >Heap_Ptr        defl    $ - $E000           // save current HP
1561+ E2C7             >
1561+ E2C7             >Current_HP      defl  $ - $E000             // used to set HP once!
1561+ E2C7             >
1561+ E2C7             >//              ______________________________________________________________________
1561+ E2C7             >//              Dictionary part
1561+ E2C7             >
1561+ E2C7             >                org     Dict_Ptr
1561+ 68D9             >
1561+ 68D9 C5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1561+ 68DB             >
1561+ 68DB             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1561+ 68DB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1561+ 68DB ~           >
1561+ 68DB ~           >
1561+ 68DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1561+ 68DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1561+ 68DB             >
1561+ 68DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1562+ 68DB C3 D3 68                     jp      CellMinus
1563+ 68DE
1564+ 68DE              //  ______________________________________________________________________
1565+ 68DE              //
1566+ 68DE              // negate       n1 -- n2
1567+ 68DE              // change the sign of number
1568+ 68DE                              New_Def MINUS, "NEGATE", is_code, is_normal
1568+ 68DE             >
1568+ 68DE             >Dict_Ptr        defl    $
1568+ 68DE             >
1568+ 68DE             >//              ______________________________________________________________________
1568+ 68DE             >//              Heap part
1568+ 68DE             >
1568+ 68DE             >
1568+ 68DE             >                org     (Heap_Ptr & $1FFF) + $E000
1568+ E2C7             >
1568+ E2C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1568+ E2C7             >Latest_Definition defl  Heap_Ptr
1568+ E2C7             >
1568+ E2C7             >                // dummy db directives used to calculate length of namec
1568+ E2C7 4E 45 47 41 >                db      "NEGATE"
1568+ E2CB 54 45       >
1568+ E2CD             >len_NFA         defl    $ - temp_NFA
1568+ E2CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1568+ E2C7             >
1568+ E2C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1568+ E2C8 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1568+ E2CC 54 45       >
1568+ E2CE             >                org     $-1                 // alter last byte of Name just above to set
1568+ E2CD C5          >                db      {b $} | END_BIT     // msb as name end
1568+ E2CE             >
1568+ E2CE C0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1568+ E2D0             >Prev_Ptr        defl    Heap_Ptr
1568+ E2D0             >
1568+ E2D0             >mirror_Ptr      defl    $
1568+ E2D0             >
1568+ E2D0 E0 68       >                dw      Dict_Ptr + 2        // xt
1568+ E2D2             >Heap_Ptr        defl    $ - $E000           // save current HP
1568+ E2D2             >
1568+ E2D2             >Current_HP      defl  $ - $E000             // used to set HP once!
1568+ E2D2             >
1568+ E2D2             >//              ______________________________________________________________________
1568+ E2D2             >//              Dictionary part
1568+ E2D2             >
1568+ E2D2             >                org     Dict_Ptr
1568+ 68DE             >
1568+ 68DE D0 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1568+ 68E0             >
1568+ 68E0             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1568+ 68E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1568+ 68E0 ~           >
1568+ 68E0 ~           >
1568+ 68E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1568+ 68E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1568+ 68E0             >
1568+ 68E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1569+ 68E0 D9                           exx
1570+ 68E1 21 00 00                     ld      hl, 0               // subtract from 0
1571+ 68E4 D1                           pop     de
1572+ 68E5 B7                           or      a
1573+ 68E6 ED 52                        sbc     hl, de
1574+ 68E8 E5                           push    hl
1575+ 68E9 D9                           exx
1576+ 68EA                              next
1576+ 68EA DD E9       >                jp      (ix)
1577+ 68EC
1578+ 68EC              //  ______________________________________________________________________
1579+ 68EC              //
1580+ 68EC              // dnegate      d1 -- d2
1581+ 68EC              // change the sign of a double number
1582+ 68EC                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1582+ 68EC             >
1582+ 68EC             >Dict_Ptr        defl    $
1582+ 68EC             >
1582+ 68EC             >//              ______________________________________________________________________
1582+ 68EC             >//              Heap part
1582+ 68EC             >
1582+ 68EC             >
1582+ 68EC             >                org     (Heap_Ptr & $1FFF) + $E000
1582+ E2D2             >
1582+ E2D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1582+ E2D2             >Latest_Definition defl  Heap_Ptr
1582+ E2D2             >
1582+ E2D2             >                // dummy db directives used to calculate length of namec
1582+ E2D2 44 4E 45 47 >                db      "DNEGATE"
1582+ E2D6 41 54 45    >
1582+ E2D9             >len_NFA         defl    $ - temp_NFA
1582+ E2D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1582+ E2D2             >
1582+ E2D2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1582+ E2D3 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1582+ E2D7 41 54 45    >
1582+ E2DA             >                org     $-1                 // alter last byte of Name just above to set
1582+ E2D9 C5          >                db      {b $} | END_BIT     // msb as name end
1582+ E2DA             >
1582+ E2DA C7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1582+ E2DC             >Prev_Ptr        defl    Heap_Ptr
1582+ E2DC             >
1582+ E2DC             >mirror_Ptr      defl    $
1582+ E2DC             >
1582+ E2DC EE 68       >                dw      Dict_Ptr + 2        // xt
1582+ E2DE             >Heap_Ptr        defl    $ - $E000           // save current HP
1582+ E2DE             >
1582+ E2DE             >Current_HP      defl  $ - $E000             // used to set HP once!
1582+ E2DE             >
1582+ E2DE             >//              ______________________________________________________________________
1582+ E2DE             >//              Dictionary part
1582+ E2DE             >
1582+ E2DE             >                org     Dict_Ptr
1582+ 68EC             >
1582+ 68EC DC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1582+ 68EE             >
1582+ 68EE             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1582+ 68EE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1582+ 68EE ~           >
1582+ 68EE ~           >
1582+ 68EE             >                endif           ; ok        // for other definitions it "points" the correct handler
1582+ 68EE             >                // Use of "; ok" to suppress "warning[fwdref]"
1582+ 68EE             >
1582+ 68EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1583+ 68EE D9                           exx
1584+ 68EF C1                           pop     bc                  // d1.H
1585+ 68F0 D1                           pop     de                  // d1.L
1586+ 68F1 AF                           xor     a
1587+ 68F2 67                           ld      h, a
1588+ 68F3 6F                           ld      l, a
1589+ 68F4 ED 52                        sbc     hl, de              // subtact from zero
1590+ 68F6 E5                           push    hl                  // > d2-L
1591+ 68F7 67                           ld      h, a
1592+ 68F8 6F                           ld      l, a
1593+ 68F9 ED 42                        sbc     hl, bc              // subtract from zero with carry
1594+ 68FB                                                          // > d2-H
1595+ 68FB E5                           push    hl
1596+ 68FC D9                           exx
1597+ 68FD                              next
1597+ 68FD DD E9       >                jp      (ix)
1598+ 68FF
1599+ 68FF              //  ______________________________________________________________________
1600+ 68FF              //
1601+ 68FF              // over         n1 n2 -- n1 n2 n1
1602+ 68FF              // copy the second value of stack and put it on top.
1603+ 68FF                              New_Def OVER, "OVER", is_code, is_normal
1603+ 68FF             >
1603+ 68FF             >Dict_Ptr        defl    $
1603+ 68FF             >
1603+ 68FF             >//              ______________________________________________________________________
1603+ 68FF             >//              Heap part
1603+ 68FF             >
1603+ 68FF             >
1603+ 68FF             >                org     (Heap_Ptr & $1FFF) + $E000
1603+ E2DE             >
1603+ E2DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1603+ E2DE             >Latest_Definition defl  Heap_Ptr
1603+ E2DE             >
1603+ E2DE             >                // dummy db directives used to calculate length of namec
1603+ E2DE 4F 56 45 52 >                db      "OVER"
1603+ E2E2             >len_NFA         defl    $ - temp_NFA
1603+ E2E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1603+ E2DE             >
1603+ E2DE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1603+ E2DF 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1603+ E2E3             >                org     $-1                 // alter last byte of Name just above to set
1603+ E2E2 D2          >                db      {b $} | END_BIT     // msb as name end
1603+ E2E3             >
1603+ E2E3 D2 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1603+ E2E5             >Prev_Ptr        defl    Heap_Ptr
1603+ E2E5             >
1603+ E2E5             >mirror_Ptr      defl    $
1603+ E2E5             >
1603+ E2E5 01 69       >                dw      Dict_Ptr + 2        // xt
1603+ E2E7             >Heap_Ptr        defl    $ - $E000           // save current HP
1603+ E2E7             >
1603+ E2E7             >Current_HP      defl  $ - $E000             // used to set HP once!
1603+ E2E7             >
1603+ E2E7             >//              ______________________________________________________________________
1603+ E2E7             >//              Dictionary part
1603+ E2E7             >
1603+ E2E7             >                org     Dict_Ptr
1603+ 68FF             >
1603+ 68FF E5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1603+ 6901             >
1603+ 6901             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1603+ 6901 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1603+ 6901 ~           >
1603+ 6901 ~           >
1603+ 6901             >                endif           ; ok        // for other definitions it "points" the correct handler
1603+ 6901             >                // Use of "; ok" to suppress "warning[fwdref]"
1603+ 6901             >
1603+ 6901             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1604+ 6901                              // exx     // we can use af instead OPTIMIZATION possible
1605+ 6901 F1                           pop     af                  //   n2
1606+ 6902 E1                           pop     hl                  // < n1
1607+ 6903 E5                           push    hl                  // > n1
1608+ 6904 F5                           push    af                  // > n2
1609+ 6905 E5                           push    hl                  // > n1
1610+ 6906                              // exx
1611+ 6906                              next
1611+ 6906 DD E9       >                jp      (ix)
1612+ 6908
1613+ 6908              //  ______________________________________________________________________
1614+ 6908              //
1615+ 6908              // drop         n1 --
1616+ 6908              // drops the top of stack
1617+ 6908                              New_Def DROP, "DROP", is_code, is_normal
1617+ 6908             >
1617+ 6908             >Dict_Ptr        defl    $
1617+ 6908             >
1617+ 6908             >//              ______________________________________________________________________
1617+ 6908             >//              Heap part
1617+ 6908             >
1617+ 6908             >
1617+ 6908             >                org     (Heap_Ptr & $1FFF) + $E000
1617+ E2E7             >
1617+ E2E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1617+ E2E7             >Latest_Definition defl  Heap_Ptr
1617+ E2E7             >
1617+ E2E7             >                // dummy db directives used to calculate length of namec
1617+ E2E7 44 52 4F 50 >                db      "DROP"
1617+ E2EB             >len_NFA         defl    $ - temp_NFA
1617+ E2EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1617+ E2E7             >
1617+ E2E7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1617+ E2E8 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1617+ E2EC             >                org     $-1                 // alter last byte of Name just above to set
1617+ E2EB D0          >                db      {b $} | END_BIT     // msb as name end
1617+ E2EC             >
1617+ E2EC DE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1617+ E2EE             >Prev_Ptr        defl    Heap_Ptr
1617+ E2EE             >
1617+ E2EE             >mirror_Ptr      defl    $
1617+ E2EE             >
1617+ E2EE 0A 69       >                dw      Dict_Ptr + 2        // xt
1617+ E2F0             >Heap_Ptr        defl    $ - $E000           // save current HP
1617+ E2F0             >
1617+ E2F0             >Current_HP      defl  $ - $E000             // used to set HP once!
1617+ E2F0             >
1617+ E2F0             >//              ______________________________________________________________________
1617+ E2F0             >//              Dictionary part
1617+ E2F0             >
1617+ E2F0             >                org     Dict_Ptr
1617+ 6908             >
1617+ 6908 EE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1617+ 690A             >
1617+ 690A             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1617+ 690A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1617+ 690A ~           >
1617+ 690A ~           >
1617+ 690A             >                endif           ; ok        // for other definitions it "points" the correct handler
1617+ 690A             >                // Use of "; ok" to suppress "warning[fwdref]"
1617+ 690A             >
1617+ 690A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1618+ 690A E1                           pop     hl                  // < n1 and discard previous TOS
1619+ 690B                              next
1619+ 690B DD E9       >                jp      (ix)
1620+ 690D
1621+ 690D              //  ______________________________________________________________________
1622+ 690D              //
1623+ 690D              // nip          n1 n2 -- n2
1624+ 690D              // drops the second elemento on the stack
1625+ 690D                              New_Def NIP, "NIP", is_code, is_normal
1625+ 690D             >
1625+ 690D             >Dict_Ptr        defl    $
1625+ 690D             >
1625+ 690D             >//              ______________________________________________________________________
1625+ 690D             >//              Heap part
1625+ 690D             >
1625+ 690D             >
1625+ 690D             >                org     (Heap_Ptr & $1FFF) + $E000
1625+ E2F0             >
1625+ E2F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1625+ E2F0             >Latest_Definition defl  Heap_Ptr
1625+ E2F0             >
1625+ E2F0             >                // dummy db directives used to calculate length of namec
1625+ E2F0 4E 49 50    >                db      "NIP"
1625+ E2F3             >len_NFA         defl    $ - temp_NFA
1625+ E2F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1625+ E2F0             >
1625+ E2F0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1625+ E2F1 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1625+ E2F4             >                org     $-1                 // alter last byte of Name just above to set
1625+ E2F3 D0          >                db      {b $} | END_BIT     // msb as name end
1625+ E2F4             >
1625+ E2F4 E7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1625+ E2F6             >Prev_Ptr        defl    Heap_Ptr
1625+ E2F6             >
1625+ E2F6             >mirror_Ptr      defl    $
1625+ E2F6             >
1625+ E2F6 0F 69       >                dw      Dict_Ptr + 2        // xt
1625+ E2F8             >Heap_Ptr        defl    $ - $E000           // save current HP
1625+ E2F8             >
1625+ E2F8             >Current_HP      defl  $ - $E000             // used to set HP once!
1625+ E2F8             >
1625+ E2F8             >//              ______________________________________________________________________
1625+ E2F8             >//              Dictionary part
1625+ E2F8             >
1625+ E2F8             >                org     Dict_Ptr
1625+ 690D             >
1625+ 690D F6 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1625+ 690F             >
1625+ 690F             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1625+ 690F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1625+ 690F ~           >
1625+ 690F ~           >
1625+ 690F             >                endif           ; ok        // for other definitions it "points" the correct handler
1625+ 690F             >                // Use of "; ok" to suppress "warning[fwdref]"
1625+ 690F             >
1625+ 690F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1626+ 690F
1627+ 690F E1                           pop     hl                  // < n1 discarded
1628+ 6910 E3                           ex      (sp), hl
1629+ 6911                              next
1629+ 6911 DD E9       >                jp      (ix)
1630+ 6913
1631+ 6913              //  ______________________________________________________________________
1632+ 6913              //
1633+ 6913              // tuck         n1 n2 -- n2 n1 n2
1634+ 6913              // copy the top element after the second.
1635+ 6913                              New_Def TUCK, "TUCK", is_code, is_normal
1635+ 6913             >
1635+ 6913             >Dict_Ptr        defl    $
1635+ 6913             >
1635+ 6913             >//              ______________________________________________________________________
1635+ 6913             >//              Heap part
1635+ 6913             >
1635+ 6913             >
1635+ 6913             >                org     (Heap_Ptr & $1FFF) + $E000
1635+ E2F8             >
1635+ E2F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1635+ E2F8             >Latest_Definition defl  Heap_Ptr
1635+ E2F8             >
1635+ E2F8             >                // dummy db directives used to calculate length of namec
1635+ E2F8 54 55 43 4B >                db      "TUCK"
1635+ E2FC             >len_NFA         defl    $ - temp_NFA
1635+ E2FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1635+ E2F8             >
1635+ E2F8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1635+ E2F9 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1635+ E2FD             >                org     $-1                 // alter last byte of Name just above to set
1635+ E2FC CB          >                db      {b $} | END_BIT     // msb as name end
1635+ E2FD             >
1635+ E2FD F0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1635+ E2FF             >Prev_Ptr        defl    Heap_Ptr
1635+ E2FF             >
1635+ E2FF             >mirror_Ptr      defl    $
1635+ E2FF             >
1635+ E2FF 15 69       >                dw      Dict_Ptr + 2        // xt
1635+ E301             >Heap_Ptr        defl    $ - $E000           // save current HP
1635+ E301             >
1635+ E301             >Current_HP      defl  $ - $E000             // used to set HP once!
1635+ E301             >
1635+ E301             >//              ______________________________________________________________________
1635+ E301             >//              Dictionary part
1635+ E301             >
1635+ E301             >                org     Dict_Ptr
1635+ 6913             >
1635+ 6913 FF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1635+ 6915             >
1635+ 6915             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1635+ 6915 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1635+ 6915 ~           >
1635+ 6915 ~           >
1635+ 6915             >                endif           ; ok        // for other definitions it "points" the correct handler
1635+ 6915             >                // Use of "; ok" to suppress "warning[fwdref]"
1635+ 6915             >
1635+ 6915             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1636+ 6915 E1                           pop     hl
1637+ 6916 F1                           pop     af                  // < n1
1638+ 6917 E5                           push    hl                  // > n2  and TOS
1639+ 6918 F5                           push    af                  // > n1
1640+ 6919 E5                           push    hl
1641+ 691A                              next
1641+ 691A DD E9       >                jp      (ix)
1642+ 691C
1643+ 691C              //  ______________________________________________________________________
1644+ 691C              //
1645+ 691C              // swap         n1 n2 -- n2 n1
1646+ 691C              // swaps the two values on top of stack
1647+ 691C                              New_Def SWAP, "SWAP", is_code, is_normal
1647+ 691C             >
1647+ 691C             >Dict_Ptr        defl    $
1647+ 691C             >
1647+ 691C             >//              ______________________________________________________________________
1647+ 691C             >//              Heap part
1647+ 691C             >
1647+ 691C             >
1647+ 691C             >                org     (Heap_Ptr & $1FFF) + $E000
1647+ E301             >
1647+ E301             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1647+ E301             >Latest_Definition defl  Heap_Ptr
1647+ E301             >
1647+ E301             >                // dummy db directives used to calculate length of namec
1647+ E301 53 57 41 50 >                db      "SWAP"
1647+ E305             >len_NFA         defl    $ - temp_NFA
1647+ E305             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1647+ E301             >
1647+ E301 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1647+ E302 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1647+ E306             >                org     $-1                 // alter last byte of Name just above to set
1647+ E305 D0          >                db      {b $} | END_BIT     // msb as name end
1647+ E306             >
1647+ E306 F8 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1647+ E308             >Prev_Ptr        defl    Heap_Ptr
1647+ E308             >
1647+ E308             >mirror_Ptr      defl    $
1647+ E308             >
1647+ E308 1E 69       >                dw      Dict_Ptr + 2        // xt
1647+ E30A             >Heap_Ptr        defl    $ - $E000           // save current HP
1647+ E30A             >
1647+ E30A             >Current_HP      defl  $ - $E000             // used to set HP once!
1647+ E30A             >
1647+ E30A             >//              ______________________________________________________________________
1647+ E30A             >//              Dictionary part
1647+ E30A             >
1647+ E30A             >                org     Dict_Ptr
1647+ 691C             >
1647+ 691C 08 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1647+ 691E             >
1647+ 691E             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1647+ 691E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1647+ 691E ~           >
1647+ 691E ~           >
1647+ 691E             >                endif           ; ok        // for other definitions it "points" the correct handler
1647+ 691E             >                // Use of "; ok" to suppress "warning[fwdref]"
1647+ 691E             >
1647+ 691E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1648+ 691E E1                           pop     hl                  // < n1
1649+ 691F E3                           ex      (sp),hl             // > n2
1650+ 6920 E5                           push    hl                  // copy n1 to TOS
1651+ 6921                              next
1651+ 6921 DD E9       >                jp      (ix)
1652+ 6923
1653+ 6923              //  ______________________________________________________________________
1654+ 6923              //
1655+ 6923              // dup         n -- n n
1656+ 6923              // duplicates the top value of stack
1657+ 6923                              New_Def DUP, "DUP", is_code, is_normal
1657+ 6923             >
1657+ 6923             >Dict_Ptr        defl    $
1657+ 6923             >
1657+ 6923             >//              ______________________________________________________________________
1657+ 6923             >//              Heap part
1657+ 6923             >
1657+ 6923             >
1657+ 6923             >                org     (Heap_Ptr & $1FFF) + $E000
1657+ E30A             >
1657+ E30A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1657+ E30A             >Latest_Definition defl  Heap_Ptr
1657+ E30A             >
1657+ E30A             >                // dummy db directives used to calculate length of namec
1657+ E30A 44 55 50    >                db      "DUP"
1657+ E30D             >len_NFA         defl    $ - temp_NFA
1657+ E30D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1657+ E30A             >
1657+ E30A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1657+ E30B 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1657+ E30E             >                org     $-1                 // alter last byte of Name just above to set
1657+ E30D D0          >                db      {b $} | END_BIT     // msb as name end
1657+ E30E             >
1657+ E30E 01 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1657+ E310             >Prev_Ptr        defl    Heap_Ptr
1657+ E310             >
1657+ E310             >mirror_Ptr      defl    $
1657+ E310             >
1657+ E310 25 69       >                dw      Dict_Ptr + 2        // xt
1657+ E312             >Heap_Ptr        defl    $ - $E000           // save current HP
1657+ E312             >
1657+ E312             >Current_HP      defl  $ - $E000             // used to set HP once!
1657+ E312             >
1657+ E312             >//              ______________________________________________________________________
1657+ E312             >//              Dictionary part
1657+ E312             >
1657+ E312             >                org     Dict_Ptr
1657+ 6923             >
1657+ 6923 10 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1657+ 6925             >
1657+ 6925             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1657+ 6925 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1657+ 6925 ~           >
1657+ 6925 ~           >
1657+ 6925             >                endif           ; ok        // for other definitions it "points" the correct handler
1657+ 6925             >                // Use of "; ok" to suppress "warning[fwdref]"
1657+ 6925             >
1657+ 6925             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1658+ 6925 E1                           pop     hl
1659+ 6926 E5                           push    hl                  // > n duplicate TOS
1660+ 6927 E5                           push    hl
1661+ 6928                              next
1661+ 6928 DD E9       >                jp      (ix)
1662+ 692A
1663+ 692A              //  ______________________________________________________________________
1664+ 692A              //
1665+ 692A              // rot         n1 n2 n3 -- n2 n3 n1
1666+ 692A              // Rotates the 3 top values of stack by picking the 3rd in access-order
1667+ 692A              // and putting it on top. The other two are shifted down one place.
1668+ 692A                              New_Def ROT, "ROT", is_code, is_normal
1668+ 692A             >
1668+ 692A             >Dict_Ptr        defl    $
1668+ 692A             >
1668+ 692A             >//              ______________________________________________________________________
1668+ 692A             >//              Heap part
1668+ 692A             >
1668+ 692A             >
1668+ 692A             >                org     (Heap_Ptr & $1FFF) + $E000
1668+ E312             >
1668+ E312             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1668+ E312             >Latest_Definition defl  Heap_Ptr
1668+ E312             >
1668+ E312             >                // dummy db directives used to calculate length of namec
1668+ E312 52 4F 54    >                db      "ROT"
1668+ E315             >len_NFA         defl    $ - temp_NFA
1668+ E315             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1668+ E312             >
1668+ E312 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1668+ E313 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1668+ E316             >                org     $-1                 // alter last byte of Name just above to set
1668+ E315 D4          >                db      {b $} | END_BIT     // msb as name end
1668+ E316             >
1668+ E316 0A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1668+ E318             >Prev_Ptr        defl    Heap_Ptr
1668+ E318             >
1668+ E318             >mirror_Ptr      defl    $
1668+ E318             >
1668+ E318 2C 69       >                dw      Dict_Ptr + 2        // xt
1668+ E31A             >Heap_Ptr        defl    $ - $E000           // save current HP
1668+ E31A             >
1668+ E31A             >Current_HP      defl  $ - $E000             // used to set HP once!
1668+ E31A             >
1668+ E31A             >//              ______________________________________________________________________
1668+ E31A             >//              Dictionary part
1668+ E31A             >
1668+ E31A             >                org     Dict_Ptr
1668+ 692A             >
1668+ 692A 18 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1668+ 692C             >
1668+ 692C             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1668+ 692C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1668+ 692C ~           >
1668+ 692C ~           >
1668+ 692C             >                endif           ; ok        // for other definitions it "points" the correct handler
1668+ 692C             >                // Use of "; ok" to suppress "warning[fwdref]"
1668+ 692C             >
1668+ 692C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1669+ 692C D9                           exx
1670+ 692D D1                           pop     de                  // < n3
1671+ 692E E1                           pop     hl                  // < n2
1672+ 692F E3                           ex      (sp),hl             // > n2 < n1
1673+ 6930 D5                           push    de                  // > n3
1674+ 6931 E5                           push    hl                  // copy n1 to TOS
1675+ 6932 D9                           exx
1676+ 6933                              next
1676+ 6933 DD E9       >                jp      (ix)
1677+ 6935
1678+ 6935              //  ______________________________________________________________________
1679+ 6935              //
1680+ 6935              // -rot         n1 n2 n3 -- n3 n1 n2
1681+ 6935              // Rotates the 3 top values of stack by picking the 1st in access-order
1682+ 6935              // and putting back to 3rd place. The other two are shifted down one place.
1683+ 6935                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1683+ 6935             >
1683+ 6935             >Dict_Ptr        defl    $
1683+ 6935             >
1683+ 6935             >//              ______________________________________________________________________
1683+ 6935             >//              Heap part
1683+ 6935             >
1683+ 6935             >
1683+ 6935             >                org     (Heap_Ptr & $1FFF) + $E000
1683+ E31A             >
1683+ E31A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1683+ E31A             >Latest_Definition defl  Heap_Ptr
1683+ E31A             >
1683+ E31A             >                // dummy db directives used to calculate length of namec
1683+ E31A 2D 52 4F 54 >                db      "-ROT"
1683+ E31E             >len_NFA         defl    $ - temp_NFA
1683+ E31E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1683+ E31A             >
1683+ E31A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1683+ E31B 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1683+ E31F             >                org     $-1                 // alter last byte of Name just above to set
1683+ E31E D4          >                db      {b $} | END_BIT     // msb as name end
1683+ E31F             >
1683+ E31F 12 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1683+ E321             >Prev_Ptr        defl    Heap_Ptr
1683+ E321             >
1683+ E321             >mirror_Ptr      defl    $
1683+ E321             >
1683+ E321 37 69       >                dw      Dict_Ptr + 2        // xt
1683+ E323             >Heap_Ptr        defl    $ - $E000           // save current HP
1683+ E323             >
1683+ E323             >Current_HP      defl  $ - $E000             // used to set HP once!
1683+ E323             >
1683+ E323             >//              ______________________________________________________________________
1683+ E323             >//              Dictionary part
1683+ E323             >
1683+ E323             >                org     Dict_Ptr
1683+ 6935             >
1683+ 6935 21 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1683+ 6937             >
1683+ 6937             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1683+ 6937 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1683+ 6937 ~           >
1683+ 6937 ~           >
1683+ 6937             >                endif           ; ok        // for other definitions it "points" the correct handler
1683+ 6937             >                // Use of "; ok" to suppress "warning[fwdref]"
1683+ 6937             >
1683+ 6937             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1684+ 6937 D9                           exx
1685+ 6938 E1                           pop     hl                  // < n3
1686+ 6939 D1                           pop     de                  // < n2
1687+ 693A E3                           ex      (sp),hl             // > n3 < n1
1688+ 693B E5                           push    hl                  // > n1
1689+ 693C D5                           push    de                  // copy n3 to TOS
1690+ 693D D9                           exx
1691+ 693E                              next
1691+ 693E DD E9       >                jp      (ix)
1692+ 6940
1693+ 6940              //  ______________________________________________________________________
1694+ 6940              //
1695+ 6940              // pick        n1 -- nx
1696+ 6940              // picks the nth element from TOS
1697+ 6940                              New_Def PICK, "PICK", is_code, is_normal
1697+ 6940             >
1697+ 6940             >Dict_Ptr        defl    $
1697+ 6940             >
1697+ 6940             >//              ______________________________________________________________________
1697+ 6940             >//              Heap part
1697+ 6940             >
1697+ 6940             >
1697+ 6940             >                org     (Heap_Ptr & $1FFF) + $E000
1697+ E323             >
1697+ E323             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1697+ E323             >Latest_Definition defl  Heap_Ptr
1697+ E323             >
1697+ E323             >                // dummy db directives used to calculate length of namec
1697+ E323 50 49 43 4B >                db      "PICK"
1697+ E327             >len_NFA         defl    $ - temp_NFA
1697+ E327             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1697+ E323             >
1697+ E323 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1697+ E324 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1697+ E328             >                org     $-1                 // alter last byte of Name just above to set
1697+ E327 CB          >                db      {b $} | END_BIT     // msb as name end
1697+ E328             >
1697+ E328 1A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1697+ E32A             >Prev_Ptr        defl    Heap_Ptr
1697+ E32A             >
1697+ E32A             >mirror_Ptr      defl    $
1697+ E32A             >
1697+ E32A 42 69       >                dw      Dict_Ptr + 2        // xt
1697+ E32C             >Heap_Ptr        defl    $ - $E000           // save current HP
1697+ E32C             >
1697+ E32C             >Current_HP      defl  $ - $E000             // used to set HP once!
1697+ E32C             >
1697+ E32C             >//              ______________________________________________________________________
1697+ E32C             >//              Dictionary part
1697+ E32C             >
1697+ E32C             >                org     Dict_Ptr
1697+ 6940             >
1697+ 6940 2A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1697+ 6942             >
1697+ 6942             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1697+ 6942 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1697+ 6942 ~           >
1697+ 6942 ~           >
1697+ 6942             >                endif           ; ok        // for other definitions it "points" the correct handler
1697+ 6942             >                // Use of "; ok" to suppress "warning[fwdref]"
1697+ 6942             >
1697+ 6942             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1698+ 6942 E1                           pop     hl                  // take TOS as index
1699+ 6943 29                           add     hl, hl              // as cells
1700+ 6944 39                           add     hl, sp              // from Stack Pointer
1701+ 6945 7E                           ld      a, (hl)             // replace TOS
1702+ 6946 23                           inc     hl
1703+ 6947 66                           ld      h, (hl)
1704+ 6948 6F                           ld      l, a
1705+ 6949 E5                           push    hl
1706+ 694A                              next
1706+ 694A DD E9       >                jp      (ix)
1707+ 694C
1708+ 694C
1709+ 694C              //  ______________________________________________________________________
1710+ 694C              //
1711+ 694C              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1712+ 694C              // picks the nth element from TOS
1713+ 694C              //              New_Def ROLL, "ROLL", is_code, is_normal
1714+ 694C              //              exx                     // we need all registers free
1715+ 694C              //              pop     hl              // number of cells to roll
1716+ 694C              //              ld      a, h
1717+ 694C              //              or       l
1718+ 694C              //              jr      z, Roll_Zero
1719+ 694C              //                  add     hl, hl              // number of bytes to move
1720+ 694C              //                  ld      b, h
1721+ 694C              //                  ld      c, l
1722+ 694C              //                  add     hl, sp          // address of n1
1723+ 694C              //                  ld      a, (hl)         // take n1 into a and a,
1724+ 694C              //                  inc     hl
1725+ 694C              //                  ex      af, af'
1726+ 694C              //                  ld      a, (hl)         // take n1 into a and a,
1727+ 694C              //                  ld      d, h
1728+ 694C              //                  ld      e, l
1729+ 694C              //                  dec     hl
1730+ 694C              //                  dec     hl
1731+ 694C              //                  lddr
1732+ 694C              //                  ex      de, hl
1733+ 694C              //                  ld      (hl), a
1734+ 694C              //                  dec     hl
1735+ 694C              //                  ex      af, af'
1736+ 694C              //                  ld      (hl), a
1737+ 694C              //Roll_Zero:
1738+ 694C              //              exx
1739+ 694C              //              next
1740+ 694C
1741+ 694C
1742+ 694C              //  ______________________________________________________________________
1743+ 694C              //
1744+ 694C              // 2over        d1 d2 -- d1 d2 d1
1745+ 694C              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1746+ 694C              // copy the second double of stack and put on top.
1747+ 694C                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1747+ 694C             >
1747+ 694C             >Dict_Ptr        defl    $
1747+ 694C             >
1747+ 694C             >//              ______________________________________________________________________
1747+ 694C             >//              Heap part
1747+ 694C             >
1747+ 694C             >
1747+ 694C             >                org     (Heap_Ptr & $1FFF) + $E000
1747+ E32C             >
1747+ E32C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1747+ E32C             >Latest_Definition defl  Heap_Ptr
1747+ E32C             >
1747+ E32C             >                // dummy db directives used to calculate length of namec
1747+ E32C 32 4F 56 45 >                db      "2OVER"
1747+ E330 52          >
1747+ E331             >len_NFA         defl    $ - temp_NFA
1747+ E331             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1747+ E32C             >
1747+ E32C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1747+ E32D 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1747+ E331 52          >
1747+ E332             >                org     $-1                 // alter last byte of Name just above to set
1747+ E331 D2          >                db      {b $} | END_BIT     // msb as name end
1747+ E332             >
1747+ E332 23 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1747+ E334             >Prev_Ptr        defl    Heap_Ptr
1747+ E334             >
1747+ E334             >mirror_Ptr      defl    $
1747+ E334             >
1747+ E334 4E 69       >                dw      Dict_Ptr + 2        // xt
1747+ E336             >Heap_Ptr        defl    $ - $E000           // save current HP
1747+ E336             >
1747+ E336             >Current_HP      defl  $ - $E000             // used to set HP once!
1747+ E336             >
1747+ E336             >//              ______________________________________________________________________
1747+ E336             >//              Dictionary part
1747+ E336             >
1747+ E336             >                org     Dict_Ptr
1747+ 694C             >
1747+ 694C 34 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1747+ 694E             >
1747+ 694E             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1747+ 694E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1747+ 694E ~           >
1747+ 694E ~           >
1747+ 694E             >                endif           ; ok        // for other definitions it "points" the correct handler
1747+ 694E             >                // Use of "; ok" to suppress "warning[fwdref]"
1747+ 694E             >
1747+ 694E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1748+ 694E D9                           exx
1749+ 694F 21 07 00                     ld      hl, 7
1750+ 6952 39                           add     hl, sp
1751+ 6953 56                           ld      d, (hl)
1752+ 6954 2B                           dec     hl
1753+ 6955 5E                           ld      e, (hl)             // d1-L
1754+ 6956 D5                           push    de
1755+ 6957 2B                           dec     hl
1756+ 6958 56                           ld      d, (hl)
1757+ 6959 2B                           dec     hl
1758+ 695A 5E                           ld      e, (hl)             // d1-H
1759+ 695B D5                           push    de
1760+ 695C D9                           exx
1761+ 695D                              next
1761+ 695D DD E9       >                jp      (ix)
1762+ 695F
1763+ 695F              //  ______________________________________________________________________
1764+ 695F              //
1765+ 695F              // 2drop        d --
1766+ 695F              //              n1 n2 --
1767+ 695F              // drops the top double from stack
1768+ 695F                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1768+ 695F             >
1768+ 695F             >Dict_Ptr        defl    $
1768+ 695F             >
1768+ 695F             >//              ______________________________________________________________________
1768+ 695F             >//              Heap part
1768+ 695F             >
1768+ 695F             >
1768+ 695F             >                org     (Heap_Ptr & $1FFF) + $E000
1768+ E336             >
1768+ E336             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1768+ E336             >Latest_Definition defl  Heap_Ptr
1768+ E336             >
1768+ E336             >                // dummy db directives used to calculate length of namec
1768+ E336 32 44 52 4F >                db      "2DROP"
1768+ E33A 50          >
1768+ E33B             >len_NFA         defl    $ - temp_NFA
1768+ E33B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1768+ E336             >
1768+ E336 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1768+ E337 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1768+ E33B 50          >
1768+ E33C             >                org     $-1                 // alter last byte of Name just above to set
1768+ E33B D0          >                db      {b $} | END_BIT     // msb as name end
1768+ E33C             >
1768+ E33C 2C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1768+ E33E             >Prev_Ptr        defl    Heap_Ptr
1768+ E33E             >
1768+ E33E             >mirror_Ptr      defl    $
1768+ E33E             >
1768+ E33E 61 69       >                dw      Dict_Ptr + 2        // xt
1768+ E340             >Heap_Ptr        defl    $ - $E000           // save current HP
1768+ E340             >
1768+ E340             >Current_HP      defl  $ - $E000             // used to set HP once!
1768+ E340             >
1768+ E340             >//              ______________________________________________________________________
1768+ E340             >//              Dictionary part
1768+ E340             >
1768+ E340             >                org     Dict_Ptr
1768+ 695F             >
1768+ 695F 3E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1768+ 6961             >
1768+ 6961             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1768+ 6961 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1768+ 6961 ~           >
1768+ 6961 ~           >
1768+ 6961             >                endif           ; ok        // for other definitions it "points" the correct handler
1768+ 6961             >                // Use of "; ok" to suppress "warning[fwdref]"
1768+ 6961             >
1768+ 6961             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1769+ 6961 E1                           pop     hl
1770+ 6962 E1                           pop     hl
1771+ 6963                              next
1771+ 6963 DD E9       >                jp      (ix)
1772+ 6965
1773+ 6965              //  ______________________________________________________________________
1774+ 6965              //
1775+ 6965              // 2nip         d1 d2 -- d2
1776+ 6965              //              n1 n2 n3 n4 -- n3 n4
1777+ 6965              // drops the second double on the stack
1778+ 6965              //              New_Def TWO_NIP, 4, "2nip"
1779+ 6965              //              ...
1780+ 6965
1781+ 6965              //  ______________________________________________________________________
1782+ 6965              //
1783+ 6965              // 2tuck         d1 d2 -- d2 d1 d2
1784+ 6965              // copy the top element after the second.
1785+ 6965              //              New_Def TWO_TUCK, 5, "2tuck"
1786+ 6965              //              ...
1787+ 6965
1788+ 6965              //  ______________________________________________________________________
1789+ 6965              //
1790+ 6965              // 2swap         d1 d2 -- d2 d1
1791+ 6965              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1792+ 6965              // swaps the two doubles on top of stack
1793+ 6965                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1793+ 6965             >
1793+ 6965             >Dict_Ptr        defl    $
1793+ 6965             >
1793+ 6965             >//              ______________________________________________________________________
1793+ 6965             >//              Heap part
1793+ 6965             >
1793+ 6965             >
1793+ 6965             >                org     (Heap_Ptr & $1FFF) + $E000
1793+ E340             >
1793+ E340             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1793+ E340             >Latest_Definition defl  Heap_Ptr
1793+ E340             >
1793+ E340             >                // dummy db directives used to calculate length of namec
1793+ E340 32 53 57 41 >                db      "2SWAP"
1793+ E344 50          >
1793+ E345             >len_NFA         defl    $ - temp_NFA
1793+ E345             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1793+ E340             >
1793+ E340 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1793+ E341 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1793+ E345 50          >
1793+ E346             >                org     $-1                 // alter last byte of Name just above to set
1793+ E345 D0          >                db      {b $} | END_BIT     // msb as name end
1793+ E346             >
1793+ E346 36 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1793+ E348             >Prev_Ptr        defl    Heap_Ptr
1793+ E348             >
1793+ E348             >mirror_Ptr      defl    $
1793+ E348             >
1793+ E348 67 69       >                dw      Dict_Ptr + 2        // xt
1793+ E34A             >Heap_Ptr        defl    $ - $E000           // save current HP
1793+ E34A             >
1793+ E34A             >Current_HP      defl  $ - $E000             // used to set HP once!
1793+ E34A             >
1793+ E34A             >//              ______________________________________________________________________
1793+ E34A             >//              Dictionary part
1793+ E34A             >
1793+ E34A             >                org     Dict_Ptr
1793+ 6965             >
1793+ 6965 48 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1793+ 6967             >
1793+ 6967             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1793+ 6967 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1793+ 6967 ~           >
1793+ 6967 ~           >
1793+ 6967             >                endif           ; ok        // for other definitions it "points" the correct handler
1793+ 6967             >                // Use of "; ok" to suppress "warning[fwdref]"
1793+ 6967             >
1793+ 6967             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1794+ 6967 D9                           exx
1795+ 6968 F1                           pop     af                  //   d2-H
1796+ 6969 E1                           pop     hl                  // < d2-L
1797+ 696A D1                           pop     de                  // < d1-H
1798+ 696B E3                           ex      (sp), hl            // < d1-L > d2-L
1799+ 696C F5                           push    af                  // > d2-H
1800+ 696D E5                           push    hl                  // > d1-L
1801+ 696E D5                           push    de
1802+ 696F D9                           exx
1803+ 6970                              next
1803+ 6970 DD E9       >                jp      (ix)
1804+ 6972
1805+ 6972              //  ______________________________________________________________________
1806+ 6972              //
1807+ 6972              // 2dup         d -- d d
1808+ 6972              //              n1 n2 -- n1 n2 n1 n2
1809+ 6972              // duplicates the top double of stack
1810+ 6972                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1810+ 6972             >
1810+ 6972             >Dict_Ptr        defl    $
1810+ 6972             >
1810+ 6972             >//              ______________________________________________________________________
1810+ 6972             >//              Heap part
1810+ 6972             >
1810+ 6972             >
1810+ 6972             >                org     (Heap_Ptr & $1FFF) + $E000
1810+ E34A             >
1810+ E34A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1810+ E34A             >Latest_Definition defl  Heap_Ptr
1810+ E34A             >
1810+ E34A             >                // dummy db directives used to calculate length of namec
1810+ E34A 32 44 55 50 >                db      "2DUP"
1810+ E34E             >len_NFA         defl    $ - temp_NFA
1810+ E34E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1810+ E34A             >
1810+ E34A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1810+ E34B 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1810+ E34F             >                org     $-1                 // alter last byte of Name just above to set
1810+ E34E D0          >                db      {b $} | END_BIT     // msb as name end
1810+ E34F             >
1810+ E34F 40 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1810+ E351             >Prev_Ptr        defl    Heap_Ptr
1810+ E351             >
1810+ E351             >mirror_Ptr      defl    $
1810+ E351             >
1810+ E351 74 69       >                dw      Dict_Ptr + 2        // xt
1810+ E353             >Heap_Ptr        defl    $ - $E000           // save current HP
1810+ E353             >
1810+ E353             >Current_HP      defl  $ - $E000             // used to set HP once!
1810+ E353             >
1810+ E353             >//              ______________________________________________________________________
1810+ E353             >//              Dictionary part
1810+ E353             >
1810+ E353             >                org     Dict_Ptr
1810+ 6972             >
1810+ 6972 51 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1810+ 6974             >
1810+ 6974             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1810+ 6974 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1810+ 6974 ~           >
1810+ 6974 ~           >
1810+ 6974             >                endif           ; ok        // for other definitions it "points" the correct handler
1810+ 6974             >                // Use of "; ok" to suppress "warning[fwdref]"
1810+ 6974             >
1810+ 6974             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1811+ 6974 E1                           pop     hl                  // < d-H
1812+ 6975 F1                           pop     af                  // < d-L
1813+ 6976 F5                           push    af                  // < d-L
1814+ 6977 E5                           push    hl                  // > d-H
1815+ 6978 F5                           push    af                  // > d-L
1816+ 6979 E5                           push    hl                  // > d-H
1817+ 697A                              next
1817+ 697A DD E9       >                jp      (ix)
1818+ 697C
1819+ 697C              //  ______________________________________________________________________
1820+ 697C              //
1821+ 697C              // 2rot         d1 d2 d3 -- d2 d3 d1
1822+ 697C              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1823+ 697C              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1824+ 697C              // and putting it on top. The other two are shifted down one place.
1825+ 697C              //              New_Def TWO?ROT, 4, "2rot"
1826+ 697C              //              ...
1827+ 697C              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1828+ 697C              //
1829+ 697C              //      d3  |d2  |d1  |
1830+ 697C              //      h l |h l |h l |
1831+ 697C              // SP   LHED|LHED|LHED|
1832+ 697C              // SP  +0123|4567|89ab|
1833+ 697C              //              ld      hl, $000B
1834+ 697C              //              add     hl, sp
1835+ 697C              //              ld      d, (hl)
1836+ 697C              //              dec     hl
1837+ 697C              //              ld      e, (hl)
1838+ 697C              //              dec     hl
1839+ 697C              //              push    de
1840+ 697C              //              ld      d, (hl)
1841+ 697C              //              dec     hl
1842+ 697C              //              ld      e, (hl)
1843+ 697C              //              dec     hl
1844+ 697C              //              push    de
1845+ 697C
1846+ 697C              //      d1  |d3  |d2  |d1  |
1847+ 697C              //      h l |h l |h l |h l |
1848+ 697C              // SP   LHED|LHED|LHED|LHED|
1849+ 697C              // SP       +0123|4567|89ab|
1850+ 697C
1851+ 697C              //              ld      d, h
1852+ 697C              //              ld      e, l
1853+ 697C              //              inc     de
1854+ 697C              //              inc     de
1855+ 697C              //              inc     de
1856+ 697C              //              inc     de
1857+ 697C              //              push    bc
1858+ 697C              //              ld      bc, $000C
1859+ 697C              //              lddr
1860+ 697C              //              pop     bc
1861+ 697C              //              pop     de
1862+ 697C              //              pop     de
1863+ 697C              //
1864+ 697C              //              next
1865+ 697C
1866+ 697C
1867+ 697C              //  ______________________________________________________________________
1868+ 697C              //
1869+ 697C              // +!           n a --
1870+ 697C              // Sums to the content of address a the number n.
1871+ 697C              // It is the same of  a @ n + a !
1872+ 697C                              New_Def PLUSSTORE, "+!", is_code, is_normal
1872+ 697C             >
1872+ 697C             >Dict_Ptr        defl    $
1872+ 697C             >
1872+ 697C             >//              ______________________________________________________________________
1872+ 697C             >//              Heap part
1872+ 697C             >
1872+ 697C             >
1872+ 697C             >                org     (Heap_Ptr & $1FFF) + $E000
1872+ E353             >
1872+ E353             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1872+ E353             >Latest_Definition defl  Heap_Ptr
1872+ E353             >
1872+ E353             >                // dummy db directives used to calculate length of namec
1872+ E353 2B 21       >                db      "+!"
1872+ E355             >len_NFA         defl    $ - temp_NFA
1872+ E355             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1872+ E353             >
1872+ E353 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1872+ E354 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1872+ E356             >                org     $-1                 // alter last byte of Name just above to set
1872+ E355 A1          >                db      {b $} | END_BIT     // msb as name end
1872+ E356             >
1872+ E356 4A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1872+ E358             >Prev_Ptr        defl    Heap_Ptr
1872+ E358             >
1872+ E358             >mirror_Ptr      defl    $
1872+ E358             >
1872+ E358 7E 69       >                dw      Dict_Ptr + 2        // xt
1872+ E35A             >Heap_Ptr        defl    $ - $E000           // save current HP
1872+ E35A             >
1872+ E35A             >Current_HP      defl  $ - $E000             // used to set HP once!
1872+ E35A             >
1872+ E35A             >//              ______________________________________________________________________
1872+ E35A             >//              Dictionary part
1872+ E35A             >
1872+ E35A             >                org     Dict_Ptr
1872+ 697C             >
1872+ 697C 58 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1872+ 697E             >
1872+ 697E             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1872+ 697E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1872+ 697E ~           >
1872+ 697E ~           >
1872+ 697E             >                endif           ; ok        // for other definitions it "points" the correct handler
1872+ 697E             >                // Use of "; ok" to suppress "warning[fwdref]"
1872+ 697E             >
1872+ 697E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1873+ 697E D9                           exx
1874+ 697F E1                           pop     hl                  // hl is the address
1875+ 6980 D1                           pop     de                  // de is the number
1876+ 6981 7E                           ld      a, (hl)
1877+ 6982 83                           add     e
1878+ 6983 77                           ld      (hl), a
1879+ 6984 23                           inc     hl
1880+ 6985 7E                           ld      a, (hl)
1881+ 6986 8A                           adc     d
1882+ 6987 77                           ld      (hl), a
1883+ 6988 D9                           exx
1884+ 6989                              next
1884+ 6989 DD E9       >                jp      (ix)
1885+ 698B
1886+ 698B              //  ______________________________________________________________________
1887+ 698B              //
1888+ 698B              // toggle       a n --
1889+ 698B              // Complements (xor) the byte at addrress  a  with the model n.
1890+ 698B                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1890+ 698B             >
1890+ 698B             >Dict_Ptr        defl    $
1890+ 698B             >
1890+ 698B             >//              ______________________________________________________________________
1890+ 698B             >//              Heap part
1890+ 698B             >
1890+ 698B             >
1890+ 698B             >                org     (Heap_Ptr & $1FFF) + $E000
1890+ E35A             >
1890+ E35A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1890+ E35A             >Latest_Definition defl  Heap_Ptr
1890+ E35A             >
1890+ E35A             >                // dummy db directives used to calculate length of namec
1890+ E35A 54 4F 47 47 >                db      "TOGGLE"
1890+ E35E 4C 45       >
1890+ E360             >len_NFA         defl    $ - temp_NFA
1890+ E360             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1890+ E35A             >
1890+ E35A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1890+ E35B 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1890+ E35F 4C 45       >
1890+ E361             >                org     $-1                 // alter last byte of Name just above to set
1890+ E360 C5          >                db      {b $} | END_BIT     // msb as name end
1890+ E361             >
1890+ E361 53 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1890+ E363             >Prev_Ptr        defl    Heap_Ptr
1890+ E363             >
1890+ E363             >mirror_Ptr      defl    $
1890+ E363             >
1890+ E363 8D 69       >                dw      Dict_Ptr + 2        // xt
1890+ E365             >Heap_Ptr        defl    $ - $E000           // save current HP
1890+ E365             >
1890+ E365             >Current_HP      defl  $ - $E000             // used to set HP once!
1890+ E365             >
1890+ E365             >//              ______________________________________________________________________
1890+ E365             >//              Dictionary part
1890+ E365             >
1890+ E365             >                org     Dict_Ptr
1890+ 698B             >
1890+ 698B 63 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1890+ 698D             >
1890+ 698D             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1890+ 698D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1890+ 698D ~           >
1890+ 698D ~           >
1890+ 698D             >                endif           ; ok        // for other definitions it "points" the correct handler
1890+ 698D             >                // Use of "; ok" to suppress "warning[fwdref]"
1890+ 698D             >
1890+ 698D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1891+ 698D E1                           pop     hl
1892+ 698E 7D                           ld      a, l
1893+ 698F E1                           pop     hl
1894+ 6990 AE                           xor     (hl)
1895+ 6991 77                           ld      (hl), a
1896+ 6992
1897+ 6992                              next
1897+ 6992 DD E9       >                jp      (ix)
1898+ 6994
1899+ 6994              //  ______________________________________________________________________
1900+ 6994              //
1901+ 6994              // @            a -- n
1902+ 6994              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1903+ 6994                              New_Def FETCH, "@", is_code, is_normal
1903+ 6994             >
1903+ 6994             >Dict_Ptr        defl    $
1903+ 6994             >
1903+ 6994             >//              ______________________________________________________________________
1903+ 6994             >//              Heap part
1903+ 6994             >
1903+ 6994             >
1903+ 6994             >                org     (Heap_Ptr & $1FFF) + $E000
1903+ E365             >
1903+ E365             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1903+ E365             >Latest_Definition defl  Heap_Ptr
1903+ E365             >
1903+ E365             >                // dummy db directives used to calculate length of namec
1903+ E365 40          >                db      "@"
1903+ E366             >len_NFA         defl    $ - temp_NFA
1903+ E366             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1903+ E365             >
1903+ E365 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1903+ E366 40          >                db      "@"               // name string in 7-bit ascii, but
1903+ E367             >                org     $-1                 // alter last byte of Name just above to set
1903+ E366 C0          >                db      {b $} | END_BIT     // msb as name end
1903+ E367             >
1903+ E367 5A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1903+ E369             >Prev_Ptr        defl    Heap_Ptr
1903+ E369             >
1903+ E369             >mirror_Ptr      defl    $
1903+ E369             >
1903+ E369 96 69       >                dw      Dict_Ptr + 2        // xt
1903+ E36B             >Heap_Ptr        defl    $ - $E000           // save current HP
1903+ E36B             >
1903+ E36B             >Current_HP      defl  $ - $E000             // used to set HP once!
1903+ E36B             >
1903+ E36B             >//              ______________________________________________________________________
1903+ E36B             >//              Dictionary part
1903+ E36B             >
1903+ E36B             >                org     Dict_Ptr
1903+ 6994             >
1903+ 6994 69 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1903+ 6996             >
1903+ 6996             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1903+ 6996 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1903+ 6996 ~           >
1903+ 6996 ~           >
1903+ 6996             >                endif           ; ok        // for other definitions it "points" the correct handler
1903+ 6996             >                // Use of "; ok" to suppress "warning[fwdref]"
1903+ 6996             >
1903+ 6996             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1904+ 6996 E1                           pop     hl
1905+ 6997 7E                           ld      a, (hl)             // low-byte
1906+ 6998 23                           inc     hl
1907+ 6999 66                           ld      h, (hl)             // high-byte
1908+ 699A 6F                           ld      l, a
1909+ 699B E5                           push    hl
1910+ 699C                              next
1910+ 699C DD E9       >                jp      (ix)
1911+ 699E
1912+ 699E              //  ______________________________________________________________________
1913+ 699E              //
1914+ 699E              // !            n a --
1915+ 699E              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1916+ 699E                              New_Def STORE, "!", is_code, is_normal
1916+ 699E             >
1916+ 699E             >Dict_Ptr        defl    $
1916+ 699E             >
1916+ 699E             >//              ______________________________________________________________________
1916+ 699E             >//              Heap part
1916+ 699E             >
1916+ 699E             >
1916+ 699E             >                org     (Heap_Ptr & $1FFF) + $E000
1916+ E36B             >
1916+ E36B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1916+ E36B             >Latest_Definition defl  Heap_Ptr
1916+ E36B             >
1916+ E36B             >                // dummy db directives used to calculate length of namec
1916+ E36B 21          >                db      "!"
1916+ E36C             >len_NFA         defl    $ - temp_NFA
1916+ E36C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1916+ E36B             >
1916+ E36B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1916+ E36C 21          >                db      "!"               // name string in 7-bit ascii, but
1916+ E36D             >                org     $-1                 // alter last byte of Name just above to set
1916+ E36C A1          >                db      {b $} | END_BIT     // msb as name end
1916+ E36D             >
1916+ E36D 65 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1916+ E36F             >Prev_Ptr        defl    Heap_Ptr
1916+ E36F             >
1916+ E36F             >mirror_Ptr      defl    $
1916+ E36F             >
1916+ E36F A0 69       >                dw      Dict_Ptr + 2        // xt
1916+ E371             >Heap_Ptr        defl    $ - $E000           // save current HP
1916+ E371             >
1916+ E371             >Current_HP      defl  $ - $E000             // used to set HP once!
1916+ E371             >
1916+ E371             >//              ______________________________________________________________________
1916+ E371             >//              Dictionary part
1916+ E371             >
1916+ E371             >                org     Dict_Ptr
1916+ 699E             >
1916+ 699E 6F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1916+ 69A0             >
1916+ 69A0             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1916+ 69A0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1916+ 69A0 ~           >
1916+ 69A0 ~           >
1916+ 69A0             >                endif           ; ok        // for other definitions it "points" the correct handler
1916+ 69A0             >                // Use of "; ok" to suppress "warning[fwdref]"
1916+ 69A0             >
1916+ 69A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1917+ 69A0 D9                           exx
1918+ 69A1 E1                           pop     hl                  // address
1919+ 69A2 D1                           pop     de                  // < n
1920+ 69A3 73                           ld      (hl), e             // low-byte
1921+ 69A4 23                           inc     hl
1922+ 69A5 72                           ld      (hl), d             // high-byte
1923+ 69A6 D9                           exx
1924+ 69A7                              next
1924+ 69A7 DD E9       >                jp      (ix)
1925+ 69A9
1926+ 69A9              //  ______________________________________________________________________
1927+ 69A9              //
1928+ 69A9              // c@           a -- c
1929+ 69A9              // fetch a character n from address a
1930+ 69A9                              New_Def CFETCH, "C@", is_code, is_normal
1930+ 69A9             >
1930+ 69A9             >Dict_Ptr        defl    $
1930+ 69A9             >
1930+ 69A9             >//              ______________________________________________________________________
1930+ 69A9             >//              Heap part
1930+ 69A9             >
1930+ 69A9             >
1930+ 69A9             >                org     (Heap_Ptr & $1FFF) + $E000
1930+ E371             >
1930+ E371             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1930+ E371             >Latest_Definition defl  Heap_Ptr
1930+ E371             >
1930+ E371             >                // dummy db directives used to calculate length of namec
1930+ E371 43 40       >                db      "C@"
1930+ E373             >len_NFA         defl    $ - temp_NFA
1930+ E373             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1930+ E371             >
1930+ E371 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1930+ E372 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1930+ E374             >                org     $-1                 // alter last byte of Name just above to set
1930+ E373 C0          >                db      {b $} | END_BIT     // msb as name end
1930+ E374             >
1930+ E374 6B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1930+ E376             >Prev_Ptr        defl    Heap_Ptr
1930+ E376             >
1930+ E376             >mirror_Ptr      defl    $
1930+ E376             >
1930+ E376 AB 69       >                dw      Dict_Ptr + 2        // xt
1930+ E378             >Heap_Ptr        defl    $ - $E000           // save current HP
1930+ E378             >
1930+ E378             >Current_HP      defl  $ - $E000             // used to set HP once!
1930+ E378             >
1930+ E378             >//              ______________________________________________________________________
1930+ E378             >//              Dictionary part
1930+ E378             >
1930+ E378             >                org     Dict_Ptr
1930+ 69A9             >
1930+ 69A9 76 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1930+ 69AB             >
1930+ 69AB             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1930+ 69AB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1930+ 69AB ~           >
1930+ 69AB ~           >
1930+ 69AB             >                endif           ; ok        // for other definitions it "points" the correct handler
1930+ 69AB             >                // Use of "; ok" to suppress "warning[fwdref]"
1930+ 69AB             >
1930+ 69AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1931+ 69AB E1                           pop     hl
1932+ 69AC 6E                           ld      l, (hl)             // low-byte
1933+ 69AD 26 00                        ld      h, 0
1934+ 69AF
1935+ 69AF                              psh1
1935+ 69AF E5          >                push    hl
1935+ 69B0 DD E9       >                jp      (ix)
1936+ 69B2
1937+ 69B2              //  ______________________________________________________________________
1938+ 69B2              //
1939+ 69B2              // c!           c a --
1940+ 69B2              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1941+ 69B2                              New_Def CSTORE, "C!", is_code, is_normal
1941+ 69B2             >
1941+ 69B2             >Dict_Ptr        defl    $
1941+ 69B2             >
1941+ 69B2             >//              ______________________________________________________________________
1941+ 69B2             >//              Heap part
1941+ 69B2             >
1941+ 69B2             >
1941+ 69B2             >                org     (Heap_Ptr & $1FFF) + $E000
1941+ E378             >
1941+ E378             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1941+ E378             >Latest_Definition defl  Heap_Ptr
1941+ E378             >
1941+ E378             >                // dummy db directives used to calculate length of namec
1941+ E378 43 21       >                db      "C!"
1941+ E37A             >len_NFA         defl    $ - temp_NFA
1941+ E37A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1941+ E378             >
1941+ E378 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1941+ E379 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1941+ E37B             >                org     $-1                 // alter last byte of Name just above to set
1941+ E37A A1          >                db      {b $} | END_BIT     // msb as name end
1941+ E37B             >
1941+ E37B 71 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1941+ E37D             >Prev_Ptr        defl    Heap_Ptr
1941+ E37D             >
1941+ E37D             >mirror_Ptr      defl    $
1941+ E37D             >
1941+ E37D B4 69       >                dw      Dict_Ptr + 2        // xt
1941+ E37F             >Heap_Ptr        defl    $ - $E000           // save current HP
1941+ E37F             >
1941+ E37F             >Current_HP      defl  $ - $E000             // used to set HP once!
1941+ E37F             >
1941+ E37F             >//              ______________________________________________________________________
1941+ E37F             >//              Dictionary part
1941+ E37F             >
1941+ E37F             >                org     Dict_Ptr
1941+ 69B2             >
1941+ 69B2 7D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1941+ 69B4             >
1941+ 69B4             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1941+ 69B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1941+ 69B4 ~           >
1941+ 69B4 ~           >
1941+ 69B4             >                endif           ; ok        // for other definitions it "points" the correct handler
1941+ 69B4             >                // Use of "; ok" to suppress "warning[fwdref]"
1941+ 69B4             >
1941+ 69B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1942+ 69B4 D9                           exx
1943+ 69B5 E1                           pop     hl                  // < address
1944+ 69B6 D1                           pop     de
1945+ 69B7 73                           ld      (hl), e             // low-byte
1946+ 69B8 D9                           exx
1947+ 69B9                              next
1947+ 69B9 DD E9       >                jp      (ix)
1948+ 69BB
1949+ 69BB              //  ______________________________________________________________________
1950+ 69BB              //
1951+ 69BB              // 2@           a -- d
1952+ 69BB              // fetch a 32 bits number d from address a and leaves it on top of the
1953+ 69BB              // stack as two single numbers, high part as top of the stack.
1954+ 69BB              // A double number is normally kept in CPU registers as HLDE.
1955+ 69BB              // On stack a double number is treated as two single numbers
1956+ 69BB              // where BC is on the top of the stack and HL is the second from top,
1957+ 69BB              // so the sign of the number can be checked on top of stack
1958+ 69BB              // and in the stack memory it appears as LHED.
1959+ 69BB                              New_Def TWO_FETCH, "2@", is_code, is_normal
1959+ 69BB             >
1959+ 69BB             >Dict_Ptr        defl    $
1959+ 69BB             >
1959+ 69BB             >//              ______________________________________________________________________
1959+ 69BB             >//              Heap part
1959+ 69BB             >
1959+ 69BB             >
1959+ 69BB             >                org     (Heap_Ptr & $1FFF) + $E000
1959+ E37F             >
1959+ E37F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1959+ E37F             >Latest_Definition defl  Heap_Ptr
1959+ E37F             >
1959+ E37F             >                // dummy db directives used to calculate length of namec
1959+ E37F 32 40       >                db      "2@"
1959+ E381             >len_NFA         defl    $ - temp_NFA
1959+ E381             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1959+ E37F             >
1959+ E37F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1959+ E380 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1959+ E382             >                org     $-1                 // alter last byte of Name just above to set
1959+ E381 C0          >                db      {b $} | END_BIT     // msb as name end
1959+ E382             >
1959+ E382 78 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1959+ E384             >Prev_Ptr        defl    Heap_Ptr
1959+ E384             >
1959+ E384             >mirror_Ptr      defl    $
1959+ E384             >
1959+ E384 BD 69       >                dw      Dict_Ptr + 2        // xt
1959+ E386             >Heap_Ptr        defl    $ - $E000           // save current HP
1959+ E386             >
1959+ E386             >Current_HP      defl  $ - $E000             // used to set HP once!
1959+ E386             >
1959+ E386             >//              ______________________________________________________________________
1959+ E386             >//              Dictionary part
1959+ E386             >
1959+ E386             >                org     Dict_Ptr
1959+ 69BB             >
1959+ 69BB 84 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1959+ 69BD             >
1959+ 69BD             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1959+ 69BD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1959+ 69BD ~           >
1959+ 69BD ~           >
1959+ 69BD             >                endif           ; ok        // for other definitions it "points" the correct handler
1959+ 69BD             >                // Use of "; ok" to suppress "warning[fwdref]"
1959+ 69BD             >
1959+ 69BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1960+ 69BD D9                           exx
1961+ 69BE E1                           pop     hl                  // address
1962+ 69BF 5E                           ld      e, (hl)             // low-byte
1963+ 69C0 23                           inc     hl
1964+ 69C1 56                           ld      d, (hl)             // high-byte
1965+ 69C2 23                           inc     hl
1966+ 69C3 7E                           ld      a, (hl)             // low-byte
1967+ 69C4 23                           inc     hl
1968+ 69C5 66                           ld      h, (hl)             // high-byte
1969+ 69C6 6F                           ld      l, a
1970+ 69C7 E5                           push    hl
1971+ 69C8 D5                           push    de
1972+ 69C9 D9                           exx
1973+ 69CA                              next
1973+ 69CA DD E9       >                jp      (ix)
1974+ 69CC
1975+ 69CC              //  ______________________________________________________________________
1976+ 69CC              //
1977+ 69CC              // 2!           d a --
1978+ 69CC              // stores a 32 bits number d from address a and leaves it on top of the
1979+ 69CC              // stack as two single numbers, high part as top of the stack.
1980+ 69CC              // A double number is normally kept in CPU registers as HLDE.
1981+ 69CC              // On stack a double number is treated as two single numbers
1982+ 69CC              // where BC is on the top of the stack and HL is the second from top,
1983+ 69CC              // so the sign of the number can be checked on top of stack
1984+ 69CC              // and in the stack memory it appears as LHED.
1985+ 69CC                              New_Def TWO_STORE, "2!", is_code, is_normal
1985+ 69CC             >
1985+ 69CC             >Dict_Ptr        defl    $
1985+ 69CC             >
1985+ 69CC             >//              ______________________________________________________________________
1985+ 69CC             >//              Heap part
1985+ 69CC             >
1985+ 69CC             >
1985+ 69CC             >                org     (Heap_Ptr & $1FFF) + $E000
1985+ E386             >
1985+ E386             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1985+ E386             >Latest_Definition defl  Heap_Ptr
1985+ E386             >
1985+ E386             >                // dummy db directives used to calculate length of namec
1985+ E386 32 21       >                db      "2!"
1985+ E388             >len_NFA         defl    $ - temp_NFA
1985+ E388             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1985+ E386             >
1985+ E386 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1985+ E387 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1985+ E389             >                org     $-1                 // alter last byte of Name just above to set
1985+ E388 A1          >                db      {b $} | END_BIT     // msb as name end
1985+ E389             >
1985+ E389 7F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1985+ E38B             >Prev_Ptr        defl    Heap_Ptr
1985+ E38B             >
1985+ E38B             >mirror_Ptr      defl    $
1985+ E38B             >
1985+ E38B CE 69       >                dw      Dict_Ptr + 2        // xt
1985+ E38D             >Heap_Ptr        defl    $ - $E000           // save current HP
1985+ E38D             >
1985+ E38D             >Current_HP      defl  $ - $E000             // used to set HP once!
1985+ E38D             >
1985+ E38D             >//              ______________________________________________________________________
1985+ E38D             >//              Dictionary part
1985+ E38D             >
1985+ E38D             >                org     Dict_Ptr
1985+ 69CC             >
1985+ 69CC 8B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1985+ 69CE             >
1985+ 69CE             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1985+ 69CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1985+ 69CE ~           >
1985+ 69CE ~           >
1985+ 69CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1985+ 69CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1985+ 69CE             >
1985+ 69CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1986+ 69CE D9                           exx
1987+ 69CF E1                           pop     hl                  // address
1988+ 69D0 C1                           pop     bc                  // < high-part
1989+ 69D1 D1                           pop     de                  // < low-part > Instruction Pointer
1990+ 69D2 71                           ld      (hl), c
1991+ 69D3 23                           inc     hl
1992+ 69D4 70                           ld      (hl), b
1993+ 69D5 23                           inc     hl
1994+ 69D6 73                           ld      (hl), e
1995+ 69D7 23                           inc     hl
1996+ 69D8 72                           ld      (hl), d
1997+ 69D9 D9                           exx
1998+ 69DA                              next
1998+ 69DA DD E9       >                jp      (ix)
1999+ 69DC
2000+ 69DC              //  ______________________________________________________________________
2001+ 69DC              //
2002+ 69DC              // p@           a -- c
2003+ 69DC              // Read one byte from port a and leave the result on top of stack
2004+ 69DC                              New_Def PFETCH, "P@", is_code, is_normal
2004+ 69DC             >
2004+ 69DC             >Dict_Ptr        defl    $
2004+ 69DC             >
2004+ 69DC             >//              ______________________________________________________________________
2004+ 69DC             >//              Heap part
2004+ 69DC             >
2004+ 69DC             >
2004+ 69DC             >                org     (Heap_Ptr & $1FFF) + $E000
2004+ E38D             >
2004+ E38D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2004+ E38D             >Latest_Definition defl  Heap_Ptr
2004+ E38D             >
2004+ E38D             >                // dummy db directives used to calculate length of namec
2004+ E38D 50 40       >                db      "P@"
2004+ E38F             >len_NFA         defl    $ - temp_NFA
2004+ E38F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2004+ E38D             >
2004+ E38D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2004+ E38E 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2004+ E390             >                org     $-1                 // alter last byte of Name just above to set
2004+ E38F C0          >                db      {b $} | END_BIT     // msb as name end
2004+ E390             >
2004+ E390 86 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2004+ E392             >Prev_Ptr        defl    Heap_Ptr
2004+ E392             >
2004+ E392             >mirror_Ptr      defl    $
2004+ E392             >
2004+ E392 DE 69       >                dw      Dict_Ptr + 2        // xt
2004+ E394             >Heap_Ptr        defl    $ - $E000           // save current HP
2004+ E394             >
2004+ E394             >Current_HP      defl  $ - $E000             // used to set HP once!
2004+ E394             >
2004+ E394             >//              ______________________________________________________________________
2004+ E394             >//              Dictionary part
2004+ E394             >
2004+ E394             >                org     Dict_Ptr
2004+ 69DC             >
2004+ 69DC 92 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2004+ 69DE             >
2004+ 69DE             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2004+ 69DE ~           >                call    runcode ; ok        // for primitive definitions  actual code
2004+ 69DE ~           >
2004+ 69DE ~           >
2004+ 69DE             >                endif           ; ok        // for other definitions it "points" the correct handler
2004+ 69DE             >                // Use of "; ok" to suppress "warning[fwdref]"
2004+ 69DE             >
2004+ 69DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2005+ 69DE D9                           exx
2006+ 69DF C1                           pop     bc
2007+ 69E0 26 00                        ld      h, 0
2008+ 69E2 ED 68                        in      l, (c)
2009+ 69E4 E5                           push    hl
2010+ 69E5 D9                           exx
2011+ 69E6                              next
2011+ 69E6 DD E9       >                jp      (ix)
2012+ 69E8
2013+ 69E8              //  ______________________________________________________________________
2014+ 69E8              //
2015+ 69E8              // p!           c a --
2016+ 69E8              // Send one byte (top of stack) to port a
2017+ 69E8                              New_Def PSTORE, "P!", is_code, is_normal
2017+ 69E8             >
2017+ 69E8             >Dict_Ptr        defl    $
2017+ 69E8             >
2017+ 69E8             >//              ______________________________________________________________________
2017+ 69E8             >//              Heap part
2017+ 69E8             >
2017+ 69E8             >
2017+ 69E8             >                org     (Heap_Ptr & $1FFF) + $E000
2017+ E394             >
2017+ E394             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2017+ E394             >Latest_Definition defl  Heap_Ptr
2017+ E394             >
2017+ E394             >                // dummy db directives used to calculate length of namec
2017+ E394 50 21       >                db      "P!"
2017+ E396             >len_NFA         defl    $ - temp_NFA
2017+ E396             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2017+ E394             >
2017+ E394 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2017+ E395 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2017+ E397             >                org     $-1                 // alter last byte of Name just above to set
2017+ E396 A1          >                db      {b $} | END_BIT     // msb as name end
2017+ E397             >
2017+ E397 8D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2017+ E399             >Prev_Ptr        defl    Heap_Ptr
2017+ E399             >
2017+ E399             >mirror_Ptr      defl    $
2017+ E399             >
2017+ E399 EA 69       >                dw      Dict_Ptr + 2        // xt
2017+ E39B             >Heap_Ptr        defl    $ - $E000           // save current HP
2017+ E39B             >
2017+ E39B             >Current_HP      defl  $ - $E000             // used to set HP once!
2017+ E39B             >
2017+ E39B             >//              ______________________________________________________________________
2017+ E39B             >//              Dictionary part
2017+ E39B             >
2017+ E39B             >                org     Dict_Ptr
2017+ 69E8             >
2017+ 69E8 99 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2017+ 69EA             >
2017+ 69EA             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2017+ 69EA ~           >                call    runcode ; ok        // for primitive definitions  actual code
2017+ 69EA ~           >
2017+ 69EA ~           >
2017+ 69EA             >                endif           ; ok        // for other definitions it "points" the correct handler
2017+ 69EA             >                // Use of "; ok" to suppress "warning[fwdref]"
2017+ 69EA             >
2017+ 69EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2018+ 69EA D9                           exx
2019+ 69EB C1                           pop     bc
2020+ 69EC E1                           pop     hl                  // < c
2021+ 69ED ED 69                        out     (c), l              // low-byte
2022+ 69EF D9                           exx
2023+ 69F0                              next
2023+ 69F0 DD E9       >                jp      (ix)
2024+ 69F2
2025+ 69F2
2026+ 69F2              //  ______________________________________________________________________
2027+ 69F2              //
2028+ 69F2              // 2*           n1 -- n2
2029+ 69F2              // doubles the number at top of stack
2030+ 69F2                              New_Def TWO_MUL, "2*", is_code, is_normal
2030+ 69F2             >
2030+ 69F2             >Dict_Ptr        defl    $
2030+ 69F2             >
2030+ 69F2             >//              ______________________________________________________________________
2030+ 69F2             >//              Heap part
2030+ 69F2             >
2030+ 69F2             >
2030+ 69F2             >                org     (Heap_Ptr & $1FFF) + $E000
2030+ E39B             >
2030+ E39B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2030+ E39B             >Latest_Definition defl  Heap_Ptr
2030+ E39B             >
2030+ E39B             >                // dummy db directives used to calculate length of namec
2030+ E39B 32 2A       >                db      "2*"
2030+ E39D             >len_NFA         defl    $ - temp_NFA
2030+ E39D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2030+ E39B             >
2030+ E39B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2030+ E39C 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2030+ E39E             >                org     $-1                 // alter last byte of Name just above to set
2030+ E39D AA          >                db      {b $} | END_BIT     // msb as name end
2030+ E39E             >
2030+ E39E 94 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2030+ E3A0             >Prev_Ptr        defl    Heap_Ptr
2030+ E3A0             >
2030+ E3A0             >mirror_Ptr      defl    $
2030+ E3A0             >
2030+ E3A0 F4 69       >                dw      Dict_Ptr + 2        // xt
2030+ E3A2             >Heap_Ptr        defl    $ - $E000           // save current HP
2030+ E3A2             >
2030+ E3A2             >Current_HP      defl  $ - $E000             // used to set HP once!
2030+ E3A2             >
2030+ E3A2             >//              ______________________________________________________________________
2030+ E3A2             >//              Dictionary part
2030+ E3A2             >
2030+ E3A2             >                org     Dict_Ptr
2030+ 69F2             >
2030+ 69F2 A0 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2030+ 69F4             >
2030+ 69F4             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2030+ 69F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2030+ 69F4 ~           >
2030+ 69F4 ~           >
2030+ 69F4             >                endif           ; ok        // for other definitions it "points" the correct handler
2030+ 69F4             >                // Use of "; ok" to suppress "warning[fwdref]"
2030+ 69F4             >
2030+ 69F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2031+ 69F4              Two_Mul_Ptr:
2032+ 69F4 E1                           pop     hl
2033+ 69F5 29                           add     hl, hl
2034+ 69F6
2035+ 69F6                              psh1
2035+ 69F6 E5          >                push    hl
2035+ 69F7 DD E9       >                jp      (ix)
2036+ 69F9
2037+ 69F9              //  ______________________________________________________________________
2038+ 69F9              //
2039+ 69F9              // 2/           n1 -- n2
2040+ 69F9              // halves the top of stack, sign is unchanged
2041+ 69F9                              New_Def TWO_DIV, "2/", is_code, is_normal
2041+ 69F9             >
2041+ 69F9             >Dict_Ptr        defl    $
2041+ 69F9             >
2041+ 69F9             >//              ______________________________________________________________________
2041+ 69F9             >//              Heap part
2041+ 69F9             >
2041+ 69F9             >
2041+ 69F9             >                org     (Heap_Ptr & $1FFF) + $E000
2041+ E3A2             >
2041+ E3A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2041+ E3A2             >Latest_Definition defl  Heap_Ptr
2041+ E3A2             >
2041+ E3A2             >                // dummy db directives used to calculate length of namec
2041+ E3A2 32 2F       >                db      "2/"
2041+ E3A4             >len_NFA         defl    $ - temp_NFA
2041+ E3A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2041+ E3A2             >
2041+ E3A2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2041+ E3A3 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2041+ E3A5             >                org     $-1                 // alter last byte of Name just above to set
2041+ E3A4 AF          >                db      {b $} | END_BIT     // msb as name end
2041+ E3A5             >
2041+ E3A5 9B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2041+ E3A7             >Prev_Ptr        defl    Heap_Ptr
2041+ E3A7             >
2041+ E3A7             >mirror_Ptr      defl    $
2041+ E3A7             >
2041+ E3A7 FB 69       >                dw      Dict_Ptr + 2        // xt
2041+ E3A9             >Heap_Ptr        defl    $ - $E000           // save current HP
2041+ E3A9             >
2041+ E3A9             >Current_HP      defl  $ - $E000             // used to set HP once!
2041+ E3A9             >
2041+ E3A9             >//              ______________________________________________________________________
2041+ E3A9             >//              Dictionary part
2041+ E3A9             >
2041+ E3A9             >                org     Dict_Ptr
2041+ 69F9             >
2041+ 69F9 A7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2041+ 69FB             >
2041+ 69FB             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2041+ 69FB ~           >                call    runcode ; ok        // for primitive definitions  actual code
2041+ 69FB ~           >
2041+ 69FB ~           >
2041+ 69FB             >                endif           ; ok        // for other definitions it "points" the correct handler
2041+ 69FB             >                // Use of "; ok" to suppress "warning[fwdref]"
2041+ 69FB             >
2041+ 69FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2042+ 69FB E1                           pop     hl
2043+ 69FC CB 2C                        sra     h
2044+ 69FE CB 1D                        rr      l
2045+ 6A00
2046+ 6A00                              psh1
2046+ 6A00 E5          >                push    hl
2046+ 6A01 DD E9       >                jp      (ix)
2047+ 6A03
2048+ 6A03              //  ______________________________________________________________________
2049+ 6A03              //
2050+ 6A03              // lshift       n1 u -- n2
2051+ 6A03              // bit left shift of u bits
2052+ 6A03                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2052+ 6A03             >
2052+ 6A03             >Dict_Ptr        defl    $
2052+ 6A03             >
2052+ 6A03             >//              ______________________________________________________________________
2052+ 6A03             >//              Heap part
2052+ 6A03             >
2052+ 6A03             >
2052+ 6A03             >                org     (Heap_Ptr & $1FFF) + $E000
2052+ E3A9             >
2052+ E3A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2052+ E3A9             >Latest_Definition defl  Heap_Ptr
2052+ E3A9             >
2052+ E3A9             >                // dummy db directives used to calculate length of namec
2052+ E3A9 4C 53 48 49 >                db      "LSHIFT"
2052+ E3AD 46 54       >
2052+ E3AF             >len_NFA         defl    $ - temp_NFA
2052+ E3AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2052+ E3A9             >
2052+ E3A9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2052+ E3AA 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2052+ E3AE 46 54       >
2052+ E3B0             >                org     $-1                 // alter last byte of Name just above to set
2052+ E3AF D4          >                db      {b $} | END_BIT     // msb as name end
2052+ E3B0             >
2052+ E3B0 A2 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2052+ E3B2             >Prev_Ptr        defl    Heap_Ptr
2052+ E3B2             >
2052+ E3B2             >mirror_Ptr      defl    $
2052+ E3B2             >
2052+ E3B2 05 6A       >                dw      Dict_Ptr + 2        // xt
2052+ E3B4             >Heap_Ptr        defl    $ - $E000           // save current HP
2052+ E3B4             >
2052+ E3B4             >Current_HP      defl  $ - $E000             // used to set HP once!
2052+ E3B4             >
2052+ E3B4             >//              ______________________________________________________________________
2052+ E3B4             >//              Dictionary part
2052+ E3B4             >
2052+ E3B4             >                org     Dict_Ptr
2052+ 6A03             >
2052+ 6A03 B2 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2052+ 6A05             >
2052+ 6A05             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2052+ 6A05 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2052+ 6A05 ~           >
2052+ 6A05 ~           >
2052+ 6A05             >                endif           ; ok        // for other definitions it "points" the correct handler
2052+ 6A05             >                // Use of "; ok" to suppress "warning[fwdref]"
2052+ 6A05             >
2052+ 6A05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2053+ 6A05 D9                           exx
2054+ 6A06 C1                           pop     bc
2055+ 6A07 41                           ld      b, c
2056+ 6A08 D1                           pop     de
2057+ 6A09 ED 28                        bsla    de, b
2058+ 6A0B D5                           push    de
2059+ 6A0C D9                           exx
2060+ 6A0D                              next
2060+ 6A0D DD E9       >                jp      (ix)
2061+ 6A0F
2062+ 6A0F              //  ______________________________________________________________________
2063+ 6A0F              //
2064+ 6A0F              // rshift       n1 u -- n2
2065+ 6A0F              // bit right shift of u bits
2066+ 6A0F                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2066+ 6A0F             >
2066+ 6A0F             >Dict_Ptr        defl    $
2066+ 6A0F             >
2066+ 6A0F             >//              ______________________________________________________________________
2066+ 6A0F             >//              Heap part
2066+ 6A0F             >
2066+ 6A0F             >
2066+ 6A0F             >                org     (Heap_Ptr & $1FFF) + $E000
2066+ E3B4             >
2066+ E3B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2066+ E3B4             >Latest_Definition defl  Heap_Ptr
2066+ E3B4             >
2066+ E3B4             >                // dummy db directives used to calculate length of namec
2066+ E3B4 52 53 48 49 >                db      "RSHIFT"
2066+ E3B8 46 54       >
2066+ E3BA             >len_NFA         defl    $ - temp_NFA
2066+ E3BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2066+ E3B4             >
2066+ E3B4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2066+ E3B5 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2066+ E3B9 46 54       >
2066+ E3BB             >                org     $-1                 // alter last byte of Name just above to set
2066+ E3BA D4          >                db      {b $} | END_BIT     // msb as name end
2066+ E3BB             >
2066+ E3BB A9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2066+ E3BD             >Prev_Ptr        defl    Heap_Ptr
2066+ E3BD             >
2066+ E3BD             >mirror_Ptr      defl    $
2066+ E3BD             >
2066+ E3BD 11 6A       >                dw      Dict_Ptr + 2        // xt
2066+ E3BF             >Heap_Ptr        defl    $ - $E000           // save current HP
2066+ E3BF             >
2066+ E3BF             >Current_HP      defl  $ - $E000             // used to set HP once!
2066+ E3BF             >
2066+ E3BF             >//              ______________________________________________________________________
2066+ E3BF             >//              Dictionary part
2066+ E3BF             >
2066+ E3BF             >                org     Dict_Ptr
2066+ 6A0F             >
2066+ 6A0F BD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2066+ 6A11             >
2066+ 6A11             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2066+ 6A11 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2066+ 6A11 ~           >
2066+ 6A11 ~           >
2066+ 6A11             >                endif           ; ok        // for other definitions it "points" the correct handler
2066+ 6A11             >                // Use of "; ok" to suppress "warning[fwdref]"
2066+ 6A11             >
2066+ 6A11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2067+ 6A11 D9                           exx
2068+ 6A12 C1                           pop     bc
2069+ 6A13 41                           ld      b, c
2070+ 6A14 D1                           pop     de
2071+ 6A15 ED 2A                        bsrl    de, b
2072+ 6A17 D5                           push    de
2073+ 6A18 D9                           exx
2074+ 6A19                              next
2074+ 6A19 DD E9       >                jp      (ix)
2075+ 6A1B
2076+ 6A1B              //  ______________________________________________________________________
2077+ 6A1B              //
2078+ 6A1B              // cells        n1 -- n2
2079+ 6A1B              // decrement by 2 top of stack
2080+ 6A1B                              New_Def CELLS, "CELLS", is_code, is_normal
2080+ 6A1B             >
2080+ 6A1B             >Dict_Ptr        defl    $
2080+ 6A1B             >
2080+ 6A1B             >//              ______________________________________________________________________
2080+ 6A1B             >//              Heap part
2080+ 6A1B             >
2080+ 6A1B             >
2080+ 6A1B             >                org     (Heap_Ptr & $1FFF) + $E000
2080+ E3BF             >
2080+ E3BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2080+ E3BF             >Latest_Definition defl  Heap_Ptr
2080+ E3BF             >
2080+ E3BF             >                // dummy db directives used to calculate length of namec
2080+ E3BF 43 45 4C 4C >                db      "CELLS"
2080+ E3C3 53          >
2080+ E3C4             >len_NFA         defl    $ - temp_NFA
2080+ E3C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2080+ E3BF             >
2080+ E3BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2080+ E3C0 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2080+ E3C4 53          >
2080+ E3C5             >                org     $-1                 // alter last byte of Name just above to set
2080+ E3C4 D3          >                db      {b $} | END_BIT     // msb as name end
2080+ E3C5             >
2080+ E3C5 B4 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2080+ E3C7             >Prev_Ptr        defl    Heap_Ptr
2080+ E3C7             >
2080+ E3C7             >mirror_Ptr      defl    $
2080+ E3C7             >
2080+ E3C7 1D 6A       >                dw      Dict_Ptr + 2        // xt
2080+ E3C9             >Heap_Ptr        defl    $ - $E000           // save current HP
2080+ E3C9             >
2080+ E3C9             >Current_HP      defl  $ - $E000             // used to set HP once!
2080+ E3C9             >
2080+ E3C9             >//              ______________________________________________________________________
2080+ E3C9             >//              Dictionary part
2080+ E3C9             >
2080+ E3C9             >                org     Dict_Ptr
2080+ 6A1B             >
2080+ 6A1B C7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2080+ 6A1D             >
2080+ 6A1D             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2080+ 6A1D ~           >                call    runcode ; ok        // for primitive definitions  actual code
2080+ 6A1D ~           >
2080+ 6A1D ~           >
2080+ 6A1D             >                endif           ; ok        // for other definitions it "points" the correct handler
2080+ 6A1D             >                // Use of "; ok" to suppress "warning[fwdref]"
2080+ 6A1D             >
2080+ 6A1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2081+ 6A1D C3 F4 69                     jp      Two_Mul_Ptr
2082+ 6A20
2083+ 6A20
2084+ 6A20              //  ______________________________________________________________________
2085+ 6A20
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
 121  6A20                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
   1+ 6A20              //  ______________________________________________________________________
   2+ 6A20              //
   3+ 6A20              //  L1.asm
   4+ 6A20              //
   5+ 6A20              //  Level-1 definitions and derivate
   6+ 6A20              //  ______________________________________________________________________
   7+ 6A20
   8+ 6A20              //  ______________________________________________________________________
   9+ 6A20              //
  10+ 6A20              // :            -- cccc     ( compile time )
  11+ 6A20              //              i*x -- j*x  ( run time )
  12+ 6A20              // Colon Definition
  13+ 6A20                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6A20             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6A20             >
  13+ 6A20             >Dict_Ptr        defl    $
  13+ 6A20             >
  13+ 6A20             >//              ______________________________________________________________________
  13+ 6A20             >//              Heap part
  13+ 6A20             >
  13+ 6A20             >
  13+ 6A20             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3C9             >
  13+ E3C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3C9             >Latest_Definition defl  Heap_Ptr
  13+ E3C9             >
  13+ E3C9             >                // dummy db directives used to calculate length of namec
  13+ E3C9 3A          >                db      ":"
  13+ E3CA             >len_NFA         defl    $ - temp_NFA
  13+ E3CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3C9             >
  13+ E3C9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3CA 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3CB             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3CA BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3CB             >
  13+ E3CB BF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CD             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CD             >
  13+ E3CD             >mirror_Ptr      defl    $
  13+ E3CD             >
  13+ E3CD 22 6A       >                dw      Dict_Ptr + 2        // xt
  13+ E3CF             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3CF             >
  13+ E3CF             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3CF             >
  13+ E3CF             >//              ______________________________________________________________________
  13+ E3CF             >//              Dictionary part
  13+ E3CF             >
  13+ E3CF             >                org     Dict_Ptr
  13+ 6A20             >
  13+ 6A20 CD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 6A22             >
  13+ 6A22             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6A22 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6A25             >
  13+ 6A25             >
  13+ 6A25             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6A25             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6A25             >
  13+ 6A25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6A25
  15+ 6A25 17 6E                        dw      QEXEC                   // ?exec
  16+ 6A27 E2 6D                        dw      STORE_CSP               // !csp
  17+ 6A29 53 6B 96 69                  dw      CURRENT, FETCH          // current @
  18+ 6A2D 4D 6B A0 69                  dw      CONTEXT, STORE          // context !
  19+ 6A31 03 74                        dw      CREATE                  // create  ( forward )
  20+ 6A33 9B 6E                        dw      SMUDGE                  // dmudge
  21+ 6A35 8C 6E                        dw      SQUARED_CLOSE           // ]
  22+ 6A37 D7 6E                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6A39                                                              // ... immediate
  24+ 6A39              Enter_Ptr:
  25+ 6A39                              // via call coded in CFA
  26+ 6A39 EB                           ex      de, hl //**
  27+ 6A3A                              // *** ldhlrp
  28+ 6A3A 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 6A3B 70                           ld      (hl), b
  30+ 6A3C 2B                           dec     hl
  31+ 6A3D 71                           ld      (hl), c
  32+ 6A3E                              // *** ldrphl
  33+ 6A3E EB                           ex      de, hl //**
  34+ 6A3F
  35+ 6A3F
  36+ 6A3F C1                           pop     bc                  // points to PFA of "this" word
  37+ 6A40                              next
  37+ 6A40 DD E9       >                jp      (ix)
  38+ 6A42
  39+ 6A42              //  ______________________________________________________________________
  40+ 6A42              //
  41+ 6A42              // ;            --
  42+ 6A42              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 6A42                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 6A42             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 6A42             >
  43+ 6A42             >Dict_Ptr        defl    $
  43+ 6A42             >
  43+ 6A42             >//              ______________________________________________________________________
  43+ 6A42             >//              Heap part
  43+ 6A42             >
  43+ 6A42             >
  43+ 6A42             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3CF             >
  43+ E3CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3CF             >Latest_Definition defl  Heap_Ptr
  43+ E3CF             >
  43+ E3CF             >                // dummy db directives used to calculate length of namec
  43+ E3CF 3B          >                db      ";"
  43+ E3D0             >len_NFA         defl    $ - temp_NFA
  43+ E3D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3CF             >
  43+ E3CF C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3D0 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3D1             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3D0 BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3D1             >
  43+ E3D1 C9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D3             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D3             >
  43+ E3D3             >mirror_Ptr      defl    $
  43+ E3D3             >
  43+ E3D3 44 6A       >                dw      Dict_Ptr + 2        // xt
  43+ E3D5             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D5             >
  43+ E3D5             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D5             >
  43+ E3D5             >//              ______________________________________________________________________
  43+ E3D5             >//              Dictionary part
  43+ E3D5             >
  43+ E3D5             >                org     Dict_Ptr
  43+ 6A42             >
  43+ 6A42 D3 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 6A44             >
  43+ 6A44             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 6A44 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 6A47             >
  43+ 6A47             >
  43+ 6A47             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 6A47             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 6A47             >
  43+ 6A47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 6A47
  45+ 6A47 37 6E                        dw      QCSP                    // ?csp
  46+ 6A49 5F 6E 4C 68                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 6A4D 9B 6E                        dw      SMUDGE                  // smudge
  48+ 6A4F 7F 6E                        dw      SQUARED_OPEN            // [
  49+ 6A51 4C 68                        dw      EXIT                    // ; immediate
  50+ 6A53
  51+ 6A53              //  ______________________________________________________________________
  52+ 6A53              //
  53+ 6A53              // noop         --
  54+ 6A53
  55+ 6A53                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 6A53             >
  55+ 6A53             >Dict_Ptr        defl    $
  55+ 6A53             >
  55+ 6A53             >//              ______________________________________________________________________
  55+ 6A53             >//              Heap part
  55+ 6A53             >
  55+ 6A53             >
  55+ 6A53             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D5             >
  55+ E3D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D5             >Latest_Definition defl  Heap_Ptr
  55+ E3D5             >
  55+ E3D5             >                // dummy db directives used to calculate length of namec
  55+ E3D5 4E 4F 4F 50 >                db      "NOOP"
  55+ E3D9             >len_NFA         defl    $ - temp_NFA
  55+ E3D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D5             >
  55+ E3D5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D6 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3DA             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3D9 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3DA             >
  55+ E3DA CF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DC             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DC             >
  55+ E3DC             >mirror_Ptr      defl    $
  55+ E3DC             >
  55+ E3DC 55 6A       >                dw      Dict_Ptr + 2        // xt
  55+ E3DE             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DE             >
  55+ E3DE             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DE             >
  55+ E3DE             >//              ______________________________________________________________________
  55+ E3DE             >//              Dictionary part
  55+ E3DE             >
  55+ E3DE             >                org     Dict_Ptr
  55+ 6A53             >
  55+ 6A53 DC 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 6A55             >
  55+ 6A55             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 6A55 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 6A55 ~           >
  55+ 6A55 ~           >
  55+ 6A55             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 6A55             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 6A55             >
  55+ 6A55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 6A55                              next
  56+ 6A55 DD E9       >                jp      (ix)
  57+ 6A57
  58+ 6A57              //  ______________________________________________________________________
  59+ 6A57              //
  60+ 6A57              // constant     n -- cccc     ( compile time )
  61+ 6A57              //              -- n          ( run time )
  62+ 6A57              // Constant definition.
  63+ 6A57                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 6A57             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 6A57             >
  63+ 6A57             >Dict_Ptr        defl    $
  63+ 6A57             >
  63+ 6A57             >//              ______________________________________________________________________
  63+ 6A57             >//              Heap part
  63+ 6A57             >
  63+ 6A57             >
  63+ 6A57             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DE             >
  63+ E3DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DE             >Latest_Definition defl  Heap_Ptr
  63+ E3DE             >
  63+ E3DE             >                // dummy db directives used to calculate length of namec
  63+ E3DE 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E2 54 41 4E 54 >
  63+ E3E6             >len_NFA         defl    $ - temp_NFA
  63+ E3E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DE             >
  63+ E3DE 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3DF 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E3 54 41 4E 54 >
  63+ E3E7             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E6 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E7             >
  63+ E3E7 D5 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3E9             >Prev_Ptr        defl    Heap_Ptr
  63+ E3E9             >
  63+ E3E9             >mirror_Ptr      defl    $
  63+ E3E9             >
  63+ E3E9 59 6A       >                dw      Dict_Ptr + 2        // xt
  63+ E3EB             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3EB             >
  63+ E3EB             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3EB             >
  63+ E3EB             >//              ______________________________________________________________________
  63+ E3EB             >//              Dictionary part
  63+ E3EB             >
  63+ E3EB             >                org     Dict_Ptr
  63+ 6A57             >
  63+ 6A57 E9 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 6A59             >
  63+ 6A59             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 6A59 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 6A5C             >
  63+ 6A5C             >
  63+ 6A5C             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 6A5C             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 6A5C             >
  63+ 6A5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 6A5C 03 74                        dw      CREATE                  // create
  65+ 6A5E C9 6B                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 6A60 D7 6E                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 6A62              Constant_Ptr:
  68+ 6A62
  69+ 6A62
  70+ 6A62 E1                           pop     hl
  71+ 6A63
  72+ 6A63 7E                           ld      a, (hl)
  73+ 6A64 23                           inc     hl
  74+ 6A65 66                           ld      h, (hl)
  75+ 6A66 6F                           ld      l, a
  76+ 6A67 E5                           push    hl
  77+ 6A68                              next
  77+ 6A68 DD E9       >                jp      (ix)
  78+ 6A6A
  79+ 6A6A              //  ______________________________________________________________________
  80+ 6A6A              //
  81+ 6A6A              // variable     n -- cccc     ( compile time )
  82+ 6A6A              //              -- a          ( run time )
  83+ 6A6A              // Variable definition, n is the initial value.
  84+ 6A6A                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 6A6A             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 6A6A             >
  84+ 6A6A             >Dict_Ptr        defl    $
  84+ 6A6A             >
  84+ 6A6A             >//              ______________________________________________________________________
  84+ 6A6A             >//              Heap part
  84+ 6A6A             >
  84+ 6A6A             >
  84+ 6A6A             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3EB             >
  84+ E3EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3EB             >Latest_Definition defl  Heap_Ptr
  84+ E3EB             >
  84+ E3EB             >                // dummy db directives used to calculate length of namec
  84+ E3EB 56 41 52 49 >                db      "VARIABLE"
  84+ E3EF 41 42 4C 45 >
  84+ E3F3             >len_NFA         defl    $ - temp_NFA
  84+ E3F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3EB             >
  84+ E3EB 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3EC 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3F0 41 42 4C 45 >
  84+ E3F4             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F3 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F4             >
  84+ E3F4 DE 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F6             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F6             >
  84+ E3F6             >mirror_Ptr      defl    $
  84+ E3F6             >
  84+ E3F6 6C 6A       >                dw      Dict_Ptr + 2        // xt
  84+ E3F8             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F8             >
  84+ E3F8             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F8             >
  84+ E3F8             >//              ______________________________________________________________________
  84+ E3F8             >//              Dictionary part
  84+ E3F8             >
  84+ E3F8             >                org     Dict_Ptr
  84+ 6A6A             >
  84+ 6A6A F6 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 6A6C             >
  84+ 6A6C             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 6A6C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 6A6F             >
  84+ 6A6F             >
  84+ 6A6F             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 6A6F             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 6A6F             >
  84+ 6A6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 6A6F
  86+ 6A6F 8E 6A                        dw      ZERO
  87+ 6A71 59 6A                        dw      CONSTANT                // constant
  88+ 6A73 D7 6E                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 6A75              Variable_Ptr:
  90+ 6A75
  91+ 6A75
  92+ 6A75
  93+ 6A75
  94+ 6A75                              next
  94+ 6A75 DD E9       >                jp      (ix)
  95+ 6A77
  96+ 6A77              //  ______________________________________________________________________
  97+ 6A77              //
  98+ 6A77              // user         b -- cccc     ( compile time )
  99+ 6A77              //              -- a          ( run time )
 100+ 6A77              // User variable definition
 101+ 6A77                              Colon_Def USER, "USER", is_normal
 101+ 6A77             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 6A77             >
 101+ 6A77             >Dict_Ptr        defl    $
 101+ 6A77             >
 101+ 6A77             >//              ______________________________________________________________________
 101+ 6A77             >//              Heap part
 101+ 6A77             >
 101+ 6A77             >
 101+ 6A77             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F8             >
 101+ E3F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F8             >Latest_Definition defl  Heap_Ptr
 101+ E3F8             >
 101+ E3F8             >                // dummy db directives used to calculate length of namec
 101+ E3F8 55 53 45 52 >                db      "USER"
 101+ E3FC             >len_NFA         defl    $ - temp_NFA
 101+ E3FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F8             >
 101+ E3F8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3F9 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FD             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FC D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FD             >
 101+ E3FD EB 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E3FF             >Prev_Ptr        defl    Heap_Ptr
 101+ E3FF             >
 101+ E3FF             >mirror_Ptr      defl    $
 101+ E3FF             >
 101+ E3FF 79 6A       >                dw      Dict_Ptr + 2        // xt
 101+ E401             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E401             >
 101+ E401             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E401             >
 101+ E401             >//              ______________________________________________________________________
 101+ E401             >//              Dictionary part
 101+ E401             >
 101+ E401             >                org     Dict_Ptr
 101+ 6A77             >
 101+ 6A77 FF 03       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 6A79             >
 101+ 6A79             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 6A79 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 6A7C             >
 101+ 6A7C             >
 101+ 6A7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 6A7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 6A7C             >
 101+ 6A7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 6A7C
 103+ 6A7C 03 74                        dw      CREATE                  // create
 104+ 6A7E D8 6B                        dw      CCOMMA                  // c,
 105+ 6A80 D7 6E                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 6A82
 107+ 6A82
 108+ 6A82              User_Ptr:
 109+ 6A82                              // via call coded in CFA
 110+ 6A82 E1                           pop     hl
 111+ 6A83
 112+ 6A83 7E                           ld      a, (hl)
 113+ 6A84 2A 94 63                     ld      hl, (USER_Pointer)
 114+ 6A87 ED 31                        add     hl, a
 115+ 6A89 E5                           push    hl
 116+ 6A8A                              next
 116+ 6A8A DD E9       >                jp      (ix)
 117+ 6A8C
 118+ 6A8C              //  ______________________________________________________________________
 119+ 6A8C              //
 120+ 6A8C                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 6A8C             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 6A8C             >
 120+ 6A8C             >Dict_Ptr        defl    $
 120+ 6A8C             >
 120+ 6A8C             >//              ______________________________________________________________________
 120+ 6A8C             >//              Heap part
 120+ 6A8C             >
 120+ 6A8C             >
 120+ 6A8C             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E401             >
 120+ E401             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E401             >Latest_Definition defl  Heap_Ptr
 120+ E401             >
 120+ E401             >                // dummy db directives used to calculate length of namec
 120+ E401 30          >                db      "0"
 120+ E402             >len_NFA         defl    $ - temp_NFA
 120+ E402             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E401             >
 120+ E401 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E402 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E403             >                org     $-1                 // alter last byte of Name just above to set
 120+ E402 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E403             >
 120+ E403 F8 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E405             >Prev_Ptr        defl    Heap_Ptr
 120+ E405             >
 120+ E405             >mirror_Ptr      defl    $
 120+ E405             >
 120+ E405 8E 6A       >                dw      Dict_Ptr + 2        // xt
 120+ E407             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E407             >
 120+ E407             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E407             >
 120+ E407             >//              ______________________________________________________________________
 120+ E407             >//              Dictionary part
 120+ E407             >
 120+ E407             >                org     Dict_Ptr
 120+ 6A8C             >
 120+ 6A8C 05 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 6A8E             >
 120+ 6A8E             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6A8E CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6A91             >
 120+ 6A91             >
 120+ 6A91             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6A91             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6A91             >
 120+ 6A91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6A91 00 00       >                dw      0
 121+ 6A93                              Constant_Def ONE        ,   "1"     ,   1
 121+ 6A93             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 6A93             >
 121+ 6A93             >Dict_Ptr        defl    $
 121+ 6A93             >
 121+ 6A93             >//              ______________________________________________________________________
 121+ 6A93             >//              Heap part
 121+ 6A93             >
 121+ 6A93             >
 121+ 6A93             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E407             >
 121+ E407             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E407             >Latest_Definition defl  Heap_Ptr
 121+ E407             >
 121+ E407             >                // dummy db directives used to calculate length of namec
 121+ E407 31          >                db      "1"
 121+ E408             >len_NFA         defl    $ - temp_NFA
 121+ E408             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E407             >
 121+ E407 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E408 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E409             >                org     $-1                 // alter last byte of Name just above to set
 121+ E408 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E409             >
 121+ E409 01 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E40B             >Prev_Ptr        defl    Heap_Ptr
 121+ E40B             >
 121+ E40B             >mirror_Ptr      defl    $
 121+ E40B             >
 121+ E40B 95 6A       >                dw      Dict_Ptr + 2        // xt
 121+ E40D             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40D             >
 121+ E40D             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40D             >
 121+ E40D             >//              ______________________________________________________________________
 121+ E40D             >//              Dictionary part
 121+ E40D             >
 121+ E40D             >                org     Dict_Ptr
 121+ 6A93             >
 121+ 6A93 0B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 6A95             >
 121+ 6A95             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6A95 CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6A98             >
 121+ 6A98             >
 121+ 6A98             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6A98             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6A98             >
 121+ 6A98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6A98 01 00       >                dw      1
 122+ 6A9A                              Constant_Def TWO        ,   "2"     ,   2
 122+ 6A9A             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 6A9A             >
 122+ 6A9A             >Dict_Ptr        defl    $
 122+ 6A9A             >
 122+ 6A9A             >//              ______________________________________________________________________
 122+ 6A9A             >//              Heap part
 122+ 6A9A             >
 122+ 6A9A             >
 122+ 6A9A             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40D             >
 122+ E40D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40D             >Latest_Definition defl  Heap_Ptr
 122+ E40D             >
 122+ E40D             >                // dummy db directives used to calculate length of namec
 122+ E40D 32          >                db      "2"
 122+ E40E             >len_NFA         defl    $ - temp_NFA
 122+ E40E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40D             >
 122+ E40D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40E 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E40F             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40E B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E40F             >
 122+ E40F 07 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E411             >Prev_Ptr        defl    Heap_Ptr
 122+ E411             >
 122+ E411             >mirror_Ptr      defl    $
 122+ E411             >
 122+ E411 9C 6A       >                dw      Dict_Ptr + 2        // xt
 122+ E413             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E413             >
 122+ E413             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E413             >
 122+ E413             >//              ______________________________________________________________________
 122+ E413             >//              Dictionary part
 122+ E413             >
 122+ E413             >                org     Dict_Ptr
 122+ 6A9A             >
 122+ 6A9A 11 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 6A9C             >
 122+ 6A9C             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6A9C CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6A9F             >
 122+ 6A9F             >
 122+ 6A9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6A9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6A9F             >
 122+ 6A9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6A9F 02 00       >                dw      2
 123+ 6AA1                              Constant_Def THREE      ,   "3"     ,   3
 123+ 6AA1             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 6AA1             >
 123+ 6AA1             >Dict_Ptr        defl    $
 123+ 6AA1             >
 123+ 6AA1             >//              ______________________________________________________________________
 123+ 6AA1             >//              Heap part
 123+ 6AA1             >
 123+ 6AA1             >
 123+ 6AA1             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E413             >
 123+ E413             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E413             >Latest_Definition defl  Heap_Ptr
 123+ E413             >
 123+ E413             >                // dummy db directives used to calculate length of namec
 123+ E413 33          >                db      "3"
 123+ E414             >len_NFA         defl    $ - temp_NFA
 123+ E414             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E413             >
 123+ E413 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E414 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E415             >                org     $-1                 // alter last byte of Name just above to set
 123+ E414 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E415             >
 123+ E415 0D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E417             >Prev_Ptr        defl    Heap_Ptr
 123+ E417             >
 123+ E417             >mirror_Ptr      defl    $
 123+ E417             >
 123+ E417 A3 6A       >                dw      Dict_Ptr + 2        // xt
 123+ E419             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E419             >
 123+ E419             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E419             >
 123+ E419             >//              ______________________________________________________________________
 123+ E419             >//              Dictionary part
 123+ E419             >
 123+ E419             >                org     Dict_Ptr
 123+ 6AA1             >
 123+ 6AA1 17 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 6AA3             >
 123+ 6AA3             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6AA3 CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6AA6             >
 123+ 6AA6             >
 123+ 6AA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6AA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6AA6             >
 123+ 6AA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6AA6 03 00       >                dw      3
 124+ 6AA8                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 6AA8             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 6AA8             >
 124+ 6AA8             >Dict_Ptr        defl    $
 124+ 6AA8             >
 124+ 6AA8             >//              ______________________________________________________________________
 124+ 6AA8             >//              Heap part
 124+ 6AA8             >
 124+ 6AA8             >
 124+ 6AA8             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E419             >
 124+ E419             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E419             >Latest_Definition defl  Heap_Ptr
 124+ E419             >
 124+ E419             >                // dummy db directives used to calculate length of namec
 124+ E419 2D 31       >                db      "-1"
 124+ E41B             >len_NFA         defl    $ - temp_NFA
 124+ E41B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E419             >
 124+ E419 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E41A 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41C             >                org     $-1                 // alter last byte of Name just above to set
 124+ E41B B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41C             >
 124+ E41C 13 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41E             >Prev_Ptr        defl    Heap_Ptr
 124+ E41E             >
 124+ E41E             >mirror_Ptr      defl    $
 124+ E41E             >
 124+ E41E AA 6A       >                dw      Dict_Ptr + 2        // xt
 124+ E420             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E420             >
 124+ E420             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E420             >
 124+ E420             >//              ______________________________________________________________________
 124+ E420             >//              Dictionary part
 124+ E420             >
 124+ E420             >                org     Dict_Ptr
 124+ 6AA8             >
 124+ 6AA8 1E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 6AAA             >
 124+ 6AAA             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6AAA CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6AAD             >
 124+ 6AAD             >
 124+ 6AAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6AAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6AAD             >
 124+ 6AAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6AAD FF FF       >                dw      -1
 125+ 6AAF                              Constant_Def BL         ,   "BL"    , $20
 125+ 6AAF             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 6AAF             >
 125+ 6AAF             >Dict_Ptr        defl    $
 125+ 6AAF             >
 125+ 6AAF             >//              ______________________________________________________________________
 125+ 6AAF             >//              Heap part
 125+ 6AAF             >
 125+ 6AAF             >
 125+ 6AAF             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E420             >
 125+ E420             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E420             >Latest_Definition defl  Heap_Ptr
 125+ E420             >
 125+ E420             >                // dummy db directives used to calculate length of namec
 125+ E420 42 4C       >                db      "BL"
 125+ E422             >len_NFA         defl    $ - temp_NFA
 125+ E422             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E420             >
 125+ E420 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E421 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E423             >                org     $-1                 // alter last byte of Name just above to set
 125+ E422 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E423             >
 125+ E423 19 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E425             >Prev_Ptr        defl    Heap_Ptr
 125+ E425             >
 125+ E425             >mirror_Ptr      defl    $
 125+ E425             >
 125+ E425 B1 6A       >                dw      Dict_Ptr + 2        // xt
 125+ E427             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E427             >
 125+ E427             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E427             >
 125+ E427             >//              ______________________________________________________________________
 125+ E427             >//              Dictionary part
 125+ E427             >
 125+ E427             >                org     Dict_Ptr
 125+ 6AAF             >
 125+ 6AAF 25 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 6AB1             >
 125+ 6AB1             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6AB1 CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6AB4             >
 125+ 6AB4             >
 125+ 6AB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6AB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6AB4             >
 125+ 6AB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6AB4 20 00       >                dw      $20
 126+ 6AB6                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 6AB6             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 6AB6             >
 126+ 6AB6             >Dict_Ptr        defl    $
 126+ 6AB6             >
 126+ 6AB6             >//              ______________________________________________________________________
 126+ 6AB6             >//              Heap part
 126+ 6AB6             >
 126+ 6AB6             >
 126+ 6AB6             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E427             >
 126+ E427             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E427             >Latest_Definition defl  Heap_Ptr
 126+ E427             >
 126+ E427             >                // dummy db directives used to calculate length of namec
 126+ E427 43 2F 4C    >                db      "C/L"
 126+ E42A             >len_NFA         defl    $ - temp_NFA
 126+ E42A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E427             >
 126+ E427 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E428 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E42B             >                org     $-1                 // alter last byte of Name just above to set
 126+ E42A CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E42B             >
 126+ E42B 20 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42D             >Prev_Ptr        defl    Heap_Ptr
 126+ E42D             >
 126+ E42D             >mirror_Ptr      defl    $
 126+ E42D             >
 126+ E42D B8 6A       >                dw      Dict_Ptr + 2        // xt
 126+ E42F             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E42F             >
 126+ E42F             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E42F             >
 126+ E42F             >//              ______________________________________________________________________
 126+ E42F             >//              Dictionary part
 126+ E42F             >
 126+ E42F             >                org     Dict_Ptr
 126+ 6AB6             >
 126+ 6AB6 2D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 6AB8             >
 126+ 6AB8             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6AB8 CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6ABB             >
 126+ 6ABB             >
 126+ 6ABB             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6ABB             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6ABB             >
 126+ 6ABB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6ABB 40 00       >                dw      64
 127+ 6ABD                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 6ABD             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 6ABD             >
 127+ 6ABD             >Dict_Ptr        defl    $
 127+ 6ABD             >
 127+ 6ABD             >//              ______________________________________________________________________
 127+ 6ABD             >//              Heap part
 127+ 6ABD             >
 127+ 6ABD             >
 127+ 6ABD             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E42F             >
 127+ E42F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E42F             >Latest_Definition defl  Heap_Ptr
 127+ E42F             >
 127+ E42F             >                // dummy db directives used to calculate length of namec
 127+ E42F 42 2F 42 55 >                db      "B/BUF"
 127+ E433 46          >
 127+ E434             >len_NFA         defl    $ - temp_NFA
 127+ E434             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E42F             >
 127+ E42F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E430 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E434 46          >
 127+ E435             >                org     $-1                 // alter last byte of Name just above to set
 127+ E434 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E435             >
 127+ E435 27 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E437             >Prev_Ptr        defl    Heap_Ptr
 127+ E437             >
 127+ E437             >mirror_Ptr      defl    $
 127+ E437             >
 127+ E437 BF 6A       >                dw      Dict_Ptr + 2        // xt
 127+ E439             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E439             >
 127+ E439             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E439             >
 127+ E439             >//              ______________________________________________________________________
 127+ E439             >//              Dictionary part
 127+ E439             >
 127+ E439             >                org     Dict_Ptr
 127+ 6ABD             >
 127+ 6ABD 37 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 6ABF             >
 127+ 6ABF             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6ABF CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6AC2             >
 127+ 6AC2             >
 127+ 6AC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6AC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6AC2             >
 127+ 6AC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6AC2 00 02       >                dw      512
 128+ 6AC4                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 6AC4             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 6AC4             >
 128+ 6AC4             >Dict_Ptr        defl    $
 128+ 6AC4             >
 128+ 6AC4             >//              ______________________________________________________________________
 128+ 6AC4             >//              Heap part
 128+ 6AC4             >
 128+ 6AC4             >
 128+ 6AC4             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E439             >
 128+ E439             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E439             >Latest_Definition defl  Heap_Ptr
 128+ E439             >
 128+ E439             >                // dummy db directives used to calculate length of namec
 128+ E439 42 2F 53 43 >                db      "B/SCR"
 128+ E43D 52          >
 128+ E43E             >len_NFA         defl    $ - temp_NFA
 128+ E43E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E439             >
 128+ E439 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E43A 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43E 52          >
 128+ E43F             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43E D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E43F             >
 128+ E43F 2F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E441             >Prev_Ptr        defl    Heap_Ptr
 128+ E441             >
 128+ E441             >mirror_Ptr      defl    $
 128+ E441             >
 128+ E441 C6 6A       >                dw      Dict_Ptr + 2        // xt
 128+ E443             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E443             >
 128+ E443             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E443             >
 128+ E443             >//              ______________________________________________________________________
 128+ E443             >//              Dictionary part
 128+ E443             >
 128+ E443             >                org     Dict_Ptr
 128+ 6AC4             >
 128+ 6AC4 41 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 6AC6             >
 128+ 6AC6             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6AC6 CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6AC9             >
 128+ 6AC9             >
 128+ 6AC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6AC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6AC9             >
 128+ 6AC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6AC9 02 00       >                dw      2
 129+ 6ACB                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 6ACB             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 6ACB             >
 129+ 6ACB             >Dict_Ptr        defl    $
 129+ 6ACB             >
 129+ 6ACB             >//              ______________________________________________________________________
 129+ 6ACB             >//              Heap part
 129+ 6ACB             >
 129+ 6ACB             >
 129+ 6ACB             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E443             >
 129+ E443             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E443             >Latest_Definition defl  Heap_Ptr
 129+ E443             >
 129+ E443             >                // dummy db directives used to calculate length of namec
 129+ E443 4C 2F 53 43 >                db      "L/SCR"
 129+ E447 52          >
 129+ E448             >len_NFA         defl    $ - temp_NFA
 129+ E448             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E443             >
 129+ E443 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E444 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E448 52          >
 129+ E449             >                org     $-1                 // alter last byte of Name just above to set
 129+ E448 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E449             >
 129+ E449 39 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E44B             >Prev_Ptr        defl    Heap_Ptr
 129+ E44B             >
 129+ E44B             >mirror_Ptr      defl    $
 129+ E44B             >
 129+ E44B CD 6A       >                dw      Dict_Ptr + 2        // xt
 129+ E44D             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44D             >
 129+ E44D             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44D             >
 129+ E44D             >//              ______________________________________________________________________
 129+ E44D             >//              Dictionary part
 129+ E44D             >
 129+ E44D             >                org     Dict_Ptr
 129+ 6ACB             >
 129+ 6ACB 4B 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 6ACD             >
 129+ 6ACD             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 6ACD CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 6AD0             >
 129+ 6AD0             >
 129+ 6AD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 6AD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 6AD0             >
 129+ 6AD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 6AD0 10 00       >                dw      16
 130+ 6AD2
 131+ 6AD2              //  ______________________________________________________________________
 132+ 6AD2              //
 133+ 6AD2              // +origin         --
 134+ 6AD2              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 6AD2              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 6AD2              //              dw      PLUS                    // +
 137+ 6AD2              //              dw      EXIT                    // ;
 138+ 6AD2                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 6AD2             >
 138+ 6AD2             >Dict_Ptr        defl    $
 138+ 6AD2             >
 138+ 6AD2             >//              ______________________________________________________________________
 138+ 6AD2             >//              Heap part
 138+ 6AD2             >
 138+ 6AD2             >
 138+ 6AD2             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44D             >
 138+ E44D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44D             >Latest_Definition defl  Heap_Ptr
 138+ E44D             >
 138+ E44D             >                // dummy db directives used to calculate length of namec
 138+ E44D 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E451 47 49 4E    >
 138+ E454             >len_NFA         defl    $ - temp_NFA
 138+ E454             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44D             >
 138+ E44D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44E 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E452 47 49 4E    >
 138+ E455             >                org     $-1                 // alter last byte of Name just above to set
 138+ E454 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E455             >
 138+ E455 43 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E457             >Prev_Ptr        defl    Heap_Ptr
 138+ E457             >
 138+ E457             >mirror_Ptr      defl    $
 138+ E457             >
 138+ E457 D4 6A       >                dw      Dict_Ptr + 2        // xt
 138+ E459             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E459             >
 138+ E459             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E459             >
 138+ E459             >//              ______________________________________________________________________
 138+ E459             >//              Dictionary part
 138+ E459             >
 138+ E459             >                org     Dict_Ptr
 138+ 6AD2             >
 138+ 6AD2 57 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 6AD4             >
 138+ 6AD4             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6AD4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 6AD4 ~           >
 138+ 6AD4 ~           >
 138+ 6AD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 6AD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 6AD4             >
 138+ 6AD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6AD4 D9                           exx
 140+ 6AD5 E1                           pop     hl
 141+ 6AD6 11 66 63                     ld      de, Cold_origin
 142+ 6AD9 19                           add     hl, de
 143+ 6ADA E5                           push    hl
 144+ 6ADB D9                           exx
 145+ 6ADC                              next
 145+ 6ADC DD E9       >                jp      (ix)
 146+ 6ADE
 147+ 6ADE
 148+ 6ADE              //  ______________________________________________________________________
 149+ 6ADE              //
 150+ 6ADE                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 6ADE             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 6ADE             >
 150+ 6ADE             >Dict_Ptr        defl    $
 150+ 6ADE             >
 150+ 6ADE             >//              ______________________________________________________________________
 150+ 6ADE             >//              Heap part
 150+ 6ADE             >
 150+ 6ADE             >
 150+ 6ADE             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E459             >
 150+ E459             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E459             >Latest_Definition defl  Heap_Ptr
 150+ E459             >
 150+ E459             >                // dummy db directives used to calculate length of namec
 150+ E459 28 4E 45 58 >                db      "(NEXT)"
 150+ E45D 54 29       >
 150+ E45F             >len_NFA         defl    $ - temp_NFA
 150+ E45F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E459             >
 150+ E459 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E45A 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45E 54 29       >
 150+ E460             >                org     $-1                 // alter last byte of Name just above to set
 150+ E45F A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E460             >
 150+ E460 4D 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E462             >Prev_Ptr        defl    Heap_Ptr
 150+ E462             >
 150+ E462             >mirror_Ptr      defl    $
 150+ E462             >
 150+ E462 E0 6A       >                dw      Dict_Ptr + 2        // xt
 150+ E464             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E464             >
 150+ E464             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E464             >
 150+ E464             >//              ______________________________________________________________________
 150+ E464             >//              Dictionary part
 150+ E464             >
 150+ E464             >                org     Dict_Ptr
 150+ 6ADE             >
 150+ 6ADE 62 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 6AE0             >
 150+ 6AE0             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6AE0 CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 6AE3             >
 150+ 6AE3             >
 150+ 6AE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6AE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6AE3             >
 150+ 6AE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6AE3 9A 63       >                dw      Next_Ptr
 151+ 6AE5
 152+ 6AE5              //  ______________________________________________________________________
 153+ 6AE5              //
 154+ 6AE5
 155+ 6AE5                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 6AE5             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 6AE5             >
 155+ 6AE5             >Dict_Ptr        defl    $
 155+ 6AE5             >
 155+ 6AE5             >//              ______________________________________________________________________
 155+ 6AE5             >//              Heap part
 155+ 6AE5             >
 155+ 6AE5             >
 155+ 6AE5             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E464             >
 155+ E464             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E464             >Latest_Definition defl  Heap_Ptr
 155+ E464             >
 155+ E464             >                // dummy db directives used to calculate length of namec
 155+ E464 53 30       >                db      "S0"
 155+ E466             >len_NFA         defl    $ - temp_NFA
 155+ E466             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E464             >
 155+ E464 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E465 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E467             >                org     $-1                 // alter last byte of Name just above to set
 155+ E466 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E467             >
 155+ E467 59 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E469             >Prev_Ptr        defl    Heap_Ptr
 155+ E469             >
 155+ E469             >mirror_Ptr      defl    $
 155+ E469             >
 155+ E469 E7 6A       >                dw      Dict_Ptr + 2        // xt
 155+ E46B             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E46B             >
 155+ E46B             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E46B             >
 155+ E46B             >//              ______________________________________________________________________
 155+ E46B             >//              Dictionary part
 155+ E46B             >
 155+ E46B             >                org     Dict_Ptr
 155+ 6AE5             >
 155+ 6AE5 69 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 6AE7             >
 155+ 6AE7             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6AE7 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6AEA             >
 155+ 6AEA             >
 155+ 6AEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6AEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6AEA             >
 155+ 6AEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6AEA 06          >                db      06
 156+ 6AEB                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 6AEB             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 6AEB             >
 156+ 6AEB             >Dict_Ptr        defl    $
 156+ 6AEB             >
 156+ 6AEB             >//              ______________________________________________________________________
 156+ 6AEB             >//              Heap part
 156+ 6AEB             >
 156+ 6AEB             >
 156+ 6AEB             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E46B             >
 156+ E46B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E46B             >Latest_Definition defl  Heap_Ptr
 156+ E46B             >
 156+ E46B             >                // dummy db directives used to calculate length of namec
 156+ E46B 52 30       >                db      "R0"
 156+ E46D             >len_NFA         defl    $ - temp_NFA
 156+ E46D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E46B             >
 156+ E46B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46C 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46E             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46D B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46E             >
 156+ E46E 64 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E470             >Prev_Ptr        defl    Heap_Ptr
 156+ E470             >
 156+ E470             >mirror_Ptr      defl    $
 156+ E470             >
 156+ E470 ED 6A       >                dw      Dict_Ptr + 2        // xt
 156+ E472             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E472             >
 156+ E472             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E472             >
 156+ E472             >//              ______________________________________________________________________
 156+ E472             >//              Dictionary part
 156+ E472             >
 156+ E472             >                org     Dict_Ptr
 156+ 6AEB             >
 156+ 6AEB 70 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 6AED             >
 156+ 6AED             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6AED CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6AF0             >
 156+ 6AF0             >
 156+ 6AF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6AF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6AF0             >
 156+ 6AF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6AF0 08          >                db      08
 157+ 6AF1                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 6AF1             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 6AF1             >
 157+ 6AF1             >Dict_Ptr        defl    $
 157+ 6AF1             >
 157+ 6AF1             >//              ______________________________________________________________________
 157+ 6AF1             >//              Heap part
 157+ 6AF1             >
 157+ 6AF1             >
 157+ 6AF1             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E472             >
 157+ E472             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E472             >Latest_Definition defl  Heap_Ptr
 157+ E472             >
 157+ E472             >                // dummy db directives used to calculate length of namec
 157+ E472 54 49 42    >                db      "TIB"
 157+ E475             >len_NFA         defl    $ - temp_NFA
 157+ E475             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E472             >
 157+ E472 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E473 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E476             >                org     $-1                 // alter last byte of Name just above to set
 157+ E475 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E476             >
 157+ E476 6B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E478             >Prev_Ptr        defl    Heap_Ptr
 157+ E478             >
 157+ E478             >mirror_Ptr      defl    $
 157+ E478             >
 157+ E478 F3 6A       >                dw      Dict_Ptr + 2        // xt
 157+ E47A             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E47A             >
 157+ E47A             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E47A             >
 157+ E47A             >//              ______________________________________________________________________
 157+ E47A             >//              Dictionary part
 157+ E47A             >
 157+ E47A             >                org     Dict_Ptr
 157+ 6AF1             >
 157+ 6AF1 78 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 6AF3             >
 157+ 6AF3             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6AF3 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6AF6             >
 157+ 6AF6             >
 157+ 6AF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6AF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6AF6             >
 157+ 6AF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6AF6 0A          >                db      10
 158+ 6AF7                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 6AF7             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 6AF7             >
 158+ 6AF7             >Dict_Ptr        defl    $
 158+ 6AF7             >
 158+ 6AF7             >//              ______________________________________________________________________
 158+ 6AF7             >//              Heap part
 158+ 6AF7             >
 158+ 6AF7             >
 158+ 6AF7             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E47A             >
 158+ E47A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E47A             >Latest_Definition defl  Heap_Ptr
 158+ E47A             >
 158+ E47A             >                // dummy db directives used to calculate length of namec
 158+ E47A 57 49 44 54 >                db      "WIDTH"
 158+ E47E 48          >
 158+ E47F             >len_NFA         defl    $ - temp_NFA
 158+ E47F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E47A             >
 158+ E47A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E47B 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E47F 48          >
 158+ E480             >                org     $-1                 // alter last byte of Name just above to set
 158+ E47F C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E480             >
 158+ E480 72 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E482             >Prev_Ptr        defl    Heap_Ptr
 158+ E482             >
 158+ E482             >mirror_Ptr      defl    $
 158+ E482             >
 158+ E482 F9 6A       >                dw      Dict_Ptr + 2        // xt
 158+ E484             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E484             >
 158+ E484             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E484             >
 158+ E484             >//              ______________________________________________________________________
 158+ E484             >//              Dictionary part
 158+ E484             >
 158+ E484             >                org     Dict_Ptr
 158+ 6AF7             >
 158+ 6AF7 82 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 6AF9             >
 158+ 6AF9             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6AF9 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6AFC             >
 158+ 6AFC             >
 158+ 6AFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6AFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6AFC             >
 158+ 6AFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6AFC 0C          >                db      12
 159+ 6AFD                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 6AFD             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 6AFD             >
 159+ 6AFD             >Dict_Ptr        defl    $
 159+ 6AFD             >
 159+ 6AFD             >//              ______________________________________________________________________
 159+ 6AFD             >//              Heap part
 159+ 6AFD             >
 159+ 6AFD             >
 159+ 6AFD             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E484             >
 159+ E484             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E484             >Latest_Definition defl  Heap_Ptr
 159+ E484             >
 159+ E484             >                // dummy db directives used to calculate length of namec
 159+ E484 57 41 52 4E >                db      "WARNING"
 159+ E488 49 4E 47    >
 159+ E48B             >len_NFA         defl    $ - temp_NFA
 159+ E48B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E484             >
 159+ E484 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E485 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E489 49 4E 47    >
 159+ E48C             >                org     $-1                 // alter last byte of Name just above to set
 159+ E48B C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48C             >
 159+ E48C 7A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48E             >Prev_Ptr        defl    Heap_Ptr
 159+ E48E             >
 159+ E48E             >mirror_Ptr      defl    $
 159+ E48E             >
 159+ E48E FF 6A       >                dw      Dict_Ptr + 2        // xt
 159+ E490             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E490             >
 159+ E490             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E490             >
 159+ E490             >//              ______________________________________________________________________
 159+ E490             >//              Dictionary part
 159+ E490             >
 159+ E490             >                org     Dict_Ptr
 159+ 6AFD             >
 159+ 6AFD 8E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 6AFF             >
 159+ 6AFF             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6AFF CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6B02             >
 159+ 6B02             >
 159+ 6B02             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6B02             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6B02             >
 159+ 6B02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6B02 0E          >                db      14
 160+ 6B03                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 6B03             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 6B03             >
 160+ 6B03             >Dict_Ptr        defl    $
 160+ 6B03             >
 160+ 6B03             >//              ______________________________________________________________________
 160+ 6B03             >//              Heap part
 160+ 6B03             >
 160+ 6B03             >
 160+ 6B03             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E490             >
 160+ E490             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E490             >Latest_Definition defl  Heap_Ptr
 160+ E490             >
 160+ E490             >                // dummy db directives used to calculate length of namec
 160+ E490 46 45 4E 43 >                db      "FENCE"
 160+ E494 45          >
 160+ E495             >len_NFA         defl    $ - temp_NFA
 160+ E495             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E490             >
 160+ E490 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E491 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E495 45          >
 160+ E496             >                org     $-1                 // alter last byte of Name just above to set
 160+ E495 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E496             >
 160+ E496 84 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E498             >Prev_Ptr        defl    Heap_Ptr
 160+ E498             >
 160+ E498             >mirror_Ptr      defl    $
 160+ E498             >
 160+ E498 05 6B       >                dw      Dict_Ptr + 2        // xt
 160+ E49A             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E49A             >
 160+ E49A             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E49A             >
 160+ E49A             >//              ______________________________________________________________________
 160+ E49A             >//              Dictionary part
 160+ E49A             >
 160+ E49A             >                org     Dict_Ptr
 160+ 6B03             >
 160+ 6B03 98 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 6B05             >
 160+ 6B05             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6B05 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6B08             >
 160+ 6B08             >
 160+ 6B08             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6B08             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6B08             >
 160+ 6B08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6B08 10          >                db      16
 161+ 6B09                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 6B09             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 6B09             >
 161+ 6B09             >Dict_Ptr        defl    $
 161+ 6B09             >
 161+ 6B09             >//              ______________________________________________________________________
 161+ 6B09             >//              Heap part
 161+ 6B09             >
 161+ 6B09             >
 161+ 6B09             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E49A             >
 161+ E49A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E49A             >Latest_Definition defl  Heap_Ptr
 161+ E49A             >
 161+ E49A             >                // dummy db directives used to calculate length of namec
 161+ E49A 44 50       >                db      "DP"
 161+ E49C             >len_NFA         defl    $ - temp_NFA
 161+ E49C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E49A             >
 161+ E49A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E49B 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49D             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49C D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49D             >
 161+ E49D 90 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E49F             >Prev_Ptr        defl    Heap_Ptr
 161+ E49F             >
 161+ E49F             >mirror_Ptr      defl    $
 161+ E49F             >
 161+ E49F 0B 6B       >                dw      Dict_Ptr + 2        // xt
 161+ E4A1             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E4A1             >
 161+ E4A1             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E4A1             >
 161+ E4A1             >//              ______________________________________________________________________
 161+ E4A1             >//              Dictionary part
 161+ E4A1             >
 161+ E4A1             >                org     Dict_Ptr
 161+ 6B09             >
 161+ 6B09 9F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 6B0B             >
 161+ 6B0B             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6B0B CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6B0E             >
 161+ 6B0E             >
 161+ 6B0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6B0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6B0E             >
 161+ 6B0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6B0E 12          >                db      18
 162+ 6B0F                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 6B0F             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 6B0F             >
 162+ 6B0F             >Dict_Ptr        defl    $
 162+ 6B0F             >
 162+ 6B0F             >//              ______________________________________________________________________
 162+ 6B0F             >//              Heap part
 162+ 6B0F             >
 162+ 6B0F             >
 162+ 6B0F             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E4A1             >
 162+ E4A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E4A1             >Latest_Definition defl  Heap_Ptr
 162+ E4A1             >
 162+ E4A1             >                // dummy db directives used to calculate length of namec
 162+ E4A1 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A5 4C 49 4E 4B >
 162+ E4A9             >len_NFA         defl    $ - temp_NFA
 162+ E4A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E4A1             >
 162+ E4A1 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A2 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A6 4C 49 4E 4B >
 162+ E4AA             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4A9 CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4AA             >
 162+ E4AA 9A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AC             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AC             >
 162+ E4AC             >mirror_Ptr      defl    $
 162+ E4AC             >
 162+ E4AC 11 6B       >                dw      Dict_Ptr + 2        // xt
 162+ E4AE             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AE             >
 162+ E4AE             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AE             >
 162+ E4AE             >//              ______________________________________________________________________
 162+ E4AE             >//              Dictionary part
 162+ E4AE             >
 162+ E4AE             >                org     Dict_Ptr
 162+ 6B0F             >
 162+ 6B0F AC 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6B11             >
 162+ 6B11             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6B11 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6B14             >
 162+ 6B14             >
 162+ 6B14             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6B14             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6B14             >
 162+ 6B14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6B14 14          >                db      20
 163+ 6B15                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 6B15             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 6B15             >
 163+ 6B15             >Dict_Ptr        defl    $
 163+ 6B15             >
 163+ 6B15             >//              ______________________________________________________________________
 163+ 6B15             >//              Heap part
 163+ 6B15             >
 163+ 6B15             >
 163+ 6B15             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AE             >
 163+ E4AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AE             >Latest_Definition defl  Heap_Ptr
 163+ E4AE             >
 163+ E4AE             >                // dummy db directives used to calculate length of namec
 163+ E4AE 46 49 52 53 >                db      "FIRST"
 163+ E4B2 54          >
 163+ E4B3             >len_NFA         defl    $ - temp_NFA
 163+ E4B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AE             >
 163+ E4AE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4AF 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B3 54          >
 163+ E4B4             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B3 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B4             >
 163+ E4B4 A1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B6             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B6             >
 163+ E4B6             >mirror_Ptr      defl    $
 163+ E4B6             >
 163+ E4B6 17 6B       >                dw      Dict_Ptr + 2        // xt
 163+ E4B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B8             >
 163+ E4B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B8             >
 163+ E4B8             >//              ______________________________________________________________________
 163+ E4B8             >//              Dictionary part
 163+ E4B8             >
 163+ E4B8             >                org     Dict_Ptr
 163+ 6B15             >
 163+ 6B15 B6 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 6B17             >
 163+ 6B17             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6B17 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6B1A             >
 163+ 6B1A             >
 163+ 6B1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6B1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6B1A             >
 163+ 6B1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6B1A 16          >                db      22
 164+ 6B1B                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 6B1B             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 6B1B             >
 164+ 6B1B             >Dict_Ptr        defl    $
 164+ 6B1B             >
 164+ 6B1B             >//              ______________________________________________________________________
 164+ 6B1B             >//              Heap part
 164+ 6B1B             >
 164+ 6B1B             >
 164+ 6B1B             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B8             >
 164+ E4B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B8             >Latest_Definition defl  Heap_Ptr
 164+ E4B8             >
 164+ E4B8             >                // dummy db directives used to calculate length of namec
 164+ E4B8 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BC 54          >
 164+ E4BD             >len_NFA         defl    $ - temp_NFA
 164+ E4BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B8             >
 164+ E4B8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4B9 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BD 54          >
 164+ E4BE             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BD D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BE             >
 164+ E4BE AE 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4C0             >Prev_Ptr        defl    Heap_Ptr
 164+ E4C0             >
 164+ E4C0             >mirror_Ptr      defl    $
 164+ E4C0             >
 164+ E4C0 1D 6B       >                dw      Dict_Ptr + 2        // xt
 164+ E4C2             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C2             >
 164+ E4C2             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C2             >
 164+ E4C2             >//              ______________________________________________________________________
 164+ E4C2             >//              Dictionary part
 164+ E4C2             >
 164+ E4C2             >                org     Dict_Ptr
 164+ 6B1B             >
 164+ 6B1B C0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 6B1D             >
 164+ 6B1D             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6B1D CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6B20             >
 164+ 6B20             >
 164+ 6B20             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6B20             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6B20             >
 164+ 6B20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6B20 18          >                db      24
 165+ 6B21                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 6B21             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 6B21             >
 165+ 6B21             >Dict_Ptr        defl    $
 165+ 6B21             >
 165+ 6B21             >//              ______________________________________________________________________
 165+ 6B21             >//              Heap part
 165+ 6B21             >
 165+ 6B21             >
 165+ 6B21             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C2             >
 165+ E4C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C2             >Latest_Definition defl  Heap_Ptr
 165+ E4C2             >
 165+ E4C2             >                // dummy db directives used to calculate length of namec
 165+ E4C2 48 50       >                db      "HP"
 165+ E4C4             >len_NFA         defl    $ - temp_NFA
 165+ E4C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C2             >
 165+ E4C2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C3 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C5             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C4 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C5             >
 165+ E4C5 B8 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C7             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C7             >
 165+ E4C7             >mirror_Ptr      defl    $
 165+ E4C7             >
 165+ E4C7 23 6B       >                dw      Dict_Ptr + 2        // xt
 165+ E4C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4C9             >
 165+ E4C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4C9             >
 165+ E4C9             >//              ______________________________________________________________________
 165+ E4C9             >//              Dictionary part
 165+ E4C9             >
 165+ E4C9             >                org     Dict_Ptr
 165+ 6B21             >
 165+ 6B21 C7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 6B23             >
 165+ 6B23             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6B23 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6B26             >
 165+ 6B26             >
 165+ 6B26             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6B26             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6B26             >
 165+ 6B26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6B26 1A          >                db      26
 166+ 6B27                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 6B27             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 6B27             >
 166+ 6B27             >Dict_Ptr        defl    $
 166+ 6B27             >
 166+ 6B27             >//              ______________________________________________________________________
 166+ 6B27             >//              Heap part
 166+ 6B27             >
 166+ 6B27             >
 166+ 6B27             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4C9             >
 166+ E4C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4C9             >Latest_Definition defl  Heap_Ptr
 166+ E4C9             >
 166+ E4C9             >                // dummy db directives used to calculate length of namec
 166+ E4C9 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CD 45          >
 166+ E4CE             >len_NFA         defl    $ - temp_NFA
 166+ E4CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4C9             >
 166+ E4C9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4CA 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CE 45          >
 166+ E4CF             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CE C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4CF             >
 166+ E4CF C2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4D1             >Prev_Ptr        defl    Heap_Ptr
 166+ E4D1             >
 166+ E4D1             >mirror_Ptr      defl    $
 166+ E4D1             >
 166+ E4D1 29 6B       >                dw      Dict_Ptr + 2        // xt
 166+ E4D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D3             >
 166+ E4D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D3             >
 166+ E4D3             >//              ______________________________________________________________________
 166+ E4D3             >//              Dictionary part
 166+ E4D3             >
 166+ E4D3             >                org     Dict_Ptr
 166+ 6B27             >
 166+ 6B27 D1 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 6B29             >
 166+ 6B29             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6B29 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6B2C             >
 166+ 6B2C             >
 166+ 6B2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6B2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6B2C             >
 166+ 6B2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6B2C 1C          >                db      28
 167+ 6B2D                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 6B2D             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 6B2D             >
 167+ 6B2D             >Dict_Ptr        defl    $
 167+ 6B2D             >
 167+ 6B2D             >//              ______________________________________________________________________
 167+ 6B2D             >//              Heap part
 167+ 6B2D             >
 167+ 6B2D             >
 167+ 6B2D             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D3             >
 167+ E4D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D3             >Latest_Definition defl  Heap_Ptr
 167+ E4D3             >
 167+ E4D3             >                // dummy db directives used to calculate length of namec
 167+ E4D3 42 4C 4B    >                db      "BLK"
 167+ E4D6             >len_NFA         defl    $ - temp_NFA
 167+ E4D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D3             >
 167+ E4D3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D4 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D7             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D6 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D7             >
 167+ E4D7 C9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4D9             >Prev_Ptr        defl    Heap_Ptr
 167+ E4D9             >
 167+ E4D9             >mirror_Ptr      defl    $
 167+ E4D9             >
 167+ E4D9 2F 6B       >                dw      Dict_Ptr + 2        // xt
 167+ E4DB             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4DB             >
 167+ E4DB             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4DB             >
 167+ E4DB             >//              ______________________________________________________________________
 167+ E4DB             >//              Dictionary part
 167+ E4DB             >
 167+ E4DB             >                org     Dict_Ptr
 167+ 6B2D             >
 167+ 6B2D D9 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 6B2F             >
 167+ 6B2F             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6B2F CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6B32             >
 167+ 6B32             >
 167+ 6B32             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6B32             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6B32             >
 167+ 6B32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6B32 1E          >                db      30
 168+ 6B33                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 6B33             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 6B33             >
 168+ 6B33             >Dict_Ptr        defl    $
 168+ 6B33             >
 168+ 6B33             >//              ______________________________________________________________________
 168+ 6B33             >//              Heap part
 168+ 6B33             >
 168+ 6B33             >
 168+ 6B33             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4DB             >
 168+ E4DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4DB             >Latest_Definition defl  Heap_Ptr
 168+ E4DB             >
 168+ E4DB             >                // dummy db directives used to calculate length of namec
 168+ E4DB 3E 49 4E    >                db      ">IN"
 168+ E4DE             >len_NFA         defl    $ - temp_NFA
 168+ E4DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4DB             >
 168+ E4DB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DC 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4DF             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DE CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4DF             >
 168+ E4DF D3 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4E1             >Prev_Ptr        defl    Heap_Ptr
 168+ E4E1             >
 168+ E4E1             >mirror_Ptr      defl    $
 168+ E4E1             >
 168+ E4E1 35 6B       >                dw      Dict_Ptr + 2        // xt
 168+ E4E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E3             >
 168+ E4E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E3             >
 168+ E4E3             >//              ______________________________________________________________________
 168+ E4E3             >//              Dictionary part
 168+ E4E3             >
 168+ E4E3             >                org     Dict_Ptr
 168+ 6B33             >
 168+ 6B33 E1 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 6B35             >
 168+ 6B35             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6B35 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6B38             >
 168+ 6B38             >
 168+ 6B38             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6B38             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6B38             >
 168+ 6B38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6B38 20          >                db      32
 169+ 6B39                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 6B39             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 6B39             >
 169+ 6B39             >Dict_Ptr        defl    $
 169+ 6B39             >
 169+ 6B39             >//              ______________________________________________________________________
 169+ 6B39             >//              Heap part
 169+ 6B39             >
 169+ 6B39             >
 169+ 6B39             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E3             >
 169+ E4E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E3             >Latest_Definition defl  Heap_Ptr
 169+ E4E3             >
 169+ E4E3             >                // dummy db directives used to calculate length of namec
 169+ E4E3 4F 55 54    >                db      "OUT"
 169+ E4E6             >len_NFA         defl    $ - temp_NFA
 169+ E4E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E3             >
 169+ E4E3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E4 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E7             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E6 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E7             >
 169+ E4E7 DB 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4E9             >Prev_Ptr        defl    Heap_Ptr
 169+ E4E9             >
 169+ E4E9             >mirror_Ptr      defl    $
 169+ E4E9             >
 169+ E4E9 3B 6B       >                dw      Dict_Ptr + 2        // xt
 169+ E4EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4EB             >
 169+ E4EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4EB             >
 169+ E4EB             >//              ______________________________________________________________________
 169+ E4EB             >//              Dictionary part
 169+ E4EB             >
 169+ E4EB             >                org     Dict_Ptr
 169+ 6B39             >
 169+ 6B39 E9 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 6B3B             >
 169+ 6B3B             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6B3B CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6B3E             >
 169+ 6B3E             >
 169+ 6B3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6B3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6B3E             >
 169+ 6B3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6B3E 22          >                db      34
 170+ 6B3F                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 6B3F             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 6B3F             >
 170+ 6B3F             >Dict_Ptr        defl    $
 170+ 6B3F             >
 170+ 6B3F             >//              ______________________________________________________________________
 170+ 6B3F             >//              Heap part
 170+ 6B3F             >
 170+ 6B3F             >
 170+ 6B3F             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4EB             >
 170+ E4EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4EB             >Latest_Definition defl  Heap_Ptr
 170+ E4EB             >
 170+ E4EB             >                // dummy db directives used to calculate length of namec
 170+ E4EB 53 43 52    >                db      "SCR"
 170+ E4EE             >len_NFA         defl    $ - temp_NFA
 170+ E4EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4EB             >
 170+ E4EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4EC 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4EF             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4EE D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4EF             >
 170+ E4EF E3 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4F1             >Prev_Ptr        defl    Heap_Ptr
 170+ E4F1             >
 170+ E4F1             >mirror_Ptr      defl    $
 170+ E4F1             >
 170+ E4F1 41 6B       >                dw      Dict_Ptr + 2        // xt
 170+ E4F3             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F3             >
 170+ E4F3             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F3             >
 170+ E4F3             >//              ______________________________________________________________________
 170+ E4F3             >//              Dictionary part
 170+ E4F3             >
 170+ E4F3             >                org     Dict_Ptr
 170+ 6B3F             >
 170+ 6B3F F1 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 6B41             >
 170+ 6B41             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6B41 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6B44             >
 170+ 6B44             >
 170+ 6B44             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6B44             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6B44             >
 170+ 6B44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6B44 24          >                db      36
 171+ 6B45                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 6B45             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 6B45             >
 171+ 6B45             >Dict_Ptr        defl    $
 171+ 6B45             >
 171+ 6B45             >//              ______________________________________________________________________
 171+ 6B45             >//              Heap part
 171+ 6B45             >
 171+ 6B45             >
 171+ 6B45             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F3             >
 171+ E4F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F3             >Latest_Definition defl  Heap_Ptr
 171+ E4F3             >
 171+ E4F3             >                // dummy db directives used to calculate length of namec
 171+ E4F3 4F 46 46 53 >                db      "OFFSET"
 171+ E4F7 45 54       >
 171+ E4F9             >len_NFA         defl    $ - temp_NFA
 171+ E4F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F3             >
 171+ E4F3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F4 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F8 45 54       >
 171+ E4FA             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4F9 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4FA             >
 171+ E4FA EB 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FC             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FC             >
 171+ E4FC             >mirror_Ptr      defl    $
 171+ E4FC             >
 171+ E4FC 47 6B       >                dw      Dict_Ptr + 2        // xt
 171+ E4FE             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FE             >
 171+ E4FE             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FE             >
 171+ E4FE             >//              ______________________________________________________________________
 171+ E4FE             >//              Dictionary part
 171+ E4FE             >
 171+ E4FE             >                org     Dict_Ptr
 171+ 6B45             >
 171+ 6B45 FC 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 6B47             >
 171+ 6B47             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6B47 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6B4A             >
 171+ 6B4A             >
 171+ 6B4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6B4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6B4A             >
 171+ 6B4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6B4A 26          >                db      38
 172+ 6B4B                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 6B4B             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 6B4B             >
 172+ 6B4B             >Dict_Ptr        defl    $
 172+ 6B4B             >
 172+ 6B4B             >//              ______________________________________________________________________
 172+ 6B4B             >//              Heap part
 172+ 6B4B             >
 172+ 6B4B             >
 172+ 6B4B             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FE             >
 172+ E4FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FE             >Latest_Definition defl  Heap_Ptr
 172+ E4FE             >
 172+ E4FE             >                // dummy db directives used to calculate length of namec
 172+ E4FE 43 4F 4E 54 >                db      "CONTEXT"
 172+ E502 45 58 54    >
 172+ E505             >len_NFA         defl    $ - temp_NFA
 172+ E505             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FE             >
 172+ E4FE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E4FF 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E503 45 58 54    >
 172+ E506             >                org     $-1                 // alter last byte of Name just above to set
 172+ E505 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E506             >
 172+ E506 F3 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E508             >Prev_Ptr        defl    Heap_Ptr
 172+ E508             >
 172+ E508             >mirror_Ptr      defl    $
 172+ E508             >
 172+ E508 4D 6B       >                dw      Dict_Ptr + 2        // xt
 172+ E50A             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E50A             >
 172+ E50A             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E50A             >
 172+ E50A             >//              ______________________________________________________________________
 172+ E50A             >//              Dictionary part
 172+ E50A             >
 172+ E50A             >                org     Dict_Ptr
 172+ 6B4B             >
 172+ 6B4B 08 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 6B4D             >
 172+ 6B4D             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6B4D CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6B50             >
 172+ 6B50             >
 172+ 6B50             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6B50             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6B50             >
 172+ 6B50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6B50 28          >                db      40
 173+ 6B51                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 6B51             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 6B51             >
 173+ 6B51             >Dict_Ptr        defl    $
 173+ 6B51             >
 173+ 6B51             >//              ______________________________________________________________________
 173+ 6B51             >//              Heap part
 173+ 6B51             >
 173+ 6B51             >
 173+ 6B51             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E50A             >
 173+ E50A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E50A             >Latest_Definition defl  Heap_Ptr
 173+ E50A             >
 173+ E50A             >                // dummy db directives used to calculate length of namec
 173+ E50A 43 55 52 52 >                db      "CURRENT"
 173+ E50E 45 4E 54    >
 173+ E511             >len_NFA         defl    $ - temp_NFA
 173+ E511             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E50A             >
 173+ E50A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E50B 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E50F 45 4E 54    >
 173+ E512             >                org     $-1                 // alter last byte of Name just above to set
 173+ E511 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E512             >
 173+ E512 FE 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E514             >Prev_Ptr        defl    Heap_Ptr
 173+ E514             >
 173+ E514             >mirror_Ptr      defl    $
 173+ E514             >
 173+ E514 53 6B       >                dw      Dict_Ptr + 2        // xt
 173+ E516             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E516             >
 173+ E516             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E516             >
 173+ E516             >//              ______________________________________________________________________
 173+ E516             >//              Dictionary part
 173+ E516             >
 173+ E516             >                org     Dict_Ptr
 173+ 6B51             >
 173+ 6B51 14 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 6B53             >
 173+ 6B53             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6B53 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6B56             >
 173+ 6B56             >
 173+ 6B56             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6B56             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6B56             >
 173+ 6B56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6B56 2A          >                db      42
 174+ 6B57                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 6B57             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 6B57             >
 174+ 6B57             >Dict_Ptr        defl    $
 174+ 6B57             >
 174+ 6B57             >//              ______________________________________________________________________
 174+ 6B57             >//              Heap part
 174+ 6B57             >
 174+ 6B57             >
 174+ 6B57             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E516             >
 174+ E516             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E516             >Latest_Definition defl  Heap_Ptr
 174+ E516             >
 174+ E516             >                // dummy db directives used to calculate length of namec
 174+ E516 53 54 41 54 >                db      "STATE"
 174+ E51A 45          >
 174+ E51B             >len_NFA         defl    $ - temp_NFA
 174+ E51B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E516             >
 174+ E516 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E517 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E51B 45          >
 174+ E51C             >                org     $-1                 // alter last byte of Name just above to set
 174+ E51B C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51C             >
 174+ E51C 0A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51E             >Prev_Ptr        defl    Heap_Ptr
 174+ E51E             >
 174+ E51E             >mirror_Ptr      defl    $
 174+ E51E             >
 174+ E51E 59 6B       >                dw      Dict_Ptr + 2        // xt
 174+ E520             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E520             >
 174+ E520             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E520             >
 174+ E520             >//              ______________________________________________________________________
 174+ E520             >//              Dictionary part
 174+ E520             >
 174+ E520             >                org     Dict_Ptr
 174+ 6B57             >
 174+ 6B57 1E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 6B59             >
 174+ 6B59             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6B59 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6B5C             >
 174+ 6B5C             >
 174+ 6B5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6B5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6B5C             >
 174+ 6B5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6B5C 2C          >                db      44
 175+ 6B5D                              User_Def BASE       , "BASE"      , 46 //
 175+ 6B5D             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 6B5D             >
 175+ 6B5D             >Dict_Ptr        defl    $
 175+ 6B5D             >
 175+ 6B5D             >//              ______________________________________________________________________
 175+ 6B5D             >//              Heap part
 175+ 6B5D             >
 175+ 6B5D             >
 175+ 6B5D             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E520             >
 175+ E520             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E520             >Latest_Definition defl  Heap_Ptr
 175+ E520             >
 175+ E520             >                // dummy db directives used to calculate length of namec
 175+ E520 42 41 53 45 >                db      "BASE"
 175+ E524             >len_NFA         defl    $ - temp_NFA
 175+ E524             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E520             >
 175+ E520 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E521 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E525             >                org     $-1                 // alter last byte of Name just above to set
 175+ E524 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E525             >
 175+ E525 16 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E527             >Prev_Ptr        defl    Heap_Ptr
 175+ E527             >
 175+ E527             >mirror_Ptr      defl    $
 175+ E527             >
 175+ E527 5F 6B       >                dw      Dict_Ptr + 2        // xt
 175+ E529             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E529             >
 175+ E529             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E529             >
 175+ E529             >//              ______________________________________________________________________
 175+ E529             >//              Dictionary part
 175+ E529             >
 175+ E529             >                org     Dict_Ptr
 175+ 6B5D             >
 175+ 6B5D 27 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 6B5F             >
 175+ 6B5F             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6B5F CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6B62             >
 175+ 6B62             >
 175+ 6B62             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6B62             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6B62             >
 175+ 6B62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6B62 2E          >                db      46
 176+ 6B63                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 6B63             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 6B63             >
 176+ 6B63             >Dict_Ptr        defl    $
 176+ 6B63             >
 176+ 6B63             >//              ______________________________________________________________________
 176+ 6B63             >//              Heap part
 176+ 6B63             >
 176+ 6B63             >
 176+ 6B63             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E529             >
 176+ E529             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E529             >Latest_Definition defl  Heap_Ptr
 176+ E529             >
 176+ E529             >                // dummy db directives used to calculate length of namec
 176+ E529 44 50 4C    >                db      "DPL"
 176+ E52C             >len_NFA         defl    $ - temp_NFA
 176+ E52C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E529             >
 176+ E529 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E52A 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52D             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52C CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52D             >
 176+ E52D 20 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E52F             >Prev_Ptr        defl    Heap_Ptr
 176+ E52F             >
 176+ E52F             >mirror_Ptr      defl    $
 176+ E52F             >
 176+ E52F 65 6B       >                dw      Dict_Ptr + 2        // xt
 176+ E531             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E531             >
 176+ E531             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E531             >
 176+ E531             >//              ______________________________________________________________________
 176+ E531             >//              Dictionary part
 176+ E531             >
 176+ E531             >                org     Dict_Ptr
 176+ 6B63             >
 176+ 6B63 2F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 6B65             >
 176+ 6B65             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6B65 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6B68             >
 176+ 6B68             >
 176+ 6B68             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6B68             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6B68             >
 176+ 6B68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6B68 30          >                db      48
 177+ 6B69                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 6B69             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 6B69             >
 177+ 6B69             >Dict_Ptr        defl    $
 177+ 6B69             >
 177+ 6B69             >//              ______________________________________________________________________
 177+ 6B69             >//              Heap part
 177+ 6B69             >
 177+ 6B69             >
 177+ 6B69             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E531             >
 177+ E531             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E531             >Latest_Definition defl  Heap_Ptr
 177+ E531             >
 177+ E531             >                // dummy db directives used to calculate length of namec
 177+ E531 46 4C 44    >                db      "FLD"
 177+ E534             >len_NFA         defl    $ - temp_NFA
 177+ E534             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E531             >
 177+ E531 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E532 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E535             >                org     $-1                 // alter last byte of Name just above to set
 177+ E534 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E535             >
 177+ E535 29 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E537             >Prev_Ptr        defl    Heap_Ptr
 177+ E537             >
 177+ E537             >mirror_Ptr      defl    $
 177+ E537             >
 177+ E537 6B 6B       >                dw      Dict_Ptr + 2        // xt
 177+ E539             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E539             >
 177+ E539             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E539             >
 177+ E539             >//              ______________________________________________________________________
 177+ E539             >//              Dictionary part
 177+ E539             >
 177+ E539             >                org     Dict_Ptr
 177+ 6B69             >
 177+ 6B69 37 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 6B6B             >
 177+ 6B6B             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6B6B CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6B6E             >
 177+ 6B6E             >
 177+ 6B6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6B6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6B6E             >
 177+ 6B6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6B6E 32          >                db      50
 178+ 6B6F                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 6B6F             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 6B6F             >
 178+ 6B6F             >Dict_Ptr        defl    $
 178+ 6B6F             >
 178+ 6B6F             >//              ______________________________________________________________________
 178+ 6B6F             >//              Heap part
 178+ 6B6F             >
 178+ 6B6F             >
 178+ 6B6F             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E539             >
 178+ E539             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E539             >Latest_Definition defl  Heap_Ptr
 178+ E539             >
 178+ E539             >                // dummy db directives used to calculate length of namec
 178+ E539 43 53 50    >                db      "CSP"
 178+ E53C             >len_NFA         defl    $ - temp_NFA
 178+ E53C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E539             >
 178+ E539 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E53A 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53D             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53C D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53D             >
 178+ E53D 31 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E53F             >Prev_Ptr        defl    Heap_Ptr
 178+ E53F             >
 178+ E53F             >mirror_Ptr      defl    $
 178+ E53F             >
 178+ E53F 71 6B       >                dw      Dict_Ptr + 2        // xt
 178+ E541             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E541             >
 178+ E541             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E541             >
 178+ E541             >//              ______________________________________________________________________
 178+ E541             >//              Dictionary part
 178+ E541             >
 178+ E541             >                org     Dict_Ptr
 178+ 6B6F             >
 178+ 6B6F 3F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 6B71             >
 178+ 6B71             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6B71 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6B74             >
 178+ 6B74             >
 178+ 6B74             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6B74             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6B74             >
 178+ 6B74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6B74 34          >                db      52
 179+ 6B75                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 6B75             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 6B75             >
 179+ 6B75             >Dict_Ptr        defl    $
 179+ 6B75             >
 179+ 6B75             >//              ______________________________________________________________________
 179+ 6B75             >//              Heap part
 179+ 6B75             >
 179+ 6B75             >
 179+ 6B75             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E541             >
 179+ E541             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E541             >Latest_Definition defl  Heap_Ptr
 179+ E541             >
 179+ E541             >                // dummy db directives used to calculate length of namec
 179+ E541 52 23       >                db      "R#"
 179+ E543             >len_NFA         defl    $ - temp_NFA
 179+ E543             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E541             >
 179+ E541 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E542 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E544             >                org     $-1                 // alter last byte of Name just above to set
 179+ E543 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E544             >
 179+ E544 39 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E546             >Prev_Ptr        defl    Heap_Ptr
 179+ E546             >
 179+ E546             >mirror_Ptr      defl    $
 179+ E546             >
 179+ E546 77 6B       >                dw      Dict_Ptr + 2        // xt
 179+ E548             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E548             >
 179+ E548             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E548             >
 179+ E548             >//              ______________________________________________________________________
 179+ E548             >//              Dictionary part
 179+ E548             >
 179+ E548             >                org     Dict_Ptr
 179+ 6B75             >
 179+ 6B75 46 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 6B77             >
 179+ 6B77             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6B77 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6B7A             >
 179+ 6B7A             >
 179+ 6B7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6B7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6B7A             >
 179+ 6B7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6B7A 36          >                db      54
 180+ 6B7B                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 6B7B             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 6B7B             >
 180+ 6B7B             >Dict_Ptr        defl    $
 180+ 6B7B             >
 180+ 6B7B             >//              ______________________________________________________________________
 180+ 6B7B             >//              Heap part
 180+ 6B7B             >
 180+ 6B7B             >
 180+ 6B7B             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E548             >
 180+ E548             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E548             >Latest_Definition defl  Heap_Ptr
 180+ E548             >
 180+ E548             >                // dummy db directives used to calculate length of namec
 180+ E548 48 4C 44    >                db      "HLD"
 180+ E54B             >len_NFA         defl    $ - temp_NFA
 180+ E54B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E548             >
 180+ E548 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E549 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54C             >                org     $-1                 // alter last byte of Name just above to set
 180+ E54B C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54C             >
 180+ E54C 41 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54E             >Prev_Ptr        defl    Heap_Ptr
 180+ E54E             >
 180+ E54E             >mirror_Ptr      defl    $
 180+ E54E             >
 180+ E54E 7D 6B       >                dw      Dict_Ptr + 2        // xt
 180+ E550             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E550             >
 180+ E550             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E550             >
 180+ E550             >//              ______________________________________________________________________
 180+ E550             >//              Dictionary part
 180+ E550             >
 180+ E550             >                org     Dict_Ptr
 180+ 6B7B             >
 180+ 6B7B 4E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 6B7D             >
 180+ 6B7D             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6B7D CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6B80             >
 180+ 6B80             >
 180+ 6B80             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6B80             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6B80             >
 180+ 6B80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6B80 38          >                db      56
 181+ 6B81                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 6B81             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 6B81             >
 181+ 6B81             >Dict_Ptr        defl    $
 181+ 6B81             >
 181+ 6B81             >//              ______________________________________________________________________
 181+ 6B81             >//              Heap part
 181+ 6B81             >
 181+ 6B81             >
 181+ 6B81             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E550             >
 181+ E550             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E550             >Latest_Definition defl  Heap_Ptr
 181+ E550             >
 181+ E550             >                // dummy db directives used to calculate length of namec
 181+ E550 55 53 45 44 >                db      "USED"
 181+ E554             >len_NFA         defl    $ - temp_NFA
 181+ E554             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E550             >
 181+ E550 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E551 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E555             >                org     $-1                 // alter last byte of Name just above to set
 181+ E554 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E555             >
 181+ E555 48 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E557             >Prev_Ptr        defl    Heap_Ptr
 181+ E557             >
 181+ E557             >mirror_Ptr      defl    $
 181+ E557             >
 181+ E557 83 6B       >                dw      Dict_Ptr + 2        // xt
 181+ E559             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E559             >
 181+ E559             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E559             >
 181+ E559             >//              ______________________________________________________________________
 181+ E559             >//              Dictionary part
 181+ E559             >
 181+ E559             >                org     Dict_Ptr
 181+ 6B81             >
 181+ 6B81 57 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 6B83             >
 181+ 6B83             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6B83 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6B86             >
 181+ 6B86             >
 181+ 6B86             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6B86             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6B86             >
 181+ 6B86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6B86 3A          >                db      58
 182+ 6B87                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 6B87             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 6B87             >
 182+ 6B87             >Dict_Ptr        defl    $
 182+ 6B87             >
 182+ 6B87             >//              ______________________________________________________________________
 182+ 6B87             >//              Heap part
 182+ 6B87             >
 182+ 6B87             >
 182+ 6B87             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E559             >
 182+ E559             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E559             >Latest_Definition defl  Heap_Ptr
 182+ E559             >
 182+ E559             >                // dummy db directives used to calculate length of namec
 182+ E559 50 52 45 56 >                db      "PREV"
 182+ E55D             >len_NFA         defl    $ - temp_NFA
 182+ E55D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E559             >
 182+ E559 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E55A 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55E             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55D D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55E             >
 182+ E55E 50 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E560             >Prev_Ptr        defl    Heap_Ptr
 182+ E560             >
 182+ E560             >mirror_Ptr      defl    $
 182+ E560             >
 182+ E560 89 6B       >                dw      Dict_Ptr + 2        // xt
 182+ E562             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E562             >
 182+ E562             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E562             >
 182+ E562             >//              ______________________________________________________________________
 182+ E562             >//              Dictionary part
 182+ E562             >
 182+ E562             >                org     Dict_Ptr
 182+ 6B87             >
 182+ 6B87 60 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 6B89             >
 182+ 6B89             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6B89 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6B8C             >
 182+ 6B8C             >
 182+ 6B8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6B8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6B8C             >
 182+ 6B8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6B8C 3C          >                db      60
 183+ 6B8D                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 6B8D             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 6B8D             >
 183+ 6B8D             >Dict_Ptr        defl    $
 183+ 6B8D             >
 183+ 6B8D             >//              ______________________________________________________________________
 183+ 6B8D             >//              Heap part
 183+ 6B8D             >
 183+ 6B8D             >
 183+ 6B8D             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E562             >
 183+ E562             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E562             >Latest_Definition defl  Heap_Ptr
 183+ E562             >
 183+ E562             >                // dummy db directives used to calculate length of namec
 183+ E562 4C 50       >                db      "LP"
 183+ E564             >len_NFA         defl    $ - temp_NFA
 183+ E564             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E562             >
 183+ E562 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E563 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E565             >                org     $-1                 // alter last byte of Name just above to set
 183+ E564 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E565             >
 183+ E565 59 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E567             >Prev_Ptr        defl    Heap_Ptr
 183+ E567             >
 183+ E567             >mirror_Ptr      defl    $
 183+ E567             >
 183+ E567 8F 6B       >                dw      Dict_Ptr + 2        // xt
 183+ E569             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E569             >
 183+ E569             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E569             >
 183+ E569             >//              ______________________________________________________________________
 183+ E569             >//              Dictionary part
 183+ E569             >
 183+ E569             >                org     Dict_Ptr
 183+ 6B8D             >
 183+ 6B8D 67 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 6B8F             >
 183+ 6B8F             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6B8F CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6B92             >
 183+ 6B92             >
 183+ 6B92             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6B92             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6B92             >
 183+ 6B92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6B92 3E          >                db      62
 184+ 6B93                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 6B93             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 6B93             >
 184+ 6B93             >Dict_Ptr        defl    $
 184+ 6B93             >
 184+ 6B93             >//              ______________________________________________________________________
 184+ 6B93             >//              Heap part
 184+ 6B93             >
 184+ 6B93             >
 184+ 6B93             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E569             >
 184+ E569             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E569             >Latest_Definition defl  Heap_Ptr
 184+ E569             >
 184+ E569             >                // dummy db directives used to calculate length of namec
 184+ E569 50 4C 41 43 >                db      "PLACE"
 184+ E56D 45          >
 184+ E56E             >len_NFA         defl    $ - temp_NFA
 184+ E56E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E569             >
 184+ E569 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E56A 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56E 45          >
 184+ E56F             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56E C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E56F             >
 184+ E56F 62 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E571             >Prev_Ptr        defl    Heap_Ptr
 184+ E571             >
 184+ E571             >mirror_Ptr      defl    $
 184+ E571             >
 184+ E571 95 6B       >                dw      Dict_Ptr + 2        // xt
 184+ E573             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E573             >
 184+ E573             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E573             >
 184+ E573             >//              ______________________________________________________________________
 184+ E573             >//              Dictionary part
 184+ E573             >
 184+ E573             >                org     Dict_Ptr
 184+ 6B93             >
 184+ 6B93 71 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 6B95             >
 184+ 6B95             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6B95 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6B98             >
 184+ 6B98             >
 184+ 6B98             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6B98             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6B98             >
 184+ 6B98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6B98 40          >                db      64
 185+ 6B99                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 6B99             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 6B99             >
 185+ 6B99             >Dict_Ptr        defl    $
 185+ 6B99             >
 185+ 6B99             >//              ______________________________________________________________________
 185+ 6B99             >//              Heap part
 185+ 6B99             >
 185+ 6B99             >
 185+ 6B99             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E573             >
 185+ E573             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E573             >Latest_Definition defl  Heap_Ptr
 185+ E573             >
 185+ E573             >                // dummy db directives used to calculate length of namec
 185+ E573 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E577 43 45 2D 49 >
 185+ E57B 44          >
 185+ E57C             >len_NFA         defl    $ - temp_NFA
 185+ E57C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E573             >
 185+ E573 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E574 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E578 43 45 2D 49 >
 185+ E57C 44          >
 185+ E57D             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57C C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57D             >
 185+ E57D 69 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E57F             >Prev_Ptr        defl    Heap_Ptr
 185+ E57F             >
 185+ E57F             >mirror_Ptr      defl    $
 185+ E57F             >
 185+ E57F 9B 6B       >                dw      Dict_Ptr + 2        // xt
 185+ E581             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E581             >
 185+ E581             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E581             >
 185+ E581             >//              ______________________________________________________________________
 185+ E581             >//              Dictionary part
 185+ E581             >
 185+ E581             >                org     Dict_Ptr
 185+ 6B99             >
 185+ 6B99 7F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 6B9B             >
 185+ 6B9B             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6B9B CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6B9E             >
 185+ 6B9E             >
 185+ 6B9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6B9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6B9E             >
 185+ 6B9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6B9E 42          >                db      66
 186+ 6B9F                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 6B9F             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 6B9F             >
 186+ 6B9F             >Dict_Ptr        defl    $
 186+ 6B9F             >
 186+ 6B9F             >//              ______________________________________________________________________
 186+ 6B9F             >//              Heap part
 186+ 6B9F             >
 186+ 6B9F             >
 186+ 6B9F             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E581             >
 186+ E581             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E581             >Latest_Definition defl  Heap_Ptr
 186+ E581             >
 186+ E581             >                // dummy db directives used to calculate length of namec
 186+ E581 53 50 41 4E >                db      "SPAN"
 186+ E585             >len_NFA         defl    $ - temp_NFA
 186+ E585             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E581             >
 186+ E581 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E582 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E586             >                org     $-1                 // alter last byte of Name just above to set
 186+ E585 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E586             >
 186+ E586 73 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E588             >Prev_Ptr        defl    Heap_Ptr
 186+ E588             >
 186+ E588             >mirror_Ptr      defl    $
 186+ E588             >
 186+ E588 A1 6B       >                dw      Dict_Ptr + 2        // xt
 186+ E58A             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E58A             >
 186+ E58A             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E58A             >
 186+ E58A             >//              ______________________________________________________________________
 186+ E58A             >//              Dictionary part
 186+ E58A             >
 186+ E58A             >                org     Dict_Ptr
 186+ 6B9F             >
 186+ 6B9F 88 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 6BA1             >
 186+ 6BA1             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 6BA1 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 6BA4             >
 186+ 6BA4             >
 186+ 6BA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 6BA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 6BA4             >
 186+ 6BA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 6BA4 44          >                db      68
 187+ 6BA5                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 6BA5             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 6BA5             >
 187+ 6BA5             >Dict_Ptr        defl    $
 187+ 6BA5             >
 187+ 6BA5             >//              ______________________________________________________________________
 187+ 6BA5             >//              Heap part
 187+ 6BA5             >
 187+ 6BA5             >
 187+ 6BA5             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E58A             >
 187+ E58A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E58A             >Latest_Definition defl  Heap_Ptr
 187+ E58A             >
 187+ E58A             >                // dummy db directives used to calculate length of namec
 187+ E58A 48 41 4E 44 >                db      "HANDLER"
 187+ E58E 4C 45 52    >
 187+ E591             >len_NFA         defl    $ - temp_NFA
 187+ E591             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E58A             >
 187+ E58A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E58B 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E58F 4C 45 52    >
 187+ E592             >                org     $-1                 // alter last byte of Name just above to set
 187+ E591 D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E592             >
 187+ E592 81 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E594             >Prev_Ptr        defl    Heap_Ptr
 187+ E594             >
 187+ E594             >mirror_Ptr      defl    $
 187+ E594             >
 187+ E594 A7 6B       >                dw      Dict_Ptr + 2        // xt
 187+ E596             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E596             >
 187+ E596             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E596             >
 187+ E596             >//              ______________________________________________________________________
 187+ E596             >//              Dictionary part
 187+ E596             >
 187+ E596             >                org     Dict_Ptr
 187+ 6BA5             >
 187+ 6BA5 94 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 6BA7             >
 187+ 6BA7             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6BA7 CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 6BAA             >
 187+ 6BAA             >
 187+ 6BAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6BAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6BAA             >
 187+ 6BAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 6BAA 46          >                db      70
 188+ 6BAB                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 6BAB             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 6BAB             >
 188+ 6BAB             >Dict_Ptr        defl    $
 188+ 6BAB             >
 188+ 6BAB             >//              ______________________________________________________________________
 188+ 6BAB             >//              Heap part
 188+ 6BAB             >
 188+ 6BAB             >
 188+ 6BAB             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E596             >
 188+ E596             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E596             >Latest_Definition defl  Heap_Ptr
 188+ E596             >
 188+ E596             >                // dummy db directives used to calculate length of namec
 188+ E596 45 58 50    >                db      "EXP"
 188+ E599             >len_NFA         defl    $ - temp_NFA
 188+ E599             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E596             >
 188+ E596 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E597 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E59A             >                org     $-1                 // alter last byte of Name just above to set
 188+ E599 D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E59A             >
 188+ E59A 8A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59C             >Prev_Ptr        defl    Heap_Ptr
 188+ E59C             >
 188+ E59C             >mirror_Ptr      defl    $
 188+ E59C             >
 188+ E59C AD 6B       >                dw      Dict_Ptr + 2        // xt
 188+ E59E             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59E             >
 188+ E59E             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59E             >
 188+ E59E             >//              ______________________________________________________________________
 188+ E59E             >//              Dictionary part
 188+ E59E             >
 188+ E59E             >                org     Dict_Ptr
 188+ 6BAB             >
 188+ 6BAB 9C 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 6BAD             >
 188+ 6BAD             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6BAD CD 82 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 6BB0             >
 188+ 6BB0             >
 188+ 6BB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6BB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6BB0             >
 188+ 6BB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 6BB0 48          >                db      72
 189+ 6BB1
 190+ 6BB1              //  ______________________________________________________________________
 191+ 6BB1              //
 192+ 6BB1              // here         -- a
 193+ 6BB1                              Colon_Def HERE, "HERE", is_normal
 193+ 6BB1             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 6BB1             >
 193+ 6BB1             >Dict_Ptr        defl    $
 193+ 6BB1             >
 193+ 6BB1             >//              ______________________________________________________________________
 193+ 6BB1             >//              Heap part
 193+ 6BB1             >
 193+ 6BB1             >
 193+ 6BB1             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59E             >
 193+ E59E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59E             >Latest_Definition defl  Heap_Ptr
 193+ E59E             >
 193+ E59E             >                // dummy db directives used to calculate length of namec
 193+ E59E 48 45 52 45 >                db      "HERE"
 193+ E5A2             >len_NFA         defl    $ - temp_NFA
 193+ E5A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59E             >
 193+ E59E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E59F 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A3             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A2 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A3             >
 193+ E5A3 96 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A5             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A5             >
 193+ E5A5             >mirror_Ptr      defl    $
 193+ E5A5             >
 193+ E5A5 B3 6B       >                dw      Dict_Ptr + 2        // xt
 193+ E5A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A7             >
 193+ E5A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A7             >
 193+ E5A7             >//              ______________________________________________________________________
 193+ E5A7             >//              Dictionary part
 193+ E5A7             >
 193+ E5A7             >                org     Dict_Ptr
 193+ 6BB1             >
 193+ 6BB1 A5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 6BB3             >
 193+ 6BB3             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 6BB3 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 6BB6             >
 193+ 6BB6             >
 193+ 6BB6             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 6BB6             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 6BB6             >
 193+ 6BB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 6BB6 0B 6B 96 69                  dw      DP, FETCH               // dp @
 195+ 6BBA 4C 68                        dw      EXIT                    // ;
 196+ 6BBC
 197+ 6BBC              //  ______________________________________________________________________
 198+ 6BBC              //
 199+ 6BBC              // allot        n --
 200+ 6BBC                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 6BBC             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 6BBC             >
 200+ 6BBC             >Dict_Ptr        defl    $
 200+ 6BBC             >
 200+ 6BBC             >//              ______________________________________________________________________
 200+ 6BBC             >//              Heap part
 200+ 6BBC             >
 200+ 6BBC             >
 200+ 6BBC             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A7             >
 200+ E5A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A7             >Latest_Definition defl  Heap_Ptr
 200+ E5A7             >
 200+ E5A7             >                // dummy db directives used to calculate length of namec
 200+ E5A7 41 4C 4C 4F >                db      "ALLOT"
 200+ E5AB 54          >
 200+ E5AC             >len_NFA         defl    $ - temp_NFA
 200+ E5AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A7             >
 200+ E5A7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A8 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AC 54          >
 200+ E5AD             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AC D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AD             >
 200+ E5AD 9E 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5AF             >Prev_Ptr        defl    Heap_Ptr
 200+ E5AF             >
 200+ E5AF             >mirror_Ptr      defl    $
 200+ E5AF             >
 200+ E5AF BE 6B       >                dw      Dict_Ptr + 2        // xt
 200+ E5B1             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5B1             >
 200+ E5B1             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5B1             >
 200+ E5B1             >//              ______________________________________________________________________
 200+ E5B1             >//              Dictionary part
 200+ E5B1             >
 200+ E5B1             >                org     Dict_Ptr
 200+ 6BBC             >
 200+ 6BBC AF 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 6BBE             >
 200+ 6BBE             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6BBE CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 6BC1             >
 200+ 6BC1             >
 200+ 6BC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6BC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6BC1             >
 200+ 6BC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6BC1 0B 6B 7E 69                  dw      DP,  PLUSSTORE          // dp +!
 202+ 6BC5 4C 68                        dw      EXIT                    // ;
 203+ 6BC7
 204+ 6BC7              //  ______________________________________________________________________
 205+ 6BC7              //
 206+ 6BC7              // comma        n --
 207+ 6BC7                              Colon_Def COMMA, ",", is_normal
 207+ 6BC7             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 6BC7             >
 207+ 6BC7             >Dict_Ptr        defl    $
 207+ 6BC7             >
 207+ 6BC7             >//              ______________________________________________________________________
 207+ 6BC7             >//              Heap part
 207+ 6BC7             >
 207+ 6BC7             >
 207+ 6BC7             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5B1             >
 207+ E5B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5B1             >Latest_Definition defl  Heap_Ptr
 207+ E5B1             >
 207+ E5B1             >                // dummy db directives used to calculate length of namec
 207+ E5B1 2C          >                db      ","
 207+ E5B2             >len_NFA         defl    $ - temp_NFA
 207+ E5B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5B1             >
 207+ E5B1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B2 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B3             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B2 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B3             >
 207+ E5B3 A7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B5             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B5             >
 207+ E5B5             >mirror_Ptr      defl    $
 207+ E5B5             >
 207+ E5B5 C9 6B       >                dw      Dict_Ptr + 2        // xt
 207+ E5B7             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B7             >
 207+ E5B7             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B7             >
 207+ E5B7             >//              ______________________________________________________________________
 207+ E5B7             >//              Dictionary part
 207+ E5B7             >
 207+ E5B7             >                org     Dict_Ptr
 207+ 6BC7             >
 207+ 6BC7 B5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 6BC9             >
 207+ 6BC9             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 6BC9 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 6BCC             >
 207+ 6BCC             >
 207+ 6BCC             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 6BCC             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 6BCC             >
 207+ 6BCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 6BCC B3 6B A0 69                  dw      HERE, STORE             // here !
 209+ 6BD0 9C 6A BE 6B                  dw      TWO, ALLOT              // 2 allot
 210+ 6BD4 4C 68                        dw      EXIT                    // ;
 211+ 6BD6
 212+ 6BD6              //  ______________________________________________________________________
 213+ 6BD6              //
 214+ 6BD6              // ccomma       c --
 215+ 6BD6                              Colon_Def CCOMMA, "C,", is_normal
 215+ 6BD6             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 6BD6             >
 215+ 6BD6             >Dict_Ptr        defl    $
 215+ 6BD6             >
 215+ 6BD6             >//              ______________________________________________________________________
 215+ 6BD6             >//              Heap part
 215+ 6BD6             >
 215+ 6BD6             >
 215+ 6BD6             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B7             >
 215+ E5B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B7             >Latest_Definition defl  Heap_Ptr
 215+ E5B7             >
 215+ E5B7             >                // dummy db directives used to calculate length of namec
 215+ E5B7 43 2C       >                db      "C,"
 215+ E5B9             >len_NFA         defl    $ - temp_NFA
 215+ E5B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B7             >
 215+ E5B7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B8 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5BA             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5B9 AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5BA             >
 215+ E5BA B1 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BC             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BC             >
 215+ E5BC             >mirror_Ptr      defl    $
 215+ E5BC             >
 215+ E5BC D8 6B       >                dw      Dict_Ptr + 2        // xt
 215+ E5BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BE             >
 215+ E5BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BE             >
 215+ E5BE             >//              ______________________________________________________________________
 215+ E5BE             >//              Dictionary part
 215+ E5BE             >
 215+ E5BE             >                org     Dict_Ptr
 215+ 6BD6             >
 215+ 6BD6 BC 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 6BD8             >
 215+ 6BD8             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 6BD8 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 6BDB             >
 215+ 6BDB             >
 215+ 6BDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 6BDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 6BDB             >
 215+ 6BDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 6BDB B3 6B B4 69                  dw      HERE, CSTORE            // here c!
 217+ 6BDF 95 6A BE 6B                  dw      ONE, ALLOT              // 1 allot
 218+ 6BE3 4C 68                        dw      EXIT                    // ;
 219+ 6BE5
 220+ 6BE5              //  ______________________________________________________________________
 221+ 6BE5              //
 222+ 6BE5              // hpcomma      n --
 223+ 6BE5              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 6BE5              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 6BE5              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 6BE5              //              dw      EXIT                    // ;
 227+ 6BE5
 228+ 6BE5              //  ______________________________________________________________________
 229+ 6BE5              //
 230+ 6BE5              // s>d          n -- d
 231+ 6BE5              // converts a single precision integer in a double precision
 232+ 6BE5                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 6BE5             >
 232+ 6BE5             >Dict_Ptr        defl    $
 232+ 6BE5             >
 232+ 6BE5             >//              ______________________________________________________________________
 232+ 6BE5             >//              Heap part
 232+ 6BE5             >
 232+ 6BE5             >
 232+ 6BE5             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5BE             >
 232+ E5BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5BE             >Latest_Definition defl  Heap_Ptr
 232+ E5BE             >
 232+ E5BE             >                // dummy db directives used to calculate length of namec
 232+ E5BE 53 3E 44    >                db      "S>D"
 232+ E5C1             >len_NFA         defl    $ - temp_NFA
 232+ E5C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5BE             >
 232+ E5BE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5BF 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C2             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5C1 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C2             >
 232+ E5C2 B7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5C4             >Prev_Ptr        defl    Heap_Ptr
 232+ E5C4             >
 232+ E5C4             >mirror_Ptr      defl    $
 232+ E5C4             >
 232+ E5C4 E7 6B       >                dw      Dict_Ptr + 2        // xt
 232+ E5C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C6             >
 232+ E5C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C6             >
 232+ E5C6             >//              ______________________________________________________________________
 232+ E5C6             >//              Dictionary part
 232+ E5C6             >
 232+ E5C6             >                org     Dict_Ptr
 232+ 6BE5             >
 232+ 6BE5 C4 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 6BE7             >
 232+ 6BE7             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 6BE7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 6BE7 ~           >
 232+ 6BE7 ~           >
 232+ 6BE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 6BE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 6BE7             >
 232+ 6BE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 6BE7 E1                           pop     hl
 234+ 6BE8 7C                           ld      a, h
 235+ 6BE9 E5                           push    hl
 236+ 6BEA 17                           rla
 237+ 6BEB ED 62                        sbc     hl, hl
 238+ 6BED E5                           push    hl
 239+ 6BEE                              next
 239+ 6BEE DD E9       >                jp      (ix)
 240+ 6BF0
 241+ 6BF0              //  ______________________________________________________________________
 242+ 6BF0              //
 243+ 6BF0              // -            n1 n2 -- n3
 244+ 6BF0              // subtraction
 245+ 6BF0                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 6BF0             >
 245+ 6BF0             >Dict_Ptr        defl    $
 245+ 6BF0             >
 245+ 6BF0             >//              ______________________________________________________________________
 245+ 6BF0             >//              Heap part
 245+ 6BF0             >
 245+ 6BF0             >
 245+ 6BF0             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C6             >
 245+ E5C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C6             >Latest_Definition defl  Heap_Ptr
 245+ E5C6             >
 245+ E5C6             >                // dummy db directives used to calculate length of namec
 245+ E5C6 2D          >                db      "-"
 245+ E5C7             >len_NFA         defl    $ - temp_NFA
 245+ E5C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C6             >
 245+ E5C6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C7 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C8             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C7 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C8             >
 245+ E5C8 BE 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5CA             >Prev_Ptr        defl    Heap_Ptr
 245+ E5CA             >
 245+ E5CA             >mirror_Ptr      defl    $
 245+ E5CA             >
 245+ E5CA F2 6B       >                dw      Dict_Ptr + 2        // xt
 245+ E5CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5CC             >
 245+ E5CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5CC             >
 245+ E5CC             >//              ______________________________________________________________________
 245+ E5CC             >//              Dictionary part
 245+ E5CC             >
 245+ E5CC             >                org     Dict_Ptr
 245+ 6BF0             >
 245+ 6BF0 CA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 6BF2             >
 245+ 6BF2             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 6BF2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 6BF2 ~           >
 245+ 6BF2 ~           >
 245+ 6BF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 6BF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 6BF2             >
 245+ 6BF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 6BF2 D9                           exx
 247+ 6BF3 D1                           pop     de
 248+ 6BF4 E1                           pop     hl
 249+ 6BF5 A7                           and     a
 250+ 6BF6 ED 52                        sbc     hl, de
 251+ 6BF8 E5                           push    hl
 252+ 6BF9 D9                           exx
 253+ 6BFA                              next
 253+ 6BFA DD E9       >                jp      (ix)
 254+ 6BFC
 255+ 6BFC
 256+ 6BFC              //  ______________________________________________________________________
 257+ 6BFC              //
 258+ 6BFC              // =            n1 n2 -- n3
 259+ 6BFC              // equals
 260+ 6BFC                              Colon_Def EQUALS, "=", is_normal
 260+ 6BFC             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 6BFC             >
 260+ 6BFC             >Dict_Ptr        defl    $
 260+ 6BFC             >
 260+ 6BFC             >//              ______________________________________________________________________
 260+ 6BFC             >//              Heap part
 260+ 6BFC             >
 260+ 6BFC             >
 260+ 6BFC             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5CC             >
 260+ E5CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5CC             >Latest_Definition defl  Heap_Ptr
 260+ E5CC             >
 260+ E5CC             >                // dummy db directives used to calculate length of namec
 260+ E5CC 3D          >                db      "="
 260+ E5CD             >len_NFA         defl    $ - temp_NFA
 260+ E5CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5CC             >
 260+ E5CC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5CD 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5CE             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5CD BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5CE             >
 260+ E5CE C6 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5D0             >Prev_Ptr        defl    Heap_Ptr
 260+ E5D0             >
 260+ E5D0             >mirror_Ptr      defl    $
 260+ E5D0             >
 260+ E5D0 FE 6B       >                dw      Dict_Ptr + 2        // xt
 260+ E5D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D2             >
 260+ E5D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D2             >
 260+ E5D2             >//              ______________________________________________________________________
 260+ E5D2             >//              Dictionary part
 260+ E5D2             >
 260+ E5D2             >                org     Dict_Ptr
 260+ 6BFC             >
 260+ 6BFC D0 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6BFE             >
 260+ 6BFE             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6BFE CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 6C01             >
 260+ 6C01             >
 260+ 6C01             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6C01             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6C01             >
 260+ 6C01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6C01 F2 6B 71 68                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 6C05 4C 68                        dw      EXIT                    // ;
 263+ 6C07
 264+ 6C07              //  ______________________________________________________________________
 265+ 6C07              //
 266+ 6C07              // u<           u1 u2 -- u3
 267+ 6C07              // unsigned less-than
 268+ 6C07                              New_Def ULESS, "U<", is_code, is_normal
 268+ 6C07             >
 268+ 6C07             >Dict_Ptr        defl    $
 268+ 6C07             >
 268+ 6C07             >//              ______________________________________________________________________
 268+ 6C07             >//              Heap part
 268+ 6C07             >
 268+ 6C07             >
 268+ 6C07             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D2             >
 268+ E5D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D2             >Latest_Definition defl  Heap_Ptr
 268+ E5D2             >
 268+ E5D2             >                // dummy db directives used to calculate length of namec
 268+ E5D2 55 3C       >                db      "U<"
 268+ E5D4             >len_NFA         defl    $ - temp_NFA
 268+ E5D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D2             >
 268+ E5D2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D3 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D5             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5D4 BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D5             >
 268+ E5D5 CC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D7             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D7             >
 268+ E5D7             >mirror_Ptr      defl    $
 268+ E5D7             >
 268+ E5D7 09 6C       >                dw      Dict_Ptr + 2        // xt
 268+ E5D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5D9             >
 268+ E5D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5D9             >
 268+ E5D9             >//              ______________________________________________________________________
 268+ E5D9             >//              Dictionary part
 268+ E5D9             >
 268+ E5D9             >                org     Dict_Ptr
 268+ 6C07             >
 268+ 6C07 D7 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 6C09             >
 268+ 6C09             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 6C09 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 6C09 ~           >
 268+ 6C09 ~           >
 268+ 6C09             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 6C09             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 6C09             >
 268+ 6C09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 6C09 D9                           exx
 270+ 6C0A D1                           pop     de
 271+ 6C0B E1                           pop     hl
 272+ 6C0C A7                           and     a
 273+ 6C0D ED 52                        sbc     hl, de
 274+ 6C0F ED 62                        sbc     hl, hl
 275+ 6C11 E5                           push    hl
 276+ 6C12 D9                           exx
 277+ 6C13                              next
 277+ 6C13 DD E9       >                jp      (ix)
 278+ 6C15
 279+ 6C15              //  ______________________________________________________________________
 280+ 6C15              //
 281+ 6C15              // <           n1 n2 -- n3
 282+ 6C15              // less-than
 283+ 6C15                              New_Def LESS, "<", is_code, is_normal
 283+ 6C15             >
 283+ 6C15             >Dict_Ptr        defl    $
 283+ 6C15             >
 283+ 6C15             >//              ______________________________________________________________________
 283+ 6C15             >//              Heap part
 283+ 6C15             >
 283+ 6C15             >
 283+ 6C15             >                org     (Heap_Ptr & $1FFF) + $E000
 283+ E5D9             >
 283+ E5D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 283+ E5D9             >Latest_Definition defl  Heap_Ptr
 283+ E5D9             >
 283+ E5D9             >                // dummy db directives used to calculate length of namec
 283+ E5D9 3C          >                db      "<"
 283+ E5DA             >len_NFA         defl    $ - temp_NFA
 283+ E5DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 283+ E5D9             >
 283+ E5D9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 283+ E5DA 3C          >                db      "<"               // name string in 7-bit ascii, but
 283+ E5DB             >                org     $-1                 // alter last byte of Name just above to set
 283+ E5DA BC          >                db      {b $} | END_BIT     // msb as name end
 283+ E5DB             >
 283+ E5DB D2 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 283+ E5DD             >Prev_Ptr        defl    Heap_Ptr
 283+ E5DD             >
 283+ E5DD             >mirror_Ptr      defl    $
 283+ E5DD             >
 283+ E5DD 17 6C       >                dw      Dict_Ptr + 2        // xt
 283+ E5DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 283+ E5DF             >
 283+ E5DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 283+ E5DF             >
 283+ E5DF             >//              ______________________________________________________________________
 283+ E5DF             >//              Dictionary part
 283+ E5DF             >
 283+ E5DF             >                org     Dict_Ptr
 283+ 6C15             >
 283+ 6C15 DD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 283+ 6C17             >
 283+ 6C17             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 283+ 6C17 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 283+ 6C17 ~           >
 283+ 6C17 ~           >
 283+ 6C17             >                endif           ; ok        // for other definitions it "points" the correct handler
 283+ 6C17             >                // Use of "; ok" to suppress "warning[fwdref]"
 283+ 6C17             >
 283+ 6C17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 284+ 6C17 D9                           exx
 285+ 6C18 D1                           pop     de
 286+ 6C19 E1                           pop     hl
 287+ 6C1A 7C                           ld      a, h
 288+ 6C1B EE 80                        xor     $80
 289+ 6C1D 67                           ld      h, a
 290+ 6C1E 7A                           ld      a, d
 291+ 6C1F EE 80                        xor     $80
 292+ 6C21 57                           ld      d, a
 293+ 6C22              //              and     a
 294+ 6C22 ED 52                        sbc     hl, de
 295+ 6C24 ED 62                        sbc     hl, hl
 296+ 6C26 E5                           push    hl
 297+ 6C27 D9                           exx
 298+ 6C28                              next
 298+ 6C28 DD E9       >                jp      (ix)
 299+ 6C2A
 300+ 6C2A              //  ______________________________________________________________________
 301+ 6C2A              //
 302+ 6C2A              // >            n1 n2 -- n3
 303+ 6C2A              // greater than
 304+ 6C2A                              Colon_Def GREATER, ">", is_normal
 304+ 6C2A             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 6C2A             >
 304+ 6C2A             >Dict_Ptr        defl    $
 304+ 6C2A             >
 304+ 6C2A             >//              ______________________________________________________________________
 304+ 6C2A             >//              Heap part
 304+ 6C2A             >
 304+ 6C2A             >
 304+ 6C2A             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5DF             >
 304+ E5DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5DF             >Latest_Definition defl  Heap_Ptr
 304+ E5DF             >
 304+ E5DF             >                // dummy db directives used to calculate length of namec
 304+ E5DF 3E          >                db      ">"
 304+ E5E0             >len_NFA         defl    $ - temp_NFA
 304+ E5E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5DF             >
 304+ E5DF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5E0 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5E1             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5E0 BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5E1             >
 304+ E5E1 D9 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E3             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E3             >
 304+ E5E3             >mirror_Ptr      defl    $
 304+ E5E3             >
 304+ E5E3 2C 6C       >                dw      Dict_Ptr + 2        // xt
 304+ E5E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E5             >
 304+ E5E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E5             >
 304+ E5E5             >//              ______________________________________________________________________
 304+ E5E5             >//              Dictionary part
 304+ E5E5             >
 304+ E5E5             >                org     Dict_Ptr
 304+ 6C2A             >
 304+ 6C2A E3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 6C2C             >
 304+ 6C2C             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 6C2C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 6C2F             >
 304+ 6C2F             >
 304+ 6C2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 6C2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 6C2F             >
 304+ 6C2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 6C2F 1E 69 17 6C                  dw      SWAP, LESS              // swap <
 306+ 6C33 4C 68                        dw      EXIT                    // ;
 307+ 6C35              //  ______________________________________________________________________
 308+ 6C35              //
 309+ 6C35              // min          n1 n2 -- n3
 310+ 6C35              // minimum between n1 and n2
 311+ 6C35                              Colon_Def MIN, "MIN" , is_normal
 311+ 6C35             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 6C35             >
 311+ 6C35             >Dict_Ptr        defl    $
 311+ 6C35             >
 311+ 6C35             >//              ______________________________________________________________________
 311+ 6C35             >//              Heap part
 311+ 6C35             >
 311+ 6C35             >
 311+ 6C35             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E5             >
 311+ E5E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E5             >Latest_Definition defl  Heap_Ptr
 311+ E5E5             >
 311+ E5E5             >                // dummy db directives used to calculate length of namec
 311+ E5E5 4D 49 4E    >                db      "MIN"
 311+ E5E8             >len_NFA         defl    $ - temp_NFA
 311+ E5E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E5             >
 311+ E5E5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E6 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5E9             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E8 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5E9             >
 311+ E5E9 DF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5EB             >Prev_Ptr        defl    Heap_Ptr
 311+ E5EB             >
 311+ E5EB             >mirror_Ptr      defl    $
 311+ E5EB             >
 311+ E5EB 37 6C       >                dw      Dict_Ptr + 2        // xt
 311+ E5ED             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5ED             >
 311+ E5ED             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5ED             >
 311+ E5ED             >//              ______________________________________________________________________
 311+ E5ED             >//              Dictionary part
 311+ E5ED             >
 311+ E5ED             >                org     Dict_Ptr
 311+ 6C35             >
 311+ 6C35 EB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 6C37             >
 311+ 6C37             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 6C37 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 6C3A             >
 311+ 6C3A             >
 311+ 6C3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 6C3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 6C3A             >
 311+ 6C3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 6C3A 74 69                        dw      TWO_DUP                 // 2dup
 313+ 6C3C 2C 6C                        dw      GREATER                 // >
 314+ 6C3E F5 63                        dw      ZBRANCH
 315+ 6C40 04 00                        dw      Min_Skip - $   // if
 316+ 6C42 1E 69                        dw          SWAP                //      swap
 317+ 6C44              Min_Skip:                                       // endif
 318+ 6C44 0A 69                        dw      DROP                    // drop
 319+ 6C46 4C 68                        dw      EXIT                    // ;
 320+ 6C48
 321+ 6C48              //  ______________________________________________________________________
 322+ 6C48              //
 323+ 6C48              // max          n1 n2 -- n3
 324+ 6C48              // maximum between n1 and n2
 325+ 6C48                              Colon_Def MAX, "MAX", is_normal
 325+ 6C48             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 6C48             >
 325+ 6C48             >Dict_Ptr        defl    $
 325+ 6C48             >
 325+ 6C48             >//              ______________________________________________________________________
 325+ 6C48             >//              Heap part
 325+ 6C48             >
 325+ 6C48             >
 325+ 6C48             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5ED             >
 325+ E5ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5ED             >Latest_Definition defl  Heap_Ptr
 325+ E5ED             >
 325+ E5ED             >                // dummy db directives used to calculate length of namec
 325+ E5ED 4D 41 58    >                db      "MAX"
 325+ E5F0             >len_NFA         defl    $ - temp_NFA
 325+ E5F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5ED             >
 325+ E5ED 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5EE 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5F1             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5F0 D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5F1             >
 325+ E5F1 E5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F3             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F3             >
 325+ E5F3             >mirror_Ptr      defl    $
 325+ E5F3             >
 325+ E5F3 4A 6C       >                dw      Dict_Ptr + 2        // xt
 325+ E5F5             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F5             >
 325+ E5F5             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F5             >
 325+ E5F5             >//              ______________________________________________________________________
 325+ E5F5             >//              Dictionary part
 325+ E5F5             >
 325+ E5F5             >                org     Dict_Ptr
 325+ 6C48             >
 325+ 6C48 F3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 6C4A             >
 325+ 6C4A             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 6C4A CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 6C4D             >
 325+ 6C4D             >
 325+ 6C4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 6C4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 6C4D             >
 325+ 6C4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 6C4D 74 69                        dw      TWO_DUP                 // 2dup
 327+ 6C4F 17 6C                        dw      LESS                    // <
 328+ 6C51 F5 63                        dw      ZBRANCH
 329+ 6C53 04 00                        dw      Max_Skip - $   // if
 330+ 6C55 1E 69                        dw          SWAP                //      swap
 331+ 6C57              Max_Skip:                                       // endif
 332+ 6C57 0A 69                        dw      DROP                    // drop
 333+ 6C59 4C 68                        dw      EXIT                    // ;
 334+ 6C5B
 335+ 6C5B              //  ______________________________________________________________________
 336+ 6C5B              //
 337+ 6C5B              // ?dup         n -- 0 | n n
 338+ 6C5B              // duplicate if not zero
 339+ 6C5B                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 6C5B             >
 339+ 6C5B             >Dict_Ptr        defl    $
 339+ 6C5B             >
 339+ 6C5B             >//              ______________________________________________________________________
 339+ 6C5B             >//              Heap part
 339+ 6C5B             >
 339+ 6C5B             >
 339+ 6C5B             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F5             >
 339+ E5F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F5             >Latest_Definition defl  Heap_Ptr
 339+ E5F5             >
 339+ E5F5             >                // dummy db directives used to calculate length of namec
 339+ E5F5 3F 44 55 50 >                db      "?DUP"
 339+ E5F9             >len_NFA         defl    $ - temp_NFA
 339+ E5F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F5             >
 339+ E5F5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F6 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5FA             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5F9 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5FA             >
 339+ E5FA ED 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5FC             >Prev_Ptr        defl    Heap_Ptr
 339+ E5FC             >
 339+ E5FC             >mirror_Ptr      defl    $
 339+ E5FC             >
 339+ E5FC 5D 6C       >                dw      Dict_Ptr + 2        // xt
 339+ E5FE             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5FE             >
 339+ E5FE             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5FE             >
 339+ E5FE             >//              ______________________________________________________________________
 339+ E5FE             >//              Dictionary part
 339+ E5FE             >
 339+ E5FE             >                org     Dict_Ptr
 339+ 6C5B             >
 339+ 6C5B FC 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 6C5D             >
 339+ 6C5D             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 6C5D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 6C5D ~           >
 339+ 6C5D ~           >
 339+ 6C5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 6C5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 6C5D             >
 339+ 6C5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 6C5D              QDup_Ptr:
 341+ 6C5D E1                           pop     hl
 342+ 6C5E 7C                           ld      a, h
 343+ 6C5F B5                           or      l
 344+ 6C60 28 01                        jr      z, QDup_Skip
 345+ 6C62 E5                               push    hl
 346+ 6C63              QDup_Skip:
 347+ 6C63                              psh1
 347+ 6C63 E5          >                push    hl
 347+ 6C64 DD E9       >                jp      (ix)
 348+ 6C66
 349+ 6C66              //  ______________________________________________________________________
 350+ 6C66              //
 351+ 6C66              // -dup         n -- 0 | n n
 352+ 6C66              // duplicate if not zero
 353+ 6C66                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 6C66             >
 353+ 6C66             >Dict_Ptr        defl    $
 353+ 6C66             >
 353+ 6C66             >//              ______________________________________________________________________
 353+ 6C66             >//              Heap part
 353+ 6C66             >
 353+ 6C66             >
 353+ 6C66             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5FE             >
 353+ E5FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5FE             >Latest_Definition defl  Heap_Ptr
 353+ E5FE             >
 353+ E5FE             >                // dummy db directives used to calculate length of namec
 353+ E5FE 2D 44 55 50 >                db      "-DUP"
 353+ E602             >len_NFA         defl    $ - temp_NFA
 353+ E602             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5FE             >
 353+ E5FE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E5FF 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E603             >                org     $-1                 // alter last byte of Name just above to set
 353+ E602 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E603             >
 353+ E603 F5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E605             >Prev_Ptr        defl    Heap_Ptr
 353+ E605             >
 353+ E605             >mirror_Ptr      defl    $
 353+ E605             >
 353+ E605 68 6C       >                dw      Dict_Ptr + 2        // xt
 353+ E607             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E607             >
 353+ E607             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E607             >
 353+ E607             >//              ______________________________________________________________________
 353+ E607             >//              Dictionary part
 353+ E607             >
 353+ E607             >                org     Dict_Ptr
 353+ 6C66             >
 353+ 6C66 05 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 6C68             >
 353+ 6C68             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 6C68 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 6C68 ~           >
 353+ 6C68 ~           >
 353+ 6C68             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 6C68             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 6C68             >
 353+ 6C68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 6C68 C3 5D 6C                     jp      QDup_Ptr
 355+ 6C6B
 356+ 6C6B              //  ______________________________________________________________________
 357+ 6C6B              //
 358+ 6C6B              // emit         c --
 359+ 6C6B                              Colon_Def EMIT, "EMIT", is_normal
 359+ 6C6B             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 6C6B             >
 359+ 6C6B             >Dict_Ptr        defl    $
 359+ 6C6B             >
 359+ 6C6B             >//              ______________________________________________________________________
 359+ 6C6B             >//              Heap part
 359+ 6C6B             >
 359+ 6C6B             >
 359+ 6C6B             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E607             >
 359+ E607             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E607             >Latest_Definition defl  Heap_Ptr
 359+ E607             >
 359+ E607             >                // dummy db directives used to calculate length of namec
 359+ E607 45 4D 49 54 >                db      "EMIT"
 359+ E60B             >len_NFA         defl    $ - temp_NFA
 359+ E60B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E607             >
 359+ E607 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E608 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E60C             >                org     $-1                 // alter last byte of Name just above to set
 359+ E60B D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E60C             >
 359+ E60C FE 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E60E             >Prev_Ptr        defl    Heap_Ptr
 359+ E60E             >
 359+ E60E             >mirror_Ptr      defl    $
 359+ E60E             >
 359+ E60E 6D 6C       >                dw      Dict_Ptr + 2        // xt
 359+ E610             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E610             >
 359+ E610             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E610             >
 359+ E610             >//              ______________________________________________________________________
 359+ E610             >//              Dictionary part
 359+ E610             >
 359+ E610             >                org     Dict_Ptr
 359+ 6C6B             >
 359+ 6C6B 0E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 6C6D             >
 359+ 6C6D             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 6C6D CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 6C70             >
 359+ 6C70             >
 359+ 6C70             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 6C70             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 6C70             >
 359+ 6C70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 6C70 D4 65                        dw      C_EMIT                      // (?emit)
 361+ 6C72 5D 6C                        dw      QDUP                        // ?dup
 362+ 6C74                                                                  // if
 363+ 6C74 F5 63                        dw      ZBRANCH
 364+ 6C76 0A 00                        dw      Emit_Skip - $
 365+ 6C78 A2 65                        dw          EMITC                   //      emitc
 366+ 6C7A 95 6A                        dw          ONE                     //      1
 367+ 6C7C 3B 6B 7E 69                  dw          OUT, PLUSSTORE        //      out +!
 368+ 6C80              Emit_Skip:                                          // endif
 369+ 6C80 4C 68                        dw      EXIT                        // ;
 370+ 6C82
 371+ 6C82              //  ______________________________________________________________________
 372+ 6C82              //
 373+ 6C82              // space        --
 374+ 6C82                              Colon_Def SPACE, "SPACE", is_normal
 374+ 6C82             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 6C82             >
 374+ 6C82             >Dict_Ptr        defl    $
 374+ 6C82             >
 374+ 6C82             >//              ______________________________________________________________________
 374+ 6C82             >//              Heap part
 374+ 6C82             >
 374+ 6C82             >
 374+ 6C82             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E610             >
 374+ E610             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E610             >Latest_Definition defl  Heap_Ptr
 374+ E610             >
 374+ E610             >                // dummy db directives used to calculate length of namec
 374+ E610 53 50 41 43 >                db      "SPACE"
 374+ E614 45          >
 374+ E615             >len_NFA         defl    $ - temp_NFA
 374+ E615             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E610             >
 374+ E610 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E611 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E615 45          >
 374+ E616             >                org     $-1                 // alter last byte of Name just above to set
 374+ E615 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E616             >
 374+ E616 07 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E618             >Prev_Ptr        defl    Heap_Ptr
 374+ E618             >
 374+ E618             >mirror_Ptr      defl    $
 374+ E618             >
 374+ E618 84 6C       >                dw      Dict_Ptr + 2        // xt
 374+ E61A             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E61A             >
 374+ E61A             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E61A             >
 374+ E61A             >//              ______________________________________________________________________
 374+ E61A             >//              Dictionary part
 374+ E61A             >
 374+ E61A             >                org     Dict_Ptr
 374+ 6C82             >
 374+ 6C82 18 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 6C84             >
 374+ 6C84             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 6C84 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 6C87             >
 374+ 6C87             >
 374+ 6C87             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 6C87             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 6C87             >
 374+ 6C87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 6C87 B1 6A 6D 6C                  dw      BL, EMIT                // bl emit
 376+ 6C8B 4C 68                        dw      EXIT                    // ;
 377+ 6C8D
 378+ 6C8D              //  ______________________________________________________________________
 379+ 6C8D              //
 380+ 6C8D              // traverse     a n -- a
 381+ 6C8D              // A dictionary entry is structured as follows
 382+ 6C8D              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 6C8D              //      +1   word name, last character is toggled with $80
 384+ 6C8D              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 6C8D              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 6C8D              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 6C8D              //
 388+ 6C8D                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 6C8D             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 6C8D             >
 388+ 6C8D             >Dict_Ptr        defl    $
 388+ 6C8D             >
 388+ 6C8D             >//              ______________________________________________________________________
 388+ 6C8D             >//              Heap part
 388+ 6C8D             >
 388+ 6C8D             >
 388+ 6C8D             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E61A             >
 388+ E61A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E61A             >Latest_Definition defl  Heap_Ptr
 388+ E61A             >
 388+ E61A             >                // dummy db directives used to calculate length of namec
 388+ E61A 54 52 41 56 >                db      "TRAVERSE"
 388+ E61E 45 52 53 45 >
 388+ E622             >len_NFA         defl    $ - temp_NFA
 388+ E622             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E61A             >
 388+ E61A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E61B 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E61F 45 52 53 45 >
 388+ E623             >                org     $-1                 // alter last byte of Name just above to set
 388+ E622 C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E623             >
 388+ E623 10 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E625             >Prev_Ptr        defl    Heap_Ptr
 388+ E625             >
 388+ E625             >mirror_Ptr      defl    $
 388+ E625             >
 388+ E625 8F 6C       >                dw      Dict_Ptr + 2        // xt
 388+ E627             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E627             >
 388+ E627             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E627             >
 388+ E627             >//              ______________________________________________________________________
 388+ E627             >//              Dictionary part
 388+ E627             >
 388+ E627             >                org     Dict_Ptr
 388+ 6C8D             >
 388+ 6C8D 25 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 6C8F             >
 388+ 6C8F             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 6C8F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 6C92             >
 388+ 6C92             >
 388+ 6C92             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 6C92             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 6C92             >
 388+ 6C92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 6C92 1E 69                        dw      SWAP                    // swap
 390+ 6C94              Traverse_Begin:                                 // begin
 391+ 6C94 01 69 9F 68                  dw          OVER, PLUS          //      over +
 392+ 6C98 A3 63 7F 00                  dw          LIT, 127            //      127
 393+ 6C9C 01 69 AB 69                  dw          OVER, CFETCH        //      over @
 394+ 6CA0 17 6C                        dw          LESS                //      <
 395+ 6CA2                                                              // until
 396+ 6CA2 F5 63                        dw      ZBRANCH
 397+ 6CA4 F0 FF                        dw      Traverse_Begin - $
 398+ 6CA6 0F 69                        dw      NIP                     //  nip
 399+ 6CA8 4C 68                        dw      EXIT                    //  ;
 400+ 6CAA
 401+ 6CAA              //  ______________________________________________________________________
 402+ 6CAA              //
 403+ 6CAA              // mmu7@        -- n
 404+ 6CAA              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 6CAA
 406+ 6CAA                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 6CAA             >
 406+ 6CAA             >Dict_Ptr        defl    $
 406+ 6CAA             >
 406+ 6CAA             >//              ______________________________________________________________________
 406+ 6CAA             >//              Heap part
 406+ 6CAA             >
 406+ 6CAA             >
 406+ 6CAA             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E627             >
 406+ E627             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E627             >Latest_Definition defl  Heap_Ptr
 406+ E627             >
 406+ E627             >                // dummy db directives used to calculate length of namec
 406+ E627 4D 4D 55 37 >                db      "MMU7@"
 406+ E62B 40          >
 406+ E62C             >len_NFA         defl    $ - temp_NFA
 406+ E62C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E627             >
 406+ E627 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E628 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E62C 40          >
 406+ E62D             >                org     $-1                 // alter last byte of Name just above to set
 406+ E62C C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E62D             >
 406+ E62D 1A 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E62F             >Prev_Ptr        defl    Heap_Ptr
 406+ E62F             >
 406+ E62F             >mirror_Ptr      defl    $
 406+ E62F             >
 406+ E62F AC 6C       >                dw      Dict_Ptr + 2        // xt
 406+ E631             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E631             >
 406+ E631             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E631             >
 406+ E631             >//              ______________________________________________________________________
 406+ E631             >//              Dictionary part
 406+ E631             >
 406+ E631             >                org     Dict_Ptr
 406+ 6CAA             >
 406+ 6CAA 2F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 6CAC             >
 406+ 6CAC             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 6CAC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 6CAC ~           >
 406+ 6CAC ~           >
 406+ 6CAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 6CAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 6CAC             >
 406+ 6CAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 6CAC D9                           exx
 408+ 6CAD CD 9F 64                     call    MMU7_read
 409+ 6CB0 D9                           exx
 410+ 6CB1 6F                           ld      l, a
 411+ 6CB2 26 00                        ld      h, 0
 412+ 6CB4 E5                           push    hl
 413+ 6CB5                              next
 413+ 6CB5 DD E9       >                jp      (ix)
 414+ 6CB7
 415+ 6CB7              //  ______________________________________________________________________
 416+ 6CB7              //
 417+ 6CB7              // mmu7!        n --
 418+ 6CB7              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 6CB7              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 6CB7
 421+ 6CB7                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 6CB7             >
 421+ 6CB7             >Dict_Ptr        defl    $
 421+ 6CB7             >
 421+ 6CB7             >//              ______________________________________________________________________
 421+ 6CB7             >//              Heap part
 421+ 6CB7             >
 421+ 6CB7             >
 421+ 6CB7             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E631             >
 421+ E631             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E631             >Latest_Definition defl  Heap_Ptr
 421+ E631             >
 421+ E631             >                // dummy db directives used to calculate length of namec
 421+ E631 4D 4D 55 37 >                db      "MMU7!"
 421+ E635 21          >
 421+ E636             >len_NFA         defl    $ - temp_NFA
 421+ E636             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E631             >
 421+ E631 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E632 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E636 21          >
 421+ E637             >                org     $-1                 // alter last byte of Name just above to set
 421+ E636 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E637             >
 421+ E637 27 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E639             >Prev_Ptr        defl    Heap_Ptr
 421+ E639             >
 421+ E639             >mirror_Ptr      defl    $
 421+ E639             >
 421+ E639 B9 6C       >                dw      Dict_Ptr + 2        // xt
 421+ E63B             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E63B             >
 421+ E63B             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E63B             >
 421+ E63B             >//              ______________________________________________________________________
 421+ E63B             >//              Dictionary part
 421+ E63B             >
 421+ E63B             >                org     Dict_Ptr
 421+ 6CB7             >
 421+ 6CB7 39 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 6CB9             >
 421+ 6CB9             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6CB9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6CB9 ~           >
 421+ 6CB9 ~           >
 421+ 6CB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6CB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6CB9             >
 421+ 6CB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6CB9 E1                           pop     hl
 423+ 6CBA 7D                           ld      a, l
 424+ 6CBB ED 92 57                     nextreg 87, a
 425+ 6CBE
 426+ 6CBE                              next
 426+ 6CBE DD E9       >                jp      (ix)
 427+ 6CC0
 428+ 6CC0              //  ______________________________________________________________________
 429+ 6CC0              //
 430+ 6CC0              // >far         ha -- a n
 431+ 6CC0              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 6CC0              // take lower bits of H and L as an offset from E000h
 433+ 6CC0              // then return address  a  between E000h-FFFFh
 434+ 6CC0              // and page number n  between 64-71 (40h-47h)
 435+ 6CC0              // For example, in hex:
 436+ 6CC0              //   0000 >FAR  gives  40.E000
 437+ 6CC0              //   1FFF >FAR  gives  40.FFFF
 438+ 6CC0              //   2000 >FAR  gives  41.E000
 439+ 6CC0              //   3FFF >FAR  gives  41.FFFF
 440+ 6CC0              //   EFFF >FAR  gives  47.EFFF
 441+ 6CC0              //   FFFF >FAR  gives  47.FFFF
 442+ 6CC0                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 6CC0             >
 442+ 6CC0             >Dict_Ptr        defl    $
 442+ 6CC0             >
 442+ 6CC0             >//              ______________________________________________________________________
 442+ 6CC0             >//              Heap part
 442+ 6CC0             >
 442+ 6CC0             >
 442+ 6CC0             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E63B             >
 442+ E63B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E63B             >Latest_Definition defl  Heap_Ptr
 442+ E63B             >
 442+ E63B             >                // dummy db directives used to calculate length of namec
 442+ E63B 3E 46 41 52 >                db      ">FAR"
 442+ E63F             >len_NFA         defl    $ - temp_NFA
 442+ E63F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E63B             >
 442+ E63B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E63C 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E640             >                org     $-1                 // alter last byte of Name just above to set
 442+ E63F D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E640             >
 442+ E640 31 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E642             >Prev_Ptr        defl    Heap_Ptr
 442+ E642             >
 442+ E642             >mirror_Ptr      defl    $
 442+ E642             >
 442+ E642 C2 6C       >                dw      Dict_Ptr + 2        // xt
 442+ E644             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E644             >
 442+ E644             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E644             >
 442+ E644             >//              ______________________________________________________________________
 442+ E644             >//              Dictionary part
 442+ E644             >
 442+ E644             >                org     Dict_Ptr
 442+ 6CC0             >
 442+ 6CC0 42 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 6CC2             >
 442+ 6CC2             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 6CC2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 6CC2 ~           >
 442+ 6CC2 ~           >
 442+ 6CC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 6CC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 6CC2             >
 442+ 6CC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 6CC2 E1                           pop     hl
 444+ 6CC3 CD AA 64                     call    TO_FAR_rout
 445+ 6CC6 E5                           push    hl
 446+ 6CC7 6F                           ld      l, a
 447+ 6CC8 26 00                        ld      h, 0
 448+ 6CCA E5                           push    hl
 449+ 6CCB                              next
 449+ 6CCB DD E9       >                jp      (ix)
 450+ 6CCD
 451+ 6CCD              //  ______________________________________________________________________
 452+ 6CCD              //
 453+ 6CCD              // <far         a n  -- ha
 454+ 6CCD              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 455+ 6CCD              // reverse of >FAR: encodes a FAR address compressing
 456+ 6CCD              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 6CCD                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 6CCD             >
 457+ 6CCD             >Dict_Ptr        defl    $
 457+ 6CCD             >
 457+ 6CCD             >//              ______________________________________________________________________
 457+ 6CCD             >//              Heap part
 457+ 6CCD             >
 457+ 6CCD             >
 457+ 6CCD             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E644             >
 457+ E644             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E644             >Latest_Definition defl  Heap_Ptr
 457+ E644             >
 457+ E644             >                // dummy db directives used to calculate length of namec
 457+ E644 3C 46 41 52 >                db      "<FAR"
 457+ E648             >len_NFA         defl    $ - temp_NFA
 457+ E648             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E644             >
 457+ E644 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E645 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E649             >                org     $-1                 // alter last byte of Name just above to set
 457+ E648 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E649             >
 457+ E649 3B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E64B             >Prev_Ptr        defl    Heap_Ptr
 457+ E64B             >
 457+ E64B             >mirror_Ptr      defl    $
 457+ E64B             >
 457+ E64B CF 6C       >                dw      Dict_Ptr + 2        // xt
 457+ E64D             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E64D             >
 457+ E64D             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E64D             >
 457+ E64D             >//              ______________________________________________________________________
 457+ E64D             >//              Dictionary part
 457+ E64D             >
 457+ E64D             >                org     Dict_Ptr
 457+ 6CCD             >
 457+ 6CCD 4B 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 6CCF             >
 457+ 6CCF             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 6CCF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 6CCF ~           >
 457+ 6CCF ~           >
 457+ 6CCF             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 6CCF             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 6CCF             >
 457+ 6CCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 6CCF E1                           pop     hl                  // page number in e
 459+ 6CD0 7D                           ld      a, l
 460+ 6CD1 E6 07                        and     07
 461+ 6CD3 0F                           rrca
 462+ 6CD4 0F                           rrca
 463+ 6CD5 0F                           rrca
 464+ 6CD6 08                           ex      af, af
 465+ 6CD7 E1                           pop     hl                  // address in hl
 466+ 6CD8 7C                           ld      a, h
 467+ 6CD9 E6 1F                        and     $1F
 468+ 6CDB 67                           ld      h, a
 469+ 6CDC 08                           ex      af, af
 470+ 6CDD B4                           or      h
 471+ 6CDE 67                           ld      h, a
 472+ 6CDF                              psh1
 472+ 6CDF E5          >                push    hl
 472+ 6CE0 DD E9       >                jp      (ix)
 473+ 6CE2
 474+ 6CE2              //  ______________________________________________________________________
 475+ 6CE2              //
 476+ 6CE2              // ?IN_MMU7        a -- f
 477+ 6CE2              // query current page in MMU7 8K-RAM : 0 and 223
 478+ 6CE2                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 478+ 6CE2             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 478+ 6CE2             >
 478+ 6CE2             >Dict_Ptr        defl    $
 478+ 6CE2             >
 478+ 6CE2             >//              ______________________________________________________________________
 478+ 6CE2             >//              Heap part
 478+ 6CE2             >
 478+ 6CE2             >
 478+ 6CE2             >                org     (Heap_Ptr & $1FFF) + $E000
 478+ E64D             >
 478+ E64D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ E64D             >Latest_Definition defl  Heap_Ptr
 478+ E64D             >
 478+ E64D             >                // dummy db directives used to calculate length of namec
 478+ E64D 3F 49 4E 5F >                db      "?IN_MMU7"
 478+ E651 4D 4D 55 37 >
 478+ E655             >len_NFA         defl    $ - temp_NFA
 478+ E655             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ E64D             >
 478+ E64D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ E64E 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 478+ E652 4D 4D 55 37 >
 478+ E656             >                org     $-1                 // alter last byte of Name just above to set
 478+ E655 B7          >                db      {b $} | END_BIT     // msb as name end
 478+ E656             >
 478+ E656 44 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 478+ E658             >Prev_Ptr        defl    Heap_Ptr
 478+ E658             >
 478+ E658             >mirror_Ptr      defl    $
 478+ E658             >
 478+ E658 E4 6C       >                dw      Dict_Ptr + 2        // xt
 478+ E65A             >Heap_Ptr        defl    $ - $E000           // save current HP
 478+ E65A             >
 478+ E65A             >Current_HP      defl  $ - $E000             // used to set HP once!
 478+ E65A             >
 478+ E65A             >//              ______________________________________________________________________
 478+ E65A             >//              Dictionary part
 478+ E65A             >
 478+ E65A             >                org     Dict_Ptr
 478+ 6CE2             >
 478+ 6CE2 58 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 478+ 6CE4             >
 478+ 6CE4             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 6CE4 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 6CE7             >
 478+ 6CE7             >
 478+ 6CE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 6CE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 6CE7             >
 478+ 6CE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 6CE7 25 69                        dw      DUP
 480+ 6CE9 A3 63 00 E0                  dw      LIT, $E000
 481+ 6CED 09 6C                        dw      ULESS
 482+ 6CEF 7F 68                        dw      NOT_OP
 483+ 6CF1 4C 68                        dw      EXIT
 484+ 6CF3
 485+ 6CF3              //  ______________________________________________________________________
 486+ 6CF3              //
 487+ 6CF3              // far          hp -- ha
 488+ 6CF3              // query current page in MMU7 8K-RAM : 0 and 223
 489+ 6CF3                              Colon_Def FAR, "FAR", is_normal
 489+ 6CF3             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 489+ 6CF3             >
 489+ 6CF3             >Dict_Ptr        defl    $
 489+ 6CF3             >
 489+ 6CF3             >//              ______________________________________________________________________
 489+ 6CF3             >//              Heap part
 489+ 6CF3             >
 489+ 6CF3             >
 489+ 6CF3             >                org     (Heap_Ptr & $1FFF) + $E000
 489+ E65A             >
 489+ E65A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ E65A             >Latest_Definition defl  Heap_Ptr
 489+ E65A             >
 489+ E65A             >                // dummy db directives used to calculate length of namec
 489+ E65A 46 41 52    >                db      "FAR"
 489+ E65D             >len_NFA         defl    $ - temp_NFA
 489+ E65D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ E65A             >
 489+ E65A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ E65B 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 489+ E65E             >                org     $-1                 // alter last byte of Name just above to set
 489+ E65D D2          >                db      {b $} | END_BIT     // msb as name end
 489+ E65E             >
 489+ E65E 4D 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 489+ E660             >Prev_Ptr        defl    Heap_Ptr
 489+ E660             >
 489+ E660             >mirror_Ptr      defl    $
 489+ E660             >
 489+ E660 F5 6C       >                dw      Dict_Ptr + 2        // xt
 489+ E662             >Heap_Ptr        defl    $ - $E000           // save current HP
 489+ E662             >
 489+ E662             >Current_HP      defl  $ - $E000             // used to set HP once!
 489+ E662             >
 489+ E662             >//              ______________________________________________________________________
 489+ E662             >//              Dictionary part
 489+ E662             >
 489+ E662             >                org     Dict_Ptr
 489+ 6CF3             >
 489+ 6CF3 60 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 489+ 6CF5             >
 489+ 6CF5             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 6CF5 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 489+ 6CF8             >
 489+ 6CF8             >
 489+ 6CF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 6CF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 6CF8             >
 489+ 6CF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 6CF8 C2 6C                        dw      TO_FAR
 491+ 6CFA B9 6C                        dw      MMU7_STORE
 492+ 6CFC 4C 68                        dw      EXIT
 493+ 6CFE
 494+ 6CFE              //  ______________________________________________________________________
 495+ 6CFE              //
 496+ 6CFE              // ?HEAP_PTR       n -- n f
 497+ 6CFE              // query current page in MMU7 8K-RAM : 0 and 223
 498+ 6CFE                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 498+ 6CFE             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 498+ 6CFE             >
 498+ 6CFE             >Dict_Ptr        defl    $
 498+ 6CFE             >
 498+ 6CFE             >//              ______________________________________________________________________
 498+ 6CFE             >//              Heap part
 498+ 6CFE             >
 498+ 6CFE             >
 498+ 6CFE             >                org     (Heap_Ptr & $1FFF) + $E000
 498+ E662             >
 498+ E662             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ E662             >Latest_Definition defl  Heap_Ptr
 498+ E662             >
 498+ E662             >                // dummy db directives used to calculate length of namec
 498+ E662 3F 48 45 41 >                db      "?HEAP_PTR"
 498+ E666 50 5F 50 54 >
 498+ E66A 52          >
 498+ E66B             >len_NFA         defl    $ - temp_NFA
 498+ E66B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ E662             >
 498+ E662 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ E663 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 498+ E667 50 5F 50 54 >
 498+ E66B 52          >
 498+ E66C             >                org     $-1                 // alter last byte of Name just above to set
 498+ E66B D2          >                db      {b $} | END_BIT     // msb as name end
 498+ E66C             >
 498+ E66C 5A 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 498+ E66E             >Prev_Ptr        defl    Heap_Ptr
 498+ E66E             >
 498+ E66E             >mirror_Ptr      defl    $
 498+ E66E             >
 498+ E66E 00 6D       >                dw      Dict_Ptr + 2        // xt
 498+ E670             >Heap_Ptr        defl    $ - $E000           // save current HP
 498+ E670             >
 498+ E670             >Current_HP      defl  $ - $E000             // used to set HP once!
 498+ E670             >
 498+ E670             >//              ______________________________________________________________________
 498+ E670             >//              Dictionary part
 498+ E670             >
 498+ E670             >                org     Dict_Ptr
 498+ 6CFE             >
 498+ 6CFE 6E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 498+ 6D00             >
 498+ 6D00             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 6D00 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 498+ 6D03             >
 498+ 6D03             >
 498+ 6D03             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 6D03             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 6D03             >
 498+ 6D03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 6D03 25 69                        dw      DUP
 500+ 6D05 F5 63                        dw      ZBRANCH
 501+ 6D07 08 00                        dw      QHeap_Skip - $
 502+ 6D09 A3 63 00 60                  dw          LIT, $6000
 503+ 6D0D 09 6C                        dw          ULESS
 504+ 6D0F              QHeap_Skip:                                          // endif
 505+ 6D0F 4C 68                        dw      EXIT                        // ;
 506+ 6D11
 507+ 6D11              //  ______________________________________________________________________
 508+ 6D11              //
 509+ 6D11              // ?>heap       n1 -- n2
 510+ 6D11              // query current page in MMU7 8K-RAM : 0 and 223
 511+ 6D11                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 511+ 6D11             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 511+ 6D11             >
 511+ 6D11             >Dict_Ptr        defl    $
 511+ 6D11             >
 511+ 6D11             >//              ______________________________________________________________________
 511+ 6D11             >//              Heap part
 511+ 6D11             >
 511+ 6D11             >
 511+ 6D11             >                org     (Heap_Ptr & $1FFF) + $E000
 511+ E670             >
 511+ E670             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ E670             >Latest_Definition defl  Heap_Ptr
 511+ E670             >
 511+ E670             >                // dummy db directives used to calculate length of namec
 511+ E670 3F 3E 48 45 >                db      "?>HEAP"
 511+ E674 41 50       >
 511+ E676             >len_NFA         defl    $ - temp_NFA
 511+ E676             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ E670             >
 511+ E670 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ E671 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 511+ E675 41 50       >
 511+ E677             >                org     $-1                 // alter last byte of Name just above to set
 511+ E676 D0          >                db      {b $} | END_BIT     // msb as name end
 511+ E677             >
 511+ E677 62 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 511+ E679             >Prev_Ptr        defl    Heap_Ptr
 511+ E679             >
 511+ E679             >mirror_Ptr      defl    $
 511+ E679             >
 511+ E679 13 6D       >                dw      Dict_Ptr + 2        // xt
 511+ E67B             >Heap_Ptr        defl    $ - $E000           // save current HP
 511+ E67B             >
 511+ E67B             >Current_HP      defl  $ - $E000             // used to set HP once!
 511+ E67B             >
 511+ E67B             >//              ______________________________________________________________________
 511+ E67B             >//              Dictionary part
 511+ E67B             >
 511+ E67B             >                org     Dict_Ptr
 511+ 6D11             >
 511+ 6D11 79 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 511+ 6D13             >
 511+ 6D13             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 6D13 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 6D16             >
 511+ 6D16             >
 511+ 6D16             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 6D16             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 6D16             >
 511+ 6D16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 6D16 25 69                        dw      DUP
 513+ 6D18 00 6D                        dw      QHEAPP
 514+ 6D1A F5 63                        dw      ZBRANCH
 515+ 6D1C 04 00                        dw      Q2Heap_Skip - $
 516+ 6D1E F5 6C                        dw          FAR
 517+ 6D20              Q2Heap_Skip:                                          // endif
 518+ 6D20 4C 68                        dw      EXIT                        // ;
 519+ 6D22
 520+ 6D22              //  ______________________________________________________________________
 521+ 6D22              //
 522+ 6D22              // hp_fetch     -- a
 523+ 6D22                              Colon_Def HP_FETCH, "HP@", is_normal
 523+ 6D22             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 523+ 6D22             >
 523+ 6D22             >Dict_Ptr        defl    $
 523+ 6D22             >
 523+ 6D22             >//              ______________________________________________________________________
 523+ 6D22             >//              Heap part
 523+ 6D22             >
 523+ 6D22             >
 523+ 6D22             >                org     (Heap_Ptr & $1FFF) + $E000
 523+ E67B             >
 523+ E67B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ E67B             >Latest_Definition defl  Heap_Ptr
 523+ E67B             >
 523+ E67B             >                // dummy db directives used to calculate length of namec
 523+ E67B 48 50 40    >                db      "HP@"
 523+ E67E             >len_NFA         defl    $ - temp_NFA
 523+ E67E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ E67B             >
 523+ E67B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ E67C 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 523+ E67F             >                org     $-1                 // alter last byte of Name just above to set
 523+ E67E C0          >                db      {b $} | END_BIT     // msb as name end
 523+ E67F             >
 523+ E67F 70 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 523+ E681             >Prev_Ptr        defl    Heap_Ptr
 523+ E681             >
 523+ E681             >mirror_Ptr      defl    $
 523+ E681             >
 523+ E681 24 6D       >                dw      Dict_Ptr + 2        // xt
 523+ E683             >Heap_Ptr        defl    $ - $E000           // save current HP
 523+ E683             >
 523+ E683             >Current_HP      defl  $ - $E000             // used to set HP once!
 523+ E683             >
 523+ E683             >//              ______________________________________________________________________
 523+ E683             >//              Dictionary part
 523+ E683             >
 523+ E683             >                org     Dict_Ptr
 523+ 6D22             >
 523+ 6D22 81 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 523+ 6D24             >
 523+ 6D24             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 6D24 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 6D27             >
 523+ 6D27             >
 523+ 6D27             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 6D27             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 6D27             >
 523+ 6D27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 6D27 23 6B 96 69                  dw      HP, FETCH               // hp @
 525+ 6D2B 4C 68                        dw      EXIT                    // ;
 526+ 6D2D
 527+ 6D2D              //  ______________________________________________________________________
 528+ 6D2D              //
 529+ 6D2D              // page-watermark   -- n
 530+ 6D2D              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 531+ 6D2D                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 531+ 6D2D             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 531+ 6D2D             >
 531+ 6D2D             >Dict_Ptr        defl    $
 531+ 6D2D             >
 531+ 6D2D             >//              ______________________________________________________________________
 531+ 6D2D             >//              Heap part
 531+ 6D2D             >
 531+ 6D2D             >
 531+ 6D2D             >                org     (Heap_Ptr & $1FFF) + $E000
 531+ E683             >
 531+ E683             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ E683             >Latest_Definition defl  Heap_Ptr
 531+ E683             >
 531+ E683             >                // dummy db directives used to calculate length of namec
 531+ E683 50 41 47 45 >                db      "PAGE-WATERMARK"
 531+ E687 2D 57 41 54 >
 531+ E68B 45 52 4D 41 >
 531+ E68F 52 4B       >
 531+ E691             >len_NFA         defl    $ - temp_NFA
 531+ E691             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ E683             >
 531+ E683 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ E684 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 531+ E688 2D 57 41 54 >
 531+ E68C 45 52 4D 41 >
 531+ E690 52 4B       >
 531+ E692             >                org     $-1                 // alter last byte of Name just above to set
 531+ E691 CB          >                db      {b $} | END_BIT     // msb as name end
 531+ E692             >
 531+ E692 7B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 531+ E694             >Prev_Ptr        defl    Heap_Ptr
 531+ E694             >
 531+ E694             >mirror_Ptr      defl    $
 531+ E694             >
 531+ E694 2F 6D       >                dw      Dict_Ptr + 2        // xt
 531+ E696             >Heap_Ptr        defl    $ - $E000           // save current HP
 531+ E696             >
 531+ E696             >Current_HP      defl  $ - $E000             // used to set HP once!
 531+ E696             >
 531+ E696             >//              ______________________________________________________________________
 531+ E696             >//              Dictionary part
 531+ E696             >
 531+ E696             >                org     Dict_Ptr
 531+ 6D2D             >
 531+ 6D2D 94 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 531+ 6D2F             >
 531+ 6D2F             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 6D2F CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 531+ 6D32             >
 531+ 6D32             >
 531+ 6D32             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 6D32             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 6D32             >
 531+ 6D32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 6D32 80 1F       >                dw      $1F80
 532+ 6D34
 533+ 6D34              //  ______________________________________________________________________
 534+ 6D34              //
 535+ 6D34              // skip-hp-page ha -- a
 536+ 6D34                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 536+ 6D34             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 536+ 6D34             >
 536+ 6D34             >Dict_Ptr        defl    $
 536+ 6D34             >
 536+ 6D34             >//              ______________________________________________________________________
 536+ 6D34             >//              Heap part
 536+ 6D34             >
 536+ 6D34             >
 536+ 6D34             >                org     (Heap_Ptr & $1FFF) + $E000
 536+ E696             >
 536+ E696             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ E696             >Latest_Definition defl  Heap_Ptr
 536+ E696             >
 536+ E696             >                // dummy db directives used to calculate length of namec
 536+ E696 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 536+ E69A 2D 48 50 2D >
 536+ E69E 50 41 47 45 >
 536+ E6A2             >len_NFA         defl    $ - temp_NFA
 536+ E6A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ E696             >
 536+ E696 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ E697 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 536+ E69B 2D 48 50 2D >
 536+ E69F 50 41 47 45 >
 536+ E6A3             >                org     $-1                 // alter last byte of Name just above to set
 536+ E6A2 C5          >                db      {b $} | END_BIT     // msb as name end
 536+ E6A3             >
 536+ E6A3 83 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 536+ E6A5             >Prev_Ptr        defl    Heap_Ptr
 536+ E6A5             >
 536+ E6A5             >mirror_Ptr      defl    $
 536+ E6A5             >
 536+ E6A5 36 6D       >                dw      Dict_Ptr + 2        // xt
 536+ E6A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 536+ E6A7             >
 536+ E6A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 536+ E6A7             >
 536+ E6A7             >//              ______________________________________________________________________
 536+ E6A7             >//              Dictionary part
 536+ E6A7             >
 536+ E6A7             >                org     Dict_Ptr
 536+ 6D34             >
 536+ 6D34 A5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 536+ 6D36             >
 536+ 6D36             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 6D36 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 536+ 6D39             >
 536+ 6D39             >
 536+ 6D39             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 6D39             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 6D39             >
 536+ 6D39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 6D39 24 6D                        dw      HP_FETCH                // hp@
 538+ 6D3B A3 63 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 538+ 6D3F 0C 68
 539+ 6D41 9F 68                        dw      PLUS
 540+ 6D43 2F 6D                        dw      PAGE_WATERMARK
 541+ 6D45 2C 6C                        dw      GREATER
 542+ 6D47 F5 63                        dw      ZBRANCH
 543+ 6D49 12 00                        dw      Skip_Skip - $   // if
 544+ 6D4B 24 6D                        dw      HP_FETCH
 545+ 6D4D A3 63 FF 1F                  dw      LIT, $1FFF, OR_OP
 545+ 6D51 1B 68
 546+ 6D53 B8 68 C6 68                  dw      ONE_PLUS, TWO_PLUS
 547+ 6D57 23 6B A0 69                  dw      HP, STORE
 548+ 6D5B              Skip_Skip:
 549+ 6D5B 4C 68                        dw      EXIT                    // ;
 550+ 6D5D              //  ______________________________________________________________________
 551+ 6D5D              //
 552+ 6D5D              // latest       -- nfa
 553+ 6D5D                              Colon_Def LATEST, "LATEST", is_normal
 553+ 6D5D             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 553+ 6D5D             >
 553+ 6D5D             >Dict_Ptr        defl    $
 553+ 6D5D             >
 553+ 6D5D             >//              ______________________________________________________________________
 553+ 6D5D             >//              Heap part
 553+ 6D5D             >
 553+ 6D5D             >
 553+ 6D5D             >                org     (Heap_Ptr & $1FFF) + $E000
 553+ E6A7             >
 553+ E6A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 553+ E6A7             >Latest_Definition defl  Heap_Ptr
 553+ E6A7             >
 553+ E6A7             >                // dummy db directives used to calculate length of namec
 553+ E6A7 4C 41 54 45 >                db      "LATEST"
 553+ E6AB 53 54       >
 553+ E6AD             >len_NFA         defl    $ - temp_NFA
 553+ E6AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 553+ E6A7             >
 553+ E6A7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 553+ E6A8 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 553+ E6AC 53 54       >
 553+ E6AE             >                org     $-1                 // alter last byte of Name just above to set
 553+ E6AD D4          >                db      {b $} | END_BIT     // msb as name end
 553+ E6AE             >
 553+ E6AE 96 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 553+ E6B0             >Prev_Ptr        defl    Heap_Ptr
 553+ E6B0             >
 553+ E6B0             >mirror_Ptr      defl    $
 553+ E6B0             >
 553+ E6B0 5F 6D       >                dw      Dict_Ptr + 2        // xt
 553+ E6B2             >Heap_Ptr        defl    $ - $E000           // save current HP
 553+ E6B2             >
 553+ E6B2             >Current_HP      defl  $ - $E000             // used to set HP once!
 553+ E6B2             >
 553+ E6B2             >//              ______________________________________________________________________
 553+ E6B2             >//              Dictionary part
 553+ E6B2             >
 553+ E6B2             >                org     Dict_Ptr
 553+ 6D5D             >
 553+ 6D5D B0 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 553+ 6D5F             >
 553+ 6D5F             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 553+ 6D5F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 553+ 6D62             >
 553+ 6D62             >
 553+ 6D62             >                endif           ; ok        // for other definitions it "points" the correct handler
 553+ 6D62             >                // Use of "; ok" to suppress "warning[fwdref]"
 553+ 6D62             >
 553+ 6D62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 554+ 6D62 53 6B                        dw      CURRENT                 // current
 555+ 6D64 96 69 96 69                  dw      FETCH, FETCH            // @ @
 556+ 6D68 F5 6C                        dw      FAR // Q TO HEAP
 557+ 6D6A 4C 68                        dw      EXIT                    // ;
 558+ 6D6C
 559+ 6D6C              //  ______________________________________________________________________
 560+ 6D6C              //
 561+ 6D6C              // >body        cfa -- pfa
 562+ 6D6C                              Colon_Def TO_BODY, ">BODY", is_normal
 562+ 6D6C             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 562+ 6D6C             >
 562+ 6D6C             >Dict_Ptr        defl    $
 562+ 6D6C             >
 562+ 6D6C             >//              ______________________________________________________________________
 562+ 6D6C             >//              Heap part
 562+ 6D6C             >
 562+ 6D6C             >
 562+ 6D6C             >                org     (Heap_Ptr & $1FFF) + $E000
 562+ E6B2             >
 562+ E6B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ E6B2             >Latest_Definition defl  Heap_Ptr
 562+ E6B2             >
 562+ E6B2             >                // dummy db directives used to calculate length of namec
 562+ E6B2 3E 42 4F 44 >                db      ">BODY"
 562+ E6B6 59          >
 562+ E6B7             >len_NFA         defl    $ - temp_NFA
 562+ E6B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ E6B2             >
 562+ E6B2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ E6B3 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 562+ E6B7 59          >
 562+ E6B8             >                org     $-1                 // alter last byte of Name just above to set
 562+ E6B7 D9          >                db      {b $} | END_BIT     // msb as name end
 562+ E6B8             >
 562+ E6B8 A7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 562+ E6BA             >Prev_Ptr        defl    Heap_Ptr
 562+ E6BA             >
 562+ E6BA             >mirror_Ptr      defl    $
 562+ E6BA             >
 562+ E6BA 6E 6D       >                dw      Dict_Ptr + 2        // xt
 562+ E6BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 562+ E6BC             >
 562+ E6BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 562+ E6BC             >
 562+ E6BC             >//              ______________________________________________________________________
 562+ E6BC             >//              Dictionary part
 562+ E6BC             >
 562+ E6BC             >                org     Dict_Ptr
 562+ 6D6C             >
 562+ 6D6C BA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 562+ 6D6E             >
 562+ 6D6E             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 6D6E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 6D71             >
 562+ 6D71             >
 562+ 6D71             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 6D71             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 6D71             >
 562+ 6D71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 6D71 A3 6A 9F 68                  dw      THREE, PLUS             // cell+ --> 3 +
 564+ 6D75 4C 68                        dw      EXIT                    // ;
 565+ 6D77
 566+ 6D77              //  ______________________________________________________________________
 567+ 6D77              //
 568+ 6D77              // <name        cfa -- nfa
 569+ 6D77                              Colon_Def TO_NAME, "<NAME", is_normal
 569+ 6D77             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 569+ 6D77             >
 569+ 6D77             >Dict_Ptr        defl    $
 569+ 6D77             >
 569+ 6D77             >//              ______________________________________________________________________
 569+ 6D77             >//              Heap part
 569+ 6D77             >
 569+ 6D77             >
 569+ 6D77             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6BC             >
 569+ E6BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6BC             >Latest_Definition defl  Heap_Ptr
 569+ E6BC             >
 569+ E6BC             >                // dummy db directives used to calculate length of namec
 569+ E6BC 3C 4E 41 4D >                db      "<NAME"
 569+ E6C0 45          >
 569+ E6C1             >len_NFA         defl    $ - temp_NFA
 569+ E6C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6BC             >
 569+ E6BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6BD 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 569+ E6C1 45          >
 569+ E6C2             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6C1 C5          >                db      {b $} | END_BIT     // msb as name end
 569+ E6C2             >
 569+ E6C2 B2 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6C4             >Prev_Ptr        defl    Heap_Ptr
 569+ E6C4             >
 569+ E6C4             >mirror_Ptr      defl    $
 569+ E6C4             >
 569+ E6C4 79 6D       >                dw      Dict_Ptr + 2        // xt
 569+ E6C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6C6             >
 569+ E6C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6C6             >
 569+ E6C6             >//              ______________________________________________________________________
 569+ E6C6             >//              Dictionary part
 569+ E6C6             >
 569+ E6C6             >                org     Dict_Ptr
 569+ 6D77             >
 569+ 6D77 C4 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 6D79             >
 569+ 6D79             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 6D79 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 6D7C             >
 569+ 6D7C             >
 569+ 6D7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 6D7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 6D7C             >
 569+ 6D7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 6D7C D3 68                        dw      CELL_MINUS              // cell-
 571+ 6D7E 25 69 96 69                  dw      DUP, FETCH
 572+ 6D82 00 6D                        dw      QHEAPP
 573+ 6D84 F5 63                        dw      ZBRANCH
 574+ 6D86 08 00                        dw      ToName_Skip - $
 575+ 6D88 96 69 F5 6C                  dw          FETCH, FAR
 576+ 6D8C D3 68                        dw          CELL_MINUS
 577+ 6D8E              ToName_Skip:                                    // endif
 578+ 6D8E
 579+ 6D8E BF 68                        dw      ONE_SUBTRACT            // 1-
 580+ 6D90 AA 6A                        dw      NEG_ONE                 // -1
 581+ 6D92 8F 6C                        dw      TRAVERSE                // traverse
 582+ 6D94 4C 68                        dw      EXIT                    // ;
 583+ 6D96
 584+ 6D96              //  ______________________________________________________________________
 585+ 6D96              //
 586+ 6D96              // cfa          pfa -- cfa
 587+ 6D96                              Colon_Def CFA, "CFA", is_normal
 587+ 6D96             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 587+ 6D96             >
 587+ 6D96             >Dict_Ptr        defl    $
 587+ 6D96             >
 587+ 6D96             >//              ______________________________________________________________________
 587+ 6D96             >//              Heap part
 587+ 6D96             >
 587+ 6D96             >
 587+ 6D96             >                org     (Heap_Ptr & $1FFF) + $E000
 587+ E6C6             >
 587+ E6C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ E6C6             >Latest_Definition defl  Heap_Ptr
 587+ E6C6             >
 587+ E6C6             >                // dummy db directives used to calculate length of namec
 587+ E6C6 43 46 41    >                db      "CFA"
 587+ E6C9             >len_NFA         defl    $ - temp_NFA
 587+ E6C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ E6C6             >
 587+ E6C6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ E6C7 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 587+ E6CA             >                org     $-1                 // alter last byte of Name just above to set
 587+ E6C9 C1          >                db      {b $} | END_BIT     // msb as name end
 587+ E6CA             >
 587+ E6CA BC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 587+ E6CC             >Prev_Ptr        defl    Heap_Ptr
 587+ E6CC             >
 587+ E6CC             >mirror_Ptr      defl    $
 587+ E6CC             >
 587+ E6CC 98 6D       >                dw      Dict_Ptr + 2        // xt
 587+ E6CE             >Heap_Ptr        defl    $ - $E000           // save current HP
 587+ E6CE             >
 587+ E6CE             >Current_HP      defl  $ - $E000             // used to set HP once!
 587+ E6CE             >
 587+ E6CE             >//              ______________________________________________________________________
 587+ E6CE             >//              Dictionary part
 587+ E6CE             >
 587+ E6CE             >                org     Dict_Ptr
 587+ 6D96             >
 587+ 6D96 CC 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 587+ 6D98             >
 587+ 6D98             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 6D98 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 587+ 6D9B             >
 587+ 6D9B             >
 587+ 6D9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 6D9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 6D9B             >
 587+ 6D9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 6D9B A3 6A F2 6B                  dw      THREE, SUBTRACT         // 3 -
 589+ 6D9F 4C 68                        dw      EXIT                    // ;
 590+ 6DA1
 591+ 6DA1              //  ______________________________________________________________________
 592+ 6DA1              //
 593+ 6DA1              // nfa          pfa -- nfa
 594+ 6DA1                              Colon_Def NFA, "NFA", is_normal
 594+ 6DA1             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 594+ 6DA1             >
 594+ 6DA1             >Dict_Ptr        defl    $
 594+ 6DA1             >
 594+ 6DA1             >//              ______________________________________________________________________
 594+ 6DA1             >//              Heap part
 594+ 6DA1             >
 594+ 6DA1             >
 594+ 6DA1             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6CE             >
 594+ E6CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6CE             >Latest_Definition defl  Heap_Ptr
 594+ E6CE             >
 594+ E6CE             >                // dummy db directives used to calculate length of namec
 594+ E6CE 4E 46 41    >                db      "NFA"
 594+ E6D1             >len_NFA         defl    $ - temp_NFA
 594+ E6D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6CE             >
 594+ E6CE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6CF 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 594+ E6D2             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6D1 C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6D2             >
 594+ E6D2 C6 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6D4             >Prev_Ptr        defl    Heap_Ptr
 594+ E6D4             >
 594+ E6D4             >mirror_Ptr      defl    $
 594+ E6D4             >
 594+ E6D4 A3 6D       >                dw      Dict_Ptr + 2        // xt
 594+ E6D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6D6             >
 594+ E6D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6D6             >
 594+ E6D6             >//              ______________________________________________________________________
 594+ E6D6             >//              Dictionary part
 594+ E6D6             >
 594+ E6D6             >                org     Dict_Ptr
 594+ 6DA1             >
 594+ 6DA1 D4 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 6DA3             >
 594+ 6DA3             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 6DA3 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 6DA6             >
 594+ 6DA6             >
 594+ 6DA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 6DA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 6DA6             >
 594+ 6DA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 6DA6 98 6D                        dw      CFA                     // cfa
 596+ 6DA8 79 6D                        dw      TO_NAME                 // traverse
 597+ 6DAA 4C 68                        dw      EXIT                    // ;
 598+ 6DAC
 599+ 6DAC              //  ______________________________________________________________________
 600+ 6DAC              //
 601+ 6DAC              // lfa          pfa -- lfa
 602+ 6DAC                              Colon_Def LFA, "LFA", is_normal
 602+ 6DAC             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 602+ 6DAC             >
 602+ 6DAC             >Dict_Ptr        defl    $
 602+ 6DAC             >
 602+ 6DAC             >//              ______________________________________________________________________
 602+ 6DAC             >//              Heap part
 602+ 6DAC             >
 602+ 6DAC             >
 602+ 6DAC             >                org     (Heap_Ptr & $1FFF) + $E000
 602+ E6D6             >
 602+ E6D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ E6D6             >Latest_Definition defl  Heap_Ptr
 602+ E6D6             >
 602+ E6D6             >                // dummy db directives used to calculate length of namec
 602+ E6D6 4C 46 41    >                db      "LFA"
 602+ E6D9             >len_NFA         defl    $ - temp_NFA
 602+ E6D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ E6D6             >
 602+ E6D6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ E6D7 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 602+ E6DA             >                org     $-1                 // alter last byte of Name just above to set
 602+ E6D9 C1          >                db      {b $} | END_BIT     // msb as name end
 602+ E6DA             >
 602+ E6DA CE 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 602+ E6DC             >Prev_Ptr        defl    Heap_Ptr
 602+ E6DC             >
 602+ E6DC             >mirror_Ptr      defl    $
 602+ E6DC             >
 602+ E6DC AE 6D       >                dw      Dict_Ptr + 2        // xt
 602+ E6DE             >Heap_Ptr        defl    $ - $E000           // save current HP
 602+ E6DE             >
 602+ E6DE             >Current_HP      defl  $ - $E000             // used to set HP once!
 602+ E6DE             >
 602+ E6DE             >//              ______________________________________________________________________
 602+ E6DE             >//              Dictionary part
 602+ E6DE             >
 602+ E6DE             >                org     Dict_Ptr
 602+ 6DAC             >
 602+ 6DAC DC 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 602+ 6DAE             >
 602+ 6DAE             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 6DAE CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 6DB1             >
 602+ 6DB1             >
 602+ 6DB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 6DB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 6DB1             >
 602+ 6DB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 6DB1 A3 6D                        dw      NFA                     // nfa
 604+ 6DB3 95 6A                        dw      ONE                     // 1
 605+ 6DB5 8F 6C                        dw      TRAVERSE                // traverse
 606+ 6DB7 B8 68                        dw      ONE_PLUS                // 1+
 607+ 6DB9 4C 68                        dw      EXIT                    // ;
 608+ 6DBB
 609+ 6DBB              //  ______________________________________________________________________
 610+ 6DBB              //
 611+ 6DBB              // pfa          nfa -- pfa
 612+ 6DBB                              Colon_Def PFA, "PFA", is_normal
 612+ 6DBB             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 612+ 6DBB             >
 612+ 6DBB             >Dict_Ptr        defl    $
 612+ 6DBB             >
 612+ 6DBB             >//              ______________________________________________________________________
 612+ 6DBB             >//              Heap part
 612+ 6DBB             >
 612+ 6DBB             >
 612+ 6DBB             >                org     (Heap_Ptr & $1FFF) + $E000
 612+ E6DE             >
 612+ E6DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 612+ E6DE             >Latest_Definition defl  Heap_Ptr
 612+ E6DE             >
 612+ E6DE             >                // dummy db directives used to calculate length of namec
 612+ E6DE 50 46 41    >                db      "PFA"
 612+ E6E1             >len_NFA         defl    $ - temp_NFA
 612+ E6E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 612+ E6DE             >
 612+ E6DE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 612+ E6DF 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 612+ E6E2             >                org     $-1                 // alter last byte of Name just above to set
 612+ E6E1 C1          >                db      {b $} | END_BIT     // msb as name end
 612+ E6E2             >
 612+ E6E2 D6 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 612+ E6E4             >Prev_Ptr        defl    Heap_Ptr
 612+ E6E4             >
 612+ E6E4             >mirror_Ptr      defl    $
 612+ E6E4             >
 612+ E6E4 BD 6D       >                dw      Dict_Ptr + 2        // xt
 612+ E6E6             >Heap_Ptr        defl    $ - $E000           // save current HP
 612+ E6E6             >
 612+ E6E6             >Current_HP      defl  $ - $E000             // used to set HP once!
 612+ E6E6             >
 612+ E6E6             >//              ______________________________________________________________________
 612+ E6E6             >//              Dictionary part
 612+ E6E6             >
 612+ E6E6             >                org     Dict_Ptr
 612+ 6DBB             >
 612+ 6DBB E4 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 612+ 6DBD             >
 612+ 6DBD             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 612+ 6DBD CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 612+ 6DC0             >
 612+ 6DC0             >
 612+ 6DC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 612+ 6DC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 612+ 6DC0             >
 612+ 6DC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 613+ 6DC0 13 6D                        dw      QTOHEAP
 614+ 6DC2 95 6A                        dw      ONE                     // 1
 615+ 6DC4 8F 6C                        dw      TRAVERSE                // traverse
 616+ 6DC6 B8 68                        dw      ONE_PLUS                // 1+
 617+ 6DC8 CE 68                        dw      CELL_PLUS               // cell+
 618+ 6DCA E4 6C                        dw      QMMU7
 619+ 6DCC F5 63                        dw      ZBRANCH
 620+ 6DCE 0E 00                        dw      PFA_Skip - $
 621+ 6DD0 AC 6C                        dw          MMU7_FETCH
 622+ 6DD2 95 6A F2 6B                  dw          ONE, SUBTRACT
 623+ 6DD6 F5 63                        dw          ZBRANCH
 624+ 6DD8 04 00                        dw          PFA_Skip - $
 625+ 6DDA 96 69                        dw              FETCH
 626+ 6DDC              PFA_Skip:                                    // endif
 627+ 6DDC 6E 6D                        dw      TO_BODY                 // >body
 628+ 6DDE 4C 68                        dw      EXIT                    // ;
 629+ 6DE0
 630+ 6DE0              //  ______________________________________________________________________
 631+ 6DE0              //
 632+ 6DE0              // !csp         --
 633+ 6DE0              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 634+ 6DE0                              Colon_Def STORE_CSP, "!CSP", is_normal
 634+ 6DE0             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 634+ 6DE0             >
 634+ 6DE0             >Dict_Ptr        defl    $
 634+ 6DE0             >
 634+ 6DE0             >//              ______________________________________________________________________
 634+ 6DE0             >//              Heap part
 634+ 6DE0             >
 634+ 6DE0             >
 634+ 6DE0             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ E6E6             >
 634+ E6E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ E6E6             >Latest_Definition defl  Heap_Ptr
 634+ E6E6             >
 634+ E6E6             >                // dummy db directives used to calculate length of namec
 634+ E6E6 21 43 53 50 >                db      "!CSP"
 634+ E6EA             >len_NFA         defl    $ - temp_NFA
 634+ E6EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ E6E6             >
 634+ E6E6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ E6E7 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 634+ E6EB             >                org     $-1                 // alter last byte of Name just above to set
 634+ E6EA D0          >                db      {b $} | END_BIT     // msb as name end
 634+ E6EB             >
 634+ E6EB DE 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ E6ED             >Prev_Ptr        defl    Heap_Ptr
 634+ E6ED             >
 634+ E6ED             >mirror_Ptr      defl    $
 634+ E6ED             >
 634+ E6ED E2 6D       >                dw      Dict_Ptr + 2        // xt
 634+ E6EF             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ E6EF             >
 634+ E6EF             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ E6EF             >
 634+ E6EF             >//              ______________________________________________________________________
 634+ E6EF             >//              Dictionary part
 634+ E6EF             >
 634+ E6EF             >                org     Dict_Ptr
 634+ 6DE0             >
 634+ 6DE0 ED 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 6DE2             >
 634+ 6DE2             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 6DE2 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 6DE5             >
 634+ 6DE5             >
 634+ 6DE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 6DE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 6DE5             >
 634+ 6DE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 6DE5 33 68                        dw      SPFETCH                 // sp@
 636+ 6DE7 71 6B A0 69                  dw      CSP, STORE              // csp !
 637+ 6DEB 4C 68                        dw      EXIT                    // ;
 638+ 6DED
 639+ 6DED              //  ______________________________________________________________________
 640+ 6DED              //
 641+ 6DED              // ?error       f n --
 642+ 6DED              // rase error n if flag f it true
 643+ 6DED                              Colon_Def QERROR, "?ERROR", is_normal
 643+ 6DED             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 643+ 6DED             >
 643+ 6DED             >Dict_Ptr        defl    $
 643+ 6DED             >
 643+ 6DED             >//              ______________________________________________________________________
 643+ 6DED             >//              Heap part
 643+ 6DED             >
 643+ 6DED             >
 643+ 6DED             >                org     (Heap_Ptr & $1FFF) + $E000
 643+ E6EF             >
 643+ E6EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ E6EF             >Latest_Definition defl  Heap_Ptr
 643+ E6EF             >
 643+ E6EF             >                // dummy db directives used to calculate length of namec
 643+ E6EF 3F 45 52 52 >                db      "?ERROR"
 643+ E6F3 4F 52       >
 643+ E6F5             >len_NFA         defl    $ - temp_NFA
 643+ E6F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ E6EF             >
 643+ E6EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ E6F0 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 643+ E6F4 4F 52       >
 643+ E6F6             >                org     $-1                 // alter last byte of Name just above to set
 643+ E6F5 D2          >                db      {b $} | END_BIT     // msb as name end
 643+ E6F6             >
 643+ E6F6 E6 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 643+ E6F8             >Prev_Ptr        defl    Heap_Ptr
 643+ E6F8             >
 643+ E6F8             >mirror_Ptr      defl    $
 643+ E6F8             >
 643+ E6F8 EF 6D       >                dw      Dict_Ptr + 2        // xt
 643+ E6FA             >Heap_Ptr        defl    $ - $E000           // save current HP
 643+ E6FA             >
 643+ E6FA             >Current_HP      defl  $ - $E000             // used to set HP once!
 643+ E6FA             >
 643+ E6FA             >//              ______________________________________________________________________
 643+ E6FA             >//              Dictionary part
 643+ E6FA             >
 643+ E6FA             >                org     Dict_Ptr
 643+ 6DED             >
 643+ 6DED F8 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 643+ 6DEF             >
 643+ 6DEF             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 6DEF CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 6DF2             >
 643+ 6DF2             >
 643+ 6DF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 6DF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 6DF2             >
 643+ 6DF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 6DF2 1E 69                        dw      SWAP                    // swap
 645+ 6DF4                                                              // if
 646+ 6DF4 F5 63                        dw      ZBRANCH
 647+ 6DF6 08 00                        dw      QError_Else - $
 648+ 6DF8 27 73                        dw          ERROR               //      error  ( is a forward-ref )
 649+ 6DFA                                                              // else
 650+ 6DFA E8 63                        dw      BRANCH
 651+ 6DFC 04 00                        dw      QError_Endif - $
 652+ 6DFE              QError_Else:
 653+ 6DFE 0A 69                        dw          DROP                //      drop
 654+ 6E00              QError_Endif:                                   // endif
 655+ 6E00 4C 68                        dw      EXIT                    // ;
 656+ 6E02
 657+ 6E02              //  ______________________________________________________________________
 658+ 6E02              //
 659+ 6E02              // ?comp       --
 660+ 6E02              // raise msg #17 if not compiling
 661+ 6E02                              Colon_Def QCOMP, "?COMP", is_normal
 661+ 6E02             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 661+ 6E02             >
 661+ 6E02             >Dict_Ptr        defl    $
 661+ 6E02             >
 661+ 6E02             >//              ______________________________________________________________________
 661+ 6E02             >//              Heap part
 661+ 6E02             >
 661+ 6E02             >
 661+ 6E02             >                org     (Heap_Ptr & $1FFF) + $E000
 661+ E6FA             >
 661+ E6FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 661+ E6FA             >Latest_Definition defl  Heap_Ptr
 661+ E6FA             >
 661+ E6FA             >                // dummy db directives used to calculate length of namec
 661+ E6FA 3F 43 4F 4D >                db      "?COMP"
 661+ E6FE 50          >
 661+ E6FF             >len_NFA         defl    $ - temp_NFA
 661+ E6FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 661+ E6FA             >
 661+ E6FA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 661+ E6FB 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 661+ E6FF 50          >
 661+ E700             >                org     $-1                 // alter last byte of Name just above to set
 661+ E6FF D0          >                db      {b $} | END_BIT     // msb as name end
 661+ E700             >
 661+ E700 EF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 661+ E702             >Prev_Ptr        defl    Heap_Ptr
 661+ E702             >
 661+ E702             >mirror_Ptr      defl    $
 661+ E702             >
 661+ E702 04 6E       >                dw      Dict_Ptr + 2        // xt
 661+ E704             >Heap_Ptr        defl    $ - $E000           // save current HP
 661+ E704             >
 661+ E704             >Current_HP      defl  $ - $E000             // used to set HP once!
 661+ E704             >
 661+ E704             >//              ______________________________________________________________________
 661+ E704             >//              Dictionary part
 661+ E704             >
 661+ E704             >                org     Dict_Ptr
 661+ 6E02             >
 661+ 6E02 02 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 661+ 6E04             >
 661+ 6E04             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 661+ 6E04 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 661+ 6E07             >
 661+ 6E07             >
 661+ 6E07             >                endif           ; ok        // for other definitions it "points" the correct handler
 661+ 6E07             >                // Use of "; ok" to suppress "warning[fwdref]"
 661+ 6E07             >
 661+ 6E07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 662+ 6E07 59 6B 96 69                  dw      STATE, FETCH            // state @
 663+ 6E0B 71 68                        dw      ZEQUAL                  // 0=
 664+ 6E0D A3 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 665+ 6E11 EF 6D                        dw      QERROR                  // ?error
 666+ 6E13 4C 68                        dw      EXIT                    // ;
 667+ 6E15
 668+ 6E15              //  ______________________________________________________________________
 669+ 6E15              //
 670+ 6E15              // ?exec       --
 671+ 6E15              // raise msg #18 if compiling
 672+ 6E15                              Colon_Def QEXEC, "?EXEC", is_normal
 672+ 6E15             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 672+ 6E15             >
 672+ 6E15             >Dict_Ptr        defl    $
 672+ 6E15             >
 672+ 6E15             >//              ______________________________________________________________________
 672+ 6E15             >//              Heap part
 672+ 6E15             >
 672+ 6E15             >
 672+ 6E15             >                org     (Heap_Ptr & $1FFF) + $E000
 672+ E704             >
 672+ E704             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ E704             >Latest_Definition defl  Heap_Ptr
 672+ E704             >
 672+ E704             >                // dummy db directives used to calculate length of namec
 672+ E704 3F 45 58 45 >                db      "?EXEC"
 672+ E708 43          >
 672+ E709             >len_NFA         defl    $ - temp_NFA
 672+ E709             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ E704             >
 672+ E704 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ E705 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 672+ E709 43          >
 672+ E70A             >                org     $-1                 // alter last byte of Name just above to set
 672+ E709 C3          >                db      {b $} | END_BIT     // msb as name end
 672+ E70A             >
 672+ E70A FA 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 672+ E70C             >Prev_Ptr        defl    Heap_Ptr
 672+ E70C             >
 672+ E70C             >mirror_Ptr      defl    $
 672+ E70C             >
 672+ E70C 17 6E       >                dw      Dict_Ptr + 2        // xt
 672+ E70E             >Heap_Ptr        defl    $ - $E000           // save current HP
 672+ E70E             >
 672+ E70E             >Current_HP      defl  $ - $E000             // used to set HP once!
 672+ E70E             >
 672+ E70E             >//              ______________________________________________________________________
 672+ E70E             >//              Dictionary part
 672+ E70E             >
 672+ E70E             >                org     Dict_Ptr
 672+ 6E15             >
 672+ 6E15 0C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 672+ 6E17             >
 672+ 6E17             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 6E17 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 6E1A             >
 672+ 6E1A             >
 672+ 6E1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 6E1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 6E1A             >
 672+ 6E1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 6E1A 59 6B 96 69                  dw      STATE, FETCH            // state @
 674+ 6E1E A3 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 675+ 6E22 EF 6D                        dw      QERROR                  // ?error
 676+ 6E24 4C 68                        dw      EXIT                    // ;
 677+ 6E26
 678+ 6E26              //  ______________________________________________________________________
 679+ 6E26              //
 680+ 6E26              // ?pairs       n1 n2 --
 681+ 6E26              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 682+ 6E26                              Colon_Def QPAIRS, "?PAIRS", is_normal
 682+ 6E26             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 682+ 6E26             >
 682+ 6E26             >Dict_Ptr        defl    $
 682+ 6E26             >
 682+ 6E26             >//              ______________________________________________________________________
 682+ 6E26             >//              Heap part
 682+ 6E26             >
 682+ 6E26             >
 682+ 6E26             >                org     (Heap_Ptr & $1FFF) + $E000
 682+ E70E             >
 682+ E70E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ E70E             >Latest_Definition defl  Heap_Ptr
 682+ E70E             >
 682+ E70E             >                // dummy db directives used to calculate length of namec
 682+ E70E 3F 50 41 49 >                db      "?PAIRS"
 682+ E712 52 53       >
 682+ E714             >len_NFA         defl    $ - temp_NFA
 682+ E714             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ E70E             >
 682+ E70E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ E70F 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 682+ E713 52 53       >
 682+ E715             >                org     $-1                 // alter last byte of Name just above to set
 682+ E714 D3          >                db      {b $} | END_BIT     // msb as name end
 682+ E715             >
 682+ E715 04 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 682+ E717             >Prev_Ptr        defl    Heap_Ptr
 682+ E717             >
 682+ E717             >mirror_Ptr      defl    $
 682+ E717             >
 682+ E717 28 6E       >                dw      Dict_Ptr + 2        // xt
 682+ E719             >Heap_Ptr        defl    $ - $E000           // save current HP
 682+ E719             >
 682+ E719             >Current_HP      defl  $ - $E000             // used to set HP once!
 682+ E719             >
 682+ E719             >//              ______________________________________________________________________
 682+ E719             >//              Dictionary part
 682+ E719             >
 682+ E719             >                org     Dict_Ptr
 682+ 6E26             >
 682+ 6E26 17 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 682+ 6E28             >
 682+ 6E28             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 6E28 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 6E2B             >
 682+ 6E2B             >
 682+ 6E2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 6E2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 6E2B             >
 682+ 6E2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 6E2B F2 6B                        dw      SUBTRACT                // -
 684+ 6E2D A3 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 685+ 6E31 EF 6D                        dw      QERROR                  // ?error
 686+ 6E33 4C 68                        dw      EXIT                    // ;
 687+ 6E35
 688+ 6E35              //  ______________________________________________________________________
 689+ 6E35              //
 690+ 6E35              // ?csp       --
 691+ 6E35              // raise msg #20 if surrent SP in not what previously saved in CSP.
 692+ 6E35              // Compiler relies on that for  syntax checking of structures
 693+ 6E35                              Colon_Def QCSP, "?CSP", is_normal
 693+ 6E35             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 693+ 6E35             >
 693+ 6E35             >Dict_Ptr        defl    $
 693+ 6E35             >
 693+ 6E35             >//              ______________________________________________________________________
 693+ 6E35             >//              Heap part
 693+ 6E35             >
 693+ 6E35             >
 693+ 6E35             >                org     (Heap_Ptr & $1FFF) + $E000
 693+ E719             >
 693+ E719             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ E719             >Latest_Definition defl  Heap_Ptr
 693+ E719             >
 693+ E719             >                // dummy db directives used to calculate length of namec
 693+ E719 3F 43 53 50 >                db      "?CSP"
 693+ E71D             >len_NFA         defl    $ - temp_NFA
 693+ E71D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ E719             >
 693+ E719 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ E71A 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 693+ E71E             >                org     $-1                 // alter last byte of Name just above to set
 693+ E71D D0          >                db      {b $} | END_BIT     // msb as name end
 693+ E71E             >
 693+ E71E 0E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 693+ E720             >Prev_Ptr        defl    Heap_Ptr
 693+ E720             >
 693+ E720             >mirror_Ptr      defl    $
 693+ E720             >
 693+ E720 37 6E       >                dw      Dict_Ptr + 2        // xt
 693+ E722             >Heap_Ptr        defl    $ - $E000           // save current HP
 693+ E722             >
 693+ E722             >Current_HP      defl  $ - $E000             // used to set HP once!
 693+ E722             >
 693+ E722             >//              ______________________________________________________________________
 693+ E722             >//              Dictionary part
 693+ E722             >
 693+ E722             >                org     Dict_Ptr
 693+ 6E35             >
 693+ 6E35 20 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 693+ 6E37             >
 693+ 6E37             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 6E37 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ 6E3A             >
 693+ 6E3A             >
 693+ 6E3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 6E3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 6E3A             >
 693+ 6E3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 6E3A 33 68                        dw      SPFETCH                 // sp@
 695+ 6E3C 71 6B 96 69                  dw      CSP, FETCH              // csp @
 696+ 6E40 F2 6B                        dw      SUBTRACT                // -
 697+ 6E42 A3 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 698+ 6E46 EF 6D                        dw      QERROR                  // ?error
 699+ 6E48 4C 68                        dw      EXIT                    // ;
 700+ 6E4A
 701+ 6E4A              //  ______________________________________________________________________
 702+ 6E4A              //
 703+ 6E4A              // ?loading      --
 704+ 6E4A              // raise msg #22 if not loading
 705+ 6E4A                              Colon_Def QLOADING, "?LOADING", is_normal
 705+ 6E4A             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 705+ 6E4A             >
 705+ 6E4A             >Dict_Ptr        defl    $
 705+ 6E4A             >
 705+ 6E4A             >//              ______________________________________________________________________
 705+ 6E4A             >//              Heap part
 705+ 6E4A             >
 705+ 6E4A             >
 705+ 6E4A             >                org     (Heap_Ptr & $1FFF) + $E000
 705+ E722             >
 705+ E722             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ E722             >Latest_Definition defl  Heap_Ptr
 705+ E722             >
 705+ E722             >                // dummy db directives used to calculate length of namec
 705+ E722 3F 4C 4F 41 >                db      "?LOADING"
 705+ E726 44 49 4E 47 >
 705+ E72A             >len_NFA         defl    $ - temp_NFA
 705+ E72A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ E722             >
 705+ E722 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ E723 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 705+ E727 44 49 4E 47 >
 705+ E72B             >                org     $-1                 // alter last byte of Name just above to set
 705+ E72A C7          >                db      {b $} | END_BIT     // msb as name end
 705+ E72B             >
 705+ E72B 19 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 705+ E72D             >Prev_Ptr        defl    Heap_Ptr
 705+ E72D             >
 705+ E72D             >mirror_Ptr      defl    $
 705+ E72D             >
 705+ E72D 4C 6E       >                dw      Dict_Ptr + 2        // xt
 705+ E72F             >Heap_Ptr        defl    $ - $E000           // save current HP
 705+ E72F             >
 705+ E72F             >Current_HP      defl  $ - $E000             // used to set HP once!
 705+ E72F             >
 705+ E72F             >//              ______________________________________________________________________
 705+ E72F             >//              Dictionary part
 705+ E72F             >
 705+ E72F             >                org     Dict_Ptr
 705+ 6E4A             >
 705+ 6E4A 2D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 705+ 6E4C             >
 705+ 6E4C             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 6E4C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 6E4F             >
 705+ 6E4F             >
 705+ 6E4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 6E4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 6E4F             >
 705+ 6E4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 6E4F 2F 6B 96 69                  dw      BLK, FETCH              // blk @
 707+ 6E53 71 68                        dw      ZEQUAL                  // 0=
 708+ 6E55 A3 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 709+ 6E59 EF 6D                        dw      QERROR                  // ?error
 710+ 6E5B 4C 68                        dw      EXIT                    // ;
 711+ 6E5D
 712+ 6E5D              //  ______________________________________________________________________
 713+ 6E5D              //
 714+ 6E5D              // compile      --
 715+ 6E5D              // compiles the following word
 716+ 6E5D                              Colon_Def COMPILE, "COMPILE", is_normal
 716+ 6E5D             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 716+ 6E5D             >
 716+ 6E5D             >Dict_Ptr        defl    $
 716+ 6E5D             >
 716+ 6E5D             >//              ______________________________________________________________________
 716+ 6E5D             >//              Heap part
 716+ 6E5D             >
 716+ 6E5D             >
 716+ 6E5D             >                org     (Heap_Ptr & $1FFF) + $E000
 716+ E72F             >
 716+ E72F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 716+ E72F             >Latest_Definition defl  Heap_Ptr
 716+ E72F             >
 716+ E72F             >                // dummy db directives used to calculate length of namec
 716+ E72F 43 4F 4D 50 >                db      "COMPILE"
 716+ E733 49 4C 45    >
 716+ E736             >len_NFA         defl    $ - temp_NFA
 716+ E736             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 716+ E72F             >
 716+ E72F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 716+ E730 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 716+ E734 49 4C 45    >
 716+ E737             >                org     $-1                 // alter last byte of Name just above to set
 716+ E736 C5          >                db      {b $} | END_BIT     // msb as name end
 716+ E737             >
 716+ E737 22 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 716+ E739             >Prev_Ptr        defl    Heap_Ptr
 716+ E739             >
 716+ E739             >mirror_Ptr      defl    $
 716+ E739             >
 716+ E739 5F 6E       >                dw      Dict_Ptr + 2        // xt
 716+ E73B             >Heap_Ptr        defl    $ - $E000           // save current HP
 716+ E73B             >
 716+ E73B             >Current_HP      defl  $ - $E000             // used to set HP once!
 716+ E73B             >
 716+ E73B             >//              ______________________________________________________________________
 716+ E73B             >//              Dictionary part
 716+ E73B             >
 716+ E73B             >                org     Dict_Ptr
 716+ 6E5D             >
 716+ 6E5D 39 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 716+ 6E5F             >
 716+ 6E5F             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 716+ 6E5F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 716+ 6E62             >
 716+ 6E62             >
 716+ 6E62             >                endif           ; ok        // for other definitions it "points" the correct handler
 716+ 6E62             >                // Use of "; ok" to suppress "warning[fwdref]"
 716+ 6E62             >
 716+ 6E62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 717+ 6E62 04 6E                        dw      QCOMP                   // ?comp
 718+ 6E64 61 68                        dw      R_TO                    // r>
 719+ 6E66 25 69 CE 68                  dw      DUP, CELL_PLUS          // dup, cell+
 720+ 6E6A 56 68                        dw      TO_R                    // >r
 721+ 6E6C 96 69 C9 6B                  dw      FETCH, COMMA            // @ ,
 722+ 6E70 4C 68                        dw      EXIT                    // ;
 723+ 6E72
 724+ 6E72              //  ______________________________________________________________________
 725+ 6E72              //
 726+ 6E72              // compile,     --
 727+ 6E72              // compiles the following word
 728+ 6E72                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 728+ 6E72             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 728+ 6E72             >
 728+ 6E72             >Dict_Ptr        defl    $
 728+ 6E72             >
 728+ 6E72             >//              ______________________________________________________________________
 728+ 6E72             >//              Heap part
 728+ 6E72             >
 728+ 6E72             >
 728+ 6E72             >                org     (Heap_Ptr & $1FFF) + $E000
 728+ E73B             >
 728+ E73B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 728+ E73B             >Latest_Definition defl  Heap_Ptr
 728+ E73B             >
 728+ E73B             >                // dummy db directives used to calculate length of namec
 728+ E73B 43 4F 4D 50 >                db      "COMPILE,"
 728+ E73F 49 4C 45 2C >
 728+ E743             >len_NFA         defl    $ - temp_NFA
 728+ E743             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 728+ E73B             >
 728+ E73B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 728+ E73C 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 728+ E740 49 4C 45 2C >
 728+ E744             >                org     $-1                 // alter last byte of Name just above to set
 728+ E743 AC          >                db      {b $} | END_BIT     // msb as name end
 728+ E744             >
 728+ E744 2F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 728+ E746             >Prev_Ptr        defl    Heap_Ptr
 728+ E746             >
 728+ E746             >mirror_Ptr      defl    $
 728+ E746             >
 728+ E746 74 6E       >                dw      Dict_Ptr + 2        // xt
 728+ E748             >Heap_Ptr        defl    $ - $E000           // save current HP
 728+ E748             >
 728+ E748             >Current_HP      defl  $ - $E000             // used to set HP once!
 728+ E748             >
 728+ E748             >//              ______________________________________________________________________
 728+ E748             >//              Dictionary part
 728+ E748             >
 728+ E748             >                org     Dict_Ptr
 728+ 6E72             >
 728+ 6E72 46 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 728+ 6E74             >
 728+ 6E74             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 728+ 6E74 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 728+ 6E77             >
 728+ 6E77             >
 728+ 6E77             >                endif           ; ok        // for other definitions it "points" the correct handler
 728+ 6E77             >                // Use of "; ok" to suppress "warning[fwdref]"
 728+ 6E77             >
 728+ 6E77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 729+ 6E77 04 6E                        dw      QCOMP                   // ?comp
 730+ 6E79 C9 6B                        dw      COMMA                   // ,
 731+ 6E7B 4C 68                        dw      EXIT                    // ;
 732+ 6E7D
 733+ 6E7D              //  ______________________________________________________________________
 734+ 6E7D              //
 735+ 6E7D              // [            --
 736+ 6E7D              // stop compilation
 737+ 6E7D                              Colon_Def SQUARED_OPEN, "[", is_immediate
 737+ 6E7D             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 737+ 6E7D             >
 737+ 6E7D             >Dict_Ptr        defl    $
 737+ 6E7D             >
 737+ 6E7D             >//              ______________________________________________________________________
 737+ 6E7D             >//              Heap part
 737+ 6E7D             >
 737+ 6E7D             >
 737+ 6E7D             >                org     (Heap_Ptr & $1FFF) + $E000
 737+ E748             >
 737+ E748             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 737+ E748             >Latest_Definition defl  Heap_Ptr
 737+ E748             >
 737+ E748             >                // dummy db directives used to calculate length of namec
 737+ E748 5B          >                db      "["
 737+ E749             >len_NFA         defl    $ - temp_NFA
 737+ E749             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 737+ E748             >
 737+ E748 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 737+ E749 5B          >                db      "["               // name string in 7-bit ascii, but
 737+ E74A             >                org     $-1                 // alter last byte of Name just above to set
 737+ E749 DB          >                db      {b $} | END_BIT     // msb as name end
 737+ E74A             >
 737+ E74A 3B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 737+ E74C             >Prev_Ptr        defl    Heap_Ptr
 737+ E74C             >
 737+ E74C             >mirror_Ptr      defl    $
 737+ E74C             >
 737+ E74C 7F 6E       >                dw      Dict_Ptr + 2        // xt
 737+ E74E             >Heap_Ptr        defl    $ - $E000           // save current HP
 737+ E74E             >
 737+ E74E             >Current_HP      defl  $ - $E000             // used to set HP once!
 737+ E74E             >
 737+ E74E             >//              ______________________________________________________________________
 737+ E74E             >//              Dictionary part
 737+ E74E             >
 737+ E74E             >                org     Dict_Ptr
 737+ 6E7D             >
 737+ 6E7D 4C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 737+ 6E7F             >
 737+ 6E7F             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 737+ 6E7F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 737+ 6E82             >
 737+ 6E82             >
 737+ 6E82             >                endif           ; ok        // for other definitions it "points" the correct handler
 737+ 6E82             >                // Use of "; ok" to suppress "warning[fwdref]"
 737+ 6E82             >
 737+ 6E82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 738+ 6E82 8E 6A                        dw      ZERO                    // 0
 739+ 6E84 59 6B A0 69                  dw      STATE, STORE            // state !
 740+ 6E88 4C 68                        dw      EXIT                    // ; immediate
 741+ 6E8A
 742+ 6E8A              //  ______________________________________________________________________
 743+ 6E8A              //
 744+ 6E8A              // ]            --
 745+ 6E8A              // start compilation
 746+ 6E8A                              Colon_Def SQUARED_CLOSE, "]", is_normal
 746+ 6E8A             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 746+ 6E8A             >
 746+ 6E8A             >Dict_Ptr        defl    $
 746+ 6E8A             >
 746+ 6E8A             >//              ______________________________________________________________________
 746+ 6E8A             >//              Heap part
 746+ 6E8A             >
 746+ 6E8A             >
 746+ 6E8A             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ E74E             >
 746+ E74E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ E74E             >Latest_Definition defl  Heap_Ptr
 746+ E74E             >
 746+ E74E             >                // dummy db directives used to calculate length of namec
 746+ E74E 5D          >                db      "]"
 746+ E74F             >len_NFA         defl    $ - temp_NFA
 746+ E74F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ E74E             >
 746+ E74E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ E74F 5D          >                db      "]"               // name string in 7-bit ascii, but
 746+ E750             >                org     $-1                 // alter last byte of Name just above to set
 746+ E74F DD          >                db      {b $} | END_BIT     // msb as name end
 746+ E750             >
 746+ E750 48 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ E752             >Prev_Ptr        defl    Heap_Ptr
 746+ E752             >
 746+ E752             >mirror_Ptr      defl    $
 746+ E752             >
 746+ E752 8C 6E       >                dw      Dict_Ptr + 2        // xt
 746+ E754             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ E754             >
 746+ E754             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ E754             >
 746+ E754             >//              ______________________________________________________________________
 746+ E754             >//              Dictionary part
 746+ E754             >
 746+ E754             >                org     Dict_Ptr
 746+ 6E8A             >
 746+ 6E8A 52 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 6E8C             >
 746+ 6E8C             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 6E8C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 6E8F             >
 746+ 6E8F             >
 746+ 6E8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 6E8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 6E8F             >
 746+ 6E8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 6E8F A3 63 C0 00                  dw      LIT, $C0                // 192
 748+ 6E93 59 6B A0 69                  dw      STATE, STORE            // state !
 749+ 6E97 4C 68                        dw      EXIT                    // ;
 750+ 6E99
 751+ 6E99              //  ______________________________________________________________________
 752+ 6E99              //
 753+ 6E99              // smudge       --
 754+ 6E99              // toggle smudge bit of latest definition
 755+ 6E99                              Colon_Def SMUDGE, "SMUDGE", is_normal
 755+ 6E99             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 755+ 6E99             >
 755+ 6E99             >Dict_Ptr        defl    $
 755+ 6E99             >
 755+ 6E99             >//              ______________________________________________________________________
 755+ 6E99             >//              Heap part
 755+ 6E99             >
 755+ 6E99             >
 755+ 6E99             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ E754             >
 755+ E754             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ E754             >Latest_Definition defl  Heap_Ptr
 755+ E754             >
 755+ E754             >                // dummy db directives used to calculate length of namec
 755+ E754 53 4D 55 44 >                db      "SMUDGE"
 755+ E758 47 45       >
 755+ E75A             >len_NFA         defl    $ - temp_NFA
 755+ E75A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ E754             >
 755+ E754 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ E755 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 755+ E759 47 45       >
 755+ E75B             >                org     $-1                 // alter last byte of Name just above to set
 755+ E75A C5          >                db      {b $} | END_BIT     // msb as name end
 755+ E75B             >
 755+ E75B 4E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ E75D             >Prev_Ptr        defl    Heap_Ptr
 755+ E75D             >
 755+ E75D             >mirror_Ptr      defl    $
 755+ E75D             >
 755+ E75D 9B 6E       >                dw      Dict_Ptr + 2        // xt
 755+ E75F             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ E75F             >
 755+ E75F             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ E75F             >
 755+ E75F             >//              ______________________________________________________________________
 755+ E75F             >//              Dictionary part
 755+ E75F             >
 755+ E75F             >                org     Dict_Ptr
 755+ 6E99             >
 755+ 6E99 5D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 6E9B             >
 755+ 6E9B             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 6E9B CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 6E9E             >
 755+ 6E9E             >
 755+ 6E9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 6E9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 6E9E             >
 755+ 6E9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 6E9E 5F 6D                        dw      LATEST                  // latest
 757+ 6EA0 A3 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 758+ 6EA4 8D 69                        dw      TOGGLE                  // toggle
 759+ 6EA6 4C 68                        dw      EXIT                    // ;
 760+ 6EA8
 761+ 6EA8              //  ______________________________________________________________________
 762+ 6EA8              //
 763+ 6EA8              // immediate    --
 764+ 6EA8              // make immediate the latest definition
 765+ 6EA8                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 765+ 6EA8             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 765+ 6EA8             >
 765+ 6EA8             >Dict_Ptr        defl    $
 765+ 6EA8             >
 765+ 6EA8             >//              ______________________________________________________________________
 765+ 6EA8             >//              Heap part
 765+ 6EA8             >
 765+ 6EA8             >
 765+ 6EA8             >                org     (Heap_Ptr & $1FFF) + $E000
 765+ E75F             >
 765+ E75F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ E75F             >Latest_Definition defl  Heap_Ptr
 765+ E75F             >
 765+ E75F             >                // dummy db directives used to calculate length of namec
 765+ E75F 49 4D 4D 45 >                db      "IMMEDIATE"
 765+ E763 44 49 41 54 >
 765+ E767 45          >
 765+ E768             >len_NFA         defl    $ - temp_NFA
 765+ E768             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ E75F             >
 765+ E75F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ E760 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 765+ E764 44 49 41 54 >
 765+ E768 45          >
 765+ E769             >                org     $-1                 // alter last byte of Name just above to set
 765+ E768 C5          >                db      {b $} | END_BIT     // msb as name end
 765+ E769             >
 765+ E769 54 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 765+ E76B             >Prev_Ptr        defl    Heap_Ptr
 765+ E76B             >
 765+ E76B             >mirror_Ptr      defl    $
 765+ E76B             >
 765+ E76B AA 6E       >                dw      Dict_Ptr + 2        // xt
 765+ E76D             >Heap_Ptr        defl    $ - $E000           // save current HP
 765+ E76D             >
 765+ E76D             >Current_HP      defl  $ - $E000             // used to set HP once!
 765+ E76D             >
 765+ E76D             >//              ______________________________________________________________________
 765+ E76D             >//              Dictionary part
 765+ E76D             >
 765+ E76D             >                org     Dict_Ptr
 765+ 6EA8             >
 765+ 6EA8 6B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 765+ 6EAA             >
 765+ 6EAA             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 6EAA CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 6EAD             >
 765+ 6EAD             >
 765+ 6EAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 6EAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 6EAD             >
 765+ 6EAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 6EAD 5F 6D                        dw      LATEST                  // latest
 767+ 6EAF A3 63 40 00                  dw      LIT, $40                // 64
 768+ 6EB3 8D 69                        dw      TOGGLE                  // toggle
 769+ 6EB5 4C 68                        dw      EXIT                    // ;
 770+ 6EB7
 771+ 6EB7              //  ______________________________________________________________________
 772+ 6EB7              //
 773+ 6EB7              // hex          --
 774+ 6EB7              // change numeration base
 775+ 6EB7                              Colon_Def HEX, "HEX", is_normal
 775+ 6EB7             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 775+ 6EB7             >
 775+ 6EB7             >Dict_Ptr        defl    $
 775+ 6EB7             >
 775+ 6EB7             >//              ______________________________________________________________________
 775+ 6EB7             >//              Heap part
 775+ 6EB7             >
 775+ 6EB7             >
 775+ 6EB7             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ E76D             >
 775+ E76D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ E76D             >Latest_Definition defl  Heap_Ptr
 775+ E76D             >
 775+ E76D             >                // dummy db directives used to calculate length of namec
 775+ E76D 48 45 58    >                db      "HEX"
 775+ E770             >len_NFA         defl    $ - temp_NFA
 775+ E770             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ E76D             >
 775+ E76D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ E76E 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 775+ E771             >                org     $-1                 // alter last byte of Name just above to set
 775+ E770 D8          >                db      {b $} | END_BIT     // msb as name end
 775+ E771             >
 775+ E771 5F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ E773             >Prev_Ptr        defl    Heap_Ptr
 775+ E773             >
 775+ E773             >mirror_Ptr      defl    $
 775+ E773             >
 775+ E773 B9 6E       >                dw      Dict_Ptr + 2        // xt
 775+ E775             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ E775             >
 775+ E775             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ E775             >
 775+ E775             >//              ______________________________________________________________________
 775+ E775             >//              Dictionary part
 775+ E775             >
 775+ E775             >                org     Dict_Ptr
 775+ 6EB7             >
 775+ 6EB7 73 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 6EB9             >
 775+ 6EB9             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 6EB9 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 6EBC             >
 775+ 6EBC             >
 775+ 6EBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 6EBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 6EBC             >
 775+ 6EBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 6EBC A3 63 10 00                  dw      LIT, 16                 // 16
 777+ 6EC0 5F 6B A0 69                  dw      BASE, STORE             // base !
 778+ 6EC4 4C 68                        dw      EXIT                    // ;
 779+ 6EC6
 780+ 6EC6              //  ______________________________________________________________________
 781+ 6EC6              //
 782+ 6EC6              // decimal      --
 783+ 6EC6              // change numeration base
 784+ 6EC6                              Colon_Def DECIMAL, "DECIMAL", is_normal
 784+ 6EC6             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 784+ 6EC6             >
 784+ 6EC6             >Dict_Ptr        defl    $
 784+ 6EC6             >
 784+ 6EC6             >//              ______________________________________________________________________
 784+ 6EC6             >//              Heap part
 784+ 6EC6             >
 784+ 6EC6             >
 784+ 6EC6             >                org     (Heap_Ptr & $1FFF) + $E000
 784+ E775             >
 784+ E775             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 784+ E775             >Latest_Definition defl  Heap_Ptr
 784+ E775             >
 784+ E775             >                // dummy db directives used to calculate length of namec
 784+ E775 44 45 43 49 >                db      "DECIMAL"
 784+ E779 4D 41 4C    >
 784+ E77C             >len_NFA         defl    $ - temp_NFA
 784+ E77C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 784+ E775             >
 784+ E775 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 784+ E776 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 784+ E77A 4D 41 4C    >
 784+ E77D             >                org     $-1                 // alter last byte of Name just above to set
 784+ E77C CC          >                db      {b $} | END_BIT     // msb as name end
 784+ E77D             >
 784+ E77D 6D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 784+ E77F             >Prev_Ptr        defl    Heap_Ptr
 784+ E77F             >
 784+ E77F             >mirror_Ptr      defl    $
 784+ E77F             >
 784+ E77F C8 6E       >                dw      Dict_Ptr + 2        // xt
 784+ E781             >Heap_Ptr        defl    $ - $E000           // save current HP
 784+ E781             >
 784+ E781             >Current_HP      defl  $ - $E000             // used to set HP once!
 784+ E781             >
 784+ E781             >//              ______________________________________________________________________
 784+ E781             >//              Dictionary part
 784+ E781             >
 784+ E781             >                org     Dict_Ptr
 784+ 6EC6             >
 784+ 6EC6 7F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 784+ 6EC8             >
 784+ 6EC8             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 784+ 6EC8 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 784+ 6ECB             >
 784+ 6ECB             >
 784+ 6ECB             >                endif           ; ok        // for other definitions it "points" the correct handler
 784+ 6ECB             >                // Use of "; ok" to suppress "warning[fwdref]"
 784+ 6ECB             >
 784+ 6ECB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 785+ 6ECB A3 63 0A 00                  dw      LIT, 10                 // 10
 786+ 6ECF 5F 6B A0 69                  dw      BASE, STORE             // base !
 787+ 6ED3 4C 68                        dw      EXIT                    // ;
 788+ 6ED5
 789+ 6ED5              //  ______________________________________________________________________
 790+ 6ED5              //
 791+ 6ED5              // (;code)       --
 792+ 6ED5              // patch to CFA to call/jump to the "following code"
 793+ 6ED5                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 793+ 6ED5             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 793+ 6ED5             >
 793+ 6ED5             >Dict_Ptr        defl    $
 793+ 6ED5             >
 793+ 6ED5             >//              ______________________________________________________________________
 793+ 6ED5             >//              Heap part
 793+ 6ED5             >
 793+ 6ED5             >
 793+ 6ED5             >                org     (Heap_Ptr & $1FFF) + $E000
 793+ E781             >
 793+ E781             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ E781             >Latest_Definition defl  Heap_Ptr
 793+ E781             >
 793+ E781             >                // dummy db directives used to calculate length of namec
 793+ E781 28 3B 43 4F >                db      "(;CODE)"
 793+ E785 44 45 29    >
 793+ E788             >len_NFA         defl    $ - temp_NFA
 793+ E788             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ E781             >
 793+ E781 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ E782 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 793+ E786 44 45 29    >
 793+ E789             >                org     $-1                 // alter last byte of Name just above to set
 793+ E788 A9          >                db      {b $} | END_BIT     // msb as name end
 793+ E789             >
 793+ E789 75 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 793+ E78B             >Prev_Ptr        defl    Heap_Ptr
 793+ E78B             >
 793+ E78B             >mirror_Ptr      defl    $
 793+ E78B             >
 793+ E78B D7 6E       >                dw      Dict_Ptr + 2        // xt
 793+ E78D             >Heap_Ptr        defl    $ - $E000           // save current HP
 793+ E78D             >
 793+ E78D             >Current_HP      defl  $ - $E000             // used to set HP once!
 793+ E78D             >
 793+ E78D             >//              ______________________________________________________________________
 793+ E78D             >//              Dictionary part
 793+ E78D             >
 793+ E78D             >                org     Dict_Ptr
 793+ 6ED5             >
 793+ 6ED5 8B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 793+ 6ED7             >
 793+ 6ED7             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 6ED7 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 6EDA             >
 793+ 6EDA             >
 793+ 6EDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 6EDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 6EDA             >
 793+ 6EDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 6EDA 61 68                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 795+ 6EDC 5F 6D                        dw      LATEST                  // latest   ( Word being defined in this moment )
 796+ 6EDE BD 6D 98 6D                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 797+ 6EE2
 798+ 6EE2 A3 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 799+ 6EE6 01 69 B4 69                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 800+ 6EEA B8 68                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 801+ 6EEC
 802+ 6EEC A0 69                        dw      STORE                   // !
 803+ 6EEE 4C 68                        dw      EXIT                    // ;
 804+ 6EF0
 805+ 6EF0              //  ______________________________________________________________________
 806+ 6EF0              //
 807+ 6EF0              // ;code        --
 808+ 6EF0                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 808+ 6EF0             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 808+ 6EF0             >
 808+ 6EF0             >Dict_Ptr        defl    $
 808+ 6EF0             >
 808+ 6EF0             >//              ______________________________________________________________________
 808+ 6EF0             >//              Heap part
 808+ 6EF0             >
 808+ 6EF0             >
 808+ 6EF0             >                org     (Heap_Ptr & $1FFF) + $E000
 808+ E78D             >
 808+ E78D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 808+ E78D             >Latest_Definition defl  Heap_Ptr
 808+ E78D             >
 808+ E78D             >                // dummy db directives used to calculate length of namec
 808+ E78D 3B 43 4F 44 >                db      ";CODE"
 808+ E791 45          >
 808+ E792             >len_NFA         defl    $ - temp_NFA
 808+ E792             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 808+ E78D             >
 808+ E78D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 808+ E78E 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 808+ E792 45          >
 808+ E793             >                org     $-1                 // alter last byte of Name just above to set
 808+ E792 C5          >                db      {b $} | END_BIT     // msb as name end
 808+ E793             >
 808+ E793 81 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 808+ E795             >Prev_Ptr        defl    Heap_Ptr
 808+ E795             >
 808+ E795             >mirror_Ptr      defl    $
 808+ E795             >
 808+ E795 F2 6E       >                dw      Dict_Ptr + 2        // xt
 808+ E797             >Heap_Ptr        defl    $ - $E000           // save current HP
 808+ E797             >
 808+ E797             >Current_HP      defl  $ - $E000             // used to set HP once!
 808+ E797             >
 808+ E797             >//              ______________________________________________________________________
 808+ E797             >//              Dictionary part
 808+ E797             >
 808+ E797             >                org     Dict_Ptr
 808+ 6EF0             >
 808+ 6EF0 95 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 808+ 6EF2             >
 808+ 6EF2             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 808+ 6EF2 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 808+ 6EF5             >
 808+ 6EF5             >
 808+ 6EF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 808+ 6EF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 808+ 6EF5             >
 808+ 6EF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 809+ 6EF5 37 6E                        dw      QCSP                    // ?csp
 810+ 6EF7 5F 6E                        dw      COMPILE                 // compile
 811+ 6EF9 D7 6E                        dw      C_SEMICOLON_CODE        // (;code)
 812+ 6EFB 7F 6E                        dw      SQUARED_OPEN            // [
 813+ 6EFD 55 6A                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 814+ 6EFF 4C 68                        dw      EXIT                    // ; immediate
 815+ 6F01
 816+ 6F01              //  ______________________________________________________________________
 817+ 6F01              //
 818+ 6F01              // <builds      --
 819+ 6F01                              Colon_Def CBUILDS, "<BUILDS", is_normal
 819+ 6F01             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 819+ 6F01             >
 819+ 6F01             >Dict_Ptr        defl    $
 819+ 6F01             >
 819+ 6F01             >//              ______________________________________________________________________
 819+ 6F01             >//              Heap part
 819+ 6F01             >
 819+ 6F01             >
 819+ 6F01             >                org     (Heap_Ptr & $1FFF) + $E000
 819+ E797             >
 819+ E797             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 819+ E797             >Latest_Definition defl  Heap_Ptr
 819+ E797             >
 819+ E797             >                // dummy db directives used to calculate length of namec
 819+ E797 3C 42 55 49 >                db      "<BUILDS"
 819+ E79B 4C 44 53    >
 819+ E79E             >len_NFA         defl    $ - temp_NFA
 819+ E79E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 819+ E797             >
 819+ E797 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 819+ E798 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 819+ E79C 4C 44 53    >
 819+ E79F             >                org     $-1                 // alter last byte of Name just above to set
 819+ E79E D3          >                db      {b $} | END_BIT     // msb as name end
 819+ E79F             >
 819+ E79F 8D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 819+ E7A1             >Prev_Ptr        defl    Heap_Ptr
 819+ E7A1             >
 819+ E7A1             >mirror_Ptr      defl    $
 819+ E7A1             >
 819+ E7A1 03 6F       >                dw      Dict_Ptr + 2        // xt
 819+ E7A3             >Heap_Ptr        defl    $ - $E000           // save current HP
 819+ E7A3             >
 819+ E7A3             >Current_HP      defl  $ - $E000             // used to set HP once!
 819+ E7A3             >
 819+ E7A3             >//              ______________________________________________________________________
 819+ E7A3             >//              Dictionary part
 819+ E7A3             >
 819+ E7A3             >                org     Dict_Ptr
 819+ 6F01             >
 819+ 6F01 A1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 819+ 6F03             >
 819+ 6F03             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 819+ 6F03 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 819+ 6F06             >
 819+ 6F06             >
 819+ 6F06             >                endif           ; ok        // for other definitions it "points" the correct handler
 819+ 6F06             >                // Use of "; ok" to suppress "warning[fwdref]"
 819+ 6F06             >
 819+ 6F06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 820+ 6F06 8E 6A                        dw      ZERO                    // 0
 821+ 6F08 59 6A                        dw      CONSTANT                // constant
 822+ 6F0A 4C 68                        dw      EXIT                    // ;
 823+ 6F0C
 824+ 6F0C              //  ______________________________________________________________________
 825+ 6F0C              //
 826+ 6F0C              // recurse      --
 827+ 6F0C              //              Colon_Def RECURSE, "RECURSE", is_immediate
 828+ 6F0C              //              dw      QCOMP                   // ?comp
 829+ 6F0C              //              dw      LATEST                  // latest
 830+ 6F0C              //              dw      PFA, CFA                // pfa cfa
 831+ 6F0C              //              dw      COMMA                   // ,
 832+ 6F0C              //              dw      EXIT                    // ; immediate
 833+ 6F0C
 834+ 6F0C              //  ______________________________________________________________________
 835+ 6F0C              //
 836+ 6F0C              // does>     --
 837+ 6F0C                              Colon_Def DOES_TO, "DOES>", is_normal
 837+ 6F0C             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 837+ 6F0C             >
 837+ 6F0C             >Dict_Ptr        defl    $
 837+ 6F0C             >
 837+ 6F0C             >//              ______________________________________________________________________
 837+ 6F0C             >//              Heap part
 837+ 6F0C             >
 837+ 6F0C             >
 837+ 6F0C             >                org     (Heap_Ptr & $1FFF) + $E000
 837+ E7A3             >
 837+ E7A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 837+ E7A3             >Latest_Definition defl  Heap_Ptr
 837+ E7A3             >
 837+ E7A3             >                // dummy db directives used to calculate length of namec
 837+ E7A3 44 4F 45 53 >                db      "DOES>"
 837+ E7A7 3E          >
 837+ E7A8             >len_NFA         defl    $ - temp_NFA
 837+ E7A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 837+ E7A3             >
 837+ E7A3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 837+ E7A4 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 837+ E7A8 3E          >
 837+ E7A9             >                org     $-1                 // alter last byte of Name just above to set
 837+ E7A8 BE          >                db      {b $} | END_BIT     // msb as name end
 837+ E7A9             >
 837+ E7A9 97 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 837+ E7AB             >Prev_Ptr        defl    Heap_Ptr
 837+ E7AB             >
 837+ E7AB             >mirror_Ptr      defl    $
 837+ E7AB             >
 837+ E7AB 0E 6F       >                dw      Dict_Ptr + 2        // xt
 837+ E7AD             >Heap_Ptr        defl    $ - $E000           // save current HP
 837+ E7AD             >
 837+ E7AD             >Current_HP      defl  $ - $E000             // used to set HP once!
 837+ E7AD             >
 837+ E7AD             >//              ______________________________________________________________________
 837+ E7AD             >//              Dictionary part
 837+ E7AD             >
 837+ E7AD             >                org     Dict_Ptr
 837+ 6F0C             >
 837+ 6F0C AB 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 837+ 6F0E             >
 837+ 6F0E             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 837+ 6F0E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 837+ 6F11             >
 837+ 6F11             >
 837+ 6F11             >                endif           ; ok        // for other definitions it "points" the correct handler
 837+ 6F11             >                // Use of "; ok" to suppress "warning[fwdref]"
 837+ 6F11             >
 837+ 6F11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 838+ 6F11 61 68                        dw      R_TO                    // r>
 839+ 6F13 5F 6D                        dw      LATEST                  // latest
 840+ 6F15 BD 6D                        dw      PFA                     // pfa
 841+ 6F17 A0 69                        dw      STORE                   // !        \ old use of <BUILDS
 842+ 6F19              //              dw      COMMA                   // ,        \ new use of CREATE
 843+ 6F19 D7 6E                        dw      C_SEMICOLON_CODE        // ;code
 844+ 6F1B              Does_Ptr:
 845+ 6F1B                              // via call coded in CFA
 846+ 6F1B EB                           ex      de, hl //**
 847+ 6F1C                              // *** ldhlrp
 848+ 6F1C 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 849+ 6F1D 70                           ld      (hl), b
 850+ 6F1E 2B                           dec     hl
 851+ 6F1F 71                           ld      (hl), c
 852+ 6F20                              // *** ldrphl
 853+ 6F20 EB                           ex      de, hl //**
 854+ 6F21 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 855+ 6F22
 856+ 6F22 4E                           ld      c, (hl)
 857+ 6F23 23                           inc     hl
 858+ 6F24 46                           ld      b, (hl)
 859+ 6F25 23                           inc     hl
 860+ 6F26
 861+ 6F26                              psh1
 861+ 6F26 E5          >                push    hl
 861+ 6F27 DD E9       >                jp      (ix)
 862+ 6F29                              // SMUDGE !
 863+ 6F29
 864+ 6F29              //  ______________________________________________________________________
 865+ 6F29              //
 866+ 6F29              // count        a -- a2 n
 867+ 6F29              // expects a counted string at address a, returns string address and counter
 868+ 6F29                              New_Def COUNT, "COUNT", is_code, is_normal
 868+ 6F29             >
 868+ 6F29             >Dict_Ptr        defl    $
 868+ 6F29             >
 868+ 6F29             >//              ______________________________________________________________________
 868+ 6F29             >//              Heap part
 868+ 6F29             >
 868+ 6F29             >
 868+ 6F29             >                org     (Heap_Ptr & $1FFF) + $E000
 868+ E7AD             >
 868+ E7AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 868+ E7AD             >Latest_Definition defl  Heap_Ptr
 868+ E7AD             >
 868+ E7AD             >                // dummy db directives used to calculate length of namec
 868+ E7AD 43 4F 55 4E >                db      "COUNT"
 868+ E7B1 54          >
 868+ E7B2             >len_NFA         defl    $ - temp_NFA
 868+ E7B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 868+ E7AD             >
 868+ E7AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 868+ E7AE 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 868+ E7B2 54          >
 868+ E7B3             >                org     $-1                 // alter last byte of Name just above to set
 868+ E7B2 D4          >                db      {b $} | END_BIT     // msb as name end
 868+ E7B3             >
 868+ E7B3 A3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 868+ E7B5             >Prev_Ptr        defl    Heap_Ptr
 868+ E7B5             >
 868+ E7B5             >mirror_Ptr      defl    $
 868+ E7B5             >
 868+ E7B5 2B 6F       >                dw      Dict_Ptr + 2        // xt
 868+ E7B7             >Heap_Ptr        defl    $ - $E000           // save current HP
 868+ E7B7             >
 868+ E7B7             >Current_HP      defl  $ - $E000             // used to set HP once!
 868+ E7B7             >
 868+ E7B7             >//              ______________________________________________________________________
 868+ E7B7             >//              Dictionary part
 868+ E7B7             >
 868+ E7B7             >                org     Dict_Ptr
 868+ 6F29             >
 868+ 6F29 B5 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 868+ 6F2B             >
 868+ 6F2B             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 868+ 6F2B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 868+ 6F2B ~           >
 868+ 6F2B ~           >
 868+ 6F2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 868+ 6F2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 868+ 6F2B             >
 868+ 6F2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 869+ 6F2B D9                           exx
 870+ 6F2C E1                           pop     hl
 871+ 6F2D 5E                           ld      e, (hl)
 872+ 6F2E 16 00                        ld      d, 0
 873+ 6F30 23                           inc     hl
 874+ 6F31              Count_Here:
 875+ 6F31 E5                           push    hl
 876+ 6F32 D5                           push    de
 877+ 6F33 D9                           exx
 878+ 6F34                              next
 878+ 6F34 DD E9       >                jp      (ix)
 879+ 6F36              //                pop     hl
 880+ 6F36              //                ld      a, (hl)
 881+ 6F36              //                inc     hl
 882+ 6F36              //                push    hl
 883+ 6F36              //                ld      h, 0
 884+ 6F36              //                ld      l, a
 885+ 6F36              //                push    hl
 886+ 6F36              //                next
 887+ 6F36
 888+ 6F36              //  ______________________________________________________________________
 889+ 6F36              //
 890+ 6F36              // bounds       a n -- a+n n
 891+ 6F36              // given an address and a length ( a n ) calculate the bound addresses
 892+ 6F36              // suitable for DO-LOOP
 893+ 6F36                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 893+ 6F36             >
 893+ 6F36             >Dict_Ptr        defl    $
 893+ 6F36             >
 893+ 6F36             >//              ______________________________________________________________________
 893+ 6F36             >//              Heap part
 893+ 6F36             >
 893+ 6F36             >
 893+ 6F36             >                org     (Heap_Ptr & $1FFF) + $E000
 893+ E7B7             >
 893+ E7B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 893+ E7B7             >Latest_Definition defl  Heap_Ptr
 893+ E7B7             >
 893+ E7B7             >                // dummy db directives used to calculate length of namec
 893+ E7B7 42 4F 55 4E >                db      "BOUNDS"
 893+ E7BB 44 53       >
 893+ E7BD             >len_NFA         defl    $ - temp_NFA
 893+ E7BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 893+ E7B7             >
 893+ E7B7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 893+ E7B8 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 893+ E7BC 44 53       >
 893+ E7BE             >                org     $-1                 // alter last byte of Name just above to set
 893+ E7BD D3          >                db      {b $} | END_BIT     // msb as name end
 893+ E7BE             >
 893+ E7BE AD 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 893+ E7C0             >Prev_Ptr        defl    Heap_Ptr
 893+ E7C0             >
 893+ E7C0             >mirror_Ptr      defl    $
 893+ E7C0             >
 893+ E7C0 38 6F       >                dw      Dict_Ptr + 2        // xt
 893+ E7C2             >Heap_Ptr        defl    $ - $E000           // save current HP
 893+ E7C2             >
 893+ E7C2             >Current_HP      defl  $ - $E000             // used to set HP once!
 893+ E7C2             >
 893+ E7C2             >//              ______________________________________________________________________
 893+ E7C2             >//              Dictionary part
 893+ E7C2             >
 893+ E7C2             >                org     Dict_Ptr
 893+ 6F36             >
 893+ 6F36 C0 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 893+ 6F38             >
 893+ 6F38             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 893+ 6F38 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 893+ 6F38 ~           >
 893+ 6F38 ~           >
 893+ 6F38             >                endif           ; ok        // for other definitions it "points" the correct handler
 893+ 6F38             >                // Use of "; ok" to suppress "warning[fwdref]"
 893+ 6F38             >
 893+ 6F38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 894+ 6F38 D9                           exx
 895+ 6F39 E1                           pop     hl
 896+ 6F3A D1                           pop     de
 897+ 6F3B 19                           add     hl, de
 898+ 6F3C 18 F3                        jr      Count_Here
 899+ 6F3E                              // push    hl
 900+ 6F3E                              // push    de
 901+ 6F3E                              // exx
 902+ 6F3E                              // next
 903+ 6F3E
 904+ 6F3E              //  ______________________________________________________________________
 905+ 6F3E              //
 906+ 6F3E              // leave        --
 907+ 6F3E              // Compile (leave) to leave current LOOP and jump just after it
 908+ 6F3E                              Colon_Def LEAVE, "LEAVE", is_immediate
 908+ 6F3E             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 908+ 6F3E             >
 908+ 6F3E             >Dict_Ptr        defl    $
 908+ 6F3E             >
 908+ 6F3E             >//              ______________________________________________________________________
 908+ 6F3E             >//              Heap part
 908+ 6F3E             >
 908+ 6F3E             >
 908+ 6F3E             >                org     (Heap_Ptr & $1FFF) + $E000
 908+ E7C2             >
 908+ E7C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 908+ E7C2             >Latest_Definition defl  Heap_Ptr
 908+ E7C2             >
 908+ E7C2             >                // dummy db directives used to calculate length of namec
 908+ E7C2 4C 45 41 56 >                db      "LEAVE"
 908+ E7C6 45          >
 908+ E7C7             >len_NFA         defl    $ - temp_NFA
 908+ E7C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 908+ E7C2             >
 908+ E7C2 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 908+ E7C3 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 908+ E7C7 45          >
 908+ E7C8             >                org     $-1                 // alter last byte of Name just above to set
 908+ E7C7 C5          >                db      {b $} | END_BIT     // msb as name end
 908+ E7C8             >
 908+ E7C8 B7 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 908+ E7CA             >Prev_Ptr        defl    Heap_Ptr
 908+ E7CA             >
 908+ E7CA             >mirror_Ptr      defl    $
 908+ E7CA             >
 908+ E7CA 40 6F       >                dw      Dict_Ptr + 2        // xt
 908+ E7CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 908+ E7CC             >
 908+ E7CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 908+ E7CC             >
 908+ E7CC             >//              ______________________________________________________________________
 908+ E7CC             >//              Dictionary part
 908+ E7CC             >
 908+ E7CC             >                org     Dict_Ptr
 908+ 6F3E             >
 908+ 6F3E CA 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 908+ 6F40             >
 908+ 6F40             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 908+ 6F40 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 908+ 6F43             >
 908+ 6F43             >
 908+ 6F43             >                endif           ; ok        // for other definitions it "points" the correct handler
 908+ 6F43             >                // Use of "; ok" to suppress "warning[fwdref]"
 908+ 6F43             >
 908+ 6F43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 909+ 6F43 5F 6E 00 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 910+ 6F47 B3 6B 56 68                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 910+ 6F4B 8E 6A C9 6B
 911+ 6F4F 8E 6A 8E 6A                  dw      ZERO, ZERO
 912+ 6F53 33 68 25 69                  dw      SPFETCH, DUP
 913+ 6F57 CE 68 CE 68                  dw      CELL_PLUS, CELL_PLUS
 914+ 6F5B 15 69                        dw      TUCK
 915+ 6F5D 71 6B 96 69                  dw      CSP, FETCH
 916+ 6F61 1E 69 F2 6B                  dw      SWAP, SUBTRACT
 917+ 6F65 8D 67                        dw      CMOVE
 918+ 6F67 71 6B 96 69                  dw      CSP, FETCH, CELL_MINUS
 918+ 6F6B D3 68
 919+ 6F6D 61 68 01 69                  dw      R_TO, OVER, STORE
 919+ 6F71 A0 69
 920+ 6F73 D3 68 8E 6A                  dw      CELL_MINUS, ZERO
 921+ 6F77 1E 69 A0 69                  dw      SWAP, STORE
 922+ 6F7B 4C 68                        dw      EXIT                    // ;
 923+ 6F7D
 924+ 6F7D              //  ______________________________________________________________________
 925+ 6F7D              //
 926+ 6F7D              // type         a n --
 927+ 6F7D              // Sends to current output channel n characters starting at address a.
 928+ 6F7D                              Colon_Def TYPE, "TYPE", is_normal
 928+ 6F7D             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 928+ 6F7D             >
 928+ 6F7D             >Dict_Ptr        defl    $
 928+ 6F7D             >
 928+ 6F7D             >//              ______________________________________________________________________
 928+ 6F7D             >//              Heap part
 928+ 6F7D             >
 928+ 6F7D             >
 928+ 6F7D             >                org     (Heap_Ptr & $1FFF) + $E000
 928+ E7CC             >
 928+ E7CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ E7CC             >Latest_Definition defl  Heap_Ptr
 928+ E7CC             >
 928+ E7CC             >                // dummy db directives used to calculate length of namec
 928+ E7CC 54 59 50 45 >                db      "TYPE"
 928+ E7D0             >len_NFA         defl    $ - temp_NFA
 928+ E7D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ E7CC             >
 928+ E7CC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ E7CD 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 928+ E7D1             >                org     $-1                 // alter last byte of Name just above to set
 928+ E7D0 C5          >                db      {b $} | END_BIT     // msb as name end
 928+ E7D1             >
 928+ E7D1 C2 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 928+ E7D3             >Prev_Ptr        defl    Heap_Ptr
 928+ E7D3             >
 928+ E7D3             >mirror_Ptr      defl    $
 928+ E7D3             >
 928+ E7D3 7F 6F       >                dw      Dict_Ptr + 2        // xt
 928+ E7D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 928+ E7D5             >
 928+ E7D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 928+ E7D5             >
 928+ E7D5             >//              ______________________________________________________________________
 928+ E7D5             >//              Dictionary part
 928+ E7D5             >
 928+ E7D5             >                org     Dict_Ptr
 928+ 6F7D             >
 928+ 6F7D D3 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 928+ 6F7F             >
 928+ 6F7F             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 6F7F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 928+ 6F82             >
 928+ 6F82             >
 928+ 6F82             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 6F82             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 6F82             >
 928+ 6F82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 6F82 38 6F                        dw      BOUNDS                  // bounds
 930+ 6F84 0C 64                        dw      C_Q_DO                  // ?do
 931+ 6F86 0C 00                        dw      Type_Skip - $
 932+ 6F88              Type_Loop:
 933+ 6F88 3A 64 AB 69                  dw          I, CFETCH           //      i c@
 934+ 6F8C 6D 6C                        dw          EMIT                //      emit
 935+ 6F8E E0 63                        dw      C_LOOP                  // loop
 936+ 6F90 F8 FF                        dw      Type_Loop - $
 937+ 6F92              Type_Skip:
 938+ 6F92 4C 68                        dw      EXIT                    // ;
 939+ 6F94
 940+ 6F94              //  ______________________________________________________________________
 941+ 6F94              //
 942+ 6F94              // -trailing    a n1 -- a n2
 943+ 6F94              // Assumes that an n1 bytes-long string is stored at address a
 944+ 6F94              // and the string contains a space delimited word,
 945+ 6F94              // Finds n2 as the position of the first character after the word.
 946+ 6F94                              Colon_Def LTRAILING, "-TRAILING", is_normal
 946+ 6F94             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 946+ 6F94             >
 946+ 6F94             >Dict_Ptr        defl    $
 946+ 6F94             >
 946+ 6F94             >//              ______________________________________________________________________
 946+ 6F94             >//              Heap part
 946+ 6F94             >
 946+ 6F94             >
 946+ 6F94             >                org     (Heap_Ptr & $1FFF) + $E000
 946+ E7D5             >
 946+ E7D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ E7D5             >Latest_Definition defl  Heap_Ptr
 946+ E7D5             >
 946+ E7D5             >                // dummy db directives used to calculate length of namec
 946+ E7D5 2D 54 52 41 >                db      "-TRAILING"
 946+ E7D9 49 4C 49 4E >
 946+ E7DD 47          >
 946+ E7DE             >len_NFA         defl    $ - temp_NFA
 946+ E7DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ E7D5             >
 946+ E7D5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ E7D6 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 946+ E7DA 49 4C 49 4E >
 946+ E7DE 47          >
 946+ E7DF             >                org     $-1                 // alter last byte of Name just above to set
 946+ E7DE C7          >                db      {b $} | END_BIT     // msb as name end
 946+ E7DF             >
 946+ E7DF CC 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 946+ E7E1             >Prev_Ptr        defl    Heap_Ptr
 946+ E7E1             >
 946+ E7E1             >mirror_Ptr      defl    $
 946+ E7E1             >
 946+ E7E1 96 6F       >                dw      Dict_Ptr + 2        // xt
 946+ E7E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 946+ E7E3             >
 946+ E7E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 946+ E7E3             >
 946+ E7E3             >//              ______________________________________________________________________
 946+ E7E3             >//              Dictionary part
 946+ E7E3             >
 946+ E7E3             >                org     Dict_Ptr
 946+ 6F94             >
 946+ 6F94 E1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 946+ 6F96             >
 946+ 6F96             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 6F96 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 946+ 6F99             >
 946+ 6F99             >
 946+ 6F99             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 6F99             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 6F99             >
 946+ 6F99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 6F99 25 69 8E 6A                  dw      DUP, ZERO               // dup 0
 948+ 6F9D                                                              // do
 949+ 6F9D 0C 64                        dw      C_Q_DO
 950+ 6F9F 20 00                        dw      LTrailing_Leave - $
 951+ 6FA1              LTrailing_Loop:
 952+ 6FA1 74 69 9F 68                  dw          TWO_DUP, PLUS       //      2dup +
 953+ 6FA5 BF 68                        dw          ONE_SUBTRACT        //      1-
 954+ 6FA7 AB 69                        dw          CFETCH              //      c@
 955+ 6FA9 B1 6A F2 6B                  dw          BL, SUBTRACT        //      bl -
 956+ 6FAD                                                              //      if
 957+ 6FAD F5 63                        dw          ZBRANCH
 958+ 6FAF 0A 00                        dw          LTrailing_Else - $
 959+ 6FB1 00 64                        dw              C_LEAVE         //          leave
 960+ 6FB3 0C 00                        dw              LTrailing_Leave - $
 961+ 6FB5 E8 63                        dw          BRANCH              //      else
 962+ 6FB7 04 00                        dw          LTrailing_Endif - $
 963+ 6FB9              LTrailing_Else:
 964+ 6FB9 BF 68                        dw              ONE_SUBTRACT    //          1-
 965+ 6FBB              LTrailing_Endif:                                //      endif
 966+ 6FBB                                                              // loop
 967+ 6FBB E0 63                        dw      C_LOOP
 968+ 6FBD E4 FF                        dw      LTrailing_Loop - $
 969+ 6FBF              LTrailing_Leave:
 970+ 6FBF 4C 68                        dw      EXIT                    // ;
 971+ 6FC1
 972+ 6FC1              //  ______________________________________________________________________
 973+ 6FC1              //
 974+ 6FC1              // accept       a n1 -- n2
 975+ 6FC1              // Accepts at most n1 characters from terminal and stores them at address a
 976+ 6FC1              // CR stops input. A 'nul' is added as trailer.
 977+ 6FC1              // n2 is the string length. n2 is kept in span user variable also.
 978+ 6FC1                              Colon_Def ACCEPT, "ACCEPT", is_normal
 978+ 6FC1             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 978+ 6FC1             >
 978+ 6FC1             >Dict_Ptr        defl    $
 978+ 6FC1             >
 978+ 6FC1             >//              ______________________________________________________________________
 978+ 6FC1             >//              Heap part
 978+ 6FC1             >
 978+ 6FC1             >
 978+ 6FC1             >                org     (Heap_Ptr & $1FFF) + $E000
 978+ E7E3             >
 978+ E7E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ E7E3             >Latest_Definition defl  Heap_Ptr
 978+ E7E3             >
 978+ E7E3             >                // dummy db directives used to calculate length of namec
 978+ E7E3 41 43 43 45 >                db      "ACCEPT"
 978+ E7E7 50 54       >
 978+ E7E9             >len_NFA         defl    $ - temp_NFA
 978+ E7E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ E7E3             >
 978+ E7E3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ E7E4 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 978+ E7E8 50 54       >
 978+ E7EA             >                org     $-1                 // alter last byte of Name just above to set
 978+ E7E9 D4          >                db      {b $} | END_BIT     // msb as name end
 978+ E7EA             >
 978+ E7EA D5 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 978+ E7EC             >Prev_Ptr        defl    Heap_Ptr
 978+ E7EC             >
 978+ E7EC             >mirror_Ptr      defl    $
 978+ E7EC             >
 978+ E7EC C3 6F       >                dw      Dict_Ptr + 2        // xt
 978+ E7EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 978+ E7EE             >
 978+ E7EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 978+ E7EE             >
 978+ E7EE             >//              ______________________________________________________________________
 978+ E7EE             >//              Dictionary part
 978+ E7EE             >
 978+ E7EE             >                org     Dict_Ptr
 978+ 6FC1             >
 978+ 6FC1 EC 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 978+ 6FC3             >
 978+ 6FC3             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 6FC3 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 6FC6             >
 978+ 6FC6             >
 978+ 6FC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 6FC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 6FC6             >
 978+ 6FC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 6FC6 01 69 9F 68                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 979+ 6FCA 01 69
 980+ 6FCC 8E 6A 37 69                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 981+ 6FD0                                                              // do
 982+ 6FD0 0C 64                        dw      C_Q_DO
 983+ 6FD2 8C 00                        dw      Accept_Leave - $
 984+ 6FD4              Accept_Loop:
 985+ 6FD4 38 66                        dw          CUR
 986+ 6FD6 0A 69 80 66                  dw          DROP, KEY           //      drop key        ( a  c )
 987+ 6FDA 25 69                        dw          DUP                 //      dup             ( a  c  c )
 988+ 6FDC A3 63 0E 00                  dw          LIT, $0E            //      0E
 989+ 6FE0 D4 6A                        dw          PLUS_ORIGIN         //      +origin
 990+ 6FE2 96 69                        dw          FETCH               //      @               ( a  c  c  del )
 991+ 6FE4 FE 6B                        dw          EQUALS              //      =               ( a  c  c==del )
 992+ 6FE6                                                              //      if
 993+ 6FE6 F5 63                        dw          ZBRANCH
 994+ 6FE8 2C 00                        dw          Accept_Else_0 - $
 995+ 6FEA 0A 69                        dw              DROP            //          drop        ( a  )
 996+ 6FEC 25 69 3A 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 996+ 6FF0 FE 6B
 997+ 6FF2 95 6A 0C 68                  dw              ONE, AND_OP     //          1 and
 998+ 6FF6 25 69                        dw              DUP             //          dup         ( a  a==i  a==i )
 999+ 6FF8 61 68                        dw              R_TO            //          r> 2 - + r>
1000+ 6FFA DB 68 9F 68                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1001+ 6FFE 56 68                        dw              TO_R            //
1002+ 7000                                                              //          if
1003+ 7000 F5 63                        dw              ZBRANCH
1004+ 7002 0A 00                        dw              Accept_Else_1 - $
1005+ 7004 A3 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1006+ 7008                                                              //          else
1007+ 7008 E8 63                        dw              BRANCH
1008+ 700A 06 00                        dw              Accept_Endif_1 - $
1009+ 700C              Accept_Else_1:
1010+ 700C A3 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1011+ 7010              Accept_Endif_1:                                 //          endif
1012+ 7010 E8 63                        dw          BRANCH
1013+ 7012 2E 00                        dw          Accept_Endif_0 - $
1014+ 7014              Accept_Else_0:                                  //      else
1015+ 7014 25 69                        dw              DUP             //          dup         ( a  c  c )
1016+ 7016 A3 63 0D 00                  dw              LIT, 13         //          13
1017+ 701A FE 6B                        dw              EQUALS          //          =           ( a  c  c==CR )
1018+ 701C                                                              //          if
1019+ 701C F5 63                        dw              ZBRANCH
1020+ 701E 0C 00                        dw              Accept_Else_2 - $
1021+ 7020 0A 69 B1 6A                  dw                  DROP, BL    //              drop bl ( a  bl )
1022+ 7024 8E 6A                        dw                  ZERO        //              0       ( a  c  0 )
1023+ 7026                                                              //          else
1024+ 7026 E8 63                        dw              BRANCH
1025+ 7028 04 00                        dw              Accept_Endif_2 - $
1026+ 702A              Accept_Else_2:
1027+ 702A 25 69                        dw                  DUP         //              dup     ( a  c  c )
1028+ 702C                                                              //          endif
1029+ 702C              Accept_Endif_2:
1030+ 702C 3A 64 B4 69                  dw              I, CSTORE       //          i           ( a  c )
1031+ 7030 25 69 B1 6A                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1031+ 7034 17 6C
1032+ 7036                                                              //          if
1033+ 7036 F5 63                        dw              ZBRANCH
1034+ 7038 08 00                        dw              Accept_Endif_3 - $
1035+ 703A 61 68                        dw                  R_TO        //              r>
1036+ 703C BF 68                        dw                  ONE_SUBTRACT//              1-
1037+ 703E 56 68                        dw                  TO_R        //              >r
1038+ 7040                                                              //          endif
1039+ 7040              Accept_Endif_3:
1040+ 7040              Accept_Endif_0:                                 //      endif
1041+ 7040 6D 6C                        dw          EMIT                //      emit
1042+ 7042
1043+ 7042 8E 6A 3A 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1043+ 7046 B8 68
1044+ 7048 A0 69                        dw          STORE               //          ( zero pad )
1045+ 704A 3A 64                        dw          I                   //      i
1046+ 704C 3A 64 AB 69                  dw          I, CFETCH, ZEQUAL   //      i 0= if
1046+ 7050 71 68
1047+ 7052 F5 63                        dw          ZBRANCH             //
1048+ 7054 06 00                        dw              Accept_Endif_4 - $
1049+ 7056 00 64                        dw                  C_LEAVE     //              leave
1050+ 7058 06 00                        dw                  Accept_Leave - $
1051+ 705A              Accept_Endif_4:                                 //      endif
1052+ 705A                                                              // loop
1053+ 705A E0 63                        dw      C_LOOP
1054+ 705C 78 FF                        dw      Accept_Loop - $
1055+ 705E              Accept_Leave:
1056+ 705E 1E 69 F2 6B                  dw      SWAP, SUBTRACT          // swap -
1057+ 7062 B8 68                        dw      ONE_PLUS                // 1+
1058+ 7064 25 69 A1 6B                  dw      DUP, SPAN, STORE        // dup span !
1058+ 7068 A0 69
1059+ 706A 4C 68                        dw      EXIT                    // ;
1060+ 706C
1061+ 706C              //  ______________________________________________________________________
1062+ 706C              //
1063+ 706C              // expect      a n --
1064+ 706C              // Accepts at most n1 characters from terminal and stores them at address a
1065+ 706C              // CR stops input. A 'nul' is added as trailer.
1066+ 706C              // n2 is the string length. n2 is kept in span user variable also.
1067+ 706C              //              Colon_Def EXPECT, "EXPECT", is_normal
1068+ 706C              //              dw      ACCEPT, DROP            // accept drop
1069+ 706C              //              dw      EXIT                    // ;
1070+ 706C
1071+ 706C              //  ______________________________________________________________________
1072+ 706C              //
1073+ 706C              // query        --
1074+ 706C              // Accept at most 80 character from console. CR stops.
1075+ 706C              // Text is stored in TIB. Variable IN is zeroed.
1076+ 706C                              Colon_Def QUERY, "QUERY", is_normal
1076+ 706C             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1076+ 706C             >
1076+ 706C             >Dict_Ptr        defl    $
1076+ 706C             >
1076+ 706C             >//              ______________________________________________________________________
1076+ 706C             >//              Heap part
1076+ 706C             >
1076+ 706C             >
1076+ 706C             >                org     (Heap_Ptr & $1FFF) + $E000
1076+ E7EE             >
1076+ E7EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ E7EE             >Latest_Definition defl  Heap_Ptr
1076+ E7EE             >
1076+ E7EE             >                // dummy db directives used to calculate length of namec
1076+ E7EE 51 55 45 52 >                db      "QUERY"
1076+ E7F2 59          >
1076+ E7F3             >len_NFA         defl    $ - temp_NFA
1076+ E7F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ E7EE             >
1076+ E7EE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ E7EF 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1076+ E7F3 59          >
1076+ E7F4             >                org     $-1                 // alter last byte of Name just above to set
1076+ E7F3 D9          >                db      {b $} | END_BIT     // msb as name end
1076+ E7F4             >
1076+ E7F4 E3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1076+ E7F6             >Prev_Ptr        defl    Heap_Ptr
1076+ E7F6             >
1076+ E7F6             >mirror_Ptr      defl    $
1076+ E7F6             >
1076+ E7F6 6E 70       >                dw      Dict_Ptr + 2        // xt
1076+ E7F8             >Heap_Ptr        defl    $ - $E000           // save current HP
1076+ E7F8             >
1076+ E7F8             >Current_HP      defl  $ - $E000             // used to set HP once!
1076+ E7F8             >
1076+ E7F8             >//              ______________________________________________________________________
1076+ E7F8             >//              Dictionary part
1076+ E7F8             >
1076+ E7F8             >                org     Dict_Ptr
1076+ 706C             >
1076+ 706C F6 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1076+ 706E             >
1076+ 706E             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 706E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1076+ 7071             >
1076+ 7071             >
1076+ 7071             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 7071             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 7071             >
1076+ 7071             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 7071 F3 6A 96 69                  dw      TIB, FETCH              // tib @
1078+ 7075 A3 63 50 00                  dw      LIT, 80                 // 80
1079+ 7079 C3 6F 0A 69                  dw      ACCEPT, DROP            // accept drop
1080+ 707D 8E 6A 35 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
1080+ 7081 A0 69
1081+ 7083 4C 68                        dw      EXIT                    // ;
1082+ 7085
1083+ 7085              //  ______________________________________________________________________
1084+ 7085              //
1085+ 7085              // fill        a n c --
1086+ 7085              // If n > 0, fills n locations starting from address a with the value c.
1087+ 7085                              New_Def FILL, "FILL", is_code, is_normal
1087+ 7085             >
1087+ 7085             >Dict_Ptr        defl    $
1087+ 7085             >
1087+ 7085             >//              ______________________________________________________________________
1087+ 7085             >//              Heap part
1087+ 7085             >
1087+ 7085             >
1087+ 7085             >                org     (Heap_Ptr & $1FFF) + $E000
1087+ E7F8             >
1087+ E7F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1087+ E7F8             >Latest_Definition defl  Heap_Ptr
1087+ E7F8             >
1087+ E7F8             >                // dummy db directives used to calculate length of namec
1087+ E7F8 46 49 4C 4C >                db      "FILL"
1087+ E7FC             >len_NFA         defl    $ - temp_NFA
1087+ E7FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1087+ E7F8             >
1087+ E7F8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1087+ E7F9 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1087+ E7FD             >                org     $-1                 // alter last byte of Name just above to set
1087+ E7FC CC          >                db      {b $} | END_BIT     // msb as name end
1087+ E7FD             >
1087+ E7FD EE 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1087+ E7FF             >Prev_Ptr        defl    Heap_Ptr
1087+ E7FF             >
1087+ E7FF             >mirror_Ptr      defl    $
1087+ E7FF             >
1087+ E7FF 87 70       >                dw      Dict_Ptr + 2        // xt
1087+ E801             >Heap_Ptr        defl    $ - $E000           // save current HP
1087+ E801             >
1087+ E801             >Current_HP      defl  $ - $E000             // used to set HP once!
1087+ E801             >
1087+ E801             >//              ______________________________________________________________________
1087+ E801             >//              Dictionary part
1087+ E801             >
1087+ E801             >                org     Dict_Ptr
1087+ 7085             >
1087+ 7085 FF 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1087+ 7087             >
1087+ 7087             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1087+ 7087 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1087+ 7087 ~           >
1087+ 7087 ~           >
1087+ 7087             >                endif           ; ok        // for other definitions it "points" the correct handler
1087+ 7087             >                // Use of "; ok" to suppress "warning[fwdref]"
1087+ 7087             >
1087+ 7087             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1088+ 7087 D9                           exx
1089+ 7088 D1                           pop     de                  // de has character
1090+ 7089 C1                           pop     bc                  // bc has counter
1091+ 708A E1                           pop     hl                  // hl has address, save Instruction Pointer
1092+ 708B              Fill_Loop:
1093+ 708B 78                               ld      a, b
1094+ 708C B1                               or      c
1095+ 708D 28 05                        jr      z, Fill_While_End
1096+ 708F 73                               ld      (hl), e
1097+ 7090 0B                               dec     bc
1098+ 7091 23                               inc     hl
1099+ 7092 18 F7                        jr      Fill_Loop
1100+ 7094              Fill_While_End:
1101+ 7094 D9                           exx
1102+ 7095                              next
1102+ 7095 DD E9       >                jp      (ix)
1103+ 7097
1104+ 7097              //  ______________________________________________________________________
1105+ 7097              //
1106+ 7097              // erase        a n --
1107+ 7097              // If n > 0, fills n locations starting from address a with 'nul' characters.
1108+ 7097                              Colon_Def ERASE, "ERASE", is_normal
1108+ 7097             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1108+ 7097             >
1108+ 7097             >Dict_Ptr        defl    $
1108+ 7097             >
1108+ 7097             >//              ______________________________________________________________________
1108+ 7097             >//              Heap part
1108+ 7097             >
1108+ 7097             >
1108+ 7097             >                org     (Heap_Ptr & $1FFF) + $E000
1108+ E801             >
1108+ E801             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1108+ E801             >Latest_Definition defl  Heap_Ptr
1108+ E801             >
1108+ E801             >                // dummy db directives used to calculate length of namec
1108+ E801 45 52 41 53 >                db      "ERASE"
1108+ E805 45          >
1108+ E806             >len_NFA         defl    $ - temp_NFA
1108+ E806             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1108+ E801             >
1108+ E801 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1108+ E802 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1108+ E806 45          >
1108+ E807             >                org     $-1                 // alter last byte of Name just above to set
1108+ E806 C5          >                db      {b $} | END_BIT     // msb as name end
1108+ E807             >
1108+ E807 F8 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1108+ E809             >Prev_Ptr        defl    Heap_Ptr
1108+ E809             >
1108+ E809             >mirror_Ptr      defl    $
1108+ E809             >
1108+ E809 99 70       >                dw      Dict_Ptr + 2        // xt
1108+ E80B             >Heap_Ptr        defl    $ - $E000           // save current HP
1108+ E80B             >
1108+ E80B             >Current_HP      defl  $ - $E000             // used to set HP once!
1108+ E80B             >
1108+ E80B             >//              ______________________________________________________________________
1108+ E80B             >//              Dictionary part
1108+ E80B             >
1108+ E80B             >                org     Dict_Ptr
1108+ 7097             >
1108+ 7097 09 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1108+ 7099             >
1108+ 7099             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1108+ 7099 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1108+ 709C             >
1108+ 709C             >
1108+ 709C             >                endif           ; ok        // for other definitions it "points" the correct handler
1108+ 709C             >                // Use of "; ok" to suppress "warning[fwdref]"
1108+ 709C             >
1108+ 709C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1109+ 709C 8E 6A 87 70                  dw      ZERO, FILL              // 0 fill
1110+ 70A0 4C 68                        dw      EXIT                    // ;
1111+ 70A2
1112+ 70A2              //  ______________________________________________________________________
1113+ 70A2              //
1114+ 70A2              // blank        a n --
1115+ 70A2              // If n > 0, fills n locations starting from address a with 'nul' characters.
1116+ 70A2                              Colon_Def BLANK, "BLANK", is_normal
1116+ 70A2             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1116+ 70A2             >
1116+ 70A2             >Dict_Ptr        defl    $
1116+ 70A2             >
1116+ 70A2             >//              ______________________________________________________________________
1116+ 70A2             >//              Heap part
1116+ 70A2             >
1116+ 70A2             >
1116+ 70A2             >                org     (Heap_Ptr & $1FFF) + $E000
1116+ E80B             >
1116+ E80B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1116+ E80B             >Latest_Definition defl  Heap_Ptr
1116+ E80B             >
1116+ E80B             >                // dummy db directives used to calculate length of namec
1116+ E80B 42 4C 41 4E >                db      "BLANK"
1116+ E80F 4B          >
1116+ E810             >len_NFA         defl    $ - temp_NFA
1116+ E810             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1116+ E80B             >
1116+ E80B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1116+ E80C 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1116+ E810 4B          >
1116+ E811             >                org     $-1                 // alter last byte of Name just above to set
1116+ E810 CB          >                db      {b $} | END_BIT     // msb as name end
1116+ E811             >
1116+ E811 01 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1116+ E813             >Prev_Ptr        defl    Heap_Ptr
1116+ E813             >
1116+ E813             >mirror_Ptr      defl    $
1116+ E813             >
1116+ E813 A4 70       >                dw      Dict_Ptr + 2        // xt
1116+ E815             >Heap_Ptr        defl    $ - $E000           // save current HP
1116+ E815             >
1116+ E815             >Current_HP      defl  $ - $E000             // used to set HP once!
1116+ E815             >
1116+ E815             >//              ______________________________________________________________________
1116+ E815             >//              Dictionary part
1116+ E815             >
1116+ E815             >                org     Dict_Ptr
1116+ 70A2             >
1116+ 70A2 13 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1116+ 70A4             >
1116+ 70A4             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1116+ 70A4 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1116+ 70A7             >
1116+ 70A7             >
1116+ 70A7             >                endif           ; ok        // for other definitions it "points" the correct handler
1116+ 70A7             >                // Use of "; ok" to suppress "warning[fwdref]"
1116+ 70A7             >
1116+ 70A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1117+ 70A7 B1 6A 87 70                  dw      BL, FILL                // bl fill
1118+ 70AB 4C 68                        dw      EXIT                    // ;
1119+ 70AD
1120+ 70AD              //  ______________________________________________________________________
1121+ 70AD              //
1122+ 70AD              // hold         c --
1123+ 70AD              // Used between <# and #> to insert a character c in numeric formatting.
1124+ 70AD                              Colon_Def HOLD, "HOLD", is_normal
1124+ 70AD             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1124+ 70AD             >
1124+ 70AD             >Dict_Ptr        defl    $
1124+ 70AD             >
1124+ 70AD             >//              ______________________________________________________________________
1124+ 70AD             >//              Heap part
1124+ 70AD             >
1124+ 70AD             >
1124+ 70AD             >                org     (Heap_Ptr & $1FFF) + $E000
1124+ E815             >
1124+ E815             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ E815             >Latest_Definition defl  Heap_Ptr
1124+ E815             >
1124+ E815             >                // dummy db directives used to calculate length of namec
1124+ E815 48 4F 4C 44 >                db      "HOLD"
1124+ E819             >len_NFA         defl    $ - temp_NFA
1124+ E819             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ E815             >
1124+ E815 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ E816 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1124+ E81A             >                org     $-1                 // alter last byte of Name just above to set
1124+ E819 C4          >                db      {b $} | END_BIT     // msb as name end
1124+ E81A             >
1124+ E81A 0B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1124+ E81C             >Prev_Ptr        defl    Heap_Ptr
1124+ E81C             >
1124+ E81C             >mirror_Ptr      defl    $
1124+ E81C             >
1124+ E81C AF 70       >                dw      Dict_Ptr + 2        // xt
1124+ E81E             >Heap_Ptr        defl    $ - $E000           // save current HP
1124+ E81E             >
1124+ E81E             >Current_HP      defl  $ - $E000             // used to set HP once!
1124+ E81E             >
1124+ E81E             >//              ______________________________________________________________________
1124+ E81E             >//              Dictionary part
1124+ E81E             >
1124+ E81E             >                org     Dict_Ptr
1124+ 70AD             >
1124+ 70AD 1C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1124+ 70AF             >
1124+ 70AF             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 70AF CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1124+ 70B2             >
1124+ 70B2             >
1124+ 70B2             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 70B2             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 70B2             >
1124+ 70B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 70B2 AA 6A                        dw      NEG_ONE                 // -1
1126+ 70B4 7D 6B 7E 69                  dw      HLD, PLUSSTORE          // hld +!
1127+ 70B8 7D 6B 96 69                  dw      HLD, FETCH, CSTORE      // hld @ c!
1127+ 70BC B4 69
1128+ 70BE 4C 68                        dw      EXIT                    // ;
1129+ 70C0
1130+ 70C0              //  ______________________________________________________________________
1131+ 70C0              //
1132+ 70C0              // pad         -- a
1133+ 70C0              // leaves the buffer text address. This is at a fixed distance over HERE.
1134+ 70C0                              Colon_Def PAD, "PAD", is_normal
1134+ 70C0             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1134+ 70C0             >
1134+ 70C0             >Dict_Ptr        defl    $
1134+ 70C0             >
1134+ 70C0             >//              ______________________________________________________________________
1134+ 70C0             >//              Heap part
1134+ 70C0             >
1134+ 70C0             >
1134+ 70C0             >                org     (Heap_Ptr & $1FFF) + $E000
1134+ E81E             >
1134+ E81E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1134+ E81E             >Latest_Definition defl  Heap_Ptr
1134+ E81E             >
1134+ E81E             >                // dummy db directives used to calculate length of namec
1134+ E81E 50 41 44    >                db      "PAD"
1134+ E821             >len_NFA         defl    $ - temp_NFA
1134+ E821             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1134+ E81E             >
1134+ E81E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1134+ E81F 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1134+ E822             >                org     $-1                 // alter last byte of Name just above to set
1134+ E821 C4          >                db      {b $} | END_BIT     // msb as name end
1134+ E822             >
1134+ E822 15 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1134+ E824             >Prev_Ptr        defl    Heap_Ptr
1134+ E824             >
1134+ E824             >mirror_Ptr      defl    $
1134+ E824             >
1134+ E824 C2 70       >                dw      Dict_Ptr + 2        // xt
1134+ E826             >Heap_Ptr        defl    $ - $E000           // save current HP
1134+ E826             >
1134+ E826             >Current_HP      defl  $ - $E000             // used to set HP once!
1134+ E826             >
1134+ E826             >//              ______________________________________________________________________
1134+ E826             >//              Dictionary part
1134+ E826             >
1134+ E826             >                org     Dict_Ptr
1134+ 70C0             >
1134+ 70C0 24 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1134+ 70C2             >
1134+ 70C2             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1134+ 70C2 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1134+ 70C5             >
1134+ 70C5             >
1134+ 70C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1134+ 70C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1134+ 70C5             >
1134+ 70C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1135+ 70C5 B3 6B                        dw      HERE                    // here
1136+ 70C7 A3 63 44 00                  dw      LIT, 68                 // 68
1137+ 70CB 9F 68                        dw      PLUS                    // +
1138+ 70CD 4C 68                        dw      EXIT                    // ;
1139+ 70CF
1140+ 70CF              //  ______________________________________________________________________
1141+ 70CF              //
1142+ 70CF              // word         c -- a
1143+ 70CF              // reads characters from input streams until it encouners a c delimiter.
1144+ 70CF              // Stores that packet so it starts from HERE
1145+ 70CF              // WORD leaves a counter as first byte and ends the packet with two spaces.
1146+ 70CF              // Other occurrences of c are ignored.
1147+ 70CF              // If BLK is zero, text is taken from terminal buffer TIB.
1148+ 70CF              // Otherwise text is taken from the disk-block given by BLK.
1149+ 70CF              // "in" variable is incremented of the number of character read.
1150+ 70CF              // The number of characters read is given by ENCLOSE.
1151+ 70CF                              Colon_Def WORD, "WORD", is_normal
1151+ 70CF             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1151+ 70CF             >
1151+ 70CF             >Dict_Ptr        defl    $
1151+ 70CF             >
1151+ 70CF             >//              ______________________________________________________________________
1151+ 70CF             >//              Heap part
1151+ 70CF             >
1151+ 70CF             >
1151+ 70CF             >                org     (Heap_Ptr & $1FFF) + $E000
1151+ E826             >
1151+ E826             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1151+ E826             >Latest_Definition defl  Heap_Ptr
1151+ E826             >
1151+ E826             >                // dummy db directives used to calculate length of namec
1151+ E826 57 4F 52 44 >                db      "WORD"
1151+ E82A             >len_NFA         defl    $ - temp_NFA
1151+ E82A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1151+ E826             >
1151+ E826 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1151+ E827 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1151+ E82B             >                org     $-1                 // alter last byte of Name just above to set
1151+ E82A C4          >                db      {b $} | END_BIT     // msb as name end
1151+ E82B             >
1151+ E82B 1E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1151+ E82D             >Prev_Ptr        defl    Heap_Ptr
1151+ E82D             >
1151+ E82D             >mirror_Ptr      defl    $
1151+ E82D             >
1151+ E82D D1 70       >                dw      Dict_Ptr + 2        // xt
1151+ E82F             >Heap_Ptr        defl    $ - $E000           // save current HP
1151+ E82F             >
1151+ E82F             >Current_HP      defl  $ - $E000             // used to set HP once!
1151+ E82F             >
1151+ E82F             >//              ______________________________________________________________________
1151+ E82F             >//              Dictionary part
1151+ E82F             >
1151+ E82F             >                org     Dict_Ptr
1151+ 70CF             >
1151+ 70CF 2D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1151+ 70D1             >
1151+ 70D1             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1151+ 70D1 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1151+ 70D4             >
1151+ 70D4             >
1151+ 70D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1151+ 70D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1151+ 70D4             >
1151+ 70D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1152+ 70D4 2F 6B 96 69                  dw      BLK, FETCH              // blk @
1153+ 70D8                                                              // if
1154+ 70D8 F5 63                        dw      ZBRANCH
1155+ 70DA 0C 00                        dw      Word_Else - $
1156+ 70DC 2F 6B 96 69                  dw          BLK, FETCH          //      blk @
1157+ 70E0 89 79                        dw          BLOCK               //      block ( forward )
1158+ 70E2                                                              // else
1159+ 70E2 E8 63                        dw      BRANCH
1160+ 70E4 06 00                        dw      Word_Endif - $
1161+ 70E6              Word_Else:
1162+ 70E6 F3 6A 96 69                  dw         TIB, FETCH           //      tib @
1163+ 70EA              Word_Endif:                                     // endif
1164+ 70EA 35 6B 96 69                  dw      TO_IN, FETCH, PLUS      // >in @ +
1164+ 70EE 9F 68
1165+ 70F0 1E 69 29 65                  dw      SWAP, ENCLOSE           // swap enclose
1166+ 70F4 B3 6B A3 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1166+ 70F8 22 00 A4 70
1167+ 70FC 35 6B 7E 69                  dw      TO_IN, PLUSSTORE        // >in @ +
1168+ 7100 01 69 F2 6B                  dw      OVER, SUBTRACT, TO_R    // over - >r
1168+ 7104 56 68
1169+ 7106 6C 68 B3 6B                  dw      R_OP, HERE, CSTORE      // r here c!
1169+ 710A B4 69
1170+ 710C 9F 68                        dw      PLUS                    // +
1171+ 710E B3 6B B8 68                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1171+ 7112 61 68
1172+ 7114 8D 67                        dw      CMOVE                   // cmove
1173+ 7116 B3 6B                        dw      HERE                    // here
1174+ 7118 4C 68                        dw      EXIT                    // ;
1175+ 711A
1176+ 711A              //  ______________________________________________________________________
1177+ 711A              //
1178+ 711A              // (.")         --
1179+ 711A              // Direct procedure compiled by ." and  .(  It executes TYPE.
1180+ 711A                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1180+ 711A             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1180+ 711A             >
1180+ 711A             >Dict_Ptr        defl    $
1180+ 711A             >
1180+ 711A             >//              ______________________________________________________________________
1180+ 711A             >//              Heap part
1180+ 711A             >
1180+ 711A             >
1180+ 711A             >                org     (Heap_Ptr & $1FFF) + $E000
1180+ E82F             >
1180+ E82F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1180+ E82F             >Latest_Definition defl  Heap_Ptr
1180+ E82F             >
1180+ E82F             >                // dummy db directives used to calculate length of namec
1180+ E82F 28 2E 22 29 >                db      '(.")'
1180+ E833             >len_NFA         defl    $ - temp_NFA
1180+ E833             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1180+ E82F             >
1180+ E82F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1180+ E830 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1180+ E834             >                org     $-1                 // alter last byte of Name just above to set
1180+ E833 A9          >                db      {b $} | END_BIT     // msb as name end
1180+ E834             >
1180+ E834 26 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1180+ E836             >Prev_Ptr        defl    Heap_Ptr
1180+ E836             >
1180+ E836             >mirror_Ptr      defl    $
1180+ E836             >
1180+ E836 1C 71       >                dw      Dict_Ptr + 2        // xt
1180+ E838             >Heap_Ptr        defl    $ - $E000           // save current HP
1180+ E838             >
1180+ E838             >Current_HP      defl  $ - $E000             // used to set HP once!
1180+ E838             >
1180+ E838             >//              ______________________________________________________________________
1180+ E838             >//              Dictionary part
1180+ E838             >
1180+ E838             >                org     Dict_Ptr
1180+ 711A             >
1180+ 711A 36 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1180+ 711C             >
1180+ 711C             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1180+ 711C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1180+ 711F             >
1180+ 711F             >
1180+ 711F             >                endif           ; ok        // for other definitions it "points" the correct handler
1180+ 711F             >                // Use of "; ok" to suppress "warning[fwdref]"
1180+ 711F             >
1180+ 711F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1181+ 711F 6C 68 2B 6F                  dw      R_OP, COUNT             // r count
1182+ 7123 25 69 B8 68                  dw      DUP, ONE_PLUS           // dup 1+
1183+ 7127 61 68 9F 68                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1183+ 712B 56 68
1184+ 712D 7F 6F                        dw      TYPE                    // type
1185+ 712F 4C 68                        dw      EXIT                    // ;
1186+ 7131
1187+ 7131              //  ______________________________________________________________________
1188+ 7131              //
1189+ 7131              // char         -- c
1190+ 7131              // get first character from next input word
1191+ 7131                              Colon_Def CHAR,  "CHAR", is_normal
1191+ 7131             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1191+ 7131             >
1191+ 7131             >Dict_Ptr        defl    $
1191+ 7131             >
1191+ 7131             >//              ______________________________________________________________________
1191+ 7131             >//              Heap part
1191+ 7131             >
1191+ 7131             >
1191+ 7131             >                org     (Heap_Ptr & $1FFF) + $E000
1191+ E838             >
1191+ E838             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1191+ E838             >Latest_Definition defl  Heap_Ptr
1191+ E838             >
1191+ E838             >                // dummy db directives used to calculate length of namec
1191+ E838 43 48 41 52 >                db      "CHAR"
1191+ E83C             >len_NFA         defl    $ - temp_NFA
1191+ E83C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1191+ E838             >
1191+ E838 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1191+ E839 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1191+ E83D             >                org     $-1                 // alter last byte of Name just above to set
1191+ E83C D2          >                db      {b $} | END_BIT     // msb as name end
1191+ E83D             >
1191+ E83D 2F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1191+ E83F             >Prev_Ptr        defl    Heap_Ptr
1191+ E83F             >
1191+ E83F             >mirror_Ptr      defl    $
1191+ E83F             >
1191+ E83F 33 71       >                dw      Dict_Ptr + 2        // xt
1191+ E841             >Heap_Ptr        defl    $ - $E000           // save current HP
1191+ E841             >
1191+ E841             >Current_HP      defl  $ - $E000             // used to set HP once!
1191+ E841             >
1191+ E841             >//              ______________________________________________________________________
1191+ E841             >//              Dictionary part
1191+ E841             >
1191+ E841             >                org     Dict_Ptr
1191+ 7131             >
1191+ 7131 3F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1191+ 7133             >
1191+ 7133             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1191+ 7133 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1191+ 7136             >
1191+ 7136             >
1191+ 7136             >                endif           ; ok        // for other definitions it "points" the correct handler
1191+ 7136             >                // Use of "; ok" to suppress "warning[fwdref]"
1191+ 7136             >
1191+ 7136             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1192+ 7136 B1 6A D1 70                  dw      BL, WORD                // bl word
1193+ 713A B8 68 AB 69                  dw      ONE_PLUS, CFETCH        // 1+ c@
1194+ 713E 4C 68                        dw      EXIT                    // ;
1195+ 7140
1196+ 7140              //  ______________________________________________________________________
1197+ 7140              //
1198+ 7140              // ,"           --
1199+ 7140              // compiles a string terminated by " as a counted string from next input stream
1200+ 7140                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1200+ 7140             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1200+ 7140             >
1200+ 7140             >Dict_Ptr        defl    $
1200+ 7140             >
1200+ 7140             >//              ______________________________________________________________________
1200+ 7140             >//              Heap part
1200+ 7140             >
1200+ 7140             >
1200+ 7140             >                org     (Heap_Ptr & $1FFF) + $E000
1200+ E841             >
1200+ E841             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ E841             >Latest_Definition defl  Heap_Ptr
1200+ E841             >
1200+ E841             >                // dummy db directives used to calculate length of namec
1200+ E841 2C 22       >                db      ',"'
1200+ E843             >len_NFA         defl    $ - temp_NFA
1200+ E843             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ E841             >
1200+ E841 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ E842 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1200+ E844             >                org     $-1                 // alter last byte of Name just above to set
1200+ E843 A2          >                db      {b $} | END_BIT     // msb as name end
1200+ E844             >
1200+ E844 38 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1200+ E846             >Prev_Ptr        defl    Heap_Ptr
1200+ E846             >
1200+ E846             >mirror_Ptr      defl    $
1200+ E846             >
1200+ E846 42 71       >                dw      Dict_Ptr + 2        // xt
1200+ E848             >Heap_Ptr        defl    $ - $E000           // save current HP
1200+ E848             >
1200+ E848             >Current_HP      defl  $ - $E000             // used to set HP once!
1200+ E848             >
1200+ E848             >//              ______________________________________________________________________
1200+ E848             >//              Dictionary part
1200+ E848             >
1200+ E848             >                org     Dict_Ptr
1200+ 7140             >
1200+ 7140 46 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1200+ 7142             >
1200+ 7142             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 7142 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1200+ 7145             >
1200+ 7145             >
1200+ 7145             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 7145             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 7145             >
1200+ 7145             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 7145 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1202+ 7149 D1 70                        dw      WORD                    // word
1203+ 714B AB 69 B8 68                  dw      CFETCH, ONE_PLUS        // c@ 1+
1204+ 714F BE 6B                        dw      ALLOT                   // allot
1205+ 7151 8E 6A D8 6B                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1206+ 7155 4C 68                        dw      EXIT
1207+ 7157
1208+ 7157              //  ______________________________________________________________________
1209+ 7157              //
1210+ 7157              // .c           c --
1211+ 7157              // intermediate general purpose string builder, used by ." and .(
1212+ 7157                              Colon_Def DOT_C,  ".C", is_immediate
1212+ 7157             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1212+ 7157             >
1212+ 7157             >Dict_Ptr        defl    $
1212+ 7157             >
1212+ 7157             >//              ______________________________________________________________________
1212+ 7157             >//              Heap part
1212+ 7157             >
1212+ 7157             >
1212+ 7157             >                org     (Heap_Ptr & $1FFF) + $E000
1212+ E848             >
1212+ E848             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ E848             >Latest_Definition defl  Heap_Ptr
1212+ E848             >
1212+ E848             >                // dummy db directives used to calculate length of namec
1212+ E848 2E 43       >                db      ".C"
1212+ E84A             >len_NFA         defl    $ - temp_NFA
1212+ E84A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ E848             >
1212+ E848 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ E849 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1212+ E84B             >                org     $-1                 // alter last byte of Name just above to set
1212+ E84A C3          >                db      {b $} | END_BIT     // msb as name end
1212+ E84B             >
1212+ E84B 41 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1212+ E84D             >Prev_Ptr        defl    Heap_Ptr
1212+ E84D             >
1212+ E84D             >mirror_Ptr      defl    $
1212+ E84D             >
1212+ E84D 59 71       >                dw      Dict_Ptr + 2        // xt
1212+ E84F             >Heap_Ptr        defl    $ - $E000           // save current HP
1212+ E84F             >
1212+ E84F             >Current_HP      defl  $ - $E000             // used to set HP once!
1212+ E84F             >
1212+ E84F             >//              ______________________________________________________________________
1212+ E84F             >//              Dictionary part
1212+ E84F             >
1212+ E84F             >                org     Dict_Ptr
1212+ 7157             >
1212+ 7157 4D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1212+ 7159             >
1212+ 7159             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 7159 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1212+ 715C             >
1212+ 715C             >
1212+ 715C             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 715C             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 715C             >
1212+ 715C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 715C 59 6B 96 69                  dw      STATE, FETCH            // state @
1214+ 7160                                                              // if
1215+ 7160 F5 63                        dw      ZBRANCH
1216+ 7162 12 00                        dw      Dot_C_Else - $
1217+ 7164 5F 6E 1C 71                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1218+ 7168 D1 70 AB 69                  dw          WORD, CFETCH        //      word c@
1219+ 716C B8 68 BE 6B                  dw          ONE_PLUS, ALLOT     //      1+ allot
1220+ 7170                                                              // else
1221+ 7170 E8 63                        dw      BRANCH
1222+ 7172 08 00                        dw      Dot_C_Endif - $
1223+ 7174              Dot_C_Else:
1224+ 7174 D1 70 2B 6F                  dw          WORD, COUNT, TYPE   //      word count type
1224+ 7178 7F 6F
1225+ 717A              Dot_C_Endif:                                    // endif
1226+ 717A 4C 68                        dw      EXIT                    ;
1227+ 717C
1228+ 717C              //  ______________________________________________________________________
1229+ 717C              //
1230+ 717C              // ."           c --
1231+ 717C                              Colon_Def DOT_QUOTE,  '."', is_immediate
1231+ 717C             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1231+ 717C             >
1231+ 717C             >Dict_Ptr        defl    $
1231+ 717C             >
1231+ 717C             >//              ______________________________________________________________________
1231+ 717C             >//              Heap part
1231+ 717C             >
1231+ 717C             >
1231+ 717C             >                org     (Heap_Ptr & $1FFF) + $E000
1231+ E84F             >
1231+ E84F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1231+ E84F             >Latest_Definition defl  Heap_Ptr
1231+ E84F             >
1231+ E84F             >                // dummy db directives used to calculate length of namec
1231+ E84F 2E 22       >                db      '."'
1231+ E851             >len_NFA         defl    $ - temp_NFA
1231+ E851             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1231+ E84F             >
1231+ E84F C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1231+ E850 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1231+ E852             >                org     $-1                 // alter last byte of Name just above to set
1231+ E851 A2          >                db      {b $} | END_BIT     // msb as name end
1231+ E852             >
1231+ E852 48 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1231+ E854             >Prev_Ptr        defl    Heap_Ptr
1231+ E854             >
1231+ E854             >mirror_Ptr      defl    $
1231+ E854             >
1231+ E854 7E 71       >                dw      Dict_Ptr + 2        // xt
1231+ E856             >Heap_Ptr        defl    $ - $E000           // save current HP
1231+ E856             >
1231+ E856             >Current_HP      defl  $ - $E000             // used to set HP once!
1231+ E856             >
1231+ E856             >//              ______________________________________________________________________
1231+ E856             >//              Dictionary part
1231+ E856             >
1231+ E856             >                org     Dict_Ptr
1231+ 717C             >
1231+ 717C 54 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1231+ 717E             >
1231+ 717E             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1231+ 717E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1231+ 7181             >
1231+ 7181             >
1231+ 7181             >                endif           ; ok        // for other definitions it "points" the correct handler
1231+ 7181             >                // Use of "; ok" to suppress "warning[fwdref]"
1231+ 7181             >
1231+ 7181             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1232+ 7181 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1233+ 7185 59 71                        dw      DOT_C                   // [compile] .c
1234+ 7187 4C 68                        dw      EXIT                    // ; immediate
1235+ 7189
1236+ 7189              //  ______________________________________________________________________
1237+ 7189              //
1238+ 7189              // .(           c --
1239+ 7189                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1239+ 7189             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1239+ 7189             >
1239+ 7189             >Dict_Ptr        defl    $
1239+ 7189             >
1239+ 7189             >//              ______________________________________________________________________
1239+ 7189             >//              Heap part
1239+ 7189             >
1239+ 7189             >
1239+ 7189             >                org     (Heap_Ptr & $1FFF) + $E000
1239+ E856             >
1239+ E856             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ E856             >Latest_Definition defl  Heap_Ptr
1239+ E856             >
1239+ E856             >                // dummy db directives used to calculate length of namec
1239+ E856 2E 28       >                db      ".("
1239+ E858             >len_NFA         defl    $ - temp_NFA
1239+ E858             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ E856             >
1239+ E856 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ E857 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1239+ E859             >                org     $-1                 // alter last byte of Name just above to set
1239+ E858 A8          >                db      {b $} | END_BIT     // msb as name end
1239+ E859             >
1239+ E859 4F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1239+ E85B             >Prev_Ptr        defl    Heap_Ptr
1239+ E85B             >
1239+ E85B             >mirror_Ptr      defl    $
1239+ E85B             >
1239+ E85B 8B 71       >                dw      Dict_Ptr + 2        // xt
1239+ E85D             >Heap_Ptr        defl    $ - $E000           // save current HP
1239+ E85D             >
1239+ E85D             >Current_HP      defl  $ - $E000             // used to set HP once!
1239+ E85D             >
1239+ E85D             >//              ______________________________________________________________________
1239+ E85D             >//              Dictionary part
1239+ E85D             >
1239+ E85D             >                org     Dict_Ptr
1239+ 7189             >
1239+ 7189 5B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1239+ 718B             >
1239+ 718B             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 718B CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1239+ 718E             >
1239+ 718E             >
1239+ 718E             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 718E             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 718E             >
1239+ 718E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 718E A3 63 29 00                  dw      LIT, ")"                // [char] )
1241+ 7192 59 71                        dw      DOT_C                   // [compile] .c
1242+ 7194 4C 68                        dw      EXIT                    // ; immediate
1243+ 7196
1244+ 7196              //  ______________________________________________________________________
1245+ 7196              //
1246+ 7196              // (sgn)        a -- a f
1247+ 7196              // determines if char in addr a is a sign (+ or -), and in that case increments
1248+ 7196              // a flag. Returns f as the sign, true for negative, false for positive.
1249+ 7196              // called by NUMBER and (EXP)
1250+ 7196                              Colon_Def CSGN,  "(SGN)", is_normal
1250+ 7196             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1250+ 7196             >
1250+ 7196             >Dict_Ptr        defl    $
1250+ 7196             >
1250+ 7196             >//              ______________________________________________________________________
1250+ 7196             >//              Heap part
1250+ 7196             >
1250+ 7196             >
1250+ 7196             >                org     (Heap_Ptr & $1FFF) + $E000
1250+ E85D             >
1250+ E85D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1250+ E85D             >Latest_Definition defl  Heap_Ptr
1250+ E85D             >
1250+ E85D             >                // dummy db directives used to calculate length of namec
1250+ E85D 28 53 47 4E >                db      "(SGN)"
1250+ E861 29          >
1250+ E862             >len_NFA         defl    $ - temp_NFA
1250+ E862             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1250+ E85D             >
1250+ E85D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1250+ E85E 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1250+ E862 29          >
1250+ E863             >                org     $-1                 // alter last byte of Name just above to set
1250+ E862 A9          >                db      {b $} | END_BIT     // msb as name end
1250+ E863             >
1250+ E863 56 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1250+ E865             >Prev_Ptr        defl    Heap_Ptr
1250+ E865             >
1250+ E865             >mirror_Ptr      defl    $
1250+ E865             >
1250+ E865 98 71       >                dw      Dict_Ptr + 2        // xt
1250+ E867             >Heap_Ptr        defl    $ - $E000           // save current HP
1250+ E867             >
1250+ E867             >Current_HP      defl  $ - $E000             // used to set HP once!
1250+ E867             >
1250+ E867             >//              ______________________________________________________________________
1250+ E867             >//              Dictionary part
1250+ E867             >
1250+ E867             >                org     Dict_Ptr
1250+ 7196             >
1250+ 7196 65 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1250+ 7198             >
1250+ 7198             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1250+ 7198 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1250+ 719B             >
1250+ 719B             >
1250+ 719B             >                endif           ; ok        // for other definitions it "points" the correct handler
1250+ 719B             >                // Use of "; ok" to suppress "warning[fwdref]"
1250+ 719B             >
1250+ 719B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1251+ 719B 25 69 B8 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1251+ 719F AB 69
1252+ 71A1 25 69 A3 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1252+ 71A5 2D 00 FE 6B
1253+ 71A9                                                              // if
1254+ 71A9 F5 63                        dw      ZBRANCH
1255+ 71AB 12 00                        dw      CSgn_Else_0 - $
1256+ 71AD 0A 69                        dw          DROP                //      drop
1257+ 71AF B8 68                        dw          ONE_PLUS            //      1+
1258+ 71B1 95 6A 65 6B                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1258+ 71B5 7E 69
1259+ 71B7 95 6A                        dw          ONE                 //      1
1260+ 71B9                                                              // else
1261+ 71B9 E8 63                        dw      BRANCH
1262+ 71BB 16 00                        dw      CSgn_Endif_0 - $
1263+ 71BD              CSgn_Else_0:
1264+ 71BD A3 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1264+ 71C1 FE 6B
1265+ 71C3                                                              //      if
1266+ 71C3 F5 63                        dw          ZBRANCH
1267+ 71C5 0A 00                        dw          CSgn_Endif_1 - $
1268+ 71C7 B8 68                        dw              ONE_PLUS        //          1+
1269+ 71C9 95 6A 65 6B                  dw              ONE, DPL        //          1 dpl
1270+ 71CD 7E 69                        dw              PLUSSTORE       //          +!
1271+ 71CF              CSgn_Endif_1                                    //      endif
1272+ 71CF 8E 6A                        dw          ZERO                //      0
1273+ 71D1              CSgn_Endif_0:                                   // endif
1274+ 71D1 4C 68                        dw      EXIT
1275+ 71D3
1276+ 71D3              //  ______________________________________________________________________
1277+ 71D3              //
1278+ 71D3              // (number)     d a -- d1 a1
1279+ 71D3              // using the current BASE parse characters stored in address a
1280+ 71D3              // accumulating a double precision integer d
1281+ 71D3              // the process stops at the first not-convertible character
1282+ 71D3              // A double-number is kept in CPU registers as HLDE.
1283+ 71D3              // On the stack a double number is treated as two single numbers
1284+ 71D3              // where HL is on the top of the stack and DE is the second from top,
1285+ 71D3              // so in the stack memory it appears as LHED.
1286+ 71D3              // Instead, in 2VARIABLE a double number is stored as EDLH.
1287+ 71D3                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1287+ 71D3             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1287+ 71D3             >
1287+ 71D3             >Dict_Ptr        defl    $
1287+ 71D3             >
1287+ 71D3             >//              ______________________________________________________________________
1287+ 71D3             >//              Heap part
1287+ 71D3             >
1287+ 71D3             >
1287+ 71D3             >                org     (Heap_Ptr & $1FFF) + $E000
1287+ E867             >
1287+ E867             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ E867             >Latest_Definition defl  Heap_Ptr
1287+ E867             >
1287+ E867             >                // dummy db directives used to calculate length of namec
1287+ E867 28 4E 55 4D >                db      "(NUMBER)"
1287+ E86B 42 45 52 29 >
1287+ E86F             >len_NFA         defl    $ - temp_NFA
1287+ E86F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ E867             >
1287+ E867 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ E868 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1287+ E86C 42 45 52 29 >
1287+ E870             >                org     $-1                 // alter last byte of Name just above to set
1287+ E86F A9          >                db      {b $} | END_BIT     // msb as name end
1287+ E870             >
1287+ E870 5D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1287+ E872             >Prev_Ptr        defl    Heap_Ptr
1287+ E872             >
1287+ E872             >mirror_Ptr      defl    $
1287+ E872             >
1287+ E872 D5 71       >                dw      Dict_Ptr + 2        // xt
1287+ E874             >Heap_Ptr        defl    $ - $E000           // save current HP
1287+ E874             >
1287+ E874             >Current_HP      defl  $ - $E000             // used to set HP once!
1287+ E874             >
1287+ E874             >//              ______________________________________________________________________
1287+ E874             >//              Dictionary part
1287+ E874             >
1287+ E874             >                org     Dict_Ptr
1287+ 71D3             >
1287+ 71D3 72 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1287+ 71D5             >
1287+ 71D5             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 71D5 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1287+ 71D8             >
1287+ 71D8             >
1287+ 71D8             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 71D8             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 71D8             >
1287+ 71D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 71D8                                                              // begin
1289+ 71D8              CNumber_Begin:
1290+ 71D8 B8 68                        dw          ONE_PLUS            //      1+
1291+ 71DA 25 69 56 68                  dw          DUP, TO_R           //      dup >r
1292+ 71DE AB 69                        dw          CFETCH              //      @
1293+ 71E0 5F 6B 96 69                  dw          BASE, FETCH         //      base @
1294+ 71E4 4D 64                        dw          DIGIT               //      digit
1295+ 71E6                                                              // while
1296+ 71E6 F5 63                        dw      ZBRANCH
1297+ 71E8 2C 00                        dw      CNumber_While_end - $
1298+ 71EA 1E 69                        dw          SWAP                //      swap
1299+ 71EC 5F 6B 96 69                  dw          BASE, FETCH         //      base @
1300+ 71F0 B1 67                        dw          UM_MUL              //      um*
1301+ 71F2 0A 69 2C 69                  dw          DROP, ROT           //      drop rot
1302+ 71F6 5F 6B 96 69                  dw          BASE, FETCH         //      base @
1303+ 71FA B1 67                        dw          UM_MUL              //      um*
1304+ 71FC A9 68                        dw          DPLUS               //      d+
1305+ 71FE 65 6B 96 69                  dw          DPL, FETCH          //      dpl @
1306+ 7202 B8 68                        dw          ONE_PLUS            //      1+
1307+ 7204                                                              //      if
1308+ 7204 F5 63                        dw          ZBRANCH
1309+ 7206 08 00                        dw          CNumber_Endif - $
1310+ 7208 95 6A 65 6B                  dw              ONE, DPL        //          1 dpl
1311+ 720C 7E 69                        dw              PLUSSTORE       //          +!
1312+ 720E              CNumber_Endif:                                  //      endif
1313+ 720E 61 68                        dw             R_TO             //      r>  ( balance rp )
1314+ 7210 E8 63                        dw      BRANCH
1315+ 7212 C6 FF                        dw      CNumber_Begin - $
1316+ 7214              CNumber_While_end:                              // repeat
1317+ 7214 61 68                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1318+ 7216 4C 68                        dw      EXIT                    // ;
1319+ 7218
1320+ 7218              //  ______________________________________________________________________
1321+ 7218              //
1322+ 7218              // (prefix)
1323+ 7218                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1323+ 7218             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1323+ 7218             >
1323+ 7218             >Dict_Ptr        defl    $
1323+ 7218             >
1323+ 7218             >//              ______________________________________________________________________
1323+ 7218             >//              Heap part
1323+ 7218             >
1323+ 7218             >
1323+ 7218             >                org     (Heap_Ptr & $1FFF) + $E000
1323+ E874             >
1323+ E874             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1323+ E874             >Latest_Definition defl  Heap_Ptr
1323+ E874             >
1323+ E874             >                // dummy db directives used to calculate length of namec
1323+ E874 28 50 52 45 >                db      "(PREFIX)"
1323+ E878 46 49 58 29 >
1323+ E87C             >len_NFA         defl    $ - temp_NFA
1323+ E87C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1323+ E874             >
1323+ E874 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1323+ E875 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1323+ E879 46 49 58 29 >
1323+ E87D             >                org     $-1                 // alter last byte of Name just above to set
1323+ E87C A9          >                db      {b $} | END_BIT     // msb as name end
1323+ E87D             >
1323+ E87D 67 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1323+ E87F             >Prev_Ptr        defl    Heap_Ptr
1323+ E87F             >
1323+ E87F             >mirror_Ptr      defl    $
1323+ E87F             >
1323+ E87F 1A 72       >                dw      Dict_Ptr + 2        // xt
1323+ E881             >Heap_Ptr        defl    $ - $E000           // save current HP
1323+ E881             >
1323+ E881             >Current_HP      defl  $ - $E000             // used to set HP once!
1323+ E881             >
1323+ E881             >//              ______________________________________________________________________
1323+ E881             >//              Dictionary part
1323+ E881             >
1323+ E881             >                org     Dict_Ptr
1323+ 7218             >
1323+ 7218 7F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1323+ 721A             >
1323+ 721A             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1323+ 721A CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1323+ 721D             >
1323+ 721D             >
1323+ 721D             >                endif           ; ok        // for other definitions it "points" the correct handler
1323+ 721D             >                // Use of "; ok" to suppress "warning[fwdref]"
1323+ 721D             >
1323+ 721D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1324+ 721D 25 69 B8 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1324+ 7221 AB 69
1325+ 7223 25 69 56 68                  dw      DUP, TO_R               // dup >r
1326+ 7227 A3 63 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1326+ 722B FE 6B
1327+ 722D                                                              // if
1328+ 722D F5 63                        dw      ZBRANCH
1329+ 722F 0C 00                        dw      CPrefix_Endif_0 - $
1330+ 7231 B8 68                        dw          ONE_PLUS            //      1+
1331+ 7233 A3 63 10 00                  dw          LIT, 16
1332+ 7237 5F 6B A0 69                  dw          BASE, STORE         //      16 base !
1333+ 723B              CPrefix_Endif_0:                                // endif
1334+ 723B 61 68                        dw      R_TO                    // r>
1335+ 723D A3 63 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1335+ 7241 FE 6B
1336+ 7243                                                              // if
1337+ 7243 F5 63                        dw      ZBRANCH
1338+ 7245 0A 00                        dw      CPrefix_Endif_1 - $
1339+ 7247 B8 68                        dw          ONE_PLUS            //      1+
1340+ 7249 9C 6A                        dw          TWO
1341+ 724B 5F 6B A0 69                  dw          BASE, STORE         //      2 base !
1342+ 724F              CPrefix_Endif_1:                                // endif
1343+ 724F 4C 68                        dw      EXIT
1344+ 7251
1345+ 7251              //  ______________________________________________________________________
1346+ 7251
1347+ 7251                              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1347+ 7251             >
1347+ 7251             >Dict_Ptr        defl    $
1347+ 7251             >
1347+ 7251             >//              ______________________________________________________________________
1347+ 7251             >//              Heap part
1347+ 7251             >
1347+ 7251             >
1347+ 7251             >                org     (Heap_Ptr & $1FFF) + $E000
1347+ E881             >
1347+ E881             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1347+ E881             >Latest_Definition defl  Heap_Ptr
1347+ E881             >
1347+ E881             >                // dummy db directives used to calculate length of namec
1347+ E881 50 44 4F 4D >                db      "PDOM"
1347+ E885             >len_NFA         defl    $ - temp_NFA
1347+ E885             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1347+ E881             >
1347+ E881 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1347+ E882 50 44 4F 4D >                db      "PDOM"               // name string in 7-bit ascii, but
1347+ E886             >                org     $-1                 // alter last byte of Name just above to set
1347+ E885 CD          >                db      {b $} | END_BIT     // msb as name end
1347+ E886             >
1347+ E886 74 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1347+ E888             >Prev_Ptr        defl    Heap_Ptr
1347+ E888             >
1347+ E888             >mirror_Ptr      defl    $
1347+ E888             >
1347+ E888 53 72       >                dw      Dict_Ptr + 2        // xt
1347+ E88A             >Heap_Ptr        defl    $ - $E000           // save current HP
1347+ E88A             >
1347+ E88A             >Current_HP      defl  $ - $E000             // used to set HP once!
1347+ E88A             >
1347+ E88A             >//              ______________________________________________________________________
1347+ E88A             >//              Dictionary part
1347+ E88A             >
1347+ E88A             >                org     Dict_Ptr
1347+ 7251             >
1347+ 7251 88 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1347+ 7253             >
1347+ 7253             >PDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1347+ 7253 CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1347+ 7256             >
1347+ 7256             >
1347+ 7256             >                endif           ; ok        // for other definitions it "points" the correct handler
1347+ 7256             >                // Use of "; ok" to suppress "warning[fwdref]"
1347+ 7256             >
1347+ 7256             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1348+ 7256 2C 2F 2D 3A                  db ',/-:'
1349+ 725A
1350+ 725A                              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1350+ 725A             >
1350+ 725A             >Dict_Ptr        defl    $
1350+ 725A             >
1350+ 725A             >//              ______________________________________________________________________
1350+ 725A             >//              Heap part
1350+ 725A             >
1350+ 725A             >
1350+ 725A             >                org     (Heap_Ptr & $1FFF) + $E000
1350+ E88A             >
1350+ E88A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1350+ E88A             >Latest_Definition defl  Heap_Ptr
1350+ E88A             >
1350+ E88A             >                // dummy db directives used to calculate length of namec
1350+ E88A 50 43 44 4D >                db      "PCDM"
1350+ E88E             >len_NFA         defl    $ - temp_NFA
1350+ E88E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1350+ E88A             >
1350+ E88A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1350+ E88B 50 43 44 4D >                db      "PCDM"               // name string in 7-bit ascii, but
1350+ E88F             >                org     $-1                 // alter last byte of Name just above to set
1350+ E88E CD          >                db      {b $} | END_BIT     // msb as name end
1350+ E88F             >
1350+ E88F 81 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1350+ E891             >Prev_Ptr        defl    Heap_Ptr
1350+ E891             >
1350+ E891             >mirror_Ptr      defl    $
1350+ E891             >
1350+ E891 5C 72       >                dw      Dict_Ptr + 2        // xt
1350+ E893             >Heap_Ptr        defl    $ - $E000           // save current HP
1350+ E893             >
1350+ E893             >Current_HP      defl  $ - $E000             // used to set HP once!
1350+ E893             >
1350+ E893             >//              ______________________________________________________________________
1350+ E893             >//              Dictionary part
1350+ E893             >
1350+ E893             >                org     Dict_Ptr
1350+ 725A             >
1350+ 725A 91 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1350+ 725C             >
1350+ 725C             >PCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1350+ 725C CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1350+ 725F             >
1350+ 725F             >
1350+ 725F             >                endif           ; ok        // for other definitions it "points" the correct handler
1350+ 725F             >                // Use of "; ok" to suppress "warning[fwdref]"
1350+ 725F             >
1350+ 725F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1351+ 725F 2E 2E 2E 2E                  db '....'
1352+ 7263
1353+ 7263              //  ______________________________________________________________________
1354+ 7263              //
1355+ 7263              // number       a -- d
1356+ 7263                              Colon_Def NUMBER,  "NUMBER", is_normal
1356+ 7263             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1356+ 7263             >
1356+ 7263             >Dict_Ptr        defl    $
1356+ 7263             >
1356+ 7263             >//              ______________________________________________________________________
1356+ 7263             >//              Heap part
1356+ 7263             >
1356+ 7263             >
1356+ 7263             >                org     (Heap_Ptr & $1FFF) + $E000
1356+ E893             >
1356+ E893             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1356+ E893             >Latest_Definition defl  Heap_Ptr
1356+ E893             >
1356+ E893             >                // dummy db directives used to calculate length of namec
1356+ E893 4E 55 4D 42 >                db      "NUMBER"
1356+ E897 45 52       >
1356+ E899             >len_NFA         defl    $ - temp_NFA
1356+ E899             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1356+ E893             >
1356+ E893 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1356+ E894 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1356+ E898 45 52       >
1356+ E89A             >                org     $-1                 // alter last byte of Name just above to set
1356+ E899 D2          >                db      {b $} | END_BIT     // msb as name end
1356+ E89A             >
1356+ E89A 8A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1356+ E89C             >Prev_Ptr        defl    Heap_Ptr
1356+ E89C             >
1356+ E89C             >mirror_Ptr      defl    $
1356+ E89C             >
1356+ E89C 65 72       >                dw      Dict_Ptr + 2        // xt
1356+ E89E             >Heap_Ptr        defl    $ - $E000           // save current HP
1356+ E89E             >
1356+ E89E             >Current_HP      defl  $ - $E000             // used to set HP once!
1356+ E89E             >
1356+ E89E             >//              ______________________________________________________________________
1356+ E89E             >//              Dictionary part
1356+ E89E             >
1356+ E89E             >                org     Dict_Ptr
1356+ 7263             >
1356+ 7263 9C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1356+ 7265             >
1356+ 7265             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1356+ 7265 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1356+ 7268             >
1356+ 7268             >
1356+ 7268             >                endif           ; ok        // for other definitions it "points" the correct handler
1356+ 7268             >                // Use of "; ok" to suppress "warning[fwdref]"
1356+ 7268             >
1356+ 7268             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1357+ 7268 8E 6A 8E 6A                  dw      ZERO, ZERO              // 0 0
1358+ 726C 2C 69                        dw      ROT                     // rot
1359+ 726E 98 71 56 68                  dw      CSGN, TO_R              // (sgn) >r
1360+ 7272 5F 6B 96 69                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1360+ 7276 56 68
1361+ 7278 1A 72                        dw      CPREFIX                 // (prefix)   // ***
1362+ 727A AA 6A 65 6B                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1362+ 727E A0 69
1363+ 7280 D5 71                        dw      CNUMBER                 // (number)
1364+ 7282              Number_Begin:                                   // begin
1365+ 7282 25 69 AB 69                  dw        DUP, CFETCH             // dup c@
1366+ 7286 56 68                        dw        TO_R                    // >r
1367+ 7288 5C 72 53 72                  dw        PCDM, PDOM, LIT, 4      // pcdm pdom 4
1367+ 728C A3 63 04 00
1368+ 7290 61 68                        dw        R_TO                    // r>
1369+ 7292 5B 65                        dw        C_MAP                   // (map)
1370+ 7294 8E 6A 1E 69                  dw        ZERO, SWAP              // 0 swap
1371+ 7298 A3 63 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1371+ 729C FE 6B
1372+ 729E
1373+ 729E F5 63                        dw        ZBRANCH                 // if
1374+ 72A0 0A 00                        dw        Number_Endif_1 - $
1375+ 72A2 8E 6A 65 6B                  dw          ZERO, DPL, STORE        //      0 dpl !
1375+ 72A6 A0 69
1376+ 72A8 B8 68                        dw          ONE_PLUS                //      1+
1377+ 72AA              Number_Endif_1:                                   // endif
1378+ 72AA
1379+ 72AA F5 63                        dw      ZBRANCH                // while
1380+ 72AC 08 00                        dw      Number_While_end - $
1381+ 72AE D5 71                        dw        CNUMBER                 // (number)
1382+ 72B0 E8 63                        dw      BRANCH
1383+ 72B2 D0 FF                        dw      Number_Begin - $
1384+ 72B4              Number_While_end:                               // repeat
1385+ 72B4
1386+ 72B4 AB 69 B1 6A                  dw      CFETCH, BL              // c@ bl
1387+ 72B8 F2 6B 8E 6A                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1387+ 72BC EF 6D
1388+ 72BE 61 68 5F 6B                  dw      R_TO, BASE, STORE       // r> base !  // ***
1388+ 72C2 A0 69
1389+ 72C4 61 68                        dw      R_TO                    // r>
1390+ 72C6                                                              // if
1391+ 72C6 F5 63                        dw      ZBRANCH
1392+ 72C8 04 00                        dw      Number_Endif_2 - $
1393+ 72CA EE 68                        dw          DMINUS              //      dminus
1394+ 72CC              Number_Endif_2:                                 // endif
1395+ 72CC 4C 68                        dw      EXIT                    // ;
1396+ 72CE
1397+ 72CE              //  ______________________________________________________________________
1398+ 72CE              //
1399+ 72CE              // twofind      a -- d
1400+ 72CE                              Colon_Def TWOFIND,  "2FIND", is_normal
1400+ 72CE             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1400+ 72CE             >
1400+ 72CE             >Dict_Ptr        defl    $
1400+ 72CE             >
1400+ 72CE             >//              ______________________________________________________________________
1400+ 72CE             >//              Heap part
1400+ 72CE             >
1400+ 72CE             >
1400+ 72CE             >                org     (Heap_Ptr & $1FFF) + $E000
1400+ E89E             >
1400+ E89E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ E89E             >Latest_Definition defl  Heap_Ptr
1400+ E89E             >
1400+ E89E             >                // dummy db directives used to calculate length of namec
1400+ E89E 32 46 49 4E >                db      "2FIND"
1400+ E8A2 44          >
1400+ E8A3             >len_NFA         defl    $ - temp_NFA
1400+ E8A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ E89E             >
1400+ E89E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ E89F 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1400+ E8A3 44          >
1400+ E8A4             >                org     $-1                 // alter last byte of Name just above to set
1400+ E8A3 C4          >                db      {b $} | END_BIT     // msb as name end
1400+ E8A4             >
1400+ E8A4 93 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1400+ E8A6             >Prev_Ptr        defl    Heap_Ptr
1400+ E8A6             >
1400+ E8A6             >mirror_Ptr      defl    $
1400+ E8A6             >
1400+ E8A6 D0 72       >                dw      Dict_Ptr + 2        // xt
1400+ E8A8             >Heap_Ptr        defl    $ - $E000           // save current HP
1400+ E8A8             >
1400+ E8A8             >Current_HP      defl  $ - $E000             // used to set HP once!
1400+ E8A8             >
1400+ E8A8             >//              ______________________________________________________________________
1400+ E8A8             >//              Dictionary part
1400+ E8A8             >
1400+ E8A8             >                org     Dict_Ptr
1400+ 72CE             >
1400+ 72CE A6 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1400+ 72D0             >
1400+ 72D0             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 72D0 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1400+ 72D3             >
1400+ 72D3             >
1400+ 72D3             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 72D3             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 72D3             >
1400+ 72D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 72D3 56 68 6C 68                  dw      TO_R, R_OP              // >r r@
1402+ 72D7 4D 6B 96 69                  dw      CONTEXT, FETCH, FETCH   // context @ @
1402+ 72DB 96 69
1403+ 72DD BB 64                        dw      C_FIND                  // (find)
1404+ 72DF 5D 6C                        dw      QDUP                    // ?dup
1405+ 72E1 71 68                        dw      ZEQUAL                  // 0=
1406+ 72E3                                                              // if
1407+ 72E3 F5 63                        dw      ZBRANCH
1408+ 72E5 24 00                        dw      LFind_Endif - $
1409+ 72E7 6C 68                        dw          R_OP                //      r@
1410+ 72E9                              // dw          LATEST               //      latest
1411+ 72E9 53 6B 96 69                  dw          CURRENT, FETCH, FETCH   // context @ @
1411+ 72ED 96 69
1412+ 72EF BB 64                        dw          C_FIND              //      (find)
1413+ 72F1
1414+ 72F1 5D 6C                            dw      QDUP                    // ?dup
1415+ 72F3 71 68                            dw      ZEQUAL                  // 0=
1416+ 72F5                                                                  // if
1417+ 72F5 F5 63                            dw      ZBRANCH
1418+ 72F7 12 00                            dw      LFind_Endif2 - $
1419+ 72F9 6C 68                            dw          R_OP                //      r@
1420+ 72FB A3 63 4A 75                      dw          LIT, FORTH, TO_BODY
1420+ 72FF 6E 6D
1421+ 7301 CE 68 CE 68                      dw          CELL_PLUS, CELL_PLUS
1422+ 7305 96 69                            dw          FETCH
1423+ 7307 BB 64                            dw          C_FIND              //      (find)
1424+ 7309              LFind_Endif2:                                    // endif
1425+ 7309
1426+ 7309
1427+ 7309              LFind_Endif:                                    // endif
1428+ 7309 61 68 0A 69                  dw      R_TO, DROP              // r> drop
1429+ 730D 4C 68                        dw      EXIT                    // ;
1430+ 730F
1431+ 730F              //  ______________________________________________________________________
1432+ 730F              //
1433+ 730F              // -find        a -- d
1434+ 730F                              Colon_Def LFIND,  "-FIND", is_normal
1434+ 730F             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1434+ 730F             >
1434+ 730F             >Dict_Ptr        defl    $
1434+ 730F             >
1434+ 730F             >//              ______________________________________________________________________
1434+ 730F             >//              Heap part
1434+ 730F             >
1434+ 730F             >
1434+ 730F             >                org     (Heap_Ptr & $1FFF) + $E000
1434+ E8A8             >
1434+ E8A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1434+ E8A8             >Latest_Definition defl  Heap_Ptr
1434+ E8A8             >
1434+ E8A8             >                // dummy db directives used to calculate length of namec
1434+ E8A8 2D 46 49 4E >                db      "-FIND"
1434+ E8AC 44          >
1434+ E8AD             >len_NFA         defl    $ - temp_NFA
1434+ E8AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1434+ E8A8             >
1434+ E8A8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1434+ E8A9 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1434+ E8AD 44          >
1434+ E8AE             >                org     $-1                 // alter last byte of Name just above to set
1434+ E8AD C4          >                db      {b $} | END_BIT     // msb as name end
1434+ E8AE             >
1434+ E8AE 9E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1434+ E8B0             >Prev_Ptr        defl    Heap_Ptr
1434+ E8B0             >
1434+ E8B0             >mirror_Ptr      defl    $
1434+ E8B0             >
1434+ E8B0 11 73       >                dw      Dict_Ptr + 2        // xt
1434+ E8B2             >Heap_Ptr        defl    $ - $E000           // save current HP
1434+ E8B2             >
1434+ E8B2             >Current_HP      defl  $ - $E000             // used to set HP once!
1434+ E8B2             >
1434+ E8B2             >//              ______________________________________________________________________
1434+ E8B2             >//              Dictionary part
1434+ E8B2             >
1434+ E8B2             >                org     Dict_Ptr
1434+ 730F             >
1434+ 730F B0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1434+ 7311             >
1434+ 7311             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1434+ 7311 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1434+ 7314             >
1434+ 7314             >
1434+ 7314             >                endif           ; ok        // for other definitions it "points" the correct handler
1434+ 7314             >                // Use of "; ok" to suppress "warning[fwdref]"
1434+ 7314             >
1434+ 7314             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1435+ 7314 B1 6A D1 70                  dw      BL, WORD                // bl word
1436+ 7318 D0 72                        dw      TWOFIND                 // 2find
1437+ 731A 4C 68                        dw      EXIT                    // ;
1438+ 731C
1439+ 731C              //  ______________________________________________________________________
1440+ 731C              //
1441+ 731C              // (abort)      --
1442+ 731C                              Colon_Def CABORT,  "(ABORT)", is_normal
1442+ 731C             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1442+ 731C             >
1442+ 731C             >Dict_Ptr        defl    $
1442+ 731C             >
1442+ 731C             >//              ______________________________________________________________________
1442+ 731C             >//              Heap part
1442+ 731C             >
1442+ 731C             >
1442+ 731C             >                org     (Heap_Ptr & $1FFF) + $E000
1442+ E8B2             >
1442+ E8B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1442+ E8B2             >Latest_Definition defl  Heap_Ptr
1442+ E8B2             >
1442+ E8B2             >                // dummy db directives used to calculate length of namec
1442+ E8B2 28 41 42 4F >                db      "(ABORT)"
1442+ E8B6 52 54 29    >
1442+ E8B9             >len_NFA         defl    $ - temp_NFA
1442+ E8B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1442+ E8B2             >
1442+ E8B2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1442+ E8B3 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1442+ E8B7 52 54 29    >
1442+ E8BA             >                org     $-1                 // alter last byte of Name just above to set
1442+ E8B9 A9          >                db      {b $} | END_BIT     // msb as name end
1442+ E8BA             >
1442+ E8BA A8 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1442+ E8BC             >Prev_Ptr        defl    Heap_Ptr
1442+ E8BC             >
1442+ E8BC             >mirror_Ptr      defl    $
1442+ E8BC             >
1442+ E8BC 1E 73       >                dw      Dict_Ptr + 2        // xt
1442+ E8BE             >Heap_Ptr        defl    $ - $E000           // save current HP
1442+ E8BE             >
1442+ E8BE             >Current_HP      defl  $ - $E000             // used to set HP once!
1442+ E8BE             >
1442+ E8BE             >//              ______________________________________________________________________
1442+ E8BE             >//              Dictionary part
1442+ E8BE             >
1442+ E8BE             >                org     Dict_Ptr
1442+ 731C             >
1442+ 731C BC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1442+ 731E             >
1442+ 731E             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1442+ 731E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1442+ 7321             >
1442+ 7321             >
1442+ 7321             >                endif           ; ok        // for other definitions it "points" the correct handler
1442+ 7321             >                // Use of "; ok" to suppress "warning[fwdref]"
1442+ 7321             >
1442+ 7321             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1443+ 7321 B1 75                        dw      ABORT                   // abort
1444+ 7323 4C 68                        dw      EXIT                    // ;
1445+ 7325
1446+ 7325              //  ______________________________________________________________________
1447+ 7325              //
1448+ 7325              // error        n --
1449+ 7325              // raise an error
1450+ 7325              // if WARNING is 0, prints "MSG#n".
1451+ 7325              // if WARNING is 1, prints line n of screen 4.
1452+ 7325              // if WARNING is -1 does (ABORT) that normally does ABORT
1453+ 7325              // value can be negative or beyond block 4.
1454+ 7325                              Colon_Def ERROR,  "ERROR", is_normal
1454+ 7325             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1454+ 7325             >
1454+ 7325             >Dict_Ptr        defl    $
1454+ 7325             >
1454+ 7325             >//              ______________________________________________________________________
1454+ 7325             >//              Heap part
1454+ 7325             >
1454+ 7325             >
1454+ 7325             >                org     (Heap_Ptr & $1FFF) + $E000
1454+ E8BE             >
1454+ E8BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1454+ E8BE             >Latest_Definition defl  Heap_Ptr
1454+ E8BE             >
1454+ E8BE             >                // dummy db directives used to calculate length of namec
1454+ E8BE 45 52 52 4F >                db      "ERROR"
1454+ E8C2 52          >
1454+ E8C3             >len_NFA         defl    $ - temp_NFA
1454+ E8C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1454+ E8BE             >
1454+ E8BE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1454+ E8BF 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1454+ E8C3 52          >
1454+ E8C4             >                org     $-1                 // alter last byte of Name just above to set
1454+ E8C3 D2          >                db      {b $} | END_BIT     // msb as name end
1454+ E8C4             >
1454+ E8C4 B2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1454+ E8C6             >Prev_Ptr        defl    Heap_Ptr
1454+ E8C6             >
1454+ E8C6             >mirror_Ptr      defl    $
1454+ E8C6             >
1454+ E8C6 27 73       >                dw      Dict_Ptr + 2        // xt
1454+ E8C8             >Heap_Ptr        defl    $ - $E000           // save current HP
1454+ E8C8             >
1454+ E8C8             >Current_HP      defl  $ - $E000             // used to set HP once!
1454+ E8C8             >
1454+ E8C8             >//              ______________________________________________________________________
1454+ E8C8             >//              Dictionary part
1454+ E8C8             >
1454+ E8C8             >                org     Dict_Ptr
1454+ 7325             >
1454+ 7325 C6 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1454+ 7327             >
1454+ 7327             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1454+ 7327 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1454+ 732A             >
1454+ 732A             >
1454+ 732A             >                endif           ; ok        // for other definitions it "points" the correct handler
1454+ 732A             >                // Use of "; ok" to suppress "warning[fwdref]"
1454+ 732A             >
1454+ 732A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1455+ 732A FF 6A 96 69                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1455+ 732E 84 68
1456+ 7330                                                              // if
1457+ 7330 F5 63                        dw      ZBRANCH
1458+ 7332 04 00                        dw      Error_Endif_1 - $
1459+ 7334 1E 73                        dw          CABORT              //      (abort)
1460+ 7336              Error_Endif_1:                                  // endif
1461+ 7336 B3 6B 2B 6F                  dw      HERE, COUNT, TYPE       // here count type
1461+ 733A 7F 6F
1462+ 733C 1C 71                        dw      C_DOT_QUOTE             // .( ? )
1463+ 733E 02 3F 20                     db      2, "? "
1464+ 7341 A2 77                        dw      MESSAGE                 // message  ( forward )
1465+ 7343 E7 6A 96 69                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1465+ 7347 3C 68
1466+ 7349 2F 6B 96 69                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1466+ 734D 5D 6C
1467+ 734F                                                              // if
1468+ 734F F5 63                        dw      ZBRANCH
1469+ 7351 08 00                        dw      Error_Endif_2 - $
1470+ 7353 35 6B 96 69                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1470+ 7357 1E 69
1471+ 7359              Error_Endif_2:                                  // endif
1472+ 7359 75 75                        dw      QUIT                    // quit ( forward )
1473+ 735B 4C 68                        dw      EXIT                    // ;
1474+ 735D              //  ______________________________________________________________________
1475+ 735D              //
1476+ 735D              // id.          nfa --
1477+ 735D                              Colon_Def ID_DOT,  "ID.", is_normal
1477+ 735D             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1477+ 735D             >
1477+ 735D             >Dict_Ptr        defl    $
1477+ 735D             >
1477+ 735D             >//              ______________________________________________________________________
1477+ 735D             >//              Heap part
1477+ 735D             >
1477+ 735D             >
1477+ 735D             >                org     (Heap_Ptr & $1FFF) + $E000
1477+ E8C8             >
1477+ E8C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1477+ E8C8             >Latest_Definition defl  Heap_Ptr
1477+ E8C8             >
1477+ E8C8             >                // dummy db directives used to calculate length of namec
1477+ E8C8 49 44 2E    >                db      "ID."
1477+ E8CB             >len_NFA         defl    $ - temp_NFA
1477+ E8CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1477+ E8C8             >
1477+ E8C8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1477+ E8C9 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1477+ E8CC             >                org     $-1                 // alter last byte of Name just above to set
1477+ E8CB AE          >                db      {b $} | END_BIT     // msb as name end
1477+ E8CC             >
1477+ E8CC BE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1477+ E8CE             >Prev_Ptr        defl    Heap_Ptr
1477+ E8CE             >
1477+ E8CE             >mirror_Ptr      defl    $
1477+ E8CE             >
1477+ E8CE 5F 73       >                dw      Dict_Ptr + 2        // xt
1477+ E8D0             >Heap_Ptr        defl    $ - $E000           // save current HP
1477+ E8D0             >
1477+ E8D0             >Current_HP      defl  $ - $E000             // used to set HP once!
1477+ E8D0             >
1477+ E8D0             >//              ______________________________________________________________________
1477+ E8D0             >//              Dictionary part
1477+ E8D0             >
1477+ E8D0             >                org     Dict_Ptr
1477+ 735D             >
1477+ 735D CE 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1477+ 735F             >
1477+ 735F             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1477+ 735F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1477+ 7362             >
1477+ 7362             >
1477+ 7362             >                endif           ; ok        // for other definitions it "points" the correct handler
1477+ 7362             >                // Use of "; ok" to suppress "warning[fwdref]"
1477+ 7362             >
1477+ 7362             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1478+ 7362 13 6D                        dw      QTOHEAP
1479+ 7364 25 69 95 6A                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1479+ 7368 8F 6C
1480+ 736A B8 68                        dw      ONE_PLUS                // 1+
1481+ 736C 01 69 F2 6B                  dw      OVER, SUBTRACT          // over -
1482+ 7370 25 69 56 68                  dw      DUP, TO_R               // >r
1483+ 7374 C2 70 1E 69                  dw      PAD, SWAP               // pad swap
1484+ 7378 8D 67                        dw      CMOVE                   // cmove
1485+ 737A C2 70 B8 68                  dw      PAD, ONE_PLUS           // pad 1+
1486+ 737E 61 68 BF 68                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1487+ 7382 7F 6F 84 6C                  dw      TYPE, SPACE             // type
1488+ 7386 4C 68                        dw      EXIT                    // ;
1489+ 7388
1490+ 7388              //  ______________________________________________________________________
1491+ 7388              //
1492+ 7388              // code         -- cccc
1493+ 7388                              Colon_Def CODE,  "CODE", is_normal
1493+ 7388             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1493+ 7388             >
1493+ 7388             >Dict_Ptr        defl    $
1493+ 7388             >
1493+ 7388             >//              ______________________________________________________________________
1493+ 7388             >//              Heap part
1493+ 7388             >
1493+ 7388             >
1493+ 7388             >                org     (Heap_Ptr & $1FFF) + $E000
1493+ E8D0             >
1493+ E8D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1493+ E8D0             >Latest_Definition defl  Heap_Ptr
1493+ E8D0             >
1493+ E8D0             >                // dummy db directives used to calculate length of namec
1493+ E8D0 43 4F 44 45 >                db      "CODE"
1493+ E8D4             >len_NFA         defl    $ - temp_NFA
1493+ E8D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1493+ E8D0             >
1493+ E8D0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1493+ E8D1 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1493+ E8D5             >                org     $-1                 // alter last byte of Name just above to set
1493+ E8D4 C5          >                db      {b $} | END_BIT     // msb as name end
1493+ E8D5             >
1493+ E8D5 C8 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1493+ E8D7             >Prev_Ptr        defl    Heap_Ptr
1493+ E8D7             >
1493+ E8D7             >mirror_Ptr      defl    $
1493+ E8D7             >
1493+ E8D7 8A 73       >                dw      Dict_Ptr + 2        // xt
1493+ E8D9             >Heap_Ptr        defl    $ - $E000           // save current HP
1493+ E8D9             >
1493+ E8D9             >Current_HP      defl  $ - $E000             // used to set HP once!
1493+ E8D9             >
1493+ E8D9             >//              ______________________________________________________________________
1493+ E8D9             >//              Dictionary part
1493+ E8D9             >
1493+ E8D9             >                org     Dict_Ptr
1493+ 7388             >
1493+ 7388 D7 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1493+ 738A             >
1493+ 738A             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1493+ 738A CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1493+ 738D             >
1493+ 738D             >
1493+ 738D             >                endif           ; ok        // for other definitions it "points" the correct handler
1493+ 738D             >                // Use of "; ok" to suppress "warning[fwdref]"
1493+ 738D             >
1493+ 738D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1494+ 738D 11 73                        dw      LFIND                   // -find
1495+ 738F                                                              // if
1496+ 738F F5 63                        dw      ZBRANCH
1497+ 7391 10 00                        dw      Code_Endif - $
1498+ 7393 0A 69                        dw          DROP                //      drop
1499+ 7395 79 6D 5F 73                  dw          TO_NAME, ID_DOT     //      >name id.
1500+ 7399 A3 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1500+ 739D A2 77
1501+ 739F 84 6C                        dw          SPACE               //      space
1502+ 73A1              Code_Endif:                                     // endif
1503+ 73A1 B3 6B                        dw      HERE                    // here
1504+ 73A3                                                              // ( ---- here begins NFA ---- )
1505+ 73A3 25 69 AB 69                  dw      DUP, CFETCH             // dup c@
1506+ 73A7 F9 6A 96 69                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1506+ 73AB 37 6C
1507+ 73AD B8 68                        dw      ONE_PLUS                // 1+
1508+ 73AF 25 69 BE 6B                  dw      DUP, ALLOT              // dup allot
1509+ 73B3 CE 68 CE 68                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1510+ 73B7 56 68                        dw      TO_R                    // >r
1511+ 73B9 25 69                        dw      DUP                     // dup
1512+ 73BB A3 63                        dw      LIT
1513+ 73BD A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1514+ 73BF 8D 69                        dw      TOGGLE                  // toggle
1515+ 73C1 B3 6B BF 68                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1516+ 73C5 A3 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1516+ 73C9 8D 69
1517+ 73CB                                                              // ( ---- here is LFA ---- )
1518+ 73CB 53 6B 96 69                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1518+ 73CF 96 69
1519+ 73D1 C9 6B                        dw      COMMA
1520+ 73D3 25 69 CE 68                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1520+ 73D7 C9 6B
1521+ 73D9 24 6D                        dw      HP_FETCH                // hp@
1522+ 73DB 53 6B 96 69                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1522+ 73DF A0 69
1523+ 73E1 24 6D F5 6C                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1524+ 73E5 6C 68 8D 67                  dw      R_OP, CMOVE
1525+ 73E9 6C 68 E0 68                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1525+ 73ED BE 6B
1526+ 73EF 61 68 23 6B                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1526+ 73F3 7E 69
1527+ 73F5 24 6D D3 68                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1528+ 73F9 C9 6B                        dw      COMMA
1529+ 73FB 8E 6A 36 6D                  dw      ZERO, SKIP_HP_PAGE
1530+ 73FF                                                              // ( ---- here is LFA ---- )
1531+ 73FF 4C 68                        dw      EXIT                    // ;
1532+ 7401
1533+ 7401              //  ______________________________________________________________________
1534+ 7401              //
1535+ 7401              // create       -- cccc     ( compile time )
1536+ 7401              //              -- a        ( run time )
1537+ 7401                              Colon_Def CREATE,  "CREATE", is_normal
1537+ 7401             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1537+ 7401             >
1537+ 7401             >Dict_Ptr        defl    $
1537+ 7401             >
1537+ 7401             >//              ______________________________________________________________________
1537+ 7401             >//              Heap part
1537+ 7401             >
1537+ 7401             >
1537+ 7401             >                org     (Heap_Ptr & $1FFF) + $E000
1537+ E8D9             >
1537+ E8D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1537+ E8D9             >Latest_Definition defl  Heap_Ptr
1537+ E8D9             >
1537+ E8D9             >                // dummy db directives used to calculate length of namec
1537+ E8D9 43 52 45 41 >                db      "CREATE"
1537+ E8DD 54 45       >
1537+ E8DF             >len_NFA         defl    $ - temp_NFA
1537+ E8DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1537+ E8D9             >
1537+ E8D9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1537+ E8DA 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1537+ E8DE 54 45       >
1537+ E8E0             >                org     $-1                 // alter last byte of Name just above to set
1537+ E8DF C5          >                db      {b $} | END_BIT     // msb as name end
1537+ E8E0             >
1537+ E8E0 D0 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1537+ E8E2             >Prev_Ptr        defl    Heap_Ptr
1537+ E8E2             >
1537+ E8E2             >mirror_Ptr      defl    $
1537+ E8E2             >
1537+ E8E2 03 74       >                dw      Dict_Ptr + 2        // xt
1537+ E8E4             >Heap_Ptr        defl    $ - $E000           // save current HP
1537+ E8E4             >
1537+ E8E4             >Current_HP      defl  $ - $E000             // used to set HP once!
1537+ E8E4             >
1537+ E8E4             >//              ______________________________________________________________________
1537+ E8E4             >//              Dictionary part
1537+ E8E4             >
1537+ E8E4             >                org     Dict_Ptr
1537+ 7401             >
1537+ 7401 E2 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1537+ 7403             >
1537+ 7403             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1537+ 7403 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1537+ 7406             >
1537+ 7406             >
1537+ 7406             >                endif           ; ok        // for other definitions it "points" the correct handler
1537+ 7406             >                // Use of "; ok" to suppress "warning[fwdref]"
1537+ 7406             >
1537+ 7406             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1538+ 7406 8A 73 9B 6E                  dw      CODE, SMUDGE            // code smudge
1539+ 740A A3 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1539+ 740E D8 6B
1540+ 7410 A3 63 75 6A                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1540+ 7414 C9 6B
1541+ 7416 D7 6E                        dw      C_SEMICOLON_CODE
1542+ 7418                              // this routine is called from the call coded in CFA
1543+ 7418              Create_Ptr:
1544+ 7418
1545+ 7418
1546+ 7418
1547+ 7418                              next
1547+ 7418 DD E9       >                jp      (ix)
1548+ 741A
1549+ 741A              //  ______________________________________________________________________
1550+ 741A              //
1551+ 741A              // [compile]    -- cccc     ( compile time )
1552+ 741A                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1552+ 741A             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1552+ 741A             >
1552+ 741A             >Dict_Ptr        defl    $
1552+ 741A             >
1552+ 741A             >//              ______________________________________________________________________
1552+ 741A             >//              Heap part
1552+ 741A             >
1552+ 741A             >
1552+ 741A             >                org     (Heap_Ptr & $1FFF) + $E000
1552+ E8E4             >
1552+ E8E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1552+ E8E4             >Latest_Definition defl  Heap_Ptr
1552+ E8E4             >
1552+ E8E4             >                // dummy db directives used to calculate length of namec
1552+ E8E4 5B 43 4F 4D >                db      "[COMPILE]"
1552+ E8E8 50 49 4C 45 >
1552+ E8EC 5D          >
1552+ E8ED             >len_NFA         defl    $ - temp_NFA
1552+ E8ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1552+ E8E4             >
1552+ E8E4 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1552+ E8E5 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1552+ E8E9 50 49 4C 45 >
1552+ E8ED 5D          >
1552+ E8EE             >                org     $-1                 // alter last byte of Name just above to set
1552+ E8ED DD          >                db      {b $} | END_BIT     // msb as name end
1552+ E8EE             >
1552+ E8EE D9 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1552+ E8F0             >Prev_Ptr        defl    Heap_Ptr
1552+ E8F0             >
1552+ E8F0             >mirror_Ptr      defl    $
1552+ E8F0             >
1552+ E8F0 1C 74       >                dw      Dict_Ptr + 2        // xt
1552+ E8F2             >Heap_Ptr        defl    $ - $E000           // save current HP
1552+ E8F2             >
1552+ E8F2             >Current_HP      defl  $ - $E000             // used to set HP once!
1552+ E8F2             >
1552+ E8F2             >//              ______________________________________________________________________
1552+ E8F2             >//              Dictionary part
1552+ E8F2             >
1552+ E8F2             >                org     Dict_Ptr
1552+ 741A             >
1552+ 741A F0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1552+ 741C             >
1552+ 741C             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1552+ 741C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1552+ 741F             >
1552+ 741F             >
1552+ 741F             >                endif           ; ok        // for other definitions it "points" the correct handler
1552+ 741F             >                // Use of "; ok" to suppress "warning[fwdref]"
1552+ 741F             >
1552+ 741F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1553+ 741F 11 73                        dw      LFIND                   // -find      (  cfa  b  f  )
1554+ 7421 71 68                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1555+ 7423 8E 6A EF 6D                  dw      ZERO, QERROR            // 0 ?error
1556+ 7427 0A 69                        dw      DROP                    // drop       (  cfa  )
1557+ 7429 C9 6B                        dw      COMMA                   // ,
1558+ 742B 4C 68                        dw      EXIT                    // ; immediate
1559+ 742D
1560+ 742D              //  ______________________________________________________________________
1561+ 742D              //
1562+ 742D              // literal      n --      ( compile time )
1563+ 742D                              Colon_Def LITERAL,  "LITERAL", is_immediate
1563+ 742D             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1563+ 742D             >
1563+ 742D             >Dict_Ptr        defl    $
1563+ 742D             >
1563+ 742D             >//              ______________________________________________________________________
1563+ 742D             >//              Heap part
1563+ 742D             >
1563+ 742D             >
1563+ 742D             >                org     (Heap_Ptr & $1FFF) + $E000
1563+ E8F2             >
1563+ E8F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ E8F2             >Latest_Definition defl  Heap_Ptr
1563+ E8F2             >
1563+ E8F2             >                // dummy db directives used to calculate length of namec
1563+ E8F2 4C 49 54 45 >                db      "LITERAL"
1563+ E8F6 52 41 4C    >
1563+ E8F9             >len_NFA         defl    $ - temp_NFA
1563+ E8F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ E8F2             >
1563+ E8F2 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ E8F3 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1563+ E8F7 52 41 4C    >
1563+ E8FA             >                org     $-1                 // alter last byte of Name just above to set
1563+ E8F9 CC          >                db      {b $} | END_BIT     // msb as name end
1563+ E8FA             >
1563+ E8FA E4 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1563+ E8FC             >Prev_Ptr        defl    Heap_Ptr
1563+ E8FC             >
1563+ E8FC             >mirror_Ptr      defl    $
1563+ E8FC             >
1563+ E8FC 2F 74       >                dw      Dict_Ptr + 2        // xt
1563+ E8FE             >Heap_Ptr        defl    $ - $E000           // save current HP
1563+ E8FE             >
1563+ E8FE             >Current_HP      defl  $ - $E000             // used to set HP once!
1563+ E8FE             >
1563+ E8FE             >//              ______________________________________________________________________
1563+ E8FE             >//              Dictionary part
1563+ E8FE             >
1563+ E8FE             >                org     Dict_Ptr
1563+ 742D             >
1563+ 742D FC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1563+ 742F             >
1563+ 742F             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 742F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1563+ 7432             >
1563+ 7432             >
1563+ 7432             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 7432             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 7432             >
1563+ 7432             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 7432 59 6B 96 69                  dw      STATE, FETCH            // state @
1565+ 7436                                                              // if
1566+ 7436 F5 63                        dw      ZBRANCH
1567+ 7438 08 00                        dw      Literal_Endif - $
1568+ 743A 5F 6E A3 63                  dw          COMPILE, LIT        //      compile lit
1569+ 743E C9 6B                        dw          COMMA               //      ,
1570+ 7440              Literal_Endif:                                  // endif
1571+ 7440 4C 68                        dw      EXIT                    // ; immediate
1572+ 7442
1573+ 7442              //  ______________________________________________________________________
1574+ 7442              //
1575+ 7442              // dliteral     n --      ( compile time )
1576+ 7442                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1576+ 7442             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1576+ 7442             >
1576+ 7442             >Dict_Ptr        defl    $
1576+ 7442             >
1576+ 7442             >//              ______________________________________________________________________
1576+ 7442             >//              Heap part
1576+ 7442             >
1576+ 7442             >
1576+ 7442             >                org     (Heap_Ptr & $1FFF) + $E000
1576+ E8FE             >
1576+ E8FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1576+ E8FE             >Latest_Definition defl  Heap_Ptr
1576+ E8FE             >
1576+ E8FE             >                // dummy db directives used to calculate length of namec
1576+ E8FE 44 4C 49 54 >                db      "DLITERAL"
1576+ E902 45 52 41 4C >
1576+ E906             >len_NFA         defl    $ - temp_NFA
1576+ E906             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1576+ E8FE             >
1576+ E8FE C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1576+ E8FF 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1576+ E903 45 52 41 4C >
1576+ E907             >                org     $-1                 // alter last byte of Name just above to set
1576+ E906 CC          >                db      {b $} | END_BIT     // msb as name end
1576+ E907             >
1576+ E907 F2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1576+ E909             >Prev_Ptr        defl    Heap_Ptr
1576+ E909             >
1576+ E909             >mirror_Ptr      defl    $
1576+ E909             >
1576+ E909 44 74       >                dw      Dict_Ptr + 2        // xt
1576+ E90B             >Heap_Ptr        defl    $ - $E000           // save current HP
1576+ E90B             >
1576+ E90B             >Current_HP      defl  $ - $E000             // used to set HP once!
1576+ E90B             >
1576+ E90B             >//              ______________________________________________________________________
1576+ E90B             >//              Dictionary part
1576+ E90B             >
1576+ E90B             >                org     Dict_Ptr
1576+ 7442             >
1576+ 7442 09 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1576+ 7444             >
1576+ 7444             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1576+ 7444 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1576+ 7447             >
1576+ 7447             >
1576+ 7447             >                endif           ; ok        // for other definitions it "points" the correct handler
1576+ 7447             >                // Use of "; ok" to suppress "warning[fwdref]"
1576+ 7447             >
1576+ 7447             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1577+ 7447 59 6B 96 69                  dw      STATE, FETCH            // state @
1578+ 744B                                                              // if
1579+ 744B F5 63                        dw      ZBRANCH
1580+ 744D 08 00                        dw      DLiteral_Endif - $
1581+ 744F 1E 69                        dw          SWAP                //      swap
1582+ 7451 2F 74 2F 74                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1583+ 7455              DLiteral_Endif:                                 // endif
1584+ 7455 4C 68                        dw      EXIT                    // ; immediate
1585+ 7457
1586+ 7457              //  ______________________________________________________________________
1587+ 7457              //
1588+ 7457              // [char]       n --      ( compile time )
1589+ 7457              // inside colon definition, gets first character from next input word
1590+ 7457              // and compiles it as literal.
1591+ 7457                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1591+ 7457             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1591+ 7457             >
1591+ 7457             >Dict_Ptr        defl    $
1591+ 7457             >
1591+ 7457             >//              ______________________________________________________________________
1591+ 7457             >//              Heap part
1591+ 7457             >
1591+ 7457             >
1591+ 7457             >                org     (Heap_Ptr & $1FFF) + $E000
1591+ E90B             >
1591+ E90B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1591+ E90B             >Latest_Definition defl  Heap_Ptr
1591+ E90B             >
1591+ E90B             >                // dummy db directives used to calculate length of namec
1591+ E90B 5B 43 48 41 >                db      "[CHAR]"
1591+ E90F 52 5D       >
1591+ E911             >len_NFA         defl    $ - temp_NFA
1591+ E911             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1591+ E90B             >
1591+ E90B C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1591+ E90C 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1591+ E910 52 5D       >
1591+ E912             >                org     $-1                 // alter last byte of Name just above to set
1591+ E911 DD          >                db      {b $} | END_BIT     // msb as name end
1591+ E912             >
1591+ E912 FE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1591+ E914             >Prev_Ptr        defl    Heap_Ptr
1591+ E914             >
1591+ E914             >mirror_Ptr      defl    $
1591+ E914             >
1591+ E914 59 74       >                dw      Dict_Ptr + 2        // xt
1591+ E916             >Heap_Ptr        defl    $ - $E000           // save current HP
1591+ E916             >
1591+ E916             >Current_HP      defl  $ - $E000             // used to set HP once!
1591+ E916             >
1591+ E916             >//              ______________________________________________________________________
1591+ E916             >//              Dictionary part
1591+ E916             >
1591+ E916             >                org     Dict_Ptr
1591+ 7457             >
1591+ 7457 14 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1591+ 7459             >
1591+ 7459             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1591+ 7459 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1591+ 745C             >
1591+ 745C             >
1591+ 745C             >                endif           ; ok        // for other definitions it "points" the correct handler
1591+ 745C             >                // Use of "; ok" to suppress "warning[fwdref]"
1591+ 745C             >
1591+ 745C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1592+ 745C 33 71 2F 74                  dw      CHAR, LITERAL           // char [compile] literal
1593+ 7460 4C 68                        dw      EXIT                    // ; immediate
1594+ 7462
1595+ 7462              //  ______________________________________________________________________
1596+ 7462              //
1597+ 7462              // 0x00         n --      ( compile time )
1598+ 7462                              Colon_Def NUL_WORD,  $00, is_immediate
1598+ 7462             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1598+ 7462             >
1598+ 7462             >Dict_Ptr        defl    $
1598+ 7462             >
1598+ 7462             >//              ______________________________________________________________________
1598+ 7462             >//              Heap part
1598+ 7462             >
1598+ 7462             >
1598+ 7462             >                org     (Heap_Ptr & $1FFF) + $E000
1598+ E916             >
1598+ E916             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1598+ E916             >Latest_Definition defl  Heap_Ptr
1598+ E916             >
1598+ E916             >                // dummy db directives used to calculate length of namec
1598+ E916 00          >                db      $00
1598+ E917             >len_NFA         defl    $ - temp_NFA
1598+ E917             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1598+ E916             >
1598+ E916 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1598+ E917 00          >                db      $00               // name string in 7-bit ascii, but
1598+ E918             >                org     $-1                 // alter last byte of Name just above to set
1598+ E917 80          >                db      {b $} | END_BIT     // msb as name end
1598+ E918             >
1598+ E918 0B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1598+ E91A             >Prev_Ptr        defl    Heap_Ptr
1598+ E91A             >
1598+ E91A             >mirror_Ptr      defl    $
1598+ E91A             >
1598+ E91A 64 74       >                dw      Dict_Ptr + 2        // xt
1598+ E91C             >Heap_Ptr        defl    $ - $E000           // save current HP
1598+ E91C             >
1598+ E91C             >Current_HP      defl  $ - $E000             // used to set HP once!
1598+ E91C             >
1598+ E91C             >//              ______________________________________________________________________
1598+ E91C             >//              Dictionary part
1598+ E91C             >
1598+ E91C             >                org     Dict_Ptr
1598+ 7462             >
1598+ 7462 1A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1598+ 7464             >
1598+ 7464             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1598+ 7464 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1598+ 7467             >
1598+ 7467             >
1598+ 7467             >                endif           ; ok        // for other definitions it "points" the correct handler
1598+ 7467             >                // Use of "; ok" to suppress "warning[fwdref]"
1598+ 7467             >
1598+ 7467             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1599+ 7467 2F 6B 96 69                  dw      BLK, FETCH, ONE         // blk @ 1
1599+ 746B 95 6A
1600+ 746D 2C 6C                        dw      GREATER                 // > if
1601+ 746F                                                              // if
1602+ 746F F5 63                        dw      ZBRANCH
1603+ 7471 28 00                        dw      Nul_Else_1 - $
1604+ 7473 95 6A 2F 6B                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1604+ 7477 7E 69
1605+ 7479 8E 6A 35 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
1605+ 747D A0 69
1606+ 747F 2F 6B 96 69                  dw          BLK, FETCH          //      blk @
1607+ 7483 C6 6A                        dw          BSCR                //      b/scr
1608+ 7485 BF 68                        dw          ONE_SUBTRACT        //      1 -
1609+ 7487 0C 68                        dw          AND_OP              //      and  ( this is tricky )
1610+ 7489 71 68                        dw          ZEQUAL              //      0=
1611+ 748B                                                              //      if
1612+ 748B F5 63                        dw          ZBRANCH
1613+ 748D 08 00                        dw          Nul_Endif_2 - $
1614+ 748F 17 6E                        dw              QEXEC           //          ?exec
1615+ 7491 61 68 0A 69                  dw              R_TO, DROP      //          r> drop
1616+ 7495              Nul_Endif_2:                                    //      endif
1617+ 7495 E8 63                        dw      BRANCH
1618+ 7497 06 00                        dw      Nul_Endif_1 - $
1619+ 7499              Nul_Else_1:                                     // else
1620+ 7499 61 68 0A 69                  dw          R_TO, DROP          //      r> drop
1621+ 749D              Nul_Endif_1:                                    // endif
1622+ 749D 4C 68                        dw      EXIT                    // ;
1623+ 749F
1624+ 749F              //  ______________________________________________________________________
1625+ 749F              //
1626+ 749F              // ?stack       --
1627+ 749F              // Raise error #1 if stack is empty and you pop it
1628+ 749F              // Raise error #7 if stack is full.
1629+ 749F              // This means SP must always stay between HERE and FFFF
1630+ 749F              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1631+ 749F              // for Next 8K MMU paging this is $DOE8
1632+ 749F                              Colon_Def QSTACK, "?STACK", is_normal
1632+ 749F             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1632+ 749F             >
1632+ 749F             >Dict_Ptr        defl    $
1632+ 749F             >
1632+ 749F             >//              ______________________________________________________________________
1632+ 749F             >//              Heap part
1632+ 749F             >
1632+ 749F             >
1632+ 749F             >                org     (Heap_Ptr & $1FFF) + $E000
1632+ E91C             >
1632+ E91C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1632+ E91C             >Latest_Definition defl  Heap_Ptr
1632+ E91C             >
1632+ E91C             >                // dummy db directives used to calculate length of namec
1632+ E91C 3F 53 54 41 >                db      "?STACK"
1632+ E920 43 4B       >
1632+ E922             >len_NFA         defl    $ - temp_NFA
1632+ E922             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1632+ E91C             >
1632+ E91C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1632+ E91D 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1632+ E921 43 4B       >
1632+ E923             >                org     $-1                 // alter last byte of Name just above to set
1632+ E922 CB          >                db      {b $} | END_BIT     // msb as name end
1632+ E923             >
1632+ E923 16 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1632+ E925             >Prev_Ptr        defl    Heap_Ptr
1632+ E925             >
1632+ E925             >mirror_Ptr      defl    $
1632+ E925             >
1632+ E925 A1 74       >                dw      Dict_Ptr + 2        // xt
1632+ E927             >Heap_Ptr        defl    $ - $E000           // save current HP
1632+ E927             >
1632+ E927             >Current_HP      defl  $ - $E000             // used to set HP once!
1632+ E927             >
1632+ E927             >//              ______________________________________________________________________
1632+ E927             >//              Dictionary part
1632+ E927             >
1632+ E927             >                org     Dict_Ptr
1632+ 749F             >
1632+ 749F 25 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1632+ 74A1             >
1632+ 74A1             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1632+ 74A1 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1632+ 74A4             >
1632+ 74A4             >
1632+ 74A4             >                endif           ; ok        // for other definitions it "points" the correct handler
1632+ 74A4             >                // Use of "; ok" to suppress "warning[fwdref]"
1632+ 74A4             >
1632+ 74A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1633+ 74A4 33 68                        dw      SPFETCH                 // sp@
1634+ 74A6 E7 6A 96 69                  dw      S0, FETCH               // s0 @
1635+ 74AA 1E 69 09 6C                  dw      SWAP, ULESS             // swap u<
1636+ 74AE 95 6A EF 6D                  dw      ONE, QERROR             // 1 ?error
1637+ 74B2 B3 6B                        dw      HERE                    // here
1638+ 74B4 E7 6A 96 69                  dw      S0, FETCH, LESS         // s0 @ <
1638+ 74B8 17 6C
1639+ 74BA                                                              // if
1640+ 74BA F5 63                        dw      ZBRANCH
1641+ 74BC 14 00                        dw      QStack_Endif - $
1642+ 74BE 33 68                        dw          SPFETCH             //      sp@
1643+ 74C0 B3 6B A3 63                  dw          HERE, LIT, 128      //      here 128
1643+ 74C4 80 00
1644+ 74C6 9F 68 09 6C                  dw          PLUS, ULESS         //      plus u<
1645+ 74CA A3 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1645+ 74CE EF 6D
1646+ 74D0              QStack_Endif:                                   // endif
1647+ 74D0 4C 68                        dw      EXIT                    // ;
1648+ 74D2
1649+ 74D2
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
 122  74D2                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
   1+ 74D2              //  ______________________________________________________________________
   2+ 74D2              //
   3+ 74D2              //  L2.asm
   4+ 74D2              //
   5+ 74D2              //  Level-2 3dos
   6+ 74D2              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 74D2              //  ______________________________________________________________________
   8+ 74D2
   9+ 74D2
  10+ 74D2              //  ______________________________________________________________________
  11+ 74D2              //
  12+ 74D2              // interpret    --
  13+ 74D2              // This is the text interpreter.
  14+ 74D2              // It executes or compiles, depending on STATE, the text coming from
  15+ 74D2              // current input stream.
  16+ 74D2              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 74D2              // the word is interpreted as numeric and converted, using current BASE,
  18+ 74D2              // leaving on top of stack a single or double precision number, depending
  19+ 74D2              // on the presence of a decimal point.
  20+ 74D2              // If the number conversion fails, the terminal is notified with ? followed
  21+ 74D2              // by the offending word.
  22+ 74D2                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 74D2             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 74D2             >
  22+ 74D2             >Dict_Ptr        defl    $
  22+ 74D2             >
  22+ 74D2             >//              ______________________________________________________________________
  22+ 74D2             >//              Heap part
  22+ 74D2             >
  22+ 74D2             >
  22+ 74D2             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E927             >
  22+ E927             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E927             >Latest_Definition defl  Heap_Ptr
  22+ E927             >
  22+ E927             >                // dummy db directives used to calculate length of namec
  22+ E927 49 4E 54 45 >                db      "INTERPRET"
  22+ E92B 52 50 52 45 >
  22+ E92F 54          >
  22+ E930             >len_NFA         defl    $ - temp_NFA
  22+ E930             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E927             >
  22+ E927 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E928 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E92C 52 50 52 45 >
  22+ E930 54          >
  22+ E931             >                org     $-1                 // alter last byte of Name just above to set
  22+ E930 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E931             >
  22+ E931 1C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E933             >Prev_Ptr        defl    Heap_Ptr
  22+ E933             >
  22+ E933             >mirror_Ptr      defl    $
  22+ E933             >
  22+ E933 D4 74       >                dw      Dict_Ptr + 2        // xt
  22+ E935             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E935             >
  22+ E935             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E935             >
  22+ E935             >//              ______________________________________________________________________
  22+ E935             >//              Dictionary part
  22+ E935             >
  22+ E935             >                org     Dict_Ptr
  22+ 74D2             >
  22+ 74D2 33 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 74D4             >
  22+ 74D4             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 74D4 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 74D7             >
  22+ 74D7             >
  22+ 74D7             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 74D7             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 74D7             >
  22+ 74D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 74D7
  24+ 74D7              Interpret_Begin:                                        // begin
  25+ 74D7 11 73                        dw          LFIND                       //      -find
  26+ 74D9                                                                      //      if
  27+ 74D9 F5 63                        dw          ZBRANCH
  28+ 74DB 1A 00                        dw          Interpret_Else_1 - $
  29+ 74DD 59 6B 96 69                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 74E1 17 6C
  30+ 74E3                                                                      //          if
  31+ 74E3 F5 63                        dw              ZBRANCH
  32+ 74E5 08 00                        dw              Interpret_Else_2 - $
  33+ 74E7 74 6E                        dw                  COMPILE_XT          //              compile,
  34+ 74E9                                                                      //          else
  35+ 74E9 E8 63                        dw              BRANCH
  36+ 74EB 06 00                        dw              Interpret_Endif_2 - $
  37+ 74ED              Interpret_Else_2:
  38+ 74ED AE 63 55 6A                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 74F1              Interpret_Endif_2:                                      //          endif
  40+ 74F1                                                                      //      else
  41+ 74F1 E8 63                        dw          BRANCH
  42+ 74F3 1A 00                        dw          Interpret_Endif_1 - $
  43+ 74F5              Interpret_Else_1:
  44+ 74F5 B3 6B 65 72                  dw              HERE, NUMBER            //          here number
  45+ 74F9 65 6B 96 69                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 74FD B8 68
  46+ 74FF                                                                      //          if
  47+ 74FF F5 63                        dw              ZBRANCH
  48+ 7501 08 00                        dw              Interpret_Else_3 - $
  49+ 7503              //              dw                  NMODE, FETCH        //              nmode @
  50+ 7503              //                                                      //              if
  51+ 7503              //              dw                  ZBRANCH
  52+ 7503              //              dw                  Interpret_Endif_4 - $
  53+ 7503              //              dw                      ONE, ZERO       //                  1 0
  54+ 7503              //              dw                      TWO_DROP        //                  2drop
  55+ 7503              //Interpret_Endif_4:                                      //              endif
  56+ 7503 44 74                        dw                  DLITERAL            //              [compile] dliteral
  57+ 7505                                                                      //          else
  58+ 7505 E8 63                        dw              BRANCH
  59+ 7507 06 00                        dw              Interpret_Endif_3 - $
  60+ 7509              Interpret_Else_3:
  61+ 7509 0A 69                        dw                  DROP                //              drop
  62+ 750B 2F 74                        dw                  LITERAL             //              [compile]  literal
  63+ 750D              Interpret_Endif_3:                                      //          endif
  64+ 750D              Interpret_Endif_1:                                      //      endif
  65+ 750D A1 74                        dw          QSTACK                      //      ?stack
  66+ 750F B3 66                        dw          QTERMINAL                   //      ?terminal
  67+ 7511                                                                      //      if
  68+ 7511 F5 63                        dw          ZBRANCH
  69+ 7513 04 00                        dw          Interpret_Endif_5 - $
  70+ 7515 75 75                        dw              QUIT                    //          quit
  71+ 7517              Interpret_Endif_5:                                      //      endif
  72+ 7517 E8 63                        dw      BRANCH
  73+ 7519 BE FF                        dw      Interpret_Begin - $
  74+ 751B 4C 68                        dw      EXIT                            // ;
  75+ 751D
  76+ 751D              //  ______________________________________________________________________
  77+ 751D              //
  78+ 751D              // vocabulary   -- cccc     ( compile time )
  79+ 751D              // Defining word used in the form   VOCABULARY cccc
  80+ 751D              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 751D              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 751D              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 751D              // so new definitions can be inserted in that vocabulary.
  84+ 751D                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 751D             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 751D             >
  84+ 751D             >Dict_Ptr        defl    $
  84+ 751D             >
  84+ 751D             >//              ______________________________________________________________________
  84+ 751D             >//              Heap part
  84+ 751D             >
  84+ 751D             >
  84+ 751D             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E935             >
  84+ E935             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E935             >Latest_Definition defl  Heap_Ptr
  84+ E935             >
  84+ E935             >                // dummy db directives used to calculate length of namec
  84+ E935 56 4F 43 41 >                db      "VOCABULARY"
  84+ E939 42 55 4C 41 >
  84+ E93D 52 59       >
  84+ E93F             >len_NFA         defl    $ - temp_NFA
  84+ E93F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E935             >
  84+ E935 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E936 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E93A 42 55 4C 41 >
  84+ E93E 52 59       >
  84+ E940             >                org     $-1                 // alter last byte of Name just above to set
  84+ E93F D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E940             >
  84+ E940 27 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E942             >Prev_Ptr        defl    Heap_Ptr
  84+ E942             >
  84+ E942             >mirror_Ptr      defl    $
  84+ E942             >
  84+ E942 1F 75       >                dw      Dict_Ptr + 2        // xt
  84+ E944             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E944             >
  84+ E944             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E944             >
  84+ E944             >//              ______________________________________________________________________
  84+ E944             >//              Dictionary part
  84+ E944             >
  84+ E944             >                org     Dict_Ptr
  84+ 751D             >
  84+ 751D 42 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 751F             >
  84+ 751F             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 751F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7522             >
  84+ 7522             >
  84+ 7522             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7522             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7522             >
  84+ 7522             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7522
  86+ 7522 03 6F                        dw      CBUILDS
  87+ 7524
  88+ 7524                              // dummy word + link part
  89+ 7524 A3 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 7528 C9 6B
  90+ 752A 53 6B 96 69                  dw      CURRENT, FETCH          // current @
  91+ 752E 96 69                        dw      FETCH                   // @
  92+ 7530                          //  dw      CELL_MINUS              // cell-
  93+ 7530 C9 6B                        dw      COMMA                   // ,
  94+ 7532
  95+ 7532                              // voc-link part
  96+ 7532 B3 6B                        dw      HERE                    // here
  97+ 7534 11 6B 96 69                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 7538 C9 6B                        dw      COMMA                   // ,
  99+ 753A 11 6B A0 69                  dw      VOC_LINK, STORE         // voc-link !
 100+ 753E                              // DOES part
 101+ 753E 0E 6F                        dw      DOES_TO                 // does>
 102+ 7540              Vocabulary_Does:
 103+ 7540 CE 68                        dw      CELL_PLUS               // cell+
 104+ 7542 4D 6B A0 69                  dw      CONTEXT, STORE          // context !
 105+ 7546 4C 68                        dw      EXIT                    // ;
 106+ 7548
 107+ 7548              //  ______________________________________________________________________
 108+ 7548              //
 109+ 7548              // forth        --
 110+ 7548              // Name of the first vocabulary.
 111+ 7548              // It makes FORTH the CONTEXT vocabulary.
 112+ 7548              // Until new user vocabulary are defined, new colon-definitions becomes
 113+ 7548              // part of FORTH. It is immediate, so it will executed during the creation
 114+ 7548              // of a colon definition to be able to select the vocabulary.
 115+ 7548
 116+ 7548                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 116+ 7548             >
 116+ 7548             >Dict_Ptr        defl    $
 116+ 7548             >
 116+ 7548             >//              ______________________________________________________________________
 116+ 7548             >//              Heap part
 116+ 7548             >
 116+ 7548             >
 116+ 7548             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ E944             >
 116+ E944             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ E944             >Latest_Definition defl  Heap_Ptr
 116+ E944             >
 116+ E944             >                // dummy db directives used to calculate length of namec
 116+ E944 46 4F 52 54 >                db      "FORTH"
 116+ E948 48          >
 116+ E949             >len_NFA         defl    $ - temp_NFA
 116+ E949             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ E944             >
 116+ E944 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ E945 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 116+ E949 48          >
 116+ E94A             >                org     $-1                 // alter last byte of Name just above to set
 116+ E949 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ E94A             >
 116+ E94A 35 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ E94C             >Prev_Ptr        defl    Heap_Ptr
 116+ E94C             >
 116+ E94C             >mirror_Ptr      defl    $
 116+ E94C             >
 116+ E94C 4A 75       >                dw      Dict_Ptr + 2        // xt
 116+ E94E             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ E94E             >
 116+ E94E             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ E94E             >
 116+ E94E             >//              ______________________________________________________________________
 116+ E94E             >//              Dictionary part
 116+ E94E             >
 116+ E94E             >                org     Dict_Ptr
 116+ 7548             >
 116+ 7548 4C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 754A             >
 116+ 754A             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 754A CD 1B 6F    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 116+ 754D             >
 116+ 754D             >
 116+ 754D             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 754D             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 754D             >
 116+ 754D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 754D 40 75                        dw      Vocabulary_Does
 118+ 754F
 119+ 754F 81 A0                        db      $81, $A0
 120+ 7551              Forth_Latest_Ptr:
 121+ 7551 44 09                        dw      Latest_Definition
 122+ 7553              Voclink_Ptr:
 123+ 7553 00 00                        dw      0
 124+ 7555
 125+ 7555              // ____
 126+ 7555              // temp_VOC        defl    $                   // save this address
 127+ 7555              //              org     (Heap_Ptr & $1FFF) + $E000
 128+ 7555              //              db      $81, $A0
 129+ 7555              // Forth_Latest_Ptr_HEAP:
 130+ 7555              //                 dw      Latest_Definition
 131+ 7555              // Voclink_Ptr_HEAP:
 132+ 7555              //                 dw      0
 133+ 7555              // Heap_Ptr        defl    $ - $E000           // save current HP
 134+ 7555              //                 org     temp_VOC
 135+ 7555              // ____
 136+ 7555
 137+ 7555              // Any new vocabulary is structured as follow:
 138+ 7555              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 139+ 7555              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 140+ 7555              // PFA+4 always contains the LATEST word of this VOCABULARY.
 141+ 7555              //       at creations it points to the null-word of its parent vocabulary
 142+ 7555              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 143+ 7555              // PFA+6 is the pointer that builds up the vocabulary linked list.
 144+ 7555              //       FORTH has 0 here to signal the end of the list and user's variable
 145+ 7555              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 146+ 7555              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 147+ 7555              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 148+ 7555
 149+ 7555              //  ______________________________________________________________________
 150+ 7555              //
 151+ 7555              // definitions  --
 152+ 7555              // Used in the form  cccc DEFINITIONS
 153+ 7555              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 154+ 7555              // vocabulary cccc.
 155+ 7555                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 155+ 7555             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 155+ 7555             >
 155+ 7555             >Dict_Ptr        defl    $
 155+ 7555             >
 155+ 7555             >//              ______________________________________________________________________
 155+ 7555             >//              Heap part
 155+ 7555             >
 155+ 7555             >
 155+ 7555             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E94E             >
 155+ E94E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E94E             >Latest_Definition defl  Heap_Ptr
 155+ E94E             >
 155+ E94E             >                // dummy db directives used to calculate length of namec
 155+ E94E 44 45 46 49 >                db      "DEFINITIONS"
 155+ E952 4E 49 54 49 >
 155+ E956 4F 4E 53    >
 155+ E959             >len_NFA         defl    $ - temp_NFA
 155+ E959             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E94E             >
 155+ E94E 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E94F 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 155+ E953 4E 49 54 49 >
 155+ E957 4F 4E 53    >
 155+ E95A             >                org     $-1                 // alter last byte of Name just above to set
 155+ E959 D3          >                db      {b $} | END_BIT     // msb as name end
 155+ E95A             >
 155+ E95A 44 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E95C             >Prev_Ptr        defl    Heap_Ptr
 155+ E95C             >
 155+ E95C             >mirror_Ptr      defl    $
 155+ E95C             >
 155+ E95C 57 75       >                dw      Dict_Ptr + 2        // xt
 155+ E95E             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E95E             >
 155+ E95E             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E95E             >
 155+ E95E             >//              ______________________________________________________________________
 155+ E95E             >//              Dictionary part
 155+ E95E             >
 155+ E95E             >                org     Dict_Ptr
 155+ 7555             >
 155+ 7555 5C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 7557             >
 155+ 7557             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 7557 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 755A             >
 155+ 755A             >
 155+ 755A             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 755A             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 755A             >
 155+ 755A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 755A 4D 6B 96 69                  dw      CONTEXT, FETCH          // context @
 157+ 755E 53 6B A0 69                  dw      CURRENT, STORE          // current !
 158+ 7562 4C 68                        dw      EXIT                    // ;
 159+ 7564
 160+ 7564              //  ______________________________________________________________________
 161+ 7564              //
 162+ 7564              // (            -- cccc )
 163+ 7564              // the following text is interpreted as a comment until a closing )
 164+ 7564                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 164+ 7564             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 164+ 7564             >
 164+ 7564             >Dict_Ptr        defl    $
 164+ 7564             >
 164+ 7564             >//              ______________________________________________________________________
 164+ 7564             >//              Heap part
 164+ 7564             >
 164+ 7564             >
 164+ 7564             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E95E             >
 164+ E95E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E95E             >Latest_Definition defl  Heap_Ptr
 164+ E95E             >
 164+ E95E             >                // dummy db directives used to calculate length of namec
 164+ E95E 28          >                db      "("
 164+ E95F             >len_NFA         defl    $ - temp_NFA
 164+ E95F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E95E             >
 164+ E95E C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E95F 28          >                db      "("               // name string in 7-bit ascii, but
 164+ E960             >                org     $-1                 // alter last byte of Name just above to set
 164+ E95F A8          >                db      {b $} | END_BIT     // msb as name end
 164+ E960             >
 164+ E960 4E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E962             >Prev_Ptr        defl    Heap_Ptr
 164+ E962             >
 164+ E962             >mirror_Ptr      defl    $
 164+ E962             >
 164+ E962 66 75       >                dw      Dict_Ptr + 2        // xt
 164+ E964             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E964             >
 164+ E964             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E964             >
 164+ E964             >//              ______________________________________________________________________
 164+ E964             >//              Dictionary part
 164+ E964             >
 164+ E964             >                org     Dict_Ptr
 164+ 7564             >
 164+ 7564 62 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 7566             >
 164+ 7566             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 7566 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 164+ 7569             >
 164+ 7569             >
 164+ 7569             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 7569             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 7569             >
 164+ 7569             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 7569 A3 63 29 00                  dw      LIT, ")"                // [char] )
 166+ 756D D1 70 0A 69                  dw      WORD, DROP              // word drop
 167+ 7571 4C 68                        dw      EXIT                    // ;
 168+ 7573
 169+ 7573              //  ______________________________________________________________________
 170+ 7573              //
 171+ 7573              // quit         --
 172+ 7573              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 173+ 7573                              Colon_Def QUIT, "QUIT", is_normal
 173+ 7573             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 173+ 7573             >
 173+ 7573             >Dict_Ptr        defl    $
 173+ 7573             >
 173+ 7573             >//              ______________________________________________________________________
 173+ 7573             >//              Heap part
 173+ 7573             >
 173+ 7573             >
 173+ 7573             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E964             >
 173+ E964             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E964             >Latest_Definition defl  Heap_Ptr
 173+ E964             >
 173+ E964             >                // dummy db directives used to calculate length of namec
 173+ E964 51 55 49 54 >                db      "QUIT"
 173+ E968             >len_NFA         defl    $ - temp_NFA
 173+ E968             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E964             >
 173+ E964 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E965 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 173+ E969             >                org     $-1                 // alter last byte of Name just above to set
 173+ E968 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E969             >
 173+ E969 5E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E96B             >Prev_Ptr        defl    Heap_Ptr
 173+ E96B             >
 173+ E96B             >mirror_Ptr      defl    $
 173+ E96B             >
 173+ E96B 75 75       >                dw      Dict_Ptr + 2        // xt
 173+ E96D             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E96D             >
 173+ E96D             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E96D             >
 173+ E96D             >//              ______________________________________________________________________
 173+ E96D             >//              Dictionary part
 173+ E96D             >
 173+ E96D             >                org     Dict_Ptr
 173+ 7573             >
 173+ 7573 6B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 7575             >
 173+ 7575             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7575 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7578             >
 173+ 7578             >
 173+ 7578             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7578             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7578             >
 173+ 7578             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7578
 175+ 7578 9B 6B 96 69                  dw      SOURCE_ID, FETCH        // source-id @
 176+ 757C FF 66 0A 69                  dw      F_CLOSE, DROP           // f_close drop
 177+ 7580 8E 6A 9B 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 177+ 7584 A0 69
 178+ 7586 8E 6A 2F 6B                  dw      ZERO, BLK, STORE        // 0 blk !
 178+ 758A A0 69
 179+ 758C 7F 6E                        dw      SQUARED_OPEN            // [compile] [
 180+ 758E                                                              // begin
 181+ 758E              Quit_Begin:
 182+ 758E ED 6A 96 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 182+ 7592 47 68
 183+ 7594 B6 65                        dw      CR                      //      cr
 184+ 7596 6E 70                        dw      QUERY                   //      query
 185+ 7598              Next_Breakpoint_1:
 186+ 7598 D4 74                        dw      INTERPRET               //      interpret
 187+ 759A 59 6B 96 69                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 187+ 759E 71 68
 188+ 75A0                                                              //      if
 189+ 75A0 F5 63                        dw      ZBRANCH
 190+ 75A2 07 00                        dw      Quit_Endif - $
 191+ 75A4 1C 71                        dw          C_DOT_QUOTE
 192+ 75A6 02 6F 6B                     db          2, "ok"             //          .( ok)
 193+ 75A9              Quit_Endif:                                     //      else
 194+ 75A9                                                              // again
 195+ 75A9 E8 63                        dw      BRANCH
 196+ 75AB E3 FF                        dw      Quit_Begin - $
 197+ 75AD 4C 68                        dw      EXIT                    // ;
 198+ 75AF
 199+ 75AF              //  ______________________________________________________________________
 200+ 75AF              //
 201+ 75AF              // abort        --
 202+ 75AF                              Colon_Def ABORT, "ABORT", is_normal
 202+ 75AF             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 202+ 75AF             >
 202+ 75AF             >Dict_Ptr        defl    $
 202+ 75AF             >
 202+ 75AF             >//              ______________________________________________________________________
 202+ 75AF             >//              Heap part
 202+ 75AF             >
 202+ 75AF             >
 202+ 75AF             >                org     (Heap_Ptr & $1FFF) + $E000
 202+ E96D             >
 202+ E96D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 202+ E96D             >Latest_Definition defl  Heap_Ptr
 202+ E96D             >
 202+ E96D             >                // dummy db directives used to calculate length of namec
 202+ E96D 41 42 4F 52 >                db      "ABORT"
 202+ E971 54          >
 202+ E972             >len_NFA         defl    $ - temp_NFA
 202+ E972             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 202+ E96D             >
 202+ E96D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 202+ E96E 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 202+ E972 54          >
 202+ E973             >                org     $-1                 // alter last byte of Name just above to set
 202+ E972 D4          >                db      {b $} | END_BIT     // msb as name end
 202+ E973             >
 202+ E973 64 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 202+ E975             >Prev_Ptr        defl    Heap_Ptr
 202+ E975             >
 202+ E975             >mirror_Ptr      defl    $
 202+ E975             >
 202+ E975 B1 75       >                dw      Dict_Ptr + 2        // xt
 202+ E977             >Heap_Ptr        defl    $ - $E000           // save current HP
 202+ E977             >
 202+ E977             >Current_HP      defl  $ - $E000             // used to set HP once!
 202+ E977             >
 202+ E977             >//              ______________________________________________________________________
 202+ E977             >//              Dictionary part
 202+ E977             >
 202+ E977             >                org     Dict_Ptr
 202+ 75AF             >
 202+ 75AF 75 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 202+ 75B1             >
 202+ 75B1             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 202+ 75B1 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 202+ 75B4             >
 202+ 75B4             >
 202+ 75B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 202+ 75B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 202+ 75B4             >
 202+ 75B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 203+ 75B4 E7 6A 96 69                  dw      S0, FETCH               // s0 @
 204+ 75B8 B1 6A                        dw      BL                      // bl
 205+ 75BA 01 69 A0 69                  dw      OVER, STORE             // over !
 206+ 75BE 3C 68                        dw      SPSTORE                 // sp!
 207+ 75C0 C8 6E                        dw      DECIMAL                 // decimal
 208+ 75C2 4A 75                        dw      FORTH                   // [compile] forth
 209+ 75C4 57 75                        dw      DEFINITIONS             // definitions
 210+ 75C6
 211+ 75C6 7F 6E                        dw      SQUARED_OPEN            // [compile] [
 212+ 75C8 ED 6A 96 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 212+ 75CC 47 68
 213+ 75CE
 214+ 75CE              Autoexec_Ptr:
 215+ 75CE F1 7F                        dw      AUTOEXEC                // autoexec, patched to noop
 216+ 75D0 75 75                        dw      QUIT                    // quit
 217+ 75D2 4C 68                        dw      EXIT                    // ;
 218+ 75D4
 219+ 75D4              //  ______________________________________________________________________
 220+ 75D4              //
 221+ 75D4              // warm         --
 222+ 75D4                              Colon_Def WARM, "WARM", is_normal
 222+ 75D4             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 222+ 75D4             >
 222+ 75D4             >Dict_Ptr        defl    $
 222+ 75D4             >
 222+ 75D4             >//              ______________________________________________________________________
 222+ 75D4             >//              Heap part
 222+ 75D4             >
 222+ 75D4             >
 222+ 75D4             >                org     (Heap_Ptr & $1FFF) + $E000
 222+ E977             >
 222+ E977             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ E977             >Latest_Definition defl  Heap_Ptr
 222+ E977             >
 222+ E977             >                // dummy db directives used to calculate length of namec
 222+ E977 57 41 52 4D >                db      "WARM"
 222+ E97B             >len_NFA         defl    $ - temp_NFA
 222+ E97B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ E977             >
 222+ E977 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ E978 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 222+ E97C             >                org     $-1                 // alter last byte of Name just above to set
 222+ E97B CD          >                db      {b $} | END_BIT     // msb as name end
 222+ E97C             >
 222+ E97C 6D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 222+ E97E             >Prev_Ptr        defl    Heap_Ptr
 222+ E97E             >
 222+ E97E             >mirror_Ptr      defl    $
 222+ E97E             >
 222+ E97E D6 75       >                dw      Dict_Ptr + 2        // xt
 222+ E980             >Heap_Ptr        defl    $ - $E000           // save current HP
 222+ E980             >
 222+ E980             >Current_HP      defl  $ - $E000             // used to set HP once!
 222+ E980             >
 222+ E980             >//              ______________________________________________________________________
 222+ E980             >//              Dictionary part
 222+ E980             >
 222+ E980             >                org     Dict_Ptr
 222+ 75D4             >
 222+ 75D4 7E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 222+ 75D6             >
 222+ 75D6             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 75D6 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 75D9             >
 222+ 75D9             >
 222+ 75D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 75D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 75D9             >
 222+ 75D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 75D9 9A 78                        dw      BLK_INIT                // blk-init
 224+ 75DB CD 7F                        dw      SPLASH                  // splash
 225+ 75DD A3 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 225+ 75E1 6D 6C
 226+ 75E3 B1 75                        dw      ABORT                   // abort
 227+ 75E5 4C 68                        dw      EXIT                    // exit
 228+ 75E7
 229+ 75E7              //  ______________________________________________________________________
 230+ 75E7              //
 231+ 75E7              // cold         --
 232+ 75E7                              Colon_Def COLD, "COLD", is_normal
 232+ 75E7             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 232+ 75E7             >
 232+ 75E7             >Dict_Ptr        defl    $
 232+ 75E7             >
 232+ 75E7             >//              ______________________________________________________________________
 232+ 75E7             >//              Heap part
 232+ 75E7             >
 232+ 75E7             >
 232+ 75E7             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E980             >
 232+ E980             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E980             >Latest_Definition defl  Heap_Ptr
 232+ E980             >
 232+ E980             >                // dummy db directives used to calculate length of namec
 232+ E980 43 4F 4C 44 >                db      "COLD"
 232+ E984             >len_NFA         defl    $ - temp_NFA
 232+ E984             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E980             >
 232+ E980 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E981 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 232+ E985             >                org     $-1                 // alter last byte of Name just above to set
 232+ E984 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E985             >
 232+ E985 77 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E987             >Prev_Ptr        defl    Heap_Ptr
 232+ E987             >
 232+ E987             >mirror_Ptr      defl    $
 232+ E987             >
 232+ E987 E9 75       >                dw      Dict_Ptr + 2        // xt
 232+ E989             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E989             >
 232+ E989             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E989             >
 232+ E989             >//              ______________________________________________________________________
 232+ E989             >//              Dictionary part
 232+ E989             >
 232+ E989             >                org     Dict_Ptr
 232+ 75E7             >
 232+ 75E7 87 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 75E9             >
 232+ 75E9             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 75E9 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 232+ 75EC             >
 232+ 75EC             >
 232+ 75EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 75EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 75EC             >
 232+ 75EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 75EC A3 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 234+ 75F0 A3 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 235+ 75F4 96 69                        dw      FETCH                   // @
 236+ 75F6 A3 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 236+ 75FA 9F 68
 237+ 75FC A3 63 16 00                  dw      LIT, 22                 // 22
 238+ 7600 8D 67                        dw      CMOVE
 239+ 7602 A3 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 240+ 7606 96 69                        dw      FETCH                   // @
 241+ 7608 A3 63 51 75                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 242+ 760C A0 69                        dw      STORE                   // !
 243+ 760E 8E 6A 29 6B                  dw      ZERO, NMODE, STORE      // 0 nmode !
 243+ 7612 A0 69
 244+ 7614 17 6B 96 69                  dw      FIRST, FETCH, DUP       // first @ dup
 244+ 7618 25 69
 245+ 761A 83 6B A0 69                  dw      USED, STORE             // used !
 246+ 761E 89 6B A0 69                  dw      PREV, STORE             // prev !
 247+ 7622 A3 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 247+ 7626 95 6B A0 69
 248+ 762A              //              dw      LIT, 8
 249+ 762A              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 250+ 762A 31 79                        dw      EMPTY_BUFFERS
 251+ 762C 8E 6A 2F 6B                  dw      ZERO, BLK, STORE
 251+ 7630 A0 69
 252+ 7632 8E 6A 9B 6B                  dw      ZERO, SOURCE_ID, STORE
 252+ 7636 A0 69
 253+ 7638
 254+ 7638 D6 75        Warm_Start:     dw      WARM
 255+ 763A E9 75        Cold_Start:     dw      COLD
 256+ 763C 4C 68                        dw      EXIT
 257+ 763E
 258+ 763E              //  ______________________________________________________________________
 259+ 763E              WarmRoutine:
 260+ 763E              ColdRoutine:
 261+ 763E DD 21 9A 63                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 262+ 7642
 263+ 7642 D9                           exx
 264+ 7643 E5                           push    hl                      // save Basic's return address
 265+ 7644 D9                           exx
 266+ 7645 ED 73 6E 63                  ld      (SP_Basic), sp
 267+ 7649
 268+ 7649                              // pre-set the four main 16-bit registers
 269+ 7649 ED 7B 78 63                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 270+ 764D 2A 7A 63                     ld      hl, (R0_origin)         // Return Stack Pointer
 271+ 7650                              // ld      de, (R0_origin)         // Return Stack Pointer
 272+ 7650                              ldrphl
 272+ 7650 22 96 63    >                ld      (RP_Pointer),hl
 273+ 7653 EB                           ex      de, hl
 274+ 7654 01 38 76                     ld      bc, Warm_Start          // Instruction Pointer
 275+ 7657
 276+ 7657 38 02                        jr      c, Warm_Skip
 277+ 7659 03                           inc     bc
 278+ 765A 03                           inc     bc
 279+ 765B              Warm_Skip:
 280+ 765B                              next
 280+ 765B DD E9       >                jp      (ix)
 281+ 765D
 282+ 765D              //  ______________________________________________________________________
 283+ 765D              //
 284+ 765D              // basic        --
 285+ 765D                              New_Def BASIC, "BASIC", is_code, is_normal
 285+ 765D             >
 285+ 765D             >Dict_Ptr        defl    $
 285+ 765D             >
 285+ 765D             >//              ______________________________________________________________________
 285+ 765D             >//              Heap part
 285+ 765D             >
 285+ 765D             >
 285+ 765D             >                org     (Heap_Ptr & $1FFF) + $E000
 285+ E989             >
 285+ E989             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 285+ E989             >Latest_Definition defl  Heap_Ptr
 285+ E989             >
 285+ E989             >                // dummy db directives used to calculate length of namec
 285+ E989 42 41 53 49 >                db      "BASIC"
 285+ E98D 43          >
 285+ E98E             >len_NFA         defl    $ - temp_NFA
 285+ E98E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 285+ E989             >
 285+ E989 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 285+ E98A 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 285+ E98E 43          >
 285+ E98F             >                org     $-1                 // alter last byte of Name just above to set
 285+ E98E C3          >                db      {b $} | END_BIT     // msb as name end
 285+ E98F             >
 285+ E98F 80 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 285+ E991             >Prev_Ptr        defl    Heap_Ptr
 285+ E991             >
 285+ E991             >mirror_Ptr      defl    $
 285+ E991             >
 285+ E991 5F 76       >                dw      Dict_Ptr + 2        // xt
 285+ E993             >Heap_Ptr        defl    $ - $E000           // save current HP
 285+ E993             >
 285+ E993             >Current_HP      defl  $ - $E000             // used to set HP once!
 285+ E993             >
 285+ E993             >//              ______________________________________________________________________
 285+ E993             >//              Dictionary part
 285+ E993             >
 285+ E993             >                org     Dict_Ptr
 285+ 765D             >
 285+ 765D 91 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 285+ 765F             >
 285+ 765F             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 285+ 765F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 285+ 765F ~           >
 285+ 765F ~           >
 285+ 765F             >                endif           ; ok        // for other definitions it "points" the correct handler
 285+ 765F             >                // Use of "; ok" to suppress "warning[fwdref]"
 285+ 765F             >
 285+ 765F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 286+ 765F C1                           pop     bc                      // return  TOS  value to Basic
 287+ 7660 21 00 00                     ld      hl, 0
 288+ 7663 39                           add     hl, sp
 289+ 7664 ED 7B 6E 63                  ld      sp, (SP_Basic)          // restore Basic's SP
 290+ 7668              //              nop
 291+ 7668 22 6E 63                     ld      (SP_Basic),hl           // but also save Forth's
 292+ 766B D9                           exx
 293+ 766C E1                           pop     hl                      // restore h'l'
 294+ 766D D9                           exx
 295+ 766E C9                           ret                             // to where USR Basic was left
 296+ 766F
 297+ 766F              //  ______________________________________________________________________
 298+ 766F              //
 299+ 766F              // +-           n1 n2 -- n3
 300+ 766F              // leaves n1 with the sign of n2 as n3.
 301+ 766F                              Colon_Def PLUS_MINUS, "+-", is_normal
 301+ 766F             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 301+ 766F             >
 301+ 766F             >Dict_Ptr        defl    $
 301+ 766F             >
 301+ 766F             >//              ______________________________________________________________________
 301+ 766F             >//              Heap part
 301+ 766F             >
 301+ 766F             >
 301+ 766F             >                org     (Heap_Ptr & $1FFF) + $E000
 301+ E993             >
 301+ E993             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ E993             >Latest_Definition defl  Heap_Ptr
 301+ E993             >
 301+ E993             >                // dummy db directives used to calculate length of namec
 301+ E993 2B 2D       >                db      "+-"
 301+ E995             >len_NFA         defl    $ - temp_NFA
 301+ E995             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ E993             >
 301+ E993 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ E994 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 301+ E996             >                org     $-1                 // alter last byte of Name just above to set
 301+ E995 AD          >                db      {b $} | END_BIT     // msb as name end
 301+ E996             >
 301+ E996 89 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 301+ E998             >Prev_Ptr        defl    Heap_Ptr
 301+ E998             >
 301+ E998             >mirror_Ptr      defl    $
 301+ E998             >
 301+ E998 71 76       >                dw      Dict_Ptr + 2        // xt
 301+ E99A             >Heap_Ptr        defl    $ - $E000           // save current HP
 301+ E99A             >
 301+ E99A             >Current_HP      defl  $ - $E000             // used to set HP once!
 301+ E99A             >
 301+ E99A             >//              ______________________________________________________________________
 301+ E99A             >//              Dictionary part
 301+ E99A             >
 301+ E99A             >                org     Dict_Ptr
 301+ 766F             >
 301+ 766F 98 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 301+ 7671             >
 301+ 7671             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 7671 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 7674             >
 301+ 7674             >
 301+ 7674             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 7674             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 7674             >
 301+ 7674             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 7674 84 68                        dw      ZLESS                   // 0<
 303+ 7676                                                              // if
 304+ 7676 F5 63                        dw      ZBRANCH
 305+ 7678 04 00                        dw      Plus_Minus_Endif - $
 306+ 767A E0 68                        dw          MINUS               //      minus
 307+ 767C              Plus_Minus_Endif:                               // endif
 308+ 767C 4C 68                        dw      EXIT                    // ;
 309+ 767E
 310+ 767E              //  ______________________________________________________________________
 311+ 767E              //
 312+ 767E              // d+-          d1 n -- d2
 313+ 767E              // leaves d1 with the sign of n as d2.
 314+ 767E                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 314+ 767E             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 314+ 767E             >
 314+ 767E             >Dict_Ptr        defl    $
 314+ 767E             >
 314+ 767E             >//              ______________________________________________________________________
 314+ 767E             >//              Heap part
 314+ 767E             >
 314+ 767E             >
 314+ 767E             >                org     (Heap_Ptr & $1FFF) + $E000
 314+ E99A             >
 314+ E99A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 314+ E99A             >Latest_Definition defl  Heap_Ptr
 314+ E99A             >
 314+ E99A             >                // dummy db directives used to calculate length of namec
 314+ E99A 44 2B 2D    >                db      "D+-"
 314+ E99D             >len_NFA         defl    $ - temp_NFA
 314+ E99D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 314+ E99A             >
 314+ E99A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 314+ E99B 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 314+ E99E             >                org     $-1                 // alter last byte of Name just above to set
 314+ E99D AD          >                db      {b $} | END_BIT     // msb as name end
 314+ E99E             >
 314+ E99E 93 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 314+ E9A0             >Prev_Ptr        defl    Heap_Ptr
 314+ E9A0             >
 314+ E9A0             >mirror_Ptr      defl    $
 314+ E9A0             >
 314+ E9A0 80 76       >                dw      Dict_Ptr + 2        // xt
 314+ E9A2             >Heap_Ptr        defl    $ - $E000           // save current HP
 314+ E9A2             >
 314+ E9A2             >Current_HP      defl  $ - $E000             // used to set HP once!
 314+ E9A2             >
 314+ E9A2             >//              ______________________________________________________________________
 314+ E9A2             >//              Dictionary part
 314+ E9A2             >
 314+ E9A2             >                org     Dict_Ptr
 314+ 767E             >
 314+ 767E A0 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 314+ 7680             >
 314+ 7680             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 314+ 7680 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 314+ 7683             >
 314+ 7683             >
 314+ 7683             >                endif           ; ok        // for other definitions it "points" the correct handler
 314+ 7683             >                // Use of "; ok" to suppress "warning[fwdref]"
 314+ 7683             >
 314+ 7683             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 315+ 7683 84 68                        dw      ZLESS                   // 0<
 316+ 7685                                                              // if
 317+ 7685 F5 63                        dw      ZBRANCH
 318+ 7687 04 00                        dw      DPlus_Minus_Endif - $
 319+ 7689 EE 68                        dw          DMINUS              //      dminus
 320+ 768B              DPlus_Minus_Endif:                              // endif
 321+ 768B 4C 68                        dw      EXIT                    // ;
 322+ 768D
 323+ 768D              //  ______________________________________________________________________
 324+ 768D              //
 325+ 768D              // abs          n1 -- n2
 326+ 768D                              Colon_Def ABS_OP, "ABS", is_normal
 326+ 768D             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 326+ 768D             >
 326+ 768D             >Dict_Ptr        defl    $
 326+ 768D             >
 326+ 768D             >//              ______________________________________________________________________
 326+ 768D             >//              Heap part
 326+ 768D             >
 326+ 768D             >
 326+ 768D             >                org     (Heap_Ptr & $1FFF) + $E000
 326+ E9A2             >
 326+ E9A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 326+ E9A2             >Latest_Definition defl  Heap_Ptr
 326+ E9A2             >
 326+ E9A2             >                // dummy db directives used to calculate length of namec
 326+ E9A2 41 42 53    >                db      "ABS"
 326+ E9A5             >len_NFA         defl    $ - temp_NFA
 326+ E9A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 326+ E9A2             >
 326+ E9A2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 326+ E9A3 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 326+ E9A6             >                org     $-1                 // alter last byte of Name just above to set
 326+ E9A5 D3          >                db      {b $} | END_BIT     // msb as name end
 326+ E9A6             >
 326+ E9A6 9A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 326+ E9A8             >Prev_Ptr        defl    Heap_Ptr
 326+ E9A8             >
 326+ E9A8             >mirror_Ptr      defl    $
 326+ E9A8             >
 326+ E9A8 8F 76       >                dw      Dict_Ptr + 2        // xt
 326+ E9AA             >Heap_Ptr        defl    $ - $E000           // save current HP
 326+ E9AA             >
 326+ E9AA             >Current_HP      defl  $ - $E000             // used to set HP once!
 326+ E9AA             >
 326+ E9AA             >//              ______________________________________________________________________
 326+ E9AA             >//              Dictionary part
 326+ E9AA             >
 326+ E9AA             >                org     Dict_Ptr
 326+ 768D             >
 326+ 768D A8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 326+ 768F             >
 326+ 768F             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 326+ 768F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 326+ 7692             >
 326+ 7692             >
 326+ 7692             >                endif           ; ok        // for other definitions it "points" the correct handler
 326+ 7692             >                // Use of "; ok" to suppress "warning[fwdref]"
 326+ 7692             >
 326+ 7692             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 327+ 7692 25 69                        dw      DUP                     // dup
 328+ 7694 71 76                        dw      PLUS_MINUS              // +-
 329+ 7696 4C 68                        dw      EXIT                    // ;
 330+ 7698
 331+ 7698              //  ______________________________________________________________________
 332+ 7698              //
 333+ 7698              // dabs         d1 -- d2
 334+ 7698                              Colon_Def DABS, "DABS", is_normal
 334+ 7698             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 334+ 7698             >
 334+ 7698             >Dict_Ptr        defl    $
 334+ 7698             >
 334+ 7698             >//              ______________________________________________________________________
 334+ 7698             >//              Heap part
 334+ 7698             >
 334+ 7698             >
 334+ 7698             >                org     (Heap_Ptr & $1FFF) + $E000
 334+ E9AA             >
 334+ E9AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ E9AA             >Latest_Definition defl  Heap_Ptr
 334+ E9AA             >
 334+ E9AA             >                // dummy db directives used to calculate length of namec
 334+ E9AA 44 41 42 53 >                db      "DABS"
 334+ E9AE             >len_NFA         defl    $ - temp_NFA
 334+ E9AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ E9AA             >
 334+ E9AA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ E9AB 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 334+ E9AF             >                org     $-1                 // alter last byte of Name just above to set
 334+ E9AE D3          >                db      {b $} | END_BIT     // msb as name end
 334+ E9AF             >
 334+ E9AF A2 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 334+ E9B1             >Prev_Ptr        defl    Heap_Ptr
 334+ E9B1             >
 334+ E9B1             >mirror_Ptr      defl    $
 334+ E9B1             >
 334+ E9B1 9A 76       >                dw      Dict_Ptr + 2        // xt
 334+ E9B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 334+ E9B3             >
 334+ E9B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 334+ E9B3             >
 334+ E9B3             >//              ______________________________________________________________________
 334+ E9B3             >//              Dictionary part
 334+ E9B3             >
 334+ E9B3             >                org     Dict_Ptr
 334+ 7698             >
 334+ 7698 B1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 334+ 769A             >
 334+ 769A             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 769A CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 334+ 769D             >
 334+ 769D             >
 334+ 769D             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 769D             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 769D             >
 334+ 769D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 769D 25 69                        dw      DUP                     // dup
 336+ 769F 80 76                        dw      DPLUS_MINUS             // d+-
 337+ 76A1 4C 68                        dw      EXIT                    // ;
 338+ 76A3
 339+ 76A3              //  ______________________________________________________________________
 340+ 76A3              //
 341+ 76A3              // m*           n1 n2 -- d
 342+ 76A3              // multiply two integer giving a double
 343+ 76A3                              Colon_Def MMUL, "M*", is_normal
 343+ 76A3             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 343+ 76A3             >
 343+ 76A3             >Dict_Ptr        defl    $
 343+ 76A3             >
 343+ 76A3             >//              ______________________________________________________________________
 343+ 76A3             >//              Heap part
 343+ 76A3             >
 343+ 76A3             >
 343+ 76A3             >                org     (Heap_Ptr & $1FFF) + $E000
 343+ E9B3             >
 343+ E9B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 343+ E9B3             >Latest_Definition defl  Heap_Ptr
 343+ E9B3             >
 343+ E9B3             >                // dummy db directives used to calculate length of namec
 343+ E9B3 4D 2A       >                db      "M*"
 343+ E9B5             >len_NFA         defl    $ - temp_NFA
 343+ E9B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 343+ E9B3             >
 343+ E9B3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 343+ E9B4 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 343+ E9B6             >                org     $-1                 // alter last byte of Name just above to set
 343+ E9B5 AA          >                db      {b $} | END_BIT     // msb as name end
 343+ E9B6             >
 343+ E9B6 AA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 343+ E9B8             >Prev_Ptr        defl    Heap_Ptr
 343+ E9B8             >
 343+ E9B8             >mirror_Ptr      defl    $
 343+ E9B8             >
 343+ E9B8 A5 76       >                dw      Dict_Ptr + 2        // xt
 343+ E9BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 343+ E9BA             >
 343+ E9BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 343+ E9BA             >
 343+ E9BA             >//              ______________________________________________________________________
 343+ E9BA             >//              Dictionary part
 343+ E9BA             >
 343+ E9BA             >                org     Dict_Ptr
 343+ 76A3             >
 343+ 76A3 B8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 343+ 76A5             >
 343+ 76A5             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 343+ 76A5 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 343+ 76A8             >
 343+ 76A8             >
 343+ 76A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 343+ 76A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 343+ 76A8             >
 343+ 76A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 344+ 76A8 74 69 27 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 344+ 76AC 56 68
 345+ 76AE 8F 76 1E 69                  dw      ABS_OP, SWAP            // abs swap
 346+ 76B2 8F 76 B1 67                  dw      ABS_OP, UM_MUL          // abs um*
 347+ 76B6 61 68 80 76                  dw      R_TO, DPLUS_MINUS       // r> d+-
 348+ 76BA 4C 68                        dw      EXIT                    // ;
 349+ 76BC
 350+ 76BC              //  ______________________________________________________________________
 351+ 76BC              //
 352+ 76BC              // sm/rem       d n -- q r
 353+ 76BC              // Symmetric division: divides a double into n giving quotient q and remainder r
 354+ 76BC              // the remainder has the sign of d.
 355+ 76BC                              Colon_Def SMDIVM, "SM/REM", is_normal
 355+ 76BC             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 355+ 76BC             >
 355+ 76BC             >Dict_Ptr        defl    $
 355+ 76BC             >
 355+ 76BC             >//              ______________________________________________________________________
 355+ 76BC             >//              Heap part
 355+ 76BC             >
 355+ 76BC             >
 355+ 76BC             >                org     (Heap_Ptr & $1FFF) + $E000
 355+ E9BA             >
 355+ E9BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ E9BA             >Latest_Definition defl  Heap_Ptr
 355+ E9BA             >
 355+ E9BA             >                // dummy db directives used to calculate length of namec
 355+ E9BA 53 4D 2F 52 >                db      "SM/REM"
 355+ E9BE 45 4D       >
 355+ E9C0             >len_NFA         defl    $ - temp_NFA
 355+ E9C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ E9BA             >
 355+ E9BA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ E9BB 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 355+ E9BF 45 4D       >
 355+ E9C1             >                org     $-1                 // alter last byte of Name just above to set
 355+ E9C0 CD          >                db      {b $} | END_BIT     // msb as name end
 355+ E9C1             >
 355+ E9C1 B3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 355+ E9C3             >Prev_Ptr        defl    Heap_Ptr
 355+ E9C3             >
 355+ E9C3             >mirror_Ptr      defl    $
 355+ E9C3             >
 355+ E9C3 BE 76       >                dw      Dict_Ptr + 2        // xt
 355+ E9C5             >Heap_Ptr        defl    $ - $E000           // save current HP
 355+ E9C5             >
 355+ E9C5             >Current_HP      defl  $ - $E000             // used to set HP once!
 355+ E9C5             >
 355+ E9C5             >//              ______________________________________________________________________
 355+ E9C5             >//              Dictionary part
 355+ E9C5             >
 355+ E9C5             >                org     Dict_Ptr
 355+ 76BC             >
 355+ 76BC C3 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 355+ 76BE             >
 355+ 76BE             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 76BE CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 355+ 76C1             >
 355+ 76C1             >
 355+ 76C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 76C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 76C1             >
 355+ 76C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 76C1 01 69 56 68                  dw      OVER, TO_R, TO_R        // over >r >r
 356+ 76C5 56 68
 357+ 76C7 9A 76 6C 68                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 357+ 76CB 8F 76
 358+ 76CD D9 67                        dw      UMDIVMOD                // um/mod
 359+ 76CF 61 68                        dw      R_TO                    // r>
 360+ 76D1 6C 68 27 68                  dw      R_OP, XOR_OP            // r xor
 361+ 76D5 71 76 1E 69                  dw      PLUS_MINUS, SWAP        // +- swap
 362+ 76D9 61 68                        dw      R_TO                    // r>
 363+ 76DB 71 76 1E 69                  dw      PLUS_MINUS, SWAP        // +- swap
 364+ 76DF 4C 68                        dw      EXIT                    // ;
 365+ 76E1
 366+ 76E1              //  ______________________________________________________________________
 367+ 76E1              //
 368+ 76E1              // fm/mod       d n -- q r
 369+ 76E1              // Floored division: divides a double into n giving quotient q and remainder r
 370+ 76E1              // the remainder has the sign of d.
 371+ 76E1                              Colon_Def FMDIVM, "FM/MOD", is_normal
 371+ 76E1             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 371+ 76E1             >
 371+ 76E1             >Dict_Ptr        defl    $
 371+ 76E1             >
 371+ 76E1             >//              ______________________________________________________________________
 371+ 76E1             >//              Heap part
 371+ 76E1             >
 371+ 76E1             >
 371+ 76E1             >                org     (Heap_Ptr & $1FFF) + $E000
 371+ E9C5             >
 371+ E9C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ E9C5             >Latest_Definition defl  Heap_Ptr
 371+ E9C5             >
 371+ E9C5             >                // dummy db directives used to calculate length of namec
 371+ E9C5 46 4D 2F 4D >                db      "FM/MOD"
 371+ E9C9 4F 44       >
 371+ E9CB             >len_NFA         defl    $ - temp_NFA
 371+ E9CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ E9C5             >
 371+ E9C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ E9C6 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 371+ E9CA 4F 44       >
 371+ E9CC             >                org     $-1                 // alter last byte of Name just above to set
 371+ E9CB C4          >                db      {b $} | END_BIT     // msb as name end
 371+ E9CC             >
 371+ E9CC BA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 371+ E9CE             >Prev_Ptr        defl    Heap_Ptr
 371+ E9CE             >
 371+ E9CE             >mirror_Ptr      defl    $
 371+ E9CE             >
 371+ E9CE E3 76       >                dw      Dict_Ptr + 2        // xt
 371+ E9D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 371+ E9D0             >
 371+ E9D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 371+ E9D0             >
 371+ E9D0             >//              ______________________________________________________________________
 371+ E9D0             >//              Dictionary part
 371+ E9D0             >
 371+ E9D0             >                org     Dict_Ptr
 371+ 76E1             >
 371+ 76E1 CE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 371+ 76E3             >
 371+ 76E3             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 76E3 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 371+ 76E6             >
 371+ 76E6             >
 371+ 76E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 76E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 76E6             >
 371+ 76E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 76E6 25 69 56 68                  dw      DUP, TO_R               // dup >r
 373+ 76EA BE 76                        dw      SMDIVM
 374+ 76EC 01 69 25 69                  dw      OVER, DUP
 375+ 76F0 71 68 71 68                  dw      ZEQUAL, ZEQUAL
 376+ 76F4 1E 69 84 68                  dw      SWAP, ZLESS
 377+ 76F8 6C 68 84 68                  dw      R_OP, ZLESS
 378+ 76FC 27 68 0C 68                  dw      XOR_OP, AND_OP
 379+ 7700 F5 63                        dw      ZBRANCH
 380+ 7702 10 00                        dw      Fm_Mod_Else - $
 381+ 7704 BF 68                        dw          ONE_SUBTRACT
 382+ 7706 1E 69 61 68                  dw          SWAP, R_TO
 383+ 770A 9F 68 1E 69                  dw          PLUS, SWAP
 384+ 770E E8 63                        dw      BRANCH
 385+ 7710 06 00                        dw      Fm_Mod_Endif - $
 386+ 7712              Fm_Mod_Else:
 387+ 7712 61 68 0A 69                  dw          R_TO, DROP
 388+ 7716              Fm_Mod_Endif:
 389+ 7716 4C 68                        dw      EXIT
 390+ 7718              //              dw      TWO_DUP                 // 2dup
 391+ 7718              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 392+ 7718              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 393+ 7718              //              dw      UMDIVMOD                // um/mod
 394+ 7718              //              dw      SWAP                    // swap
 395+ 7718              //              dw      II, ZLESS               // i'
 396+ 7718              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 397+ 7718              //              dw      R_TO                    // r>
 398+ 7718              //              dw      PLUS_MINUS, SWAP        // +- swap
 399+ 7718              //              dw      R_OP                    // r@
 400+ 7718              //              dw      ZLESS                   // i'
 401+ 7718              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 402+ 7718              //              dw      R_TO                    // r>
 403+ 7718              //              dw      PLUS_MINUS              // +- swap
 404+ 7718              //              dw      EXIT                    // ;
 405+ 7718
 406+ 7718              //  ______________________________________________________________________
 407+ 7718              //
 408+ 7718              // m/mod        d n -- q r
 409+ 7718              // multiply two integer giving a double
 410+ 7718                              Colon_Def MDIVM, "M/MOD", is_normal
 410+ 7718             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 410+ 7718             >
 410+ 7718             >Dict_Ptr        defl    $
 410+ 7718             >
 410+ 7718             >//              ______________________________________________________________________
 410+ 7718             >//              Heap part
 410+ 7718             >
 410+ 7718             >
 410+ 7718             >                org     (Heap_Ptr & $1FFF) + $E000
 410+ E9D0             >
 410+ E9D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 410+ E9D0             >Latest_Definition defl  Heap_Ptr
 410+ E9D0             >
 410+ E9D0             >                // dummy db directives used to calculate length of namec
 410+ E9D0 4D 2F 4D 4F >                db      "M/MOD"
 410+ E9D4 44          >
 410+ E9D5             >len_NFA         defl    $ - temp_NFA
 410+ E9D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 410+ E9D0             >
 410+ E9D0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 410+ E9D1 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 410+ E9D5 44          >
 410+ E9D6             >                org     $-1                 // alter last byte of Name just above to set
 410+ E9D5 C4          >                db      {b $} | END_BIT     // msb as name end
 410+ E9D6             >
 410+ E9D6 C5 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 410+ E9D8             >Prev_Ptr        defl    Heap_Ptr
 410+ E9D8             >
 410+ E9D8             >mirror_Ptr      defl    $
 410+ E9D8             >
 410+ E9D8 1A 77       >                dw      Dict_Ptr + 2        // xt
 410+ E9DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 410+ E9DA             >
 410+ E9DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 410+ E9DA             >
 410+ E9DA             >//              ______________________________________________________________________
 410+ E9DA             >//              Dictionary part
 410+ E9DA             >
 410+ E9DA             >                org     Dict_Ptr
 410+ 7718             >
 410+ 7718 D8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 410+ 771A             >
 410+ 771A             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 410+ 771A CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 410+ 771D             >
 410+ 771D             >
 410+ 771D             >                endif           ; ok        // for other definitions it "points" the correct handler
 410+ 771D             >                // Use of "; ok" to suppress "warning[fwdref]"
 410+ 771D             >
 410+ 771D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 411+ 771D BE 76                        dw      SMDIVM
 412+ 771F 4C 68                        dw      EXIT                    // ;
 413+ 7721
 414+ 7721              //  ______________________________________________________________________
 415+ 7721              //
 416+ 7721              // m/           d n -- q
 417+ 7721              // multiply two integer giving a double
 418+ 7721                              Colon_Def MDIV, "M/", is_normal
 418+ 7721             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 418+ 7721             >
 418+ 7721             >Dict_Ptr        defl    $
 418+ 7721             >
 418+ 7721             >//              ______________________________________________________________________
 418+ 7721             >//              Heap part
 418+ 7721             >
 418+ 7721             >
 418+ 7721             >                org     (Heap_Ptr & $1FFF) + $E000
 418+ E9DA             >
 418+ E9DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ E9DA             >Latest_Definition defl  Heap_Ptr
 418+ E9DA             >
 418+ E9DA             >                // dummy db directives used to calculate length of namec
 418+ E9DA 4D 2F       >                db      "M/"
 418+ E9DC             >len_NFA         defl    $ - temp_NFA
 418+ E9DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ E9DA             >
 418+ E9DA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ E9DB 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 418+ E9DD             >                org     $-1                 // alter last byte of Name just above to set
 418+ E9DC AF          >                db      {b $} | END_BIT     // msb as name end
 418+ E9DD             >
 418+ E9DD D0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 418+ E9DF             >Prev_Ptr        defl    Heap_Ptr
 418+ E9DF             >
 418+ E9DF             >mirror_Ptr      defl    $
 418+ E9DF             >
 418+ E9DF 23 77       >                dw      Dict_Ptr + 2        // xt
 418+ E9E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 418+ E9E1             >
 418+ E9E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 418+ E9E1             >
 418+ E9E1             >//              ______________________________________________________________________
 418+ E9E1             >//              Dictionary part
 418+ E9E1             >
 418+ E9E1             >                org     Dict_Ptr
 418+ 7721             >
 418+ 7721 DF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 418+ 7723             >
 418+ 7723             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7723 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7726             >
 418+ 7726             >
 418+ 7726             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7726             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7726             >
 418+ 7726             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7726 1A 77 0F 69                  dw      MDIVM, NIP
 420+ 772A 4C 68                        dw      EXIT                    // ;
 421+ 772C
 422+ 772C              //  ______________________________________________________________________
 423+ 772C              //
 424+ 772C              // *            n1 n2 -- n3
 425+ 772C              // multiply two integer
 426+ 772C                              Colon_Def MUL, "*", is_normal
 426+ 772C             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 426+ 772C             >
 426+ 772C             >Dict_Ptr        defl    $
 426+ 772C             >
 426+ 772C             >//              ______________________________________________________________________
 426+ 772C             >//              Heap part
 426+ 772C             >
 426+ 772C             >
 426+ 772C             >                org     (Heap_Ptr & $1FFF) + $E000
 426+ E9E1             >
 426+ E9E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 426+ E9E1             >Latest_Definition defl  Heap_Ptr
 426+ E9E1             >
 426+ E9E1             >                // dummy db directives used to calculate length of namec
 426+ E9E1 2A          >                db      "*"
 426+ E9E2             >len_NFA         defl    $ - temp_NFA
 426+ E9E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 426+ E9E1             >
 426+ E9E1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 426+ E9E2 2A          >                db      "*"               // name string in 7-bit ascii, but
 426+ E9E3             >                org     $-1                 // alter last byte of Name just above to set
 426+ E9E2 AA          >                db      {b $} | END_BIT     // msb as name end
 426+ E9E3             >
 426+ E9E3 DA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 426+ E9E5             >Prev_Ptr        defl    Heap_Ptr
 426+ E9E5             >
 426+ E9E5             >mirror_Ptr      defl    $
 426+ E9E5             >
 426+ E9E5 2E 77       >                dw      Dict_Ptr + 2        // xt
 426+ E9E7             >Heap_Ptr        defl    $ - $E000           // save current HP
 426+ E9E7             >
 426+ E9E7             >Current_HP      defl  $ - $E000             // used to set HP once!
 426+ E9E7             >
 426+ E9E7             >//              ______________________________________________________________________
 426+ E9E7             >//              Dictionary part
 426+ E9E7             >
 426+ E9E7             >                org     Dict_Ptr
 426+ 772C             >
 426+ 772C E5 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 426+ 772E             >
 426+ 772E             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 426+ 772E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 426+ 7731             >
 426+ 7731             >
 426+ 7731             >                endif           ; ok        // for other definitions it "points" the correct handler
 426+ 7731             >                // Use of "; ok" to suppress "warning[fwdref]"
 426+ 7731             >
 426+ 7731             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 427+ 7731 A5 76 0A 69                  dw      MMUL, DROP              // m* drop
 428+ 7735 4C 68                        dw      EXIT                    // ;
 429+ 7737
 430+ 7737              //  ______________________________________________________________________
 431+ 7737              //
 432+ 7737              // /mod         n1 n2 -- n3 n4
 433+ 7737              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 434+ 7737              // The remainder has the sign of n1
 435+ 7737                              Colon_Def DIVMOD, "/MOD", is_normal
 435+ 7737             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 435+ 7737             >
 435+ 7737             >Dict_Ptr        defl    $
 435+ 7737             >
 435+ 7737             >//              ______________________________________________________________________
 435+ 7737             >//              Heap part
 435+ 7737             >
 435+ 7737             >
 435+ 7737             >                org     (Heap_Ptr & $1FFF) + $E000
 435+ E9E7             >
 435+ E9E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 435+ E9E7             >Latest_Definition defl  Heap_Ptr
 435+ E9E7             >
 435+ E9E7             >                // dummy db directives used to calculate length of namec
 435+ E9E7 2F 4D 4F 44 >                db      "/MOD"
 435+ E9EB             >len_NFA         defl    $ - temp_NFA
 435+ E9EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 435+ E9E7             >
 435+ E9E7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 435+ E9E8 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 435+ E9EC             >                org     $-1                 // alter last byte of Name just above to set
 435+ E9EB C4          >                db      {b $} | END_BIT     // msb as name end
 435+ E9EC             >
 435+ E9EC E1 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 435+ E9EE             >Prev_Ptr        defl    Heap_Ptr
 435+ E9EE             >
 435+ E9EE             >mirror_Ptr      defl    $
 435+ E9EE             >
 435+ E9EE 39 77       >                dw      Dict_Ptr + 2        // xt
 435+ E9F0             >Heap_Ptr        defl    $ - $E000           // save current HP
 435+ E9F0             >
 435+ E9F0             >Current_HP      defl  $ - $E000             // used to set HP once!
 435+ E9F0             >
 435+ E9F0             >//              ______________________________________________________________________
 435+ E9F0             >//              Dictionary part
 435+ E9F0             >
 435+ E9F0             >                org     Dict_Ptr
 435+ 7737             >
 435+ 7737 EE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 435+ 7739             >
 435+ 7739             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 435+ 7739 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 435+ 773C             >
 435+ 773C             >
 435+ 773C             >                endif           ; ok        // for other definitions it "points" the correct handler
 435+ 773C             >                // Use of "; ok" to suppress "warning[fwdref]"
 435+ 773C             >
 435+ 773C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 436+ 773C 56 68 E7 6B                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 436+ 7740 61 68
 437+ 7742 1A 77                        dw      MDIVM                   // m/mod
 438+ 7744 4C 68                        dw      EXIT                    // ;
 439+ 7746
 440+ 7746              //  ______________________________________________________________________
 441+ 7746              //
 442+ 7746              // /            n1 n2 -- n3
 443+ 7746              // division
 444+ 7746                              Colon_Def DIV, "/", is_normal
 444+ 7746             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 444+ 7746             >
 444+ 7746             >Dict_Ptr        defl    $
 444+ 7746             >
 444+ 7746             >//              ______________________________________________________________________
 444+ 7746             >//              Heap part
 444+ 7746             >
 444+ 7746             >
 444+ 7746             >                org     (Heap_Ptr & $1FFF) + $E000
 444+ E9F0             >
 444+ E9F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ E9F0             >Latest_Definition defl  Heap_Ptr
 444+ E9F0             >
 444+ E9F0             >                // dummy db directives used to calculate length of namec
 444+ E9F0 2F          >                db      "/"
 444+ E9F1             >len_NFA         defl    $ - temp_NFA
 444+ E9F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ E9F0             >
 444+ E9F0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ E9F1 2F          >                db      "/"               // name string in 7-bit ascii, but
 444+ E9F2             >                org     $-1                 // alter last byte of Name just above to set
 444+ E9F1 AF          >                db      {b $} | END_BIT     // msb as name end
 444+ E9F2             >
 444+ E9F2 E7 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 444+ E9F4             >Prev_Ptr        defl    Heap_Ptr
 444+ E9F4             >
 444+ E9F4             >mirror_Ptr      defl    $
 444+ E9F4             >
 444+ E9F4 48 77       >                dw      Dict_Ptr + 2        // xt
 444+ E9F6             >Heap_Ptr        defl    $ - $E000           // save current HP
 444+ E9F6             >
 444+ E9F6             >Current_HP      defl  $ - $E000             // used to set HP once!
 444+ E9F6             >
 444+ E9F6             >//              ______________________________________________________________________
 444+ E9F6             >//              Dictionary part
 444+ E9F6             >
 444+ E9F6             >                org     Dict_Ptr
 444+ 7746             >
 444+ 7746 F4 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 444+ 7748             >
 444+ 7748             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 7748 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 774B             >
 444+ 774B             >
 444+ 774B             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 774B             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 774B             >
 444+ 774B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 774B 39 77 0F 69                  dw      DIVMOD, NIP             // /mod nip
 446+ 774F 4C 68                        dw      EXIT                    // ;
 447+ 7751
 448+ 7751              //  ______________________________________________________________________
 449+ 7751              //
 450+ 7751              // mod          n1 n2 -- n3
 451+ 7751                              Colon_Def MOD, "MOD", is_normal
 451+ 7751             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 451+ 7751             >
 451+ 7751             >Dict_Ptr        defl    $
 451+ 7751             >
 451+ 7751             >//              ______________________________________________________________________
 451+ 7751             >//              Heap part
 451+ 7751             >
 451+ 7751             >
 451+ 7751             >                org     (Heap_Ptr & $1FFF) + $E000
 451+ E9F6             >
 451+ E9F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 451+ E9F6             >Latest_Definition defl  Heap_Ptr
 451+ E9F6             >
 451+ E9F6             >                // dummy db directives used to calculate length of namec
 451+ E9F6 4D 4F 44    >                db      "MOD"
 451+ E9F9             >len_NFA         defl    $ - temp_NFA
 451+ E9F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 451+ E9F6             >
 451+ E9F6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 451+ E9F7 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 451+ E9FA             >                org     $-1                 // alter last byte of Name just above to set
 451+ E9F9 C4          >                db      {b $} | END_BIT     // msb as name end
 451+ E9FA             >
 451+ E9FA F0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 451+ E9FC             >Prev_Ptr        defl    Heap_Ptr
 451+ E9FC             >
 451+ E9FC             >mirror_Ptr      defl    $
 451+ E9FC             >
 451+ E9FC 53 77       >                dw      Dict_Ptr + 2        // xt
 451+ E9FE             >Heap_Ptr        defl    $ - $E000           // save current HP
 451+ E9FE             >
 451+ E9FE             >Current_HP      defl  $ - $E000             // used to set HP once!
 451+ E9FE             >
 451+ E9FE             >//              ______________________________________________________________________
 451+ E9FE             >//              Dictionary part
 451+ E9FE             >
 451+ E9FE             >                org     Dict_Ptr
 451+ 7751             >
 451+ 7751 FC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 451+ 7753             >
 451+ 7753             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 451+ 7753 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 451+ 7756             >
 451+ 7756             >
 451+ 7756             >                endif           ; ok        // for other definitions it "points" the correct handler
 451+ 7756             >                // Use of "; ok" to suppress "warning[fwdref]"
 451+ 7756             >
 451+ 7756             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 452+ 7756 39 77 0A 69                  dw      DIVMOD, DROP            // /mod drop
 453+ 775A 4C 68                        dw      EXIT                    // ;
 454+ 775C
 455+ 775C              //  ______________________________________________________________________
 456+ 775C              //
 457+ 775C              // */mod        n1 n2 n3 -- n4 n5
 458+ 775C              // leaves the quotient n5 and the remainder n4 of the operation
 459+ 775C              // (n1 * n2) / n3. The intermediate passage through a double number
 460+ 775C              // avoids loss of precision
 461+ 775C                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 461+ 775C             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 461+ 775C             >
 461+ 775C             >Dict_Ptr        defl    $
 461+ 775C             >
 461+ 775C             >//              ______________________________________________________________________
 461+ 775C             >//              Heap part
 461+ 775C             >
 461+ 775C             >
 461+ 775C             >                org     (Heap_Ptr & $1FFF) + $E000
 461+ E9FE             >
 461+ E9FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ E9FE             >Latest_Definition defl  Heap_Ptr
 461+ E9FE             >
 461+ E9FE             >                // dummy db directives used to calculate length of namec
 461+ E9FE 2A 2F 4D 4F >                db      "*/MOD"
 461+ EA02 44          >
 461+ EA03             >len_NFA         defl    $ - temp_NFA
 461+ EA03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ E9FE             >
 461+ E9FE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ E9FF 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 461+ EA03 44          >
 461+ EA04             >                org     $-1                 // alter last byte of Name just above to set
 461+ EA03 C4          >                db      {b $} | END_BIT     // msb as name end
 461+ EA04             >
 461+ EA04 F6 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 461+ EA06             >Prev_Ptr        defl    Heap_Ptr
 461+ EA06             >
 461+ EA06             >mirror_Ptr      defl    $
 461+ EA06             >
 461+ EA06 5E 77       >                dw      Dict_Ptr + 2        // xt
 461+ EA08             >Heap_Ptr        defl    $ - $E000           // save current HP
 461+ EA08             >
 461+ EA08             >Current_HP      defl  $ - $E000             // used to set HP once!
 461+ EA08             >
 461+ EA08             >//              ______________________________________________________________________
 461+ EA08             >//              Dictionary part
 461+ EA08             >
 461+ EA08             >                org     Dict_Ptr
 461+ 775C             >
 461+ 775C 06 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 461+ 775E             >
 461+ 775E             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 775E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7761             >
 461+ 7761             >
 461+ 7761             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7761             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7761             >
 461+ 7761             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7761 56 68 A5 76                  dw      TO_R, MMUL              // >r  m*
 463+ 7765 61 68 1A 77                  dw      R_TO, MDIVM             // r>  m/mod
 464+ 7769 4C 68                        dw      EXIT                    // ;
 465+ 776B
 466+ 776B              //  ______________________________________________________________________
 467+ 776B              //
 468+ 776B              // */          n1 n2 n3 -- n4
 469+ 776B              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 470+ 776B                              Colon_Def MUL_DIV, "*/", is_normal
 470+ 776B             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 470+ 776B             >
 470+ 776B             >Dict_Ptr        defl    $
 470+ 776B             >
 470+ 776B             >//              ______________________________________________________________________
 470+ 776B             >//              Heap part
 470+ 776B             >
 470+ 776B             >
 470+ 776B             >                org     (Heap_Ptr & $1FFF) + $E000
 470+ EA08             >
 470+ EA08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 470+ EA08             >Latest_Definition defl  Heap_Ptr
 470+ EA08             >
 470+ EA08             >                // dummy db directives used to calculate length of namec
 470+ EA08 2A 2F       >                db      "*/"
 470+ EA0A             >len_NFA         defl    $ - temp_NFA
 470+ EA0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 470+ EA08             >
 470+ EA08 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 470+ EA09 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 470+ EA0B             >                org     $-1                 // alter last byte of Name just above to set
 470+ EA0A AF          >                db      {b $} | END_BIT     // msb as name end
 470+ EA0B             >
 470+ EA0B FE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 470+ EA0D             >Prev_Ptr        defl    Heap_Ptr
 470+ EA0D             >
 470+ EA0D             >mirror_Ptr      defl    $
 470+ EA0D             >
 470+ EA0D 6D 77       >                dw      Dict_Ptr + 2        // xt
 470+ EA0F             >Heap_Ptr        defl    $ - $E000           // save current HP
 470+ EA0F             >
 470+ EA0F             >Current_HP      defl  $ - $E000             // used to set HP once!
 470+ EA0F             >
 470+ EA0F             >//              ______________________________________________________________________
 470+ EA0F             >//              Dictionary part
 470+ EA0F             >
 470+ EA0F             >                org     Dict_Ptr
 470+ 776B             >
 470+ 776B 0D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 470+ 776D             >
 470+ 776D             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 470+ 776D CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 470+ 7770             >
 470+ 7770             >
 470+ 7770             >                endif           ; ok        // for other definitions it "points" the correct handler
 470+ 7770             >                // Use of "; ok" to suppress "warning[fwdref]"
 470+ 7770             >
 470+ 7770             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 471+ 7770 5E 77                        dw     MUL_DIV_MOD              // */mod
 472+ 7772 0F 69                        dw     NIP                      // nip
 473+ 7774 4C 68                        dw     EXIT                     // ;
 474+ 7776
 475+ 7776
 476+ 7776              //  ______________________________________________________________________
 477+ 7776              //
 478+ 7776              // m/mod        ud1 u2 -- u3 ud4
 479+ 7776              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 480+ 7776              // All terms are unsigned.
 481+ 7776              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 482+ 7776              //              dw      TO_R                    // >r           ( ud1 )
 483+ 7776              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 484+ 7776              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 485+ 7776              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 486+ 7776              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 487+ 7776              //              dw      EXIT                    // ;
 488+ 7776
 489+ 7776              //  ______________________________________________________________________
 490+ 7776              //
 491+ 7776              // (line)       n1 n2 -- a b
 492+ 7776              // sends the line n1 of block n2 to the disk buffer.
 493+ 7776              // it returns the address a and ca counter b = C/L meaning a whole line.
 494+ 7776                              Colon_Def CLINE, "(LINE)", is_normal
 494+ 7776             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 494+ 7776             >
 494+ 7776             >Dict_Ptr        defl    $
 494+ 7776             >
 494+ 7776             >//              ______________________________________________________________________
 494+ 7776             >//              Heap part
 494+ 7776             >
 494+ 7776             >
 494+ 7776             >                org     (Heap_Ptr & $1FFF) + $E000
 494+ EA0F             >
 494+ EA0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 494+ EA0F             >Latest_Definition defl  Heap_Ptr
 494+ EA0F             >
 494+ EA0F             >                // dummy db directives used to calculate length of namec
 494+ EA0F 28 4C 49 4E >                db      "(LINE)"
 494+ EA13 45 29       >
 494+ EA15             >len_NFA         defl    $ - temp_NFA
 494+ EA15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 494+ EA0F             >
 494+ EA0F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 494+ EA10 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 494+ EA14 45 29       >
 494+ EA16             >                org     $-1                 // alter last byte of Name just above to set
 494+ EA15 A9          >                db      {b $} | END_BIT     // msb as name end
 494+ EA16             >
 494+ EA16 08 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 494+ EA18             >Prev_Ptr        defl    Heap_Ptr
 494+ EA18             >
 494+ EA18             >mirror_Ptr      defl    $
 494+ EA18             >
 494+ EA18 78 77       >                dw      Dict_Ptr + 2        // xt
 494+ EA1A             >Heap_Ptr        defl    $ - $E000           // save current HP
 494+ EA1A             >
 494+ EA1A             >Current_HP      defl  $ - $E000             // used to set HP once!
 494+ EA1A             >
 494+ EA1A             >//              ______________________________________________________________________
 494+ EA1A             >//              Dictionary part
 494+ EA1A             >
 494+ EA1A             >                org     Dict_Ptr
 494+ 7776             >
 494+ 7776 18 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 494+ 7778             >
 494+ 7778             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 494+ 7778 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 494+ 777B             >
 494+ 777B             >
 494+ 777B             >                endif           ; ok        // for other definitions it "points" the correct handler
 494+ 777B             >                // Use of "; ok" to suppress "warning[fwdref]"
 494+ 777B             >
 494+ 777B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 495+ 777B 56 68                        dw      TO_R                    // >r
 496+ 777D B8 6A                        dw      CL                      // c/l
 497+ 777F BF 6A 5E 77                  dw      BBUF, MUL_DIV_MOD       // */mod
 498+ 7783 61 68                        dw      R_TO                    // r>
 499+ 7785 C6 6A 2E 77                  dw      BSCR, MUL, PLUS         // b/scr * +
 499+ 7789 9F 68
 500+ 778B 89 79                        dw      BLOCK                   // block   ( forward )
 501+ 778D 9F 68                        dw      PLUS                    // +
 502+ 778F B8 6A                        dw      CL                      // c/l
 503+ 7791 4C 68                        dw      EXIT                    // ;
 504+ 7793
 505+ 7793              //  ______________________________________________________________________
 506+ 7793              //
 507+ 7793              // .line        n1 n2 --
 508+ 7793              // Sends to output line  n1  of screen n2.
 509+ 7793                              Colon_Def DOT_LINE, ".LINE", is_normal
 509+ 7793             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 509+ 7793             >
 509+ 7793             >Dict_Ptr        defl    $
 509+ 7793             >
 509+ 7793             >//              ______________________________________________________________________
 509+ 7793             >//              Heap part
 509+ 7793             >
 509+ 7793             >
 509+ 7793             >                org     (Heap_Ptr & $1FFF) + $E000
 509+ EA1A             >
 509+ EA1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 509+ EA1A             >Latest_Definition defl  Heap_Ptr
 509+ EA1A             >
 509+ EA1A             >                // dummy db directives used to calculate length of namec
 509+ EA1A 2E 4C 49 4E >                db      ".LINE"
 509+ EA1E 45          >
 509+ EA1F             >len_NFA         defl    $ - temp_NFA
 509+ EA1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 509+ EA1A             >
 509+ EA1A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 509+ EA1B 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 509+ EA1F 45          >
 509+ EA20             >                org     $-1                 // alter last byte of Name just above to set
 509+ EA1F C5          >                db      {b $} | END_BIT     // msb as name end
 509+ EA20             >
 509+ EA20 0F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 509+ EA22             >Prev_Ptr        defl    Heap_Ptr
 509+ EA22             >
 509+ EA22             >mirror_Ptr      defl    $
 509+ EA22             >
 509+ EA22 95 77       >                dw      Dict_Ptr + 2        // xt
 509+ EA24             >Heap_Ptr        defl    $ - $E000           // save current HP
 509+ EA24             >
 509+ EA24             >Current_HP      defl  $ - $E000             // used to set HP once!
 509+ EA24             >
 509+ EA24             >//              ______________________________________________________________________
 509+ EA24             >//              Dictionary part
 509+ EA24             >
 509+ EA24             >                org     Dict_Ptr
 509+ 7793             >
 509+ 7793 22 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 509+ 7795             >
 509+ 7795             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 509+ 7795 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 509+ 7798             >
 509+ 7798             >
 509+ 7798             >                endif           ; ok        // for other definitions it "points" the correct handler
 509+ 7798             >                // Use of "; ok" to suppress "warning[fwdref]"
 509+ 7798             >
 509+ 7798             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 510+ 7798 78 77 96 6F                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 510+ 779C 7F 6F
 511+ 779E 4C 68                        dw      EXIT                    // ;
 512+ 77A0
 513+ 77A0              //  ______________________________________________________________________
 514+ 77A0              //
 515+ 77A0              // message       n1 n2 --
 516+ 77A0              // prints error message to current channel.
 517+ 77A0              // if WARNING is 0, prints "MSG#n".
 518+ 77A0              // if WARNING is 1, prints line n of screen 4.
 519+ 77A0              // if WARNING is -1, see ERROR
 520+ 77A0              // value can be negative or beyond block 4.
 521+ 77A0                              Colon_Def MESSAGE, "MESSAGE", is_normal
 521+ 77A0             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 521+ 77A0             >
 521+ 77A0             >Dict_Ptr        defl    $
 521+ 77A0             >
 521+ 77A0             >//              ______________________________________________________________________
 521+ 77A0             >//              Heap part
 521+ 77A0             >
 521+ 77A0             >
 521+ 77A0             >                org     (Heap_Ptr & $1FFF) + $E000
 521+ EA24             >
 521+ EA24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 521+ EA24             >Latest_Definition defl  Heap_Ptr
 521+ EA24             >
 521+ EA24             >                // dummy db directives used to calculate length of namec
 521+ EA24 4D 45 53 53 >                db      "MESSAGE"
 521+ EA28 41 47 45    >
 521+ EA2B             >len_NFA         defl    $ - temp_NFA
 521+ EA2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 521+ EA24             >
 521+ EA24 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 521+ EA25 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 521+ EA29 41 47 45    >
 521+ EA2C             >                org     $-1                 // alter last byte of Name just above to set
 521+ EA2B C5          >                db      {b $} | END_BIT     // msb as name end
 521+ EA2C             >
 521+ EA2C 1A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 521+ EA2E             >Prev_Ptr        defl    Heap_Ptr
 521+ EA2E             >
 521+ EA2E             >mirror_Ptr      defl    $
 521+ EA2E             >
 521+ EA2E A2 77       >                dw      Dict_Ptr + 2        // xt
 521+ EA30             >Heap_Ptr        defl    $ - $E000           // save current HP
 521+ EA30             >
 521+ EA30             >Current_HP      defl  $ - $E000             // used to set HP once!
 521+ EA30             >
 521+ EA30             >//              ______________________________________________________________________
 521+ EA30             >//              Dictionary part
 521+ EA30             >
 521+ EA30             >                org     Dict_Ptr
 521+ 77A0             >
 521+ 77A0 2E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 521+ 77A2             >
 521+ 77A2             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 521+ 77A2 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 521+ 77A5             >
 521+ 77A5             >
 521+ 77A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 521+ 77A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 521+ 77A5             >
 521+ 77A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 522+ 77A5 FF 6A 96 69                  dw      WARNING, FETCH          // warning @
 523+ 77A9                                                              // if
 524+ 77A9 F5 63                        dw      ZBRANCH
 525+ 77AB 12 00                        dw      Message_Else - $
 526+ 77AD A3 63 20 00                  dw          LIT, 32, PLUS       //      32 +
 526+ 77B1 9F 68
 527+ 77B3 9C 6A                        dw          TWO                 //      2
 528+ 77B5 95 77                        dw          DOT_LINE            //      .line
 529+ 77B7 84 6C                        dw          SPACE               //      space
 530+ 77B9                                                              // else
 531+ 77B9
 532+ 77B9 E8 63                        dw      BRANCH
 533+ 77BB 0B 00                        dw      Message_ENdif - $
 534+ 77BD              Message_Else:
 535+ 77BD 1C 71                        dw          C_DOT_QUOTE         //      .( msg#)
 536+ 77BF 04 6D 73 67                  db          4, "msg#"
 536+ 77C3 23
 537+ 77C4 DC 7E                        dw          DOT                 //      .  ( forward )
 538+ 77C6              Message_ENdif:                                  // endif
 539+ 77C6 4C 68                        dw      EXIT                    // ;
 540+ 77C8
 541+ 77C8
 542+ 77C8              //  ______________________________________________________________________
 543+ 77C8              //
 544+ 77C8              // device
 545+ 77C8                              Variable_Def DEVICE,   "DEVICE",   2
 545+ 77C8             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 545+ 77C8             >
 545+ 77C8             >Dict_Ptr        defl    $
 545+ 77C8             >
 545+ 77C8             >//              ______________________________________________________________________
 545+ 77C8             >//              Heap part
 545+ 77C8             >
 545+ 77C8             >
 545+ 77C8             >                org     (Heap_Ptr & $1FFF) + $E000
 545+ EA30             >
 545+ EA30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 545+ EA30             >Latest_Definition defl  Heap_Ptr
 545+ EA30             >
 545+ EA30             >                // dummy db directives used to calculate length of namec
 545+ EA30 44 45 56 49 >                db      "DEVICE"
 545+ EA34 43 45       >
 545+ EA36             >len_NFA         defl    $ - temp_NFA
 545+ EA36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 545+ EA30             >
 545+ EA30 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 545+ EA31 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 545+ EA35 43 45       >
 545+ EA37             >                org     $-1                 // alter last byte of Name just above to set
 545+ EA36 C5          >                db      {b $} | END_BIT     // msb as name end
 545+ EA37             >
 545+ EA37 24 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 545+ EA39             >Prev_Ptr        defl    Heap_Ptr
 545+ EA39             >
 545+ EA39             >mirror_Ptr      defl    $
 545+ EA39             >
 545+ EA39 CA 77       >                dw      Dict_Ptr + 2        // xt
 545+ EA3B             >Heap_Ptr        defl    $ - $E000           // save current HP
 545+ EA3B             >
 545+ EA3B             >Current_HP      defl  $ - $E000             // used to set HP once!
 545+ EA3B             >
 545+ EA3B             >//              ______________________________________________________________________
 545+ EA3B             >//              Dictionary part
 545+ EA3B             >
 545+ EA3B             >                org     Dict_Ptr
 545+ 77C8             >
 545+ 77C8 39 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 545+ 77CA             >
 545+ 77CA             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 545+ 77CA CD 75 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 545+ 77CD             >
 545+ 77CD             >
 545+ 77CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 545+ 77CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 545+ 77CD             >
 545+ 77CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 545+ 77CD 02 00       >                dw      2
 546+ 77CF
 547+ 77CF              //  ______________________________________________________________________
 548+ 77CF
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
 123  77CF                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
   1+ 77CF              //  ______________________________________________________________________
   2+ 77CF              //
   3+ 77CF              //  next-opt.asm
   4+ 77CF              //
   5+ 77CF              //  ZX Spectrum Next - peculiar definitions
   6+ 77CF              //  ______________________________________________________________________
   7+ 77CF
   8+ 77CF              //  ______________________________________________________________________
   9+ 77CF              //
  10+ 77CF              // reg@         n -- b
  11+ 77CF              // read Next REGister n giving byte b
  12+ 77CF              //
  13+ 77CF              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 77CF              //              dw      LIT, $243B
  15+ 77CF              //              dw      PSTORE
  16+ 77CF              //              dw      LIT, $253B
  17+ 77CF              //              dw      PFETCH
  18+ 77CF              //              dw      EXIT
  19+ 77CF                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 77CF             >
  19+ 77CF             >Dict_Ptr        defl    $
  19+ 77CF             >
  19+ 77CF             >//              ______________________________________________________________________
  19+ 77CF             >//              Heap part
  19+ 77CF             >
  19+ 77CF             >
  19+ 77CF             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA3B             >
  19+ EA3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA3B             >Latest_Definition defl  Heap_Ptr
  19+ EA3B             >
  19+ EA3B             >                // dummy db directives used to calculate length of namec
  19+ EA3B 52 45 47 40 >                db      "REG@"
  19+ EA3F             >len_NFA         defl    $ - temp_NFA
  19+ EA3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA3B             >
  19+ EA3B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA3C 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA40             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA3F C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA40             >
  19+ EA40 30 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA42             >Prev_Ptr        defl    Heap_Ptr
  19+ EA42             >
  19+ EA42             >mirror_Ptr      defl    $
  19+ EA42             >
  19+ EA42 D1 77       >                dw      Dict_Ptr + 2        // xt
  19+ EA44             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA44             >
  19+ EA44             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA44             >
  19+ EA44             >//              ______________________________________________________________________
  19+ EA44             >//              Dictionary part
  19+ EA44             >
  19+ EA44             >                org     Dict_Ptr
  19+ 77CF             >
  19+ 77CF 42 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 77D1             >
  19+ 77D1             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 77D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 77D1 ~           >
  19+ 77D1 ~           >
  19+ 77D1             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 77D1             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 77D1             >
  19+ 77D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 77D1 D9                           exx
  21+ 77D2 01 3B 24                     ld      bc, $243B
  22+ 77D5 E1                           pop     hl
  23+ 77D6 ED 69                        out     (c), l
  24+ 77D8 04                           inc     b
  25+ 77D9 ED 68                        in      l, (c)
  26+ 77DB E5                           push    hl
  27+ 77DC D9                           exx
  28+ 77DD                              next
  28+ 77DD DD E9       >                jp      (ix)
  29+ 77DF
  30+ 77DF
  31+ 77DF              //  ______________________________________________________________________
  32+ 77DF              //
  33+ 77DF              // reg!         b n --
  34+ 77DF              // write value b to Next REGister n
  35+ 77DF              //
  36+ 77DF              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 77DF              //              dw      LIT, $243B
  38+ 77DF              //              dw      PSTORE
  39+ 77DF              //              dw      LIT, $253B
  40+ 77DF              //              dw      PSTORE
  41+ 77DF              //              dw      EXIT
  42+ 77DF                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 77DF             >
  42+ 77DF             >Dict_Ptr        defl    $
  42+ 77DF             >
  42+ 77DF             >//              ______________________________________________________________________
  42+ 77DF             >//              Heap part
  42+ 77DF             >
  42+ 77DF             >
  42+ 77DF             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA44             >
  42+ EA44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA44             >Latest_Definition defl  Heap_Ptr
  42+ EA44             >
  42+ EA44             >                // dummy db directives used to calculate length of namec
  42+ EA44 52 45 47 21 >                db      "REG!"
  42+ EA48             >len_NFA         defl    $ - temp_NFA
  42+ EA48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA44             >
  42+ EA44 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA45 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA49             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA48 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA49             >
  42+ EA49 3B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA4B             >Prev_Ptr        defl    Heap_Ptr
  42+ EA4B             >
  42+ EA4B             >mirror_Ptr      defl    $
  42+ EA4B             >
  42+ EA4B E1 77       >                dw      Dict_Ptr + 2        // xt
  42+ EA4D             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA4D             >
  42+ EA4D             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA4D             >
  42+ EA4D             >//              ______________________________________________________________________
  42+ EA4D             >//              Dictionary part
  42+ EA4D             >
  42+ EA4D             >                org     Dict_Ptr
  42+ 77DF             >
  42+ 77DF 4B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 77E1             >
  42+ 77E1             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 77E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 77E1 ~           >
  42+ 77E1 ~           >
  42+ 77E1             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 77E1             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 77E1             >
  42+ 77E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 77E1 D9                           exx
  44+ 77E2 01 3B 24                     ld      bc, $243B
  45+ 77E5 E1                           pop     hl
  46+ 77E6 ED 69                        out     (c), l
  47+ 77E8 04                           inc     b
  48+ 77E9 E1                           pop     hl
  49+ 77EA ED 69                        out     (c), l
  50+ 77EC D9                           exx
  51+ 77ED                              next
  51+ 77ED DD E9       >                jp      (ix)
  52+ 77EF
  53+ 77EF
  54+ 77EF              //  ______________________________________________________________________
  55+ 77EF              //
  56+ 77EF              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 77EF              // NextZXOS call wrapper.
  58+ 77EF              //  n1 = hl register parameter value
  59+ 77EF              //  n2 = de register parameter value
  60+ 77EF              //  n3 = bc register parameter value
  61+ 77EF              //  n4 =  a register parameter value
  62+ 77EF              //   a = routine address in ROM 3
  63+ 77EF              // ----
  64+ 77EF              //  n5 = hl returned value
  65+ 77EF              //  n6 = de returned value
  66+ 77EF              //  n7 = bc returned value
  67+ 77EF              //  n8 =  a returned value
  68+ 77EF              //   f
  69+ 77EF                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 77EF             >
  69+ 77EF             >Dict_Ptr        defl    $
  69+ 77EF             >
  69+ 77EF             >//              ______________________________________________________________________
  69+ 77EF             >//              Heap part
  69+ 77EF             >
  69+ 77EF             >
  69+ 77EF             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA4D             >
  69+ EA4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA4D             >Latest_Definition defl  Heap_Ptr
  69+ EA4D             >
  69+ EA4D             >                // dummy db directives used to calculate length of namec
  69+ EA4D 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA51 44 4F 53    >
  69+ EA54             >len_NFA         defl    $ - temp_NFA
  69+ EA54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA4D             >
  69+ EA4D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA4E 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA52 44 4F 53    >
  69+ EA55             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA54 D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA55             >
  69+ EA55 44 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA57             >Prev_Ptr        defl    Heap_Ptr
  69+ EA57             >
  69+ EA57             >mirror_Ptr      defl    $
  69+ EA57             >
  69+ EA57 F1 77       >                dw      Dict_Ptr + 2        // xt
  69+ EA59             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA59             >
  69+ EA59             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA59             >
  69+ EA59             >//              ______________________________________________________________________
  69+ EA59             >//              Dictionary part
  69+ EA59             >
  69+ EA59             >                org     Dict_Ptr
  69+ 77EF             >
  69+ 77EF 57 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 77F1             >
  69+ 77F1             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 77F1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 77F1 ~           >
  69+ 77F1 ~           >
  69+ 77F1             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 77F1             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 77F1             >
  69+ 77F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 77F1 D9                            exx
  71+ 77F2 E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 77F3 D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 77F4 7B                            ld      a, e
  74+ 77F5 C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 77F6 D1                            pop     de                  // de' argument              //  n1
  76+ 77F7 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 77F8 D9                           exx
  78+ 77F9 E1                           pop     hl                  // entry address a
  79+ 77FA DD E5                        push    ix
  80+ 77FC D5                           push    de
  81+ 77FD C5                           push    bc
  82+ 77FE EB                           ex      de, hl              // de is entry address
  83+ 77FF              //              ld      (SP_Saved), sp
  84+ 77FF              //              ld      sp, Cold_origin - 5
  85+ 77FF 0E 07                        ld      c, 7                // use 7 RAM Bank
  86+ 7801
  87+ 7801 CF                           rst     08
  88+ 7802 94                           db      $94
  89+ 7803
  90+ 7803              //              ld      sp, (SP_Saved)
  91+ 7803              //              push    ix
  92+ 7803              //              pop     hl
  93+ 7803              //              ld      (IX_Echo), hl
  94+ 7803 DD 22 98 63                  ld      (IX_Echo), ix
  95+ 7807
  96+ 7807 D9                           exx
  97+ 7808 C1                           pop     bc
  98+ 7809 D1                           pop     de
  99+ 780A DD E1                        pop     ix
 100+ 780C D9                            exx
 101+ 780D E5                            push    hl
 102+ 780E D5                            push    de
 103+ 780F C5                            push    bc
 104+ 7810 26 00                         ld      h, 0
 105+ 7812 6F                            ld      l, a
 106+ 7813 E5                            push    hl
 107+ 7814 D9                           exx
 108+ 7815 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 109+ 7817 23                           inc     hl                  //  0 for OK ; 1 for ko
 110+ 7818 E5                           push    hl
 111+ 7819                              next
 111+ 7819 DD E9       >                jp      (ix)
 112+ 781B
 113+ 781B              //  ______________________________________________________________________
 114+ 781B              //
 115+ 781B              // blk-fh
 116+ 781B                              Variable_Def BLK_FH,   "BLK-FH",   1
 116+ 781B             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 116+ 781B             >
 116+ 781B             >Dict_Ptr        defl    $
 116+ 781B             >
 116+ 781B             >//              ______________________________________________________________________
 116+ 781B             >//              Heap part
 116+ 781B             >
 116+ 781B             >
 116+ 781B             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ EA59             >
 116+ EA59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ EA59             >Latest_Definition defl  Heap_Ptr
 116+ EA59             >
 116+ EA59             >                // dummy db directives used to calculate length of namec
 116+ EA59 42 4C 4B 2D >                db      "BLK-FH"
 116+ EA5D 46 48       >
 116+ EA5F             >len_NFA         defl    $ - temp_NFA
 116+ EA5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ EA59             >
 116+ EA59 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ EA5A 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 116+ EA5E 46 48       >
 116+ EA60             >                org     $-1                 // alter last byte of Name just above to set
 116+ EA5F C8          >                db      {b $} | END_BIT     // msb as name end
 116+ EA60             >
 116+ EA60 4D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ EA62             >Prev_Ptr        defl    Heap_Ptr
 116+ EA62             >
 116+ EA62             >mirror_Ptr      defl    $
 116+ EA62             >
 116+ EA62 1D 78       >                dw      Dict_Ptr + 2        // xt
 116+ EA64             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ EA64             >
 116+ EA64             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ EA64             >
 116+ EA64             >//              ______________________________________________________________________
 116+ EA64             >//              Dictionary part
 116+ EA64             >
 116+ EA64             >                org     Dict_Ptr
 116+ 781B             >
 116+ 781B 62 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 781D             >
 116+ 781D             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 781D CD 75 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 116+ 7820             >
 116+ 7820             >
 116+ 7820             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 7820             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 7820             >
 116+ 7820             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 116+ 7820 01 00       >                dw      1
 117+ 7822
 118+ 7822                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 118+ 7822             >
 118+ 7822             >Dict_Ptr        defl    $
 118+ 7822             >
 118+ 7822             >//              ______________________________________________________________________
 118+ 7822             >//              Heap part
 118+ 7822             >
 118+ 7822             >
 118+ 7822             >                org     (Heap_Ptr & $1FFF) + $E000
 118+ EA64             >
 118+ EA64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ EA64             >Latest_Definition defl  Heap_Ptr
 118+ EA64             >
 118+ EA64             >                // dummy db directives used to calculate length of namec
 118+ EA64 42 4C 4B 2D >                db      "BLK-FNAME"
 118+ EA68 46 4E 41 4D >
 118+ EA6C 45          >
 118+ EA6D             >len_NFA         defl    $ - temp_NFA
 118+ EA6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ EA64             >
 118+ EA64 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ EA65 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 118+ EA69 46 4E 41 4D >
 118+ EA6D 45          >
 118+ EA6E             >                org     $-1                 // alter last byte of Name just above to set
 118+ EA6D C5          >                db      {b $} | END_BIT     // msb as name end
 118+ EA6E             >
 118+ EA6E 59 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 118+ EA70             >Prev_Ptr        defl    Heap_Ptr
 118+ EA70             >
 118+ EA70             >mirror_Ptr      defl    $
 118+ EA70             >
 118+ EA70 24 78       >                dw      Dict_Ptr + 2        // xt
 118+ EA72             >Heap_Ptr        defl    $ - $E000           // save current HP
 118+ EA72             >
 118+ EA72             >Current_HP      defl  $ - $E000             // used to set HP once!
 118+ EA72             >
 118+ EA72             >//              ______________________________________________________________________
 118+ EA72             >//              Dictionary part
 118+ EA72             >
 118+ EA72             >                org     Dict_Ptr
 118+ 7822             >
 118+ 7822 70 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 118+ 7824             >
 118+ 7824             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 7824 CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 118+ 7827             >
 118+ 7827             >
 118+ 7827             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 7827             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 7827             >
 118+ 7827             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 7827 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 119+ 782B 6F 63 6B 73
 119+ 782F 2D 36 34 2E
 119+ 7833 62 69 6E 00
 120+ 7837 00 00 00...                  ds      24
 121+ 784F
 122+ 784F              //  ______________________________________________________________________
 123+ 784F              //
 124+ 784F              // blk-seek     n --
 125+ 784F              // seek block n  within blocks!.bin  file
 126+ 784F                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 126+ 784F             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 126+ 784F             >
 126+ 784F             >Dict_Ptr        defl    $
 126+ 784F             >
 126+ 784F             >//              ______________________________________________________________________
 126+ 784F             >//              Heap part
 126+ 784F             >
 126+ 784F             >
 126+ 784F             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ EA72             >
 126+ EA72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ EA72             >Latest_Definition defl  Heap_Ptr
 126+ EA72             >
 126+ EA72             >                // dummy db directives used to calculate length of namec
 126+ EA72 42 4C 4B 2D >                db      "BLK-SEEK"
 126+ EA76 53 45 45 4B >
 126+ EA7A             >len_NFA         defl    $ - temp_NFA
 126+ EA7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ EA72             >
 126+ EA72 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ EA73 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 126+ EA77 53 45 45 4B >
 126+ EA7B             >                org     $-1                 // alter last byte of Name just above to set
 126+ EA7A CB          >                db      {b $} | END_BIT     // msb as name end
 126+ EA7B             >
 126+ EA7B 64 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ EA7D             >Prev_Ptr        defl    Heap_Ptr
 126+ EA7D             >
 126+ EA7D             >mirror_Ptr      defl    $
 126+ EA7D             >
 126+ EA7D 51 78       >                dw      Dict_Ptr + 2        // xt
 126+ EA7F             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ EA7F             >
 126+ EA7F             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ EA7F             >
 126+ EA7F             >//              ______________________________________________________________________
 126+ EA7F             >//              Dictionary part
 126+ EA7F             >
 126+ EA7F             >                org     Dict_Ptr
 126+ 784F             >
 126+ 784F 7D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 7851             >
 126+ 7851             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 7851 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 126+ 7854             >
 126+ 7854             >
 126+ 7854             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 7854             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 7854             >
 126+ 7854             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 7854 BF 6A A5 76                  dw  BBUF, MMUL
 128+ 7858 1D 78 96 69                  dw  BLK_FH, FETCH
 129+ 785C E3 66                        dw  F_SEEK
 130+ 785E A3 63 2D 00                  dw  LIT, $2D, QERROR
 130+ 7862 EF 6D
 131+ 7864 4C 68                        dw  EXIT
 132+ 7866
 133+ 7866              //  ______________________________________________________________________
 134+ 7866              //
 135+ 7866              // blk-read     n --
 136+ 7866              // seek block n  within blocks!.bin  file
 137+ 7866                              Colon_Def BLK_READ, "BLK-READ", is_normal
 137+ 7866             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 137+ 7866             >
 137+ 7866             >Dict_Ptr        defl    $
 137+ 7866             >
 137+ 7866             >//              ______________________________________________________________________
 137+ 7866             >//              Heap part
 137+ 7866             >
 137+ 7866             >
 137+ 7866             >                org     (Heap_Ptr & $1FFF) + $E000
 137+ EA7F             >
 137+ EA7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ EA7F             >Latest_Definition defl  Heap_Ptr
 137+ EA7F             >
 137+ EA7F             >                // dummy db directives used to calculate length of namec
 137+ EA7F 42 4C 4B 2D >                db      "BLK-READ"
 137+ EA83 52 45 41 44 >
 137+ EA87             >len_NFA         defl    $ - temp_NFA
 137+ EA87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ EA7F             >
 137+ EA7F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ EA80 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 137+ EA84 52 45 41 44 >
 137+ EA88             >                org     $-1                 // alter last byte of Name just above to set
 137+ EA87 C4          >                db      {b $} | END_BIT     // msb as name end
 137+ EA88             >
 137+ EA88 72 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 137+ EA8A             >Prev_Ptr        defl    Heap_Ptr
 137+ EA8A             >
 137+ EA8A             >mirror_Ptr      defl    $
 137+ EA8A             >
 137+ EA8A 68 78       >                dw      Dict_Ptr + 2        // xt
 137+ EA8C             >Heap_Ptr        defl    $ - $E000           // save current HP
 137+ EA8C             >
 137+ EA8C             >Current_HP      defl  $ - $E000             // used to set HP once!
 137+ EA8C             >
 137+ EA8C             >//              ______________________________________________________________________
 137+ EA8C             >//              Dictionary part
 137+ EA8C             >
 137+ EA8C             >                org     Dict_Ptr
 137+ 7866             >
 137+ 7866 8A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 137+ 7868             >
 137+ 7868             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 7868 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 137+ 786B             >
 137+ 786B             >
 137+ 786B             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 786B             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 786B             >
 137+ 786B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 786B 51 78                        dw  BLK_SEEK
 139+ 786D BF 6A                        dw  BBUF
 140+ 786F 1D 78 96 69                  dw  BLK_FH, FETCH
 141+ 7873 2F 67                        dw  F_READ
 142+ 7875 A3 63 2E 00                  dw  LIT, $2E, QERROR
 142+ 7879 EF 6D
 143+ 787B 0A 69                        dw  DROP
 144+ 787D 4C 68                        dw  EXIT
 145+ 787F
 146+ 787F              //  ______________________________________________________________________
 147+ 787F              //
 148+ 787F              // blk-write     n --
 149+ 787F              // seek block n  within blocks!.bin  file
 150+ 787F                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 150+ 787F             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 150+ 787F             >
 150+ 787F             >Dict_Ptr        defl    $
 150+ 787F             >
 150+ 787F             >//              ______________________________________________________________________
 150+ 787F             >//              Heap part
 150+ 787F             >
 150+ 787F             >
 150+ 787F             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ EA8C             >
 150+ EA8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ EA8C             >Latest_Definition defl  Heap_Ptr
 150+ EA8C             >
 150+ EA8C             >                // dummy db directives used to calculate length of namec
 150+ EA8C 42 4C 4B 2D >                db      "BLK-WRITE"
 150+ EA90 57 52 49 54 >
 150+ EA94 45          >
 150+ EA95             >len_NFA         defl    $ - temp_NFA
 150+ EA95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ EA8C             >
 150+ EA8C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ EA8D 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 150+ EA91 57 52 49 54 >
 150+ EA95 45          >
 150+ EA96             >                org     $-1                 // alter last byte of Name just above to set
 150+ EA95 C5          >                db      {b $} | END_BIT     // msb as name end
 150+ EA96             >
 150+ EA96 7F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ EA98             >Prev_Ptr        defl    Heap_Ptr
 150+ EA98             >
 150+ EA98             >mirror_Ptr      defl    $
 150+ EA98             >
 150+ EA98 81 78       >                dw      Dict_Ptr + 2        // xt
 150+ EA9A             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ EA9A             >
 150+ EA9A             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ EA9A             >
 150+ EA9A             >//              ______________________________________________________________________
 150+ EA9A             >//              Dictionary part
 150+ EA9A             >
 150+ EA9A             >                org     Dict_Ptr
 150+ 787F             >
 150+ 787F 98 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 7881             >
 150+ 7881             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 7881 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 150+ 7884             >
 150+ 7884             >
 150+ 7884             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 7884             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 7884             >
 150+ 7884             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7884 51 78                        dw  BLK_SEEK
 152+ 7886 BF 6A                        dw  BBUF
 153+ 7888 1D 78 96 69                  dw  BLK_FH, FETCH
 154+ 788C 4A 67                        dw  F_WRITE
 155+ 788E A3 63 2F 00                  dw  LIT, $2F, QERROR
 155+ 7892 EF 6D
 156+ 7894 0A 69                        dw  DROP
 157+ 7896 4C 68                        dw  EXIT
 158+ 7898
 159+ 7898              //  ______________________________________________________________________
 160+ 7898              //
 161+ 7898              // blk-init     n --
 162+ 7898              // seek block n  within blocks!.bin  file
 163+ 7898                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 163+ 7898             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 163+ 7898             >
 163+ 7898             >Dict_Ptr        defl    $
 163+ 7898             >
 163+ 7898             >//              ______________________________________________________________________
 163+ 7898             >//              Heap part
 163+ 7898             >
 163+ 7898             >
 163+ 7898             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ EA9A             >
 163+ EA9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ EA9A             >Latest_Definition defl  Heap_Ptr
 163+ EA9A             >
 163+ EA9A             >                // dummy db directives used to calculate length of namec
 163+ EA9A 42 4C 4B 2D >                db      "BLK-INIT"
 163+ EA9E 49 4E 49 54 >
 163+ EAA2             >len_NFA         defl    $ - temp_NFA
 163+ EAA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ EA9A             >
 163+ EA9A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ EA9B 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 163+ EA9F 49 4E 49 54 >
 163+ EAA3             >                org     $-1                 // alter last byte of Name just above to set
 163+ EAA2 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ EAA3             >
 163+ EAA3 8C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ EAA5             >Prev_Ptr        defl    Heap_Ptr
 163+ EAA5             >
 163+ EAA5             >mirror_Ptr      defl    $
 163+ EAA5             >
 163+ EAA5 9A 78       >                dw      Dict_Ptr + 2        // xt
 163+ EAA7             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ EAA7             >
 163+ EAA7             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ EAA7             >
 163+ EAA7             >//              ______________________________________________________________________
 163+ EAA7             >//              Dictionary part
 163+ EAA7             >
 163+ EAA7             >                org     Dict_Ptr
 163+ 7898             >
 163+ 7898 A5 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 789A             >
 163+ 789A             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 789A CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 163+ 789D             >
 163+ 789D             >
 163+ 789D             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 789D             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 789D             >
 163+ 789D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 789D 1D 78 96 69                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 164+ 78A1 FF 66 0A 69
 165+ 78A5 24 78 B8 68                  dw  BLK_FNAME, ONE_PLUS
 166+ 78A9 B3 6B A3 6A                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 166+ 78AD 5A 67
 167+ 78AF A3 63 2C 00                  dw  LIT, $2C, QERROR
 167+ 78B3 EF 6D
 168+ 78B5 1D 78 A0 69                  dw  BLK_FH, STORE
 169+ 78B9 4C 68                        dw  EXIT
 170+ 78BB
 171+ 78BB              //  ______________________________________________________________________
 172+ 78BB              //
 173+ 78BB              // #sec
 174+ 78BB              // number of 512-Byte "sectors" available on thie sysstem.
 175+ 78BB              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 176+ 78BB
 177+ 78BB                              Constant_Def NSEC , "#SEC", 32767
 177+ 78BB             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 177+ 78BB             >
 177+ 78BB             >Dict_Ptr        defl    $
 177+ 78BB             >
 177+ 78BB             >//              ______________________________________________________________________
 177+ 78BB             >//              Heap part
 177+ 78BB             >
 177+ 78BB             >
 177+ 78BB             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ EAA7             >
 177+ EAA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ EAA7             >Latest_Definition defl  Heap_Ptr
 177+ EAA7             >
 177+ EAA7             >                // dummy db directives used to calculate length of namec
 177+ EAA7 23 53 45 43 >                db      "#SEC"
 177+ EAAB             >len_NFA         defl    $ - temp_NFA
 177+ EAAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ EAA7             >
 177+ EAA7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ EAA8 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 177+ EAAC             >                org     $-1                 // alter last byte of Name just above to set
 177+ EAAB C3          >                db      {b $} | END_BIT     // msb as name end
 177+ EAAC             >
 177+ EAAC 9A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ EAAE             >Prev_Ptr        defl    Heap_Ptr
 177+ EAAE             >
 177+ EAAE             >mirror_Ptr      defl    $
 177+ EAAE             >
 177+ EAAE BD 78       >                dw      Dict_Ptr + 2        // xt
 177+ EAB0             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ EAB0             >
 177+ EAB0             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ EAB0             >
 177+ EAB0             >//              ______________________________________________________________________
 177+ EAB0             >//              Dictionary part
 177+ EAB0             >
 177+ EAB0             >                org     Dict_Ptr
 177+ 78BB             >
 177+ 78BB AE 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 78BD             >
 177+ 78BD             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 78BD CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 177+ 78C0             >
 177+ 78C0             >
 177+ 78C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 78C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 78C0             >
 177+ 78C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 78C0 FF 7F       >                dw      32767
 178+ 78C2
 179+ 78C2              //  ______________________________________________________________________
 180+ 78C2
 181+ 78C2
 182+ 78C2
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
 124  78C2                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
   1+ 78C2              //  ______________________________________________________________________
   2+ 78C2              //
   3+ 78C2              //  L3.asm
   4+ 78C2              //
   5+ 78C2              //  Continuation of L2.asm
   6+ 78C2              //  I/O Block definitions
   7+ 78C2              //  ______________________________________________________________________
   8+ 78C2
   9+ 78C2
  10+ 78C2              //  ______________________________________________________________________
  11+ 78C2              //
  12+ 78C2              // r/w          a n f --
  13+ 78C2              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 78C2                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 78C2             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 78C2             >
  14+ 78C2             >Dict_Ptr        defl    $
  14+ 78C2             >
  14+ 78C2             >//              ______________________________________________________________________
  14+ 78C2             >//              Heap part
  14+ 78C2             >
  14+ 78C2             >
  14+ 78C2             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EAB0             >
  14+ EAB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EAB0             >Latest_Definition defl  Heap_Ptr
  14+ EAB0             >
  14+ EAB0             >                // dummy db directives used to calculate length of namec
  14+ EAB0 52 2F 57    >                db      "R/W"
  14+ EAB3             >len_NFA         defl    $ - temp_NFA
  14+ EAB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EAB0             >
  14+ EAB0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EAB1 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EAB4             >                org     $-1                 // alter last byte of Name just above to set
  14+ EAB3 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EAB4             >
  14+ EAB4 A7 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EAB6             >Prev_Ptr        defl    Heap_Ptr
  14+ EAB6             >
  14+ EAB6             >mirror_Ptr      defl    $
  14+ EAB6             >
  14+ EAB6 C4 78       >                dw      Dict_Ptr + 2        // xt
  14+ EAB8             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EAB8             >
  14+ EAB8             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EAB8             >
  14+ EAB8             >//              ______________________________________________________________________
  14+ EAB8             >//              Dictionary part
  14+ EAB8             >
  14+ EAB8             >                org     Dict_Ptr
  14+ 78C2             >
  14+ 78C2 B6 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 78C4             >
  14+ 78C4             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 78C4 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 78C7             >
  14+ 78C7             >
  14+ 78C7             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 78C7             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 78C7             >
  14+ 78C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 78C7 56 68                        dw      TO_R                    // >r
  16+ 78C9 BF 68                        dw      ONE_SUBTRACT            // 1-
  17+ 78CB 25 69 84 68                  dw      DUP, ZLESS              // dup 0<
  18+ 78CF 01 69 BD 78                  dw      OVER, NSEC              // over #sec
  19+ 78D3 BF 68 2C 6C                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 78D7 1B 68                        dw      OR_OP                   // or
  21+ 78D9 A3 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 78DD EF 6D
  22+ 78DF 61 68                        dw      R_TO                    // r>
  23+ 78E1                                                              // if
  24+ 78E1 F5 63                        dw      ZBRANCH
  25+ 78E3 08 00                        dw      Read_Write_Else - $
  26+ 78E5 68 78                        dw          BLK_READ            //      blk-read
  27+ 78E7 E8 63                        dw      BRANCH
  28+ 78E9 04 00                        dw      Read_Write_Endif - $
  29+ 78EB              Read_Write_Else:                                // else
  30+ 78EB 81 78                        dw          BLK_WRITE           //      blk-write
  31+ 78ED              Read_Write_Endif:                               // endif
  32+ 78ED 4C 68                        dw      EXIT                    // ;
  33+ 78EF
  34+ 78EF
  35+ 78EF              //  ______________________________________________________________________
  36+ 78EF              //
  37+ 78EF              // +buf        a1 -- a2 f
  38+ 78EF              // advences to next buffer, cyclically rotating along them
  39+ 78EF                              Colon_Def PBUF, "+BUF", is_normal
  39+ 78EF             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 78EF             >
  39+ 78EF             >Dict_Ptr        defl    $
  39+ 78EF             >
  39+ 78EF             >//              ______________________________________________________________________
  39+ 78EF             >//              Heap part
  39+ 78EF             >
  39+ 78EF             >
  39+ 78EF             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EAB8             >
  39+ EAB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EAB8             >Latest_Definition defl  Heap_Ptr
  39+ EAB8             >
  39+ EAB8             >                // dummy db directives used to calculate length of namec
  39+ EAB8 2B 42 55 46 >                db      "+BUF"
  39+ EABC             >len_NFA         defl    $ - temp_NFA
  39+ EABC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EAB8             >
  39+ EAB8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EAB9 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EABD             >                org     $-1                 // alter last byte of Name just above to set
  39+ EABC C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EABD             >
  39+ EABD B0 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EABF             >Prev_Ptr        defl    Heap_Ptr
  39+ EABF             >
  39+ EABF             >mirror_Ptr      defl    $
  39+ EABF             >
  39+ EABF F1 78       >                dw      Dict_Ptr + 2        // xt
  39+ EAC1             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EAC1             >
  39+ EAC1             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EAC1             >
  39+ EAC1             >//              ______________________________________________________________________
  39+ EAC1             >//              Dictionary part
  39+ EAC1             >
  39+ EAC1             >                org     Dict_Ptr
  39+ 78EF             >
  39+ 78EF BF 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 78F1             >
  39+ 78F1             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 78F1 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 78F4             >
  39+ 78F4             >
  39+ 78F4             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 78F4             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 78F4             >
  39+ 78F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 78F4 A3 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 78F8 9F 68
  41+ 78FA 25 69 1D 6B                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 78FE 96 69
  42+ 7900 FE 6B                        dw      EQUALS                  // =
  43+ 7902                                                              // if
  44+ 7902 F5 63                        dw      ZBRANCH
  45+ 7904 08 00                        dw      PBuf_Endif - $
  46+ 7906 0A 69                        dw          DROP                //      drop
  47+ 7908 17 6B 96 69                  dw          FIRST, FETCH        //      first @
  48+ 790C              PBuf_Endif:                                     // endif
  49+ 790C 25 69 89 6B                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7910 96 69
  50+ 7912 F2 6B                        dw      SUBTRACT                // -
  51+ 7914 4C 68                        dw      EXIT                    // ;
  52+ 7916
  53+ 7916              //  ______________________________________________________________________
  54+ 7916              //
  55+ 7916              // update       --
  56+ 7916              // mark the last used block to be written to disk
  57+ 7916                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7916             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7916             >
  57+ 7916             >Dict_Ptr        defl    $
  57+ 7916             >
  57+ 7916             >//              ______________________________________________________________________
  57+ 7916             >//              Heap part
  57+ 7916             >
  57+ 7916             >
  57+ 7916             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EAC1             >
  57+ EAC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EAC1             >Latest_Definition defl  Heap_Ptr
  57+ EAC1             >
  57+ EAC1             >                // dummy db directives used to calculate length of namec
  57+ EAC1 55 50 44 41 >                db      "UPDATE"
  57+ EAC5 54 45       >
  57+ EAC7             >len_NFA         defl    $ - temp_NFA
  57+ EAC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EAC1             >
  57+ EAC1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EAC2 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EAC6 54 45       >
  57+ EAC8             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAC7 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAC8             >
  57+ EAC8 B8 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EACA             >Prev_Ptr        defl    Heap_Ptr
  57+ EACA             >
  57+ EACA             >mirror_Ptr      defl    $
  57+ EACA             >
  57+ EACA 18 79       >                dw      Dict_Ptr + 2        // xt
  57+ EACC             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EACC             >
  57+ EACC             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EACC             >
  57+ EACC             >//              ______________________________________________________________________
  57+ EACC             >//              Dictionary part
  57+ EACC             >
  57+ EACC             >                org     Dict_Ptr
  57+ 7916             >
  57+ 7916 CA 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 7918             >
  57+ 7918             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7918 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 791B             >
  57+ 791B             >
  57+ 791B             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 791B             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 791B             >
  57+ 791B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 791B 89 6B 96 69                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 791F 96 69
  59+ 7921 A3 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7925 1B 68
  60+ 7927 89 6B 96 69                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 792B A0 69
  61+ 792D 4C 68                        dw      EXIT                    // ;
  62+ 792F
  63+ 792F
  64+ 792F              //  ______________________________________________________________________
  65+ 792F              //
  66+ 792F              // empty-buffers --
  67+ 792F                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 792F             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 792F             >
  67+ 792F             >Dict_Ptr        defl    $
  67+ 792F             >
  67+ 792F             >//              ______________________________________________________________________
  67+ 792F             >//              Heap part
  67+ 792F             >
  67+ 792F             >
  67+ 792F             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EACC             >
  67+ EACC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EACC             >Latest_Definition defl  Heap_Ptr
  67+ EACC             >
  67+ EACC             >                // dummy db directives used to calculate length of namec
  67+ EACC 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAD0 59 2D 42 55 >
  67+ EAD4 46 46 45 52 >
  67+ EAD8 53          >
  67+ EAD9             >len_NFA         defl    $ - temp_NFA
  67+ EAD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EACC             >
  67+ EACC 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EACD 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAD1 59 2D 42 55 >
  67+ EAD5 46 46 45 52 >
  67+ EAD9 53          >
  67+ EADA             >                org     $-1                 // alter last byte of Name just above to set
  67+ EAD9 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EADA             >
  67+ EADA C1 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EADC             >Prev_Ptr        defl    Heap_Ptr
  67+ EADC             >
  67+ EADC             >mirror_Ptr      defl    $
  67+ EADC             >
  67+ EADC 31 79       >                dw      Dict_Ptr + 2        // xt
  67+ EADE             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EADE             >
  67+ EADE             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EADE             >
  67+ EADE             >//              ______________________________________________________________________
  67+ EADE             >//              Dictionary part
  67+ EADE             >
  67+ EADE             >                org     Dict_Ptr
  67+ 792F             >
  67+ 792F DC 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 7931             >
  67+ 7931             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7931 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7934             >
  67+ 7934             >
  67+ 7934             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7934             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7934             >
  67+ 7934             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7934 17 6B 96 69                  dw      FIRST, FETCH            // first @
  69+ 7938 1D 6B 96 69                  dw      LIMIT, FETCH            // limit @
  70+ 793C 01 69 F2 6B                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7940 99 70
  71+ 7942 4C 68                        dw      EXIT                    // ;
  72+ 7944
  73+ 7944              //  ______________________________________________________________________
  74+ 7944              //
  75+ 7944              // buffer       n -- a
  76+ 7944              // read block n and gives the address to a buffer
  77+ 7944              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7944              // disk before reading the block n.
  79+ 7944
  80+ 7944                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7944             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7944             >
  80+ 7944             >Dict_Ptr        defl    $
  80+ 7944             >
  80+ 7944             >//              ______________________________________________________________________
  80+ 7944             >//              Heap part
  80+ 7944             >
  80+ 7944             >
  80+ 7944             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EADE             >
  80+ EADE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EADE             >Latest_Definition defl  Heap_Ptr
  80+ EADE             >
  80+ EADE             >                // dummy db directives used to calculate length of namec
  80+ EADE 42 55 46 46 >                db      "BUFFER"
  80+ EAE2 45 52       >
  80+ EAE4             >len_NFA         defl    $ - temp_NFA
  80+ EAE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EADE             >
  80+ EADE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EADF 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAE3 45 52       >
  80+ EAE5             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAE4 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EAE5             >
  80+ EAE5 CC 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EAE7             >Prev_Ptr        defl    Heap_Ptr
  80+ EAE7             >
  80+ EAE7             >mirror_Ptr      defl    $
  80+ EAE7             >
  80+ EAE7 46 79       >                dw      Dict_Ptr + 2        // xt
  80+ EAE9             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EAE9             >
  80+ EAE9             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EAE9             >
  80+ EAE9             >//              ______________________________________________________________________
  80+ EAE9             >//              Dictionary part
  80+ EAE9             >
  80+ EAE9             >                org     Dict_Ptr
  80+ 7944             >
  80+ 7944 E7 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 7946             >
  80+ 7946             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7946 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7949             >
  80+ 7949             >
  80+ 7949             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7949             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7949             >
  80+ 7949             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7949 83 6B 96 69                  dw      USED, FETCH             // used @
  82+ 794D 25 69 56 68                  dw      DUP, TO_R               // dup >r
  83+ 7951                                                              // begin
  84+ 7951              Buffer_Begin:
  85+ 7951 F1 78                        dw          PBUF                //      +buf
  86+ 7953                                                              // until
  87+ 7953 F5 63                        dw      ZBRANCH
  88+ 7955 FC FF                        dw      Buffer_Begin - $
  89+ 7957 83 6B A0 69                  dw      USED, STORE             // used !
  90+ 795B 6C 68 96 69                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 795F 84 68
  91+ 7961                                                              // if
  92+ 7961 F5 63                        dw      ZBRANCH
  93+ 7963 14 00                        dw      Buffer_Endif - $
  94+ 7965 6C 68 CE 68                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7969 6C 68 96 69                  dw          R_OP, FETCH         //      r fetch
  96+ 796D A3 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7971 0C 68                        dw          AND_OP              //      and
  98+ 7973 8E 6A C4 78                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7977              Buffer_Endif:                                   // endif
 100+ 7977 6C 68 A0 69                  dw      R_OP, STORE             // r !
 101+ 797B 6C 68 89 6B                  dw      R_OP, PREV, STORE       // r prev !
 101+ 797F A0 69
 102+ 7981 61 68 CE 68                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7985 4C 68                        dw      EXIT                    // ;
 104+ 7987
 105+ 7987              //  ______________________________________________________________________
 106+ 7987              //
 107+ 7987              // block        n -- a
 108+ 7987              // Leaves the buffer address that contains the block n.
 109+ 7987              // If the block is not already present, it will be loaded from disk
 110+ 7987              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7987              // disk before reading the block n.
 112+ 7987              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7987
 114+ 7987                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7987             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7987             >
 114+ 7987             >Dict_Ptr        defl    $
 114+ 7987             >
 114+ 7987             >//              ______________________________________________________________________
 114+ 7987             >//              Heap part
 114+ 7987             >
 114+ 7987             >
 114+ 7987             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EAE9             >
 114+ EAE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EAE9             >Latest_Definition defl  Heap_Ptr
 114+ EAE9             >
 114+ EAE9             >                // dummy db directives used to calculate length of namec
 114+ EAE9 42 4C 4F 43 >                db      "BLOCK"
 114+ EAED 4B          >
 114+ EAEE             >len_NFA         defl    $ - temp_NFA
 114+ EAEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EAE9             >
 114+ EAE9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EAEA 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAEE 4B          >
 114+ EAEF             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAEE CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAEF             >
 114+ EAEF DE 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAF1             >Prev_Ptr        defl    Heap_Ptr
 114+ EAF1             >
 114+ EAF1             >mirror_Ptr      defl    $
 114+ EAF1             >
 114+ EAF1 89 79       >                dw      Dict_Ptr + 2        // xt
 114+ EAF3             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAF3             >
 114+ EAF3             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAF3             >
 114+ EAF3             >//              ______________________________________________________________________
 114+ EAF3             >//              Dictionary part
 114+ EAF3             >
 114+ EAF3             >                org     Dict_Ptr
 114+ 7987             >
 114+ 7987 F1 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 7989             >
 114+ 7989             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7989 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 798C             >
 114+ 798C             >
 114+ 798C             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 798C             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 798C             >
 114+ 798C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 798C                          //  dw      OFFSET, FETCH           // offset @
 116+ 798C                          //  dw      PLUS
 117+ 798C 56 68                        dw      TO_R                    // + >r
 118+ 798E 89 6B 96 69                  dw      PREV, FETCH             // prev @
 119+ 7992 25 69 96 69                  dw      DUP, FETCH              // dup @
 120+ 7996 6C 68 F2 6B                  dw      R_OP, SUBTRACT          // r -
 121+ 799A 25 69 9F 68                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 799E                                                              // if
 123+ 799E F5 63                        dw        ZBRANCH
 124+ 79A0 32 00                        dw        Block_Endif_1 - $
 125+ 79A2              Block_Begin:                                    //      begin
 126+ 79A2 F1 78 71 68                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 79A6                                                              //          if
 128+ 79A6 F5 63                        dw          ZBRANCH
 129+ 79A8 12 00                        dw          Block_Endif_2 - $
 130+ 79AA 0A 69                        dw              DROP            //              drop
 131+ 79AC 6C 68 46 79                  dw              R_OP, BUFFER    //              r buffer
 132+ 79B0 25 69                        dw              DUP             //              dup
 133+ 79B2 6C 68 95 6A                  dw              R_OP, ONE       //              r 1
 134+ 79B6 C4 78                        dw              READ_WRITE      //              r/w
 135+ 79B8 DB 68                        dw              TWO_MINUS       //              2-
 136+ 79BA              Block_Endif_2:                                  //          endif
 137+ 79BA 25 69 96 69                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 79BE 6C 68
 138+ 79C0 F2 6B 25 69                  dw          SUBTRACT, DUP       //          - dup
 139+ 79C4 9F 68 71 68                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 79C8                                                              //      until
 141+ 79C8 F5 63                        dw        ZBRANCH
 142+ 79CA D8 FF                        dw        Block_Begin - $
 143+ 79CC 25 69 89 6B                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 79D0 A0 69
 144+ 79D2              Block_Endif_1:                                  // endif
 145+ 79D2 61 68 0A 69                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 79D6 CE 68
 146+ 79D8 4C 68                        dw      EXIT                    // ;
 147+ 79DA
 148+ 79DA              //  ______________________________________________________________________
 149+ 79DA              //
 150+ 79DA              // #buff        -- n
 151+ 79DA              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 79DA                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 79DA             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 79DA             >
 152+ 79DA             >Dict_Ptr        defl    $
 152+ 79DA             >
 152+ 79DA             >//              ______________________________________________________________________
 152+ 79DA             >//              Heap part
 152+ 79DA             >
 152+ 79DA             >
 152+ 79DA             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAF3             >
 152+ EAF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAF3             >Latest_Definition defl  Heap_Ptr
 152+ EAF3             >
 152+ EAF3             >                // dummy db directives used to calculate length of namec
 152+ EAF3 23 42 55 46 >                db      "#BUFF"
 152+ EAF7 46          >
 152+ EAF8             >len_NFA         defl    $ - temp_NFA
 152+ EAF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAF3             >
 152+ EAF3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAF4 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EAF8 46          >
 152+ EAF9             >                org     $-1                 // alter last byte of Name just above to set
 152+ EAF8 C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EAF9             >
 152+ EAF9 E9 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EAFB             >Prev_Ptr        defl    Heap_Ptr
 152+ EAFB             >
 152+ EAFB             >mirror_Ptr      defl    $
 152+ EAFB             >
 152+ EAFB DC 79       >                dw      Dict_Ptr + 2        // xt
 152+ EAFD             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAFD             >
 152+ EAFD             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAFD             >
 152+ EAFD             >//              ______________________________________________________________________
 152+ EAFD             >//              Dictionary part
 152+ EAFD             >
 152+ EAFD             >                org     Dict_Ptr
 152+ 79DA             >
 152+ 79DA FB 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 79DC             >
 152+ 79DC             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 79DC CD 62 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 79DF             >
 152+ 79DF             >
 152+ 79DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 79DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 79DF             >
 152+ 79DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 79DF 07 00       >                dw      7
 153+ 79E1
 154+ 79E1              //  ______________________________________________________________________
 155+ 79E1              //
 156+ 79E1              // flush        --
 157+ 79E1                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 79E1             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 79E1             >
 157+ 79E1             >Dict_Ptr        defl    $
 157+ 79E1             >
 157+ 79E1             >//              ______________________________________________________________________
 157+ 79E1             >//              Heap part
 157+ 79E1             >
 157+ 79E1             >
 157+ 79E1             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAFD             >
 157+ EAFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAFD             >Latest_Definition defl  Heap_Ptr
 157+ EAFD             >
 157+ EAFD             >                // dummy db directives used to calculate length of namec
 157+ EAFD 46 4C 55 53 >                db      "FLUSH"
 157+ EB01 48          >
 157+ EB02             >len_NFA         defl    $ - temp_NFA
 157+ EB02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAFD             >
 157+ EAFD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAFE 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EB02 48          >
 157+ EB03             >                org     $-1                 // alter last byte of Name just above to set
 157+ EB02 C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EB03             >
 157+ EB03 F3 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EB05             >Prev_Ptr        defl    Heap_Ptr
 157+ EB05             >
 157+ EB05             >mirror_Ptr      defl    $
 157+ EB05             >
 157+ EB05 E3 79       >                dw      Dict_Ptr + 2        // xt
 157+ EB07             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EB07             >
 157+ EB07             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EB07             >
 157+ EB07             >//              ______________________________________________________________________
 157+ EB07             >//              Dictionary part
 157+ EB07             >
 157+ EB07             >                org     Dict_Ptr
 157+ 79E1             >
 157+ 79E1 05 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 79E3             >
 157+ 79E3             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 79E3 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 79E6             >
 157+ 79E6             >
 157+ 79E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 79E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 79E6             >
 157+ 79E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 79E6 DC 79 B8 68                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 79EA 8E 6A
 159+ 79EC              Flush_Do:                                       // do
 160+ 79EC 34 64                        dw      C_DO
 161+ 79EE 8E 6A 46 79                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 79F2 0A 69
 162+ 79F4                                                              // loop
 163+ 79F4 E0 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 79F8 1D 78 96 69                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 79FC 0B 67 0A 69                  dw      F_SYNC, DROP            // f_sync drop
 166+ 7A00 4C 68                        dw      EXIT                    // exit
 167+ 7A02
 168+ 7A02              //  ______________________________________________________________________
 169+ 7A02              //
 170+ 7A02              // f_getline    a m fh -- n
 171+ 7A02              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 7A02              // Address a is left for subsequent processing
 173+ 7A02              // and n as the actual number of byte read, that is the length of line
 174+ 7A02                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 7A02             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 7A02             >
 174+ 7A02             >Dict_Ptr        defl    $
 174+ 7A02             >
 174+ 7A02             >//              ______________________________________________________________________
 174+ 7A02             >//              Heap part
 174+ 7A02             >
 174+ 7A02             >
 174+ 7A02             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EB07             >
 174+ EB07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EB07             >Latest_Definition defl  Heap_Ptr
 174+ EB07             >
 174+ EB07             >                // dummy db directives used to calculate length of namec
 174+ EB07 46 5F 47 45 >                db      "F_GETLINE"
 174+ EB0B 54 4C 49 4E >
 174+ EB0F 45          >
 174+ EB10             >len_NFA         defl    $ - temp_NFA
 174+ EB10             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EB07             >
 174+ EB07 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EB08 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EB0C 54 4C 49 4E >
 174+ EB10 45          >
 174+ EB11             >                org     $-1                 // alter last byte of Name just above to set
 174+ EB10 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EB11             >
 174+ EB11 FD 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EB13             >Prev_Ptr        defl    Heap_Ptr
 174+ EB13             >
 174+ EB13             >mirror_Ptr      defl    $
 174+ EB13             >
 174+ EB13 04 7A       >                dw      Dict_Ptr + 2        // xt
 174+ EB15             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EB15             >
 174+ EB15             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EB15             >
 174+ EB15             >//              ______________________________________________________________________
 174+ EB15             >//              Dictionary part
 174+ EB15             >
 174+ EB15             >                org     Dict_Ptr
 174+ 7A02             >
 174+ 7A02 13 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 7A04             >
 174+ 7A04             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 7A04 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 7A07             >
 174+ 7A07             >
 174+ 7A07             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 7A07             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 7A07             >
 174+ 7A07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 7A07 56 68                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 7A09 15 69                        dw      TUCK                    // tuck             ( m a m )
 177+ 7A0B 6C 68 17 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 7A0F A3 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 178+ 7A13 EF 6D
 179+ 7A15
 180+ 7A15 67 69 01 69                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 7A19 B8 68 1E 69                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 7A1D
 183+ 7A1D 6C 68 2F 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 7A21 A3 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 184+ 7A25 EF 6D
 185+ 7A27                                                              // if ( at least 1 chr was read )  \  fh
 186+ 7A27 F5 63                        dw      ZBRANCH
 187+ 7A29 3C 00                        dw      FGetline_Else - $
 188+ 7A2B A3 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 7A2F 29 65
 189+ 7A31 0A 69 0F 69                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 7A35 1E 69                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 7A37 A3 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 7A3B 29 65
 192+ 7A3D 0A 69 0F 69                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 7A41 2C 69 37 6C                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 7A45 25 69 A1 6B                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 7A49 A0 69
 195+ 7A4B 25 69 56 68                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 7A4F 67 69 61 68                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 7A53 8E 6A A9 68                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 7A57 61 68 E3 66                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 7A5B A3 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 199+ 7A5F EF 6D
 200+ 7A61                                                              // else
 201+ 7A61 E8 63                        dw      BRANCH
 202+ 7A63 0C 00                        dw      FGetline_Endif - $
 203+ 7A65              FGetline_Else:
 204+ 7A65 61 68                        dw          R_TO                //      r>              ( m d a fh )
 205+ 7A67 67 69 61 69                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 7A6B 0A 69 8E 6A                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 7A6F              FGetline_Endif:                                 // endif
 208+ 7A6F 56 68 25 69                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 7A73 25 69
 209+ 7A75 B8 68 1E 69                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 7A79 6C 68 8D 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 7A7D 74 69 9F 68                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 7A81 8E 6A 1E 69                  dw      ZERO, SWAP              // 0 swap
 213+ 7A85 D3 68 A0 69                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 7A89 6C 68 9F 68                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 7A8D BF 68
 215+ 7A8F 1E 69 6C 68                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 7A93 F2 6B
 216+ 7A95 A4 70                        dw      BLANK                   // blank
 217+ 7A97 61 68                        dw      R_TO                    // r>                   ( n )
 218+ 7A99 4C 68                        dw      EXIT                    // ;
 219+ 7A9B
 220+ 7A9B              //  ______________________________________________________________________
 221+ 7A9B              //
 222+ 7A9B              // f_include    fh --
 223+ 7A9B              // Given a filehandle includes the source from file
 224+ 7A9B                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 7A9B             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 7A9B             >
 224+ 7A9B             >Dict_Ptr        defl    $
 224+ 7A9B             >
 224+ 7A9B             >//              ______________________________________________________________________
 224+ 7A9B             >//              Heap part
 224+ 7A9B             >
 224+ 7A9B             >
 224+ 7A9B             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EB15             >
 224+ EB15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EB15             >Latest_Definition defl  Heap_Ptr
 224+ EB15             >
 224+ EB15             >                // dummy db directives used to calculate length of namec
 224+ EB15 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EB19 43 4C 55 44 >
 224+ EB1D 45          >
 224+ EB1E             >len_NFA         defl    $ - temp_NFA
 224+ EB1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EB15             >
 224+ EB15 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EB16 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EB1A 43 4C 55 44 >
 224+ EB1E 45          >
 224+ EB1F             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB1E C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB1F             >
 224+ EB1F 07 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB21             >Prev_Ptr        defl    Heap_Ptr
 224+ EB21             >
 224+ EB21             >mirror_Ptr      defl    $
 224+ EB21             >
 224+ EB21 9D 7A       >                dw      Dict_Ptr + 2        // xt
 224+ EB23             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB23             >
 224+ EB23             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB23             >
 224+ EB23             >//              ______________________________________________________________________
 224+ EB23             >//              Dictionary part
 224+ EB23             >
 224+ EB23             >                org     Dict_Ptr
 224+ 7A9B             >
 224+ 7A9B 21 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 7A9D             >
 224+ 7A9D             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 7A9D CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 7AA0             >
 224+ 7AA0             >
 224+ 7AA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 7AA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 7AA0             >
 224+ 7AA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 7AA0 2F 6B 96 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 7AA4 56 68
 226+ 7AA6 35 6B 96 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 7AAA 56 68
 227+ 7AAC 9B 6B 96 69                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 7AB0 56 68
 228+ 7AB2 6C 68                        dw      R_OP                    // r
 229+ 7AB4                                                              // if
 230+ 7AB4 F5 63                        dw      ZBRANCH
 231+ 7AB6 20 00                        dw      FInclude_Else_1 - $
 232+ 7AB8 6C 68 17 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 233+ 7ABC A3 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 233+ 7AC0 EF 6D
 234+ 7AC2 35 6B 96 69                  dw          TO_IN, FETCH        //      >in @ 2-
 235+ 7AC6 DB 68                        dw          TWO_MINUS
 236+ 7AC8 A1 6B 96 69                  dw          SPAN, FETCH         //      span @ -
 237+ 7ACC F2 6B                        dw          SUBTRACT
 238+ 7ACE E7 6B A9 68                  dw          S_TO_D, DPLUS       //      s>d d+
 239+ 7AD2                                                              // else
 240+ 7AD2 E8 63                        dw      BRANCH
 241+ 7AD4 06 00                        dw      FInclude_Endif_1 - $
 242+ 7AD6              FInclude_Else_1:
 243+ 7AD6 8E 6A 8E 6A                  dw          ZERO, ZERO          //      0 0
 244+ 7ADA                                                              // endif
 245+ 7ADA              FInclude_Endif_1:
 246+ 7ADA 56 68 56 68                  dw      TO_R, TO_R              // >r >r
 247+ 7ADE 9B 6B A0 69                  dw      SOURCE_ID, STORE        // source-id !
 248+ 7AE2              FInclude_Begin:                                 // begin
 249+ 7AE2 95 6A 89 79                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 249+ 7AE6 BF 6A
 250+ 7AE8 74 69 A4 70                  dw          TWO_DUP, BLANK      //      2dup blank
 251+ 7AEC 1E 69 B8 68                  dw          SWAP, ONE_PLUS      //      swap 1+
 252+ 7AF0 1E 69 D3 68                  dw          SWAP, CELL_MINUS    //      swap cell-
 253+ 7AF4 9B 6B 96 69                  dw          SOURCE_ID, FETCH    //      source-id @
 254+ 7AF8 04 7A                        dw          F_GETLINE           //      f_getline
 255+ 7AFA                                                              // while
 256+ 7AFA F5 63                        dw      ZBRANCH
 257+ 7AFC 14 00                        dw      FInclude_Repeat - $
 258+ 7AFE 95 6A 2F 6B                  dw          ONE, BLK, STORE     //      1 blk !
 258+ 7B02 A0 69
 259+ 7B04 8E 6A 35 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
 259+ 7B08 A0 69
 260+ 7B0A D4 74                        dw          INTERPRET           //      interpret
 261+ 7B0C E8 63                        dw      BRANCH
 262+ 7B0E D4 FF                        dw      FInclude_Begin - $
 263+ 7B10              FInclude_Repeat:                                // repeat
 264+ 7B10 9B 6B 96 69                  dw      SOURCE_ID, FETCH        // source-id @
 265+ 7B14 8E 6A 9B 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 265+ 7B18 A0 69
 266+ 7B1A FF 66                        dw      F_CLOSE                 // f_close
 267+ 7B1C A3 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 267+ 7B20 EF 6D
 268+ 7B22 61 68 61 68                  dw      R_TO, R_TO, R_TO        // r> r> r>
 268+ 7B26 61 68
 269+ 7B28 25 69 9B 6B                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 269+ 7B2C A0 69
 270+ 7B2E                                                              // if
 271+ 7B2E F5 63                        dw      ZBRANCH
 272+ 7B30 12 00                        dw      FInclude_Else_2 - $
 273+ 7B32 9B 6B 96 69                  dw          SOURCE_ID, FETCH    //      source-id @
 274+ 7B36 E3 66                        dw          F_SEEK              //      f_seek
 275+ 7B38 A3 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 275+ 7B3C EF 6D
 276+ 7B3E                                                              // else
 277+ 7B3E E8 63                        dw      BRANCH
 278+ 7B40 04 00                        dw      FInclude_Endif_2 - $
 279+ 7B42              FInclude_Else_2:
 280+ 7B42 61 69                        dw          TWO_DROP            //      2drop
 281+ 7B44              FInclude_Endif_2:                               // endif
 282+ 7B44 61 68 35 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 282+ 7B48 A0 69
 283+ 7B4A 61 68 2F 6B                  dw      R_TO, BLK, STORE        // r> blk !
 283+ 7B4E A0 69
 284+ 7B50 4C 68                        dw      EXIT                    // ;
 285+ 7B52
 286+ 7B52              //  ______________________________________________________________________
 287+ 7B52              //
 288+ 7B52              // open<         -- fh
 289+ 7B52              // Open the following filename and return it file-handle
 290+ 7B52              // Used in the form OPEN CCCC
 291+ 7B52                              Colon_Def OPEN_FH, "OPEN<", is_normal
 291+ 7B52             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 291+ 7B52             >
 291+ 7B52             >Dict_Ptr        defl    $
 291+ 7B52             >
 291+ 7B52             >//              ______________________________________________________________________
 291+ 7B52             >//              Heap part
 291+ 7B52             >
 291+ 7B52             >
 291+ 7B52             >                org     (Heap_Ptr & $1FFF) + $E000
 291+ EB23             >
 291+ EB23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ EB23             >Latest_Definition defl  Heap_Ptr
 291+ EB23             >
 291+ EB23             >                // dummy db directives used to calculate length of namec
 291+ EB23 4F 50 45 4E >                db      "OPEN<"
 291+ EB27 3C          >
 291+ EB28             >len_NFA         defl    $ - temp_NFA
 291+ EB28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ EB23             >
 291+ EB23 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ EB24 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 291+ EB28 3C          >
 291+ EB29             >                org     $-1                 // alter last byte of Name just above to set
 291+ EB28 BC          >                db      {b $} | END_BIT     // msb as name end
 291+ EB29             >
 291+ EB29 15 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 291+ EB2B             >Prev_Ptr        defl    Heap_Ptr
 291+ EB2B             >
 291+ EB2B             >mirror_Ptr      defl    $
 291+ EB2B             >
 291+ EB2B 54 7B       >                dw      Dict_Ptr + 2        // xt
 291+ EB2D             >Heap_Ptr        defl    $ - $E000           // save current HP
 291+ EB2D             >
 291+ EB2D             >Current_HP      defl  $ - $E000             // used to set HP once!
 291+ EB2D             >
 291+ EB2D             >//              ______________________________________________________________________
 291+ EB2D             >//              Dictionary part
 291+ EB2D             >
 291+ EB2D             >                org     Dict_Ptr
 291+ 7B52             >
 291+ 7B52 2B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 291+ 7B54             >
 291+ 7B54             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 7B54 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 7B57             >
 291+ 7B57             >
 291+ 7B57             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 7B57             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 7B57             >
 291+ 7B57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 7B57 B1 6A                        dw      BL
 293+ 7B59 D1 70 2B 6F                  dw      WORD, COUNT, OVER       // bl word count over
 293+ 7B5D 01 69
 294+ 7B5F 9F 68 8E 6A                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 294+ 7B63 1E 69 A0 69
 295+ 7B67 C2 70 95 6A                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 295+ 7B6B 5A 67
 296+ 7B6D A3 63 2B 00                  dw      LIT, 43                 // 43
 297+ 7B71 EF 6D                        dw      QERROR                  // ?error
 298+ 7B73 4C 68                        dw      EXIT                    // ;
 299+ 7B75
 300+ 7B75              //  ______________________________________________________________________
 301+ 7B75              //
 302+ 7B75              // use          -- cccc
 303+ 7B75              // Include the following filename
 304+ 7B75                              Colon_Def USE, "USE", is_normal
 304+ 7B75             >                New_Def  USE, "USE", Enter_Ptr, is_normal ; ok
 304+ 7B75             >
 304+ 7B75             >Dict_Ptr        defl    $
 304+ 7B75             >
 304+ 7B75             >//              ______________________________________________________________________
 304+ 7B75             >//              Heap part
 304+ 7B75             >
 304+ 7B75             >
 304+ 7B75             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ EB2D             >
 304+ EB2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ EB2D             >Latest_Definition defl  Heap_Ptr
 304+ EB2D             >
 304+ EB2D             >                // dummy db directives used to calculate length of namec
 304+ EB2D 55 53 45    >                db      "USE"
 304+ EB30             >len_NFA         defl    $ - temp_NFA
 304+ EB30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ EB2D             >
 304+ EB2D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ EB2E 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 304+ EB31             >                org     $-1                 // alter last byte of Name just above to set
 304+ EB30 C5          >                db      {b $} | END_BIT     // msb as name end
 304+ EB31             >
 304+ EB31 23 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ EB33             >Prev_Ptr        defl    Heap_Ptr
 304+ EB33             >
 304+ EB33             >mirror_Ptr      defl    $
 304+ EB33             >
 304+ EB33 77 7B       >                dw      Dict_Ptr + 2        // xt
 304+ EB35             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ EB35             >
 304+ EB35             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ EB35             >
 304+ EB35             >//              ______________________________________________________________________
 304+ EB35             >//              Dictionary part
 304+ EB35             >
 304+ EB35             >                org     Dict_Ptr
 304+ 7B75             >
 304+ 7B75 33 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 7B77             >
 304+ 7B77             >USE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 7B77 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 7B7A             >
 304+ 7B7A             >
 304+ 7B7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 7B7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 7B7A             >
 304+ 7B7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 7B7A 54 7B                        dw      OPEN_FH                 // open<
 306+ 7B7C 1D 78 96 69                  dw      BLK_FH, FETCH           // blk-fh @
 307+ 7B80 FF 66 0A 69                  dw      F_CLOSE, DROP           // f_close drop
 308+ 7B84 1D 78 A0 69                  dw      BLK_FH, STORE           // blk-fh !
 309+ 7B88 4C 68                        dw      EXIT                    // ;
 310+ 7B8A
 311+ 7B8A              //  ______________________________________________________________________
 312+ 7B8A              //
 313+ 7B8A              // include      -- cccc
 314+ 7B8A              // Include the following filename
 315+ 7B8A                              Colon_Def INCLUDE, "INCLUDE", is_normal
 315+ 7B8A             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 315+ 7B8A             >
 315+ 7B8A             >Dict_Ptr        defl    $
 315+ 7B8A             >
 315+ 7B8A             >//              ______________________________________________________________________
 315+ 7B8A             >//              Heap part
 315+ 7B8A             >
 315+ 7B8A             >
 315+ 7B8A             >                org     (Heap_Ptr & $1FFF) + $E000
 315+ EB35             >
 315+ EB35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 315+ EB35             >Latest_Definition defl  Heap_Ptr
 315+ EB35             >
 315+ EB35             >                // dummy db directives used to calculate length of namec
 315+ EB35 49 4E 43 4C >                db      "INCLUDE"
 315+ EB39 55 44 45    >
 315+ EB3C             >len_NFA         defl    $ - temp_NFA
 315+ EB3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 315+ EB35             >
 315+ EB35 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 315+ EB36 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 315+ EB3A 55 44 45    >
 315+ EB3D             >                org     $-1                 // alter last byte of Name just above to set
 315+ EB3C C5          >                db      {b $} | END_BIT     // msb as name end
 315+ EB3D             >
 315+ EB3D 2D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 315+ EB3F             >Prev_Ptr        defl    Heap_Ptr
 315+ EB3F             >
 315+ EB3F             >mirror_Ptr      defl    $
 315+ EB3F             >
 315+ EB3F 8C 7B       >                dw      Dict_Ptr + 2        // xt
 315+ EB41             >Heap_Ptr        defl    $ - $E000           // save current HP
 315+ EB41             >
 315+ EB41             >Current_HP      defl  $ - $E000             // used to set HP once!
 315+ EB41             >
 315+ EB41             >//              ______________________________________________________________________
 315+ EB41             >//              Dictionary part
 315+ EB41             >
 315+ EB41             >                org     Dict_Ptr
 315+ 7B8A             >
 315+ 7B8A 3F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 315+ 7B8C             >
 315+ 7B8C             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 315+ 7B8C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 315+ 7B8F             >
 315+ 7B8F             >
 315+ 7B8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 315+ 7B8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 315+ 7B8F             >
 315+ 7B8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 316+ 7B8F 54 7B                        dw      OPEN_FH                 // open
 317+ 7B91 25 69 9D 7A                  dw      DUP, F_INCLUDE          // dup f_include
 318+ 7B95 FF 66 0A 69                  dw      F_CLOSE, DROP           // f_close drop
 319+ 7B99 4C 68                        dw      EXIT                    // ;
 320+ 7B9B
 321+ 7B9B              //  ______________________________________________________________________
 322+ 7B9B              //
 323+ 7B9B              // needs
 324+ 7B9B              // check for cccc exists in vocabulary
 325+ 7B9B              // if it doesn't then  INCLUDE  inc/cccc.F
 326+ 7B9B
 327+ 7B9B              // temp filename cccc.f as counted string zero-padded
 328+ 7B9B                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 328+ 7B9B             >
 328+ 7B9B             >Dict_Ptr        defl    $
 328+ 7B9B             >
 328+ 7B9B             >//              ______________________________________________________________________
 328+ 7B9B             >//              Heap part
 328+ 7B9B             >
 328+ 7B9B             >
 328+ 7B9B             >                org     (Heap_Ptr & $1FFF) + $E000
 328+ EB41             >
 328+ EB41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 328+ EB41             >Latest_Definition defl  Heap_Ptr
 328+ EB41             >
 328+ EB41             >                // dummy db directives used to calculate length of namec
 328+ EB41 4E 45 45 44 >                db      "NEEDS-W"
 328+ EB45 53 2D 57    >
 328+ EB48             >len_NFA         defl    $ - temp_NFA
 328+ EB48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 328+ EB41             >
 328+ EB41 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 328+ EB42 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 328+ EB46 53 2D 57    >
 328+ EB49             >                org     $-1                 // alter last byte of Name just above to set
 328+ EB48 D7          >                db      {b $} | END_BIT     // msb as name end
 328+ EB49             >
 328+ EB49 35 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 328+ EB4B             >Prev_Ptr        defl    Heap_Ptr
 328+ EB4B             >
 328+ EB4B             >mirror_Ptr      defl    $
 328+ EB4B             >
 328+ EB4B 9D 7B       >                dw      Dict_Ptr + 2        // xt
 328+ EB4D             >Heap_Ptr        defl    $ - $E000           // save current HP
 328+ EB4D             >
 328+ EB4D             >Current_HP      defl  $ - $E000             // used to set HP once!
 328+ EB4D             >
 328+ EB4D             >//              ______________________________________________________________________
 328+ EB4D             >//              Dictionary part
 328+ EB4D             >
 328+ EB4D             >                org     Dict_Ptr
 328+ 7B9B             >
 328+ 7B9B 4B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 328+ 7B9D             >
 328+ 7B9D             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 328+ 7B9D CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 328+ 7BA0             >
 328+ 7BA0             >
 328+ 7BA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 328+ 7BA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 328+ 7BA0             >
 328+ 7BA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 329+ 7BA0 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 330+ 7BC3              // temp complete path+filename
 331+ 7BC3                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 331+ 7BC3             >
 331+ 7BC3             >Dict_Ptr        defl    $
 331+ 7BC3             >
 331+ 7BC3             >//              ______________________________________________________________________
 331+ 7BC3             >//              Heap part
 331+ 7BC3             >
 331+ 7BC3             >
 331+ 7BC3             >                org     (Heap_Ptr & $1FFF) + $E000
 331+ EB4D             >
 331+ EB4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ EB4D             >Latest_Definition defl  Heap_Ptr
 331+ EB4D             >
 331+ EB4D             >                // dummy db directives used to calculate length of namec
 331+ EB4D 4E 45 45 44 >                db      "NEEDS-FN"
 331+ EB51 53 2D 46 4E >
 331+ EB55             >len_NFA         defl    $ - temp_NFA
 331+ EB55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ EB4D             >
 331+ EB4D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ EB4E 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 331+ EB52 53 2D 46 4E >
 331+ EB56             >                org     $-1                 // alter last byte of Name just above to set
 331+ EB55 CE          >                db      {b $} | END_BIT     // msb as name end
 331+ EB56             >
 331+ EB56 41 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 331+ EB58             >Prev_Ptr        defl    Heap_Ptr
 331+ EB58             >
 331+ EB58             >mirror_Ptr      defl    $
 331+ EB58             >
 331+ EB58 C5 7B       >                dw      Dict_Ptr + 2        // xt
 331+ EB5A             >Heap_Ptr        defl    $ - $E000           // save current HP
 331+ EB5A             >
 331+ EB5A             >Current_HP      defl  $ - $E000             // used to set HP once!
 331+ EB5A             >
 331+ EB5A             >//              ______________________________________________________________________
 331+ EB5A             >//              Dictionary part
 331+ EB5A             >
 331+ EB5A             >                org     Dict_Ptr
 331+ 7BC3             >
 331+ 7BC3 58 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 331+ 7BC5             >
 331+ 7BC5             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 7BC5 CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 331+ 7BC8             >
 331+ 7BC8             >
 331+ 7BC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 7BC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 7BC8             >
 331+ 7BC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 7BC8 00 00 00...                  ds      40
 333+ 7BF0              // constant path
 334+ 7BF0                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 334+ 7BF0             >
 334+ 7BF0             >Dict_Ptr        defl    $
 334+ 7BF0             >
 334+ 7BF0             >//              ______________________________________________________________________
 334+ 7BF0             >//              Heap part
 334+ 7BF0             >
 334+ 7BF0             >
 334+ 7BF0             >                org     (Heap_Ptr & $1FFF) + $E000
 334+ EB5A             >
 334+ EB5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ EB5A             >Latest_Definition defl  Heap_Ptr
 334+ EB5A             >
 334+ EB5A             >                // dummy db directives used to calculate length of namec
 334+ EB5A 4E 45 45 44 >                db      "NEEDS-INC"
 334+ EB5E 53 2D 49 4E >
 334+ EB62 43          >
 334+ EB63             >len_NFA         defl    $ - temp_NFA
 334+ EB63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ EB5A             >
 334+ EB5A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ EB5B 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 334+ EB5F 53 2D 49 4E >
 334+ EB63 43          >
 334+ EB64             >                org     $-1                 // alter last byte of Name just above to set
 334+ EB63 C3          >                db      {b $} | END_BIT     // msb as name end
 334+ EB64             >
 334+ EB64 4D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 334+ EB66             >Prev_Ptr        defl    Heap_Ptr
 334+ EB66             >
 334+ EB66             >mirror_Ptr      defl    $
 334+ EB66             >
 334+ EB66 F2 7B       >                dw      Dict_Ptr + 2        // xt
 334+ EB68             >Heap_Ptr        defl    $ - $E000           // save current HP
 334+ EB68             >
 334+ EB68             >Current_HP      defl  $ - $E000             // used to set HP once!
 334+ EB68             >
 334+ EB68             >//              ______________________________________________________________________
 334+ EB68             >//              Dictionary part
 334+ EB68             >
 334+ EB68             >                org     Dict_Ptr
 334+ 7BF0             >
 334+ 7BF0 66 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 334+ 7BF2             >
 334+ 7BF2             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 7BF2 CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 334+ 7BF5             >
 334+ 7BF5             >
 334+ 7BF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 7BF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 7BF5             >
 334+ 7BF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 7BF5 04 69 6E 63                  db      4, "inc/", 0
 335+ 7BF9 2F 00
 336+ 7BFB                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 336+ 7BFB             >
 336+ 7BFB             >Dict_Ptr        defl    $
 336+ 7BFB             >
 336+ 7BFB             >//              ______________________________________________________________________
 336+ 7BFB             >//              Heap part
 336+ 7BFB             >
 336+ 7BFB             >
 336+ 7BFB             >                org     (Heap_Ptr & $1FFF) + $E000
 336+ EB68             >
 336+ EB68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ EB68             >Latest_Definition defl  Heap_Ptr
 336+ EB68             >
 336+ EB68             >                // dummy db directives used to calculate length of namec
 336+ EB68 4E 45 45 44 >                db      "NEEDS-LIB"
 336+ EB6C 53 2D 4C 49 >
 336+ EB70 42          >
 336+ EB71             >len_NFA         defl    $ - temp_NFA
 336+ EB71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ EB68             >
 336+ EB68 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ EB69 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 336+ EB6D 53 2D 4C 49 >
 336+ EB71 42          >
 336+ EB72             >                org     $-1                 // alter last byte of Name just above to set
 336+ EB71 C2          >                db      {b $} | END_BIT     // msb as name end
 336+ EB72             >
 336+ EB72 5A 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 336+ EB74             >Prev_Ptr        defl    Heap_Ptr
 336+ EB74             >
 336+ EB74             >mirror_Ptr      defl    $
 336+ EB74             >
 336+ EB74 FD 7B       >                dw      Dict_Ptr + 2        // xt
 336+ EB76             >Heap_Ptr        defl    $ - $E000           // save current HP
 336+ EB76             >
 336+ EB76             >Current_HP      defl  $ - $E000             // used to set HP once!
 336+ EB76             >
 336+ EB76             >//              ______________________________________________________________________
 336+ EB76             >//              Dictionary part
 336+ EB76             >
 336+ EB76             >                org     Dict_Ptr
 336+ 7BFB             >
 336+ 7BFB 74 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 336+ 7BFD             >
 336+ 7BFD             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 7BFD CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 336+ 7C00             >
 336+ 7C00             >
 336+ 7C00             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 7C00             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 7C00             >
 336+ 7C00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 7C00 04 6C 69 62                  db      4, "lib/", 0
 337+ 7C04 2F 00
 338+ 7C06
 339+ 7C06              // Concatenate path at a and filename and include it
 340+ 7C06              // No error is issued if filename doesn't exist.
 341+ 7C06                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 341+ 7C06             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 341+ 7C06             >
 341+ 7C06             >Dict_Ptr        defl    $
 341+ 7C06             >
 341+ 7C06             >//              ______________________________________________________________________
 341+ 7C06             >//              Heap part
 341+ 7C06             >
 341+ 7C06             >
 341+ 7C06             >                org     (Heap_Ptr & $1FFF) + $E000
 341+ EB76             >
 341+ EB76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 341+ EB76             >Latest_Definition defl  Heap_Ptr
 341+ EB76             >
 341+ EB76             >                // dummy db directives used to calculate length of namec
 341+ EB76 4E 45 45 44 >                db      "NEEDS/"
 341+ EB7A 53 2F       >
 341+ EB7C             >len_NFA         defl    $ - temp_NFA
 341+ EB7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 341+ EB76             >
 341+ EB76 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 341+ EB77 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 341+ EB7B 53 2F       >
 341+ EB7D             >                org     $-1                 // alter last byte of Name just above to set
 341+ EB7C AF          >                db      {b $} | END_BIT     // msb as name end
 341+ EB7D             >
 341+ EB7D 68 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 341+ EB7F             >Prev_Ptr        defl    Heap_Ptr
 341+ EB7F             >
 341+ EB7F             >mirror_Ptr      defl    $
 341+ EB7F             >
 341+ EB7F 08 7C       >                dw      Dict_Ptr + 2        // xt
 341+ EB81             >Heap_Ptr        defl    $ - $E000           // save current HP
 341+ EB81             >
 341+ EB81             >Current_HP      defl  $ - $E000             // used to set HP once!
 341+ EB81             >
 341+ EB81             >//              ______________________________________________________________________
 341+ EB81             >//              Dictionary part
 341+ EB81             >
 341+ EB81             >                org     Dict_Ptr
 341+ 7C06             >
 341+ 7C06 7F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 341+ 7C08             >
 341+ 7C08             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 341+ 7C08 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 341+ 7C0B             >
 341+ 7C0B             >
 341+ 7C0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 341+ 7C0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 341+ 7C0B             >
 341+ 7C0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 342+ 7C0B 2B 6F 15 69                  dw      COUNT, TUCK             // n a n
 343+ 7C0F C5 7B 1E 69                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 343+ 7C13 8D 67
 344+ 7C15 C5 7B 9F 68                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 345+ 7C19 9D 7B B8 68                  dw      NEEDS_W, ONE_PLUS, SWAP
 345+ 7C1D 1E 69
 346+ 7C1F A3 63 23 00                  dw      LIT, 35
 347+ 7C23 8D 67                        dw      CMOVE
 348+ 7C25 C5 7B                        dw      NEEDS_FN
 349+ 7C27 C2 70 95 6A                  dw      PAD, ONE, F_OPEN
 349+ 7C2B 5A 67
 350+ 7C2D 71 68                        dw      ZEQUAL
 351+ 7C2F F5 63                        dw      ZBRANCH
 352+ 7C31 08 00                        dw      Needs_1 - $
 353+ 7C33 9D 7A                        dw          F_INCLUDE
 354+ 7C35 E8 63                        dw      BRANCH
 355+ 7C37 04 00                        dw      Needs_2 - $
 356+ 7C39              Needs_1:
 357+ 7C39              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 358+ 7C39              //              dw          LIT, 43, MESSAGE
 359+ 7C39 0A 69                        dw          DROP
 360+ 7C3B              Needs_2:
 361+ 7C3B 4C 68                        dw      EXIT                    // ;
 362+ 7C3D
 363+ 7C3D
 364+ 7C3D                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 364+ 7C3D             >
 364+ 7C3D             >Dict_Ptr        defl    $
 364+ 7C3D             >
 364+ 7C3D             >//              ______________________________________________________________________
 364+ 7C3D             >//              Heap part
 364+ 7C3D             >
 364+ 7C3D             >
 364+ 7C3D             >                org     (Heap_Ptr & $1FFF) + $E000
 364+ EB81             >
 364+ EB81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ EB81             >Latest_Definition defl  Heap_Ptr
 364+ EB81             >
 364+ EB81             >                // dummy db directives used to calculate length of namec
 364+ EB81 4E 44 4F 4D >                db      "NDOM"
 364+ EB85             >len_NFA         defl    $ - temp_NFA
 364+ EB85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ EB81             >
 364+ EB81 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ EB82 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 364+ EB86             >                org     $-1                 // alter last byte of Name just above to set
 364+ EB85 CD          >                db      {b $} | END_BIT     // msb as name end
 364+ EB86             >
 364+ EB86 76 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 364+ EB88             >Prev_Ptr        defl    Heap_Ptr
 364+ EB88             >
 364+ EB88             >mirror_Ptr      defl    $
 364+ EB88             >
 364+ EB88 3F 7C       >                dw      Dict_Ptr + 2        // xt
 364+ EB8A             >Heap_Ptr        defl    $ - $E000           // save current HP
 364+ EB8A             >
 364+ EB8A             >Current_HP      defl  $ - $E000             // used to set HP once!
 364+ EB8A             >
 364+ EB8A             >//              ______________________________________________________________________
 364+ EB8A             >//              Dictionary part
 364+ EB8A             >
 364+ EB8A             >                org     Dict_Ptr
 364+ 7C3D             >
 364+ 7C3D 88 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 364+ 7C3F             >
 364+ 7C3F             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 7C3F CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 364+ 7C42             >
 364+ 7C42             >
 364+ 7C42             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 7C42             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 7C42             >
 364+ 7C42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 7C42              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 366+ 7C42 3A 3F 2F 2A                  db ':?/*|\<>"'
 366+ 7C46 7C 5C 3C 3E
 366+ 7C4A 22
 367+ 7C4B 00                           db 0
 368+ 7C4C
 369+ 7C4C                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 369+ 7C4C             >
 369+ 7C4C             >Dict_Ptr        defl    $
 369+ 7C4C             >
 369+ 7C4C             >//              ______________________________________________________________________
 369+ 7C4C             >//              Heap part
 369+ 7C4C             >
 369+ 7C4C             >
 369+ 7C4C             >                org     (Heap_Ptr & $1FFF) + $E000
 369+ EB8A             >
 369+ EB8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ EB8A             >Latest_Definition defl  Heap_Ptr
 369+ EB8A             >
 369+ EB8A             >                // dummy db directives used to calculate length of namec
 369+ EB8A 4E 43 44 4D >                db      "NCDM"
 369+ EB8E             >len_NFA         defl    $ - temp_NFA
 369+ EB8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ EB8A             >
 369+ EB8A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ EB8B 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 369+ EB8F             >                org     $-1                 // alter last byte of Name just above to set
 369+ EB8E CD          >                db      {b $} | END_BIT     // msb as name end
 369+ EB8F             >
 369+ EB8F 81 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 369+ EB91             >Prev_Ptr        defl    Heap_Ptr
 369+ EB91             >
 369+ EB91             >mirror_Ptr      defl    $
 369+ EB91             >
 369+ EB91 4E 7C       >                dw      Dict_Ptr + 2        // xt
 369+ EB93             >Heap_Ptr        defl    $ - $E000           // save current HP
 369+ EB93             >
 369+ EB93             >Current_HP      defl  $ - $E000             // used to set HP once!
 369+ EB93             >
 369+ EB93             >//              ______________________________________________________________________
 369+ EB93             >//              Dictionary part
 369+ EB93             >
 369+ EB93             >                org     Dict_Ptr
 369+ 7C4C             >
 369+ 7C4C 91 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 369+ 7C4E             >
 369+ 7C4E             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 7C4E CD 18 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 369+ 7C51             >
 369+ 7C51             >
 369+ 7C51             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 7C51             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 7C51             >
 369+ 7C51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 7C51              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 371+ 7C51 5F 5E 25 26                  db '_^%&$_{}~'
 371+ 7C55 24 5F 7B 7D
 371+ 7C59 7E
 372+ 7C5A 00                           db 0
 373+ 7C5B
 374+ 7C5B              // Replace illegal character in filename using the map here above
 375+ 7C5B              // at the moment we need only  "
 376+ 7C5B                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 376+ 7C5B             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 376+ 7C5B             >
 376+ 7C5B             >Dict_Ptr        defl    $
 376+ 7C5B             >
 376+ 7C5B             >//              ______________________________________________________________________
 376+ 7C5B             >//              Heap part
 376+ 7C5B             >
 376+ 7C5B             >
 376+ 7C5B             >                org     (Heap_Ptr & $1FFF) + $E000
 376+ EB93             >
 376+ EB93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 376+ EB93             >Latest_Definition defl  Heap_Ptr
 376+ EB93             >
 376+ EB93             >                // dummy db directives used to calculate length of namec
 376+ EB93 4D 41 50 2D >                db      "MAP-FN"
 376+ EB97 46 4E       >
 376+ EB99             >len_NFA         defl    $ - temp_NFA
 376+ EB99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 376+ EB93             >
 376+ EB93 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 376+ EB94 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 376+ EB98 46 4E       >
 376+ EB9A             >                org     $-1                 // alter last byte of Name just above to set
 376+ EB99 CE          >                db      {b $} | END_BIT     // msb as name end
 376+ EB9A             >
 376+ EB9A 8A 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 376+ EB9C             >Prev_Ptr        defl    Heap_Ptr
 376+ EB9C             >
 376+ EB9C             >mirror_Ptr      defl    $
 376+ EB9C             >
 376+ EB9C 5D 7C       >                dw      Dict_Ptr + 2        // xt
 376+ EB9E             >Heap_Ptr        defl    $ - $E000           // save current HP
 376+ EB9E             >
 376+ EB9E             >Current_HP      defl  $ - $E000             // used to set HP once!
 376+ EB9E             >
 376+ EB9E             >//              ______________________________________________________________________
 376+ EB9E             >//              Dictionary part
 376+ EB9E             >
 376+ EB9E             >                org     Dict_Ptr
 376+ 7C5B             >
 376+ 7C5B 9C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 376+ 7C5D             >
 376+ 7C5D             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 376+ 7C5D CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 376+ 7C60             >
 376+ 7C60             >
 376+ 7C60             >                endif           ; ok        // for other definitions it "points" the correct handler
 376+ 7C60             >                // Use of "; ok" to suppress "warning[fwdref]"
 376+ 7C60             >
 376+ 7C60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 377+ 7C60 2B 6F 38 6F                  dw      COUNT, BOUNDS
 378+ 7C64 34 64                        dw      C_DO
 379+ 7C66              Needs_3:
 380+ 7C66 4E 7C 3F 7C                  dw          NCDM, NDOM, LIT, 10
 380+ 7C6A A3 63 0A 00
 381+ 7C6E 3A 64 AB 69                  dw          I, CFETCH
 382+ 7C72 5B 65                        dw          C_MAP
 383+ 7C74 3A 64 B4 69                  dw          I, CSTORE
 384+ 7C78              Needs_4:
 385+ 7C78 E0 63                        dw      C_LOOP
 386+ 7C7A EC FF                        dw      Needs_3 - $
 387+ 7C7C 4C 68                        dw      EXIT
 388+ 7C7E
 389+ 7C7E
 390+ 7C7E              // include  "path/cccc.f" if cccc is not defined
 391+ 7C7E              // filename cccc.f is temporary stored at NEEDS-W
 392+ 7C7E                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 392+ 7C7E             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 392+ 7C7E             >
 392+ 7C7E             >Dict_Ptr        defl    $
 392+ 7C7E             >
 392+ 7C7E             >//              ______________________________________________________________________
 392+ 7C7E             >//              Heap part
 392+ 7C7E             >
 392+ 7C7E             >
 392+ 7C7E             >                org     (Heap_Ptr & $1FFF) + $E000
 392+ EB9E             >
 392+ EB9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ EB9E             >Latest_Definition defl  Heap_Ptr
 392+ EB9E             >
 392+ EB9E             >                // dummy db directives used to calculate length of namec
 392+ EB9E 4E 45 45 44 >                db      "NEEDS-F"
 392+ EBA2 53 2D 46    >
 392+ EBA5             >len_NFA         defl    $ - temp_NFA
 392+ EBA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ EB9E             >
 392+ EB9E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ EB9F 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 392+ EBA3 53 2D 46    >
 392+ EBA6             >                org     $-1                 // alter last byte of Name just above to set
 392+ EBA5 C6          >                db      {b $} | END_BIT     // msb as name end
 392+ EBA6             >
 392+ EBA6 93 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 392+ EBA8             >Prev_Ptr        defl    Heap_Ptr
 392+ EBA8             >
 392+ EBA8             >mirror_Ptr      defl    $
 392+ EBA8             >
 392+ EBA8 80 7C       >                dw      Dict_Ptr + 2        // xt
 392+ EBAA             >Heap_Ptr        defl    $ - $E000           // save current HP
 392+ EBAA             >
 392+ EBAA             >Current_HP      defl  $ - $E000             // used to set HP once!
 392+ EBAA             >
 392+ EBAA             >//              ______________________________________________________________________
 392+ EBAA             >//              Dictionary part
 392+ EBAA             >
 392+ EBAA             >                org     Dict_Ptr
 392+ 7C7E             >
 392+ 7C7E A8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 392+ 7C80             >
 392+ 7C80             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 7C80 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 392+ 7C83             >
 392+ 7C83             >
 392+ 7C83             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 7C83             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 7C83             >
 392+ 7C83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 7C83 11 73                        dw      LFIND
 394+ 7C85 F5 63                        dw      ZBRANCH
 395+ 7C87 0A 00                        dw      Needs_5 - $
 396+ 7C89
 397+ 7C89 0A 69 61 69                  dw          DROP, TWO_DROP
 398+ 7C8D E8 63                        dw      BRANCH
 399+ 7C8F 2C 00                        dw      Needs_6 - $
 400+ 7C91              Needs_5:
 401+ 7C91 9D 7B                        dw          NEEDS_W
 402+ 7C93 A3 63 23 00                  dw          LIT, 35
 403+ 7C97 99 70                        dw          ERASE                   // a
 404+ 7C99 B3 6B AB 69                  dw          HERE, CFETCH, ONE_PLUS  // a n
 404+ 7C9D B8 68
 405+ 7C9F B3 6B 01 69                  dw          HERE, OVER              // a n here n
 406+ 7CA3 9D 7B 1E 69                  dw          NEEDS_W, SWAP, CMOVE    // a n
 406+ 7CA7 8D 67
 407+ 7CA9 9D 7B 5D 7C                  dw          NEEDS_W, NEEDS_CHECK
 408+ 7CAD 9D 7B 9F 68                  dw          NEEDS_W, PLUS           // a a1+1
 409+ 7CB1 A3 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 410+ 7CB5 1E 69 A0 69                  dw          SWAP, STORE             // a
 411+ 7CB9 08 7C                        dw          NEEDS_SLASH
 412+ 7CBB              Needs_6:
 413+ 7CBB 4C 68                        dw      EXIT
 414+ 7CBD
 415+ 7CBD
 416+ 7CBD              // check for cccc exists in vocabulary
 417+ 7CBD              // if it doesn't then  INCLUDE  inc/cccc.F
 418+ 7CBD              // search in inc subdirectory
 419+ 7CBD                              Colon_Def NEEDS, "NEEDS", is_normal
 419+ 7CBD             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 419+ 7CBD             >
 419+ 7CBD             >Dict_Ptr        defl    $
 419+ 7CBD             >
 419+ 7CBD             >//              ______________________________________________________________________
 419+ 7CBD             >//              Heap part
 419+ 7CBD             >
 419+ 7CBD             >
 419+ 7CBD             >                org     (Heap_Ptr & $1FFF) + $E000
 419+ EBAA             >
 419+ EBAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ EBAA             >Latest_Definition defl  Heap_Ptr
 419+ EBAA             >
 419+ EBAA             >                // dummy db directives used to calculate length of namec
 419+ EBAA 4E 45 45 44 >                db      "NEEDS"
 419+ EBAE 53          >
 419+ EBAF             >len_NFA         defl    $ - temp_NFA
 419+ EBAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ EBAA             >
 419+ EBAA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ EBAB 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 419+ EBAF 53          >
 419+ EBB0             >                org     $-1                 // alter last byte of Name just above to set
 419+ EBAF D3          >                db      {b $} | END_BIT     // msb as name end
 419+ EBB0             >
 419+ EBB0 9E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 419+ EBB2             >Prev_Ptr        defl    Heap_Ptr
 419+ EBB2             >
 419+ EBB2             >mirror_Ptr      defl    $
 419+ EBB2             >
 419+ EBB2 BF 7C       >                dw      Dict_Ptr + 2        // xt
 419+ EBB4             >Heap_Ptr        defl    $ - $E000           // save current HP
 419+ EBB4             >
 419+ EBB4             >Current_HP      defl  $ - $E000             // used to set HP once!
 419+ EBB4             >
 419+ EBB4             >//              ______________________________________________________________________
 419+ EBB4             >//              Dictionary part
 419+ EBB4             >
 419+ EBB4             >                org     Dict_Ptr
 419+ 7CBD             >
 419+ 7CBD B2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 419+ 7CBF             >
 419+ 7CBF             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 7CBF CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 7CC2             >
 419+ 7CC2             >
 419+ 7CC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 7CC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 7CC2             >
 419+ 7CC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 7CC2 35 6B 96 69                  dw      TO_IN, FETCH
 421+ 7CC6 25 69                        dw      DUP
 422+ 7CC8 F2 7B 80 7C                  dw      NEEDS_INC, NEEDS_PATH
 423+ 7CCC 35 6B A0 69                  dw      TO_IN, STORE
 424+ 7CD0 FD 7B 80 7C                  dw      NEEDS_LIB, NEEDS_PATH
 425+ 7CD4 35 6B A0 69                  dw      TO_IN, STORE
 426+ 7CD8 11 73                        dw      LFIND
 427+ 7CDA F5 63                        dw      ZBRANCH
 428+ 7CDC 08 00                        dw      Needs_10 - $
 429+ 7CDE 61 69                        dw          TWO_DROP
 430+ 7CE0 E8 63                        dw      BRANCH
 431+ 7CE2 10 00                        dw      Needs_11 - $
 432+ 7CE4              Needs_10:
 433+ 7CE4 9D 7B 2B 6F                  dw      NEEDS_W, COUNT, TYPE, SPACE
 433+ 7CE8 7F 6F 84 6C
 434+ 7CEC A3 63 2B 00                  dw      LIT, 43, MESSAGE
 434+ 7CF0 A2 77
 435+ 7CF2              Needs_11:
 436+ 7CF2 4C 68                        dw      EXIT
 437+ 7CF4
 438+ 7CF4
 439+ 7CF4              //  ______________________________________________________________________
 440+ 7CF4              //
 441+ 7CF4              // load         n --
 442+ 7CF4                              Colon_Def LOAD, "LOAD", is_normal
 442+ 7CF4             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 442+ 7CF4             >
 442+ 7CF4             >Dict_Ptr        defl    $
 442+ 7CF4             >
 442+ 7CF4             >//              ______________________________________________________________________
 442+ 7CF4             >//              Heap part
 442+ 7CF4             >
 442+ 7CF4             >
 442+ 7CF4             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ EBB4             >
 442+ EBB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ EBB4             >Latest_Definition defl  Heap_Ptr
 442+ EBB4             >
 442+ EBB4             >                // dummy db directives used to calculate length of namec
 442+ EBB4 4C 4F 41 44 >                db      "LOAD"
 442+ EBB8             >len_NFA         defl    $ - temp_NFA
 442+ EBB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ EBB4             >
 442+ EBB4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ EBB5 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 442+ EBB9             >                org     $-1                 // alter last byte of Name just above to set
 442+ EBB8 C4          >                db      {b $} | END_BIT     // msb as name end
 442+ EBB9             >
 442+ EBB9 AA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ EBBB             >Prev_Ptr        defl    Heap_Ptr
 442+ EBBB             >
 442+ EBBB             >mirror_Ptr      defl    $
 442+ EBBB             >
 442+ EBBB F6 7C       >                dw      Dict_Ptr + 2        // xt
 442+ EBBD             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ EBBD             >
 442+ EBBD             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ EBBD             >
 442+ EBBD             >//              ______________________________________________________________________
 442+ EBBD             >//              Dictionary part
 442+ EBBD             >
 442+ EBBD             >                org     Dict_Ptr
 442+ 7CF4             >
 442+ 7CF4 BB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 7CF6             >
 442+ 7CF6             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 7CF6 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 7CF9             >
 442+ 7CF9             >
 442+ 7CF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 7CF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 7CF9             >
 442+ 7CF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 7CF9 2F 6B 96 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 443+ 7CFD 56 68
 444+ 7CFF 35 6B 96 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 444+ 7D03 56 68
 445+ 7D05
 446+ 7D05 8E 6A 35 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 446+ 7D09 A0 69
 447+ 7D0B C6 6A 2E 77                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 447+ 7D0F 2F 6B A0 69
 448+ 7D13 D4 74                        dw      INTERPRET               // interpret
 449+ 7D15
 450+ 7D15 61 68 35 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 450+ 7D19 A0 69
 451+ 7D1B 61 68 2F 6B                  dw      R_TO, BLK, STORE        // r> blk !
 451+ 7D1F A0 69
 452+ 7D21 4C 68                        dw      EXIT                    // ;
 453+ 7D23
 454+ 7D23              //  ______________________________________________________________________
 455+ 7D23              //
 456+ 7D23              // -->          --
 457+ 7D23                              Colon_Def LOAD_NEXT, "-->", is_immediate
 457+ 7D23             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 457+ 7D23             >
 457+ 7D23             >Dict_Ptr        defl    $
 457+ 7D23             >
 457+ 7D23             >//              ______________________________________________________________________
 457+ 7D23             >//              Heap part
 457+ 7D23             >
 457+ 7D23             >
 457+ 7D23             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ EBBD             >
 457+ EBBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ EBBD             >Latest_Definition defl  Heap_Ptr
 457+ EBBD             >
 457+ EBBD             >                // dummy db directives used to calculate length of namec
 457+ EBBD 2D 2D 3E    >                db      "-->"
 457+ EBC0             >len_NFA         defl    $ - temp_NFA
 457+ EBC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ EBBD             >
 457+ EBBD C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ EBBE 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 457+ EBC1             >                org     $-1                 // alter last byte of Name just above to set
 457+ EBC0 BE          >                db      {b $} | END_BIT     // msb as name end
 457+ EBC1             >
 457+ EBC1 B4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ EBC3             >Prev_Ptr        defl    Heap_Ptr
 457+ EBC3             >
 457+ EBC3             >mirror_Ptr      defl    $
 457+ EBC3             >
 457+ EBC3 25 7D       >                dw      Dict_Ptr + 2        // xt
 457+ EBC5             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ EBC5             >
 457+ EBC5             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ EBC5             >
 457+ EBC5             >//              ______________________________________________________________________
 457+ EBC5             >//              Dictionary part
 457+ EBC5             >
 457+ EBC5             >                org     Dict_Ptr
 457+ 7D23             >
 457+ 7D23 C3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 7D25             >
 457+ 7D25             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 7D25 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 7D28             >
 457+ 7D28             >
 457+ 7D28             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 7D28             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 7D28             >
 457+ 7D28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 7D28 4C 6E                        dw      QLOADING                // ?loading
 459+ 7D2A 8E 6A 35 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 459+ 7D2E A0 69
 460+ 7D30 C6 6A                        dw      BSCR                    // b/scr
 461+ 7D32 2F 6B 96 69                  dw      BLK, FETCH              // blk @
 462+ 7D36 01 69                        dw      OVER                    // over
 463+ 7D38 53 77                        dw      MOD                     // mod
 464+ 7D3A F2 6B                        dw      SUBTRACT                // -
 465+ 7D3C 2F 6B 7E 69                  dw      BLK, PLUSSTORE          // +!
 466+ 7D40 4C 68                        dw      EXIT                    // ;
 467+ 7D42
 468+ 7D42              //  ______________________________________________________________________
 469+ 7D42              //
 470+ 7D42              // '            -- xt
 471+ 7D42                              Colon_Def TICK, "'", is_normal
 471+ 7D42             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 471+ 7D42             >
 471+ 7D42             >Dict_Ptr        defl    $
 471+ 7D42             >
 471+ 7D42             >//              ______________________________________________________________________
 471+ 7D42             >//              Heap part
 471+ 7D42             >
 471+ 7D42             >
 471+ 7D42             >                org     (Heap_Ptr & $1FFF) + $E000
 471+ EBC5             >
 471+ EBC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ EBC5             >Latest_Definition defl  Heap_Ptr
 471+ EBC5             >
 471+ EBC5             >                // dummy db directives used to calculate length of namec
 471+ EBC5 27          >                db      "'"
 471+ EBC6             >len_NFA         defl    $ - temp_NFA
 471+ EBC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ EBC5             >
 471+ EBC5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ EBC6 27          >                db      "'"               // name string in 7-bit ascii, but
 471+ EBC7             >                org     $-1                 // alter last byte of Name just above to set
 471+ EBC6 A7          >                db      {b $} | END_BIT     // msb as name end
 471+ EBC7             >
 471+ EBC7 BD 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 471+ EBC9             >Prev_Ptr        defl    Heap_Ptr
 471+ EBC9             >
 471+ EBC9             >mirror_Ptr      defl    $
 471+ EBC9             >
 471+ EBC9 44 7D       >                dw      Dict_Ptr + 2        // xt
 471+ EBCB             >Heap_Ptr        defl    $ - $E000           // save current HP
 471+ EBCB             >
 471+ EBCB             >Current_HP      defl  $ - $E000             // used to set HP once!
 471+ EBCB             >
 471+ EBCB             >//              ______________________________________________________________________
 471+ EBCB             >//              Dictionary part
 471+ EBCB             >
 471+ EBCB             >                org     Dict_Ptr
 471+ 7D42             >
 471+ 7D42 C9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 471+ 7D44             >
 471+ 7D44             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 7D44 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 7D47             >
 471+ 7D47             >
 471+ 7D47             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 7D47             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 7D47             >
 471+ 7D47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 7D47 11 73                        dw      LFIND                   // -find
 473+ 7D49 71 68                        dw      ZEQUAL                  // 0=
 474+ 7D4B 8E 6A EF 6D                  dw      ZERO, QERROR            // 0 ?error
 475+ 7D4F 0A 69                        dw      DROP                    // drop
 476+ 7D51 4C 68                        dw      EXIT                    // ;
 477+ 7D53
 478+ 7D53              //  ______________________________________________________________________
 479+ 7D53              //
 480+ 7D53              // forget       -- cccc
 481+ 7D53                              Colon_Def FORGET, "FORGET", is_normal
 481+ 7D53             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 481+ 7D53             >
 481+ 7D53             >Dict_Ptr        defl    $
 481+ 7D53             >
 481+ 7D53             >//              ______________________________________________________________________
 481+ 7D53             >//              Heap part
 481+ 7D53             >
 481+ 7D53             >
 481+ 7D53             >                org     (Heap_Ptr & $1FFF) + $E000
 481+ EBCB             >
 481+ EBCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ EBCB             >Latest_Definition defl  Heap_Ptr
 481+ EBCB             >
 481+ EBCB             >                // dummy db directives used to calculate length of namec
 481+ EBCB 46 4F 52 47 >                db      "FORGET"
 481+ EBCF 45 54       >
 481+ EBD1             >len_NFA         defl    $ - temp_NFA
 481+ EBD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ EBCB             >
 481+ EBCB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ EBCC 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 481+ EBD0 45 54       >
 481+ EBD2             >                org     $-1                 // alter last byte of Name just above to set
 481+ EBD1 D4          >                db      {b $} | END_BIT     // msb as name end
 481+ EBD2             >
 481+ EBD2 C5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 481+ EBD4             >Prev_Ptr        defl    Heap_Ptr
 481+ EBD4             >
 481+ EBD4             >mirror_Ptr      defl    $
 481+ EBD4             >
 481+ EBD4 55 7D       >                dw      Dict_Ptr + 2        // xt
 481+ EBD6             >Heap_Ptr        defl    $ - $E000           // save current HP
 481+ EBD6             >
 481+ EBD6             >Current_HP      defl  $ - $E000             // used to set HP once!
 481+ EBD6             >
 481+ EBD6             >//              ______________________________________________________________________
 481+ EBD6             >//              Dictionary part
 481+ EBD6             >
 481+ EBD6             >                org     Dict_Ptr
 481+ 7D53             >
 481+ 7D53 D4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 481+ 7D55             >
 481+ 7D55             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 7D55 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 7D58             >
 481+ 7D58             >
 481+ 7D58             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 7D58             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 7D58             >
 481+ 7D58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 7D58 53 6B 96 69                  dw      CURRENT, FETCH          // current @
 483+ 7D5C 4D 6B 96 69                  dw      CONTEXT, FETCH          // context @
 484+ 7D60 F2 6B A3 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 484+ 7D64 17 00 EF 6D
 485+ 7D68 44 7D 6E 6D                  dw      TICK, TO_BODY           // ' >body
 486+ 7D6C 25 69 05 6B                  dw      DUP, FENCE, FETCH       // dup fence @
 486+ 7D70 96 69
 487+ 7D72 09 6C A3 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 487+ 7D76 15 00 EF 6D
 488+ 7D7A 25 69 A3 6D                  dw      DUP, NFA                // dup nfa
 489+ 7D7E
 490+ 7D7E                          //  dw      DUP
 491+ 7D7E                          //  dw      LIT, $E000, LESS
 492+ 7D7E                          //  dw      MMU7_FETCH, ONE, EQUALS
 493+ 7D7E                          //  dw      OR_OP, NOT_OP
 494+ 7D7E                          //  dw      ZBRANCH
 495+ 7D7E                          //  dw      Forget_then - $
 496+ 7D7E
 497+ 7D7E AC 6C CF 6C                  dw      MMU7_FETCH, FROM_FAR
 498+ 7D82 23 6B A0 69                  dw      HP, STORE
 499+ 7D86 25 69 98 6D                  dw      DUP, CFA, CELL_MINUS
 499+ 7D8A D3 68
 500+ 7D8C              // Forget_then:
 501+ 7D8C 0B 6B A0 69                  dw      DP, STORE               // dp !
 502+ 7D90 AE 6D 96 69                  dw      LFA, FETCH              // lfa @
 503+ 7D94 4D 6B 96 69                  dw      CONTEXT, FETCH, STORE   // context @ !
 503+ 7D98 A0 69
 504+ 7D9A 4C 68                        dw      EXIT                    // ;
 505+ 7D9C
 506+ 7D9C              //  ______________________________________________________________________
 507+ 7D9C              //
 508+ 7D9C              // marker       -- cccc
 509+ 7D9C                              Colon_Def MARKER, "MARKER", is_immediate
 509+ 7D9C             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 509+ 7D9C             >
 509+ 7D9C             >Dict_Ptr        defl    $
 509+ 7D9C             >
 509+ 7D9C             >//              ______________________________________________________________________
 509+ 7D9C             >//              Heap part
 509+ 7D9C             >
 509+ 7D9C             >
 509+ 7D9C             >                org     (Heap_Ptr & $1FFF) + $E000
 509+ EBD6             >
 509+ EBD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 509+ EBD6             >Latest_Definition defl  Heap_Ptr
 509+ EBD6             >
 509+ EBD6             >                // dummy db directives used to calculate length of namec
 509+ EBD6 4D 41 52 4B >                db      "MARKER"
 509+ EBDA 45 52       >
 509+ EBDC             >len_NFA         defl    $ - temp_NFA
 509+ EBDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 509+ EBD6             >
 509+ EBD6 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 509+ EBD7 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 509+ EBDB 45 52       >
 509+ EBDD             >                org     $-1                 // alter last byte of Name just above to set
 509+ EBDC D2          >                db      {b $} | END_BIT     // msb as name end
 509+ EBDD             >
 509+ EBDD CB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 509+ EBDF             >Prev_Ptr        defl    Heap_Ptr
 509+ EBDF             >
 509+ EBDF             >mirror_Ptr      defl    $
 509+ EBDF             >
 509+ EBDF 9E 7D       >                dw      Dict_Ptr + 2        // xt
 509+ EBE1             >Heap_Ptr        defl    $ - $E000           // save current HP
 509+ EBE1             >
 509+ EBE1             >Current_HP      defl  $ - $E000             // used to set HP once!
 509+ EBE1             >
 509+ EBE1             >//              ______________________________________________________________________
 509+ EBE1             >//              Dictionary part
 509+ EBE1             >
 509+ EBE1             >                org     Dict_Ptr
 509+ 7D9C             >
 509+ 7D9C DF 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 509+ 7D9E             >
 509+ 7D9E             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 509+ 7D9E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 509+ 7DA1             >
 509+ 7DA1             >
 509+ 7DA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 509+ 7DA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 509+ 7DA1             >
 509+ 7DA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 510+ 7DA1 03 6F                        dw      CBUILDS
 511+ 7DA3 11 6B 96 69                  dw      VOC_LINK, FETCH, COMMA
 511+ 7DA7 C9 6B
 512+ 7DA9 53 6B 96 69                  dw      CURRENT, FETCH, COMMA
 512+ 7DAD C9 6B
 513+ 7DAF 4D 6B 96 69                  dw      CONTEXT, FETCH, COMMA
 513+ 7DB3 C9 6B
 514+ 7DB5 53 6B 96 69                  dw      CURRENT, FETCH, FETCH,  COMMA
 514+ 7DB9 96 69 C9 6B
 515+ 7DBD 5F 6D BD 6D                  dw      LATEST, PFA, LFA, FETCH, COMMA
 515+ 7DC1 AE 6D 96 69
 515+ 7DC5 C9 6B
 516+ 7DC7 0E 6F                        dw      DOES_TO
 517+ 7DC9 25 69 96 69                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 517+ 7DCD 11 6B A0 69
 517+ 7DD1 CE 68
 518+ 7DD3 25 69 96 69                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 518+ 7DD7 53 6B A0 69
 518+ 7DDB CE 68
 519+ 7DDD 25 69 96 69                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 519+ 7DE1 4D 6B A0 69
 519+ 7DE5 CE 68
 520+ 7DE7 25 69 96 69                  dw      DUP, FETCH
 521+ 7DEB                          //  dw      DUP, QHEAPP
 522+ 7DEB                          //  dw      ZBRANCH
 523+ 7DEB                          //  dw      Marker_then - $
 524+ 7DEB 25 69 23 6B                  dw          DUP, HP, STORE
 524+ 7DEF A0 69
 525+ 7DF1 BD 6D 98 6D                  dw          PFA, CFA, CELL_MINUS
 525+ 7DF5 D3 68
 526+ 7DF7              // Marker_then:
 527+ 7DF7 0B 6B A0 69                  dw      DP, STORE, CELL_PLUS
 527+ 7DFB CE 68
 528+ 7DFD 96 69 53 6B                  dw      FETCH, CURRENT, FETCH, STORE
 528+ 7E01 96 69 A0 69
 529+ 7E05 4C 68                        dw      EXIT
 530+ 7E07
 531+ 7E07              //  ______________________________________________________________________
 532+ 7E07              //
 533+ 7E07              // spaces       n --
 534+ 7E07                              Colon_Def SPACES, "SPACES", is_normal
 534+ 7E07             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 534+ 7E07             >
 534+ 7E07             >Dict_Ptr        defl    $
 534+ 7E07             >
 534+ 7E07             >//              ______________________________________________________________________
 534+ 7E07             >//              Heap part
 534+ 7E07             >
 534+ 7E07             >
 534+ 7E07             >                org     (Heap_Ptr & $1FFF) + $E000
 534+ EBE1             >
 534+ EBE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 534+ EBE1             >Latest_Definition defl  Heap_Ptr
 534+ EBE1             >
 534+ EBE1             >                // dummy db directives used to calculate length of namec
 534+ EBE1 53 50 41 43 >                db      "SPACES"
 534+ EBE5 45 53       >
 534+ EBE7             >len_NFA         defl    $ - temp_NFA
 534+ EBE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 534+ EBE1             >
 534+ EBE1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 534+ EBE2 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 534+ EBE6 45 53       >
 534+ EBE8             >                org     $-1                 // alter last byte of Name just above to set
 534+ EBE7 D3          >                db      {b $} | END_BIT     // msb as name end
 534+ EBE8             >
 534+ EBE8 D6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 534+ EBEA             >Prev_Ptr        defl    Heap_Ptr
 534+ EBEA             >
 534+ EBEA             >mirror_Ptr      defl    $
 534+ EBEA             >
 534+ EBEA 09 7E       >                dw      Dict_Ptr + 2        // xt
 534+ EBEC             >Heap_Ptr        defl    $ - $E000           // save current HP
 534+ EBEC             >
 534+ EBEC             >Current_HP      defl  $ - $E000             // used to set HP once!
 534+ EBEC             >
 534+ EBEC             >//              ______________________________________________________________________
 534+ EBEC             >//              Dictionary part
 534+ EBEC             >
 534+ EBEC             >                org     Dict_Ptr
 534+ 7E07             >
 534+ 7E07 EA 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 534+ 7E09             >
 534+ 7E09             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 534+ 7E09 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 534+ 7E0C             >
 534+ 7E0C             >
 534+ 7E0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 534+ 7E0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 534+ 7E0C             >
 534+ 7E0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 535+ 7E0C 8E 6A 4A 6C                  dw      ZERO, MAX
 536+ 7E10 8E 6A 0C 64                  dw      ZERO, C_Q_DO
 537+ 7E14 08 00                        dw      Spaces_Leave - $
 538+ 7E16              Spaces_Loop:
 539+ 7E16 84 6C                        dw          SPACE
 540+ 7E18 E0 63                        dw      C_LOOP
 541+ 7E1A FC FF                        dw      Spaces_Loop - $
 542+ 7E1C              Spaces_Leave:
 543+ 7E1C 4C 68                        dw      EXIT                    // ;
 544+ 7E1E
 545+ 7E1E              //  ______________________________________________________________________
 546+ 7E1E              //
 547+ 7E1E              // <#           --
 548+ 7E1E                              Colon_Def BEGIN_DASH, "<#", is_normal
 548+ 7E1E             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 548+ 7E1E             >
 548+ 7E1E             >Dict_Ptr        defl    $
 548+ 7E1E             >
 548+ 7E1E             >//              ______________________________________________________________________
 548+ 7E1E             >//              Heap part
 548+ 7E1E             >
 548+ 7E1E             >
 548+ 7E1E             >                org     (Heap_Ptr & $1FFF) + $E000
 548+ EBEC             >
 548+ EBEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ EBEC             >Latest_Definition defl  Heap_Ptr
 548+ EBEC             >
 548+ EBEC             >                // dummy db directives used to calculate length of namec
 548+ EBEC 3C 23       >                db      "<#"
 548+ EBEE             >len_NFA         defl    $ - temp_NFA
 548+ EBEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ EBEC             >
 548+ EBEC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ EBED 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 548+ EBEF             >                org     $-1                 // alter last byte of Name just above to set
 548+ EBEE A3          >                db      {b $} | END_BIT     // msb as name end
 548+ EBEF             >
 548+ EBEF E1 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 548+ EBF1             >Prev_Ptr        defl    Heap_Ptr
 548+ EBF1             >
 548+ EBF1             >mirror_Ptr      defl    $
 548+ EBF1             >
 548+ EBF1 20 7E       >                dw      Dict_Ptr + 2        // xt
 548+ EBF3             >Heap_Ptr        defl    $ - $E000           // save current HP
 548+ EBF3             >
 548+ EBF3             >Current_HP      defl  $ - $E000             // used to set HP once!
 548+ EBF3             >
 548+ EBF3             >//              ______________________________________________________________________
 548+ EBF3             >//              Dictionary part
 548+ EBF3             >
 548+ EBF3             >                org     Dict_Ptr
 548+ 7E1E             >
 548+ 7E1E F1 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 548+ 7E20             >
 548+ 7E20             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 7E20 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 548+ 7E23             >
 548+ 7E23             >
 548+ 7E23             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 7E23             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 7E23             >
 548+ 7E23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 549+ 7E23 C2 70 7D 6B                  dw      PAD, HLD, STORE
 549+ 7E27 A0 69
 550+ 7E29 4C 68                        dw      EXIT
 551+ 7E2B
 552+ 7E2B              //  ______________________________________________________________________
 553+ 7E2B              //
 554+ 7E2B              // #>           --
 555+ 7E2B                              Colon_Def DASH_END, "#>", is_normal
 555+ 7E2B             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 555+ 7E2B             >
 555+ 7E2B             >Dict_Ptr        defl    $
 555+ 7E2B             >
 555+ 7E2B             >//              ______________________________________________________________________
 555+ 7E2B             >//              Heap part
 555+ 7E2B             >
 555+ 7E2B             >
 555+ 7E2B             >                org     (Heap_Ptr & $1FFF) + $E000
 555+ EBF3             >
 555+ EBF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ EBF3             >Latest_Definition defl  Heap_Ptr
 555+ EBF3             >
 555+ EBF3             >                // dummy db directives used to calculate length of namec
 555+ EBF3 23 3E       >                db      "#>"
 555+ EBF5             >len_NFA         defl    $ - temp_NFA
 555+ EBF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ EBF3             >
 555+ EBF3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ EBF4 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 555+ EBF6             >                org     $-1                 // alter last byte of Name just above to set
 555+ EBF5 BE          >                db      {b $} | END_BIT     // msb as name end
 555+ EBF6             >
 555+ EBF6 EC 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 555+ EBF8             >Prev_Ptr        defl    Heap_Ptr
 555+ EBF8             >
 555+ EBF8             >mirror_Ptr      defl    $
 555+ EBF8             >
 555+ EBF8 2D 7E       >                dw      Dict_Ptr + 2        // xt
 555+ EBFA             >Heap_Ptr        defl    $ - $E000           // save current HP
 555+ EBFA             >
 555+ EBFA             >Current_HP      defl  $ - $E000             // used to set HP once!
 555+ EBFA             >
 555+ EBFA             >//              ______________________________________________________________________
 555+ EBFA             >//              Dictionary part
 555+ EBFA             >
 555+ EBFA             >                org     Dict_Ptr
 555+ 7E2B             >
 555+ 7E2B F8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 555+ 7E2D             >
 555+ 7E2D             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 7E2D CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 7E30             >
 555+ 7E30             >
 555+ 7E30             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 7E30             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 7E30             >
 555+ 7E30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 7E30 61 69                        dw      TWO_DROP
 557+ 7E32 7D 6B 96 69                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 557+ 7E36 C2 70 01 69
 557+ 7E3A F2 6B
 558+ 7E3C 4C 68                        dw      EXIT
 559+ 7E3E
 560+ 7E3E              //  ______________________________________________________________________
 561+ 7E3E              //
 562+ 7E3E              // sign         n d -- d
 563+ 7E3E                              Colon_Def SIGN, "SIGN", is_normal
 563+ 7E3E             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 563+ 7E3E             >
 563+ 7E3E             >Dict_Ptr        defl    $
 563+ 7E3E             >
 563+ 7E3E             >//              ______________________________________________________________________
 563+ 7E3E             >//              Heap part
 563+ 7E3E             >
 563+ 7E3E             >
 563+ 7E3E             >                org     (Heap_Ptr & $1FFF) + $E000
 563+ EBFA             >
 563+ EBFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ EBFA             >Latest_Definition defl  Heap_Ptr
 563+ EBFA             >
 563+ EBFA             >                // dummy db directives used to calculate length of namec
 563+ EBFA 53 49 47 4E >                db      "SIGN"
 563+ EBFE             >len_NFA         defl    $ - temp_NFA
 563+ EBFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ EBFA             >
 563+ EBFA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ EBFB 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 563+ EBFF             >                org     $-1                 // alter last byte of Name just above to set
 563+ EBFE CE          >                db      {b $} | END_BIT     // msb as name end
 563+ EBFF             >
 563+ EBFF F3 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 563+ EC01             >Prev_Ptr        defl    Heap_Ptr
 563+ EC01             >
 563+ EC01             >mirror_Ptr      defl    $
 563+ EC01             >
 563+ EC01 40 7E       >                dw      Dict_Ptr + 2        // xt
 563+ EC03             >Heap_Ptr        defl    $ - $E000           // save current HP
 563+ EC03             >
 563+ EC03             >Current_HP      defl  $ - $E000             // used to set HP once!
 563+ EC03             >
 563+ EC03             >//              ______________________________________________________________________
 563+ EC03             >//              Dictionary part
 563+ EC03             >
 563+ EC03             >                org     Dict_Ptr
 563+ 7E3E             >
 563+ 7E3E 01 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 563+ 7E40             >
 563+ 7E40             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 7E40 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 7E43             >
 563+ 7E43             >
 563+ 7E43             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 7E43             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 7E43             >
 563+ 7E43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 7E43 84 68                        dw      ZLESS
 565+ 7E45 F5 63                        dw      ZBRANCH
 566+ 7E47 08 00                        dw      Sign_Endif - $
 567+ 7E49 A3 63 2D 00                  dw          LIT, 45, HOLD
 567+ 7E4D AF 70
 568+ 7E4F              Sign_Endif:
 569+ 7E4F 4C 68                        dw      EXIT
 570+ 7E51
 571+ 7E51              //  ______________________________________________________________________
 572+ 7E51              //
 573+ 7E51              // #           d1 -- d2
 574+ 7E51                              Colon_Def DASH, "#", is_normal
 574+ 7E51             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 574+ 7E51             >
 574+ 7E51             >Dict_Ptr        defl    $
 574+ 7E51             >
 574+ 7E51             >//              ______________________________________________________________________
 574+ 7E51             >//              Heap part
 574+ 7E51             >
 574+ 7E51             >
 574+ 7E51             >                org     (Heap_Ptr & $1FFF) + $E000
 574+ EC03             >
 574+ EC03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 574+ EC03             >Latest_Definition defl  Heap_Ptr
 574+ EC03             >
 574+ EC03             >                // dummy db directives used to calculate length of namec
 574+ EC03 23          >                db      "#"
 574+ EC04             >len_NFA         defl    $ - temp_NFA
 574+ EC04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 574+ EC03             >
 574+ EC03 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 574+ EC04 23          >                db      "#"               // name string in 7-bit ascii, but
 574+ EC05             >                org     $-1                 // alter last byte of Name just above to set
 574+ EC04 A3          >                db      {b $} | END_BIT     // msb as name end
 574+ EC05             >
 574+ EC05 FA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 574+ EC07             >Prev_Ptr        defl    Heap_Ptr
 574+ EC07             >
 574+ EC07             >mirror_Ptr      defl    $
 574+ EC07             >
 574+ EC07 53 7E       >                dw      Dict_Ptr + 2        // xt
 574+ EC09             >Heap_Ptr        defl    $ - $E000           // save current HP
 574+ EC09             >
 574+ EC09             >Current_HP      defl  $ - $E000             // used to set HP once!
 574+ EC09             >
 574+ EC09             >//              ______________________________________________________________________
 574+ EC09             >//              Dictionary part
 574+ EC09             >
 574+ EC09             >                org     Dict_Ptr
 574+ 7E51             >
 574+ 7E51 07 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 574+ 7E53             >
 574+ 7E53             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 574+ 7E53 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 574+ 7E56             >
 574+ 7E56             >
 574+ 7E56             >                endif           ; ok        // for other definitions it "points" the correct handler
 574+ 7E56             >                // Use of "; ok" to suppress "warning[fwdref]"
 574+ 7E56             >
 574+ 7E56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 575+ 7E56 5F 6B 96 69                  dw      BASE, FETCH
 576+ 7E5A
 577+ 7E5A 56 68                        dw      TO_R                    // >r           ( ud1 )
 578+ 7E5C 8E 6A 6C 68                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 578+ 7E60 D9 67
 579+ 7E62 61 68 1E 69                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 579+ 7E66 56 68
 580+ 7E68 D9 67                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 581+ 7E6A 61 68                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 582+ 7E6C
 583+ 7E6C 2C 69                        dw      ROT
 584+ 7E6E A3 63 09 00                  dw      LIT, 9, OVER, LESS
 584+ 7E72 01 69 17 6C
 585+ 7E76 F5 63                        dw      ZBRANCH
 586+ 7E78 08 00                        dw      Dash_Endif - $
 587+ 7E7A A3 63 07 00                  dw          LIT, 7, PLUS
 587+ 7E7E 9F 68
 588+ 7E80              Dash_Endif:
 589+ 7E80
 590+ 7E80 A3 63 30 00                  dw      LIT, 48, PLUS, HOLD
 590+ 7E84 9F 68 AF 70
 591+ 7E88 4C 68                        dw      EXIT
 592+ 7E8A
 593+ 7E8A              //  ______________________________________________________________________
 594+ 7E8A              //
 595+ 7E8A              // #s           d1 -- d2
 596+ 7E8A                              Colon_Def DASHES, "#S", is_normal
 596+ 7E8A             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 596+ 7E8A             >
 596+ 7E8A             >Dict_Ptr        defl    $
 596+ 7E8A             >
 596+ 7E8A             >//              ______________________________________________________________________
 596+ 7E8A             >//              Heap part
 596+ 7E8A             >
 596+ 7E8A             >
 596+ 7E8A             >                org     (Heap_Ptr & $1FFF) + $E000
 596+ EC09             >
 596+ EC09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 596+ EC09             >Latest_Definition defl  Heap_Ptr
 596+ EC09             >
 596+ EC09             >                // dummy db directives used to calculate length of namec
 596+ EC09 23 53       >                db      "#S"
 596+ EC0B             >len_NFA         defl    $ - temp_NFA
 596+ EC0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 596+ EC09             >
 596+ EC09 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 596+ EC0A 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 596+ EC0C             >                org     $-1                 // alter last byte of Name just above to set
 596+ EC0B D3          >                db      {b $} | END_BIT     // msb as name end
 596+ EC0C             >
 596+ EC0C 03 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 596+ EC0E             >Prev_Ptr        defl    Heap_Ptr
 596+ EC0E             >
 596+ EC0E             >mirror_Ptr      defl    $
 596+ EC0E             >
 596+ EC0E 8C 7E       >                dw      Dict_Ptr + 2        // xt
 596+ EC10             >Heap_Ptr        defl    $ - $E000           // save current HP
 596+ EC10             >
 596+ EC10             >Current_HP      defl  $ - $E000             // used to set HP once!
 596+ EC10             >
 596+ EC10             >//              ______________________________________________________________________
 596+ EC10             >//              Dictionary part
 596+ EC10             >
 596+ EC10             >                org     Dict_Ptr
 596+ 7E8A             >
 596+ 7E8A 0E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 596+ 7E8C             >
 596+ 7E8C             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 596+ 7E8C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 596+ 7E8F             >
 596+ 7E8F             >
 596+ 7E8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 596+ 7E8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 596+ 7E8F             >
 596+ 7E8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 597+ 7E8F              Dashes_Begin:
 598+ 7E8F 53 7E 74 69                  dw      DASH, TWO_DUP
 599+ 7E93 1B 68 71 68                  dw          OR_OP, ZEQUAL
 600+ 7E97 F5 63                        dw      ZBRANCH
 601+ 7E99 F6 FF                        dw      Dashes_Begin - $
 602+ 7E9B 4C 68                        dw      EXIT
 603+ 7E9D
 604+ 7E9D              //  ______________________________________________________________________
 605+ 7E9D              //
 606+ 7E9D              // d.r          d n --
 607+ 7E9D                              Colon_Def D_DOT_R, "D.R", is_normal
 607+ 7E9D             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 607+ 7E9D             >
 607+ 7E9D             >Dict_Ptr        defl    $
 607+ 7E9D             >
 607+ 7E9D             >//              ______________________________________________________________________
 607+ 7E9D             >//              Heap part
 607+ 7E9D             >
 607+ 7E9D             >
 607+ 7E9D             >                org     (Heap_Ptr & $1FFF) + $E000
 607+ EC10             >
 607+ EC10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ EC10             >Latest_Definition defl  Heap_Ptr
 607+ EC10             >
 607+ EC10             >                // dummy db directives used to calculate length of namec
 607+ EC10 44 2E 52    >                db      "D.R"
 607+ EC13             >len_NFA         defl    $ - temp_NFA
 607+ EC13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ EC10             >
 607+ EC10 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ EC11 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 607+ EC14             >                org     $-1                 // alter last byte of Name just above to set
 607+ EC13 D2          >                db      {b $} | END_BIT     // msb as name end
 607+ EC14             >
 607+ EC14 09 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 607+ EC16             >Prev_Ptr        defl    Heap_Ptr
 607+ EC16             >
 607+ EC16             >mirror_Ptr      defl    $
 607+ EC16             >
 607+ EC16 9F 7E       >                dw      Dict_Ptr + 2        // xt
 607+ EC18             >Heap_Ptr        defl    $ - $E000           // save current HP
 607+ EC18             >
 607+ EC18             >Current_HP      defl  $ - $E000             // used to set HP once!
 607+ EC18             >
 607+ EC18             >//              ______________________________________________________________________
 607+ EC18             >//              Dictionary part
 607+ EC18             >
 607+ EC18             >                org     Dict_Ptr
 607+ 7E9D             >
 607+ 7E9D 16 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 607+ 7E9F             >
 607+ 7E9F             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 7E9F CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 7EA2             >
 607+ 7EA2             >
 607+ 7EA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 7EA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 7EA2             >
 607+ 7EA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 7EA2 56 68                        dw      TO_R
 609+ 7EA4 15 69 9A 76                  dw      TUCK, DABS
 610+ 7EA8 20 7E 8C 7E                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 610+ 7EAC 2C 69 40 7E
 610+ 7EB0 2D 7E
 611+ 7EB2 61 68                        dw      R_TO
 612+ 7EB4 01 69 F2 6B                  dw      OVER, SUBTRACT, SPACES, TYPE
 612+ 7EB8 09 7E 7F 6F
 613+ 7EBC 4C 68                        dw      EXIT
 614+ 7EBE
 615+ 7EBE              //  ______________________________________________________________________
 616+ 7EBE              //
 617+ 7EBE              // .r           n1 n2 --
 618+ 7EBE                              Colon_Def DOT_R, ".R", is_normal
 618+ 7EBE             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 618+ 7EBE             >
 618+ 7EBE             >Dict_Ptr        defl    $
 618+ 7EBE             >
 618+ 7EBE             >//              ______________________________________________________________________
 618+ 7EBE             >//              Heap part
 618+ 7EBE             >
 618+ 7EBE             >
 618+ 7EBE             >                org     (Heap_Ptr & $1FFF) + $E000
 618+ EC18             >
 618+ EC18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 618+ EC18             >Latest_Definition defl  Heap_Ptr
 618+ EC18             >
 618+ EC18             >                // dummy db directives used to calculate length of namec
 618+ EC18 2E 52       >                db      ".R"
 618+ EC1A             >len_NFA         defl    $ - temp_NFA
 618+ EC1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 618+ EC18             >
 618+ EC18 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 618+ EC19 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 618+ EC1B             >                org     $-1                 // alter last byte of Name just above to set
 618+ EC1A D2          >                db      {b $} | END_BIT     // msb as name end
 618+ EC1B             >
 618+ EC1B 10 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 618+ EC1D             >Prev_Ptr        defl    Heap_Ptr
 618+ EC1D             >
 618+ EC1D             >mirror_Ptr      defl    $
 618+ EC1D             >
 618+ EC1D C0 7E       >                dw      Dict_Ptr + 2        // xt
 618+ EC1F             >Heap_Ptr        defl    $ - $E000           // save current HP
 618+ EC1F             >
 618+ EC1F             >Current_HP      defl  $ - $E000             // used to set HP once!
 618+ EC1F             >
 618+ EC1F             >//              ______________________________________________________________________
 618+ EC1F             >//              Dictionary part
 618+ EC1F             >
 618+ EC1F             >                org     Dict_Ptr
 618+ 7EBE             >
 618+ 7EBE 1D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 618+ 7EC0             >
 618+ 7EC0             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 618+ 7EC0 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 618+ 7EC3             >
 618+ 7EC3             >
 618+ 7EC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 618+ 7EC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 618+ 7EC3             >
 618+ 7EC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 619+ 7EC3 56 68                        dw      TO_R
 620+ 7EC5 E7 6B 61 68                  dw      S_TO_D, R_TO
 621+ 7EC9 9F 7E                        dw      D_DOT_R
 622+ 7ECB 4C 68                        dw      EXIT
 623+ 7ECD
 624+ 7ECD              //  ______________________________________________________________________
 625+ 7ECD              //
 626+ 7ECD              // d.           d --
 627+ 7ECD                              Colon_Def D_DOT, "D.", is_normal
 627+ 7ECD             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 627+ 7ECD             >
 627+ 7ECD             >Dict_Ptr        defl    $
 627+ 7ECD             >
 627+ 7ECD             >//              ______________________________________________________________________
 627+ 7ECD             >//              Heap part
 627+ 7ECD             >
 627+ 7ECD             >
 627+ 7ECD             >                org     (Heap_Ptr & $1FFF) + $E000
 627+ EC1F             >
 627+ EC1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 627+ EC1F             >Latest_Definition defl  Heap_Ptr
 627+ EC1F             >
 627+ EC1F             >                // dummy db directives used to calculate length of namec
 627+ EC1F 44 2E       >                db      "D."
 627+ EC21             >len_NFA         defl    $ - temp_NFA
 627+ EC21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 627+ EC1F             >
 627+ EC1F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 627+ EC20 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 627+ EC22             >                org     $-1                 // alter last byte of Name just above to set
 627+ EC21 AE          >                db      {b $} | END_BIT     // msb as name end
 627+ EC22             >
 627+ EC22 18 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 627+ EC24             >Prev_Ptr        defl    Heap_Ptr
 627+ EC24             >
 627+ EC24             >mirror_Ptr      defl    $
 627+ EC24             >
 627+ EC24 CF 7E       >                dw      Dict_Ptr + 2        // xt
 627+ EC26             >Heap_Ptr        defl    $ - $E000           // save current HP
 627+ EC26             >
 627+ EC26             >Current_HP      defl  $ - $E000             // used to set HP once!
 627+ EC26             >
 627+ EC26             >//              ______________________________________________________________________
 627+ EC26             >//              Dictionary part
 627+ EC26             >
 627+ EC26             >                org     Dict_Ptr
 627+ 7ECD             >
 627+ 7ECD 24 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 627+ 7ECF             >
 627+ 7ECF             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 627+ 7ECF CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 627+ 7ED2             >
 627+ 7ED2             >
 627+ 7ED2             >                endif           ; ok        // for other definitions it "points" the correct handler
 627+ 7ED2             >                // Use of "; ok" to suppress "warning[fwdref]"
 627+ 7ED2             >
 627+ 7ED2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 628+ 7ED2 8E 6A 9F 7E                  dw      ZERO, D_DOT_R, SPACE
 628+ 7ED6 84 6C
 629+ 7ED8 4C 68                        dw      EXIT
 630+ 7EDA
 631+ 7EDA              //  ______________________________________________________________________
 632+ 7EDA              //
 633+ 7EDA              // .            n --
 634+ 7EDA                              Colon_Def DOT, ".", is_normal
 634+ 7EDA             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 634+ 7EDA             >
 634+ 7EDA             >Dict_Ptr        defl    $
 634+ 7EDA             >
 634+ 7EDA             >//              ______________________________________________________________________
 634+ 7EDA             >//              Heap part
 634+ 7EDA             >
 634+ 7EDA             >
 634+ 7EDA             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ EC26             >
 634+ EC26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ EC26             >Latest_Definition defl  Heap_Ptr
 634+ EC26             >
 634+ EC26             >                // dummy db directives used to calculate length of namec
 634+ EC26 2E          >                db      "."
 634+ EC27             >len_NFA         defl    $ - temp_NFA
 634+ EC27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ EC26             >
 634+ EC26 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ EC27 2E          >                db      "."               // name string in 7-bit ascii, but
 634+ EC28             >                org     $-1                 // alter last byte of Name just above to set
 634+ EC27 AE          >                db      {b $} | END_BIT     // msb as name end
 634+ EC28             >
 634+ EC28 1F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ EC2A             >Prev_Ptr        defl    Heap_Ptr
 634+ EC2A             >
 634+ EC2A             >mirror_Ptr      defl    $
 634+ EC2A             >
 634+ EC2A DC 7E       >                dw      Dict_Ptr + 2        // xt
 634+ EC2C             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ EC2C             >
 634+ EC2C             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ EC2C             >
 634+ EC2C             >//              ______________________________________________________________________
 634+ EC2C             >//              Dictionary part
 634+ EC2C             >
 634+ EC2C             >                org     Dict_Ptr
 634+ 7EDA             >
 634+ 7EDA 2A 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 7EDC             >
 634+ 7EDC             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 7EDC CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 7EDF             >
 634+ 7EDF             >
 634+ 7EDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 7EDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 7EDF             >
 634+ 7EDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 7EDF E7 6B CF 7E                  dw      S_TO_D, D_DOT
 636+ 7EE3 4C 68                        dw      EXIT
 637+ 7EE5
 638+ 7EE5              //  ______________________________________________________________________
 639+ 7EE5              //
 640+ 7EE5              // ?            n --
 641+ 7EE5                              Colon_Def QUESTION, "?", is_normal
 641+ 7EE5             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 641+ 7EE5             >
 641+ 7EE5             >Dict_Ptr        defl    $
 641+ 7EE5             >
 641+ 7EE5             >//              ______________________________________________________________________
 641+ 7EE5             >//              Heap part
 641+ 7EE5             >
 641+ 7EE5             >
 641+ 7EE5             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ EC2C             >
 641+ EC2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ EC2C             >Latest_Definition defl  Heap_Ptr
 641+ EC2C             >
 641+ EC2C             >                // dummy db directives used to calculate length of namec
 641+ EC2C 3F          >                db      "?"
 641+ EC2D             >len_NFA         defl    $ - temp_NFA
 641+ EC2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ EC2C             >
 641+ EC2C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ EC2D 3F          >                db      "?"               // name string in 7-bit ascii, but
 641+ EC2E             >                org     $-1                 // alter last byte of Name just above to set
 641+ EC2D BF          >                db      {b $} | END_BIT     // msb as name end
 641+ EC2E             >
 641+ EC2E 26 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ EC30             >Prev_Ptr        defl    Heap_Ptr
 641+ EC30             >
 641+ EC30             >mirror_Ptr      defl    $
 641+ EC30             >
 641+ EC30 E7 7E       >                dw      Dict_Ptr + 2        // xt
 641+ EC32             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ EC32             >
 641+ EC32             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ EC32             >
 641+ EC32             >//              ______________________________________________________________________
 641+ EC32             >//              Dictionary part
 641+ EC32             >
 641+ EC32             >                org     Dict_Ptr
 641+ 7EE5             >
 641+ 7EE5 30 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 7EE7             >
 641+ 7EE7             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 7EE7 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 7EEA             >
 641+ 7EEA             >
 641+ 7EEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 7EEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 7EEA             >
 641+ 7EEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 7EEA 96 69 DC 7E                  dw      FETCH, DOT
 643+ 7EEE 4C 68                        dw      EXIT
 644+ 7EF0
 645+ 7EF0              //  ______________________________________________________________________
 646+ 7EF0              //
 647+ 7EF0              // u.           u --
 648+ 7EF0                              Colon_Def U_DOT, "U.", is_normal
 648+ 7EF0             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 648+ 7EF0             >
 648+ 7EF0             >Dict_Ptr        defl    $
 648+ 7EF0             >
 648+ 7EF0             >//              ______________________________________________________________________
 648+ 7EF0             >//              Heap part
 648+ 7EF0             >
 648+ 7EF0             >
 648+ 7EF0             >                org     (Heap_Ptr & $1FFF) + $E000
 648+ EC32             >
 648+ EC32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ EC32             >Latest_Definition defl  Heap_Ptr
 648+ EC32             >
 648+ EC32             >                // dummy db directives used to calculate length of namec
 648+ EC32 55 2E       >                db      "U."
 648+ EC34             >len_NFA         defl    $ - temp_NFA
 648+ EC34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ EC32             >
 648+ EC32 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ EC33 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 648+ EC35             >                org     $-1                 // alter last byte of Name just above to set
 648+ EC34 AE          >                db      {b $} | END_BIT     // msb as name end
 648+ EC35             >
 648+ EC35 2C 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 648+ EC37             >Prev_Ptr        defl    Heap_Ptr
 648+ EC37             >
 648+ EC37             >mirror_Ptr      defl    $
 648+ EC37             >
 648+ EC37 F2 7E       >                dw      Dict_Ptr + 2        // xt
 648+ EC39             >Heap_Ptr        defl    $ - $E000           // save current HP
 648+ EC39             >
 648+ EC39             >Current_HP      defl  $ - $E000             // used to set HP once!
 648+ EC39             >
 648+ EC39             >//              ______________________________________________________________________
 648+ EC39             >//              Dictionary part
 648+ EC39             >
 648+ EC39             >                org     Dict_Ptr
 648+ 7EF0             >
 648+ 7EF0 37 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 648+ 7EF2             >
 648+ 7EF2             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 7EF2 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 648+ 7EF5             >
 648+ 7EF5             >
 648+ 7EF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 7EF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 7EF5             >
 648+ 7EF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 7EF5 8E 6A CF 7E                  dw      ZERO, D_DOT
 650+ 7EF9 4C 68                        dw      EXIT
 651+ 7EFB
 652+ 7EFB              //  ______________________________________________________________________
 653+ 7EFB              //
 654+ 7EFB              // words        --
 655+ 7EFB                              Colon_Def WORDS, "WORDS", is_normal
 655+ 7EFB             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 655+ 7EFB             >
 655+ 7EFB             >Dict_Ptr        defl    $
 655+ 7EFB             >
 655+ 7EFB             >//              ______________________________________________________________________
 655+ 7EFB             >//              Heap part
 655+ 7EFB             >
 655+ 7EFB             >
 655+ 7EFB             >                org     (Heap_Ptr & $1FFF) + $E000
 655+ EC39             >
 655+ EC39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ EC39             >Latest_Definition defl  Heap_Ptr
 655+ EC39             >
 655+ EC39             >                // dummy db directives used to calculate length of namec
 655+ EC39 57 4F 52 44 >                db      "WORDS"
 655+ EC3D 53          >
 655+ EC3E             >len_NFA         defl    $ - temp_NFA
 655+ EC3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ EC39             >
 655+ EC39 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ EC3A 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 655+ EC3E 53          >
 655+ EC3F             >                org     $-1                 // alter last byte of Name just above to set
 655+ EC3E D3          >                db      {b $} | END_BIT     // msb as name end
 655+ EC3F             >
 655+ EC3F 32 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 655+ EC41             >Prev_Ptr        defl    Heap_Ptr
 655+ EC41             >
 655+ EC41             >mirror_Ptr      defl    $
 655+ EC41             >
 655+ EC41 FD 7E       >                dw      Dict_Ptr + 2        // xt
 655+ EC43             >Heap_Ptr        defl    $ - $E000           // save current HP
 655+ EC43             >
 655+ EC43             >Current_HP      defl  $ - $E000             // used to set HP once!
 655+ EC43             >
 655+ EC43             >//              ______________________________________________________________________
 655+ EC43             >//              Dictionary part
 655+ EC43             >
 655+ EC43             >                org     Dict_Ptr
 655+ 7EFB             >
 655+ 7EFB 41 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 655+ 7EFD             >
 655+ 7EFD             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 7EFD CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 655+ 7F00             >
 655+ 7F00             >
 655+ 7F00             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 7F00             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 7F00             >
 655+ 7F00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 7F00 A3 63 80 00                  dw      LIT, 128, OUT, STORE
 656+ 7F04 3B 6B A0 69
 657+ 7F08 4D 6B 96 69                  dw      CONTEXT, FETCH, FETCH
 657+ 7F0C 96 69
 658+ 7F0E              Words_Begin:
 659+ 7F0E F5 6C                        dw          FAR // Q TO HEAP
 660+ 7F10 25 69 AB 69                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 660+ 7F14 A3 63 1F 00
 660+ 7F18 0C 68
 661+ 7F1A 3B 6B 96 69                  dw          OUT, FETCH, PLUS
 661+ 7F1E 9F 68
 662+ 7F20 B8 6A 17 6C                  dw          CL, LESS, ZEQUAL
 662+ 7F24 71 68
 663+ 7F26 F5 63                        dw          ZBRANCH
 664+ 7F28 0A 00                        dw          Words_Endif - $
 665+ 7F2A B6 65 8E 6A                  dw              CR, ZERO, OUT, STORE
 665+ 7F2E 3B 6B A0 69
 666+ 7F32              Words_Endif:
 667+ 7F32 25 69 5F 73                  dw          DUP, ID_DOT
 668+ 7F36 95 6A 8F 6C                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 668+ 7F3A B8 68 96 69
 669+ 7F3E 25 69 71 68                  dw          DUP, ZEQUAL
 670+ 7F42 B3 66 1B 68                  dw          QTERMINAL, OR_OP
 671+ 7F46 F5 63                        dw      ZBRANCH
 672+ 7F48 C6 FF                        dw      Words_Begin - $
 673+ 7F4A 0A 69                        dw      DROP
 674+ 7F4C 4C 68                        dw      EXIT
 675+ 7F4E
 676+ 7F4E              //  ______________________________________________________________________
 677+ 7F4E              //
 678+ 7F4E              // list         n --
 679+ 7F4E                              Colon_Def LIST, "LIST", is_normal
 679+ 7F4E             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 679+ 7F4E             >
 679+ 7F4E             >Dict_Ptr        defl    $
 679+ 7F4E             >
 679+ 7F4E             >//              ______________________________________________________________________
 679+ 7F4E             >//              Heap part
 679+ 7F4E             >
 679+ 7F4E             >
 679+ 7F4E             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ EC43             >
 679+ EC43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ EC43             >Latest_Definition defl  Heap_Ptr
 679+ EC43             >
 679+ EC43             >                // dummy db directives used to calculate length of namec
 679+ EC43 4C 49 53 54 >                db      "LIST"
 679+ EC47             >len_NFA         defl    $ - temp_NFA
 679+ EC47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ EC43             >
 679+ EC43 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ EC44 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 679+ EC48             >                org     $-1                 // alter last byte of Name just above to set
 679+ EC47 D4          >                db      {b $} | END_BIT     // msb as name end
 679+ EC48             >
 679+ EC48 39 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ EC4A             >Prev_Ptr        defl    Heap_Ptr
 679+ EC4A             >
 679+ EC4A             >mirror_Ptr      defl    $
 679+ EC4A             >
 679+ EC4A 50 7F       >                dw      Dict_Ptr + 2        // xt
 679+ EC4C             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ EC4C             >
 679+ EC4C             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ EC4C             >
 679+ EC4C             >//              ______________________________________________________________________
 679+ EC4C             >//              Dictionary part
 679+ EC4C             >
 679+ EC4C             >                org     Dict_Ptr
 679+ 7F4E             >
 679+ 7F4E 4A 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 7F50             >
 679+ 7F50             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 7F50 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 7F53             >
 679+ 7F53             >
 679+ 7F53             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 7F53             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 7F53             >
 679+ 7F53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 7F53 C8 6E B6 65                  dw      DECIMAL, CR
 681+ 7F57 25 69 41 6B                  dw      DUP, SCR, STORE
 681+ 7F5B A0 69
 682+ 7F5D 1C 71                        dw      C_DOT_QUOTE
 683+ 7F5F 05 53 63 72                  db      5, "Scr# "
 683+ 7F63 23 20
 684+ 7F65 DC 7E                        dw      DOT
 685+ 7F67 CD 6A 8E 6A                  dw      LSCR, ZERO, C_DO
 685+ 7F6B 34 64
 686+ 7F6D              List_Loop:
 687+ 7F6D B6 65                        dw          CR
 688+ 7F6F 3A 64 A3 6A                  dw          I, THREE
 689+ 7F73 C0 7E 84 6C                  dw          DOT_R, SPACE
 690+ 7F77 3A 64 41 6B                  dw          I, SCR, FETCH, DOT_LINE
 690+ 7F7B 96 69 95 77
 691+ 7F7F B3 66                        dw          QTERMINAL
 692+ 7F81 F5 63                        dw          ZBRANCH
 693+ 7F83 06 00                        dw          List_Endif - $
 694+ 7F85 00 64                        dw              C_LEAVE
 695+ 7F87 06 00                        dw              List_Leave - $
 696+ 7F89              List_Endif:
 697+ 7F89 E0 63                        dw      C_LOOP
 698+ 7F8B E2 FF                        dw      List_Loop - $
 699+ 7F8D              List_Leave:
 700+ 7F8D B6 65                        dw      CR
 701+ 7F8F 4C 68                        dw      EXIT
 702+ 7F91
 703+ 7F91              //  ______________________________________________________________________
 704+ 7F91              //
 705+ 7F91              // index        n1 n2 --
 706+ 7F91                              Colon_Def INDEX, "INDEX", is_normal
 706+ 7F91             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 706+ 7F91             >
 706+ 7F91             >Dict_Ptr        defl    $
 706+ 7F91             >
 706+ 7F91             >//              ______________________________________________________________________
 706+ 7F91             >//              Heap part
 706+ 7F91             >
 706+ 7F91             >
 706+ 7F91             >                org     (Heap_Ptr & $1FFF) + $E000
 706+ EC4C             >
 706+ EC4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 706+ EC4C             >Latest_Definition defl  Heap_Ptr
 706+ EC4C             >
 706+ EC4C             >                // dummy db directives used to calculate length of namec
 706+ EC4C 49 4E 44 45 >                db      "INDEX"
 706+ EC50 58          >
 706+ EC51             >len_NFA         defl    $ - temp_NFA
 706+ EC51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 706+ EC4C             >
 706+ EC4C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 706+ EC4D 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 706+ EC51 58          >
 706+ EC52             >                org     $-1                 // alter last byte of Name just above to set
 706+ EC51 D8          >                db      {b $} | END_BIT     // msb as name end
 706+ EC52             >
 706+ EC52 43 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 706+ EC54             >Prev_Ptr        defl    Heap_Ptr
 706+ EC54             >
 706+ EC54             >mirror_Ptr      defl    $
 706+ EC54             >
 706+ EC54 93 7F       >                dw      Dict_Ptr + 2        // xt
 706+ EC56             >Heap_Ptr        defl    $ - $E000           // save current HP
 706+ EC56             >
 706+ EC56             >Current_HP      defl  $ - $E000             // used to set HP once!
 706+ EC56             >
 706+ EC56             >//              ______________________________________________________________________
 706+ EC56             >//              Dictionary part
 706+ EC56             >
 706+ EC56             >                org     Dict_Ptr
 706+ 7F91             >
 706+ 7F91 54 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 706+ 7F93             >
 706+ 7F93             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 706+ 7F93 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 706+ 7F96             >
 706+ 7F96             >
 706+ 7F96             >                endif           ; ok        // for other definitions it "points" the correct handler
 706+ 7F96             >                // Use of "; ok" to suppress "warning[fwdref]"
 706+ 7F96             >
 706+ 7F96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 707+ 7F96 B8 68 1E 69                  dw      ONE_PLUS, SWAP, C_DO
 707+ 7F9A 34 64
 708+ 7F9C              Index_Loop:
 709+ 7F9C B6 65 3A 64                  dw          CR, I, THREE
 709+ 7FA0 A3 6A
 710+ 7FA2 C0 7E 84 6C                  dw          DOT_R, SPACE
 711+ 7FA6 8E 6A 3A 64                  dw          ZERO, I, DOT_LINE
 711+ 7FAA 95 77
 712+ 7FAC B3 66                        dw          QTERMINAL
 713+ 7FAE F5 63                        dw          ZBRANCH
 714+ 7FB0 06 00                        dw          Index_Endif - $
 715+ 7FB2 00 64                        dw              C_LEAVE
 716+ 7FB4 06 00                        dw              Index_Leave - $
 717+ 7FB6              Index_Endif:
 718+ 7FB6 E0 63                        dw      C_LOOP
 719+ 7FB8 E4 FF                        dw      Index_Loop - $
 720+ 7FBA              Index_Leave:
 721+ 7FBA B6 65                        dw      CR
 722+ 7FBC 4C 68                        dw      EXIT
 723+ 7FBE
 724+ 7FBE              //  ______________________________________________________________________
 725+ 7FBE              //
 726+ 7FBE              // cls          --
 727+ 7FBE                              Colon_Def CLS, "CLS", is_normal
 727+ 7FBE             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 727+ 7FBE             >
 727+ 7FBE             >Dict_Ptr        defl    $
 727+ 7FBE             >
 727+ 7FBE             >//              ______________________________________________________________________
 727+ 7FBE             >//              Heap part
 727+ 7FBE             >
 727+ 7FBE             >
 727+ 7FBE             >                org     (Heap_Ptr & $1FFF) + $E000
 727+ EC56             >
 727+ EC56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 727+ EC56             >Latest_Definition defl  Heap_Ptr
 727+ EC56             >
 727+ EC56             >                // dummy db directives used to calculate length of namec
 727+ EC56 43 4C 53    >                db      "CLS"
 727+ EC59             >len_NFA         defl    $ - temp_NFA
 727+ EC59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 727+ EC56             >
 727+ EC56 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 727+ EC57 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 727+ EC5A             >                org     $-1                 // alter last byte of Name just above to set
 727+ EC59 D3          >                db      {b $} | END_BIT     // msb as name end
 727+ EC5A             >
 727+ EC5A 4C 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 727+ EC5C             >Prev_Ptr        defl    Heap_Ptr
 727+ EC5C             >
 727+ EC5C             >mirror_Ptr      defl    $
 727+ EC5C             >
 727+ EC5C C0 7F       >                dw      Dict_Ptr + 2        // xt
 727+ EC5E             >Heap_Ptr        defl    $ - $E000           // save current HP
 727+ EC5E             >
 727+ EC5E             >Current_HP      defl  $ - $E000             // used to set HP once!
 727+ EC5E             >
 727+ EC5E             >//              ______________________________________________________________________
 727+ EC5E             >//              Dictionary part
 727+ EC5E             >
 727+ EC5E             >                org     Dict_Ptr
 727+ 7FBE             >
 727+ 7FBE 5C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 727+ 7FC0             >
 727+ 7FC0             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 727+ 7FC0 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 727+ 7FC3             >
 727+ 7FC3             >
 727+ 7FC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 727+ 7FC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 727+ 7FC3             >
 727+ 7FC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 728+ 7FC3 A3 63 0E 00                  dw      LIT, $0E, EMITC
 728+ 7FC7 A2 65
 729+ 7FC9 4C 68                        dw      EXIT
 730+ 7FCB
 731+ 7FCB              //  ______________________________________________________________________
 732+ 7FCB              //
 733+ 7FCB              // splash       --
 734+ 7FCB              //              Colon_Def SPLASH, "SPLASH", is_normal
 735+ 7FCB              //              dw      CLS
 736+ 7FCB              //              dw      C_DOT_QUOTE
 737+ 7FCB              //              db      87
 738+ 7FCB              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 739+ 7FCB              //              db      "Heap Vocabulary - build 20231004", 13  // 33
 740+ 7FCB              //              db      "1990-2023 Matteo Vitturi", 13        // 25
 741+ 7FCB              //              dw      EXIT
 742+ 7FCB
 743+ 7FCB              //  ______________________________________________________________________
 744+ 7FCB              //
 745+ 7FCB              // splash       --
 746+ 7FCB                              Colon_Def SPLASH, "SPLASH", is_normal
 746+ 7FCB             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 746+ 7FCB             >
 746+ 7FCB             >Dict_Ptr        defl    $
 746+ 7FCB             >
 746+ 7FCB             >//              ______________________________________________________________________
 746+ 7FCB             >//              Heap part
 746+ 7FCB             >
 746+ 7FCB             >
 746+ 7FCB             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ EC5E             >
 746+ EC5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ EC5E             >Latest_Definition defl  Heap_Ptr
 746+ EC5E             >
 746+ EC5E             >                // dummy db directives used to calculate length of namec
 746+ EC5E 53 50 4C 41 >                db      "SPLASH"
 746+ EC62 53 48       >
 746+ EC64             >len_NFA         defl    $ - temp_NFA
 746+ EC64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ EC5E             >
 746+ EC5E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ EC5F 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 746+ EC63 53 48       >
 746+ EC65             >                org     $-1                 // alter last byte of Name just above to set
 746+ EC64 C8          >                db      {b $} | END_BIT     // msb as name end
 746+ EC65             >
 746+ EC65 56 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ EC67             >Prev_Ptr        defl    Heap_Ptr
 746+ EC67             >
 746+ EC67             >mirror_Ptr      defl    $
 746+ EC67             >
 746+ EC67 CD 7F       >                dw      Dict_Ptr + 2        // xt
 746+ EC69             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ EC69             >
 746+ EC69             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ EC69             >
 746+ EC69             >//              ______________________________________________________________________
 746+ EC69             >//              Dictionary part
 746+ EC69             >
 746+ EC69             >                org     Dict_Ptr
 746+ 7FCB             >
 746+ 7FCB 67 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 7FCD             >
 746+ 7FCD             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 7FCD CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 7FD0             >
 746+ 7FD0             >
 746+ 7FD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 7FD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 7FD0             >
 746+ 7FD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 7FD0 C0 7F                        dw      CLS
 748+ 7FD2 A3 63 02 00                  dw      LIT, Splash_Ptr
 749+ 7FD6 F5 6C                        dw      FAR
 750+ 7FD8 2B 6F 7F 6F                  dw      COUNT, TYPE
 751+ 7FDC 4C 68                        dw      EXIT
 752+ 7FDE
 753+ 7FDE              //  ______________________________________________________________________
 754+ 7FDE              //
 755+ 7FDE              // video        --
 756+ 7FDE                              Colon_Def VIDEO, "VIDEO", is_normal
 756+ 7FDE             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 756+ 7FDE             >
 756+ 7FDE             >Dict_Ptr        defl    $
 756+ 7FDE             >
 756+ 7FDE             >//              ______________________________________________________________________
 756+ 7FDE             >//              Heap part
 756+ 7FDE             >
 756+ 7FDE             >
 756+ 7FDE             >                org     (Heap_Ptr & $1FFF) + $E000
 756+ EC69             >
 756+ EC69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 756+ EC69             >Latest_Definition defl  Heap_Ptr
 756+ EC69             >
 756+ EC69             >                // dummy db directives used to calculate length of namec
 756+ EC69 56 49 44 45 >                db      "VIDEO"
 756+ EC6D 4F          >
 756+ EC6E             >len_NFA         defl    $ - temp_NFA
 756+ EC6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 756+ EC69             >
 756+ EC69 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 756+ EC6A 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 756+ EC6E 4F          >
 756+ EC6F             >                org     $-1                 // alter last byte of Name just above to set
 756+ EC6E CF          >                db      {b $} | END_BIT     // msb as name end
 756+ EC6F             >
 756+ EC6F 5E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 756+ EC71             >Prev_Ptr        defl    Heap_Ptr
 756+ EC71             >
 756+ EC71             >mirror_Ptr      defl    $
 756+ EC71             >
 756+ EC71 E0 7F       >                dw      Dict_Ptr + 2        // xt
 756+ EC73             >Heap_Ptr        defl    $ - $E000           // save current HP
 756+ EC73             >
 756+ EC73             >Current_HP      defl  $ - $E000             // used to set HP once!
 756+ EC73             >
 756+ EC73             >//              ______________________________________________________________________
 756+ EC73             >//              Dictionary part
 756+ EC73             >
 756+ EC73             >                org     Dict_Ptr
 756+ 7FDE             >
 756+ 7FDE 71 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 756+ 7FE0             >
 756+ 7FE0             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 756+ 7FE0 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 756+ 7FE3             >
 756+ 7FE3             >
 756+ 7FE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 756+ 7FE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 756+ 7FE3             >
 756+ 7FE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 757+ 7FE3 9C 6A 25 69                  dw      TWO, DUP, DEVICE, STORE
 757+ 7FE7 CA 77 A0 69
 758+ 7FEB C7 66                        dw      SELECT
 759+ 7FED 4C 68                        dw      EXIT
 760+ 7FEF
 761+ 7FEF              //  ______________________________________________________________________
 762+ 7FEF              //
 763+ 7FEF              // autoexec     --
 764+ 7FEF              // this word is called the first time the Forth system boot to
 765+ 7FEF              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 766+ 7FEF                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 766+ 7FEF             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 766+ 7FEF             >
 766+ 7FEF             >Dict_Ptr        defl    $
 766+ 7FEF             >
 766+ 7FEF             >//              ______________________________________________________________________
 766+ 7FEF             >//              Heap part
 766+ 7FEF             >
 766+ 7FEF             >
 766+ 7FEF             >                org     (Heap_Ptr & $1FFF) + $E000
 766+ EC73             >
 766+ EC73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 766+ EC73             >Latest_Definition defl  Heap_Ptr
 766+ EC73             >
 766+ EC73             >                // dummy db directives used to calculate length of namec
 766+ EC73 41 55 54 4F >                db      "AUTOEXEC"
 766+ EC77 45 58 45 43 >
 766+ EC7B             >len_NFA         defl    $ - temp_NFA
 766+ EC7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 766+ EC73             >
 766+ EC73 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 766+ EC74 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 766+ EC78 45 58 45 43 >
 766+ EC7C             >                org     $-1                 // alter last byte of Name just above to set
 766+ EC7B C3          >                db      {b $} | END_BIT     // msb as name end
 766+ EC7C             >
 766+ EC7C 69 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 766+ EC7E             >Prev_Ptr        defl    Heap_Ptr
 766+ EC7E             >
 766+ EC7E             >mirror_Ptr      defl    $
 766+ EC7E             >
 766+ EC7E F1 7F       >                dw      Dict_Ptr + 2        // xt
 766+ EC80             >Heap_Ptr        defl    $ - $E000           // save current HP
 766+ EC80             >
 766+ EC80             >Current_HP      defl  $ - $E000             // used to set HP once!
 766+ EC80             >
 766+ EC80             >//              ______________________________________________________________________
 766+ EC80             >//              Dictionary part
 766+ EC80             >
 766+ EC80             >                org     Dict_Ptr
 766+ 7FEF             >
 766+ 7FEF 7E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 766+ 7FF1             >
 766+ 7FF1             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 766+ 7FF1 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 766+ 7FF4             >
 766+ 7FF4             >
 766+ 7FF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 766+ 7FF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 766+ 7FF4             >
 766+ 7FF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 767+ 7FF4 A3 63 0B 00                  dw      LIT, 11
 768+ 7FF8 A3 63 55 6A                  dw      LIT, NOOP
 769+ 7FFC A3 63 CE 75                  dw      LIT, Autoexec_Ptr
 770+ 8000 A0 69                        dw      STORE
 771+ 8002 F6 7C                        dw      LOAD
 772+ 8004 75 75                        dw      QUIT
 773+ 8006 4C 68                        dw      EXIT
 774+ 8008
 775+ 8008
 776+ 8008              //  ______________________________________________________________________
 777+ 8008              //
 778+ 8008              // bye     --
 779+ 8008              //
 780+ 8008                              Colon_Def BYE, "BYE", is_normal
 780+ 8008             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 780+ 8008             >
 780+ 8008             >Dict_Ptr        defl    $
 780+ 8008             >
 780+ 8008             >//              ______________________________________________________________________
 780+ 8008             >//              Heap part
 780+ 8008             >
 780+ 8008             >
 780+ 8008             >                org     (Heap_Ptr & $1FFF) + $E000
 780+ EC80             >
 780+ EC80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 780+ EC80             >Latest_Definition defl  Heap_Ptr
 780+ EC80             >
 780+ EC80             >                // dummy db directives used to calculate length of namec
 780+ EC80 42 59 45    >                db      "BYE"
 780+ EC83             >len_NFA         defl    $ - temp_NFA
 780+ EC83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 780+ EC80             >
 780+ EC80 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 780+ EC81 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 780+ EC84             >                org     $-1                 // alter last byte of Name just above to set
 780+ EC83 C5          >                db      {b $} | END_BIT     // msb as name end
 780+ EC84             >
 780+ EC84 73 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 780+ EC86             >Prev_Ptr        defl    Heap_Ptr
 780+ EC86             >
 780+ EC86             >mirror_Ptr      defl    $
 780+ EC86             >
 780+ EC86 0A 80       >                dw      Dict_Ptr + 2        // xt
 780+ EC88             >Heap_Ptr        defl    $ - $E000           // save current HP
 780+ EC88             >
 780+ EC88             >Current_HP      defl  $ - $E000             // used to set HP once!
 780+ EC88             >
 780+ EC88             >//              ______________________________________________________________________
 780+ EC88             >//              Dictionary part
 780+ EC88             >
 780+ EC88             >                org     Dict_Ptr
 780+ 8008             >
 780+ 8008 86 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 780+ 800A             >
 780+ 800A             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 780+ 800A CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 780+ 800D             >
 780+ 800D             >
 780+ 800D             >                endif           ; ok        // for other definitions it "points" the correct handler
 780+ 800D             >                // Use of "; ok" to suppress "warning[fwdref]"
 780+ 800D             >
 780+ 800D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 781+ 800D E3 79                        dw      FLUSH
 782+ 800F 31 79                        dw      EMPTY_BUFFERS
 783+ 8011 1D 78 96 69                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 783+ 8015 FF 66 0A 69
 784+ 8019 8E 6A D4 6A                  dw      ZERO, PLUS_ORIGIN
 785+ 801D 5F 76                        dw      BASIC
 786+ 801F
 787+ 801F              //  ______________________________________________________________________
 788+ 801F              //
 789+ 801F              // invv     --
 790+ 801F              //
 791+ 801F              //              Colon_Def INVV, "INVV", is_normal
 792+ 801F              //              dw      LIT, 20, EMITC, ONE, EMITC
 793+ 801F              //              dw      EXIT
 794+ 801F
 795+ 801F              //  ______________________________________________________________________
 796+ 801F              //
 797+ 801F              // truv     --
 798+ 801F              //
 799+ 801F              //              Colon_Def TRUV, "TRUV", is_normal
 800+ 801F              //              dw      LIT, 20, EMITC, ZERO, EMITC
 801+ 801F              //              dw      EXIT
 802+ 801F
 803+ 801F              //  ______________________________________________________________________
 804+ 801F              //
 805+ 801F              // mark     --
 806+ 801F              //
 807+ 801F              //              Colon_Def MARK, "MARK", is_normal
 808+ 801F              //              dw      INVV, TYPE, TRUV
 809+ 801F              //              dw      EXIT
 810+ 801F
 811+ 801F              //  ______________________________________________________________________
 812+ 801F              //
 813+ 801F              // back     --
 814+ 801F              //
 815+ 801F                              Colon_Def BACK, "BACK", is_normal
 815+ 801F             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 815+ 801F             >
 815+ 801F             >Dict_Ptr        defl    $
 815+ 801F             >
 815+ 801F             >//              ______________________________________________________________________
 815+ 801F             >//              Heap part
 815+ 801F             >
 815+ 801F             >
 815+ 801F             >                org     (Heap_Ptr & $1FFF) + $E000
 815+ EC88             >
 815+ EC88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ EC88             >Latest_Definition defl  Heap_Ptr
 815+ EC88             >
 815+ EC88             >                // dummy db directives used to calculate length of namec
 815+ EC88 42 41 43 4B >                db      "BACK"
 815+ EC8C             >len_NFA         defl    $ - temp_NFA
 815+ EC8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ EC88             >
 815+ EC88 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ EC89 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 815+ EC8D             >                org     $-1                 // alter last byte of Name just above to set
 815+ EC8C CB          >                db      {b $} | END_BIT     // msb as name end
 815+ EC8D             >
 815+ EC8D 80 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 815+ EC8F             >Prev_Ptr        defl    Heap_Ptr
 815+ EC8F             >
 815+ EC8F             >mirror_Ptr      defl    $
 815+ EC8F             >
 815+ EC8F 21 80       >                dw      Dict_Ptr + 2        // xt
 815+ EC91             >Heap_Ptr        defl    $ - $E000           // save current HP
 815+ EC91             >
 815+ EC91             >Current_HP      defl  $ - $E000             // used to set HP once!
 815+ EC91             >
 815+ EC91             >//              ______________________________________________________________________
 815+ EC91             >//              Dictionary part
 815+ EC91             >
 815+ EC91             >                org     Dict_Ptr
 815+ 801F             >
 815+ 801F 8F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 815+ 8021             >
 815+ 8021             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 8021 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 815+ 8024             >
 815+ 8024             >
 815+ 8024             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 8024             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 8024             >
 815+ 8024             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 8024 B3 6B F2 6B                  dw      HERE, SUBTRACT, COMMA
 816+ 8028 C9 6B
 817+ 802A 4C 68                        dw      EXIT
 818+ 802C
 819+ 802C              //  ______________________________________________________________________
 820+ 802C              //
 821+ 802C              // if          ( -- a 2 ) \ compile-time
 822+ 802C              // IF ... THEN
 823+ 802C              // IF ... ELSE ... ENDIF
 824+ 802C                              Colon_Def IF, "IF", is_immediate
 824+ 802C             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 824+ 802C             >
 824+ 802C             >Dict_Ptr        defl    $
 824+ 802C             >
 824+ 802C             >//              ______________________________________________________________________
 824+ 802C             >//              Heap part
 824+ 802C             >
 824+ 802C             >
 824+ 802C             >                org     (Heap_Ptr & $1FFF) + $E000
 824+ EC91             >
 824+ EC91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 824+ EC91             >Latest_Definition defl  Heap_Ptr
 824+ EC91             >
 824+ EC91             >                // dummy db directives used to calculate length of namec
 824+ EC91 49 46       >                db      "IF"
 824+ EC93             >len_NFA         defl    $ - temp_NFA
 824+ EC93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 824+ EC91             >
 824+ EC91 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 824+ EC92 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 824+ EC94             >                org     $-1                 // alter last byte of Name just above to set
 824+ EC93 C6          >                db      {b $} | END_BIT     // msb as name end
 824+ EC94             >
 824+ EC94 88 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 824+ EC96             >Prev_Ptr        defl    Heap_Ptr
 824+ EC96             >
 824+ EC96             >mirror_Ptr      defl    $
 824+ EC96             >
 824+ EC96 2E 80       >                dw      Dict_Ptr + 2        // xt
 824+ EC98             >Heap_Ptr        defl    $ - $E000           // save current HP
 824+ EC98             >
 824+ EC98             >Current_HP      defl  $ - $E000             // used to set HP once!
 824+ EC98             >
 824+ EC98             >//              ______________________________________________________________________
 824+ EC98             >//              Dictionary part
 824+ EC98             >
 824+ EC98             >                org     Dict_Ptr
 824+ 802C             >
 824+ 802C 96 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 824+ 802E             >
 824+ 802E             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 824+ 802E CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 824+ 8031             >
 824+ 8031             >
 824+ 8031             >                endif           ; ok        // for other definitions it "points" the correct handler
 824+ 8031             >                // Use of "; ok" to suppress "warning[fwdref]"
 824+ 8031             >
 824+ 8031             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 825+ 8031 5F 6E F5 63                  dw      COMPILE, ZBRANCH
 826+ 8035 B3 6B 8E 6A                  dw      HERE, ZERO, COMMA
 826+ 8039 C9 6B
 827+ 803B 9C 6A                        dw      TWO
 828+ 803D 4C 68                        dw      EXIT
 829+ 803F
 830+ 803F              //  ______________________________________________________________________
 831+ 803F              //
 832+ 803F              // then        ( a 2 -- ) \ compile-time
 833+ 803F              //
 834+ 803F                              Colon_Def THEN, "THEN", is_immediate
 834+ 803F             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 834+ 803F             >
 834+ 803F             >Dict_Ptr        defl    $
 834+ 803F             >
 834+ 803F             >//              ______________________________________________________________________
 834+ 803F             >//              Heap part
 834+ 803F             >
 834+ 803F             >
 834+ 803F             >                org     (Heap_Ptr & $1FFF) + $E000
 834+ EC98             >
 834+ EC98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 834+ EC98             >Latest_Definition defl  Heap_Ptr
 834+ EC98             >
 834+ EC98             >                // dummy db directives used to calculate length of namec
 834+ EC98 54 48 45 4E >                db      "THEN"
 834+ EC9C             >len_NFA         defl    $ - temp_NFA
 834+ EC9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 834+ EC98             >
 834+ EC98 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 834+ EC99 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 834+ EC9D             >                org     $-1                 // alter last byte of Name just above to set
 834+ EC9C CE          >                db      {b $} | END_BIT     // msb as name end
 834+ EC9D             >
 834+ EC9D 91 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 834+ EC9F             >Prev_Ptr        defl    Heap_Ptr
 834+ EC9F             >
 834+ EC9F             >mirror_Ptr      defl    $
 834+ EC9F             >
 834+ EC9F 41 80       >                dw      Dict_Ptr + 2        // xt
 834+ ECA1             >Heap_Ptr        defl    $ - $E000           // save current HP
 834+ ECA1             >
 834+ ECA1             >Current_HP      defl  $ - $E000             // used to set HP once!
 834+ ECA1             >
 834+ ECA1             >//              ______________________________________________________________________
 834+ ECA1             >//              Dictionary part
 834+ ECA1             >
 834+ ECA1             >                org     Dict_Ptr
 834+ 803F             >
 834+ 803F 9F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 834+ 8041             >
 834+ 8041             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 834+ 8041 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 834+ 8044             >
 834+ 8044             >
 834+ 8044             >                endif           ; ok        // for other definitions it "points" the correct handler
 834+ 8044             >                // Use of "; ok" to suppress "warning[fwdref]"
 834+ 8044             >
 834+ 8044             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 835+ 8044 04 6E                        dw      QCOMP
 836+ 8046 9C 6A 28 6E                  dw      TWO, QPAIRS
 837+ 804A B3 6B 01 69                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 837+ 804E F2 6B 1E 69
 837+ 8052 A0 69
 838+ 8054 4C 68                        dw      EXIT
 839+ 8056
 840+ 8056              //  ______________________________________________________________________
 841+ 8056              //
 842+ 8056              // endif       ( a 2 -- ) \ compile-time
 843+ 8056              //
 844+ 8056                              Colon_Def ENDIF, "ENDIF", is_immediate
 844+ 8056             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 844+ 8056             >
 844+ 8056             >Dict_Ptr        defl    $
 844+ 8056             >
 844+ 8056             >//              ______________________________________________________________________
 844+ 8056             >//              Heap part
 844+ 8056             >
 844+ 8056             >
 844+ 8056             >                org     (Heap_Ptr & $1FFF) + $E000
 844+ ECA1             >
 844+ ECA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 844+ ECA1             >Latest_Definition defl  Heap_Ptr
 844+ ECA1             >
 844+ ECA1             >                // dummy db directives used to calculate length of namec
 844+ ECA1 45 4E 44 49 >                db      "ENDIF"
 844+ ECA5 46          >
 844+ ECA6             >len_NFA         defl    $ - temp_NFA
 844+ ECA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 844+ ECA1             >
 844+ ECA1 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 844+ ECA2 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 844+ ECA6 46          >
 844+ ECA7             >                org     $-1                 // alter last byte of Name just above to set
 844+ ECA6 C6          >                db      {b $} | END_BIT     // msb as name end
 844+ ECA7             >
 844+ ECA7 98 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 844+ ECA9             >Prev_Ptr        defl    Heap_Ptr
 844+ ECA9             >
 844+ ECA9             >mirror_Ptr      defl    $
 844+ ECA9             >
 844+ ECA9 58 80       >                dw      Dict_Ptr + 2        // xt
 844+ ECAB             >Heap_Ptr        defl    $ - $E000           // save current HP
 844+ ECAB             >
 844+ ECAB             >Current_HP      defl  $ - $E000             // used to set HP once!
 844+ ECAB             >
 844+ ECAB             >//              ______________________________________________________________________
 844+ ECAB             >//              Dictionary part
 844+ ECAB             >
 844+ ECAB             >                org     Dict_Ptr
 844+ 8056             >
 844+ 8056 A9 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 844+ 8058             >
 844+ 8058             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 844+ 8058 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 844+ 805B             >
 844+ 805B             >
 844+ 805B             >                endif           ; ok        // for other definitions it "points" the correct handler
 844+ 805B             >                // Use of "; ok" to suppress "warning[fwdref]"
 844+ 805B             >
 844+ 805B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 845+ 805B 41 80                        dw      THEN
 846+ 805D 4C 68                        dw      EXIT
 847+ 805F
 848+ 805F              //  ______________________________________________________________________
 849+ 805F              //
 850+ 805F              // else        ( a1 2 -- a2 2 ) \ compile-time
 851+ 805F              //
 852+ 805F                              Colon_Def ELSE, "ELSE", is_immediate
 852+ 805F             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 852+ 805F             >
 852+ 805F             >Dict_Ptr        defl    $
 852+ 805F             >
 852+ 805F             >//              ______________________________________________________________________
 852+ 805F             >//              Heap part
 852+ 805F             >
 852+ 805F             >
 852+ 805F             >                org     (Heap_Ptr & $1FFF) + $E000
 852+ ECAB             >
 852+ ECAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 852+ ECAB             >Latest_Definition defl  Heap_Ptr
 852+ ECAB             >
 852+ ECAB             >                // dummy db directives used to calculate length of namec
 852+ ECAB 45 4C 53 45 >                db      "ELSE"
 852+ ECAF             >len_NFA         defl    $ - temp_NFA
 852+ ECAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 852+ ECAB             >
 852+ ECAB C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 852+ ECAC 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 852+ ECB0             >                org     $-1                 // alter last byte of Name just above to set
 852+ ECAF C5          >                db      {b $} | END_BIT     // msb as name end
 852+ ECB0             >
 852+ ECB0 A1 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 852+ ECB2             >Prev_Ptr        defl    Heap_Ptr
 852+ ECB2             >
 852+ ECB2             >mirror_Ptr      defl    $
 852+ ECB2             >
 852+ ECB2 61 80       >                dw      Dict_Ptr + 2        // xt
 852+ ECB4             >Heap_Ptr        defl    $ - $E000           // save current HP
 852+ ECB4             >
 852+ ECB4             >Current_HP      defl  $ - $E000             // used to set HP once!
 852+ ECB4             >
 852+ ECB4             >//              ______________________________________________________________________
 852+ ECB4             >//              Dictionary part
 852+ ECB4             >
 852+ ECB4             >                org     Dict_Ptr
 852+ 805F             >
 852+ 805F B2 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 852+ 8061             >
 852+ 8061             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 852+ 8061 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 852+ 8064             >
 852+ 8064             >
 852+ 8064             >                endif           ; ok        // for other definitions it "points" the correct handler
 852+ 8064             >                // Use of "; ok" to suppress "warning[fwdref]"
 852+ 8064             >
 852+ 8064             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 853+ 8064 04 6E                        dw      QCOMP
 854+ 8066 9C 6A 28 6E                  dw      TWO, QPAIRS
 855+ 806A 5F 6E E8 63                  dw      COMPILE, BRANCH
 856+ 806E B3 6B 8E 6A                  dw      HERE, ZERO, COMMA
 856+ 8072 C9 6B
 857+ 8074 1E 69 9C 6A                  dw      SWAP, TWO, THEN
 857+ 8078 41 80
 858+ 807A 9C 6A                        dw      TWO
 859+ 807C 4C 68                        dw      EXIT
 860+ 807E
 861+ 807E              //  ______________________________________________________________________
 862+ 807E              //
 863+ 807E              // begin        ( -- a 1 ) \ compile-time
 864+ 807E              // BEGIN ... AGAIN
 865+ 807E              // BEGIN ... f UNTIL
 866+ 807E              // BEGIN ... f WHILE ... REPEAT
 867+ 807E                              Colon_Def BEGIN, "BEGIN", is_immediate
 867+ 807E             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 867+ 807E             >
 867+ 807E             >Dict_Ptr        defl    $
 867+ 807E             >
 867+ 807E             >//              ______________________________________________________________________
 867+ 807E             >//              Heap part
 867+ 807E             >
 867+ 807E             >
 867+ 807E             >                org     (Heap_Ptr & $1FFF) + $E000
 867+ ECB4             >
 867+ ECB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 867+ ECB4             >Latest_Definition defl  Heap_Ptr
 867+ ECB4             >
 867+ ECB4             >                // dummy db directives used to calculate length of namec
 867+ ECB4 42 45 47 49 >                db      "BEGIN"
 867+ ECB8 4E          >
 867+ ECB9             >len_NFA         defl    $ - temp_NFA
 867+ ECB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 867+ ECB4             >
 867+ ECB4 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 867+ ECB5 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 867+ ECB9 4E          >
 867+ ECBA             >                org     $-1                 // alter last byte of Name just above to set
 867+ ECB9 CE          >                db      {b $} | END_BIT     // msb as name end
 867+ ECBA             >
 867+ ECBA AB 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 867+ ECBC             >Prev_Ptr        defl    Heap_Ptr
 867+ ECBC             >
 867+ ECBC             >mirror_Ptr      defl    $
 867+ ECBC             >
 867+ ECBC 80 80       >                dw      Dict_Ptr + 2        // xt
 867+ ECBE             >Heap_Ptr        defl    $ - $E000           // save current HP
 867+ ECBE             >
 867+ ECBE             >Current_HP      defl  $ - $E000             // used to set HP once!
 867+ ECBE             >
 867+ ECBE             >//              ______________________________________________________________________
 867+ ECBE             >//              Dictionary part
 867+ ECBE             >
 867+ ECBE             >                org     Dict_Ptr
 867+ 807E             >
 867+ 807E BC 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 867+ 8080             >
 867+ 8080             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 867+ 8080 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 867+ 8083             >
 867+ 8083             >
 867+ 8083             >                endif           ; ok        // for other definitions it "points" the correct handler
 867+ 8083             >                // Use of "; ok" to suppress "warning[fwdref]"
 867+ 8083             >
 867+ 8083             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 868+ 8083 04 6E                        dw      QCOMP
 869+ 8085 B3 6B                        dw      HERE
 870+ 8087 9C 6A                        dw      TWO
 871+ 8089 4C 68                        dw      EXIT
 872+ 808B
 873+ 808B              //  ______________________________________________________________________
 874+ 808B              //
 875+ 808B              // again        ( a 1 -- ) \ compile-time
 876+ 808B                              Colon_Def AGAIN, "AGAIN", is_immediate
 876+ 808B             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 876+ 808B             >
 876+ 808B             >Dict_Ptr        defl    $
 876+ 808B             >
 876+ 808B             >//              ______________________________________________________________________
 876+ 808B             >//              Heap part
 876+ 808B             >
 876+ 808B             >
 876+ 808B             >                org     (Heap_Ptr & $1FFF) + $E000
 876+ ECBE             >
 876+ ECBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 876+ ECBE             >Latest_Definition defl  Heap_Ptr
 876+ ECBE             >
 876+ ECBE             >                // dummy db directives used to calculate length of namec
 876+ ECBE 41 47 41 49 >                db      "AGAIN"
 876+ ECC2 4E          >
 876+ ECC3             >len_NFA         defl    $ - temp_NFA
 876+ ECC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 876+ ECBE             >
 876+ ECBE C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 876+ ECBF 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 876+ ECC3 4E          >
 876+ ECC4             >                org     $-1                 // alter last byte of Name just above to set
 876+ ECC3 CE          >                db      {b $} | END_BIT     // msb as name end
 876+ ECC4             >
 876+ ECC4 B4 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 876+ ECC6             >Prev_Ptr        defl    Heap_Ptr
 876+ ECC6             >
 876+ ECC6             >mirror_Ptr      defl    $
 876+ ECC6             >
 876+ ECC6 8D 80       >                dw      Dict_Ptr + 2        // xt
 876+ ECC8             >Heap_Ptr        defl    $ - $E000           // save current HP
 876+ ECC8             >
 876+ ECC8             >Current_HP      defl  $ - $E000             // used to set HP once!
 876+ ECC8             >
 876+ ECC8             >//              ______________________________________________________________________
 876+ ECC8             >//              Dictionary part
 876+ ECC8             >
 876+ ECC8             >                org     Dict_Ptr
 876+ 808B             >
 876+ 808B C6 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 876+ 808D             >
 876+ 808D             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 876+ 808D CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 876+ 8090             >
 876+ 8090             >
 876+ 8090             >                endif           ; ok        // for other definitions it "points" the correct handler
 876+ 8090             >                // Use of "; ok" to suppress "warning[fwdref]"
 876+ 8090             >
 876+ 8090             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 877+ 8090 04 6E                        dw      QCOMP
 878+ 8092 9C 6A 28 6E                  dw      TWO, QPAIRS
 879+ 8096 5F 6E E8 63                  dw      COMPILE, BRANCH
 880+ 809A 21 80                        dw      BACK
 881+ 809C 4C 68                        dw      EXIT
 882+ 809E
 883+ 809E              //  ______________________________________________________________________
 884+ 809E              //
 885+ 809E              // until        ( a 1 -- ) \ compile-time
 886+ 809E                              Colon_Def UNTIL, "UNTIL", is_immediate
 886+ 809E             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 886+ 809E             >
 886+ 809E             >Dict_Ptr        defl    $
 886+ 809E             >
 886+ 809E             >//              ______________________________________________________________________
 886+ 809E             >//              Heap part
 886+ 809E             >
 886+ 809E             >
 886+ 809E             >                org     (Heap_Ptr & $1FFF) + $E000
 886+ ECC8             >
 886+ ECC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 886+ ECC8             >Latest_Definition defl  Heap_Ptr
 886+ ECC8             >
 886+ ECC8             >                // dummy db directives used to calculate length of namec
 886+ ECC8 55 4E 54 49 >                db      "UNTIL"
 886+ ECCC 4C          >
 886+ ECCD             >len_NFA         defl    $ - temp_NFA
 886+ ECCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 886+ ECC8             >
 886+ ECC8 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 886+ ECC9 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 886+ ECCD 4C          >
 886+ ECCE             >                org     $-1                 // alter last byte of Name just above to set
 886+ ECCD CC          >                db      {b $} | END_BIT     // msb as name end
 886+ ECCE             >
 886+ ECCE BE 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 886+ ECD0             >Prev_Ptr        defl    Heap_Ptr
 886+ ECD0             >
 886+ ECD0             >mirror_Ptr      defl    $
 886+ ECD0             >
 886+ ECD0 A0 80       >                dw      Dict_Ptr + 2        // xt
 886+ ECD2             >Heap_Ptr        defl    $ - $E000           // save current HP
 886+ ECD2             >
 886+ ECD2             >Current_HP      defl  $ - $E000             // used to set HP once!
 886+ ECD2             >
 886+ ECD2             >//              ______________________________________________________________________
 886+ ECD2             >//              Dictionary part
 886+ ECD2             >
 886+ ECD2             >                org     Dict_Ptr
 886+ 809E             >
 886+ 809E D0 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 886+ 80A0             >
 886+ 80A0             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 886+ 80A0 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 886+ 80A3             >
 886+ 80A3             >
 886+ 80A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 886+ 80A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 886+ 80A3             >
 886+ 80A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 887+ 80A3 04 6E                        dw      QCOMP
 888+ 80A5 9C 6A 28 6E                  dw      TWO, QPAIRS
 889+ 80A9 5F 6E F5 63                  dw      COMPILE, ZBRANCH
 890+ 80AD 21 80                        dw      BACK
 891+ 80AF 4C 68                        dw      EXIT
 892+ 80B1
 893+ 80B1              //  ______________________________________________________________________
 894+ 80B1              //
 895+ 80B1              // end          ( a 1 -- ) \ compile-time
 896+ 80B1                              Colon_Def END, "END", is_immediate
 896+ 80B1             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 896+ 80B1             >
 896+ 80B1             >Dict_Ptr        defl    $
 896+ 80B1             >
 896+ 80B1             >//              ______________________________________________________________________
 896+ 80B1             >//              Heap part
 896+ 80B1             >
 896+ 80B1             >
 896+ 80B1             >                org     (Heap_Ptr & $1FFF) + $E000
 896+ ECD2             >
 896+ ECD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 896+ ECD2             >Latest_Definition defl  Heap_Ptr
 896+ ECD2             >
 896+ ECD2             >                // dummy db directives used to calculate length of namec
 896+ ECD2 45 4E 44    >                db      "END"
 896+ ECD5             >len_NFA         defl    $ - temp_NFA
 896+ ECD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 896+ ECD2             >
 896+ ECD2 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 896+ ECD3 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 896+ ECD6             >                org     $-1                 // alter last byte of Name just above to set
 896+ ECD5 C4          >                db      {b $} | END_BIT     // msb as name end
 896+ ECD6             >
 896+ ECD6 C8 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 896+ ECD8             >Prev_Ptr        defl    Heap_Ptr
 896+ ECD8             >
 896+ ECD8             >mirror_Ptr      defl    $
 896+ ECD8             >
 896+ ECD8 B3 80       >                dw      Dict_Ptr + 2        // xt
 896+ ECDA             >Heap_Ptr        defl    $ - $E000           // save current HP
 896+ ECDA             >
 896+ ECDA             >Current_HP      defl  $ - $E000             // used to set HP once!
 896+ ECDA             >
 896+ ECDA             >//              ______________________________________________________________________
 896+ ECDA             >//              Dictionary part
 896+ ECDA             >
 896+ ECDA             >                org     Dict_Ptr
 896+ 80B1             >
 896+ 80B1 D8 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 896+ 80B3             >
 896+ 80B3             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 896+ 80B3 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 896+ 80B6             >
 896+ 80B6             >
 896+ 80B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 896+ 80B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 896+ 80B6             >
 896+ 80B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 897+ 80B6 A0 80                        dw      UNTIL
 898+ 80B8 4C 68                        dw      EXIT
 899+ 80BA
 900+ 80BA              //  ______________________________________________________________________
 901+ 80BA              //
 902+ 80BA              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 903+ 80BA                              Colon_Def WHILE, "WHILE", is_immediate
 903+ 80BA             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 903+ 80BA             >
 903+ 80BA             >Dict_Ptr        defl    $
 903+ 80BA             >
 903+ 80BA             >//              ______________________________________________________________________
 903+ 80BA             >//              Heap part
 903+ 80BA             >
 903+ 80BA             >
 903+ 80BA             >                org     (Heap_Ptr & $1FFF) + $E000
 903+ ECDA             >
 903+ ECDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ ECDA             >Latest_Definition defl  Heap_Ptr
 903+ ECDA             >
 903+ ECDA             >                // dummy db directives used to calculate length of namec
 903+ ECDA 57 48 49 4C >                db      "WHILE"
 903+ ECDE 45          >
 903+ ECDF             >len_NFA         defl    $ - temp_NFA
 903+ ECDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ ECDA             >
 903+ ECDA C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ ECDB 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 903+ ECDF 45          >
 903+ ECE0             >                org     $-1                 // alter last byte of Name just above to set
 903+ ECDF C5          >                db      {b $} | END_BIT     // msb as name end
 903+ ECE0             >
 903+ ECE0 D2 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 903+ ECE2             >Prev_Ptr        defl    Heap_Ptr
 903+ ECE2             >
 903+ ECE2             >mirror_Ptr      defl    $
 903+ ECE2             >
 903+ ECE2 BC 80       >                dw      Dict_Ptr + 2        // xt
 903+ ECE4             >Heap_Ptr        defl    $ - $E000           // save current HP
 903+ ECE4             >
 903+ ECE4             >Current_HP      defl  $ - $E000             // used to set HP once!
 903+ ECE4             >
 903+ ECE4             >//              ______________________________________________________________________
 903+ ECE4             >//              Dictionary part
 903+ ECE4             >
 903+ ECE4             >                org     Dict_Ptr
 903+ 80BA             >
 903+ 80BA E2 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 903+ 80BC             >
 903+ 80BC             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 80BC CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 80BF             >
 903+ 80BF             >
 903+ 80BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 80BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 80BF             >
 903+ 80BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 80BF 2E 80                        dw      IF
 905+ 80C1              //              dw      TWO_PLUS // ( that is 4 )
 906+ 80C1 67 69                        dw      TWO_SWAP
 907+ 80C3 4C 68                        dw      EXIT
 908+ 80C5
 909+ 80C5              //  ______________________________________________________________________
 910+ 80C5              //
 911+ 80C5              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 912+ 80C5                              Colon_Def REPEAT, "REPEAT", is_immediate
 912+ 80C5             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 912+ 80C5             >
 912+ 80C5             >Dict_Ptr        defl    $
 912+ 80C5             >
 912+ 80C5             >//              ______________________________________________________________________
 912+ 80C5             >//              Heap part
 912+ 80C5             >
 912+ 80C5             >
 912+ 80C5             >                org     (Heap_Ptr & $1FFF) + $E000
 912+ ECE4             >
 912+ ECE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ ECE4             >Latest_Definition defl  Heap_Ptr
 912+ ECE4             >
 912+ ECE4             >                // dummy db directives used to calculate length of namec
 912+ ECE4 52 45 50 45 >                db      "REPEAT"
 912+ ECE8 41 54       >
 912+ ECEA             >len_NFA         defl    $ - temp_NFA
 912+ ECEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ ECE4             >
 912+ ECE4 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ ECE5 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 912+ ECE9 41 54       >
 912+ ECEB             >                org     $-1                 // alter last byte of Name just above to set
 912+ ECEA D4          >                db      {b $} | END_BIT     // msb as name end
 912+ ECEB             >
 912+ ECEB DA 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 912+ ECED             >Prev_Ptr        defl    Heap_Ptr
 912+ ECED             >
 912+ ECED             >mirror_Ptr      defl    $
 912+ ECED             >
 912+ ECED C7 80       >                dw      Dict_Ptr + 2        // xt
 912+ ECEF             >Heap_Ptr        defl    $ - $E000           // save current HP
 912+ ECEF             >
 912+ ECEF             >Current_HP      defl  $ - $E000             // used to set HP once!
 912+ ECEF             >
 912+ ECEF             >//              ______________________________________________________________________
 912+ ECEF             >//              Dictionary part
 912+ ECEF             >
 912+ ECEF             >                org     Dict_Ptr
 912+ 80C5             >
 912+ 80C5 ED 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 912+ 80C7             >
 912+ 80C7             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 80C7 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 80CA             >
 912+ 80CA             >
 912+ 80CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 80CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 80CA             >
 912+ 80CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 80CA 8D 80                        dw      AGAIN
 914+ 80CC              //              dw      TWO_MINUS
 915+ 80CC 41 80                        dw      THEN
 916+ 80CE 4C 68                        dw      EXIT
 917+ 80D0
 918+ 80D0              //  ______________________________________________________________________
 919+ 80D0              //
 920+ 80D0              // ?do-
 921+ 80D0              // special version of "BACK" used by ?DO and LOOP
 922+ 80D0                              Colon_Def C_DO_BACK, "?DO-", is_normal
 922+ 80D0             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 922+ 80D0             >
 922+ 80D0             >Dict_Ptr        defl    $
 922+ 80D0             >
 922+ 80D0             >//              ______________________________________________________________________
 922+ 80D0             >//              Heap part
 922+ 80D0             >
 922+ 80D0             >
 922+ 80D0             >                org     (Heap_Ptr & $1FFF) + $E000
 922+ ECEF             >
 922+ ECEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 922+ ECEF             >Latest_Definition defl  Heap_Ptr
 922+ ECEF             >
 922+ ECEF             >                // dummy db directives used to calculate length of namec
 922+ ECEF 3F 44 4F 2D >                db      "?DO-"
 922+ ECF3             >len_NFA         defl    $ - temp_NFA
 922+ ECF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 922+ ECEF             >
 922+ ECEF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 922+ ECF0 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 922+ ECF4             >                org     $-1                 // alter last byte of Name just above to set
 922+ ECF3 AD          >                db      {b $} | END_BIT     // msb as name end
 922+ ECF4             >
 922+ ECF4 E4 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 922+ ECF6             >Prev_Ptr        defl    Heap_Ptr
 922+ ECF6             >
 922+ ECF6             >mirror_Ptr      defl    $
 922+ ECF6             >
 922+ ECF6 D2 80       >                dw      Dict_Ptr + 2        // xt
 922+ ECF8             >Heap_Ptr        defl    $ - $E000           // save current HP
 922+ ECF8             >
 922+ ECF8             >Current_HP      defl  $ - $E000             // used to set HP once!
 922+ ECF8             >
 922+ ECF8             >//              ______________________________________________________________________
 922+ ECF8             >//              Dictionary part
 922+ ECF8             >
 922+ ECF8             >                org     Dict_Ptr
 922+ 80D0             >
 922+ 80D0 F6 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 922+ 80D2             >
 922+ 80D2             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 922+ 80D2 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 922+ 80D5             >
 922+ 80D5             >
 922+ 80D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 922+ 80D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 922+ 80D5             >
 922+ 80D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 923+ 80D5 21 80                        dw      BACK
 924+ 80D7              CDoBack_Begin:
 925+ 80D7 33 68 71 6B                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 925+ 80DB 96 69 F2 6B
 926+ 80DF F5 63                        dw      ZBRANCH
 927+ 80E1 0A 00                        dw      CDoBack_While - $
 928+ 80E3 C6 68 41 80                  dw          TWO_PLUS, THEN
 929+ 80E7 E8 63                        dw      BRANCH
 930+ 80E9 EE FF                        dw      CDoBack_Begin - $
 931+ 80EB              CDoBack_While:
 932+ 80EB 37 6E 71 6B                  dw      QCSP, CSP, STORE
 932+ 80EF A0 69
 933+ 80F1 4C 68                        dw      EXIT
 934+ 80F3
 935+ 80F3              //  ______________________________________________________________________
 936+ 80F3              //
 937+ 80F3              // do
 938+ 80F3              // DO  ... LOOP
 939+ 80F3              // DO  ... n +LOOP
 940+ 80F3              // ?DO ... LOOP
 941+ 80F3              // ?DO ... n +LOOP
 942+ 80F3                              Colon_Def DO, "DO", is_immediate
 942+ 80F3             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 942+ 80F3             >
 942+ 80F3             >Dict_Ptr        defl    $
 942+ 80F3             >
 942+ 80F3             >//              ______________________________________________________________________
 942+ 80F3             >//              Heap part
 942+ 80F3             >
 942+ 80F3             >
 942+ 80F3             >                org     (Heap_Ptr & $1FFF) + $E000
 942+ ECF8             >
 942+ ECF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ ECF8             >Latest_Definition defl  Heap_Ptr
 942+ ECF8             >
 942+ ECF8             >                // dummy db directives used to calculate length of namec
 942+ ECF8 44 4F       >                db      "DO"
 942+ ECFA             >len_NFA         defl    $ - temp_NFA
 942+ ECFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ ECF8             >
 942+ ECF8 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ ECF9 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 942+ ECFB             >                org     $-1                 // alter last byte of Name just above to set
 942+ ECFA CF          >                db      {b $} | END_BIT     // msb as name end
 942+ ECFB             >
 942+ ECFB EF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 942+ ECFD             >Prev_Ptr        defl    Heap_Ptr
 942+ ECFD             >
 942+ ECFD             >mirror_Ptr      defl    $
 942+ ECFD             >
 942+ ECFD F5 80       >                dw      Dict_Ptr + 2        // xt
 942+ ECFF             >Heap_Ptr        defl    $ - $E000           // save current HP
 942+ ECFF             >
 942+ ECFF             >Current_HP      defl  $ - $E000             // used to set HP once!
 942+ ECFF             >
 942+ ECFF             >//              ______________________________________________________________________
 942+ ECFF             >//              Dictionary part
 942+ ECFF             >
 942+ ECFF             >                org     Dict_Ptr
 942+ 80F3             >
 942+ 80F3 FD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 942+ 80F5             >
 942+ 80F5             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 80F5 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 80F8             >
 942+ 80F8             >
 942+ 80F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 80F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 80F8             >
 942+ 80F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 80F8 5F 6E 34 64                  dw      COMPILE, C_DO
 944+ 80FC 71 6B 96 69                  dw      CSP, FETCH, STORE_CSP
 944+ 8100 E2 6D
 945+ 8102 B3 6B A3 6A                  dw      HERE, THREE
 946+ 8106 4C 68                        dw      EXIT
 947+ 8108
 948+ 8108              //  ______________________________________________________________________
 949+ 8108              //
 950+ 8108              // loop
 951+ 8108                              Colon_Def LOOP, "LOOP", is_immediate
 951+ 8108             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 951+ 8108             >
 951+ 8108             >Dict_Ptr        defl    $
 951+ 8108             >
 951+ 8108             >//              ______________________________________________________________________
 951+ 8108             >//              Heap part
 951+ 8108             >
 951+ 8108             >
 951+ 8108             >                org     (Heap_Ptr & $1FFF) + $E000
 951+ ECFF             >
 951+ ECFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 951+ ECFF             >Latest_Definition defl  Heap_Ptr
 951+ ECFF             >
 951+ ECFF             >                // dummy db directives used to calculate length of namec
 951+ ECFF 4C 4F 4F 50 >                db      "LOOP"
 951+ ED03             >len_NFA         defl    $ - temp_NFA
 951+ ED03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 951+ ECFF             >
 951+ ECFF C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 951+ ED00 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 951+ ED04             >                org     $-1                 // alter last byte of Name just above to set
 951+ ED03 D0          >                db      {b $} | END_BIT     // msb as name end
 951+ ED04             >
 951+ ED04 F8 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 951+ ED06             >Prev_Ptr        defl    Heap_Ptr
 951+ ED06             >
 951+ ED06             >mirror_Ptr      defl    $
 951+ ED06             >
 951+ ED06 0A 81       >                dw      Dict_Ptr + 2        // xt
 951+ ED08             >Heap_Ptr        defl    $ - $E000           // save current HP
 951+ ED08             >
 951+ ED08             >Current_HP      defl  $ - $E000             // used to set HP once!
 951+ ED08             >
 951+ ED08             >//              ______________________________________________________________________
 951+ ED08             >//              Dictionary part
 951+ ED08             >
 951+ ED08             >                org     Dict_Ptr
 951+ 8108             >
 951+ 8108 06 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 951+ 810A             >
 951+ 810A             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 951+ 810A CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 951+ 810D             >
 951+ 810D             >
 951+ 810D             >                endif           ; ok        // for other definitions it "points" the correct handler
 951+ 810D             >                // Use of "; ok" to suppress "warning[fwdref]"
 951+ 810D             >
 951+ 810D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 952+ 810D A3 6A 28 6E                  dw      THREE, QPAIRS
 953+ 8111 5F 6E E0 63                  dw      COMPILE, C_LOOP
 954+ 8115 D2 80                        dw      C_DO_BACK
 955+ 8117 4C 68                        dw      EXIT
 956+ 8119
 957+ 8119              //  ______________________________________________________________________
 958+ 8119              //
 959+ 8119              // +loop
 960+ 8119                              Colon_Def PLOOP, "+LOOP", is_immediate
 960+ 8119             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 960+ 8119             >
 960+ 8119             >Dict_Ptr        defl    $
 960+ 8119             >
 960+ 8119             >//              ______________________________________________________________________
 960+ 8119             >//              Heap part
 960+ 8119             >
 960+ 8119             >
 960+ 8119             >                org     (Heap_Ptr & $1FFF) + $E000
 960+ ED08             >
 960+ ED08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 960+ ED08             >Latest_Definition defl  Heap_Ptr
 960+ ED08             >
 960+ ED08             >                // dummy db directives used to calculate length of namec
 960+ ED08 2B 4C 4F 4F >                db      "+LOOP"
 960+ ED0C 50          >
 960+ ED0D             >len_NFA         defl    $ - temp_NFA
 960+ ED0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 960+ ED08             >
 960+ ED08 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 960+ ED09 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 960+ ED0D 50          >
 960+ ED0E             >                org     $-1                 // alter last byte of Name just above to set
 960+ ED0D D0          >                db      {b $} | END_BIT     // msb as name end
 960+ ED0E             >
 960+ ED0E FF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 960+ ED10             >Prev_Ptr        defl    Heap_Ptr
 960+ ED10             >
 960+ ED10             >mirror_Ptr      defl    $
 960+ ED10             >
 960+ ED10 1B 81       >                dw      Dict_Ptr + 2        // xt
 960+ ED12             >Heap_Ptr        defl    $ - $E000           // save current HP
 960+ ED12             >
 960+ ED12             >Current_HP      defl  $ - $E000             // used to set HP once!
 960+ ED12             >
 960+ ED12             >//              ______________________________________________________________________
 960+ ED12             >//              Dictionary part
 960+ ED12             >
 960+ ED12             >                org     Dict_Ptr
 960+ 8119             >
 960+ 8119 10 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 960+ 811B             >
 960+ 811B             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 960+ 811B CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 960+ 811E             >
 960+ 811E             >
 960+ 811E             >                endif           ; ok        // for other definitions it "points" the correct handler
 960+ 811E             >                // Use of "; ok" to suppress "warning[fwdref]"
 960+ 811E             >
 960+ 811E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 961+ 811E A3 6A 28 6E                  dw      THREE, QPAIRS
 962+ 8122 5F 6E B1 63                  dw      COMPILE, C_PLOOP
 963+ 8126 D2 80                        dw      C_DO_BACK
 964+ 8128 4C 68                        dw      EXIT
 965+ 812A
 966+ 812A              //  ______________________________________________________________________
 967+ 812A              //
 968+ 812A              // ?do
 969+ 812A                              Colon_Def QDO, "?DO", is_immediate
 969+ 812A             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 969+ 812A             >
 969+ 812A             >Dict_Ptr        defl    $
 969+ 812A             >
 969+ 812A             >//              ______________________________________________________________________
 969+ 812A             >//              Heap part
 969+ 812A             >
 969+ 812A             >
 969+ 812A             >                org     (Heap_Ptr & $1FFF) + $E000
 969+ ED12             >
 969+ ED12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ ED12             >Latest_Definition defl  Heap_Ptr
 969+ ED12             >
 969+ ED12             >                // dummy db directives used to calculate length of namec
 969+ ED12 3F 44 4F    >                db      "?DO"
 969+ ED15             >len_NFA         defl    $ - temp_NFA
 969+ ED15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ ED12             >
 969+ ED12 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ ED13 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 969+ ED16             >                org     $-1                 // alter last byte of Name just above to set
 969+ ED15 CF          >                db      {b $} | END_BIT     // msb as name end
 969+ ED16             >
 969+ ED16 08 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 969+ ED18             >Prev_Ptr        defl    Heap_Ptr
 969+ ED18             >
 969+ ED18             >mirror_Ptr      defl    $
 969+ ED18             >
 969+ ED18 2C 81       >                dw      Dict_Ptr + 2        // xt
 969+ ED1A             >Heap_Ptr        defl    $ - $E000           // save current HP
 969+ ED1A             >
 969+ ED1A             >Current_HP      defl  $ - $E000             // used to set HP once!
 969+ ED1A             >
 969+ ED1A             >//              ______________________________________________________________________
 969+ ED1A             >//              Dictionary part
 969+ ED1A             >
 969+ ED1A             >                org     Dict_Ptr
 969+ 812A             >
 969+ 812A 18 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 969+ 812C             >
 969+ 812C             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 812C CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 812F             >
 969+ 812F             >
 969+ 812F             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 812F             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 812F             >
 969+ 812F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 812F 5F 6E 0C 64                  dw      COMPILE, C_Q_DO
 971+ 8133 71 6B 96 69                  dw      CSP, FETCH, STORE_CSP
 971+ 8137 E2 6D
 972+ 8139 B3 6B 8E 6A                  dw      HERE, ZERO, COMMA, ZERO
 972+ 813D C9 6B 8E 6A
 973+ 8141 B3 6B A3 6A                  dw      HERE, THREE
 974+ 8145 4C 68                        dw      EXIT
 975+ 8147
 976+ 8147              //  ______________________________________________________________________
 977+ 8147              //
 978+ 8147              // \
 979+ 8147                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 979+ 8147             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 979+ 8147             >
 979+ 8147             >Dict_Ptr        defl    $
 979+ 8147             >
 979+ 8147             >//              ______________________________________________________________________
 979+ 8147             >//              Heap part
 979+ 8147             >
 979+ 8147             >
 979+ 8147             >                org     (Heap_Ptr & $1FFF) + $E000
 979+ ED1A             >
 979+ ED1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 979+ ED1A             >Latest_Definition defl  Heap_Ptr
 979+ ED1A             >
 979+ ED1A             >                // dummy db directives used to calculate length of namec
 979+ ED1A 5C          >                db      "\\"
 979+ ED1B             >len_NFA         defl    $ - temp_NFA
 979+ ED1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 979+ ED1A             >
 979+ ED1A C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 979+ ED1B 5C          >                db      "\\"               // name string in 7-bit ascii, but
 979+ ED1C             >                org     $-1                 // alter last byte of Name just above to set
 979+ ED1B DC          >                db      {b $} | END_BIT     // msb as name end
 979+ ED1C             >
 979+ ED1C 12 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 979+ ED1E             >Prev_Ptr        defl    Heap_Ptr
 979+ ED1E             >
 979+ ED1E             >mirror_Ptr      defl    $
 979+ ED1E             >
 979+ ED1E 49 81       >                dw      Dict_Ptr + 2        // xt
 979+ ED20             >Heap_Ptr        defl    $ - $E000           // save current HP
 979+ ED20             >
 979+ ED20             >Current_HP      defl  $ - $E000             // used to set HP once!
 979+ ED20             >
 979+ ED20             >//              ______________________________________________________________________
 979+ ED20             >//              Dictionary part
 979+ ED20             >
 979+ ED20             >                org     Dict_Ptr
 979+ 8147             >
 979+ 8147 1E 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 979+ 8149             >
 979+ 8149             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 979+ 8149 CD 39 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 979+ 814C             >
 979+ 814C             >
 979+ 814C             >                endif           ; ok        // for other definitions it "points" the correct handler
 979+ 814C             >                // Use of "; ok" to suppress "warning[fwdref]"
 979+ 814C             >
 979+ 814C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 980+ 814C 2F 6B 96 69                  dw      BLK, FETCH
 981+ 8150 F5 63                        dw      ZBRANCH
 982+ 8152 30 00                        dw      Backslash_Else_1 - $
 983+ 8154 2F 6B 96 69                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 983+ 8158 95 6A 2C 6C
 984+ 815C F5 63                        dw          ZBRANCH
 985+ 815E 18 00                        dw          Backslash_Else_2 - $
 986+ 8160 35 6B 96 69                  dw              TO_IN, FETCH, CL, MOD, CL
 986+ 8164 B8 6A 53 77
 986+ 8168 B8 6A
 987+ 816A 1E 69 F2 6B                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 987+ 816E 35 6B 7E 69
 988+ 8172 E8 63                        dw          BRANCH
 989+ 8174 0A 00                        dw          Backslash_Endif_2 - $
 990+ 8176              Backslash_Else_2:
 991+ 8176 BF 6A D3 68                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 991+ 817A 35 6B A0 69
 992+ 817E              Backslash_Endif_2:
 993+ 817E E8 63                        dw      BRANCH
 994+ 8180 10 00                        dw      Backslash_Endif_1 - $
 995+ 8182              Backslash_Else_1:
 996+ 8182 8E 6A F3 6A                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
 996+ 8186 96 69 35 6B
 996+ 818A 96 69 9F 68
 996+ 818E A0 69
 997+ 8190              Backslash_Endif_1:
 998+ 8190 4C 68                        dw      EXIT
 999+ 8192
1000+ 8192              Fence_Word:
1001+ 8192              //  ______________________________________________________________________
1002+ 8192              //
1003+ 8192
1004+ 8192 00           Here_Dictionary db      0
1005+ 8193
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
 125  8193
 126  8193              // now we save the compiled file so we can either run it or debug it
 127  8193                              SAVENEX OPEN "output/main.nex", ORIGIN
 128  8193                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 129  8193                              SAVENEX CFG  0
 130  8193                              SAVENEX BANK 2, 0
 131  8193                              SAVENEX AUTO
 132  8193                              SAVENEX CLOSE
 133  8193
 134  8193              //              PAGE 7 ;set 7 page to current slot
 135  8193              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 136  8193              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 137  8193
 138  8193                              SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, 9999
 139  8193                              SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 140  8193
 141  8193                              SAVEBIN "output/forth17d.bin", ORIGIN, 9999
 142  8193                              SAVEBIN "output/ram7.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 143  8193
 144  8193                              // To load on ZX Spectrum Next you have to type
 145  8193                              //      LOAD "ram7.bin" BANK 16
 146  8193                              //      LOAD "forth17d.bin" CODE
 147  8193
 148  8193                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
