# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  build 20240616
   8  0000              //
   9  0000              //  Direct-Threaded version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              // MIT License
  15  0000              //
  16  0000              // Copyright (c) 1990-2024 Matteo Vitturi
  17  0000              //
  18  0000              // Permission is hereby granted, free of charge, to any person obtaining a copy
  19  0000              // of this software and associated documentation files (the "Software"), to deal
  20  0000              // in the Software without restriction, including without limitation the rights
  21  0000              // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  22  0000              // copies of the Software, and to permit persons to whom the Software is
  23  0000              // furnished to do so, subject to the following conditions:
  24  0000              //
  25  0000              // The above copyright notice and this permission notice shall be included in all
  26  0000              // copies or substantial portions of the Software.
  27  0000              //
  28  0000              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29  0000              // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30  0000              // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  31  0000              // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  32  0000              // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  33  0000              // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  34  0000              // SOFTWARE.
  35  0000              //  ______________________________________________________________________
  36  0000              //
  37  0000              //  by Matteo Vitturi, 1990-2024
  38  0000              //
  39  0000              //  https://sites.google.com/view/vforth/vforth15-next
  40  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  41  0000              //
  42  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  43  0000              //  Each line of this source list mustn't exceed 80 bytes.
  44  0000              //  Z80N (ZX Spectrum Next) extension is available.
  45  0000              //
  46  0000              //  This list has been tested using the following configuration:
  47  0000              //      - CSpect emulator V.2.12.30
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  Z80 Registers usage map
  51  0000              //
  52  0000              //  AF
  53  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  54  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  55  0000              //  HL - Working
  56  0000              //
  57  0000              //  AF'- Sometime used for backup purpose
  58  0000              //  BC'- Not used
  59  0000              //  DE'- Not used
  60  0000              //  HL'- Not used
  61  0000              //
  62  0000              //  SP - Calculator Stack Pointer
  63  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  64  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  65  0000              //
  66  0000              //  ______________________________________________________________________
  67  0000              //
  68  0000              //  _________________
  69  0000              //
  70  0000              //  FORTH DEFINITIONS
  71  0000              //  _________________
  72  0000
  73  0000                              OPT     --zxnext
  74  0000              //  ______________________________________________________________________
  75  0000              //
  76  0000              // this controls some debugging code in L0.asm
  77  0000              //  0 for final binary release.
  78  0000              //  1 for debugging with Visual Studio Code and DeZog
  79  0000              // -1 for for binary comparison with Forth generated code.
  80  0000              DEBUGGING       equ     0
  81  0000              //
  82  0000              //  ______________________________________________________________________
  83  0000
  84  0000                              if ( -1 == DEBUGGING )
  85  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  86  0000 ~            ORIGIN          equ     $6366   -$80                   // for binary comparison with single compilation
  87  0000 ~            Heap_Ptr        defl    $0002              // HP before compilation
  88  0000 ~            Heap_offset     defl    0                // given by compilation
  89  0000 ~
  90  0000                              endif
  91  0000              //  ______________________________________________________________________
  92  0000
  93  0000                              if (  0 == DEBUGGING )
  94  0000              ORIGIN          equ     $6366                   // binary and Tape
  95  0000              // ORIGIN          equ     $9A93                // binary and Tape
  96  0000              Heap_Ptr        defl    $0002
  97  0000              Heap_offset     defl     0
  98  0000
  99  0000                              endif
 100  0000              //  ______________________________________________________________________
 101  0000
 102  0000                              if (  1 == DEBUGGING )
 103  0000 ~            ORIGIN          equ     $8080                   // for DeZog
 104  0000 ~            Heap_Ptr        defl    $0002
 105  0000 ~            Heap_offset     defl     0
 106  0000 ~
 107  0000                              endif
 108  0000              //  ______________________________________________________________________
 109  0000
 110  0000                              DEVICE  ZXSPECTRUMNEXT
 111  0000
 112  0000                              ORG     ORIGIN
 113  6366
 114  6366                              if ( -1 == DEBUGGING )
 115  6366 ~                            ds 128                            // for binary comparison
 116  6366                              endif
 117  6366
 118  6366              //  ______________________________________________________________________
 119  6366              //
 120  6366              //  Naming convention for Label vs Forth correspondance
 121  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 122  6366              //    - Leading "0" is converted into "Z_"
 123  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
 124  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 125  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 126  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 127  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 128  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 129  6366              //    - Equal sign "=" is converted in EQUAL
 130  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 131  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 132  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 133  6366              //    - Exclamation mark "!" is converted in STORE
 134  6366              //    - At-Sign "@" is converted in FETCH
 135  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 136  6366
 137  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE: Return Stack Pointer
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366              RAMTOP          equ     $5CB2
  22+ 6366              TSTACK          equ     $5C00                   // TSTACK
  23+ 6366              // FSTACK          ecu     $4000 - 8
  24+ 6366              //  ______________________________________________________________________
  25+ 6366              //
  26+ 6366              // Flag constants
  27+ 6366              TRUE_FLAG       equ     $FFFF
  28+ 6366              FALSE_FLAG      equ     $0000
  29+ 6366
  30+ 6366              //  ______________________________________________________________________
  31+ 6366              //
  32+ 6366              // Ascii char constants
  33+ 6366              NUL_CHAR        equ     $00
  34+ 6366              COMMA_CHAR      equ     $06
  35+ 6366              BACKSPACE_CHAR  equ     $08
  36+ 6366              CR_CHAR         equ     $0D
  37+ 6366              BLANK_CHAR      equ     $20
  38+ 6366              QUOTE_CHAR      equ     "'"
  39+ 6366              DQUOTE_CHAR     equ     '"'
  40+ 6366              UNDERSCORE_CHAR equ     $5F
  41+ 6366              SOLIDBLOCK_CHAR equ     $8F
  42+ 6366              HALFBLOCK_CHAR  equ     $8C
  43+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  44+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  45+ 6366
  46+ 6366
  47+ 6366              //  ______________________________________________________________________
  48+ 6366              //
  49+ 6366
  50+ 6366                              // emulate something like:  ld hl,rp
  51+ 6366              ldhlrp          macro
  52+ 6366 ~                            ld      hl,(RP_Pointer)
  53+ 6366                              endm
  54+ 6366
  55+ 6366                              // emulate something like:  ld rp,hl
  56+ 6366              ldrphl          macro
  57+ 6366 ~                            ld      (RP_Pointer),hl
  58+ 6366                              endm
  59+ 6366
  60+ 6366              //  ______________________________________________________________________
  61+ 6366              //
  62+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  63+ 6366              next            macro
  64+ 6366 ~                            jp      (ix)
  65+ 6366                              endm
  66+ 6366
  67+ 6366              psh1            macro
  68+ 6366 ~                            push    hl
  69+ 6366 ~                            jp      (ix)
  70+ 6366                              endm
  71+ 6366
  72+ 6366              psh2            macro
  73+ 6366 ~                            push    de
  74+ 6366 ~                            push    hl
  75+ 6366 ~                            jp      (ix)
  76+ 6366                              endm
  77+ 6366
  78+ 6366              //  ______________________________________________________________________
  79+ 6366              //
  80+ 6366              // Bit constants in length-byte
  81+ 6366
  82+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  83+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  84+ 6366              END_BIT         equ     %10000000               // $80
  85+ 6366
  86+ 6366
  87+ 6366              //  ______________________________________________________________________
  88+ 6366              //
  89+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  90+ 6366              //  pointers
  91+ 6366              temp_NFA        defl    0
  92+ 6366              last_NFA        defl    0
  93+ 6366              len_NFA         defl    0
  94+ 6366
  95+ 6366              Dict_Ptr        defl    0
  96+ 6366              // Heap_Ptr        defl    $0002
  97+ 6366              Prev_Ptr        defl    0
  98+ 6366              mirror_Ptr      defl    0
  99+ 6366
 100+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
 101+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
 102+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 103+ 6366
 104+ 6366
 105+ 6366              Behave          macro   xp
 106+ 6366 ~            temp_PTR        defl    $                   // save this org
 107+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 108+ 6366 ~                            dw      xp
 109+ 6366 ~                            org     temp_PTR
 110+ 6366                              endm
 111+ 6366
 112+ 6366              //  ______________________________________________________________________
 113+ 6366              //
 114+ 6366              //  Create a new "low-level" definition
 115+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 116+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 117+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 118+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 119+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 120+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 121+ 6366              //  This macro acts much like the standard Forth definition CREATE
 122+ 6366
 123+ 6366              New_Def         macro   label, namec, runcode, bits
 124+ 6366 ~
 125+ 6366 ~            Dict_Ptr        defl    $
 126+ 6366 ~
 127+ 6366 ~            //              ______________________________________________________________________
 128+ 6366 ~            //              Heap part
 129+ 6366 ~
 130+ 6366 ~
 131+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 132+ 6366 ~
 133+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 134+ 6366 ~            Latest_Definition defl  Heap_Ptr
 135+ 6366 ~
 136+ 6366 ~                            // dummy db directives used to calculate length of namec
 137+ 6366 ~                            db      namec
 138+ 6366 ~            len_NFA         defl    $ - temp_NFA
 139+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ 6366 ~
 141+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 143+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 144+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 145+ 6366 ~
 146+ 6366 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147+ 6366 ~            Prev_Ptr        defl    Heap_Ptr
 148+ 6366 ~
 149+ 6366 ~            mirror_Ptr      defl    $
 150+ 6366 ~
 151+ 6366 ~                            dw      Dict_Ptr + 2        // xt
 152+ 6366 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 153+ 6366 ~
 154+ 6366 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 155+ 6366 ~
 156+ 6366 ~            //              ______________________________________________________________________
 157+ 6366 ~            //              Dictionary part
 158+ 6366 ~
 159+ 6366 ~                            org     Dict_Ptr
 160+ 6366 ~
 161+ 6366 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6366 ~
 163+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 165+ 6366 ~
 166+ 6366 ~
 167+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6366 ~
 170+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6366                              endm
 172+ 6366
 173+ 6366              //  ______________________________________________________________________
 174+ 6366              //
 175+ 6366              // Create a "constant"
 176+ 6366              // The constant value is compiled in first PFA cell
 177+ 6366              Constant_Def    macro   label, namec, constant_value
 178+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 179+ 6366 ~                            dw      constant_value
 180+ 6366                              endm
 181+ 6366
 182+ 6366              //  ______________________________________________________________________
 183+ 6366              //
 184+ 6366              // Create a "variable"
 185+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 186+ 6366              // this allow creation of "variables" which content is  of any length
 187+ 6366              Variable_Def    macro   label, namec, initial_value
 188+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 189+ 6366 ~                            dw      initial_value
 190+ 6366                              endm
 191+ 6366
 192+ 6366              //  ______________________________________________________________________
 193+ 6366              //
 194+ 6366              // Create a "user"
 195+ 6366              // It uses a single byte as offset to calculate the address of the variable
 196+ 6366              User_Def        macro   label, namec, offset_value
 197+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 198+ 6366 ~                            db      offset_value
 199+ 6366                              endm
 200+ 6366
 201+ 6366              //  ______________________________________________________________________
 202+ 6366              //
 203+ 6366              // Create a "colon-definition"
 204+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 205+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 206+ 6366              Colon_Def       macro   label, namec, bits
 207+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 208+ 6366                              endm
 209+ 6366
 210+ 6366              //  ______________________________________________________________________
 211+ 6366              //
 212+ 6366              // Create a "heap-string"
 213+ 6366              Start_Heap      macro
 214+ 6366 ~            temp_ORG        defl    $                   // save this ORG
 215+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 216+ 6366 ~
 217+ 6366                              endm
 218+ 6366
 219+ 6366              End_Heap        macro
 220+ 6366 ~            Heap_Ptr        defl    $ - $E000
 221+ 6366 ~                            org     temp_ORG
 222+ 6366 ~
 223+ 6366                              endm
 224+ 6366
 225+ 6366
 226+ 6366              //  ______________________________________________________________________
 227+ 6366              //
 228+ 6366
 229+ 6366
 230+ 6366
 231+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 232+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 233+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 234+ 6366              USER_system:    equ     $D188               // User variables zone.
 235+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 236+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 237+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
 138  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366              Cold_origin:
   9+ 6366 A7                           and     a
  10+ 6367 C3 27 76                     jp      ColdRoutine
  11+ 636A              Warm_origin:
  12+ 636A 37                           scf
  13+ 636B C3 27 76                     jp      WarmRoutine
  14+ 636E
  15+ 636E              // +008
  16+ 636E E4 D0        SP_Basic:       dw      $D0E4               // These are bits with some "standard" meaning... 0101
  17+ 6370
  18+ 6370              // +00A
  19+ 6370 00 0E                        dw      $0E00
  20+ 6372
  21+ 6372              // +00C
  22+ 6372 01 0D        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 6374
  24+ 6374              // +00E
  25+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 6376
  27+ 6376              // +010
  28+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 6378
  30+ 6378              // +012
  31+ 6378 E8 D0        S0_origin:      dw      S0_system
  32+ 637A 88 D1        R0_origin:      dw      R0_system
  33+ 637C E8 D0        TIB_origin:     dw      TIB_system
  34+ 637E 1F 00        WIDTH_origin:   dw      31
  35+ 6380 01 00        WARNING_origin: dw      1
  36+ 6382 5D 81        FENCE_origin:   dw      Fence_Word
  37+ 6384 5D 81        DP_origin       dw      Fence_Word
  38+ 6386 44 75        VOCLINK_origin: dw      Voclink_Ptr
  39+ 6388 E4 D1                        dw      FIRST_system
  40+ 638A 00 E0                        dw      LIMIT_system
  41+ 638C 07 0D        HP_origin:      dw      Current_HP
  42+ 638E
  43+ 638E              // +028
  44+ 638E 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638F 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6390 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6391 00                           db      0
  48+ 6392
  49+ 6392              // +02C
  50+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP during NextOS call
  51+ 6394
  52+ 6394              // +02E
  53+ 6394 88 D1        USER_Pointer:   dw      USER_system
  54+ 6396
  55+ 6396              // +030
  56+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 6398
  58+ 6398              // +32
  59+ 6398 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 639A
  61+ 639A
  62+ 639A                              Start_Heap
  62+ 639A             >temp_ORG        defl    $                   // save this ORG
  62+ 639A             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002                              // length include a leading space in each line
  65+ E002 71                           db      113
  66+ E003 20 76 2D 46                  db      " v-Forth 1.7 - NextZXOS version ", $0D      // 33
  66+ E007 6F 72 74 68
  66+ E00B 20 31 2E 37
  66+ E00F 20 2D 20 4E
  66+ E013 65 78 74 5A
  66+ E017 58 4F 53 20
  66+ E01B 76 65 72 73
  66+ E01F 69 6F 6E 20
  66+ E023 0D
  67+ E024 20 48 65 61                  db      " Heap Vocabulary - build 2024-06-16 ", $0D  // 37
  67+ E028 70 20 56 6F
  67+ E02C 63 61 62 75
  67+ E030 6C 61 72 79
  67+ E034 20 2D 20 62
  67+ E038 75 69 6C 64
  67+ E03C 20 32 30 32
  67+ E040 34 2D 30 36
  67+ E044 2D 31 36 20
  67+ E048 0D
  68+ E049 20 4D 49 54                  db      " MIT License ", 127                         // 14
  68+ E04D 20 4C 69 63
  68+ E051 65 6E 73 65
  68+ E055 20 7F
  69+ E057 20 31 39 39                  db      " 1990-2024 Matteo Vitturi ", $0D            // 27
  69+ E05B 30 2D 32 30
  69+ E05F 32 34 20 4D
  69+ E063 61 74 74 65
  69+ E067 6F 20 56 69
  69+ E06B 74 74 75 72
  69+ E06F 69 20 0D
  70+ E072 07 00                        db      7,0
  71+ E074                              End_Heap
  71+ E074             >Heap_Ptr        defl    $ - $E000
  71+ E074             >                org     temp_ORG
  71+ 639A             >
  72+ 639A
  73+ 639A              //  ______________________________________________________________________
  74+ 639A
  75+ 639A              // from this point we can use LDHLRP and LDRPHL Assembler macros
  76+ 639A              // instead of their equivalent long sequences.
  77+ 639A
  78+ 639A              //  ______________________________________________________________________
  79+ 639A
  80+ 639A              // address for "next" - inner interpreter
  81+ 639A              // This address must always be pointed by IX
  82+ 639A              // "next" macro simply does a  jp(ix)  instruction
  83+ 639A
  84+ 639A              // Psh2_Ptr:       push    de
  85+ 639A              // Psh1_Ptr:       push    hl
  86+ 639A
  87+ 639A              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  88+ 639A
  89+ 639A                              if ( 1 == DEBUGGING )
  90+ 639A ~                            ld      hl, Next_Breakpoint_1
  91+ 639A ~                            and     a
  92+ 639A ~                            sbc     hl, bc
  93+ 639A ~                            jr      nz, Next_Continue
  94+ 639A ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  95+ 639A                              endif
  96+ 639A
  97+ 639A              Next_Continue:
  98+ 639A 0A                           ld      a, (bc)
  99+ 639B 03                           inc     bc
 100+ 639C 6F                           ld      l, a
 101+ 639D 0A                           ld      a, (bc)
 102+ 639E 03                           inc     bc
 103+ 639F 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 104+ 63A0
 105+ 63A0              // Execute xt i.e. CFA held in HL
 106+ 63A0              Exec_Ptr:
 107+ 63A0
 108+ 63A0
 109+ 63A0
 110+ 63A0
 111+ 63A0 E9                           jp      (hl)                // and jump to it
 112+ 63A1                                                          // there you'll find the real code or a CALL to a ;code part
 113+ 63A1
 114+ 63A1              // temp_NULL       defl    Heap_Ptr & $1FFF
 115+ 63A1              // 0x00         n --      ( compile time )
 116+ 63A1              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 117+ 63A1              //              next
 118+ 63A1
 119+ 63A1              //  ______________________________________________________________________
 120+ 63A1              //
 121+ 63A1              // lit          -- x
 122+ 63A1              // puts on top of stack the value of the following word.
 123+ 63A1              // it is compiled in colon definition before a literal number
 124+ 63A1
 125+ 63A1                              New_Def  LIT, "LIT", is_code, is_normal
 125+ 63A1             >
 125+ 63A1             >Dict_Ptr        defl    $
 125+ 63A1             >
 125+ 63A1             >//              ______________________________________________________________________
 125+ 63A1             >//              Heap part
 125+ 63A1             >
 125+ 63A1             >
 125+ 63A1             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E074             >
 125+ E074             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E074             >Latest_Definition defl  Heap_Ptr
 125+ E074             >
 125+ E074             >                // dummy db directives used to calculate length of namec
 125+ E074 4C 49 54    >                db      "LIT"
 125+ E077             >len_NFA         defl    $ - temp_NFA
 125+ E077             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E074             >
 125+ E074 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E075 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 125+ E078             >                org     $-1                 // alter last byte of Name just above to set
 125+ E077 D4          >                db      {b $} | END_BIT     // msb as name end
 125+ E078             >
 125+ E078 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E07A             >Prev_Ptr        defl    Heap_Ptr
 125+ E07A             >
 125+ E07A             >mirror_Ptr      defl    $
 125+ E07A             >
 125+ E07A A3 63       >                dw      Dict_Ptr + 2        // xt
 125+ E07C             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E07C             >
 125+ E07C             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E07C             >
 125+ E07C             >//              ______________________________________________________________________
 125+ E07C             >//              Dictionary part
 125+ E07C             >
 125+ E07C             >                org     Dict_Ptr
 125+ 63A1             >
 125+ 63A1 7A 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 63A3             >
 125+ 63A3             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 63A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 125+ 63A3 ~           >
 125+ 63A3 ~           >
 125+ 63A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 63A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 63A3             >
 125+ 63A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 63A3
 127+ 63A3 0A                           ld      a, (bc)
 128+ 63A4 03                           inc     bc
 129+ 63A5 6F                           ld      l, a
 130+ 63A6 0A                           ld      a, (bc)
 131+ 63A7 03                           inc     bc
 132+ 63A8 67                           ld      h, a
 133+ 63A9 E5                           push    hl
 134+ 63AA                              next
 134+ 63AA DD E9       >                jp      (ix)
 135+ 63AC
 136+ 63AC              //  ______________________________________________________________________
 137+ 63AC              //
 138+ 63AC              // execute      i*x xt -- j*x
 139+ 63AC              // execution token. usually xt is given by CFA
 140+ 63AC
 141+ 63AC                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 141+ 63AC             >
 141+ 63AC             >Dict_Ptr        defl    $
 141+ 63AC             >
 141+ 63AC             >//              ______________________________________________________________________
 141+ 63AC             >//              Heap part
 141+ 63AC             >
 141+ 63AC             >
 141+ 63AC             >                org     (Heap_Ptr & $1FFF) + $E000
 141+ E07C             >
 141+ E07C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 141+ E07C             >Latest_Definition defl  Heap_Ptr
 141+ E07C             >
 141+ E07C             >                // dummy db directives used to calculate length of namec
 141+ E07C 45 58 45 43 >                db      "EXECUTE"
 141+ E080 55 54 45    >
 141+ E083             >len_NFA         defl    $ - temp_NFA
 141+ E083             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 141+ E07C             >
 141+ E07C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 141+ E07D 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 141+ E081 55 54 45    >
 141+ E084             >                org     $-1                 // alter last byte of Name just above to set
 141+ E083 C5          >                db      {b $} | END_BIT     // msb as name end
 141+ E084             >
 141+ E084 74 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 141+ E086             >Prev_Ptr        defl    Heap_Ptr
 141+ E086             >
 141+ E086             >mirror_Ptr      defl    $
 141+ E086             >
 141+ E086 AE 63       >                dw      Dict_Ptr + 2        // xt
 141+ E088             >Heap_Ptr        defl    $ - $E000           // save current HP
 141+ E088             >
 141+ E088             >Current_HP      defl  $ - $E000             // used to set HP once!
 141+ E088             >
 141+ E088             >//              ______________________________________________________________________
 141+ E088             >//              Dictionary part
 141+ E088             >
 141+ E088             >                org     Dict_Ptr
 141+ 63AC             >
 141+ 63AC 86 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 141+ 63AE             >
 141+ 63AE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 141+ 63AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 141+ 63AE ~           >
 141+ 63AE ~           >
 141+ 63AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 141+ 63AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 141+ 63AE             >
 141+ 63AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 142+ 63AE C9                           ret
 143+ 63AF
 144+ 63AF              //  ______________________________________________________________________
 145+ 63AF              //
 146+ 63AF              // brk
 147+ 63AF              //              New_Def  BRK, "BRK", is_code, is_normal
 148+ 63AF              //              next
 149+ 63AF
 150+ 63AF
 151+ 63AF
 152+ 63AF              //  ______________________________________________________________________
 153+ 63AF              //
 154+ 63AF              // (+loop)      n --
 155+ 63AF              // compiled by +LOOP. it uses the top two values of return-stack to
 156+ 63AF              // keep track of index and limit, they are accessed via I and I'
 157+ 63AF              // Add n to the loop index. If the loop index did not cross the boundary
 158+ 63AF              // between the loop limit minus one and the loop limit, continue execution
 159+ 63AF              // at the beginning of the loop. Otherwise, discard the current loop control
 160+ 63AF              // parameters and continue execution immediately following the loop.
 161+ 63AF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 161+ 63AF             >
 161+ 63AF             >Dict_Ptr        defl    $
 161+ 63AF             >
 161+ 63AF             >//              ______________________________________________________________________
 161+ 63AF             >//              Heap part
 161+ 63AF             >
 161+ 63AF             >
 161+ 63AF             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E088             >
 161+ E088             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E088             >Latest_Definition defl  Heap_Ptr
 161+ E088             >
 161+ E088             >                // dummy db directives used to calculate length of namec
 161+ E088 28 2B 4C 4F >                db      "(+LOOP)"
 161+ E08C 4F 50 29    >
 161+ E08F             >len_NFA         defl    $ - temp_NFA
 161+ E08F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E088             >
 161+ E088 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E089 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 161+ E08D 4F 50 29    >
 161+ E090             >                org     $-1                 // alter last byte of Name just above to set
 161+ E08F A9          >                db      {b $} | END_BIT     // msb as name end
 161+ E090             >
 161+ E090 7C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E092             >Prev_Ptr        defl    Heap_Ptr
 161+ E092             >
 161+ E092             >mirror_Ptr      defl    $
 161+ E092             >
 161+ E092 B1 63       >                dw      Dict_Ptr + 2        // xt
 161+ E094             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E094             >
 161+ E094             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E094             >
 161+ E094             >//              ______________________________________________________________________
 161+ E094             >//              Dictionary part
 161+ E094             >
 161+ E094             >                org     Dict_Ptr
 161+ 63AF             >
 161+ 63AF 92 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 63B1             >
 161+ 63B1             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 63B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 161+ 63B1 ~           >
 161+ 63B1 ~           >
 161+ 63B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 63B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 63B1             >
 161+ 63B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 63B1
 163+ 63B1              Loop_Ptr:
 164+ 63B1 E1                           pop     hl                  // get increment
 165+ 63B2 EB                           ex      de, hl
 166+ 63B3                              // *** ldhlrp
 167+ 63B3 C5                           push    bc                  // Save IP
 168+ 63B4 42                           ld      b, d                // bc is increment
 169+ 63B5 4B                           ld      c, e
 170+ 63B6 E5                           push    hl
 171+ 63B7 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 172+ 63B8 7B                           ld      a, e                // de keeps index before increment.
 173+ 63B9 81                           add     c
 174+ 63BA 77                           ld      (hl), a
 175+ 63BB 23                           inc     hl
 176+ 63BC 56                           ld      d, (hl)
 177+ 63BD 7A                           ld      a, d
 178+ 63BE 88                           adc     b
 179+ 63BF 77                           ld      (hl),a
 180+ 63C0 23                           inc     hl
 181+ 63C1
 182+ 63C1 7B                           ld      a, e
 183+ 63C2 96                           sub     (hl)
 184+ 63C3 5F                           ld      e, a
 185+ 63C4 23                           inc     hl
 186+ 63C5 7A                           ld      a, d
 187+ 63C6 9E                           sbc     (hl)
 188+ 63C7 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 189+ 63C8
 190+ 63C8 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 191+ 63C9 09                           add     hl, bc
 192+ 63CA CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 193+ 63CC 28 01                        jr      z, Loop_NegativeIncrement
 194+ 63CE 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 195+ 63CF              Loop_NegativeIncrement:
 196+ 63CF 38 04                        jr      c, Loop_Endif
 197+ 63D1 D1                               pop     de              // Discard RP+3, retrieve original RP
 198+ 63D2 C1                               pop     bc                  // Retrieve IP
 199+ 63D3 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 200+ 63D5              Loop_Endif:
 201+ 63D5 C1                           pop     bc                  // discard original RP
 202+ 63D6 EB                           ex      de, hl
 203+ 63D7 23                           inc     hl                  // keep    RP+4 (exit from loop)
 204+ 63D8                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 205+ 63D8 EB                           ex      de, hl
 206+ 63D9 C1                           pop     bc                  // Retrieve IP
 207+ 63DA 03                           inc     bc                  // skip branch-style offset
 208+ 63DB 03                           inc     bc
 209+ 63DC                              next
 209+ 63DC DD E9       >                jp      (ix)
 210+ 63DE
 211+ 63DE              //  ______________________________________________________________________
 212+ 63DE              //
 213+ 63DE              // (loop)       n --
 214+ 63DE              // same as (LOOP) but index is incremented by 1
 215+ 63DE              // compiled by LOOP.
 216+ 63DE                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 216+ 63DE             >
 216+ 63DE             >Dict_Ptr        defl    $
 216+ 63DE             >
 216+ 63DE             >//              ______________________________________________________________________
 216+ 63DE             >//              Heap part
 216+ 63DE             >
 216+ 63DE             >
 216+ 63DE             >                org     (Heap_Ptr & $1FFF) + $E000
 216+ E094             >
 216+ E094             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 216+ E094             >Latest_Definition defl  Heap_Ptr
 216+ E094             >
 216+ E094             >                // dummy db directives used to calculate length of namec
 216+ E094 28 4C 4F 4F >                db      "(LOOP)"
 216+ E098 50 29       >
 216+ E09A             >len_NFA         defl    $ - temp_NFA
 216+ E09A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 216+ E094             >
 216+ E094 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 216+ E095 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 216+ E099 50 29       >
 216+ E09B             >                org     $-1                 // alter last byte of Name just above to set
 216+ E09A A9          >                db      {b $} | END_BIT     // msb as name end
 216+ E09B             >
 216+ E09B 88 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 216+ E09D             >Prev_Ptr        defl    Heap_Ptr
 216+ E09D             >
 216+ E09D             >mirror_Ptr      defl    $
 216+ E09D             >
 216+ E09D E0 63       >                dw      Dict_Ptr + 2        // xt
 216+ E09F             >Heap_Ptr        defl    $ - $E000           // save current HP
 216+ E09F             >
 216+ E09F             >Current_HP      defl  $ - $E000             // used to set HP once!
 216+ E09F             >
 216+ E09F             >//              ______________________________________________________________________
 216+ E09F             >//              Dictionary part
 216+ E09F             >
 216+ E09F             >                org     Dict_Ptr
 216+ 63DE             >
 216+ 63DE 9D 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 216+ 63E0             >
 216+ 63E0             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 216+ 63E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 216+ 63E0 ~           >
 216+ 63E0 ~           >
 216+ 63E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 216+ 63E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 216+ 63E0             >
 216+ 63E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 217+ 63E0 ED 8A 00 01                  push    1
 218+ 63E4 18 CB                        jr      Loop_Ptr
 219+ 63E6
 220+ 63E6              //  ______________________________________________________________________
 221+ 63E6              //
 222+ 63E6              // branch       --
 223+ 63E6              // unconditional branch in colon definition using the following cell as an offset from current IP value
 224+ 63E6              // compiled by ELSE, AGAIN and some other immediate words
 225+ 63E6
 226+ 63E6                              New_Def BRANCH, "BRANCH", is_code, is_normal
 226+ 63E6             >
 226+ 63E6             >Dict_Ptr        defl    $
 226+ 63E6             >
 226+ 63E6             >//              ______________________________________________________________________
 226+ 63E6             >//              Heap part
 226+ 63E6             >
 226+ 63E6             >
 226+ 63E6             >                org     (Heap_Ptr & $1FFF) + $E000
 226+ E09F             >
 226+ E09F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 226+ E09F             >Latest_Definition defl  Heap_Ptr
 226+ E09F             >
 226+ E09F             >                // dummy db directives used to calculate length of namec
 226+ E09F 42 52 41 4E >                db      "BRANCH"
 226+ E0A3 43 48       >
 226+ E0A5             >len_NFA         defl    $ - temp_NFA
 226+ E0A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 226+ E09F             >
 226+ E09F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 226+ E0A0 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 226+ E0A4 43 48       >
 226+ E0A6             >                org     $-1                 // alter last byte of Name just above to set
 226+ E0A5 C8          >                db      {b $} | END_BIT     // msb as name end
 226+ E0A6             >
 226+ E0A6 94 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 226+ E0A8             >Prev_Ptr        defl    Heap_Ptr
 226+ E0A8             >
 226+ E0A8             >mirror_Ptr      defl    $
 226+ E0A8             >
 226+ E0A8 E8 63       >                dw      Dict_Ptr + 2        // xt
 226+ E0AA             >Heap_Ptr        defl    $ - $E000           // save current HP
 226+ E0AA             >
 226+ E0AA             >Current_HP      defl  $ - $E000             // used to set HP once!
 226+ E0AA             >
 226+ E0AA             >//              ______________________________________________________________________
 226+ E0AA             >//              Dictionary part
 226+ E0AA             >
 226+ E0AA             >                org     Dict_Ptr
 226+ 63E6             >
 226+ 63E6 A8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 226+ 63E8             >
 226+ 63E8             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 226+ 63E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 226+ 63E8 ~           >
 226+ 63E8 ~           >
 226+ 63E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 226+ 63E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 226+ 63E8             >
 226+ 63E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 227+ 63E8              Branch_Ptr:
 228+ 63E8 0A                           ld      a, (bc)
 229+ 63E9 6F                           ld      l, a
 230+ 63EA 03                           inc     bc
 231+ 63EB 0A                           ld      a, (bc)
 232+ 63EC 67                           ld      h, a
 233+ 63ED 0B                           dec     bc
 234+ 63EE 09                           add     hl, bc
 235+ 63EF 4D                           ld      c, l
 236+ 63F0 44                           ld      b, h
 237+ 63F1                              next
 237+ 63F1 DD E9       >                jp      (ix)
 238+ 63F3
 239+ 63F3
 240+ 63F3              //  ______________________________________________________________________
 241+ 63F3              //
 242+ 63F3              // 0branch      f --
 243+ 63F3              // conditional branch if the top-of-stack is ZERO or FALSE.
 244+ 63F3              // compiled by IF, UNTIL and some other immediate words
 245+ 63F3
 246+ 63F3                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 246+ 63F3             >
 246+ 63F3             >Dict_Ptr        defl    $
 246+ 63F3             >
 246+ 63F3             >//              ______________________________________________________________________
 246+ 63F3             >//              Heap part
 246+ 63F3             >
 246+ 63F3             >
 246+ 63F3             >                org     (Heap_Ptr & $1FFF) + $E000
 246+ E0AA             >
 246+ E0AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 246+ E0AA             >Latest_Definition defl  Heap_Ptr
 246+ E0AA             >
 246+ E0AA             >                // dummy db directives used to calculate length of namec
 246+ E0AA 30 42 52 41 >                db      "0BRANCH"
 246+ E0AE 4E 43 48    >
 246+ E0B1             >len_NFA         defl    $ - temp_NFA
 246+ E0B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 246+ E0AA             >
 246+ E0AA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 246+ E0AB 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 246+ E0AF 4E 43 48    >
 246+ E0B2             >                org     $-1                 // alter last byte of Name just above to set
 246+ E0B1 C8          >                db      {b $} | END_BIT     // msb as name end
 246+ E0B2             >
 246+ E0B2 9F 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 246+ E0B4             >Prev_Ptr        defl    Heap_Ptr
 246+ E0B4             >
 246+ E0B4             >mirror_Ptr      defl    $
 246+ E0B4             >
 246+ E0B4 F5 63       >                dw      Dict_Ptr + 2        // xt
 246+ E0B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 246+ E0B6             >
 246+ E0B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 246+ E0B6             >
 246+ E0B6             >//              ______________________________________________________________________
 246+ E0B6             >//              Dictionary part
 246+ E0B6             >
 246+ E0B6             >                org     Dict_Ptr
 246+ 63F3             >
 246+ 63F3 B4 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 246+ 63F5             >
 246+ 63F5             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 246+ 63F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 246+ 63F5 ~           >
 246+ 63F5 ~           >
 246+ 63F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 246+ 63F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 246+ 63F5             >
 246+ 63F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 247+ 63F5              ZBranch_Ptr:
 248+ 63F5 E1                           pop     hl
 249+ 63F6 7D                           ld      a, l
 250+ 63F7 B4                           or      h
 251+ 63F8 28 EE                        jr      z, Branch_Ptr
 252+ 63FA 03                           inc     bc                  // if not branch, skip offset cell.
 253+ 63FB 03                           inc     bc
 254+ 63FC                              next
 254+ 63FC DD E9       >                jp      (ix)
 255+ 63FE
 256+ 63FE              //  ______________________________________________________________________
 257+ 63FE              //
 258+ 63FE              // (leave)        --
 259+ 63FE              // compiled by LEAVE
 260+ 63FE              // this forces to exit from loop and jump past
 261+ 63FE                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 261+ 63FE             >
 261+ 63FE             >Dict_Ptr        defl    $
 261+ 63FE             >
 261+ 63FE             >//              ______________________________________________________________________
 261+ 63FE             >//              Heap part
 261+ 63FE             >
 261+ 63FE             >
 261+ 63FE             >                org     (Heap_Ptr & $1FFF) + $E000
 261+ E0B6             >
 261+ E0B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 261+ E0B6             >Latest_Definition defl  Heap_Ptr
 261+ E0B6             >
 261+ E0B6             >                // dummy db directives used to calculate length of namec
 261+ E0B6 28 4C 45 41 >                db      "(LEAVE)"
 261+ E0BA 56 45 29    >
 261+ E0BD             >len_NFA         defl    $ - temp_NFA
 261+ E0BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 261+ E0B6             >
 261+ E0B6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 261+ E0B7 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 261+ E0BB 56 45 29    >
 261+ E0BE             >                org     $-1                 // alter last byte of Name just above to set
 261+ E0BD A9          >                db      {b $} | END_BIT     // msb as name end
 261+ E0BE             >
 261+ E0BE AA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 261+ E0C0             >Prev_Ptr        defl    Heap_Ptr
 261+ E0C0             >
 261+ E0C0             >mirror_Ptr      defl    $
 261+ E0C0             >
 261+ E0C0 00 64       >                dw      Dict_Ptr + 2        // xt
 261+ E0C2             >Heap_Ptr        defl    $ - $E000           // save current HP
 261+ E0C2             >
 261+ E0C2             >Current_HP      defl  $ - $E000             // used to set HP once!
 261+ E0C2             >
 261+ E0C2             >//              ______________________________________________________________________
 261+ E0C2             >//              Dictionary part
 261+ E0C2             >
 261+ E0C2             >                org     Dict_Ptr
 261+ 63FE             >
 261+ 63FE C0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 261+ 6400             >
 261+ 6400             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 261+ 6400 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 261+ 6400 ~           >
 261+ 6400 ~           >
 261+ 6400             >                endif           ; ok        // for other definitions it "points" the correct handler
 261+ 6400             >                // Use of "; ok" to suppress "warning[fwdref]"
 261+ 6400             >
 261+ 6400             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 262+ 6400                              // ex      de, hl
 263+ 6400                              // *** ldhlrp
 264+ 6400 3E 04                        ld      a, 4
 265+ 6402 ED 32                        add     de, a
 266+ 6404                              // *** ldrphl
 267+ 6404                              // ex      de, hl
 268+ 6404 18 E2                        jr      Branch_Ptr       // perform branch consuming following cell
 269+ 6406                              next
 269+ 6406 DD E9       >                jp      (ix)
 270+ 6408
 271+ 6408              //  ______________________________________________________________________
 272+ 6408              //
 273+ 6408              // (?do)        lim ind --
 274+ 6408              // compiled by ?DO to make a loop checking for lim == ind first
 275+ 6408              // at run-time (?DO) must be followed by a BRANCH offset
 276+ 6408              // used to skip the loop if lim == ind
 277+ 6408                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 277+ 6408             >
 277+ 6408             >Dict_Ptr        defl    $
 277+ 6408             >
 277+ 6408             >//              ______________________________________________________________________
 277+ 6408             >//              Heap part
 277+ 6408             >
 277+ 6408             >
 277+ 6408             >                org     (Heap_Ptr & $1FFF) + $E000
 277+ E0C2             >
 277+ E0C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 277+ E0C2             >Latest_Definition defl  Heap_Ptr
 277+ E0C2             >
 277+ E0C2             >                // dummy db directives used to calculate length of namec
 277+ E0C2 28 3F 44 4F >                db      "(?DO)"
 277+ E0C6 29          >
 277+ E0C7             >len_NFA         defl    $ - temp_NFA
 277+ E0C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 277+ E0C2             >
 277+ E0C2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 277+ E0C3 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 277+ E0C7 29          >
 277+ E0C8             >                org     $-1                 // alter last byte of Name just above to set
 277+ E0C7 A9          >                db      {b $} | END_BIT     // msb as name end
 277+ E0C8             >
 277+ E0C8 B6 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 277+ E0CA             >Prev_Ptr        defl    Heap_Ptr
 277+ E0CA             >
 277+ E0CA             >mirror_Ptr      defl    $
 277+ E0CA             >
 277+ E0CA 0A 64       >                dw      Dict_Ptr + 2        // xt
 277+ E0CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 277+ E0CC             >
 277+ E0CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 277+ E0CC             >
 277+ E0CC             >//              ______________________________________________________________________
 277+ E0CC             >//              Dictionary part
 277+ E0CC             >
 277+ E0CC             >                org     Dict_Ptr
 277+ 6408             >
 277+ 6408 CA 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 277+ 640A             >
 277+ 640A             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 277+ 640A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 277+ 640A ~           >
 277+ 640A ~           >
 277+ 640A             >                endif           ; ok        // for other definitions it "points" the correct handler
 277+ 640A             >                // Use of "; ok" to suppress "warning[fwdref]"
 277+ 640A             >
 277+ 640A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 278+ 640A D9                           exx
 279+ 640B D1                            pop     de                  // de has the index
 280+ 640C E1                            pop     hl                  // hl has the limit
 281+ 640D 44                            ld      b, h
 282+ 640E 4D                            ld      c, l
 283+ 640F E5                            push    hl                  // put them back to stack for later
 284+ 6410 D5                            push    de
 285+ 6411 A7                            and     a                   // reset carry flag
 286+ 6412 ED 52                         sbc     hl, de              // compute limit - index
 287+ 6414 D9                           exx
 288+ 6415 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 289+ 6417 E1                               pop     hl
 290+ 6418 E1                               pop     hl
 291+ 6419 18 CD                            jr      Branch_Ptr          // perform branch consuming following cell
 292+ 641B              Do_Ptr:
 293+ 641B                              // *** ldhlrp                 // prepare RP
 294+ 641B                              // *** ex      de, hl
 295+ 641B                              // dec     de
 296+ 641B                              // dec     de
 297+ 641B                              // dec     de
 298+ 641B                              // dec     de
 299+ 641B ED 35 FC FF                  add     de, -4              // cannot use LD A,-4 and ADD DE,A !
 300+ 641F D5                           push    de                  // pass it to h'l'
 301+ 6420                              // *** ex      de, hl
 302+ 6420                              // *** ldrphl
 303+ 6420 D9                           exx
 304+ 6421 E1                            pop     hl
 305+ 6422
 306+ 6422                               // store index as top RP
 307+ 6422 D1                            pop     de
 308+ 6423 73                            ld      (hl), e
 309+ 6424 23                            inc     hl
 310+ 6425 72                            ld      (hl), d
 311+ 6426 23                            inc     hl
 312+ 6427                               // stores lim as second from top RP
 313+ 6427 D1                            pop     de
 314+ 6428 73                            ld      (hl), e
 315+ 6429 23                            inc     hl
 316+ 642A 72                            ld      (hl), d
 317+ 642B D9                           exx
 318+ 642C                              // skip branch-style offseet
 319+ 642C 03                           inc     bc
 320+ 642D 03                           inc     bc
 321+ 642E                              next
 321+ 642E DD E9       >                jp      (ix)
 322+ 6430
 323+ 6430              //  ______________________________________________________________________
 324+ 6430              //
 325+ 6430              // (do)        lim ind --
 326+ 6430              // compiled by DO to make a loop checking for lim == ind first
 327+ 6430              // this is a simpler version of (?DO)
 328+ 6430                              New_Def C_DO, "(DO)", is_code, is_normal
 328+ 6430             >
 328+ 6430             >Dict_Ptr        defl    $
 328+ 6430             >
 328+ 6430             >//              ______________________________________________________________________
 328+ 6430             >//              Heap part
 328+ 6430             >
 328+ 6430             >
 328+ 6430             >                org     (Heap_Ptr & $1FFF) + $E000
 328+ E0CC             >
 328+ E0CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 328+ E0CC             >Latest_Definition defl  Heap_Ptr
 328+ E0CC             >
 328+ E0CC             >                // dummy db directives used to calculate length of namec
 328+ E0CC 28 44 4F 29 >                db      "(DO)"
 328+ E0D0             >len_NFA         defl    $ - temp_NFA
 328+ E0D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 328+ E0CC             >
 328+ E0CC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 328+ E0CD 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 328+ E0D1             >                org     $-1                 // alter last byte of Name just above to set
 328+ E0D0 A9          >                db      {b $} | END_BIT     // msb as name end
 328+ E0D1             >
 328+ E0D1 C2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 328+ E0D3             >Prev_Ptr        defl    Heap_Ptr
 328+ E0D3             >
 328+ E0D3             >mirror_Ptr      defl    $
 328+ E0D3             >
 328+ E0D3 32 64       >                dw      Dict_Ptr + 2        // xt
 328+ E0D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 328+ E0D5             >
 328+ E0D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 328+ E0D5             >
 328+ E0D5             >//              ______________________________________________________________________
 328+ E0D5             >//              Dictionary part
 328+ E0D5             >
 328+ E0D5             >                org     Dict_Ptr
 328+ 6430             >
 328+ 6430 D3 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 328+ 6432             >
 328+ 6432             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 328+ 6432 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 328+ 6432 ~           >
 328+ 6432 ~           >
 328+ 6432             >                endif           ; ok        // for other definitions it "points" the correct handler
 328+ 6432             >                // Use of "; ok" to suppress "warning[fwdref]"
 328+ 6432             >
 328+ 6432             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 329+ 6432 0B                           dec     bc                  // prepare IP beforehand
 330+ 6433 0B                           dec     bc                  // to balance the two final 2 inc bc in (?do)
 331+ 6434 18 E5                        jr      Do_Ptr
 332+ 6436
 333+ 6436              //  ______________________________________________________________________
 334+ 6436              //
 335+ 6436              // i            -- n
 336+ 6436              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 337+ 6436              // the current value of the index-loop
 338+ 6436                              New_Def I, "I", is_code, is_normal
 338+ 6436             >
 338+ 6436             >Dict_Ptr        defl    $
 338+ 6436             >
 338+ 6436             >//              ______________________________________________________________________
 338+ 6436             >//              Heap part
 338+ 6436             >
 338+ 6436             >
 338+ 6436             >                org     (Heap_Ptr & $1FFF) + $E000
 338+ E0D5             >
 338+ E0D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ E0D5             >Latest_Definition defl  Heap_Ptr
 338+ E0D5             >
 338+ E0D5             >                // dummy db directives used to calculate length of namec
 338+ E0D5 49          >                db      "I"
 338+ E0D6             >len_NFA         defl    $ - temp_NFA
 338+ E0D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ E0D5             >
 338+ E0D5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ E0D6 49          >                db      "I"               // name string in 7-bit ascii, but
 338+ E0D7             >                org     $-1                 // alter last byte of Name just above to set
 338+ E0D6 C9          >                db      {b $} | END_BIT     // msb as name end
 338+ E0D7             >
 338+ E0D7 CC 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 338+ E0D9             >Prev_Ptr        defl    Heap_Ptr
 338+ E0D9             >
 338+ E0D9             >mirror_Ptr      defl    $
 338+ E0D9             >
 338+ E0D9 38 64       >                dw      Dict_Ptr + 2        // xt
 338+ E0DB             >Heap_Ptr        defl    $ - $E000           // save current HP
 338+ E0DB             >
 338+ E0DB             >Current_HP      defl  $ - $E000             // used to set HP once!
 338+ E0DB             >
 338+ E0DB             >//              ______________________________________________________________________
 338+ E0DB             >//              Dictionary part
 338+ E0DB             >
 338+ E0DB             >                org     Dict_Ptr
 338+ 6436             >
 338+ 6436 D9 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 338+ 6438             >
 338+ 6438             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 6438 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 338+ 6438 ~           >
 338+ 6438 ~           >
 338+ 6438             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 6438             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 6438             >
 338+ 6438             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 6438              I_Ptr:
 340+ 6438 62                           ld      h, d
 341+ 6439 6B                           ld      l, e
 342+ 643A                              // *** ldhlrp
 343+ 643A              I_Ptr_prime:
 344+ 643A 7E                           ld      a, (hl)
 345+ 643B 23                           inc     hl
 346+ 643C 66                           ld      h, (hl)
 347+ 643D 6F                           ld      l, a
 348+ 643E E5                           push    hl
 349+ 643F                              next
 349+ 643F DD E9       >                jp      (ix)
 350+ 6441
 351+ 6441
 352+ 6441              //  ______________________________________________________________________
 353+ 6441              //
 354+ 6441              // i'            -- n
 355+ 6441              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 356+ 6441              // the limit of the index-loop
 357+ 6441
 358+ 6441                              New_Def II, "I'", is_code, is_normal
 358+ 6441             >
 358+ 6441             >Dict_Ptr        defl    $
 358+ 6441             >
 358+ 6441             >//              ______________________________________________________________________
 358+ 6441             >//              Heap part
 358+ 6441             >
 358+ 6441             >
 358+ 6441             >                org     (Heap_Ptr & $1FFF) + $E000
 358+ E0DB             >
 358+ E0DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 358+ E0DB             >Latest_Definition defl  Heap_Ptr
 358+ E0DB             >
 358+ E0DB             >                // dummy db directives used to calculate length of namec
 358+ E0DB 49 27       >                db      "I'"
 358+ E0DD             >len_NFA         defl    $ - temp_NFA
 358+ E0DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 358+ E0DB             >
 358+ E0DB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 358+ E0DC 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 358+ E0DE             >                org     $-1                 // alter last byte of Name just above to set
 358+ E0DD A7          >                db      {b $} | END_BIT     // msb as name end
 358+ E0DE             >
 358+ E0DE D5 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 358+ E0E0             >Prev_Ptr        defl    Heap_Ptr
 358+ E0E0             >
 358+ E0E0             >mirror_Ptr      defl    $
 358+ E0E0             >
 358+ E0E0 43 64       >                dw      Dict_Ptr + 2        // xt
 358+ E0E2             >Heap_Ptr        defl    $ - $E000           // save current HP
 358+ E0E2             >
 358+ E0E2             >Current_HP      defl  $ - $E000             // used to set HP once!
 358+ E0E2             >
 358+ E0E2             >//              ______________________________________________________________________
 358+ E0E2             >//              Dictionary part
 358+ E0E2             >
 358+ E0E2             >                org     Dict_Ptr
 358+ 6441             >
 358+ 6441 E0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 358+ 6443             >
 358+ 6443             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 358+ 6443 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 358+ 6443 ~           >
 358+ 6443 ~           >
 358+ 6443             >                endif           ; ok        // for other definitions it "points" the correct handler
 358+ 6443             >                // Use of "; ok" to suppress "warning[fwdref]"
 358+ 6443             >
 358+ 6443             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 359+ 6443 62                           ld      h, d
 360+ 6444 6B                           ld      l, e
 361+ 6445                              // *** ldhlrp
 362+ 6445 23                           inc     hl
 363+ 6446 23                           inc     hl
 364+ 6447 18 F1                        jr      I_Ptr_prime
 365+ 6449
 366+ 6449
 367+ 6449              //  ______________________________________________________________________
 368+ 6449              //
 369+ 6449              // digit        c n -- u tf  |  ff
 370+ 6449              // convert a character c using base n
 371+ 6449              // returns a unsigned number and a true flag
 372+ 6449              // or just a false flag if the conversion fails
 373+ 6449                              New_Def DIGIT, "DIGIT", is_code, is_normal
 373+ 6449             >
 373+ 6449             >Dict_Ptr        defl    $
 373+ 6449             >
 373+ 6449             >//              ______________________________________________________________________
 373+ 6449             >//              Heap part
 373+ 6449             >
 373+ 6449             >
 373+ 6449             >                org     (Heap_Ptr & $1FFF) + $E000
 373+ E0E2             >
 373+ E0E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 373+ E0E2             >Latest_Definition defl  Heap_Ptr
 373+ E0E2             >
 373+ E0E2             >                // dummy db directives used to calculate length of namec
 373+ E0E2 44 49 47 49 >                db      "DIGIT"
 373+ E0E6 54          >
 373+ E0E7             >len_NFA         defl    $ - temp_NFA
 373+ E0E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 373+ E0E2             >
 373+ E0E2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 373+ E0E3 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 373+ E0E7 54          >
 373+ E0E8             >                org     $-1                 // alter last byte of Name just above to set
 373+ E0E7 D4          >                db      {b $} | END_BIT     // msb as name end
 373+ E0E8             >
 373+ E0E8 DB 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 373+ E0EA             >Prev_Ptr        defl    Heap_Ptr
 373+ E0EA             >
 373+ E0EA             >mirror_Ptr      defl    $
 373+ E0EA             >
 373+ E0EA 4B 64       >                dw      Dict_Ptr + 2        // xt
 373+ E0EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 373+ E0EC             >
 373+ E0EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 373+ E0EC             >
 373+ E0EC             >//              ______________________________________________________________________
 373+ E0EC             >//              Dictionary part
 373+ E0EC             >
 373+ E0EC             >                org     Dict_Ptr
 373+ 6449             >
 373+ 6449 EA 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 373+ 644B             >
 373+ 644B             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 373+ 644B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 373+ 644B ~           >
 373+ 644B ~           >
 373+ 644B             >                endif           ; ok        // for other definitions it "points" the correct handler
 373+ 644B             >                // Use of "; ok" to suppress "warning[fwdref]"
 373+ 644B             >
 373+ 644B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 374+ 644B D9                           exx
 375+ 644C E1                           pop     hl                  // l has the base
 376+ 644D D1                           pop     de                  // e has the digit
 377+ 644E 7B                           ld      a, e
 378+ 644F FE 60                        cp      $60                 // check if lowercase
 379+ 6451 38 02                        jr      c, Digit_Uppercase
 380+ 6453 D6 20                            sub     $20                 // quick'n'dirty uppercase
 381+ 6455              Digit_Uppercase:
 382+ 6455 D6 30                        sub     $30
 383+ 6457 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 384+ 6459 FE 0A                            cp      $0A
 385+ 645B 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 386+ 645D D6 07                                sub     7                   // try hex and subtract 7
 387+ 645F FE 0A                                cp      $0A
 388+ 6461 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 389+ 6463
 390+ 6463              Digit_Decimal:
 391+ 6463                              // compare digit
 392+ 6463 BD                           cp      l                   // compare with base
 393+ 6464 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 394+ 6466 5F                               ld      e, a                // digit is returned as second from TOS
 395+ 6467                              //  ld      hl, -1
 396+ 6467 ED 62                            sbc     hl, hl
 397+ 6469 D5                               push    de
 398+ 646A E5                               push    hl
 399+ 646B D9                               exx
 400+ 646C                                  next
 400+ 646C DD E9       >                jp      (ix)
 401+ 646E              Digit_Fail:
 402+ 646E 21 00 00                     ld      hl, 0
 403+ 6471 E5                           push    hl
 404+ 6472 D9                           exx
 405+ 6473                              next
 405+ 6473 DD E9       >                jp      (ix)
 406+ 6475
 407+ 6475              //  ______________________________________________________________________
 408+ 6475              //
 409+ 6475              //  parametric uppercase routine
 410+ 6475              //  depending on the following op-code the routine can be by-passed
 411+ 6475              //  changing the behaviour of some callers.
 412+ 6475              //  If it is "ret" then the system is Case-Sensitive
 413+ 6475              //  If it is "Nop" then the system is Case-Insensitive
 414+ 6475              //  Only A register is touched.
 415+ 6475 00           Case_Sensitive: nop                         // Default is case-insensitive.
 416+ 6476              Case_Upper:
 417+ 6476 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 418+ 6478 D8                           ret     c                   // no change if A < "a"
 419+ 6479 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 420+ 647B D0                           ret     nc                  // no change if A > "z"
 421+ 647C D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 422+ 647E C9                           ret
 423+ 647F
 424+ 647F              //  ______________________________________________________________________
 425+ 647F              //
 426+ 647F              //  caseon      --
 427+ 647F              // set system case-sensitivity on
 428+ 647F              // it patches a RET/NOP at the beginning of the uppercase-routine
 429+ 647F                              New_Def CASEON, "CASEON", is_code, is_normal
 429+ 647F             >
 429+ 647F             >Dict_Ptr        defl    $
 429+ 647F             >
 429+ 647F             >//              ______________________________________________________________________
 429+ 647F             >//              Heap part
 429+ 647F             >
 429+ 647F             >
 429+ 647F             >                org     (Heap_Ptr & $1FFF) + $E000
 429+ E0EC             >
 429+ E0EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ E0EC             >Latest_Definition defl  Heap_Ptr
 429+ E0EC             >
 429+ E0EC             >                // dummy db directives used to calculate length of namec
 429+ E0EC 43 41 53 45 >                db      "CASEON"
 429+ E0F0 4F 4E       >
 429+ E0F2             >len_NFA         defl    $ - temp_NFA
 429+ E0F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ E0EC             >
 429+ E0EC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ E0ED 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 429+ E0F1 4F 4E       >
 429+ E0F3             >                org     $-1                 // alter last byte of Name just above to set
 429+ E0F2 CE          >                db      {b $} | END_BIT     // msb as name end
 429+ E0F3             >
 429+ E0F3 E2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 429+ E0F5             >Prev_Ptr        defl    Heap_Ptr
 429+ E0F5             >
 429+ E0F5             >mirror_Ptr      defl    $
 429+ E0F5             >
 429+ E0F5 81 64       >                dw      Dict_Ptr + 2        // xt
 429+ E0F7             >Heap_Ptr        defl    $ - $E000           // save current HP
 429+ E0F7             >
 429+ E0F7             >Current_HP      defl  $ - $E000             // used to set HP once!
 429+ E0F7             >
 429+ E0F7             >//              ______________________________________________________________________
 429+ E0F7             >//              Dictionary part
 429+ E0F7             >
 429+ E0F7             >                org     Dict_Ptr
 429+ 647F             >
 429+ 647F F5 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 429+ 6481             >
 429+ 6481             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 6481 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 429+ 6481 ~           >
 429+ 6481 ~           >
 429+ 6481             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 6481             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 6481             >
 429+ 6481             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 6481 3E C9                        ld      a, $C9              // "ret"
 431+ 6483 32 75 64                     ld      (Case_Sensitive), a
 432+ 6486                              next
 432+ 6486 DD E9       >                jp      (ix)
 433+ 6488
 434+ 6488              //  ______________________________________________________________________
 435+ 6488              //
 436+ 6488              //  caseoff     --
 437+ 6488              // set system case-sensitivity on
 438+ 6488              // it patches a RET/NOP at the beginning of the uppercase-routine
 439+ 6488                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 439+ 6488             >
 439+ 6488             >Dict_Ptr        defl    $
 439+ 6488             >
 439+ 6488             >//              ______________________________________________________________________
 439+ 6488             >//              Heap part
 439+ 6488             >
 439+ 6488             >
 439+ 6488             >                org     (Heap_Ptr & $1FFF) + $E000
 439+ E0F7             >
 439+ E0F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 439+ E0F7             >Latest_Definition defl  Heap_Ptr
 439+ E0F7             >
 439+ E0F7             >                // dummy db directives used to calculate length of namec
 439+ E0F7 43 41 53 45 >                db      "CASEOFF"
 439+ E0FB 4F 46 46    >
 439+ E0FE             >len_NFA         defl    $ - temp_NFA
 439+ E0FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 439+ E0F7             >
 439+ E0F7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 439+ E0F8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 439+ E0FC 4F 46 46    >
 439+ E0FF             >                org     $-1                 // alter last byte of Name just above to set
 439+ E0FE C6          >                db      {b $} | END_BIT     // msb as name end
 439+ E0FF             >
 439+ E0FF EC 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 439+ E101             >Prev_Ptr        defl    Heap_Ptr
 439+ E101             >
 439+ E101             >mirror_Ptr      defl    $
 439+ E101             >
 439+ E101 8A 64       >                dw      Dict_Ptr + 2        // xt
 439+ E103             >Heap_Ptr        defl    $ - $E000           // save current HP
 439+ E103             >
 439+ E103             >Current_HP      defl  $ - $E000             // used to set HP once!
 439+ E103             >
 439+ E103             >//              ______________________________________________________________________
 439+ E103             >//              Dictionary part
 439+ E103             >
 439+ E103             >                org     Dict_Ptr
 439+ 6488             >
 439+ 6488 01 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 439+ 648A             >
 439+ 648A             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 439+ 648A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 439+ 648A ~           >
 439+ 648A ~           >
 439+ 648A             >                endif           ; ok        // for other definitions it "points" the correct handler
 439+ 648A             >                // Use of "; ok" to suppress "warning[fwdref]"
 439+ 648A             >
 439+ 648A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 440+ 648A 3E 00                        ld      a, $00              // "nop"
 441+ 648C 32 75 64                     ld      (Case_Sensitive), a
 442+ 648F                              next
 442+ 648F DD E9       >                jp      (ix)
 443+ 6491
 444+ 6491              //  ______________________________________________________________________
 445+ 6491              //
 446+ 6491              //  upper       c1 -- c1 | c2
 447+ 6491              // character on top of stack is forced to Uppercase.
 448+ 6491                              New_Def UPPER, "UPPER", is_code, is_normal
 448+ 6491             >
 448+ 6491             >Dict_Ptr        defl    $
 448+ 6491             >
 448+ 6491             >//              ______________________________________________________________________
 448+ 6491             >//              Heap part
 448+ 6491             >
 448+ 6491             >
 448+ 6491             >                org     (Heap_Ptr & $1FFF) + $E000
 448+ E103             >
 448+ E103             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 448+ E103             >Latest_Definition defl  Heap_Ptr
 448+ E103             >
 448+ E103             >                // dummy db directives used to calculate length of namec
 448+ E103 55 50 50 45 >                db      "UPPER"
 448+ E107 52          >
 448+ E108             >len_NFA         defl    $ - temp_NFA
 448+ E108             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 448+ E103             >
 448+ E103 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 448+ E104 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 448+ E108 52          >
 448+ E109             >                org     $-1                 // alter last byte of Name just above to set
 448+ E108 D2          >                db      {b $} | END_BIT     // msb as name end
 448+ E109             >
 448+ E109 F7 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 448+ E10B             >Prev_Ptr        defl    Heap_Ptr
 448+ E10B             >
 448+ E10B             >mirror_Ptr      defl    $
 448+ E10B             >
 448+ E10B 93 64       >                dw      Dict_Ptr + 2        // xt
 448+ E10D             >Heap_Ptr        defl    $ - $E000           // save current HP
 448+ E10D             >
 448+ E10D             >Current_HP      defl  $ - $E000             // used to set HP once!
 448+ E10D             >
 448+ E10D             >//              ______________________________________________________________________
 448+ E10D             >//              Dictionary part
 448+ E10D             >
 448+ E10D             >                org     Dict_Ptr
 448+ 6491             >
 448+ 6491 0B 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 448+ 6493             >
 448+ 6493             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 448+ 6493 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 448+ 6493 ~           >
 448+ 6493 ~           >
 448+ 6493             >                endif           ; ok        // for other definitions it "points" the correct handler
 448+ 6493             >                // Use of "; ok" to suppress "warning[fwdref]"
 448+ 6493             >
 448+ 6493             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 449+ 6493 E1                           pop     hl
 450+ 6494 7D                           ld      a, l
 451+ 6495 CD 76 64                     call    Case_Upper
 452+ 6498 6F                           ld      l, a
 453+ 6499
 454+ 6499                              psh1
 454+ 6499 E5          >                push    hl
 454+ 649A DD E9       >                jp      (ix)
 455+ 649C
 456+ 649C              //  ______________________________________________________________________
 457+ 649C
 458+ 649C              MMU7_read:
 459+ 649C 3E 57                        ld      a, 87
 460+ 649E 01 3B 24                     ld      bc, $243B
 461+ 64A1 ED 79                        out     (c), a
 462+ 64A3 04                           inc     b
 463+ 64A4 ED 78                        in      a, (c)
 464+ 64A6 C9                           ret
 465+ 64A7
 466+ 64A7              //  ______________________________________________________________________
 467+ 64A7
 468+ 64A7              // given an HP-pointer in input, turn it into page + offset
 469+ 64A7              TO_FAR_rout:
 470+ 64A7 7C                           ld      a, h
 471+ 64A8 08                           ex      af, af
 472+ 64A9 7C                           ld      a, h
 473+ 64AA F6 E0                        or      $E0
 474+ 64AC 67                           ld      h, a
 475+ 64AD 08                           ex      af, af
 476+ 64AE 07                           rlca
 477+ 64AF 07                           rlca
 478+ 64B0 07                           rlca
 479+ 64B1 E6 07                        and     $07
 480+ 64B3 C6 20                        add     $20
 481+ 64B5 C9                           ret
 482+ 64B6
 483+ 64B6
 484+ 64B6              //  ______________________________________________________________________
 485+ 64B6              //
 486+ 64B6              // (find)       addr voc -- 0 | cfa b 1
 487+ 64B6              // vocabulary search,
 488+ 64B6              // - voc is starting word's NFA
 489+ 64B6              // - addr is the string to be searched for
 490+ 64B6              // On success, it returns the CFA of found word, the first NFA byte
 491+ 64B6              // (which contains length and some flags) and a true flag.
 492+ 64B6              // On fail, a false flag  (no more: leaves addr unchanged)
 493+ 64B6                              New_Def C_FIND, "(FIND)", is_code, is_normal
 493+ 64B6             >
 493+ 64B6             >Dict_Ptr        defl    $
 493+ 64B6             >
 493+ 64B6             >//              ______________________________________________________________________
 493+ 64B6             >//              Heap part
 493+ 64B6             >
 493+ 64B6             >
 493+ 64B6             >                org     (Heap_Ptr & $1FFF) + $E000
 493+ E10D             >
 493+ E10D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 493+ E10D             >Latest_Definition defl  Heap_Ptr
 493+ E10D             >
 493+ E10D             >                // dummy db directives used to calculate length of namec
 493+ E10D 28 46 49 4E >                db      "(FIND)"
 493+ E111 44 29       >
 493+ E113             >len_NFA         defl    $ - temp_NFA
 493+ E113             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 493+ E10D             >
 493+ E10D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 493+ E10E 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 493+ E112 44 29       >
 493+ E114             >                org     $-1                 // alter last byte of Name just above to set
 493+ E113 A9          >                db      {b $} | END_BIT     // msb as name end
 493+ E114             >
 493+ E114 03 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 493+ E116             >Prev_Ptr        defl    Heap_Ptr
 493+ E116             >
 493+ E116             >mirror_Ptr      defl    $
 493+ E116             >
 493+ E116 B8 64       >                dw      Dict_Ptr + 2        // xt
 493+ E118             >Heap_Ptr        defl    $ - $E000           // save current HP
 493+ E118             >
 493+ E118             >Current_HP      defl  $ - $E000             // used to set HP once!
 493+ E118             >
 493+ E118             >//              ______________________________________________________________________
 493+ E118             >//              Dictionary part
 493+ E118             >
 493+ E118             >                org     Dict_Ptr
 493+ 64B6             >
 493+ 64B6 16 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 493+ 64B8             >
 493+ 64B8             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 493+ 64B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 493+ 64B8 ~           >
 493+ 64B8 ~           >
 493+ 64B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 493+ 64B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 493+ 64B8             >
 493+ 64B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 494+ 64B8 D9                           exx
 495+ 64B9 CD 9C 64                     call    MMU7_read
 496+ 64BC D9                           exx
 497+ 64BD 6F                           ld      l, a
 498+ 64BE D9                           exx
 499+ 64BF
 500+ 64BF D1                           pop     de                      // de has dictionary pointer
 501+ 64C0              Find_VocabularyLoop:
 502+ 64C0 7A                               ld      a, d
 503+ 64C1 D6 60                            sub     $60
 504+ 64C3 30 08                            jr      nc, Find_far_endif
 505+ 64C5 EB                                   ex      de, hl
 506+ 64C6 CD A7 64                             call    TO_FAR_rout
 507+ 64C9 EB                                   ex      de, hl
 508+ 64CA ED 92 57                             nextreg 87, a
 509+ 64CD              Find_far_endif:
 510+ 64CD E1                               pop     hl                  // string pointer to search for
 511+ 64CE E5                               push    hl                  // keep it on stack too for the end.
 512+ 64CF 1A                               ld      a, (de)             // save NFA length byte
 513+ 64D0 08                               ex      af,af'              // for later use (!)
 514+ 64D1 1A                               ld      a, (de)             // reload NFA length byte
 515+ 64D2 AE                               xor     (hl)                // check if same length
 516+ 64D3 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 517+ 64D5                                  // word and text haven't the same length, skip to next vocabulary entry
 518+ 64D5 20 33                            jr      nz, Find_DifferentLenght
 519+ 64D7
 520+ 64D7              Find_ThisWord:      // begin loop
 521+ 64D7 23                                   inc     hl
 522+ 64D8 13                                   inc     de
 523+ 64D9 1A                                   ld      a, (de)
 524+ 64DA                                      // case insensitive option - begin
 525+ 64DA                                      // push    bc
 526+ 64DA E6 80                                and     $80                 // split A in msb and the rest
 527+ 64DC 47                                   ld      b, a
 528+ 64DD 1A                                   ld      a, (de)
 529+ 64DE E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 530+ 64E0 CD 75 64                             call    Case_Sensitive      // uppercase routine
 531+ 64E3 4F                                   ld      c, a
 532+ 64E4 7E                                   ld      a, (hl)
 533+ 64E5 CD 75 64                             call    Case_Sensitive      // uppercase routine
 534+ 64E8 A9                                   xor     c
 535+ 64E9 A8                                   xor     b
 536+ 64EA                                      // pop     bc
 537+ 64EA                                      // case insensitive option - end
 538+ 64EA 87                                   add     a                   // ignore msb during compare
 539+ 64EB 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 540+ 64ED
 541+ 64ED                                  // loop back until last byte msb is found set
 542+ 64ED                                  // that bit marks the ending char of this word
 543+ 64ED 30 E8                            jr      nc, Find_ThisWord
 544+ 64EF
 545+ 64EF                                  // match found !
 546+ 64EF 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 547+ 64F2 19                               add     hl, de
 548+ 64F3
 549+ 64F3                              //  ld      a, h
 550+ 64F3                              //  and     $E0
 551+ 64F3                              //  xor     h
 552+ 64F3                              //  jr      nz, Non_MMU7
 553+ 64F3                                  //  call    MMU7_read
 554+ 64F3                                  //  dec     a
 555+ 64F3                                  //  jr      z, Non_MMU7
 556+ 64F3 5E                                       ld      e, (hl)
 557+ 64F4 23                                       inc     hl
 558+ 64F5 56                                       ld      d, (hl)
 559+ 64F6 EB                                       ex      de, hl
 560+ 64F7              //Non_MMU7:
 561+ 64F7 E3                               ex      (sp), hl            // CFA on stack and drop addr
 562+ 64F8 08                               ex      af, af'             // retrieve NFA byte (!)
 563+ 64F9 5F                               ld      e, a
 564+ 64FA 16 00                            ld      d, 0
 565+ 64FC 21 FF FF                         ld      hl, -1
 566+ 64FF D5                               push    de
 567+ 6500 E5                               push    hl
 568+ 6501 D9                               exx
 569+ 6502 7D                               ld      a, l
 570+ 6503 ED 92 57                         nextreg 87, a
 571+ 6506                                  next
 571+ 6506 DD E9       >                jp      (ix)
 572+ 6508
 573+ 6508              Find_DidntMatch: // didn't match (*)
 574+ 6508 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 575+ 650A
 576+ 650A              Find_DifferentLenght:
 577+ 650A                                  // consume chars until the end of the word
 578+ 650A                                  // that is last byte msb is found set
 579+ 650A 13                                   inc     de
 580+ 650B 1A                                   ld      a, (de)
 581+ 650C 87                                   add     a, a
 582+ 650D 30 FB                            jr      nc, Find_DifferentLenght
 583+ 650F
 584+ 650F              Find_WordEnd:   // word-end  found (**)
 585+ 650F                                  // take LFA and use it
 586+ 650F 13                               inc     de
 587+ 6510 EB                               ex      de, hl
 588+ 6511 5E                               ld      e, (hl)
 589+ 6512 23                               inc     hl
 590+ 6513 56                               ld      d, (hl)
 591+ 6514 7A                               ld      a, d
 592+ 6515 B3                               or      e
 593+ 6516
 594+ 6516                              // loop until end of vocabulary
 595+ 6516 20 A8                        jr      nz, Find_VocabularyLoop
 596+ 6518
 597+ 6518 E1                           pop     hl              // without this, leaves addr unchanged
 598+ 6519 21 00 00                     ld      hl, 0
 599+ 651C E5                           push    hl
 600+ 651D D9                           exx
 601+ 651E 7D                           ld      a, l
 602+ 651F ED 92 57                     nextreg 87, a
 603+ 6522                              next
 603+ 6522 DD E9       >                jp      (ix)
 604+ 6524
 605+ 6524              //  ______________________________________________________________________
 606+ 6524              //
 607+ 6524              // enclose      a c -- a  n1 n2 n3
 608+ 6524              // starting from a, using delimiter c, determines the offsets:
 609+ 6524              //   n1   the first character non-delimiter
 610+ 6524              //   n2   the first delimiter after the text
 611+ 6524              //   n3   the first character non enclosed.
 612+ 6524              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 613+ 6524              // an uncoditional delimiter.
 614+ 6524              // Examples:
 615+ 6524              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 616+ 6524              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 617+ 6524              // iii:	c  c  'nul'          -- 2  3  2
 618+ 6524                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 618+ 6524             >
 618+ 6524             >Dict_Ptr        defl    $
 618+ 6524             >
 618+ 6524             >//              ______________________________________________________________________
 618+ 6524             >//              Heap part
 618+ 6524             >
 618+ 6524             >
 618+ 6524             >                org     (Heap_Ptr & $1FFF) + $E000
 618+ E118             >
 618+ E118             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 618+ E118             >Latest_Definition defl  Heap_Ptr
 618+ E118             >
 618+ E118             >                // dummy db directives used to calculate length of namec
 618+ E118 45 4E 43 4C >                db      "ENCLOSE"
 618+ E11C 4F 53 45    >
 618+ E11F             >len_NFA         defl    $ - temp_NFA
 618+ E11F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 618+ E118             >
 618+ E118 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 618+ E119 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 618+ E11D 4F 53 45    >
 618+ E120             >                org     $-1                 // alter last byte of Name just above to set
 618+ E11F C5          >                db      {b $} | END_BIT     // msb as name end
 618+ E120             >
 618+ E120 0D 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 618+ E122             >Prev_Ptr        defl    Heap_Ptr
 618+ E122             >
 618+ E122             >mirror_Ptr      defl    $
 618+ E122             >
 618+ E122 26 65       >                dw      Dict_Ptr + 2        // xt
 618+ E124             >Heap_Ptr        defl    $ - $E000           // save current HP
 618+ E124             >
 618+ E124             >Current_HP      defl  $ - $E000             // used to set HP once!
 618+ E124             >
 618+ E124             >//              ______________________________________________________________________
 618+ E124             >//              Dictionary part
 618+ E124             >
 618+ E124             >                org     Dict_Ptr
 618+ 6524             >
 618+ 6524 22 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 618+ 6526             >
 618+ 6526             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 618+ 6526 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 618+ 6526 ~           >
 618+ 6526 ~           >
 618+ 6526             >                endif           ; ok        // for other definitions it "points" the correct handler
 618+ 6526             >                // Use of "; ok" to suppress "warning[fwdref]"
 618+ 6526             >
 618+ 6526             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 619+ 6526 D9                           exx
 620+ 6527 D1                           pop     de                  //  e has the character
 621+ 6528 E1                           pop     hl                  // hl has the string address
 622+ 6529 E5                           push    hl
 623+ 652A 7B                           ld      a, e
 624+ 652B 11 FF FF                     ld      de, -1              // let's start from -1
 625+ 652E 2B                           dec     hl
 626+ 652F              Enclose_NonDelimiter:
 627+ 652F                              // find first non delimiter
 628+ 652F 23                               inc     hl
 629+ 6530 13                               inc     de
 630+ 6531 BE                               cp      (hl)
 631+ 6532 28 FB                        jr      z, Enclose_NonDelimiter
 632+ 6534 D5                           push    de
 633+ 6535
 634+ 6535                              // push    bc                  // save Instruction Pointer
 635+ 6535
 636+ 6535 4F                           ld      c, a                // save char
 637+ 6536 7E                           ld      a, (hl)
 638+ 6537 A7                           and     a                   // stop if 0x00
 639+ 6538 20 07                        jr      nz, Enclose_NextChar
 640+ 653A                              /// case iii. no more character in string
 641+ 653A                                  // pop     bc                  // restore Instruction Pointer
 642+ 653A 13                               inc     de
 643+ 653B D5                               push    de
 644+ 653C 1B                               dec     de
 645+ 653D D5                               push    de
 646+ 653E D9                               exx
 647+ 653F                                  next
 647+ 653F DD E9       >                jp      (ix)
 648+ 6541              Enclose_NextChar:
 649+ 6541 79                               ld      a, c
 650+ 6542 23                               inc     hl
 651+ 6543 13                               inc     de
 652+ 6544 BE                               cp      (hl)
 653+ 6545 20 06                            jr      nz, Enclose_NonSeparator
 654+ 6547                                      // case i. first non enclosed
 655+ 6547                                      // pop     bc                  // restore Instruction Pointer
 656+ 6547 D5                                   push    de
 657+ 6548 13                                   inc     de
 658+ 6549 D5                                   push    de
 659+ 654A D9                                   exx
 660+ 654B                                      next
 660+ 654B DD E9       >                jp      (ix)
 661+ 654D              Enclose_NonSeparator:
 662+ 654D 7E                               ld      a, (hl)
 663+ 654E A7                               and     a
 664+ 654F 20 F0                        jr      nz, Enclose_NextChar
 665+ 6551
 666+ 6551                              // case ii. separator & terminator
 667+ 6551                              // pop     bc                  // restore Instruction Pointer
 668+ 6551 D5                           push    de
 669+ 6552 D5                           push    de
 670+ 6553 D9                           exx
 671+ 6554                              next
 671+ 6554 DD E9       >                jp      (ix)
 672+ 6556
 673+ 6556              //  ______________________________________________________________________
 674+ 6556              //
 675+ 6556              // (map)        a2 a1 n c1 -- c2
 676+ 6556              // translate character c1 using mapping string a2 and a2
 677+ 6556              // if c1 is not present within string a1 then
 678+ 6556              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 679+ 6556                              New_Def C_MAP, "(MAP)", is_code, is_normal
 679+ 6556             >
 679+ 6556             >Dict_Ptr        defl    $
 679+ 6556             >
 679+ 6556             >//              ______________________________________________________________________
 679+ 6556             >//              Heap part
 679+ 6556             >
 679+ 6556             >
 679+ 6556             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E124             >
 679+ E124             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E124             >Latest_Definition defl  Heap_Ptr
 679+ E124             >
 679+ E124             >                // dummy db directives used to calculate length of namec
 679+ E124 28 4D 41 50 >                db      "(MAP)"
 679+ E128 29          >
 679+ E129             >len_NFA         defl    $ - temp_NFA
 679+ E129             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E124             >
 679+ E124 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E125 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 679+ E129 29          >
 679+ E12A             >                org     $-1                 // alter last byte of Name just above to set
 679+ E129 A9          >                db      {b $} | END_BIT     // msb as name end
 679+ E12A             >
 679+ E12A 18 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E12C             >Prev_Ptr        defl    Heap_Ptr
 679+ E12C             >
 679+ E12C             >mirror_Ptr      defl    $
 679+ E12C             >
 679+ E12C 58 65       >                dw      Dict_Ptr + 2        // xt
 679+ E12E             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E12E             >
 679+ E12E             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E12E             >
 679+ E12E             >//              ______________________________________________________________________
 679+ E12E             >//              Dictionary part
 679+ E12E             >
 679+ E12E             >                org     Dict_Ptr
 679+ 6556             >
 679+ 6556 2C 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 6558             >
 679+ 6558             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 6558 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 679+ 6558 ~           >
 679+ 6558 ~           >
 679+ 6558             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 6558             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 6558             >
 679+ 6558             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 6558 D9                           exx
 681+ 6559 E1                           pop     hl
 682+ 655A 7D                           ld      a, l
 683+ 655B C1                           pop     bc
 684+ 655C E1                           pop     hl
 685+ 655D 50                           ld      d, b
 686+ 655E 59                           ld      e, c
 687+ 655F ED B1                        cpir
 688+ 6561 E1                           pop     hl
 689+ 6562 20 05                        jr      nz, C_Map_Then
 689+ 6564
 690+ 6564 19                               add     hl, de
 691+ 6565 2B                               dec     hl
 692+ 6566 ED 42                            sbc     hl, bc
 693+ 6568 7E                               ld      a, (hl)
 694+ 6569              C_Map_Then:
 695+ 6569 6F                           ld      l, a
 696+ 656A 26 00                        ld      h, 0
 697+ 656C E5                           push    hl
 698+ 656D D9                           exx
 699+ 656E                              next
 699+ 656E DD E9       >                jp      (ix)
 700+ 6570
 701+ 6570              //  ______________________________________________________________________
 702+ 6570              //
 703+ 6570              // (compare)    a1 a2 n -- b
 704+ 6570              // this word performs a lexicographic compare of n bytes of text at address a1
 705+ 6570              // with n bytes of text at address a2. It returns numeric a value:
 706+ 6570              //  0 : if strings are equal
 707+ 6570              // +1 : if string at a1 greater than string at a2
 708+ 6570              // -1 : if string at a1 less than string at a2
 709+ 6570              // strings can be 256 bytes in length at most.
 710+ 6570                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 710+ 6570             >
 710+ 6570             >Dict_Ptr        defl    $
 710+ 6570             >
 710+ 6570             >//              ______________________________________________________________________
 710+ 6570             >//              Heap part
 710+ 6570             >
 710+ 6570             >
 710+ 6570             >                org     (Heap_Ptr & $1FFF) + $E000
 710+ E12E             >
 710+ E12E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 710+ E12E             >Latest_Definition defl  Heap_Ptr
 710+ E12E             >
 710+ E12E             >                // dummy db directives used to calculate length of namec
 710+ E12E 28 43 4F 4D >                db      "(COMPARE)"
 710+ E132 50 41 52 45 >
 710+ E136 29          >
 710+ E137             >len_NFA         defl    $ - temp_NFA
 710+ E137             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 710+ E12E             >
 710+ E12E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 710+ E12F 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 710+ E133 50 41 52 45 >
 710+ E137 29          >
 710+ E138             >                org     $-1                 // alter last byte of Name just above to set
 710+ E137 A9          >                db      {b $} | END_BIT     // msb as name end
 710+ E138             >
 710+ E138 24 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 710+ E13A             >Prev_Ptr        defl    Heap_Ptr
 710+ E13A             >
 710+ E13A             >mirror_Ptr      defl    $
 710+ E13A             >
 710+ E13A 72 65       >                dw      Dict_Ptr + 2        // xt
 710+ E13C             >Heap_Ptr        defl    $ - $E000           // save current HP
 710+ E13C             >
 710+ E13C             >Current_HP      defl  $ - $E000             // used to set HP once!
 710+ E13C             >
 710+ E13C             >//              ______________________________________________________________________
 710+ E13C             >//              Dictionary part
 710+ E13C             >
 710+ E13C             >                org     Dict_Ptr
 710+ 6570             >
 710+ 6570 3A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 710+ 6572             >
 710+ 6572             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 710+ 6572 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 710+ 6572 ~           >
 710+ 6572 ~           >
 710+ 6572             >                endif           ; ok        // for other definitions it "points" the correct handler
 710+ 6572             >                // Use of "; ok" to suppress "warning[fwdref]"
 710+ 6572             >
 710+ 6572             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 711+ 6572 D9                           exx
 712+ 6573 E1                           pop     hl                  // Number of bytes
 713+ 6574 7D                           ld      a, l
 714+ 6575 E1                           pop     hl                  // hl points string a2
 715+ 6576 D1                           pop     de                  // hl points string a1
 716+ 6577              //              push    bc                  // Instruction pointer on stack
 717+ 6577 47                           ld      b, a
 718+ 6578              C_Compare_Loop:
 719+ 6578 7E                               ld      a, (hl)
 720+ 6579 CD 75 64                         call    Case_Sensitive
 721+ 657C 4F                               ld      c, a
 722+ 657D 1A                               ld      a, (de)
 723+ 657E CD 75 64                         call    Case_Sensitive
 724+ 6581 B9                               cp      c
 725+ 6582 13                               inc     de
 726+ 6583 23                               inc     hl
 727+ 6584 28 0E                            jr      z, C_Compare_Equal
 728+ 6586 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 729+ 6588 21 01 00                                 ld      hl, 1               // a1 gt a2
 730+ 658B 18 03                                jr      C_Compare_Then      // Else
 731+ 658D              C_Compare_NotLessThan:
 732+ 658D 21 FF FF                                 ld      hl, -1              // a1 lt a2
 733+ 6590              C_Compare_Then:                                 // Endif
 734+ 6590              //                      pop     bc              // restore Instruction Pointer
 735+ 6590 E5                                   push    hl
 736+ 6591 D9                                   exx
 737+ 6592
 738+ 6592                                      next
 738+ 6592 DD E9       >                jp      (ix)
 739+ 6594
 740+ 6594              C_Compare_Equal:
 741+ 6594 10 E2                        djnz    C_Compare_Loop
 742+ 6596 21 00 00                     ld      hl, 0               // a1 eq a2
 743+ 6599              //              pop     bc                  // restore Instruction Pointer
 744+ 6599 E5                           push    hl
 745+ 659A D9                           exx
 746+ 659B
 747+ 659B                              next
 747+ 659B DD E9       >                jp      (ix)
 748+ 659D
 749+ 659D              //  ______________________________________________________________________
 750+ 659D              //
 751+ 659D              // emitc        c --
 752+ 659D              // low level emit, calls ROM routine at #10 to send a character to
 753+ 659D              // the the current channel (see SELECT to change stream-channel)
 754+ 659D                              New_Def EMITC, "EMITC", is_code, is_normal
 754+ 659D             >
 754+ 659D             >Dict_Ptr        defl    $
 754+ 659D             >
 754+ 659D             >//              ______________________________________________________________________
 754+ 659D             >//              Heap part
 754+ 659D             >
 754+ 659D             >
 754+ 659D             >                org     (Heap_Ptr & $1FFF) + $E000
 754+ E13C             >
 754+ E13C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 754+ E13C             >Latest_Definition defl  Heap_Ptr
 754+ E13C             >
 754+ E13C             >                // dummy db directives used to calculate length of namec
 754+ E13C 45 4D 49 54 >                db      "EMITC"
 754+ E140 43          >
 754+ E141             >len_NFA         defl    $ - temp_NFA
 754+ E141             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 754+ E13C             >
 754+ E13C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 754+ E13D 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 754+ E141 43          >
 754+ E142             >                org     $-1                 // alter last byte of Name just above to set
 754+ E141 C3          >                db      {b $} | END_BIT     // msb as name end
 754+ E142             >
 754+ E142 2E 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 754+ E144             >Prev_Ptr        defl    Heap_Ptr
 754+ E144             >
 754+ E144             >mirror_Ptr      defl    $
 754+ E144             >
 754+ E144 9F 65       >                dw      Dict_Ptr + 2        // xt
 754+ E146             >Heap_Ptr        defl    $ - $E000           // save current HP
 754+ E146             >
 754+ E146             >Current_HP      defl  $ - $E000             // used to set HP once!
 754+ E146             >
 754+ E146             >//              ______________________________________________________________________
 754+ E146             >//              Dictionary part
 754+ E146             >
 754+ E146             >                org     Dict_Ptr
 754+ 659D             >
 754+ 659D 44 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 754+ 659F             >
 754+ 659F             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 754+ 659F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 754+ 659F ~           >
 754+ 659F ~           >
 754+ 659F             >                endif           ; ok        // for other definitions it "points" the correct handler
 754+ 659F             >                // Use of "; ok" to suppress "warning[fwdref]"
 754+ 659F             >
 754+ 659F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 755+ 659F E1                           pop     hl
 756+ 65A0 7D                           ld      a, l
 757+ 65A1              Emitc_Ptr:
 758+ 65A1 C5                           push    bc
 759+ 65A2 D5                           push    de
 760+ 65A3 DD E5                        push    ix
 761+ 65A5 D7                           rst     $10
 762+ 65A6 DD E1                        pop     ix
 763+ 65A8 D1                           pop     de
 764+ 65A9 C1                           pop     bc
 765+ 65AA 3E FF                        ld      a, 255            // max possible
 766+ 65AC 32 8C 5C                     ld      (SCR_CT), a
 767+ 65AF                              next
 767+ 65AF DD E9       >                jp      (ix)
 768+ 65B1
 769+ 65B1              //  ______________________________________________________________________
 770+ 65B1              //
 771+ 65B1              // cr           --
 772+ 65B1              // send a CR via EMITC
 773+ 65B1                              New_Def CR, "CR", is_code, is_normal
 773+ 65B1             >
 773+ 65B1             >Dict_Ptr        defl    $
 773+ 65B1             >
 773+ 65B1             >//              ______________________________________________________________________
 773+ 65B1             >//              Heap part
 773+ 65B1             >
 773+ 65B1             >
 773+ 65B1             >                org     (Heap_Ptr & $1FFF) + $E000
 773+ E146             >
 773+ E146             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 773+ E146             >Latest_Definition defl  Heap_Ptr
 773+ E146             >
 773+ E146             >                // dummy db directives used to calculate length of namec
 773+ E146 43 52       >                db      "CR"
 773+ E148             >len_NFA         defl    $ - temp_NFA
 773+ E148             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 773+ E146             >
 773+ E146 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 773+ E147 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 773+ E149             >                org     $-1                 // alter last byte of Name just above to set
 773+ E148 D2          >                db      {b $} | END_BIT     // msb as name end
 773+ E149             >
 773+ E149 3C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 773+ E14B             >Prev_Ptr        defl    Heap_Ptr
 773+ E14B             >
 773+ E14B             >mirror_Ptr      defl    $
 773+ E14B             >
 773+ E14B B3 65       >                dw      Dict_Ptr + 2        // xt
 773+ E14D             >Heap_Ptr        defl    $ - $E000           // save current HP
 773+ E14D             >
 773+ E14D             >Current_HP      defl  $ - $E000             // used to set HP once!
 773+ E14D             >
 773+ E14D             >//              ______________________________________________________________________
 773+ E14D             >//              Dictionary part
 773+ E14D             >
 773+ E14D             >                org     Dict_Ptr
 773+ 65B1             >
 773+ 65B1 4B 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 773+ 65B3             >
 773+ 65B3             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 773+ 65B3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 773+ 65B3 ~           >
 773+ 65B3 ~           >
 773+ 65B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 773+ 65B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 773+ 65B3             >
 773+ 65B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 774+ 65B3
 775+ 65B3 3E 0D                        ld      a, CR_CHAR
 776+ 65B5 18 EA                        jr      Emitc_Ptr
 777+ 65B7
 778+ 65B7              Emitc_Vec:
 779+ 65B7 F0 65                        dw      C_Emit_Printable  // comma
 780+ 65B9 F7 65                        dw      C_Emit_Bel        // bel
 781+ 65BB F0 65                        dw      C_Emit_Printable  // bs
 782+ 65BD 0F 66                        dw      C_Emit_Tab        // tab
 783+ 65BF F0 65                        dw      C_Emit_Printable  // cr
 784+ 65C1 13 66                        dw      C_Emit_NL         // lf (unix newline)
 785+ 65C3 F0 65                        dw      C_Emit_Printable  // blank
 786+ 65C5 F0 65                        dw      C_Emit_Printable  // blank
 787+ 65C7
 788+ 65C7              Emit_Selector_Start:
 789+ 65C7 06                           db      $06                 // comma
 790+ 65C8 07                           db      $07                 // bel
 791+ 65C9 08                           db      $08                 // bs
 792+ 65CA 09                           db      $09                 // tab
 793+ 65CB 0D                           db      $0D                 // cr
 794+ 65CC 0A                           db      $0A                 // lf (unix newline)
 795+ 65CD 20                           db      $20
 796+ 65CE              Emit_Selector_End:
 797+ 65CE 20                           db      $20
 798+ 65CF
 799+ 65CF              //  ______________________________________________________________________
 800+ 65CF              //
 801+ 65CF              // (?emit)      c1 -- c2 | c1
 802+ 65CF              // decode a character to be sent via EMIT
 803+ 65CF              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 804+ 65CF              // the routine should resolve anything and convert the character anyway.
 805+ 65CF                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 805+ 65CF             >
 805+ 65CF             >Dict_Ptr        defl    $
 805+ 65CF             >
 805+ 65CF             >//              ______________________________________________________________________
 805+ 65CF             >//              Heap part
 805+ 65CF             >
 805+ 65CF             >
 805+ 65CF             >                org     (Heap_Ptr & $1FFF) + $E000
 805+ E14D             >
 805+ E14D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 805+ E14D             >Latest_Definition defl  Heap_Ptr
 805+ E14D             >
 805+ E14D             >                // dummy db directives used to calculate length of namec
 805+ E14D 28 3F 45 4D >                db      "(?EMIT)"
 805+ E151 49 54 29    >
 805+ E154             >len_NFA         defl    $ - temp_NFA
 805+ E154             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 805+ E14D             >
 805+ E14D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 805+ E14E 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 805+ E152 49 54 29    >
 805+ E155             >                org     $-1                 // alter last byte of Name just above to set
 805+ E154 A9          >                db      {b $} | END_BIT     // msb as name end
 805+ E155             >
 805+ E155 46 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 805+ E157             >Prev_Ptr        defl    Heap_Ptr
 805+ E157             >
 805+ E157             >mirror_Ptr      defl    $
 805+ E157             >
 805+ E157 D1 65       >                dw      Dict_Ptr + 2        // xt
 805+ E159             >Heap_Ptr        defl    $ - $E000           // save current HP
 805+ E159             >
 805+ E159             >Current_HP      defl  $ - $E000             // used to set HP once!
 805+ E159             >
 805+ E159             >//              ______________________________________________________________________
 805+ E159             >//              Dictionary part
 805+ E159             >
 805+ E159             >                org     Dict_Ptr
 805+ 65CF             >
 805+ 65CF 57 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 805+ 65D1             >
 805+ 65D1             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 805+ 65D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 805+ 65D1 ~           >
 805+ 65D1 ~           >
 805+ 65D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 805+ 65D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 805+ 65D1             >
 805+ 65D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 806+ 65D1 D9                           exx
 807+ 65D2 D1                           pop     de
 808+ 65D3 7B                           ld      a, e                //  de has c1
 809+ 65D4 E6 7F                        and     $7F                 // 7-bit ascii only
 810+ 65D6                              // push    bc                  // save Instruction Pointer
 811+ 65D6 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 812+ 65D9 21 CE 65                     ld      hl, Emit_Selector_End
 813+ 65DC ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 814+ 65DE 20 0A                        jr      nz, C_Emit_Not_Found
 815+ 65E0                                  // Found then decode it
 816+ 65E0 21 B7 65                         ld      hl, Emitc_Vec
 817+ 65E3 09                               add     hl, bc
 818+ 65E4 09                               add     hl, bc
 819+ 65E5 5E                               ld      e, (hl)
 820+ 65E6 23                               inc     hl
 821+ 65E7 56                               ld      d, (hl)
 822+ 65E8 EB                               ex      de, hl
 823+ 65E9                                  // pop     bc                  // restore Instruction Pointer
 824+ 65E9 E9                               jp      (hl)                // one of the following labels
 825+ 65EA              C_Emit_Not_Found:
 826+ 65EA                              // pop     bc                  // restore Instruction Pointer
 827+ 65EA FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 828+ 65EC 30 02                        jr      nc, C_Emit_Printable
 829+ 65EE 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 830+ 65F0              C_Emit_Printable:
 831+ 65F0 6F                           ld      l, a
 832+ 65F1 26 00                        ld      h, 0
 833+ 65F3 E5                           push    hl
 834+ 65F4 D9                           exx
 835+ 65F5                              next
 835+ 65F5 DD E9       >                jp      (ix)
 836+ 65F7
 837+ 65F7              C_Emit_Bel:
 838+ 65F7 D9                            exx
 839+ 65F8 C5                           push    bc                  // save Instruction Pointer
 840+ 65F9 D5                           push    de
 841+ 65FA 11 00 01                     ld      de, $0100
 842+ 65FD 21 00 02                     ld      hl, $0200
 843+ 6600 DD E5                        push    ix                  // save Next Pointer
 844+ 6602 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 845+ 6605 DD E1                        pop     ix                  // restore Next Pointer
 846+ 6607 D1                           pop     de
 847+ 6608 C1                           pop     bc                  // restore Instruction Pointer
 848+ 6609 21 00 00                     ld      hl, NUL_CHAR
 849+ 660C E5                           push    hl
 850+ 660D                              next
 850+ 660D DD E9       >                jp      (ix)
 851+ 660F
 852+ 660F 3E 06        C_Emit_Tab:     ld      a, COMMA_CHAR
 853+ 6611 18 DD                        jr      C_Emit_Printable
 854+ 6613                          //  push    hl
 855+ 6613                          //  exx
 856+ 6613                          //  next
 857+ 6613
 858+ 6613 3E 0D        C_Emit_NL       ld      a, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 859+ 6615 18 D9                        jr      C_Emit_Printable
 860+ 6617                          //  push    hl
 861+ 6617                          //  exx
 862+ 6617                          //  next
 863+ 6617
 864+ 6617              //  ______________________________________________________________________
 865+ 6617
 866+ 6617              Key_Table:
 867+ 6617 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 868+ 6618 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 869+ 6619 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 870+ 661A CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 871+ 661B CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 872+ 661C C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 873+ 661D C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 874+ 661E AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 875+ 661F C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 876+ 6620 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 877+ 6621 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 878+ 6622              Key_MapTo:
 879+ 6622 18                           db      $18                 // 10: ^X
 880+ 6623 03                           db      $03                 //  9: ^C
 881+ 6624 1A                           db      $1A                 //  8: ^Z
 882+ 6625 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 883+ 6626 5D                           db      $5D                 //  6: SYMBOL+U : ]
 884+ 6627 5B                           db      $5B                 //  5: SYMBOL+Y : [
 885+ 6628 7D                           db      $7D                 //  4: SYMBOL+G : }
 886+ 6629 7B                           db      $7B                 //  3: SYMBOL+F : {
 887+ 662A 5C                           db      $5C                 //  2: SYMBOl+D : //
 888+ 662B 7C                           db      $7C                 //  1: SYMBOL+S : |
 889+ 662C 7E                           db      $7E                 //  0: SYMBOL+A : ~
 890+ 662D
 891+ 662D              //  ______________________________________________________________________
 892+ 662D              //
 893+ 662D              // curs         -- c
 894+ 662D              // wait for a keypress
 895+ 662D              // This definition need Standard ROM Interrupt to be served
 896+ 662D
 897+ 662D                              New_Def CUR, "CURS", is_code, is_normal
 897+ 662D             >
 897+ 662D             >Dict_Ptr        defl    $
 897+ 662D             >
 897+ 662D             >//              ______________________________________________________________________
 897+ 662D             >//              Heap part
 897+ 662D             >
 897+ 662D             >
 897+ 662D             >                org     (Heap_Ptr & $1FFF) + $E000
 897+ E159             >
 897+ E159             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ E159             >Latest_Definition defl  Heap_Ptr
 897+ E159             >
 897+ E159             >                // dummy db directives used to calculate length of namec
 897+ E159 43 55 52 53 >                db      "CURS"
 897+ E15D             >len_NFA         defl    $ - temp_NFA
 897+ E15D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ E159             >
 897+ E159 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ E15A 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 897+ E15E             >                org     $-1                 // alter last byte of Name just above to set
 897+ E15D D3          >                db      {b $} | END_BIT     // msb as name end
 897+ E15E             >
 897+ E15E 4D 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 897+ E160             >Prev_Ptr        defl    Heap_Ptr
 897+ E160             >
 897+ E160             >mirror_Ptr      defl    $
 897+ E160             >
 897+ E160 2F 66       >                dw      Dict_Ptr + 2        // xt
 897+ E162             >Heap_Ptr        defl    $ - $E000           // save current HP
 897+ E162             >
 897+ E162             >Current_HP      defl  $ - $E000             // used to set HP once!
 897+ E162             >
 897+ E162             >//              ______________________________________________________________________
 897+ E162             >//              Dictionary part
 897+ E162             >
 897+ E162             >                org     Dict_Ptr
 897+ 662D             >
 897+ 662D 60 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 897+ 662F             >
 897+ 662F             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 662F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 897+ 662F ~           >
 897+ 662F ~           >
 897+ 662F             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 662F             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 662F             >
 897+ 662F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 662F
 899+ 662F C5                           push    bc                  // save Instruction Pointer
 900+ 6630 D5                           push    de                  // save Return Stack Pointer
 901+ 6631 DD E5                        push    ix
 902+ 6633 ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 903+ 6637 31 61 63                     ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 904+ 663A FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 905+ 663E
 906+ 663E              Cur_Wait:
 907+ 663E 76                               halt
 908+ 663F 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 909+ 6641 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 910+ 6644
 911+ 6644                                  // software-flash: flips face every 320 ms
 912+ 6644 3E 20                            ld      a, $20              // Timing based
 913+ 6646 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 914+ 6649
 915+ 6649 3A 8E 63                         ld      a, (Block_Face)     // see origin.asm
 916+ 664C 20 0C                            jr      nz, Cur_Cursor
 917+ 664E 3A 8F 63                             ld      a, (Half_Face)      // see origin.asm
 918+ 6651 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 919+ 6655 28 03                                jr      z, Cur_Cursor
 920+ 6657 3A 90 63                                 ld      a, (Underscore_Face) // see origin
 921+ 665A              Cur_Cursor:
 922+ 665A D7                               rst     $10
 923+ 665B 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 924+ 665D D7                               rst     $10
 925+ 665E
 926+ 665E FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 927+ 6662 28 DA                        jr      z, Cur_Wait
 928+ 6664
 929+ 6664 76                           halt    // this is to sync flashing cursor.
 930+ 6665
 931+ 6665 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 932+ 6667 D7                           rst     $10
 933+ 6668 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 934+ 666A D7                           rst     $10
 935+ 666B
 936+ 666B ED 7B 92 63                  ld      sp, (SP_Saved)
 937+ 666F
 938+ 666F DD E1                        pop     ix
 939+ 6671 D1                           pop     de                  // Restore Return Stack Pointer
 940+ 6672 C1                           pop     bc                  // Restore Instruction Pointer
 941+ 6673                              next
 941+ 6673 DD E9       >                jp      (ix)
 942+ 6675
 943+ 6675
 944+ 6675              //  ______________________________________________________________________
 945+ 6675              //
 946+ 6675              // key          -- c
 947+ 6675              // This definition need Standard ROM Interrupt to be served
 948+ 6675
 949+ 6675                              New_Def KEY, "KEY", is_code, is_normal
 949+ 6675             >
 949+ 6675             >Dict_Ptr        defl    $
 949+ 6675             >
 949+ 6675             >//              ______________________________________________________________________
 949+ 6675             >//              Heap part
 949+ 6675             >
 949+ 6675             >
 949+ 6675             >                org     (Heap_Ptr & $1FFF) + $E000
 949+ E162             >
 949+ E162             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ E162             >Latest_Definition defl  Heap_Ptr
 949+ E162             >
 949+ E162             >                // dummy db directives used to calculate length of namec
 949+ E162 4B 45 59    >                db      "KEY"
 949+ E165             >len_NFA         defl    $ - temp_NFA
 949+ E165             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ E162             >
 949+ E162 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ E163 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 949+ E166             >                org     $-1                 // alter last byte of Name just above to set
 949+ E165 D9          >                db      {b $} | END_BIT     // msb as name end
 949+ E166             >
 949+ E166 59 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 949+ E168             >Prev_Ptr        defl    Heap_Ptr
 949+ E168             >
 949+ E168             >mirror_Ptr      defl    $
 949+ E168             >
 949+ E168 77 66       >                dw      Dict_Ptr + 2        // xt
 949+ E16A             >Heap_Ptr        defl    $ - $E000           // save current HP
 949+ E16A             >
 949+ E16A             >Current_HP      defl  $ - $E000             // used to set HP once!
 949+ E16A             >
 949+ E16A             >//              ______________________________________________________________________
 949+ E16A             >//              Dictionary part
 949+ E16A             >
 949+ E16A             >                org     Dict_Ptr
 949+ 6675             >
 949+ 6675 68 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 949+ 6677             >
 949+ 6677             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 6677 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 949+ 6677 ~           >
 949+ 6677 ~           >
 949+ 6677             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 6677             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 6677             >
 949+ 6677             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 6677
 951+ 6677 C5                           push    bc                  // Save Instruction Pointer
 952+ 6678
 953+ 6678              Key_Wait:
 954+ 6678 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 955+ 667C 28 FA                        jr      z, Key_Wait
 956+ 667E
 957+ 667E 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 958+ 6681
 959+ 6681                              // decode character from above table
 960+ 6681 21 17 66                     ld      hl, Key_Table
 961+ 6684 01 0B 00                     ld      bc, $000B
 962+ 6687 ED B1                        cpir
 963+ 6689 20 05                        jr      nz, Key_DontMap
 964+ 668B 21 22 66                         ld      hl, Key_MapTo
 965+ 668E 09                               add     hl, bc
 966+ 668F 7E                               ld      a, (hl)
 967+ 6690 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 968+ 6692 20 09                        jr      nz, Key_NoCapsLock
 969+ 6694 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 970+ 6697 7E                               ld      a, (hl)
 971+ 6698 EE 08                            xor     $08
 972+ 669A 77                               ld      (hl), a
 973+ 669B 3E 00                            ld      a, NUL_CHAR
 974+ 669D 6F           Key_NoCapsLock: ld      l, a
 975+ 669E 26 00                        ld      h, 0                // Prepare TOS
 976+ 66A0
 977+ 66A0 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 978+ 66A4
 979+ 66A4 C1                           pop     bc                  // Restore Instruction Pointer
 980+ 66A5
 981+ 66A5                              psh1
 981+ 66A5 E5          >                push    hl
 981+ 66A6 DD E9       >                jp      (ix)
 982+ 66A8
 983+ 66A8
 984+ 66A8              //  ______________________________________________________________________
 985+ 66A8              //
 986+ 66A8              // click        --
 987+ 66A8              // This definition need Standard ROM Interrupt to be served
 988+ 66A8              //
 989+ 66A8              //              New_Def CLICK, "CLICK", is_code, is_normal
 990+ 66A8              //
 991+ 66A8              //                push    bc
 992+ 66A8              //              ld      a, ($5C48)          // BORDCR system variable
 993+ 66A8              //              rra
 994+ 66A8              //              rra
 995+ 66A8              //              rra
 996+ 66A8              //              or      $18                 // quick'n'dirty click
 997+ 66A8              //              out     ($fe), a
 998+ 66A8              //              ld      b, 0
 999+ 66A8              //              djnz    $                   // wait loop
1000+ 66A8              //              xor     $18
1001+ 66A8              //              out     ($fe), a
1002+ 66A8              //                pop     bc
1003+ 66A8
1004+ 66A8              //              next
1005+ 66A8
1006+ 66A8              //  ______________________________________________________________________
1007+ 66A8              //
1008+ 66A8              // key?         -- f
1009+ 66A8              // key available
1010+ 66A8              //
1011+ 66A8              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1012+ 66A8              //
1013+ 66A8              //              ld      hl, 0000
1014+ 66A8              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1015+ 66A8              //              jr      z, Key_Q
1016+ 66A8              //                  dec     hl
1017+ 66A8              // Key_Q:
1018+ 66A8              //                psh1
1019+ 66A8              //              next
1020+ 66A8
1021+ 66A8              //  ______________________________________________________________________
1022+ 66A8              //
1023+ 66A8              // ?terminal    -- FALSE | TRUE
1024+ 66A8              // test for BREAK keypress
1025+ 66A8                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1025+ 66A8             >
1025+ 66A8             >Dict_Ptr        defl    $
1025+ 66A8             >
1025+ 66A8             >//              ______________________________________________________________________
1025+ 66A8             >//              Heap part
1025+ 66A8             >
1025+ 66A8             >
1025+ 66A8             >                org     (Heap_Ptr & $1FFF) + $E000
1025+ E16A             >
1025+ E16A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ E16A             >Latest_Definition defl  Heap_Ptr
1025+ E16A             >
1025+ E16A             >                // dummy db directives used to calculate length of namec
1025+ E16A 3F 54 45 52 >                db      "?TERMINAL"
1025+ E16E 4D 49 4E 41 >
1025+ E172 4C          >
1025+ E173             >len_NFA         defl    $ - temp_NFA
1025+ E173             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ E16A             >
1025+ E16A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ E16B 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1025+ E16F 4D 49 4E 41 >
1025+ E173 4C          >
1025+ E174             >                org     $-1                 // alter last byte of Name just above to set
1025+ E173 CC          >                db      {b $} | END_BIT     // msb as name end
1025+ E174             >
1025+ E174 62 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1025+ E176             >Prev_Ptr        defl    Heap_Ptr
1025+ E176             >
1025+ E176             >mirror_Ptr      defl    $
1025+ E176             >
1025+ E176 AA 66       >                dw      Dict_Ptr + 2        // xt
1025+ E178             >Heap_Ptr        defl    $ - $E000           // save current HP
1025+ E178             >
1025+ E178             >Current_HP      defl  $ - $E000             // used to set HP once!
1025+ E178             >
1025+ E178             >//              ______________________________________________________________________
1025+ E178             >//              Dictionary part
1025+ E178             >
1025+ E178             >                org     Dict_Ptr
1025+ 66A8             >
1025+ 66A8 76 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1025+ 66AA             >
1025+ 66AA             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 66AA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1025+ 66AA ~           >
1025+ 66AA ~           >
1025+ 66AA             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 66AA             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 66AA             >
1025+ 66AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 66AA D9                           exx
1027+ 66AB 01 FE 7F                     ld      bc, $7ffe
1028+ 66AE ED 50                        in      d, (c)
1029+ 66B0 41                           ld      b, c
1030+ 66B1 ED 78                        in      a, (c)
1031+ 66B3 B2                           or       d
1032+ 66B4 1F                           rra
1033+ 66B5 3F                           ccf
1034+ 66B6 ED 62                        sbc     hl, hl
1035+ 66B8 E5                           push    hl
1036+ 66B9 D9                           exx
1037+ 66BA                              next
1037+ 66BA DD E9       >                jp      (ix)
1038+ 66BC
1039+ 66BC
1040+ 66BC              //  ______________________________________________________________________
1041+ 66BC              //
1042+ 66BC              // inkey        -- c | 0
1043+ 66BC              // call ROM inkey$ routine, returns c or "zero".
1044+ 66BC              //
1045+ 66BC              //              New_Def INKEY, "INKEY", is_code, is_normal
1046+ 66BC              //              push    bc
1047+ 66BC              //              push    de
1048+ 66BC              //              ld      (SP_Saved), sp
1049+ 66BC              //              ld      sp, Cold_origin - 5
1050+ 66BC              //              push    ix
1051+ 66BC              //              call    $15E6                   // instead of 15E9
1052+ 66BC              //              pop     ix
1053+ 66BC              //              ld      sp, (SP_Saved)
1054+ 66BC              //              ld      l, a
1055+ 66BC              //              ld      h, 0
1056+ 66BC              //              pop     de
1057+ 66BC              //              pop     bc
1058+ 66BC              //              psh1
1059+ 66BC
1060+ 66BC              //  ______________________________________________________________________
1061+ 66BC              //
1062+ 66BC              // select      n --
1063+ 66BC              // selects the given channel number
1064+ 66BC
1065+ 66BC                              New_Def SELECT, "SELECT", is_code, is_normal
1065+ 66BC             >
1065+ 66BC             >Dict_Ptr        defl    $
1065+ 66BC             >
1065+ 66BC             >//              ______________________________________________________________________
1065+ 66BC             >//              Heap part
1065+ 66BC             >
1065+ 66BC             >
1065+ 66BC             >                org     (Heap_Ptr & $1FFF) + $E000
1065+ E178             >
1065+ E178             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1065+ E178             >Latest_Definition defl  Heap_Ptr
1065+ E178             >
1065+ E178             >                // dummy db directives used to calculate length of namec
1065+ E178 53 45 4C 45 >                db      "SELECT"
1065+ E17C 43 54       >
1065+ E17E             >len_NFA         defl    $ - temp_NFA
1065+ E17E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1065+ E178             >
1065+ E178 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1065+ E179 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1065+ E17D 43 54       >
1065+ E17F             >                org     $-1                 // alter last byte of Name just above to set
1065+ E17E D4          >                db      {b $} | END_BIT     // msb as name end
1065+ E17F             >
1065+ E17F 6A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1065+ E181             >Prev_Ptr        defl    Heap_Ptr
1065+ E181             >
1065+ E181             >mirror_Ptr      defl    $
1065+ E181             >
1065+ E181 BE 66       >                dw      Dict_Ptr + 2        // xt
1065+ E183             >Heap_Ptr        defl    $ - $E000           // save current HP
1065+ E183             >
1065+ E183             >Current_HP      defl  $ - $E000             // used to set HP once!
1065+ E183             >
1065+ E183             >//              ______________________________________________________________________
1065+ E183             >//              Dictionary part
1065+ E183             >
1065+ E183             >                org     Dict_Ptr
1065+ 66BC             >
1065+ 66BC 81 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1065+ 66BE             >
1065+ 66BE             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1065+ 66BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1065+ 66BE ~           >
1065+ 66BE ~           >
1065+ 66BE             >                endif           ; ok        // for other definitions it "points" the correct handler
1065+ 66BE             >                // Use of "; ok" to suppress "warning[fwdref]"
1065+ 66BE             >
1065+ 66BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1066+ 66BE E1                           pop     hl
1067+ 66BF C5                           push    bc
1068+ 66C0 D5                           push    de
1069+ 66C1 7D                           ld      a, l
1070+ 66C2 ED 73 92 63                  ld      (SP_Saved), sp
1071+ 66C6 31 61 63                     ld      sp, Cold_origin - 5
1072+ 66C9 DD E5                        push    ix
1073+ 66CB CD 01 16                     call    $1601
1074+ 66CE DD E1                        pop     ix
1075+ 66D0 ED 7B 92 63                  ld      sp, (SP_Saved)
1076+ 66D4 D1                           pop     de
1077+ 66D5 C1                           pop     bc
1078+ 66D6                              next
1078+ 66D6 DD E9       >                jp      (ix)
1079+ 66D8
1080+ 66D8              //  ______________________________________________________________________
1081+ 66D8              //
1082+ 66D8              // ZX Spectrum Next - Low Level disk primitives.
1083+ 66D8              // this include is "here" for backward compatibility
1084+ 66D8
1085+ 66D8                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
   1++66D8              //  ______________________________________________________________________
   2++66D8              //
   3++66D8              //  next-opt.asm
   4++66D8              //
   5++66D8              //  ZX Spectrum Next - peculiar definitions
   6++66D8              //  ______________________________________________________________________
   7++66D8
   8++66D8              //  ______________________________________________________________________
   9++66D8              //
  10++66D8              // f_seek       d u -- f
  11++66D8              // Seek to position d in file-handle u.
  12++66D8              // Return a false-flag 0 on success, True flag on error
  13++66D8                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++66D8             >
  13++66D8             >Dict_Ptr        defl    $
  13++66D8             >
  13++66D8             >//              ______________________________________________________________________
  13++66D8             >//              Heap part
  13++66D8             >
  13++66D8             >
  13++66D8             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E183             >
  13++E183             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E183             >Latest_Definition defl  Heap_Ptr
  13++E183             >
  13++E183             >                // dummy db directives used to calculate length of namec
  13++E183 46 5F 53 45 >                db      "F_SEEK"
  13++E187 45 4B       >
  13++E189             >len_NFA         defl    $ - temp_NFA
  13++E189             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E183             >
  13++E183 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E184 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E188 45 4B       >
  13++E18A             >                org     $-1                 // alter last byte of Name just above to set
  13++E189 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E18A             >
  13++E18A 78 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E18C             >Prev_Ptr        defl    Heap_Ptr
  13++E18C             >
  13++E18C             >mirror_Ptr      defl    $
  13++E18C             >
  13++E18C DA 66       >                dw      Dict_Ptr + 2        // xt
  13++E18E             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E18E             >
  13++E18E             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E18E             >
  13++E18E             >//              ______________________________________________________________________
  13++E18E             >//              Dictionary part
  13++E18E             >
  13++E18E             >                org     Dict_Ptr
  13++66D8             >
  13++66D8 8C 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++66DA             >
  13++66DA             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++66DA ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++66DA ~           >
  13++66DA ~           >
  13++66DA             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++66DA             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++66DA             >
  13++66DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++66DA D9                            exx
  15++66DB E1                            pop     hl                  // file-handle
  16++66DC 7D                            ld      a, l
  17++66DD C1                            pop     bc                  // bc has high-word of d
  18++66DE D1                            pop     de
  19++66DF D9                           exx
  20++66E0 DD E5                        push    ix
  21++66E2 D5                           push    de
  22++66E3 C5                           push    bc                  // save Instruction Pointer
  23++66E4 D9                            exx
  24++66E5 DD 21 00 00                   ld      ix, 0
  25++66E9 F3                            di
  26++66EA CF                            rst     $08
  27++66EB 9F                            db      $9F
  28++66EC              F_Seek_Exit:
  29++66EC FB                           ei
  30++66ED C1                           pop     bc                  // restore Instruction Pointer
  31++66EE D1                           pop     de
  32++66EF DD E1                        pop     ix
  33++66F1 ED 62                        sbc     hl, hl              // to get 0 or -1
  34++66F3                              psh1
  34++66F3 E5          >                push    hl
  34++66F4 DD E9       >                jp      (ix)
  35++66F6
  36++66F6              //  ______________________________________________________________________
  37++66F6              //
  38++66F6              // f_close      u -- f
  39++66F6              // Close file-handle u.
  40++66F6              // Return 0 on success, True flag on error
  41++66F6
  42++66F6                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  42++66F6             >
  42++66F6             >Dict_Ptr        defl    $
  42++66F6             >
  42++66F6             >//              ______________________________________________________________________
  42++66F6             >//              Heap part
  42++66F6             >
  42++66F6             >
  42++66F6             >                org     (Heap_Ptr & $1FFF) + $E000
  42++E18E             >
  42++E18E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42++E18E             >Latest_Definition defl  Heap_Ptr
  42++E18E             >
  42++E18E             >                // dummy db directives used to calculate length of namec
  42++E18E 46 5F 43 4C >                db      "F_CLOSE"
  42++E192 4F 53 45    >
  42++E195             >len_NFA         defl    $ - temp_NFA
  42++E195             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42++E18E             >
  42++E18E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42++E18F 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  42++E193 4F 53 45    >
  42++E196             >                org     $-1                 // alter last byte of Name just above to set
  42++E195 C5          >                db      {b $} | END_BIT     // msb as name end
  42++E196             >
  42++E196 83 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42++E198             >Prev_Ptr        defl    Heap_Ptr
  42++E198             >
  42++E198             >mirror_Ptr      defl    $
  42++E198             >
  42++E198 F8 66       >                dw      Dict_Ptr + 2        // xt
  42++E19A             >Heap_Ptr        defl    $ - $E000           // save current HP
  42++E19A             >
  42++E19A             >Current_HP      defl  $ - $E000             // used to set HP once!
  42++E19A             >
  42++E19A             >//              ______________________________________________________________________
  42++E19A             >//              Dictionary part
  42++E19A             >
  42++E19A             >                org     Dict_Ptr
  42++66F6             >
  42++66F6 98 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  42++66F8             >
  42++66F8             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42++66F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42++66F8 ~           >
  42++66F8 ~           >
  42++66F8             >                endif           ; ok        // for other definitions it "points" the correct handler
  42++66F8             >                // Use of "; ok" to suppress "warning[fwdref]"
  42++66F8             >
  42++66F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43++66F8
  44++66F8 E1                           pop     hl
  45++66F9 7D                           ld      a, l                // file-handle
  46++66FA DD E5                        push    ix
  47++66FC D5                           push    de
  48++66FD C5                           push    bc                  // Save Instruction pointer
  49++66FE F3                           di
  50++66FF CF                           rst     $08
  51++6700 9B                           db      $9B
  52++6701 18 E9                        jr      F_Seek_Exit
  53++6703              //              ei
  54++6703              //              pop     de
  55++6703              //              pop     bc
  56++6703              //              pop     ix
  57++6703              //              sbc     hl, hl
  58++6703              //              psh1
  59++6703
  60++6703              //  ______________________________________________________________________
  61++6703              //
  62++6703              // f_sync      u -- f
  63++6703              // Close file-handle u.
  64++6703              // Return 0 on success, True flag on error
  65++6703
  66++6703                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  66++6703             >
  66++6703             >Dict_Ptr        defl    $
  66++6703             >
  66++6703             >//              ______________________________________________________________________
  66++6703             >//              Heap part
  66++6703             >
  66++6703             >
  66++6703             >                org     (Heap_Ptr & $1FFF) + $E000
  66++E19A             >
  66++E19A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  66++E19A             >Latest_Definition defl  Heap_Ptr
  66++E19A             >
  66++E19A             >                // dummy db directives used to calculate length of namec
  66++E19A 46 5F 53 59 >                db      "F_SYNC"
  66++E19E 4E 43       >
  66++E1A0             >len_NFA         defl    $ - temp_NFA
  66++E1A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  66++E19A             >
  66++E19A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  66++E19B 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  66++E19F 4E 43       >
  66++E1A1             >                org     $-1                 // alter last byte of Name just above to set
  66++E1A0 C3          >                db      {b $} | END_BIT     // msb as name end
  66++E1A1             >
  66++E1A1 8E 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  66++E1A3             >Prev_Ptr        defl    Heap_Ptr
  66++E1A3             >
  66++E1A3             >mirror_Ptr      defl    $
  66++E1A3             >
  66++E1A3 05 67       >                dw      Dict_Ptr + 2        // xt
  66++E1A5             >Heap_Ptr        defl    $ - $E000           // save current HP
  66++E1A5             >
  66++E1A5             >Current_HP      defl  $ - $E000             // used to set HP once!
  66++E1A5             >
  66++E1A5             >//              ______________________________________________________________________
  66++E1A5             >//              Dictionary part
  66++E1A5             >
  66++E1A5             >                org     Dict_Ptr
  66++6703             >
  66++6703 A3 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  66++6705             >
  66++6705             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  66++6705 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  66++6705 ~           >
  66++6705 ~           >
  66++6705             >                endif           ; ok        // for other definitions it "points" the correct handler
  66++6705             >                // Use of "; ok" to suppress "warning[fwdref]"
  66++6705             >
  66++6705             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  67++6705 E1                           pop     hl
  68++6706 7D                           ld      a, l                // file-handle
  69++6707 DD E5                        push    ix
  70++6709 D5                           push    de
  71++670A C5                           push    bc
  72++670B F3                           di
  73++670C CF                           rst     $08
  74++670D 9C                           db      $9C
  75++670E 18 DC                        jr      F_Seek_Exit
  76++6710              //              ei
  77++6710              //              pop     de
  78++6710              //              pop     bc
  79++6710              //              pop     ix
  80++6710              //              sbc     hl, hl
  81++6710              //              psh1
  82++6710
  83++6710              //  ______________________________________________________________________
  84++6710              //
  85++6710              // f_fgetpos    u -- d f
  86++6710              // Seek to position d in file-handle u.
  87++6710              // Return a false-flag 0 on success, True flag on error
  88++6710                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  88++6710             >
  88++6710             >Dict_Ptr        defl    $
  88++6710             >
  88++6710             >//              ______________________________________________________________________
  88++6710             >//              Heap part
  88++6710             >
  88++6710             >
  88++6710             >                org     (Heap_Ptr & $1FFF) + $E000
  88++E1A5             >
  88++E1A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  88++E1A5             >Latest_Definition defl  Heap_Ptr
  88++E1A5             >
  88++E1A5             >                // dummy db directives used to calculate length of namec
  88++E1A5 46 5F 46 47 >                db      "F_FGETPOS"
  88++E1A9 45 54 50 4F >
  88++E1AD 53          >
  88++E1AE             >len_NFA         defl    $ - temp_NFA
  88++E1AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  88++E1A5             >
  88++E1A5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  88++E1A6 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  88++E1AA 45 54 50 4F >
  88++E1AE 53          >
  88++E1AF             >                org     $-1                 // alter last byte of Name just above to set
  88++E1AE D3          >                db      {b $} | END_BIT     // msb as name end
  88++E1AF             >
  88++E1AF 9A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  88++E1B1             >Prev_Ptr        defl    Heap_Ptr
  88++E1B1             >
  88++E1B1             >mirror_Ptr      defl    $
  88++E1B1             >
  88++E1B1 12 67       >                dw      Dict_Ptr + 2        // xt
  88++E1B3             >Heap_Ptr        defl    $ - $E000           // save current HP
  88++E1B3             >
  88++E1B3             >Current_HP      defl  $ - $E000             // used to set HP once!
  88++E1B3             >
  88++E1B3             >//              ______________________________________________________________________
  88++E1B3             >//              Dictionary part
  88++E1B3             >
  88++E1B3             >                org     Dict_Ptr
  88++6710             >
  88++6710 B1 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  88++6712             >
  88++6712             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  88++6712 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  88++6712 ~           >
  88++6712 ~           >
  88++6712             >                endif           ; ok        // for other definitions it "points" the correct handler
  88++6712             >                // Use of "; ok" to suppress "warning[fwdref]"
  88++6712             >
  88++6712             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  89++6712 E1                            pop     hl
  90++6713 7D                            ld      a, l                // file-handle
  91++6714 DD E5                         push    ix
  92++6716 D5                            push    de
  93++6717 C5                            push    bc
  94++6718 F3                            di
  95++6719 CF                            rst     $08
  96++671A A0                            db      $A0
  97++671B FB                            ei
  98++671C D9                           exx
  99++671D C1                           pop     bc                  // IP
 100++671E D1                           pop     de                  // Return Stack Pointer
 101++671F DD E1                        pop     ix
 102++6721 D9                            exx
 103++6722 D5                            push    de
 104++6723 C5                            push    bc
 105++6724 ED 62                         sbc     hl, hl
 106++6726 E5                            push    hl
 107++6727 D9                           exx
 108++6728                              next
 108++6728 DD E9       >                jp      (ix)
 109++672A
 110++672A              //  ______________________________________________________________________
 111++672A              //
 112++672A              // f_read       a n u -- n f
 113++672A              // Read b bytes from file-handle u to address a
 114++672A              // Return the actual number n of bytes read
 115++672A              // Return 0 on success, True flag on error
 116++672A                              New_Def F_READ, "F_READ", is_code, is_normal
 116++672A             >
 116++672A             >Dict_Ptr        defl    $
 116++672A             >
 116++672A             >//              ______________________________________________________________________
 116++672A             >//              Heap part
 116++672A             >
 116++672A             >
 116++672A             >                org     (Heap_Ptr & $1FFF) + $E000
 116++E1B3             >
 116++E1B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116++E1B3             >Latest_Definition defl  Heap_Ptr
 116++E1B3             >
 116++E1B3             >                // dummy db directives used to calculate length of namec
 116++E1B3 46 5F 52 45 >                db      "F_READ"
 116++E1B7 41 44       >
 116++E1B9             >len_NFA         defl    $ - temp_NFA
 116++E1B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116++E1B3             >
 116++E1B3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116++E1B4 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 116++E1B8 41 44       >
 116++E1BA             >                org     $-1                 // alter last byte of Name just above to set
 116++E1B9 C4          >                db      {b $} | END_BIT     // msb as name end
 116++E1BA             >
 116++E1BA A5 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116++E1BC             >Prev_Ptr        defl    Heap_Ptr
 116++E1BC             >
 116++E1BC             >mirror_Ptr      defl    $
 116++E1BC             >
 116++E1BC 2C 67       >                dw      Dict_Ptr + 2        // xt
 116++E1BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 116++E1BE             >
 116++E1BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 116++E1BE             >
 116++E1BE             >//              ______________________________________________________________________
 116++E1BE             >//              Dictionary part
 116++E1BE             >
 116++E1BE             >                org     Dict_Ptr
 116++672A             >
 116++672A BC 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 116++672C             >
 116++672C             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 116++672C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 116++672C ~           >
 116++672C ~           >
 116++672C             >                endif           ; ok        // for other definitions it "points" the correct handler
 116++672C             >                // Use of "; ok" to suppress "warning[fwdref]"
 116++672C             >
 116++672C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117++672C D9                            exx
 118++672D E1                            pop     hl
 119++672E 7D                            ld      a, l                // file-handle
 120++672F C1                            pop     bc                  // bc has bytes to read
 121++6730 DD E3                         ex      (sp), ix            // ix has address
 122++6732 D9                           exx
 123++6733 D5                           push    de                  // Save Return Stack pointer
 124++6734 C5                           push    bc                  // Save Instruction pointer
 125++6735 D9                            exx
 126++6736 F3                            di
 127++6737 CF                            rst     $08
 128++6738 9D                            db      $9D
 129++6739              F_Read_Exit:
 130++6739 FB                           ei
 131++673A D9                           exx
 132++673B C1                           pop     bc                  // Restore Instruction pointer
 133++673C D1                           pop     de                  // Restore Return Stack pointer
 134++673D DD E1                        pop     ix                  // Restore ix
 135++673F D9                            exx
 136++6740 D5                            push    de                  // bytes involved in i/o operation
 137++6741 ED 62                         sbc     hl, hl
 138++6743 E5                            push    hl
 139++6744 D9                           exx
 140++6745                              next
 140++6745 DD E9       >                jp      (ix)
 141++6747
 142++6747              //  ______________________________________________________________________
 143++6747              //
 144++6747              // f_write      a n u -- n f
 145++6747              // Write bytes currently stored at address a to file-handle u.
 146++6747              // Return the actual n bytes written and 0 on success, True flag on error.
 147++6747                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 147++6747             >
 147++6747             >Dict_Ptr        defl    $
 147++6747             >
 147++6747             >//              ______________________________________________________________________
 147++6747             >//              Heap part
 147++6747             >
 147++6747             >
 147++6747             >                org     (Heap_Ptr & $1FFF) + $E000
 147++E1BE             >
 147++E1BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147++E1BE             >Latest_Definition defl  Heap_Ptr
 147++E1BE             >
 147++E1BE             >                // dummy db directives used to calculate length of namec
 147++E1BE 46 5F 57 52 >                db      "F_WRITE"
 147++E1C2 49 54 45    >
 147++E1C5             >len_NFA         defl    $ - temp_NFA
 147++E1C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147++E1BE             >
 147++E1BE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147++E1BF 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 147++E1C3 49 54 45    >
 147++E1C6             >                org     $-1                 // alter last byte of Name just above to set
 147++E1C5 C5          >                db      {b $} | END_BIT     // msb as name end
 147++E1C6             >
 147++E1C6 B3 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147++E1C8             >Prev_Ptr        defl    Heap_Ptr
 147++E1C8             >
 147++E1C8             >mirror_Ptr      defl    $
 147++E1C8             >
 147++E1C8 49 67       >                dw      Dict_Ptr + 2        // xt
 147++E1CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 147++E1CA             >
 147++E1CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 147++E1CA             >
 147++E1CA             >//              ______________________________________________________________________
 147++E1CA             >//              Dictionary part
 147++E1CA             >
 147++E1CA             >                org     Dict_Ptr
 147++6747             >
 147++6747 C8 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 147++6749             >
 147++6749             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 147++6749 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 147++6749 ~           >
 147++6749 ~           >
 147++6749             >                endif           ; ok        // for other definitions it "points" the correct handler
 147++6749             >                // Use of "; ok" to suppress "warning[fwdref]"
 147++6749             >
 147++6749             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148++6749 D9                            exx
 149++674A E1                            pop     hl
 150++674B 7D                            ld      a, l                // file-handle
 151++674C C1                            pop     bc                  // bc has bytes to read
 152++674D DD E3                         ex      (sp), ix            // ix has address
 153++674F D9                           exx
 154++6750 D5                           push    de                  // Save Return Stack pointer
 155++6751 C5                           push    bc                  // Save Instruction pointer
 156++6752 D9                            exx
 157++6753 F3                            di
 158++6754 CF                            rst     $08
 159++6755 9E                            db      $9E
 160++6756 18 E1                         jr F_Read_Exit
 161++6758              //                ei
 162++6758              //                exx
 163++6758              //                pop     de                  // Restore Return Stack pointer
 164++6758              //                pop     bc                  // Restore Instruction pointer
 165++6758              //                pop     ix                  // Restore ix
 166++6758              //                 exx
 167++6758              //                 push    de                  // bytes involved in i/o operation
 168++6758              //                 sbc     hl, hl
 169++6758              //                 push    hl
 170++6758              //                exx
 171++6758              //                next
 172++6758
 173++6758              //  ______________________________________________________________________
 174++6758              //
 175++6758              // f_open       a1 a2 b -- u f
 176++6758              // open a file
 177++6758              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 178++6758              // a2 is address to an 8-byte header data used in some cases.
 179++6758              // b is access mode-byte, that is a combination of:
 180++6758              // any/all of:
 181++6758              //   esx_mode_read          $01 request read access
 182++6758              //   esx_mode_write         $02 request write access
 183++6758              //   esx_mode_use_header    $40 read/write +3DOS header
 184++6758              // plus one of:
 185++6758              //   esx_mode_open_exist    $00 only open existing file
 186++6758              //   esx_mode_open_creat    $08 open existing or create file
 187++6758              //   esx_mode_creat_noexist $04 create new file, error if exists
 188++6758              //   esx_mode_creat_trunc   $0c create new file, delete existing
 189++6758              // Return file-handle u and 0 on success, True flag on error
 190++6758                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 190++6758             >
 190++6758             >Dict_Ptr        defl    $
 190++6758             >
 190++6758             >//              ______________________________________________________________________
 190++6758             >//              Heap part
 190++6758             >
 190++6758             >
 190++6758             >                org     (Heap_Ptr & $1FFF) + $E000
 190++E1CA             >
 190++E1CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++E1CA             >Latest_Definition defl  Heap_Ptr
 190++E1CA             >
 190++E1CA             >                // dummy db directives used to calculate length of namec
 190++E1CA 46 5F 4F 50 >                db      "F_OPEN"
 190++E1CE 45 4E       >
 190++E1D0             >len_NFA         defl    $ - temp_NFA
 190++E1D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++E1CA             >
 190++E1CA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++E1CB 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 190++E1CF 45 4E       >
 190++E1D1             >                org     $-1                 // alter last byte of Name just above to set
 190++E1D0 CE          >                db      {b $} | END_BIT     // msb as name end
 190++E1D1             >
 190++E1D1 BE 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 190++E1D3             >Prev_Ptr        defl    Heap_Ptr
 190++E1D3             >
 190++E1D3             >mirror_Ptr      defl    $
 190++E1D3             >
 190++E1D3 5A 67       >                dw      Dict_Ptr + 2        // xt
 190++E1D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 190++E1D5             >
 190++E1D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 190++E1D5             >
 190++E1D5             >//              ______________________________________________________________________
 190++E1D5             >//              Dictionary part
 190++E1D5             >
 190++E1D5             >                org     Dict_Ptr
 190++6758             >
 190++6758 D3 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 190++675A             >
 190++675A             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++675A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190++675A ~           >
 190++675A ~           >
 190++675A             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++675A             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++675A             >
 190++675A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++675A D9                            exx
 192++675B C1                            pop     bc                  // file-mode
 193++675C 41                            ld      b, c                // file-mode
 194++675D D1                            pop     de                  // 8-bytes buffer if any
 195++675E DD E3                         ex      (sp), ix            // filespec nul-terminated
 196++6760 D9                           exx
 197++6761 D5                           push    de                  // Save Return Stack pointer
 198++6762 C5                           push    bc                  // Save Instruction pointer
 199++6763 D9                            exx
 200++6764 3E 2A                         ld      a, "*"
 201++6766 F3                            di
 202++6767 CF                            rst     $08
 203++6768 9A                            db      $9A
 204++6769              F_Open_Exit:
 205++6769              //               ei                         // removed because is repeated in f_read_exit
 206++6769 5F                            ld      e, a                // return the handle-number
 207++676A 16 00                         ld      d, 0
 208++676C 18 CB                        jr F_Read_Exit
 209++676E
 210++676E              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 211++676E              //   \ FILENAME 1+ PAD 1 F_OPEN
 212++676E              //   \ DROP
 213++676E              //   \ F_CLOSE
 214++676E
 215++676E
 216++676E              //  ______________________________________________________________________
 217++676E              //
 218++676E              // f_opendir    a1 -- u f
 219++676E              // open a file
 220++676E                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 220++676E             >
 220++676E             >Dict_Ptr        defl    $
 220++676E             >
 220++676E             >//              ______________________________________________________________________
 220++676E             >//              Heap part
 220++676E             >
 220++676E             >
 220++676E             >                org     (Heap_Ptr & $1FFF) + $E000
 220++E1D5             >
 220++E1D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220++E1D5             >Latest_Definition defl  Heap_Ptr
 220++E1D5             >
 220++E1D5             >                // dummy db directives used to calculate length of namec
 220++E1D5 46 5F 4F 50 >                db      "F_OPENDIR"
 220++E1D9 45 4E 44 49 >
 220++E1DD 52          >
 220++E1DE             >len_NFA         defl    $ - temp_NFA
 220++E1DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220++E1D5             >
 220++E1D5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220++E1D6 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 220++E1DA 45 4E 44 49 >
 220++E1DE 52          >
 220++E1DF             >                org     $-1                 // alter last byte of Name just above to set
 220++E1DE D2          >                db      {b $} | END_BIT     // msb as name end
 220++E1DF             >
 220++E1DF CA 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 220++E1E1             >Prev_Ptr        defl    Heap_Ptr
 220++E1E1             >
 220++E1E1             >mirror_Ptr      defl    $
 220++E1E1             >
 220++E1E1 70 67       >                dw      Dict_Ptr + 2        // xt
 220++E1E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 220++E1E3             >
 220++E1E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 220++E1E3             >
 220++E1E3             >//              ______________________________________________________________________
 220++E1E3             >//              Dictionary part
 220++E1E3             >
 220++E1E3             >                org     Dict_Ptr
 220++676E             >
 220++676E E1 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 220++6770             >
 220++6770             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220++6770 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220++6770 ~           >
 220++6770 ~           >
 220++6770             >                endif           ; ok        // for other definitions it "points" the correct handler
 220++6770             >                // Use of "; ok" to suppress "warning[fwdref]"
 220++6770             >
 220++6770             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221++6770 DD E3                        ex      (sp), ix            // filespec nul-terminated
 222++6772 D5                           push    de                  // Save Return Stack pointer
 223++6773 C5                           push    bc                  // Save Instruction pointer
 224++6774 06 10                        ld      b, $10              // file-mode
 225++6776 3E 43                        ld      a, "C"
 226++6778 F3                           di
 227++6779 CF                           rst     $08
 228++677A A3                           db      $A3
 229++677B 18 EC                        jr      F_Open_Exit
 230++677D
 231++677D
 232++677D              //  ______________________________________________________________________
 233++677D              //
 234++677D              // f_readdir    a1 a2 b -- u f
 235++677D              // open a file
 236++677D                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 236++677D             >
 236++677D             >Dict_Ptr        defl    $
 236++677D             >
 236++677D             >//              ______________________________________________________________________
 236++677D             >//              Heap part
 236++677D             >
 236++677D             >
 236++677D             >                org     (Heap_Ptr & $1FFF) + $E000
 236++E1E3             >
 236++E1E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236++E1E3             >Latest_Definition defl  Heap_Ptr
 236++E1E3             >
 236++E1E3             >                // dummy db directives used to calculate length of namec
 236++E1E3 46 5F 52 45 >                db      "F_READDIR"
 236++E1E7 41 44 44 49 >
 236++E1EB 52          >
 236++E1EC             >len_NFA         defl    $ - temp_NFA
 236++E1EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236++E1E3             >
 236++E1E3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236++E1E4 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 236++E1E8 41 44 44 49 >
 236++E1EC 52          >
 236++E1ED             >                org     $-1                 // alter last byte of Name just above to set
 236++E1EC D2          >                db      {b $} | END_BIT     // msb as name end
 236++E1ED             >
 236++E1ED D5 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 236++E1EF             >Prev_Ptr        defl    Heap_Ptr
 236++E1EF             >
 236++E1EF             >mirror_Ptr      defl    $
 236++E1EF             >
 236++E1EF 7F 67       >                dw      Dict_Ptr + 2        // xt
 236++E1F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 236++E1F1             >
 236++E1F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 236++E1F1             >
 236++E1F1             >//              ______________________________________________________________________
 236++E1F1             >//              Dictionary part
 236++E1F1             >
 236++E1F1             >                org     Dict_Ptr
 236++677D             >
 236++677D EF 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 236++677F             >
 236++677F             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236++677F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 236++677F ~           >
 236++677F ~           >
 236++677F             >                endif           ; ok        // for other definitions it "points" the correct handler
 236++677F             >                // Use of "; ok" to suppress "warning[fwdref]"
 236++677F             >
 236++677F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237++677F D9                            exx
 238++6780 E1                            pop     hl
 239++6781 7D                            ld      a, l
 240++6782 D1                            pop     de
 241++6783 DD E3                         ex      (sp), ix            // filespec nul-terminated
 242++6785 D9                           exx
 243++6786 D5                           push    de                  // Save Return Stack pointer
 244++6787 C5                           push    bc                  // Save Instruction pointer
 245++6788 D9                            exx
 246++6789 F3                            di
 247++678A CF                            rst     $08
 248++678B A4                            db      $A4
 249++678C 18 DB                         jr      F_Open_Exit
 250++678E
 251++678E
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
1086+ 678E
1087+ 678E
1088+ 678E              //  ______________________________________________________________________
1089+ 678E              //
1090+ 678E              // cmove    a1 a2 u --
1091+ 678E              // If u > 0, moves memory content starting at address a1 for n bytes long
1092+ 678E              // storing then starting at address addr2.
1093+ 678E              // The content of a1 is moved first. See CMOVE> also.
1094+ 678E                              New_Def CMOVE, "CMOVE", is_code, is_normal
1094+ 678E             >
1094+ 678E             >Dict_Ptr        defl    $
1094+ 678E             >
1094+ 678E             >//              ______________________________________________________________________
1094+ 678E             >//              Heap part
1094+ 678E             >
1094+ 678E             >
1094+ 678E             >                org     (Heap_Ptr & $1FFF) + $E000
1094+ E1F1             >
1094+ E1F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1094+ E1F1             >Latest_Definition defl  Heap_Ptr
1094+ E1F1             >
1094+ E1F1             >                // dummy db directives used to calculate length of namec
1094+ E1F1 43 4D 4F 56 >                db      "CMOVE"
1094+ E1F5 45          >
1094+ E1F6             >len_NFA         defl    $ - temp_NFA
1094+ E1F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1094+ E1F1             >
1094+ E1F1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1094+ E1F2 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1094+ E1F6 45          >
1094+ E1F7             >                org     $-1                 // alter last byte of Name just above to set
1094+ E1F6 C5          >                db      {b $} | END_BIT     // msb as name end
1094+ E1F7             >
1094+ E1F7 E3 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1094+ E1F9             >Prev_Ptr        defl    Heap_Ptr
1094+ E1F9             >
1094+ E1F9             >mirror_Ptr      defl    $
1094+ E1F9             >
1094+ E1F9 90 67       >                dw      Dict_Ptr + 2        // xt
1094+ E1FB             >Heap_Ptr        defl    $ - $E000           // save current HP
1094+ E1FB             >
1094+ E1FB             >Current_HP      defl  $ - $E000             // used to set HP once!
1094+ E1FB             >
1094+ E1FB             >//              ______________________________________________________________________
1094+ E1FB             >//              Dictionary part
1094+ E1FB             >
1094+ E1FB             >                org     Dict_Ptr
1094+ 678E             >
1094+ 678E F9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1094+ 6790             >
1094+ 6790             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1094+ 6790 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1094+ 6790 ~           >
1094+ 6790 ~           >
1094+ 6790             >                endif           ; ok        // for other definitions it "points" the correct handler
1094+ 6790             >                // Use of "; ok" to suppress "warning[fwdref]"
1094+ 6790             >
1094+ 6790             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1095+ 6790 D9                           exx
1096+ 6791
1097+ 6791 C1                           pop     bc                  // bc has counter
1098+ 6792 D1                           pop     de                  // de now has dest
1099+ 6793 E1                           pop     hl                 // hl has source, save Instruction Pointer
1100+ 6794 78                           ld      a, b
1101+ 6795 B1                           or      c
1102+ 6796 28 02                        jr      z, Cmove_NoMove
1103+ 6798 ED B0                            ldir
1104+ 679A              Cmove_NoMove:
1105+ 679A D9                           exx
1106+ 679B
1107+ 679B                              next
1107+ 679B DD E9       >                jp      (ix)
1108+ 679D
1109+ 679D              //  ______________________________________________________________________
1110+ 679D              //
1111+ 679D              // cmove>    a1 a2 u --
1112+ 679D              // If u > 0, moves memory content starting at address a1 for n bytes long
1113+ 679D              // storing then starting at address addr2.
1114+ 679D              // The content of a1 is moved last. See cmove.
1115+ 679D                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1115+ 679D             >
1115+ 679D             >Dict_Ptr        defl    $
1115+ 679D             >
1115+ 679D             >//              ______________________________________________________________________
1115+ 679D             >//              Heap part
1115+ 679D             >
1115+ 679D             >
1115+ 679D             >                org     (Heap_Ptr & $1FFF) + $E000
1115+ E1FB             >
1115+ E1FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1115+ E1FB             >Latest_Definition defl  Heap_Ptr
1115+ E1FB             >
1115+ E1FB             >                // dummy db directives used to calculate length of namec
1115+ E1FB 43 4D 4F 56 >                db      "CMOVE>"
1115+ E1FF 45 3E       >
1115+ E201             >len_NFA         defl    $ - temp_NFA
1115+ E201             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1115+ E1FB             >
1115+ E1FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1115+ E1FC 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1115+ E200 45 3E       >
1115+ E202             >                org     $-1                 // alter last byte of Name just above to set
1115+ E201 BE          >                db      {b $} | END_BIT     // msb as name end
1115+ E202             >
1115+ E202 F1 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1115+ E204             >Prev_Ptr        defl    Heap_Ptr
1115+ E204             >
1115+ E204             >mirror_Ptr      defl    $
1115+ E204             >
1115+ E204 9F 67       >                dw      Dict_Ptr + 2        // xt
1115+ E206             >Heap_Ptr        defl    $ - $E000           // save current HP
1115+ E206             >
1115+ E206             >Current_HP      defl  $ - $E000             // used to set HP once!
1115+ E206             >
1115+ E206             >//              ______________________________________________________________________
1115+ E206             >//              Dictionary part
1115+ E206             >
1115+ E206             >                org     Dict_Ptr
1115+ 679D             >
1115+ 679D 04 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1115+ 679F             >
1115+ 679F             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1115+ 679F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1115+ 679F ~           >
1115+ 679F ~           >
1115+ 679F             >                endif           ; ok        // for other definitions it "points" the correct handler
1115+ 679F             >                // Use of "; ok" to suppress "warning[fwdref]"
1115+ 679F             >
1115+ 679F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1116+ 679F D9                           exx
1117+ 67A0
1118+ 67A0 C1                           pop     bc                  // bc has counter
1119+ 67A1 D1                           pop     de                  // de has dest
1120+ 67A2 E1                           pop     hl                  // hl has source, save Instruction Pointer
1121+ 67A3 78                           ld      a, b
1122+ 67A4 B1                           or      c
1123+ 67A5 28 08                        jr      z, CmoveV_NoMove
1124+ 67A7 EB                               ex      de, hl              // compute address to
1125+ 67A8 09                               add     hl, bc              // operate backward
1126+ 67A9 2B                               dec     hl
1127+ 67AA EB                               ex      de, hl
1128+ 67AB 09                               add     hl, bc
1129+ 67AC 2B                               dec     hl
1130+ 67AD ED B8                            lddr                        // backward
1131+ 67AF              CmoveV_NoMove:
1132+ 67AF D9                           exx
1133+ 67B0
1134+ 67B0                              next
1134+ 67B0 DD E9       >                jp      (ix)
1135+ 67B2
1136+ 67B2              //  ______________________________________________________________________
1137+ 67B2              //
1138+ 67B2              // um*      u1 u2 -- ud
1139+ 67B2              // Unsigned multiplication
1140+ 67B2              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1141+ 67B2              // On the stack a double number is treated as two single numbers
1142+ 67B2              // where DE is on the top of the stack and HL is the second from top,
1143+ 67B2              // Instead, in 2VARIABLE a double number is stored as EDLH.
1144+ 67B2              // this definition could use "MUL" Z80N new op-code.
1145+ 67B2                              New_Def UM_MUL, "UM*", is_code, is_normal
1145+ 67B2             >
1145+ 67B2             >Dict_Ptr        defl    $
1145+ 67B2             >
1145+ 67B2             >//              ______________________________________________________________________
1145+ 67B2             >//              Heap part
1145+ 67B2             >
1145+ 67B2             >
1145+ 67B2             >                org     (Heap_Ptr & $1FFF) + $E000
1145+ E206             >
1145+ E206             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1145+ E206             >Latest_Definition defl  Heap_Ptr
1145+ E206             >
1145+ E206             >                // dummy db directives used to calculate length of namec
1145+ E206 55 4D 2A    >                db      "UM*"
1145+ E209             >len_NFA         defl    $ - temp_NFA
1145+ E209             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1145+ E206             >
1145+ E206 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1145+ E207 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1145+ E20A             >                org     $-1                 // alter last byte of Name just above to set
1145+ E209 AA          >                db      {b $} | END_BIT     // msb as name end
1145+ E20A             >
1145+ E20A FB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1145+ E20C             >Prev_Ptr        defl    Heap_Ptr
1145+ E20C             >
1145+ E20C             >mirror_Ptr      defl    $
1145+ E20C             >
1145+ E20C B4 67       >                dw      Dict_Ptr + 2        // xt
1145+ E20E             >Heap_Ptr        defl    $ - $E000           // save current HP
1145+ E20E             >
1145+ E20E             >Current_HP      defl  $ - $E000             // used to set HP once!
1145+ E20E             >
1145+ E20E             >//              ______________________________________________________________________
1145+ E20E             >//              Dictionary part
1145+ E20E             >
1145+ E20E             >                org     Dict_Ptr
1145+ 67B2             >
1145+ 67B2 0C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1145+ 67B4             >
1145+ 67B4             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1145+ 67B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1145+ 67B4 ~           >
1145+ 67B4 ~           >
1145+ 67B4             >                endif           ; ok        // for other definitions it "points" the correct handler
1145+ 67B4             >                // Use of "; ok" to suppress "warning[fwdref]"
1145+ 67B4             >
1145+ 67B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1146+ 67B4 D9                           exx
1147+ 67B5 D1                           pop     de                    // de has u2 operand
1148+ 67B6 E1                           pop     hl                    // hl has u1 operand
1149+ 67B7 45                           ld      b, l
1150+ 67B8 4B                           ld      c, e
1151+ 67B9 5D                           ld      e, l
1152+ 67BA 6A                           ld      l, d
1153+ 67BB E5                           push    hl
1154+ 67BC 69                           ld      l, c
1155+ 67BD ED 30                        mul
1156+ 67BF EB                           ex      de, hl
1157+ 67C0 ED 30                        mul
1158+ 67C2 AF                           xor     a
1159+ 67C3 19                           add     hl, de
1160+ 67C4 8F                           adc     a
1161+ 67C5 59                           ld      e, c
1162+ 67C6 50                           ld      d, b
1163+ 67C7 ED 30                        mul
1164+ 67C9 47                           ld      b, a
1165+ 67CA 4C                           ld      c, h
1166+ 67CB 7A                           ld      a, d
1167+ 67CC 85                           add     l
1168+ 67CD 67                           ld      h, a
1169+ 67CE 6B                           ld      l, e
1170+ 67CF D1                           pop     de
1171+ 67D0 ED 30                        mul
1172+ 67D2 EB                           ex      de, hl
1173+ 67D3 ED 4A                        adc     hl, bc
1174+ 67D5 D5                           push    de
1175+ 67D6 E5                           push    hl
1176+ 67D7 D9                           exx
1177+ 67D8                              next
1177+ 67D8 DD E9       >                jp      (ix)
1178+ 67DA
1179+ 67DA              //  ______________________________________________________________________
1180+ 67DA              //
1181+ 67DA              // um/mod      ud u1 -- q r
1182+ 67DA              // divides ud into u1 giving quotient q and remainder r
1183+ 67DA              // algorithm takes 16 bit at a time starting from msb
1184+ 67DA              // DE grows from lsb upward with quotient result
1185+ 67DA              // HL keeps the remainder at each stage of division
1186+ 67DA              // each loop 'lowers' the next binary digit to form the current dividend
1187+ 67DA                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1187+ 67DA             >
1187+ 67DA             >Dict_Ptr        defl    $
1187+ 67DA             >
1187+ 67DA             >//              ______________________________________________________________________
1187+ 67DA             >//              Heap part
1187+ 67DA             >
1187+ 67DA             >
1187+ 67DA             >                org     (Heap_Ptr & $1FFF) + $E000
1187+ E20E             >
1187+ E20E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1187+ E20E             >Latest_Definition defl  Heap_Ptr
1187+ E20E             >
1187+ E20E             >                // dummy db directives used to calculate length of namec
1187+ E20E 55 4D 2F 4D >                db      "UM/MOD"
1187+ E212 4F 44       >
1187+ E214             >len_NFA         defl    $ - temp_NFA
1187+ E214             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1187+ E20E             >
1187+ E20E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1187+ E20F 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1187+ E213 4F 44       >
1187+ E215             >                org     $-1                 // alter last byte of Name just above to set
1187+ E214 C4          >                db      {b $} | END_BIT     // msb as name end
1187+ E215             >
1187+ E215 06 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1187+ E217             >Prev_Ptr        defl    Heap_Ptr
1187+ E217             >
1187+ E217             >mirror_Ptr      defl    $
1187+ E217             >
1187+ E217 DC 67       >                dw      Dict_Ptr + 2        // xt
1187+ E219             >Heap_Ptr        defl    $ - $E000           // save current HP
1187+ E219             >
1187+ E219             >Current_HP      defl  $ - $E000             // used to set HP once!
1187+ E219             >
1187+ E219             >//              ______________________________________________________________________
1187+ E219             >//              Dictionary part
1187+ E219             >
1187+ E219             >                org     Dict_Ptr
1187+ 67DA             >
1187+ 67DA 17 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1187+ 67DC             >
1187+ 67DC             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1187+ 67DC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1187+ 67DC ~           >
1187+ 67DC ~           >
1187+ 67DC             >                endif           ; ok        // for other definitions it "points" the correct handler
1187+ 67DC             >                // Use of "; ok" to suppress "warning[fwdref]"
1187+ 67DC             >
1187+ 67DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1188+ 67DC D9                           exx
1189+ 67DD C1                           pop     bc                      // divisor
1190+ 67DE
1191+ 67DE E1                           pop     hl                      // < high part
1192+ 67DF D1                           pop     de                      // < low part and
1193+ 67E0
1194+ 67E0 7D                           ld      a, l                    // check without changing arguments
1195+ 67E1 91                           sub     c                       // if divisor is greater than high part
1196+ 67E2 7C                           ld      a, h                    // so quotient will be in range
1197+ 67E3 98                           sbc     a, b
1198+ 67E4 30 20                        jr      nc, Um_DivMod_OutOfRange
1199+ 67E6 3E 10                            ld      a, 16
1200+ 67E8              Um_DivMod_Loop:
1201+ 67E8 CB 23                                sla     e
1202+ 67EA CB 12                                rl      d
1203+ 67EC ED 6A                                adc     hl, hl
1204+ 67EE 30 05                                jr      nc, Um_DivMod_Carry
1205+ 67F0 A7                                       and     a
1206+ 67F1 ED 42                                    sbc     hl, bc
1207+ 67F3 18 07                                jr      Um_DivMod_Endif    // else
1208+ 67F5              Um_DivMod_Carry:
1209+ 67F5 A7                                       and     a
1210+ 67F6 ED 42                                    sbc     hl, bc
1211+ 67F8 30 02                                    jr      nc, Um_DivMod_Endif
1212+ 67FA 09                                           add     hl, bc
1213+ 67FB 1B                                           dec     de
1214+ 67FC              Um_DivMod_Endif:                                   // endif
1215+ 67FC 13                                   inc     de
1216+ 67FD 3D                                   dec     a
1217+ 67FE 20 E8                            jr      nz, Um_DivMod_Loop
1218+ 6800 EB                               ex      de, hl
1219+ 6801              Um_DivMod_Bailout:
1220+ 6801 D5                               push    de                  // de := remanider
1221+ 6802 E5                               push    hl                  // hl := quotient
1222+ 6803 D9                               exx
1223+ 6804                                  next
1223+ 6804 DD E9       >                jp      (ix)
1224+ 6806
1225+ 6806              Um_DivMod_OutOfRange:
1226+ 6806 21 FF FF                     ld      hl, -1
1227+ 6809 54                           ld      d, h
1228+ 680A 5D                           ld      e, l
1229+ 680B 18 F4                        jr      Um_DivMod_Bailout
1230+ 680D
1231+ 680D              //  ______________________________________________________________________
1232+ 680D              //
1233+ 680D              // and          n1 n2 -- n3
1234+ 680D              // bit logical AND. Returns n3 as n1 & n2
1235+ 680D                              New_Def AND_OP, "AND", is_code, is_normal
1235+ 680D             >
1235+ 680D             >Dict_Ptr        defl    $
1235+ 680D             >
1235+ 680D             >//              ______________________________________________________________________
1235+ 680D             >//              Heap part
1235+ 680D             >
1235+ 680D             >
1235+ 680D             >                org     (Heap_Ptr & $1FFF) + $E000
1235+ E219             >
1235+ E219             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1235+ E219             >Latest_Definition defl  Heap_Ptr
1235+ E219             >
1235+ E219             >                // dummy db directives used to calculate length of namec
1235+ E219 41 4E 44    >                db      "AND"
1235+ E21C             >len_NFA         defl    $ - temp_NFA
1235+ E21C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1235+ E219             >
1235+ E219 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1235+ E21A 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1235+ E21D             >                org     $-1                 // alter last byte of Name just above to set
1235+ E21C C4          >                db      {b $} | END_BIT     // msb as name end
1235+ E21D             >
1235+ E21D 0E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1235+ E21F             >Prev_Ptr        defl    Heap_Ptr
1235+ E21F             >
1235+ E21F             >mirror_Ptr      defl    $
1235+ E21F             >
1235+ E21F 0F 68       >                dw      Dict_Ptr + 2        // xt
1235+ E221             >Heap_Ptr        defl    $ - $E000           // save current HP
1235+ E221             >
1235+ E221             >Current_HP      defl  $ - $E000             // used to set HP once!
1235+ E221             >
1235+ E221             >//              ______________________________________________________________________
1235+ E221             >//              Dictionary part
1235+ E221             >
1235+ E221             >                org     Dict_Ptr
1235+ 680D             >
1235+ 680D 1F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1235+ 680F             >
1235+ 680F             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1235+ 680F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1235+ 680F ~           >
1235+ 680F ~           >
1235+ 680F             >                endif           ; ok        // for other definitions it "points" the correct handler
1235+ 680F             >                // Use of "; ok" to suppress "warning[fwdref]"
1235+ 680F             >
1235+ 680F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1236+ 680F D9                           exx
1237+ 6810 D1                           pop     de
1238+ 6811 E1                           pop     hl
1239+ 6812 7B                           ld      a, e
1240+ 6813 A5                           and     l
1241+ 6814 6F                           ld      l, a
1242+ 6815 7A                           ld      a, d
1243+ 6816 A4                           and     h
1244+ 6817              Boolean_exit:
1245+ 6817 67                           ld      h, a
1246+ 6818 E5                           push    hl
1247+ 6819 D9                           exx
1248+ 681A                              next
1248+ 681A DD E9       >                jp      (ix)
1249+ 681C
1250+ 681C              //  ______________________________________________________________________
1251+ 681C              //
1252+ 681C              // or           n1 n2 -- n3
1253+ 681C              // bit logical OR. Returns n3 as n1 | n2
1254+ 681C                              New_Def OR_OP, "OR", is_code, is_normal
1254+ 681C             >
1254+ 681C             >Dict_Ptr        defl    $
1254+ 681C             >
1254+ 681C             >//              ______________________________________________________________________
1254+ 681C             >//              Heap part
1254+ 681C             >
1254+ 681C             >
1254+ 681C             >                org     (Heap_Ptr & $1FFF) + $E000
1254+ E221             >
1254+ E221             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1254+ E221             >Latest_Definition defl  Heap_Ptr
1254+ E221             >
1254+ E221             >                // dummy db directives used to calculate length of namec
1254+ E221 4F 52       >                db      "OR"
1254+ E223             >len_NFA         defl    $ - temp_NFA
1254+ E223             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1254+ E221             >
1254+ E221 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1254+ E222 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1254+ E224             >                org     $-1                 // alter last byte of Name just above to set
1254+ E223 D2          >                db      {b $} | END_BIT     // msb as name end
1254+ E224             >
1254+ E224 19 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1254+ E226             >Prev_Ptr        defl    Heap_Ptr
1254+ E226             >
1254+ E226             >mirror_Ptr      defl    $
1254+ E226             >
1254+ E226 1E 68       >                dw      Dict_Ptr + 2        // xt
1254+ E228             >Heap_Ptr        defl    $ - $E000           // save current HP
1254+ E228             >
1254+ E228             >Current_HP      defl  $ - $E000             // used to set HP once!
1254+ E228             >
1254+ E228             >//              ______________________________________________________________________
1254+ E228             >//              Dictionary part
1254+ E228             >
1254+ E228             >                org     Dict_Ptr
1254+ 681C             >
1254+ 681C 26 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1254+ 681E             >
1254+ 681E             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1254+ 681E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1254+ 681E ~           >
1254+ 681E ~           >
1254+ 681E             >                endif           ; ok        // for other definitions it "points" the correct handler
1254+ 681E             >                // Use of "; ok" to suppress "warning[fwdref]"
1254+ 681E             >
1254+ 681E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1255+ 681E D9                           exx
1256+ 681F D1                           pop     de
1257+ 6820 E1                           pop     hl
1258+ 6821 7B                           ld      a, e
1259+ 6822 B5                           or      l
1260+ 6823 6F                           ld      l, a
1261+ 6824 7A                           ld      a, d
1262+ 6825 B4                           or      h
1263+ 6826 18 EF                        jr      Boolean_exit
1264+ 6828                        //    ld      h, a
1265+ 6828                        //    push    hl
1266+ 6828                        //    exx
1267+ 6828                        //    next
1268+ 6828
1269+ 6828              //  ______________________________________________________________________
1270+ 6828              //
1271+ 6828              // xor          n1 n2 -- n3
1272+ 6828              // bit logical OR. Returns n3 as n1 ^ n2
1273+ 6828                              New_Def XOR_OP, "XOR", is_code, is_normal
1273+ 6828             >
1273+ 6828             >Dict_Ptr        defl    $
1273+ 6828             >
1273+ 6828             >//              ______________________________________________________________________
1273+ 6828             >//              Heap part
1273+ 6828             >
1273+ 6828             >
1273+ 6828             >                org     (Heap_Ptr & $1FFF) + $E000
1273+ E228             >
1273+ E228             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1273+ E228             >Latest_Definition defl  Heap_Ptr
1273+ E228             >
1273+ E228             >                // dummy db directives used to calculate length of namec
1273+ E228 58 4F 52    >                db      "XOR"
1273+ E22B             >len_NFA         defl    $ - temp_NFA
1273+ E22B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1273+ E228             >
1273+ E228 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1273+ E229 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1273+ E22C             >                org     $-1                 // alter last byte of Name just above to set
1273+ E22B D2          >                db      {b $} | END_BIT     // msb as name end
1273+ E22C             >
1273+ E22C 21 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1273+ E22E             >Prev_Ptr        defl    Heap_Ptr
1273+ E22E             >
1273+ E22E             >mirror_Ptr      defl    $
1273+ E22E             >
1273+ E22E 2A 68       >                dw      Dict_Ptr + 2        // xt
1273+ E230             >Heap_Ptr        defl    $ - $E000           // save current HP
1273+ E230             >
1273+ E230             >Current_HP      defl  $ - $E000             // used to set HP once!
1273+ E230             >
1273+ E230             >//              ______________________________________________________________________
1273+ E230             >//              Dictionary part
1273+ E230             >
1273+ E230             >                org     Dict_Ptr
1273+ 6828             >
1273+ 6828 2E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1273+ 682A             >
1273+ 682A             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1273+ 682A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1273+ 682A ~           >
1273+ 682A ~           >
1273+ 682A             >                endif           ; ok        // for other definitions it "points" the correct handler
1273+ 682A             >                // Use of "; ok" to suppress "warning[fwdref]"
1273+ 682A             >
1273+ 682A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1274+ 682A D9                           exx
1275+ 682B D1                           pop     de
1276+ 682C E1                           pop     hl
1277+ 682D 7B                           ld      a, e
1278+ 682E AD                           xor     l
1279+ 682F 6F                           ld      l, a
1280+ 6830 7A                           ld      a, d
1281+ 6831 AC                           xor     h
1282+ 6832 18 E3                        jr      Boolean_exit
1283+ 6834                        //    ld      h, a
1284+ 6834                        //    push    hl
1285+ 6834                        //    exx
1286+ 6834                        //    next
1287+ 6834
1288+ 6834              //  ______________________________________________________________________
1289+ 6834              //
1290+ 6834              // sp@      -- a
1291+ 6834              // returns on top of stack the value of SP before execution
1292+ 6834                              New_Def SPFETCH, "SP@", is_code, is_normal
1292+ 6834             >
1292+ 6834             >Dict_Ptr        defl    $
1292+ 6834             >
1292+ 6834             >//              ______________________________________________________________________
1292+ 6834             >//              Heap part
1292+ 6834             >
1292+ 6834             >
1292+ 6834             >                org     (Heap_Ptr & $1FFF) + $E000
1292+ E230             >
1292+ E230             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1292+ E230             >Latest_Definition defl  Heap_Ptr
1292+ E230             >
1292+ E230             >                // dummy db directives used to calculate length of namec
1292+ E230 53 50 40    >                db      "SP@"
1292+ E233             >len_NFA         defl    $ - temp_NFA
1292+ E233             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1292+ E230             >
1292+ E230 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1292+ E231 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1292+ E234             >                org     $-1                 // alter last byte of Name just above to set
1292+ E233 C0          >                db      {b $} | END_BIT     // msb as name end
1292+ E234             >
1292+ E234 28 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1292+ E236             >Prev_Ptr        defl    Heap_Ptr
1292+ E236             >
1292+ E236             >mirror_Ptr      defl    $
1292+ E236             >
1292+ E236 36 68       >                dw      Dict_Ptr + 2        // xt
1292+ E238             >Heap_Ptr        defl    $ - $E000           // save current HP
1292+ E238             >
1292+ E238             >Current_HP      defl  $ - $E000             // used to set HP once!
1292+ E238             >
1292+ E238             >//              ______________________________________________________________________
1292+ E238             >//              Dictionary part
1292+ E238             >
1292+ E238             >                org     Dict_Ptr
1292+ 6834             >
1292+ 6834 36 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1292+ 6836             >
1292+ 6836             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1292+ 6836 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1292+ 6836 ~           >
1292+ 6836 ~           >
1292+ 6836             >                endif           ; ok        // for other definitions it "points" the correct handler
1292+ 6836             >                // Use of "; ok" to suppress "warning[fwdref]"
1292+ 6836             >
1292+ 6836             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1293+ 6836
1294+ 6836 21 00 00                     ld      hl, 0
1295+ 6839 39                           add     hl, sp
1296+ 683A
1297+ 683A                              psh1
1297+ 683A E5          >                push    hl
1297+ 683B DD E9       >                jp      (ix)
1298+ 683D
1299+ 683D              //  ______________________________________________________________________
1300+ 683D              //
1301+ 683D              // sp!      a --
1302+ 683D              // restore SP to the initial value passed
1303+ 683D              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1304+ 683D                              New_Def SPSTORE, "SP!", is_code, is_normal
1304+ 683D             >
1304+ 683D             >Dict_Ptr        defl    $
1304+ 683D             >
1304+ 683D             >//              ______________________________________________________________________
1304+ 683D             >//              Heap part
1304+ 683D             >
1304+ 683D             >
1304+ 683D             >                org     (Heap_Ptr & $1FFF) + $E000
1304+ E238             >
1304+ E238             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1304+ E238             >Latest_Definition defl  Heap_Ptr
1304+ E238             >
1304+ E238             >                // dummy db directives used to calculate length of namec
1304+ E238 53 50 21    >                db      "SP!"
1304+ E23B             >len_NFA         defl    $ - temp_NFA
1304+ E23B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1304+ E238             >
1304+ E238 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1304+ E239 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1304+ E23C             >                org     $-1                 // alter last byte of Name just above to set
1304+ E23B A1          >                db      {b $} | END_BIT     // msb as name end
1304+ E23C             >
1304+ E23C 30 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1304+ E23E             >Prev_Ptr        defl    Heap_Ptr
1304+ E23E             >
1304+ E23E             >mirror_Ptr      defl    $
1304+ E23E             >
1304+ E23E 3F 68       >                dw      Dict_Ptr + 2        // xt
1304+ E240             >Heap_Ptr        defl    $ - $E000           // save current HP
1304+ E240             >
1304+ E240             >Current_HP      defl  $ - $E000             // used to set HP once!
1304+ E240             >
1304+ E240             >//              ______________________________________________________________________
1304+ E240             >//              Dictionary part
1304+ E240             >
1304+ E240             >                org     Dict_Ptr
1304+ 683D             >
1304+ 683D 3E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1304+ 683F             >
1304+ 683F             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1304+ 683F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1304+ 683F ~           >
1304+ 683F ~           >
1304+ 683F             >                endif           ; ok        // for other definitions it "points" the correct handler
1304+ 683F             >                // Use of "; ok" to suppress "warning[fwdref]"
1304+ 683F             >
1304+ 683F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1305+ 683F E1                           pop     hl
1306+ 6840 F9                           ld      sp, hl
1307+ 6841
1308+ 6841                              next
1308+ 6841 DD E9       >                jp      (ix)
1309+ 6843
1310+ 6843              //  ______________________________________________________________________
1311+ 6843              //
1312+ 6843              // rp@      -- a
1313+ 6843              // returns on top of stack the value of Return-Pointer
1314+ 6843                              New_Def RPFETCH, "RP@", is_code, is_normal
1314+ 6843             >
1314+ 6843             >Dict_Ptr        defl    $
1314+ 6843             >
1314+ 6843             >//              ______________________________________________________________________
1314+ 6843             >//              Heap part
1314+ 6843             >
1314+ 6843             >
1314+ 6843             >                org     (Heap_Ptr & $1FFF) + $E000
1314+ E240             >
1314+ E240             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1314+ E240             >Latest_Definition defl  Heap_Ptr
1314+ E240             >
1314+ E240             >                // dummy db directives used to calculate length of namec
1314+ E240 52 50 40    >                db      "RP@"
1314+ E243             >len_NFA         defl    $ - temp_NFA
1314+ E243             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1314+ E240             >
1314+ E240 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1314+ E241 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1314+ E244             >                org     $-1                 // alter last byte of Name just above to set
1314+ E243 C0          >                db      {b $} | END_BIT     // msb as name end
1314+ E244             >
1314+ E244 38 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1314+ E246             >Prev_Ptr        defl    Heap_Ptr
1314+ E246             >
1314+ E246             >mirror_Ptr      defl    $
1314+ E246             >
1314+ E246 45 68       >                dw      Dict_Ptr + 2        // xt
1314+ E248             >Heap_Ptr        defl    $ - $E000           // save current HP
1314+ E248             >
1314+ E248             >Current_HP      defl  $ - $E000             // used to set HP once!
1314+ E248             >
1314+ E248             >//              ______________________________________________________________________
1314+ E248             >//              Dictionary part
1314+ E248             >
1314+ E248             >                org     Dict_Ptr
1314+ 6843             >
1314+ 6843 46 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1314+ 6845             >
1314+ 6845             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1314+ 6845 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1314+ 6845 ~           >
1314+ 6845 ~           >
1314+ 6845             >                endif           ; ok        // for other definitions it "points" the correct handler
1314+ 6845             >                // Use of "; ok" to suppress "warning[fwdref]"
1314+ 6845             >
1314+ 6845             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1315+ 6845
1316+ 6845                              // *** ldhlrp
1317+ 6845                              // *** ex      de, hl
1318+ 6845 D5                           push de
1319+ 6846
1320+ 6846                              next
1320+ 6846 DD E9       >                jp      (ix)
1321+ 6848
1322+ 6848              //  ______________________________________________________________________
1323+ 6848              //
1324+ 6848              // rp!      a --
1325+ 6848              // restore RP to the initial value passed
1326+ 6848              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1327+ 6848                              New_Def RPSTORE, "RP!", is_code, is_normal
1327+ 6848             >
1327+ 6848             >Dict_Ptr        defl    $
1327+ 6848             >
1327+ 6848             >//              ______________________________________________________________________
1327+ 6848             >//              Heap part
1327+ 6848             >
1327+ 6848             >
1327+ 6848             >                org     (Heap_Ptr & $1FFF) + $E000
1327+ E248             >
1327+ E248             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1327+ E248             >Latest_Definition defl  Heap_Ptr
1327+ E248             >
1327+ E248             >                // dummy db directives used to calculate length of namec
1327+ E248 52 50 21    >                db      "RP!"
1327+ E24B             >len_NFA         defl    $ - temp_NFA
1327+ E24B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1327+ E248             >
1327+ E248 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1327+ E249 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1327+ E24C             >                org     $-1                 // alter last byte of Name just above to set
1327+ E24B A1          >                db      {b $} | END_BIT     // msb as name end
1327+ E24C             >
1327+ E24C 40 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1327+ E24E             >Prev_Ptr        defl    Heap_Ptr
1327+ E24E             >
1327+ E24E             >mirror_Ptr      defl    $
1327+ E24E             >
1327+ E24E 4A 68       >                dw      Dict_Ptr + 2        // xt
1327+ E250             >Heap_Ptr        defl    $ - $E000           // save current HP
1327+ E250             >
1327+ E250             >Current_HP      defl  $ - $E000             // used to set HP once!
1327+ E250             >
1327+ E250             >//              ______________________________________________________________________
1327+ E250             >//              Dictionary part
1327+ E250             >
1327+ E250             >                org     Dict_Ptr
1327+ 6848             >
1327+ 6848 4E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1327+ 684A             >
1327+ 684A             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1327+ 684A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1327+ 684A ~           >
1327+ 684A ~           >
1327+ 684A             >                endif           ; ok        // for other definitions it "points" the correct handler
1327+ 684A             >                // Use of "; ok" to suppress "warning[fwdref]"
1327+ 684A             >
1327+ 684A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1328+ 684A D1                           pop     de
1329+ 684B                              // *** ex      de, hl
1330+ 684B                              // *** ldrphl
1331+ 684B
1332+ 684B                              next
1332+ 684B DD E9       >                jp      (ix)
1333+ 684D
1334+ 684D              //  ______________________________________________________________________
1335+ 684D              //
1336+ 684D              // exit       --
1337+ 684D              // exits back to the caller word
1338+ 684D                              New_Def EXIT, "EXIT", is_code, is_normal
1338+ 684D             >
1338+ 684D             >Dict_Ptr        defl    $
1338+ 684D             >
1338+ 684D             >//              ______________________________________________________________________
1338+ 684D             >//              Heap part
1338+ 684D             >
1338+ 684D             >
1338+ 684D             >                org     (Heap_Ptr & $1FFF) + $E000
1338+ E250             >
1338+ E250             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1338+ E250             >Latest_Definition defl  Heap_Ptr
1338+ E250             >
1338+ E250             >                // dummy db directives used to calculate length of namec
1338+ E250 45 58 49 54 >                db      "EXIT"
1338+ E254             >len_NFA         defl    $ - temp_NFA
1338+ E254             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1338+ E250             >
1338+ E250 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1338+ E251 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1338+ E255             >                org     $-1                 // alter last byte of Name just above to set
1338+ E254 D4          >                db      {b $} | END_BIT     // msb as name end
1338+ E255             >
1338+ E255 48 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1338+ E257             >Prev_Ptr        defl    Heap_Ptr
1338+ E257             >
1338+ E257             >mirror_Ptr      defl    $
1338+ E257             >
1338+ E257 4F 68       >                dw      Dict_Ptr + 2        // xt
1338+ E259             >Heap_Ptr        defl    $ - $E000           // save current HP
1338+ E259             >
1338+ E259             >Current_HP      defl  $ - $E000             // used to set HP once!
1338+ E259             >
1338+ E259             >//              ______________________________________________________________________
1338+ E259             >//              Dictionary part
1338+ E259             >
1338+ E259             >                org     Dict_Ptr
1338+ 684D             >
1338+ 684D 57 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1338+ 684F             >
1338+ 684F             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1338+ 684F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1338+ 684F ~           >
1338+ 684F ~           >
1338+ 684F             >                endif           ; ok        // for other definitions it "points" the correct handler
1338+ 684F             >                // Use of "; ok" to suppress "warning[fwdref]"
1338+ 684F             >
1338+ 684F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1339+ 684F EB                           ex      de, hl
1340+ 6850                              // *** ldhlrp                      // Get Return Stack Pointer
1341+ 6850 4E                           ld      c, (hl)             // pop Instruction Pointer
1342+ 6851 23                           inc     hl                  // from Return Stack
1343+ 6852 46                           ld      b, (hl)
1344+ 6853 23                           inc     hl
1345+ 6854                              // *** ldrphl                      // Set Return Stack Pointer
1346+ 6854 EB                           ex      de, hl
1347+ 6855                              next
1347+ 6855 DD E9       >                jp      (ix)
1348+ 6857
1349+ 6857              //  ______________________________________________________________________
1350+ 6857              //
1351+ 6857              // lastl      --
1352+ 6857              // exits back to the caller word
1353+ 6857              //              New_Def EXIT, "LASTL", is_code, is_normal
1354+ 6857              //              push    de
1355+ 6857              //              ex      de, hl //**
1356+ 6857              //              // *** ldhlrp                      // Get Return Stack Pointer
1357+ 6857              //              ld      e, (hl)             // pop Instruction Pointer
1358+ 6857              //              inc     hl                  // from Return Stack
1359+ 6857              //              ld      d, (hl)
1360+ 6857              //              inc     hl
1361+ 6857              //              ld      (hl), e
1362+ 6857              //              inc     hl
1363+ 6857              //              ld      (hl), d
1364+ 6857              //              add     hl, -3
1365+ 6857              //              pop     de
1366+ 6857              //              next
1367+ 6857
1368+ 6857              //  ______________________________________________________________________
1369+ 6857              //
1370+ 6857              // >r      n --
1371+ 6857              // pop from calculator-stack and push into return-stack
1372+ 6857                              New_Def TO_R, ">R", is_code, is_normal
1372+ 6857             >
1372+ 6857             >Dict_Ptr        defl    $
1372+ 6857             >
1372+ 6857             >//              ______________________________________________________________________
1372+ 6857             >//              Heap part
1372+ 6857             >
1372+ 6857             >
1372+ 6857             >                org     (Heap_Ptr & $1FFF) + $E000
1372+ E259             >
1372+ E259             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1372+ E259             >Latest_Definition defl  Heap_Ptr
1372+ E259             >
1372+ E259             >                // dummy db directives used to calculate length of namec
1372+ E259 3E 52       >                db      ">R"
1372+ E25B             >len_NFA         defl    $ - temp_NFA
1372+ E25B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1372+ E259             >
1372+ E259 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1372+ E25A 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1372+ E25C             >                org     $-1                 // alter last byte of Name just above to set
1372+ E25B D2          >                db      {b $} | END_BIT     // msb as name end
1372+ E25C             >
1372+ E25C 50 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1372+ E25E             >Prev_Ptr        defl    Heap_Ptr
1372+ E25E             >
1372+ E25E             >mirror_Ptr      defl    $
1372+ E25E             >
1372+ E25E 59 68       >                dw      Dict_Ptr + 2        // xt
1372+ E260             >Heap_Ptr        defl    $ - $E000           // save current HP
1372+ E260             >
1372+ E260             >Current_HP      defl  $ - $E000             // used to set HP once!
1372+ E260             >
1372+ E260             >//              ______________________________________________________________________
1372+ E260             >//              Dictionary part
1372+ E260             >
1372+ E260             >                org     Dict_Ptr
1372+ 6857             >
1372+ 6857 5E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1372+ 6859             >
1372+ 6859             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1372+ 6859 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1372+ 6859 ~           >
1372+ 6859 ~           >
1372+ 6859             >                endif           ; ok        // for other definitions it "points" the correct handler
1372+ 6859             >                // Use of "; ok" to suppress "warning[fwdref]"
1372+ 6859             >
1372+ 6859             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1373+ 6859 E1                           pop     hl
1374+ 685A EB                           ex      de, hl //**
1375+ 685B                              // *** ldhlrp
1376+ 685B 2B                           dec     hl
1377+ 685C 72                           ld      (hl), d             // store current TOS
1378+ 685D 2B                           dec     hl                  // to Return Stack
1379+ 685E 73                           ld      (hl), e
1380+ 685F                              // *** ldrphl
1381+ 685F EB                           ex      de, hl //**
1382+ 6860                              next
1382+ 6860 DD E9       >                jp      (ix)
1383+ 6862
1384+ 6862              //  ______________________________________________________________________
1385+ 6862              //
1386+ 6862              // r>      -- n
1387+ 6862              // pop from return-stack and push into calculator-stack
1388+ 6862                              New_Def R_TO, "R>", is_code, is_normal
1388+ 6862             >
1388+ 6862             >Dict_Ptr        defl    $
1388+ 6862             >
1388+ 6862             >//              ______________________________________________________________________
1388+ 6862             >//              Heap part
1388+ 6862             >
1388+ 6862             >
1388+ 6862             >                org     (Heap_Ptr & $1FFF) + $E000
1388+ E260             >
1388+ E260             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1388+ E260             >Latest_Definition defl  Heap_Ptr
1388+ E260             >
1388+ E260             >                // dummy db directives used to calculate length of namec
1388+ E260 52 3E       >                db      "R>"
1388+ E262             >len_NFA         defl    $ - temp_NFA
1388+ E262             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1388+ E260             >
1388+ E260 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1388+ E261 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1388+ E263             >                org     $-1                 // alter last byte of Name just above to set
1388+ E262 BE          >                db      {b $} | END_BIT     // msb as name end
1388+ E263             >
1388+ E263 59 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1388+ E265             >Prev_Ptr        defl    Heap_Ptr
1388+ E265             >
1388+ E265             >mirror_Ptr      defl    $
1388+ E265             >
1388+ E265 64 68       >                dw      Dict_Ptr + 2        // xt
1388+ E267             >Heap_Ptr        defl    $ - $E000           // save current HP
1388+ E267             >
1388+ E267             >Current_HP      defl  $ - $E000             // used to set HP once!
1388+ E267             >
1388+ E267             >//              ______________________________________________________________________
1388+ E267             >//              Dictionary part
1388+ E267             >
1388+ E267             >                org     Dict_Ptr
1388+ 6862             >
1388+ 6862 65 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1388+ 6864             >
1388+ 6864             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1388+ 6864 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1388+ 6864 ~           >
1388+ 6864 ~           >
1388+ 6864             >                endif           ; ok        // for other definitions it "points" the correct handler
1388+ 6864             >                // Use of "; ok" to suppress "warning[fwdref]"
1388+ 6864             >
1388+ 6864             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1389+ 6864
1390+ 6864 EB                           ex      de, hl //**
1391+ 6865                              // *** ldhlrp
1392+ 6865 5E                           ld      e, (hl)             // retrieve from Return Stack
1393+ 6866 23                           inc     hl
1394+ 6867 56                           ld      d, (hl)
1395+ 6868 23                           inc     hl
1396+ 6869                              // *** ldrphl
1397+ 6869 EB                           ex      de, hl //**
1398+ 686A E5                           push    hl
1399+ 686B                              next
1399+ 686B DD E9       >                jp      (ix)
1400+ 686D
1401+ 686D              //  ______________________________________________________________________
1402+ 686D              //
1403+ 686D              // r@           -- n
1404+ 686D              // return on top of stack the value of top of return-stack
1405+ 686D              // Since this is the same as I, we alter R's CFA to jump there
1406+ 686D                              New_Def R_OP, "R@", is_code, is_normal
1406+ 686D             >
1406+ 686D             >Dict_Ptr        defl    $
1406+ 686D             >
1406+ 686D             >//              ______________________________________________________________________
1406+ 686D             >//              Heap part
1406+ 686D             >
1406+ 686D             >
1406+ 686D             >                org     (Heap_Ptr & $1FFF) + $E000
1406+ E267             >
1406+ E267             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1406+ E267             >Latest_Definition defl  Heap_Ptr
1406+ E267             >
1406+ E267             >                // dummy db directives used to calculate length of namec
1406+ E267 52 40       >                db      "R@"
1406+ E269             >len_NFA         defl    $ - temp_NFA
1406+ E269             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1406+ E267             >
1406+ E267 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1406+ E268 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1406+ E26A             >                org     $-1                 // alter last byte of Name just above to set
1406+ E269 C0          >                db      {b $} | END_BIT     // msb as name end
1406+ E26A             >
1406+ E26A 60 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1406+ E26C             >Prev_Ptr        defl    Heap_Ptr
1406+ E26C             >
1406+ E26C             >mirror_Ptr      defl    $
1406+ E26C             >
1406+ E26C 6F 68       >                dw      Dict_Ptr + 2        // xt
1406+ E26E             >Heap_Ptr        defl    $ - $E000           // save current HP
1406+ E26E             >
1406+ E26E             >Current_HP      defl  $ - $E000             // used to set HP once!
1406+ E26E             >
1406+ E26E             >//              ______________________________________________________________________
1406+ E26E             >//              Dictionary part
1406+ E26E             >
1406+ E26E             >                org     Dict_Ptr
1406+ 686D             >
1406+ 686D 6C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1406+ 686F             >
1406+ 686F             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1406+ 686F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1406+ 686F ~           >
1406+ 686F ~           >
1406+ 686F             >                endif           ; ok        // for other definitions it "points" the correct handler
1406+ 686F             >                // Use of "; ok" to suppress "warning[fwdref]"
1406+ 686F             >
1406+ 686F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1407+ 686F                          //  Behave  I_Ptr
1408+ 686F C3 38 64                     jp      I_Ptr
1409+ 6872
1410+ 6872              //  ______________________________________________________________________
1411+ 6872              //
1412+ 6872              // r            -- n
1413+ 6872              // return on top of stack the value of top of return-stack
1414+ 6872              // Since this is the same as I, we alter R's CFA to jump there
1415+ 6872              //              New_Def R_OLD, "R", is_code, is_normal
1416+ 6872              //              jp      I_Ptr
1417+ 6872
1418+ 6872              //  ______________________________________________________________________
1419+ 6872              //
1420+ 6872              // 0=           n -- f
1421+ 6872              // true (non zero) if n is zero, false (0) elsewere
1422+ 6872                              New_Def ZEQUAL, "0=", is_code, is_normal
1422+ 6872             >
1422+ 6872             >Dict_Ptr        defl    $
1422+ 6872             >
1422+ 6872             >//              ______________________________________________________________________
1422+ 6872             >//              Heap part
1422+ 6872             >
1422+ 6872             >
1422+ 6872             >                org     (Heap_Ptr & $1FFF) + $E000
1422+ E26E             >
1422+ E26E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1422+ E26E             >Latest_Definition defl  Heap_Ptr
1422+ E26E             >
1422+ E26E             >                // dummy db directives used to calculate length of namec
1422+ E26E 30 3D       >                db      "0="
1422+ E270             >len_NFA         defl    $ - temp_NFA
1422+ E270             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1422+ E26E             >
1422+ E26E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1422+ E26F 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1422+ E271             >                org     $-1                 // alter last byte of Name just above to set
1422+ E270 BD          >                db      {b $} | END_BIT     // msb as name end
1422+ E271             >
1422+ E271 67 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1422+ E273             >Prev_Ptr        defl    Heap_Ptr
1422+ E273             >
1422+ E273             >mirror_Ptr      defl    $
1422+ E273             >
1422+ E273 74 68       >                dw      Dict_Ptr + 2        // xt
1422+ E275             >Heap_Ptr        defl    $ - $E000           // save current HP
1422+ E275             >
1422+ E275             >Current_HP      defl  $ - $E000             // used to set HP once!
1422+ E275             >
1422+ E275             >//              ______________________________________________________________________
1422+ E275             >//              Dictionary part
1422+ E275             >
1422+ E275             >                org     Dict_Ptr
1422+ 6872             >
1422+ 6872 73 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1422+ 6874             >
1422+ 6874             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1422+ 6874 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1422+ 6874 ~           >
1422+ 6874 ~           >
1422+ 6874             >                endif           ; ok        // for other definitions it "points" the correct handler
1422+ 6874             >                // Use of "; ok" to suppress "warning[fwdref]"
1422+ 6874             >
1422+ 6874             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1423+ 6874              Zero_Equal:
1424+ 6874 E1                           pop     hl
1425+ 6875 7D                           ld      a, l
1426+ 6876 B4                           or      h
1427+ 6877 21 00 00                     ld      hl, FALSE_FLAG
1428+ 687A 20 01                        jr      nz, ZEqual_Skip
1429+ 687C 2B                               dec     hl
1430+ 687D              ZEqual_Skip:
1431+ 687D                              psh1
1431+ 687D E5          >                push    hl
1431+ 687E DD E9       >                jp      (ix)
1432+ 6880
1433+ 6880              //  ______________________________________________________________________
1434+ 6880              //
1435+ 6880              // not         a1 -- a2
1436+ 6880              // increment by 2 top of stack
1437+ 6880                              New_Def NOT_OP, "NOT", is_code, is_normal
1437+ 6880             >
1437+ 6880             >Dict_Ptr        defl    $
1437+ 6880             >
1437+ 6880             >//              ______________________________________________________________________
1437+ 6880             >//              Heap part
1437+ 6880             >
1437+ 6880             >
1437+ 6880             >                org     (Heap_Ptr & $1FFF) + $E000
1437+ E275             >
1437+ E275             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1437+ E275             >Latest_Definition defl  Heap_Ptr
1437+ E275             >
1437+ E275             >                // dummy db directives used to calculate length of namec
1437+ E275 4E 4F 54    >                db      "NOT"
1437+ E278             >len_NFA         defl    $ - temp_NFA
1437+ E278             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1437+ E275             >
1437+ E275 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1437+ E276 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1437+ E279             >                org     $-1                 // alter last byte of Name just above to set
1437+ E278 D4          >                db      {b $} | END_BIT     // msb as name end
1437+ E279             >
1437+ E279 6E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1437+ E27B             >Prev_Ptr        defl    Heap_Ptr
1437+ E27B             >
1437+ E27B             >mirror_Ptr      defl    $
1437+ E27B             >
1437+ E27B 82 68       >                dw      Dict_Ptr + 2        // xt
1437+ E27D             >Heap_Ptr        defl    $ - $E000           // save current HP
1437+ E27D             >
1437+ E27D             >Current_HP      defl  $ - $E000             // used to set HP once!
1437+ E27D             >
1437+ E27D             >//              ______________________________________________________________________
1437+ E27D             >//              Dictionary part
1437+ E27D             >
1437+ E27D             >                org     Dict_Ptr
1437+ 6880             >
1437+ 6880 7B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1437+ 6882             >
1437+ 6882             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1437+ 6882 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1437+ 6882 ~           >
1437+ 6882 ~           >
1437+ 6882             >                endif           ; ok        // for other definitions it "points" the correct handler
1437+ 6882             >                // Use of "; ok" to suppress "warning[fwdref]"
1437+ 6882             >
1437+ 6882             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1438+ 6882                          //  Behave  Zero_Equal
1439+ 6882 18 F0                        jr      Zero_Equal
1440+ 6884
1441+ 6884              //  ______________________________________________________________________
1442+ 6884              //
1443+ 6884              // 0<           n -- f
1444+ 6884              // true (non zero) if n is less than zero, false (0) elsewere
1445+ 6884                              New_Def ZLESS, "0<", is_code, is_normal
1445+ 6884             >
1445+ 6884             >Dict_Ptr        defl    $
1445+ 6884             >
1445+ 6884             >//              ______________________________________________________________________
1445+ 6884             >//              Heap part
1445+ 6884             >
1445+ 6884             >
1445+ 6884             >                org     (Heap_Ptr & $1FFF) + $E000
1445+ E27D             >
1445+ E27D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1445+ E27D             >Latest_Definition defl  Heap_Ptr
1445+ E27D             >
1445+ E27D             >                // dummy db directives used to calculate length of namec
1445+ E27D 30 3C       >                db      "0<"
1445+ E27F             >len_NFA         defl    $ - temp_NFA
1445+ E27F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1445+ E27D             >
1445+ E27D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1445+ E27E 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1445+ E280             >                org     $-1                 // alter last byte of Name just above to set
1445+ E27F BC          >                db      {b $} | END_BIT     // msb as name end
1445+ E280             >
1445+ E280 75 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1445+ E282             >Prev_Ptr        defl    Heap_Ptr
1445+ E282             >
1445+ E282             >mirror_Ptr      defl    $
1445+ E282             >
1445+ E282 86 68       >                dw      Dict_Ptr + 2        // xt
1445+ E284             >Heap_Ptr        defl    $ - $E000           // save current HP
1445+ E284             >
1445+ E284             >Current_HP      defl  $ - $E000             // used to set HP once!
1445+ E284             >
1445+ E284             >//              ______________________________________________________________________
1445+ E284             >//              Dictionary part
1445+ E284             >
1445+ E284             >                org     Dict_Ptr
1445+ 6884             >
1445+ 6884 82 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1445+ 6886             >
1445+ 6886             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1445+ 6886 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1445+ 6886 ~           >
1445+ 6886 ~           >
1445+ 6886             >                endif           ; ok        // for other definitions it "points" the correct handler
1445+ 6886             >                // Use of "; ok" to suppress "warning[fwdref]"
1445+ 6886             >
1445+ 6886             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1446+ 6886 E1                           pop     hl
1447+ 6887 29                           add     hl, hl
1448+ 6888 ED 62                        sbc     hl, hl
1449+ 688A                              psh1
1449+ 688A E5          >                push    hl
1449+ 688B DD E9       >                jp      (ix)
1450+ 688D
1451+ 688D              //  ______________________________________________________________________
1452+ 688D              //
1453+ 688D              // 0>           n -- f
1454+ 688D              // true (non zero) if n is less than zero, false (0) elsewere
1455+ 688D                              New_Def ZGREATER, "0>", is_code, is_normal
1455+ 688D             >
1455+ 688D             >Dict_Ptr        defl    $
1455+ 688D             >
1455+ 688D             >//              ______________________________________________________________________
1455+ 688D             >//              Heap part
1455+ 688D             >
1455+ 688D             >
1455+ 688D             >                org     (Heap_Ptr & $1FFF) + $E000
1455+ E284             >
1455+ E284             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1455+ E284             >Latest_Definition defl  Heap_Ptr
1455+ E284             >
1455+ E284             >                // dummy db directives used to calculate length of namec
1455+ E284 30 3E       >                db      "0>"
1455+ E286             >len_NFA         defl    $ - temp_NFA
1455+ E286             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1455+ E284             >
1455+ E284 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1455+ E285 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1455+ E287             >                org     $-1                 // alter last byte of Name just above to set
1455+ E286 BE          >                db      {b $} | END_BIT     // msb as name end
1455+ E287             >
1455+ E287 7D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1455+ E289             >Prev_Ptr        defl    Heap_Ptr
1455+ E289             >
1455+ E289             >mirror_Ptr      defl    $
1455+ E289             >
1455+ E289 8F 68       >                dw      Dict_Ptr + 2        // xt
1455+ E28B             >Heap_Ptr        defl    $ - $E000           // save current HP
1455+ E28B             >
1455+ E28B             >Current_HP      defl  $ - $E000             // used to set HP once!
1455+ E28B             >
1455+ E28B             >//              ______________________________________________________________________
1455+ E28B             >//              Dictionary part
1455+ E28B             >
1455+ E28B             >                org     Dict_Ptr
1455+ 688D             >
1455+ 688D 89 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1455+ 688F             >
1455+ 688F             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1455+ 688F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1455+ 688F ~           >
1455+ 688F ~           >
1455+ 688F             >                endif           ; ok        // for other definitions it "points" the correct handler
1455+ 688F             >                // Use of "; ok" to suppress "warning[fwdref]"
1455+ 688F             >
1455+ 688F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1456+ 688F E1                           pop     hl
1457+ 6890 7D                           ld      a, l
1458+ 6891 B4                           or      h
1459+ 6892 29                           add     hl, hl
1460+ 6893 21 00 00                     ld      hl, FALSE_FLAG
1461+ 6896 38 04                        jr      c, ZGreater_Skip
1462+ 6898 A7                               and     a
1463+ 6899 28 01                            jr      z, ZGreater_Skip
1464+ 689B 2B                                   dec     hl
1465+ 689C              ZGreater_Skip:
1466+ 689C                              psh1
1466+ 689C E5          >                push    hl
1466+ 689D DD E9       >                jp      (ix)
1467+ 689F
1468+ 689F              //  ______________________________________________________________________
1469+ 689F              //
1470+ 689F              // +            n1 n2 -- n3
1471+ 689F              // returns the unsigned sum of two top values
1472+ 689F                              New_Def PLUS, "+", is_code, is_normal
1472+ 689F             >
1472+ 689F             >Dict_Ptr        defl    $
1472+ 689F             >
1472+ 689F             >//              ______________________________________________________________________
1472+ 689F             >//              Heap part
1472+ 689F             >
1472+ 689F             >
1472+ 689F             >                org     (Heap_Ptr & $1FFF) + $E000
1472+ E28B             >
1472+ E28B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1472+ E28B             >Latest_Definition defl  Heap_Ptr
1472+ E28B             >
1472+ E28B             >                // dummy db directives used to calculate length of namec
1472+ E28B 2B          >                db      "+"
1472+ E28C             >len_NFA         defl    $ - temp_NFA
1472+ E28C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1472+ E28B             >
1472+ E28B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1472+ E28C 2B          >                db      "+"               // name string in 7-bit ascii, but
1472+ E28D             >                org     $-1                 // alter last byte of Name just above to set
1472+ E28C AB          >                db      {b $} | END_BIT     // msb as name end
1472+ E28D             >
1472+ E28D 84 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1472+ E28F             >Prev_Ptr        defl    Heap_Ptr
1472+ E28F             >
1472+ E28F             >mirror_Ptr      defl    $
1472+ E28F             >
1472+ E28F A1 68       >                dw      Dict_Ptr + 2        // xt
1472+ E291             >Heap_Ptr        defl    $ - $E000           // save current HP
1472+ E291             >
1472+ E291             >Current_HP      defl  $ - $E000             // used to set HP once!
1472+ E291             >
1472+ E291             >//              ______________________________________________________________________
1472+ E291             >//              Dictionary part
1472+ E291             >
1472+ E291             >                org     Dict_Ptr
1472+ 689F             >
1472+ 689F 8F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1472+ 68A1             >
1472+ 68A1             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1472+ 68A1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1472+ 68A1 ~           >
1472+ 68A1 ~           >
1472+ 68A1             >                endif           ; ok        // for other definitions it "points" the correct handler
1472+ 68A1             >                // Use of "; ok" to suppress "warning[fwdref]"
1472+ 68A1             >
1472+ 68A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1473+ 68A1 D9                           exx
1474+ 68A2 E1                           pop     hl
1475+ 68A3 D1                           pop     de
1476+ 68A4 19                           add     hl, de
1477+ 68A5 E5                           push    hl
1478+ 68A6 D9                           exx
1479+ 68A7                              next
1479+ 68A7 DD E9       >                jp      (ix)
1480+ 68A9
1481+ 68A9
1482+ 68A9              //  ______________________________________________________________________
1483+ 68A9              //
1484+ 68A9              // d+           d1 d2 -- d3
1485+ 68A9              // returns the unsigned sum of two top double-numbers
1486+ 68A9              //      d2  d1
1487+ 68A9              //      h l h l
1488+ 68A9              // SP   LHEDLHED
1489+ 68A9              // SP  +01234567
1490+ 68A9                              New_Def DPLUS, "D+", is_code, is_normal
1490+ 68A9             >
1490+ 68A9             >Dict_Ptr        defl    $
1490+ 68A9             >
1490+ 68A9             >//              ______________________________________________________________________
1490+ 68A9             >//              Heap part
1490+ 68A9             >
1490+ 68A9             >
1490+ 68A9             >                org     (Heap_Ptr & $1FFF) + $E000
1490+ E291             >
1490+ E291             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1490+ E291             >Latest_Definition defl  Heap_Ptr
1490+ E291             >
1490+ E291             >                // dummy db directives used to calculate length of namec
1490+ E291 44 2B       >                db      "D+"
1490+ E293             >len_NFA         defl    $ - temp_NFA
1490+ E293             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1490+ E291             >
1490+ E291 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1490+ E292 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1490+ E294             >                org     $-1                 // alter last byte of Name just above to set
1490+ E293 AB          >                db      {b $} | END_BIT     // msb as name end
1490+ E294             >
1490+ E294 8B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1490+ E296             >Prev_Ptr        defl    Heap_Ptr
1490+ E296             >
1490+ E296             >mirror_Ptr      defl    $
1490+ E296             >
1490+ E296 AB 68       >                dw      Dict_Ptr + 2        // xt
1490+ E298             >Heap_Ptr        defl    $ - $E000           // save current HP
1490+ E298             >
1490+ E298             >Current_HP      defl  $ - $E000             // used to set HP once!
1490+ E298             >
1490+ E298             >//              ______________________________________________________________________
1490+ E298             >//              Dictionary part
1490+ E298             >
1490+ E298             >                org     Dict_Ptr
1490+ 68A9             >
1490+ 68A9 96 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1490+ 68AB             >
1490+ 68AB             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1490+ 68AB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1490+ 68AB ~           >
1490+ 68AB ~           >
1490+ 68AB             >                endif           ; ok        // for other definitions it "points" the correct handler
1490+ 68AB             >                // Use of "; ok" to suppress "warning[fwdref]"
1490+ 68AB             >
1490+ 68AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1491+ 68AB
1492+ 68AB D9                           exx
1493+ 68AC C1                           pop     bc                  // bc := d2.H
1494+ 68AD D1                           pop     de                  // hl := d2.L
1495+ 68AE E1                           pop     hl                  // d1.H
1496+ 68AF E3                           ex      (sp), hl            // d1.L
1497+ 68B0 19                           add     hl, de              // hl := d2.L + d1.L
1498+ 68B1 E3                           ex      (sp), hl            // d1.H
1499+ 68B2 ED 4A                        adc     hl, bc              // d1.H + d2.H
1500+ 68B4 E5                           push    hl
1501+ 68B5 D9                           exx
1502+ 68B6                              next
1502+ 68B6 DD E9       >                jp      (ix)
1503+ 68B8
1504+ 68B8              //  ______________________________________________________________________
1505+ 68B8              //
1506+ 68B8              // 1+           n1 -- n2
1507+ 68B8              // increment by 1 top of stack
1508+ 68B8                              New_Def ONE_PLUS, "1+", is_code, is_normal
1508+ 68B8             >
1508+ 68B8             >Dict_Ptr        defl    $
1508+ 68B8             >
1508+ 68B8             >//              ______________________________________________________________________
1508+ 68B8             >//              Heap part
1508+ 68B8             >
1508+ 68B8             >
1508+ 68B8             >                org     (Heap_Ptr & $1FFF) + $E000
1508+ E298             >
1508+ E298             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1508+ E298             >Latest_Definition defl  Heap_Ptr
1508+ E298             >
1508+ E298             >                // dummy db directives used to calculate length of namec
1508+ E298 31 2B       >                db      "1+"
1508+ E29A             >len_NFA         defl    $ - temp_NFA
1508+ E29A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1508+ E298             >
1508+ E298 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1508+ E299 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1508+ E29B             >                org     $-1                 // alter last byte of Name just above to set
1508+ E29A AB          >                db      {b $} | END_BIT     // msb as name end
1508+ E29B             >
1508+ E29B 91 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1508+ E29D             >Prev_Ptr        defl    Heap_Ptr
1508+ E29D             >
1508+ E29D             >mirror_Ptr      defl    $
1508+ E29D             >
1508+ E29D BA 68       >                dw      Dict_Ptr + 2        // xt
1508+ E29F             >Heap_Ptr        defl    $ - $E000           // save current HP
1508+ E29F             >
1508+ E29F             >Current_HP      defl  $ - $E000             // used to set HP once!
1508+ E29F             >
1508+ E29F             >//              ______________________________________________________________________
1508+ E29F             >//              Dictionary part
1508+ E29F             >
1508+ E29F             >                org     Dict_Ptr
1508+ 68B8             >
1508+ 68B8 9D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1508+ 68BA             >
1508+ 68BA             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1508+ 68BA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1508+ 68BA ~           >
1508+ 68BA ~           >
1508+ 68BA             >                endif           ; ok        // for other definitions it "points" the correct handler
1508+ 68BA             >                // Use of "; ok" to suppress "warning[fwdref]"
1508+ 68BA             >
1508+ 68BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1509+ 68BA E1                           pop     hl
1510+ 68BB 23                           inc     hl
1511+ 68BC
1512+ 68BC                              psh1
1512+ 68BC E5          >                push    hl
1512+ 68BD DD E9       >                jp      (ix)
1513+ 68BF
1514+ 68BF              //  ______________________________________________________________________
1515+ 68BF              //
1516+ 68BF              // 1-           n1 -- n2
1517+ 68BF              // decrement by 1 top of stack
1518+ 68BF                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1518+ 68BF             >
1518+ 68BF             >Dict_Ptr        defl    $
1518+ 68BF             >
1518+ 68BF             >//              ______________________________________________________________________
1518+ 68BF             >//              Heap part
1518+ 68BF             >
1518+ 68BF             >
1518+ 68BF             >                org     (Heap_Ptr & $1FFF) + $E000
1518+ E29F             >
1518+ E29F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1518+ E29F             >Latest_Definition defl  Heap_Ptr
1518+ E29F             >
1518+ E29F             >                // dummy db directives used to calculate length of namec
1518+ E29F 31 2D       >                db      "1-"
1518+ E2A1             >len_NFA         defl    $ - temp_NFA
1518+ E2A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1518+ E29F             >
1518+ E29F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1518+ E2A0 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1518+ E2A2             >                org     $-1                 // alter last byte of Name just above to set
1518+ E2A1 AD          >                db      {b $} | END_BIT     // msb as name end
1518+ E2A2             >
1518+ E2A2 98 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1518+ E2A4             >Prev_Ptr        defl    Heap_Ptr
1518+ E2A4             >
1518+ E2A4             >mirror_Ptr      defl    $
1518+ E2A4             >
1518+ E2A4 C1 68       >                dw      Dict_Ptr + 2        // xt
1518+ E2A6             >Heap_Ptr        defl    $ - $E000           // save current HP
1518+ E2A6             >
1518+ E2A6             >Current_HP      defl  $ - $E000             // used to set HP once!
1518+ E2A6             >
1518+ E2A6             >//              ______________________________________________________________________
1518+ E2A6             >//              Dictionary part
1518+ E2A6             >
1518+ E2A6             >                org     Dict_Ptr
1518+ 68BF             >
1518+ 68BF A4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1518+ 68C1             >
1518+ 68C1             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1518+ 68C1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1518+ 68C1 ~           >
1518+ 68C1 ~           >
1518+ 68C1             >                endif           ; ok        // for other definitions it "points" the correct handler
1518+ 68C1             >                // Use of "; ok" to suppress "warning[fwdref]"
1518+ 68C1             >
1518+ 68C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1519+ 68C1 E1                           pop     hl
1520+ 68C2 2B                           dec     hl
1521+ 68C3
1522+ 68C3                              psh1
1522+ 68C3 E5          >                push    hl
1522+ 68C4 DD E9       >                jp      (ix)
1523+ 68C6
1524+ 68C6              //  ______________________________________________________________________
1525+ 68C6              //
1526+ 68C6              // 2+           n1 -- n2
1527+ 68C6              // increment by 2 top of stack
1528+ 68C6                              New_Def TWO_PLUS, "2+", is_code, is_normal
1528+ 68C6             >
1528+ 68C6             >Dict_Ptr        defl    $
1528+ 68C6             >
1528+ 68C6             >//              ______________________________________________________________________
1528+ 68C6             >//              Heap part
1528+ 68C6             >
1528+ 68C6             >
1528+ 68C6             >                org     (Heap_Ptr & $1FFF) + $E000
1528+ E2A6             >
1528+ E2A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1528+ E2A6             >Latest_Definition defl  Heap_Ptr
1528+ E2A6             >
1528+ E2A6             >                // dummy db directives used to calculate length of namec
1528+ E2A6 32 2B       >                db      "2+"
1528+ E2A8             >len_NFA         defl    $ - temp_NFA
1528+ E2A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1528+ E2A6             >
1528+ E2A6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1528+ E2A7 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1528+ E2A9             >                org     $-1                 // alter last byte of Name just above to set
1528+ E2A8 AB          >                db      {b $} | END_BIT     // msb as name end
1528+ E2A9             >
1528+ E2A9 9F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1528+ E2AB             >Prev_Ptr        defl    Heap_Ptr
1528+ E2AB             >
1528+ E2AB             >mirror_Ptr      defl    $
1528+ E2AB             >
1528+ E2AB C8 68       >                dw      Dict_Ptr + 2        // xt
1528+ E2AD             >Heap_Ptr        defl    $ - $E000           // save current HP
1528+ E2AD             >
1528+ E2AD             >Current_HP      defl  $ - $E000             // used to set HP once!
1528+ E2AD             >
1528+ E2AD             >//              ______________________________________________________________________
1528+ E2AD             >//              Dictionary part
1528+ E2AD             >
1528+ E2AD             >                org     Dict_Ptr
1528+ 68C6             >
1528+ 68C6 AB 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1528+ 68C8             >
1528+ 68C8             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1528+ 68C8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1528+ 68C8 ~           >
1528+ 68C8 ~           >
1528+ 68C8             >                endif           ; ok        // for other definitions it "points" the correct handler
1528+ 68C8             >                // Use of "; ok" to suppress "warning[fwdref]"
1528+ 68C8             >
1528+ 68C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1529+ 68C8              Two_Plus:
1530+ 68C8 E1                           pop     hl
1531+ 68C9 23                           inc     hl
1532+ 68CA 23                           inc     hl
1533+ 68CB
1534+ 68CB                              psh1
1534+ 68CB E5          >                push    hl
1534+ 68CC DD E9       >                jp      (ix)
1535+ 68CE
1536+ 68CE              //  ______________________________________________________________________
1537+ 68CE              //
1538+ 68CE              // cell+        a1 -- a2
1539+ 68CE              // increment by 2 top of stack
1540+ 68CE                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1540+ 68CE             >
1540+ 68CE             >Dict_Ptr        defl    $
1540+ 68CE             >
1540+ 68CE             >//              ______________________________________________________________________
1540+ 68CE             >//              Heap part
1540+ 68CE             >
1540+ 68CE             >
1540+ 68CE             >                org     (Heap_Ptr & $1FFF) + $E000
1540+ E2AD             >
1540+ E2AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1540+ E2AD             >Latest_Definition defl  Heap_Ptr
1540+ E2AD             >
1540+ E2AD             >                // dummy db directives used to calculate length of namec
1540+ E2AD 43 45 4C 4C >                db      "CELL+"
1540+ E2B1 2B          >
1540+ E2B2             >len_NFA         defl    $ - temp_NFA
1540+ E2B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1540+ E2AD             >
1540+ E2AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1540+ E2AE 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1540+ E2B2 2B          >
1540+ E2B3             >                org     $-1                 // alter last byte of Name just above to set
1540+ E2B2 AB          >                db      {b $} | END_BIT     // msb as name end
1540+ E2B3             >
1540+ E2B3 A6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1540+ E2B5             >Prev_Ptr        defl    Heap_Ptr
1540+ E2B5             >
1540+ E2B5             >mirror_Ptr      defl    $
1540+ E2B5             >
1540+ E2B5 D0 68       >                dw      Dict_Ptr + 2        // xt
1540+ E2B7             >Heap_Ptr        defl    $ - $E000           // save current HP
1540+ E2B7             >
1540+ E2B7             >Current_HP      defl  $ - $E000             // used to set HP once!
1540+ E2B7             >
1540+ E2B7             >//              ______________________________________________________________________
1540+ E2B7             >//              Dictionary part
1540+ E2B7             >
1540+ E2B7             >                org     Dict_Ptr
1540+ 68CE             >
1540+ 68CE B5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1540+ 68D0             >
1540+ 68D0             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1540+ 68D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1540+ 68D0 ~           >
1540+ 68D0 ~           >
1540+ 68D0             >                endif           ; ok        // for other definitions it "points" the correct handler
1540+ 68D0             >                // Use of "; ok" to suppress "warning[fwdref]"
1540+ 68D0             >
1540+ 68D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1541+ 68D0 18 F6                        jr      Two_Plus
1542+ 68D2
1543+ 68D2              //  ______________________________________________________________________
1544+ 68D2              //
1545+ 68D2              // align        a1 -- a2
1546+ 68D2              // align memory : not used
1547+ 68D2              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1548+ 68D2              //            next
1549+ 68D2
1550+ 68D2              //  ______________________________________________________________________
1551+ 68D2              //
1552+ 68D2              // cell-        a1 -- a2
1553+ 68D2              // decrement by 2 top of stack
1554+ 68D2                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1554+ 68D2             >
1554+ 68D2             >Dict_Ptr        defl    $
1554+ 68D2             >
1554+ 68D2             >//              ______________________________________________________________________
1554+ 68D2             >//              Heap part
1554+ 68D2             >
1554+ 68D2             >
1554+ 68D2             >                org     (Heap_Ptr & $1FFF) + $E000
1554+ E2B7             >
1554+ E2B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1554+ E2B7             >Latest_Definition defl  Heap_Ptr
1554+ E2B7             >
1554+ E2B7             >                // dummy db directives used to calculate length of namec
1554+ E2B7 43 45 4C 4C >                db      "CELL-"
1554+ E2BB 2D          >
1554+ E2BC             >len_NFA         defl    $ - temp_NFA
1554+ E2BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1554+ E2B7             >
1554+ E2B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1554+ E2B8 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1554+ E2BC 2D          >
1554+ E2BD             >                org     $-1                 // alter last byte of Name just above to set
1554+ E2BC AD          >                db      {b $} | END_BIT     // msb as name end
1554+ E2BD             >
1554+ E2BD AD 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1554+ E2BF             >Prev_Ptr        defl    Heap_Ptr
1554+ E2BF             >
1554+ E2BF             >mirror_Ptr      defl    $
1554+ E2BF             >
1554+ E2BF D4 68       >                dw      Dict_Ptr + 2        // xt
1554+ E2C1             >Heap_Ptr        defl    $ - $E000           // save current HP
1554+ E2C1             >
1554+ E2C1             >Current_HP      defl  $ - $E000             // used to set HP once!
1554+ E2C1             >
1554+ E2C1             >//              ______________________________________________________________________
1554+ E2C1             >//              Dictionary part
1554+ E2C1             >
1554+ E2C1             >                org     Dict_Ptr
1554+ 68D2             >
1554+ 68D2 BF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1554+ 68D4             >
1554+ 68D4             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1554+ 68D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1554+ 68D4 ~           >
1554+ 68D4 ~           >
1554+ 68D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1554+ 68D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1554+ 68D4             >
1554+ 68D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1555+ 68D4              CellMinus:
1556+ 68D4 E1                           pop     hl
1557+ 68D5 2B                           dec     hl
1558+ 68D6 2B                           dec     hl
1559+ 68D7
1560+ 68D7                              psh1
1560+ 68D7 E5          >                push    hl
1560+ 68D8 DD E9       >                jp      (ix)
1561+ 68DA
1562+ 68DA              //  ______________________________________________________________________
1563+ 68DA              //
1564+ 68DA              // 2-           a1 -- a2
1565+ 68DA              // decrement by 2 top of stack
1566+ 68DA                              New_Def TWO_MINUS, "2-", is_code, is_normal
1566+ 68DA             >
1566+ 68DA             >Dict_Ptr        defl    $
1566+ 68DA             >
1566+ 68DA             >//              ______________________________________________________________________
1566+ 68DA             >//              Heap part
1566+ 68DA             >
1566+ 68DA             >
1566+ 68DA             >                org     (Heap_Ptr & $1FFF) + $E000
1566+ E2C1             >
1566+ E2C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1566+ E2C1             >Latest_Definition defl  Heap_Ptr
1566+ E2C1             >
1566+ E2C1             >                // dummy db directives used to calculate length of namec
1566+ E2C1 32 2D       >                db      "2-"
1566+ E2C3             >len_NFA         defl    $ - temp_NFA
1566+ E2C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1566+ E2C1             >
1566+ E2C1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1566+ E2C2 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1566+ E2C4             >                org     $-1                 // alter last byte of Name just above to set
1566+ E2C3 AD          >                db      {b $} | END_BIT     // msb as name end
1566+ E2C4             >
1566+ E2C4 B7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1566+ E2C6             >Prev_Ptr        defl    Heap_Ptr
1566+ E2C6             >
1566+ E2C6             >mirror_Ptr      defl    $
1566+ E2C6             >
1566+ E2C6 DC 68       >                dw      Dict_Ptr + 2        // xt
1566+ E2C8             >Heap_Ptr        defl    $ - $E000           // save current HP
1566+ E2C8             >
1566+ E2C8             >Current_HP      defl  $ - $E000             // used to set HP once!
1566+ E2C8             >
1566+ E2C8             >//              ______________________________________________________________________
1566+ E2C8             >//              Dictionary part
1566+ E2C8             >
1566+ E2C8             >                org     Dict_Ptr
1566+ 68DA             >
1566+ 68DA C6 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1566+ 68DC             >
1566+ 68DC             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1566+ 68DC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1566+ 68DC ~           >
1566+ 68DC ~           >
1566+ 68DC             >                endif           ; ok        // for other definitions it "points" the correct handler
1566+ 68DC             >                // Use of "; ok" to suppress "warning[fwdref]"
1566+ 68DC             >
1566+ 68DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1567+ 68DC C3 D4 68                     jp      CellMinus
1568+ 68DF
1569+ 68DF              //  ______________________________________________________________________
1570+ 68DF              //
1571+ 68DF              // negate       n1 -- n2
1572+ 68DF              // change the sign of number
1573+ 68DF                              New_Def MINUS, "NEGATE", is_code, is_normal
1573+ 68DF             >
1573+ 68DF             >Dict_Ptr        defl    $
1573+ 68DF             >
1573+ 68DF             >//              ______________________________________________________________________
1573+ 68DF             >//              Heap part
1573+ 68DF             >
1573+ 68DF             >
1573+ 68DF             >                org     (Heap_Ptr & $1FFF) + $E000
1573+ E2C8             >
1573+ E2C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1573+ E2C8             >Latest_Definition defl  Heap_Ptr
1573+ E2C8             >
1573+ E2C8             >                // dummy db directives used to calculate length of namec
1573+ E2C8 4E 45 47 41 >                db      "NEGATE"
1573+ E2CC 54 45       >
1573+ E2CE             >len_NFA         defl    $ - temp_NFA
1573+ E2CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1573+ E2C8             >
1573+ E2C8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1573+ E2C9 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1573+ E2CD 54 45       >
1573+ E2CF             >                org     $-1                 // alter last byte of Name just above to set
1573+ E2CE C5          >                db      {b $} | END_BIT     // msb as name end
1573+ E2CF             >
1573+ E2CF C1 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1573+ E2D1             >Prev_Ptr        defl    Heap_Ptr
1573+ E2D1             >
1573+ E2D1             >mirror_Ptr      defl    $
1573+ E2D1             >
1573+ E2D1 E1 68       >                dw      Dict_Ptr + 2        // xt
1573+ E2D3             >Heap_Ptr        defl    $ - $E000           // save current HP
1573+ E2D3             >
1573+ E2D3             >Current_HP      defl  $ - $E000             // used to set HP once!
1573+ E2D3             >
1573+ E2D3             >//              ______________________________________________________________________
1573+ E2D3             >//              Dictionary part
1573+ E2D3             >
1573+ E2D3             >                org     Dict_Ptr
1573+ 68DF             >
1573+ 68DF D1 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1573+ 68E1             >
1573+ 68E1             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1573+ 68E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1573+ 68E1 ~           >
1573+ 68E1 ~           >
1573+ 68E1             >                endif           ; ok        // for other definitions it "points" the correct handler
1573+ 68E1             >                // Use of "; ok" to suppress "warning[fwdref]"
1573+ 68E1             >
1573+ 68E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1574+ 68E1 D9                           exx
1575+ 68E2 D1                           pop     de
1576+ 68E3 AF                           xor     a
1577+ 68E4 67                           ld      h, a
1578+ 68E5 6F                           ld      l, a
1579+ 68E6 ED 52                        sbc     hl, de
1580+ 68E8 E5                           push    hl
1581+ 68E9 D9                           exx
1582+ 68EA                              next
1582+ 68EA DD E9       >                jp      (ix)
1583+ 68EC
1584+ 68EC              //  ______________________________________________________________________
1585+ 68EC              //
1586+ 68EC              // dnegate      d1 -- d2
1587+ 68EC              // change the sign of a double number
1588+ 68EC                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1588+ 68EC             >
1588+ 68EC             >Dict_Ptr        defl    $
1588+ 68EC             >
1588+ 68EC             >//              ______________________________________________________________________
1588+ 68EC             >//              Heap part
1588+ 68EC             >
1588+ 68EC             >
1588+ 68EC             >                org     (Heap_Ptr & $1FFF) + $E000
1588+ E2D3             >
1588+ E2D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1588+ E2D3             >Latest_Definition defl  Heap_Ptr
1588+ E2D3             >
1588+ E2D3             >                // dummy db directives used to calculate length of namec
1588+ E2D3 44 4E 45 47 >                db      "DNEGATE"
1588+ E2D7 41 54 45    >
1588+ E2DA             >len_NFA         defl    $ - temp_NFA
1588+ E2DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1588+ E2D3             >
1588+ E2D3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1588+ E2D4 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1588+ E2D8 41 54 45    >
1588+ E2DB             >                org     $-1                 // alter last byte of Name just above to set
1588+ E2DA C5          >                db      {b $} | END_BIT     // msb as name end
1588+ E2DB             >
1588+ E2DB C8 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1588+ E2DD             >Prev_Ptr        defl    Heap_Ptr
1588+ E2DD             >
1588+ E2DD             >mirror_Ptr      defl    $
1588+ E2DD             >
1588+ E2DD EE 68       >                dw      Dict_Ptr + 2        // xt
1588+ E2DF             >Heap_Ptr        defl    $ - $E000           // save current HP
1588+ E2DF             >
1588+ E2DF             >Current_HP      defl  $ - $E000             // used to set HP once!
1588+ E2DF             >
1588+ E2DF             >//              ______________________________________________________________________
1588+ E2DF             >//              Dictionary part
1588+ E2DF             >
1588+ E2DF             >                org     Dict_Ptr
1588+ 68EC             >
1588+ 68EC DD 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1588+ 68EE             >
1588+ 68EE             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1588+ 68EE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1588+ 68EE ~           >
1588+ 68EE ~           >
1588+ 68EE             >                endif           ; ok        // for other definitions it "points" the correct handler
1588+ 68EE             >                // Use of "; ok" to suppress "warning[fwdref]"
1588+ 68EE             >
1588+ 68EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1589+ 68EE D9                           exx
1590+ 68EF C1                           pop     bc                  // d1.H
1591+ 68F0 D1                           pop     de                  // d1.L
1592+ 68F1 AF                           xor     a
1593+ 68F2 67                           ld      h, a
1594+ 68F3 6F                           ld      l, a
1595+ 68F4 ED 52                        sbc     hl, de              // subtact from zero
1596+ 68F6 E5                           push    hl                  // > d2-L
1597+ 68F7 67                           ld      h, a
1598+ 68F8 6F                           ld      l, a
1599+ 68F9 ED 42                        sbc     hl, bc              // subtract from zero with carry
1600+ 68FB                                                          // > d2-H
1601+ 68FB E5                           push    hl
1602+ 68FC D9                           exx
1603+ 68FD                              next
1603+ 68FD DD E9       >                jp      (ix)
1604+ 68FF
1605+ 68FF              //  ______________________________________________________________________
1606+ 68FF              //
1607+ 68FF              // over         n1 n2 -- n1 n2 n1
1608+ 68FF              // copy the second value of stack and put it on top.
1609+ 68FF                              New_Def OVER, "OVER", is_code, is_normal
1609+ 68FF             >
1609+ 68FF             >Dict_Ptr        defl    $
1609+ 68FF             >
1609+ 68FF             >//              ______________________________________________________________________
1609+ 68FF             >//              Heap part
1609+ 68FF             >
1609+ 68FF             >
1609+ 68FF             >                org     (Heap_Ptr & $1FFF) + $E000
1609+ E2DF             >
1609+ E2DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1609+ E2DF             >Latest_Definition defl  Heap_Ptr
1609+ E2DF             >
1609+ E2DF             >                // dummy db directives used to calculate length of namec
1609+ E2DF 4F 56 45 52 >                db      "OVER"
1609+ E2E3             >len_NFA         defl    $ - temp_NFA
1609+ E2E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1609+ E2DF             >
1609+ E2DF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1609+ E2E0 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1609+ E2E4             >                org     $-1                 // alter last byte of Name just above to set
1609+ E2E3 D2          >                db      {b $} | END_BIT     // msb as name end
1609+ E2E4             >
1609+ E2E4 D3 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1609+ E2E6             >Prev_Ptr        defl    Heap_Ptr
1609+ E2E6             >
1609+ E2E6             >mirror_Ptr      defl    $
1609+ E2E6             >
1609+ E2E6 01 69       >                dw      Dict_Ptr + 2        // xt
1609+ E2E8             >Heap_Ptr        defl    $ - $E000           // save current HP
1609+ E2E8             >
1609+ E2E8             >Current_HP      defl  $ - $E000             // used to set HP once!
1609+ E2E8             >
1609+ E2E8             >//              ______________________________________________________________________
1609+ E2E8             >//              Dictionary part
1609+ E2E8             >
1609+ E2E8             >                org     Dict_Ptr
1609+ 68FF             >
1609+ 68FF E6 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1609+ 6901             >
1609+ 6901             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1609+ 6901 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1609+ 6901 ~           >
1609+ 6901 ~           >
1609+ 6901             >                endif           ; ok        // for other definitions it "points" the correct handler
1609+ 6901             >                // Use of "; ok" to suppress "warning[fwdref]"
1609+ 6901             >
1609+ 6901             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1610+ 6901                              // exx     // we can use af instead OPTIMIZATION possible
1611+ 6901 F1                           pop     af                  //   n2
1612+ 6902 E1                           pop     hl                  // < n1
1613+ 6903 E5                           push    hl                  // > n1
1614+ 6904 F5                           push    af                  // > n2
1615+ 6905 E5                           push    hl                  // > n1
1616+ 6906                              // exx
1617+ 6906                              next
1617+ 6906 DD E9       >                jp      (ix)
1618+ 6908
1619+ 6908              //  ______________________________________________________________________
1620+ 6908              //
1621+ 6908              // drop         n1 --
1622+ 6908              // drops the top of stack
1623+ 6908                              New_Def DROP, "DROP", is_code, is_normal
1623+ 6908             >
1623+ 6908             >Dict_Ptr        defl    $
1623+ 6908             >
1623+ 6908             >//              ______________________________________________________________________
1623+ 6908             >//              Heap part
1623+ 6908             >
1623+ 6908             >
1623+ 6908             >                org     (Heap_Ptr & $1FFF) + $E000
1623+ E2E8             >
1623+ E2E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1623+ E2E8             >Latest_Definition defl  Heap_Ptr
1623+ E2E8             >
1623+ E2E8             >                // dummy db directives used to calculate length of namec
1623+ E2E8 44 52 4F 50 >                db      "DROP"
1623+ E2EC             >len_NFA         defl    $ - temp_NFA
1623+ E2EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1623+ E2E8             >
1623+ E2E8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1623+ E2E9 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1623+ E2ED             >                org     $-1                 // alter last byte of Name just above to set
1623+ E2EC D0          >                db      {b $} | END_BIT     // msb as name end
1623+ E2ED             >
1623+ E2ED DF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1623+ E2EF             >Prev_Ptr        defl    Heap_Ptr
1623+ E2EF             >
1623+ E2EF             >mirror_Ptr      defl    $
1623+ E2EF             >
1623+ E2EF 0A 69       >                dw      Dict_Ptr + 2        // xt
1623+ E2F1             >Heap_Ptr        defl    $ - $E000           // save current HP
1623+ E2F1             >
1623+ E2F1             >Current_HP      defl  $ - $E000             // used to set HP once!
1623+ E2F1             >
1623+ E2F1             >//              ______________________________________________________________________
1623+ E2F1             >//              Dictionary part
1623+ E2F1             >
1623+ E2F1             >                org     Dict_Ptr
1623+ 6908             >
1623+ 6908 EF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1623+ 690A             >
1623+ 690A             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1623+ 690A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1623+ 690A ~           >
1623+ 690A ~           >
1623+ 690A             >                endif           ; ok        // for other definitions it "points" the correct handler
1623+ 690A             >                // Use of "; ok" to suppress "warning[fwdref]"
1623+ 690A             >
1623+ 690A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1624+ 690A E1                           pop     hl                  // < n1 and discard previous TOS
1625+ 690B                              next
1625+ 690B DD E9       >                jp      (ix)
1626+ 690D
1627+ 690D              //  ______________________________________________________________________
1628+ 690D              //
1629+ 690D              // nip          n1 n2 -- n2
1630+ 690D              // drops the second elemento on the stack
1631+ 690D                              New_Def NIP, "NIP", is_code, is_normal
1631+ 690D             >
1631+ 690D             >Dict_Ptr        defl    $
1631+ 690D             >
1631+ 690D             >//              ______________________________________________________________________
1631+ 690D             >//              Heap part
1631+ 690D             >
1631+ 690D             >
1631+ 690D             >                org     (Heap_Ptr & $1FFF) + $E000
1631+ E2F1             >
1631+ E2F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1631+ E2F1             >Latest_Definition defl  Heap_Ptr
1631+ E2F1             >
1631+ E2F1             >                // dummy db directives used to calculate length of namec
1631+ E2F1 4E 49 50    >                db      "NIP"
1631+ E2F4             >len_NFA         defl    $ - temp_NFA
1631+ E2F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1631+ E2F1             >
1631+ E2F1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1631+ E2F2 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1631+ E2F5             >                org     $-1                 // alter last byte of Name just above to set
1631+ E2F4 D0          >                db      {b $} | END_BIT     // msb as name end
1631+ E2F5             >
1631+ E2F5 E8 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1631+ E2F7             >Prev_Ptr        defl    Heap_Ptr
1631+ E2F7             >
1631+ E2F7             >mirror_Ptr      defl    $
1631+ E2F7             >
1631+ E2F7 0F 69       >                dw      Dict_Ptr + 2        // xt
1631+ E2F9             >Heap_Ptr        defl    $ - $E000           // save current HP
1631+ E2F9             >
1631+ E2F9             >Current_HP      defl  $ - $E000             // used to set HP once!
1631+ E2F9             >
1631+ E2F9             >//              ______________________________________________________________________
1631+ E2F9             >//              Dictionary part
1631+ E2F9             >
1631+ E2F9             >                org     Dict_Ptr
1631+ 690D             >
1631+ 690D F7 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1631+ 690F             >
1631+ 690F             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1631+ 690F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1631+ 690F ~           >
1631+ 690F ~           >
1631+ 690F             >                endif           ; ok        // for other definitions it "points" the correct handler
1631+ 690F             >                // Use of "; ok" to suppress "warning[fwdref]"
1631+ 690F             >
1631+ 690F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1632+ 690F
1633+ 690F E1                           pop     hl                  // < n1 discarded
1634+ 6910 E3                           ex      (sp), hl
1635+ 6911                              next
1635+ 6911 DD E9       >                jp      (ix)
1636+ 6913
1637+ 6913              //  ______________________________________________________________________
1638+ 6913              //
1639+ 6913              // tuck         n1 n2 -- n2 n1 n2
1640+ 6913              // copy the top element after the second.
1641+ 6913                              New_Def TUCK, "TUCK", is_code, is_normal
1641+ 6913             >
1641+ 6913             >Dict_Ptr        defl    $
1641+ 6913             >
1641+ 6913             >//              ______________________________________________________________________
1641+ 6913             >//              Heap part
1641+ 6913             >
1641+ 6913             >
1641+ 6913             >                org     (Heap_Ptr & $1FFF) + $E000
1641+ E2F9             >
1641+ E2F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1641+ E2F9             >Latest_Definition defl  Heap_Ptr
1641+ E2F9             >
1641+ E2F9             >                // dummy db directives used to calculate length of namec
1641+ E2F9 54 55 43 4B >                db      "TUCK"
1641+ E2FD             >len_NFA         defl    $ - temp_NFA
1641+ E2FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1641+ E2F9             >
1641+ E2F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1641+ E2FA 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1641+ E2FE             >                org     $-1                 // alter last byte of Name just above to set
1641+ E2FD CB          >                db      {b $} | END_BIT     // msb as name end
1641+ E2FE             >
1641+ E2FE F1 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1641+ E300             >Prev_Ptr        defl    Heap_Ptr
1641+ E300             >
1641+ E300             >mirror_Ptr      defl    $
1641+ E300             >
1641+ E300 15 69       >                dw      Dict_Ptr + 2        // xt
1641+ E302             >Heap_Ptr        defl    $ - $E000           // save current HP
1641+ E302             >
1641+ E302             >Current_HP      defl  $ - $E000             // used to set HP once!
1641+ E302             >
1641+ E302             >//              ______________________________________________________________________
1641+ E302             >//              Dictionary part
1641+ E302             >
1641+ E302             >                org     Dict_Ptr
1641+ 6913             >
1641+ 6913 00 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1641+ 6915             >
1641+ 6915             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1641+ 6915 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1641+ 6915 ~           >
1641+ 6915 ~           >
1641+ 6915             >                endif           ; ok        // for other definitions it "points" the correct handler
1641+ 6915             >                // Use of "; ok" to suppress "warning[fwdref]"
1641+ 6915             >
1641+ 6915             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1642+ 6915 E1                           pop     hl
1643+ 6916 F1                           pop     af                  // < n1
1644+ 6917 E5                           push    hl                  // > n2  and TOS
1645+ 6918 F5                           push    af                  // > n1
1646+ 6919 E5                           push    hl
1647+ 691A                              next
1647+ 691A DD E9       >                jp      (ix)
1648+ 691C
1649+ 691C              //  ______________________________________________________________________
1650+ 691C              //
1651+ 691C              // swap         n1 n2 -- n2 n1
1652+ 691C              // swaps the two values on top of stack
1653+ 691C                              New_Def SWAP, "SWAP", is_code, is_normal
1653+ 691C             >
1653+ 691C             >Dict_Ptr        defl    $
1653+ 691C             >
1653+ 691C             >//              ______________________________________________________________________
1653+ 691C             >//              Heap part
1653+ 691C             >
1653+ 691C             >
1653+ 691C             >                org     (Heap_Ptr & $1FFF) + $E000
1653+ E302             >
1653+ E302             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1653+ E302             >Latest_Definition defl  Heap_Ptr
1653+ E302             >
1653+ E302             >                // dummy db directives used to calculate length of namec
1653+ E302 53 57 41 50 >                db      "SWAP"
1653+ E306             >len_NFA         defl    $ - temp_NFA
1653+ E306             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1653+ E302             >
1653+ E302 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1653+ E303 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1653+ E307             >                org     $-1                 // alter last byte of Name just above to set
1653+ E306 D0          >                db      {b $} | END_BIT     // msb as name end
1653+ E307             >
1653+ E307 F9 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1653+ E309             >Prev_Ptr        defl    Heap_Ptr
1653+ E309             >
1653+ E309             >mirror_Ptr      defl    $
1653+ E309             >
1653+ E309 1E 69       >                dw      Dict_Ptr + 2        // xt
1653+ E30B             >Heap_Ptr        defl    $ - $E000           // save current HP
1653+ E30B             >
1653+ E30B             >Current_HP      defl  $ - $E000             // used to set HP once!
1653+ E30B             >
1653+ E30B             >//              ______________________________________________________________________
1653+ E30B             >//              Dictionary part
1653+ E30B             >
1653+ E30B             >                org     Dict_Ptr
1653+ 691C             >
1653+ 691C 09 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1653+ 691E             >
1653+ 691E             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1653+ 691E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1653+ 691E ~           >
1653+ 691E ~           >
1653+ 691E             >                endif           ; ok        // for other definitions it "points" the correct handler
1653+ 691E             >                // Use of "; ok" to suppress "warning[fwdref]"
1653+ 691E             >
1653+ 691E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1654+ 691E E1                           pop     hl                  // < n1
1655+ 691F E3                           ex      (sp),hl             // > n2
1656+ 6920 E5                           push    hl                  // copy n1 to TOS
1657+ 6921                              next
1657+ 6921 DD E9       >                jp      (ix)
1658+ 6923
1659+ 6923              //  ______________________________________________________________________
1660+ 6923              //
1661+ 6923              // dup         n -- n n
1662+ 6923              // duplicates the top value of stack
1663+ 6923                              New_Def DUP, "DUP", is_code, is_normal
1663+ 6923             >
1663+ 6923             >Dict_Ptr        defl    $
1663+ 6923             >
1663+ 6923             >//              ______________________________________________________________________
1663+ 6923             >//              Heap part
1663+ 6923             >
1663+ 6923             >
1663+ 6923             >                org     (Heap_Ptr & $1FFF) + $E000
1663+ E30B             >
1663+ E30B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1663+ E30B             >Latest_Definition defl  Heap_Ptr
1663+ E30B             >
1663+ E30B             >                // dummy db directives used to calculate length of namec
1663+ E30B 44 55 50    >                db      "DUP"
1663+ E30E             >len_NFA         defl    $ - temp_NFA
1663+ E30E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1663+ E30B             >
1663+ E30B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1663+ E30C 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1663+ E30F             >                org     $-1                 // alter last byte of Name just above to set
1663+ E30E D0          >                db      {b $} | END_BIT     // msb as name end
1663+ E30F             >
1663+ E30F 02 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1663+ E311             >Prev_Ptr        defl    Heap_Ptr
1663+ E311             >
1663+ E311             >mirror_Ptr      defl    $
1663+ E311             >
1663+ E311 25 69       >                dw      Dict_Ptr + 2        // xt
1663+ E313             >Heap_Ptr        defl    $ - $E000           // save current HP
1663+ E313             >
1663+ E313             >Current_HP      defl  $ - $E000             // used to set HP once!
1663+ E313             >
1663+ E313             >//              ______________________________________________________________________
1663+ E313             >//              Dictionary part
1663+ E313             >
1663+ E313             >                org     Dict_Ptr
1663+ 6923             >
1663+ 6923 11 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1663+ 6925             >
1663+ 6925             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1663+ 6925 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1663+ 6925 ~           >
1663+ 6925 ~           >
1663+ 6925             >                endif           ; ok        // for other definitions it "points" the correct handler
1663+ 6925             >                // Use of "; ok" to suppress "warning[fwdref]"
1663+ 6925             >
1663+ 6925             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1664+ 6925 E1                           pop     hl
1665+ 6926 E5                           push    hl                  // > n duplicate TOS
1666+ 6927 E5                           push    hl
1667+ 6928                              next
1667+ 6928 DD E9       >                jp      (ix)
1668+ 692A
1669+ 692A              //  ______________________________________________________________________
1670+ 692A              //
1671+ 692A              // rot         n1 n2 n3 -- n2 n3 n1
1672+ 692A              // Rotates the 3 top values of stack by picking the 3rd in access-order
1673+ 692A              // and putting it on top. The other two are shifted down one place.
1674+ 692A                              New_Def ROT, "ROT", is_code, is_normal
1674+ 692A             >
1674+ 692A             >Dict_Ptr        defl    $
1674+ 692A             >
1674+ 692A             >//              ______________________________________________________________________
1674+ 692A             >//              Heap part
1674+ 692A             >
1674+ 692A             >
1674+ 692A             >                org     (Heap_Ptr & $1FFF) + $E000
1674+ E313             >
1674+ E313             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1674+ E313             >Latest_Definition defl  Heap_Ptr
1674+ E313             >
1674+ E313             >                // dummy db directives used to calculate length of namec
1674+ E313 52 4F 54    >                db      "ROT"
1674+ E316             >len_NFA         defl    $ - temp_NFA
1674+ E316             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1674+ E313             >
1674+ E313 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1674+ E314 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1674+ E317             >                org     $-1                 // alter last byte of Name just above to set
1674+ E316 D4          >                db      {b $} | END_BIT     // msb as name end
1674+ E317             >
1674+ E317 0B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1674+ E319             >Prev_Ptr        defl    Heap_Ptr
1674+ E319             >
1674+ E319             >mirror_Ptr      defl    $
1674+ E319             >
1674+ E319 2C 69       >                dw      Dict_Ptr + 2        // xt
1674+ E31B             >Heap_Ptr        defl    $ - $E000           // save current HP
1674+ E31B             >
1674+ E31B             >Current_HP      defl  $ - $E000             // used to set HP once!
1674+ E31B             >
1674+ E31B             >//              ______________________________________________________________________
1674+ E31B             >//              Dictionary part
1674+ E31B             >
1674+ E31B             >                org     Dict_Ptr
1674+ 692A             >
1674+ 692A 19 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1674+ 692C             >
1674+ 692C             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1674+ 692C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1674+ 692C ~           >
1674+ 692C ~           >
1674+ 692C             >                endif           ; ok        // for other definitions it "points" the correct handler
1674+ 692C             >                // Use of "; ok" to suppress "warning[fwdref]"
1674+ 692C             >
1674+ 692C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1675+ 692C                          //  exx
1676+ 692C F1                           pop     af                  // < n3
1677+ 692D E1                           pop     hl                  // < n2
1678+ 692E E3                           ex      (sp),hl             // > n2 < n1
1679+ 692F F5                           push    af                  // > n3
1680+ 6930 E5                           push    hl                  // copy n1 to TOS
1681+ 6931                          //  exx
1682+ 6931                              next
1682+ 6931 DD E9       >                jp      (ix)
1683+ 6933
1684+ 6933              //  ______________________________________________________________________
1685+ 6933              //
1686+ 6933              // -rot         n1 n2 n3 -- n3 n1 n2
1687+ 6933              // Rotates the 3 top values of stack by picking the 1st in access-order
1688+ 6933              // and putting back to 3rd place. The other two are shifted down one place.
1689+ 6933                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1689+ 6933             >
1689+ 6933             >Dict_Ptr        defl    $
1689+ 6933             >
1689+ 6933             >//              ______________________________________________________________________
1689+ 6933             >//              Heap part
1689+ 6933             >
1689+ 6933             >
1689+ 6933             >                org     (Heap_Ptr & $1FFF) + $E000
1689+ E31B             >
1689+ E31B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1689+ E31B             >Latest_Definition defl  Heap_Ptr
1689+ E31B             >
1689+ E31B             >                // dummy db directives used to calculate length of namec
1689+ E31B 2D 52 4F 54 >                db      "-ROT"
1689+ E31F             >len_NFA         defl    $ - temp_NFA
1689+ E31F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1689+ E31B             >
1689+ E31B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1689+ E31C 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1689+ E320             >                org     $-1                 // alter last byte of Name just above to set
1689+ E31F D4          >                db      {b $} | END_BIT     // msb as name end
1689+ E320             >
1689+ E320 13 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1689+ E322             >Prev_Ptr        defl    Heap_Ptr
1689+ E322             >
1689+ E322             >mirror_Ptr      defl    $
1689+ E322             >
1689+ E322 35 69       >                dw      Dict_Ptr + 2        // xt
1689+ E324             >Heap_Ptr        defl    $ - $E000           // save current HP
1689+ E324             >
1689+ E324             >Current_HP      defl  $ - $E000             // used to set HP once!
1689+ E324             >
1689+ E324             >//              ______________________________________________________________________
1689+ E324             >//              Dictionary part
1689+ E324             >
1689+ E324             >                org     Dict_Ptr
1689+ 6933             >
1689+ 6933 22 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1689+ 6935             >
1689+ 6935             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1689+ 6935 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1689+ 6935 ~           >
1689+ 6935 ~           >
1689+ 6935             >                endif           ; ok        // for other definitions it "points" the correct handler
1689+ 6935             >                // Use of "; ok" to suppress "warning[fwdref]"
1689+ 6935             >
1689+ 6935             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1690+ 6935                          //  exx
1691+ 6935 E1                           pop     hl                  // < n3
1692+ 6936 F1                           pop     af                  // < n2
1693+ 6937 E3                           ex      (sp),hl             // > n3 < n1
1694+ 6938 E5                           push    hl                  // > n1
1695+ 6939 F5                           push    af                  // copy n3 to TOS
1696+ 693A                          //  exx
1697+ 693A                              next
1697+ 693A DD E9       >                jp      (ix)
1698+ 693C
1699+ 693C              //  ______________________________________________________________________
1700+ 693C              //
1701+ 693C              // pick        n1 -- nx
1702+ 693C              // picks the nth element from TOS
1703+ 693C                              New_Def PICK, "PICK", is_code, is_normal
1703+ 693C             >
1703+ 693C             >Dict_Ptr        defl    $
1703+ 693C             >
1703+ 693C             >//              ______________________________________________________________________
1703+ 693C             >//              Heap part
1703+ 693C             >
1703+ 693C             >
1703+ 693C             >                org     (Heap_Ptr & $1FFF) + $E000
1703+ E324             >
1703+ E324             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1703+ E324             >Latest_Definition defl  Heap_Ptr
1703+ E324             >
1703+ E324             >                // dummy db directives used to calculate length of namec
1703+ E324 50 49 43 4B >                db      "PICK"
1703+ E328             >len_NFA         defl    $ - temp_NFA
1703+ E328             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1703+ E324             >
1703+ E324 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1703+ E325 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1703+ E329             >                org     $-1                 // alter last byte of Name just above to set
1703+ E328 CB          >                db      {b $} | END_BIT     // msb as name end
1703+ E329             >
1703+ E329 1B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1703+ E32B             >Prev_Ptr        defl    Heap_Ptr
1703+ E32B             >
1703+ E32B             >mirror_Ptr      defl    $
1703+ E32B             >
1703+ E32B 3E 69       >                dw      Dict_Ptr + 2        // xt
1703+ E32D             >Heap_Ptr        defl    $ - $E000           // save current HP
1703+ E32D             >
1703+ E32D             >Current_HP      defl  $ - $E000             // used to set HP once!
1703+ E32D             >
1703+ E32D             >//              ______________________________________________________________________
1703+ E32D             >//              Dictionary part
1703+ E32D             >
1703+ E32D             >                org     Dict_Ptr
1703+ 693C             >
1703+ 693C 2B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1703+ 693E             >
1703+ 693E             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1703+ 693E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1703+ 693E ~           >
1703+ 693E ~           >
1703+ 693E             >                endif           ; ok        // for other definitions it "points" the correct handler
1703+ 693E             >                // Use of "; ok" to suppress "warning[fwdref]"
1703+ 693E             >
1703+ 693E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1704+ 693E E1                           pop     hl                  // take TOS as index
1705+ 693F 29                           add     hl, hl              // as cells
1706+ 6940 39                           add     hl, sp              // from Stack Pointer
1707+ 6941 7E                           ld      a, (hl)             // replace TOS
1708+ 6942 23                           inc     hl
1709+ 6943 66                           ld      h, (hl)
1710+ 6944 6F                           ld      l, a
1711+ 6945 E5                           push    hl
1712+ 6946                              next
1712+ 6946 DD E9       >                jp      (ix)
1713+ 6948
1714+ 6948
1715+ 6948              //  ______________________________________________________________________
1716+ 6948              //
1717+ 6948              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1718+ 6948              // picks the nth element from TOS
1719+ 6948              //              New_Def ROLL, "ROLL", is_code, is_normal
1720+ 6948              //              exx                     // we need all registers free
1721+ 6948              //              pop     hl              // number of cells to roll
1722+ 6948              //              ld      a, h
1723+ 6948              //              or       l
1724+ 6948              //              jr      z, Roll_Zero
1725+ 6948              //                  add     hl, hl              // number of bytes to move
1726+ 6948              //                  ld      b, h
1727+ 6948              //                  ld      c, l
1728+ 6948              //                  add     hl, sp          // address of n1
1729+ 6948              //                  ld      a, (hl)         // take n1 into a and a,
1730+ 6948              //                  inc     hl
1731+ 6948              //                  ex      af, af'
1732+ 6948              //                  ld      a, (hl)         // take n1 into a and a,
1733+ 6948              //                  ld      d, h
1734+ 6948              //                  ld      e, l
1735+ 6948              //                  dec     hl
1736+ 6948              //                  dec     hl
1737+ 6948              //                  lddr
1738+ 6948              //                  ex      de, hl
1739+ 6948              //                  ld      (hl), a
1740+ 6948              //                  dec     hl
1741+ 6948              //                  ex      af, af'
1742+ 6948              //                  ld      (hl), a
1743+ 6948              //Roll_Zero:
1744+ 6948              //              exx
1745+ 6948              //              next
1746+ 6948
1747+ 6948
1748+ 6948              //  ______________________________________________________________________
1749+ 6948              //
1750+ 6948              // 2over        d1 d2 -- d1 d2 d1
1751+ 6948              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1752+ 6948              // copy the second double of stack and put on top.
1753+ 6948                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1753+ 6948             >
1753+ 6948             >Dict_Ptr        defl    $
1753+ 6948             >
1753+ 6948             >//              ______________________________________________________________________
1753+ 6948             >//              Heap part
1753+ 6948             >
1753+ 6948             >
1753+ 6948             >                org     (Heap_Ptr & $1FFF) + $E000
1753+ E32D             >
1753+ E32D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1753+ E32D             >Latest_Definition defl  Heap_Ptr
1753+ E32D             >
1753+ E32D             >                // dummy db directives used to calculate length of namec
1753+ E32D 32 4F 56 45 >                db      "2OVER"
1753+ E331 52          >
1753+ E332             >len_NFA         defl    $ - temp_NFA
1753+ E332             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1753+ E32D             >
1753+ E32D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1753+ E32E 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1753+ E332 52          >
1753+ E333             >                org     $-1                 // alter last byte of Name just above to set
1753+ E332 D2          >                db      {b $} | END_BIT     // msb as name end
1753+ E333             >
1753+ E333 24 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1753+ E335             >Prev_Ptr        defl    Heap_Ptr
1753+ E335             >
1753+ E335             >mirror_Ptr      defl    $
1753+ E335             >
1753+ E335 4A 69       >                dw      Dict_Ptr + 2        // xt
1753+ E337             >Heap_Ptr        defl    $ - $E000           // save current HP
1753+ E337             >
1753+ E337             >Current_HP      defl  $ - $E000             // used to set HP once!
1753+ E337             >
1753+ E337             >//              ______________________________________________________________________
1753+ E337             >//              Dictionary part
1753+ E337             >
1753+ E337             >                org     Dict_Ptr
1753+ 6948             >
1753+ 6948 35 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1753+ 694A             >
1753+ 694A             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1753+ 694A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1753+ 694A ~           >
1753+ 694A ~           >
1753+ 694A             >                endif           ; ok        // for other definitions it "points" the correct handler
1753+ 694A             >                // Use of "; ok" to suppress "warning[fwdref]"
1753+ 694A             >
1753+ 694A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1754+ 694A D9                           exx
1755+ 694B E1                           pop     hl      // 10
1756+ 694C D1                           pop     de      // 10
1757+ 694D C1                           pop     bc      // 10
1758+ 694E F1                           pop     af      // 10
1759+ 694F F5                           push    af      // 11
1760+ 6950 C5                           push    bc      // 11
1761+ 6951 D5                           push    de      // 11
1762+ 6952 E5                           push    hl      // 11
1763+ 6953 F5                           push    af      // 11
1764+ 6954 C5                           push    bc      // 11
1765+ 6955 D9                           exx
1766+ 6956                              next
1766+ 6956 DD E9       >                jp      (ix)
1767+ 6958
1768+ 6958              //  ______________________________________________________________________
1769+ 6958              //
1770+ 6958              // 2drop        d --
1771+ 6958              //              n1 n2 --
1772+ 6958              // drops the top double from stack
1773+ 6958                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1773+ 6958             >
1773+ 6958             >Dict_Ptr        defl    $
1773+ 6958             >
1773+ 6958             >//              ______________________________________________________________________
1773+ 6958             >//              Heap part
1773+ 6958             >
1773+ 6958             >
1773+ 6958             >                org     (Heap_Ptr & $1FFF) + $E000
1773+ E337             >
1773+ E337             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1773+ E337             >Latest_Definition defl  Heap_Ptr
1773+ E337             >
1773+ E337             >                // dummy db directives used to calculate length of namec
1773+ E337 32 44 52 4F >                db      "2DROP"
1773+ E33B 50          >
1773+ E33C             >len_NFA         defl    $ - temp_NFA
1773+ E33C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1773+ E337             >
1773+ E337 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1773+ E338 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1773+ E33C 50          >
1773+ E33D             >                org     $-1                 // alter last byte of Name just above to set
1773+ E33C D0          >                db      {b $} | END_BIT     // msb as name end
1773+ E33D             >
1773+ E33D 2D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1773+ E33F             >Prev_Ptr        defl    Heap_Ptr
1773+ E33F             >
1773+ E33F             >mirror_Ptr      defl    $
1773+ E33F             >
1773+ E33F 5A 69       >                dw      Dict_Ptr + 2        // xt
1773+ E341             >Heap_Ptr        defl    $ - $E000           // save current HP
1773+ E341             >
1773+ E341             >Current_HP      defl  $ - $E000             // used to set HP once!
1773+ E341             >
1773+ E341             >//              ______________________________________________________________________
1773+ E341             >//              Dictionary part
1773+ E341             >
1773+ E341             >                org     Dict_Ptr
1773+ 6958             >
1773+ 6958 3F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1773+ 695A             >
1773+ 695A             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1773+ 695A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1773+ 695A ~           >
1773+ 695A ~           >
1773+ 695A             >                endif           ; ok        // for other definitions it "points" the correct handler
1773+ 695A             >                // Use of "; ok" to suppress "warning[fwdref]"
1773+ 695A             >
1773+ 695A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1774+ 695A E1                           pop     hl
1775+ 695B E1                           pop     hl
1776+ 695C                              next
1776+ 695C DD E9       >                jp      (ix)
1777+ 695E
1778+ 695E              //  ______________________________________________________________________
1779+ 695E              //
1780+ 695E              // 2nip         d1 d2 -- d2
1781+ 695E              //              n1 n2 n3 n4 -- n3 n4
1782+ 695E              // drops the second double on the stack
1783+ 695E              //              New_Def TWO_NIP, 4, "2nip"
1784+ 695E              //              ...
1785+ 695E
1786+ 695E              //  ______________________________________________________________________
1787+ 695E              //
1788+ 695E              // 2tuck         d1 d2 -- d2 d1 d2
1789+ 695E              // copy the top element after the second.
1790+ 695E              //              New_Def TWO_TUCK, 5, "2tuck"
1791+ 695E              //              ...
1792+ 695E
1793+ 695E              //  ______________________________________________________________________
1794+ 695E              //
1795+ 695E              // 2swap         d1 d2 -- d2 d1
1796+ 695E              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1797+ 695E              // swaps the two doubles on top of stack
1798+ 695E                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1798+ 695E             >
1798+ 695E             >Dict_Ptr        defl    $
1798+ 695E             >
1798+ 695E             >//              ______________________________________________________________________
1798+ 695E             >//              Heap part
1798+ 695E             >
1798+ 695E             >
1798+ 695E             >                org     (Heap_Ptr & $1FFF) + $E000
1798+ E341             >
1798+ E341             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1798+ E341             >Latest_Definition defl  Heap_Ptr
1798+ E341             >
1798+ E341             >                // dummy db directives used to calculate length of namec
1798+ E341 32 53 57 41 >                db      "2SWAP"
1798+ E345 50          >
1798+ E346             >len_NFA         defl    $ - temp_NFA
1798+ E346             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1798+ E341             >
1798+ E341 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1798+ E342 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1798+ E346 50          >
1798+ E347             >                org     $-1                 // alter last byte of Name just above to set
1798+ E346 D0          >                db      {b $} | END_BIT     // msb as name end
1798+ E347             >
1798+ E347 37 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1798+ E349             >Prev_Ptr        defl    Heap_Ptr
1798+ E349             >
1798+ E349             >mirror_Ptr      defl    $
1798+ E349             >
1798+ E349 60 69       >                dw      Dict_Ptr + 2        // xt
1798+ E34B             >Heap_Ptr        defl    $ - $E000           // save current HP
1798+ E34B             >
1798+ E34B             >Current_HP      defl  $ - $E000             // used to set HP once!
1798+ E34B             >
1798+ E34B             >//              ______________________________________________________________________
1798+ E34B             >//              Dictionary part
1798+ E34B             >
1798+ E34B             >                org     Dict_Ptr
1798+ 695E             >
1798+ 695E 49 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1798+ 6960             >
1798+ 6960             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1798+ 6960 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1798+ 6960 ~           >
1798+ 6960 ~           >
1798+ 6960             >                endif           ; ok        // for other definitions it "points" the correct handler
1798+ 6960             >                // Use of "; ok" to suppress "warning[fwdref]"
1798+ 6960             >
1798+ 6960             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1799+ 6960 D9                           exx
1800+ 6961 F1                           pop     af                  //   d2-H
1801+ 6962 E1                           pop     hl                  // < d2-L
1802+ 6963 D1                           pop     de                  // < d1-H
1803+ 6964 E3                           ex      (sp), hl            // < d1-L > d2-L
1804+ 6965 F5                           push    af                  // > d2-H
1805+ 6966 E5                           push    hl                  // > d1-L
1806+ 6967 D5                           push    de
1807+ 6968 D9                           exx
1808+ 6969                              next
1808+ 6969 DD E9       >                jp      (ix)
1809+ 696B
1810+ 696B              //  ______________________________________________________________________
1811+ 696B              //
1812+ 696B              // 2dup         d -- d d
1813+ 696B              //              n1 n2 -- n1 n2 n1 n2
1814+ 696B              // duplicates the top double of stack
1815+ 696B                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1815+ 696B             >
1815+ 696B             >Dict_Ptr        defl    $
1815+ 696B             >
1815+ 696B             >//              ______________________________________________________________________
1815+ 696B             >//              Heap part
1815+ 696B             >
1815+ 696B             >
1815+ 696B             >                org     (Heap_Ptr & $1FFF) + $E000
1815+ E34B             >
1815+ E34B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1815+ E34B             >Latest_Definition defl  Heap_Ptr
1815+ E34B             >
1815+ E34B             >                // dummy db directives used to calculate length of namec
1815+ E34B 32 44 55 50 >                db      "2DUP"
1815+ E34F             >len_NFA         defl    $ - temp_NFA
1815+ E34F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1815+ E34B             >
1815+ E34B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1815+ E34C 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1815+ E350             >                org     $-1                 // alter last byte of Name just above to set
1815+ E34F D0          >                db      {b $} | END_BIT     // msb as name end
1815+ E350             >
1815+ E350 41 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1815+ E352             >Prev_Ptr        defl    Heap_Ptr
1815+ E352             >
1815+ E352             >mirror_Ptr      defl    $
1815+ E352             >
1815+ E352 6D 69       >                dw      Dict_Ptr + 2        // xt
1815+ E354             >Heap_Ptr        defl    $ - $E000           // save current HP
1815+ E354             >
1815+ E354             >Current_HP      defl  $ - $E000             // used to set HP once!
1815+ E354             >
1815+ E354             >//              ______________________________________________________________________
1815+ E354             >//              Dictionary part
1815+ E354             >
1815+ E354             >                org     Dict_Ptr
1815+ 696B             >
1815+ 696B 52 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1815+ 696D             >
1815+ 696D             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1815+ 696D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1815+ 696D ~           >
1815+ 696D ~           >
1815+ 696D             >                endif           ; ok        // for other definitions it "points" the correct handler
1815+ 696D             >                // Use of "; ok" to suppress "warning[fwdref]"
1815+ 696D             >
1815+ 696D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1816+ 696D E1                           pop     hl                  // < d-H
1817+ 696E F1                           pop     af                  // < d-L
1818+ 696F F5                           push    af                  // < d-L
1819+ 6970 E5                           push    hl                  // > d-H
1820+ 6971 F5                           push    af                  // > d-L
1821+ 6972 E5                           push    hl                  // > d-H
1822+ 6973                              next
1822+ 6973 DD E9       >                jp      (ix)
1823+ 6975
1824+ 6975              //  ______________________________________________________________________
1825+ 6975              //
1826+ 6975              // 2rot         d1 d2 d3 -- d2 d3 d1
1827+ 6975              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1828+ 6975              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1829+ 6975              // and putting it on top. The other two are shifted down one place.
1830+ 6975              //              New_Def TWO?ROT, 4, "2rot"
1831+ 6975              //              ...
1832+ 6975              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1833+ 6975              //
1834+ 6975              //      d3  |d2  |d1  |
1835+ 6975              //      h l |h l |h l |
1836+ 6975              // SP   LHED|LHED|LHED|
1837+ 6975              // SP  +0123|4567|89ab|
1838+ 6975              //              ld      hl, $000B
1839+ 6975              //              add     hl, sp
1840+ 6975              //              ld      d, (hl)
1841+ 6975              //              dec     hl
1842+ 6975              //              ld      e, (hl)
1843+ 6975              //              dec     hl
1844+ 6975              //              push    de
1845+ 6975              //              ld      d, (hl)
1846+ 6975              //              dec     hl
1847+ 6975              //              ld      e, (hl)
1848+ 6975              //              dec     hl
1849+ 6975              //              push    de
1850+ 6975
1851+ 6975              //      d1  |d3  |d2  |d1  |
1852+ 6975              //      h l |h l |h l |h l |
1853+ 6975              // SP   LHED|LHED|LHED|LHED|
1854+ 6975              // SP       +0123|4567|89ab|
1855+ 6975
1856+ 6975              //              ld      d, h
1857+ 6975              //              ld      e, l
1858+ 6975              //              inc     de
1859+ 6975              //              inc     de
1860+ 6975              //              inc     de
1861+ 6975              //              inc     de
1862+ 6975              //              push    bc
1863+ 6975              //              ld      bc, $000C
1864+ 6975              //              lddr
1865+ 6975              //              pop     bc
1866+ 6975              //              pop     de
1867+ 6975              //              pop     de
1868+ 6975              //
1869+ 6975              //              next
1870+ 6975
1871+ 6975
1872+ 6975              //  ______________________________________________________________________
1873+ 6975              //
1874+ 6975              // +!           n a --
1875+ 6975              // Sums to the content of address a the number n.
1876+ 6975              // It is the same of  a @ n + a !
1877+ 6975                              New_Def PLUSSTORE, "+!", is_code, is_normal
1877+ 6975             >
1877+ 6975             >Dict_Ptr        defl    $
1877+ 6975             >
1877+ 6975             >//              ______________________________________________________________________
1877+ 6975             >//              Heap part
1877+ 6975             >
1877+ 6975             >
1877+ 6975             >                org     (Heap_Ptr & $1FFF) + $E000
1877+ E354             >
1877+ E354             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1877+ E354             >Latest_Definition defl  Heap_Ptr
1877+ E354             >
1877+ E354             >                // dummy db directives used to calculate length of namec
1877+ E354 2B 21       >                db      "+!"
1877+ E356             >len_NFA         defl    $ - temp_NFA
1877+ E356             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1877+ E354             >
1877+ E354 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1877+ E355 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1877+ E357             >                org     $-1                 // alter last byte of Name just above to set
1877+ E356 A1          >                db      {b $} | END_BIT     // msb as name end
1877+ E357             >
1877+ E357 4B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1877+ E359             >Prev_Ptr        defl    Heap_Ptr
1877+ E359             >
1877+ E359             >mirror_Ptr      defl    $
1877+ E359             >
1877+ E359 77 69       >                dw      Dict_Ptr + 2        // xt
1877+ E35B             >Heap_Ptr        defl    $ - $E000           // save current HP
1877+ E35B             >
1877+ E35B             >Current_HP      defl  $ - $E000             // used to set HP once!
1877+ E35B             >
1877+ E35B             >//              ______________________________________________________________________
1877+ E35B             >//              Dictionary part
1877+ E35B             >
1877+ E35B             >                org     Dict_Ptr
1877+ 6975             >
1877+ 6975 59 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1877+ 6977             >
1877+ 6977             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1877+ 6977 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1877+ 6977 ~           >
1877+ 6977 ~           >
1877+ 6977             >                endif           ; ok        // for other definitions it "points" the correct handler
1877+ 6977             >                // Use of "; ok" to suppress "warning[fwdref]"
1877+ 6977             >
1877+ 6977             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1878+ 6977 D9                           exx
1879+ 6978 E1                           pop     hl                  // hl is the address
1880+ 6979 D1                           pop     de                  // de is the number
1881+ 697A 7E                           ld      a, (hl)
1882+ 697B 83                           add     e
1883+ 697C 77                           ld      (hl), a
1884+ 697D 23                           inc     hl
1885+ 697E 7E                           ld      a, (hl)
1886+ 697F 8A                           adc     d
1887+ 6980 77                           ld      (hl), a
1888+ 6981 D9                           exx
1889+ 6982                              next
1889+ 6982 DD E9       >                jp      (ix)
1890+ 6984
1891+ 6984              //  ______________________________________________________________________
1892+ 6984              //
1893+ 6984              // toggle       a n --
1894+ 6984              // Complements (xor) the byte at addrress  a  with the model n.
1895+ 6984                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1895+ 6984             >
1895+ 6984             >Dict_Ptr        defl    $
1895+ 6984             >
1895+ 6984             >//              ______________________________________________________________________
1895+ 6984             >//              Heap part
1895+ 6984             >
1895+ 6984             >
1895+ 6984             >                org     (Heap_Ptr & $1FFF) + $E000
1895+ E35B             >
1895+ E35B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1895+ E35B             >Latest_Definition defl  Heap_Ptr
1895+ E35B             >
1895+ E35B             >                // dummy db directives used to calculate length of namec
1895+ E35B 54 4F 47 47 >                db      "TOGGLE"
1895+ E35F 4C 45       >
1895+ E361             >len_NFA         defl    $ - temp_NFA
1895+ E361             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1895+ E35B             >
1895+ E35B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1895+ E35C 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1895+ E360 4C 45       >
1895+ E362             >                org     $-1                 // alter last byte of Name just above to set
1895+ E361 C5          >                db      {b $} | END_BIT     // msb as name end
1895+ E362             >
1895+ E362 54 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1895+ E364             >Prev_Ptr        defl    Heap_Ptr
1895+ E364             >
1895+ E364             >mirror_Ptr      defl    $
1895+ E364             >
1895+ E364 86 69       >                dw      Dict_Ptr + 2        // xt
1895+ E366             >Heap_Ptr        defl    $ - $E000           // save current HP
1895+ E366             >
1895+ E366             >Current_HP      defl  $ - $E000             // used to set HP once!
1895+ E366             >
1895+ E366             >//              ______________________________________________________________________
1895+ E366             >//              Dictionary part
1895+ E366             >
1895+ E366             >                org     Dict_Ptr
1895+ 6984             >
1895+ 6984 64 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1895+ 6986             >
1895+ 6986             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1895+ 6986 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1895+ 6986 ~           >
1895+ 6986 ~           >
1895+ 6986             >                endif           ; ok        // for other definitions it "points" the correct handler
1895+ 6986             >                // Use of "; ok" to suppress "warning[fwdref]"
1895+ 6986             >
1895+ 6986             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1896+ 6986 E1                           pop     hl
1897+ 6987 7D                           ld      a, l
1898+ 6988 E1                           pop     hl
1899+ 6989 AE                           xor     (hl)
1900+ 698A 77                           ld      (hl), a
1901+ 698B
1902+ 698B                              next
1902+ 698B DD E9       >                jp      (ix)
1903+ 698D
1904+ 698D              //  ______________________________________________________________________
1905+ 698D              //
1906+ 698D              // @            a -- n
1907+ 698D              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1908+ 698D                              New_Def FETCH, "@", is_code, is_normal
1908+ 698D             >
1908+ 698D             >Dict_Ptr        defl    $
1908+ 698D             >
1908+ 698D             >//              ______________________________________________________________________
1908+ 698D             >//              Heap part
1908+ 698D             >
1908+ 698D             >
1908+ 698D             >                org     (Heap_Ptr & $1FFF) + $E000
1908+ E366             >
1908+ E366             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1908+ E366             >Latest_Definition defl  Heap_Ptr
1908+ E366             >
1908+ E366             >                // dummy db directives used to calculate length of namec
1908+ E366 40          >                db      "@"
1908+ E367             >len_NFA         defl    $ - temp_NFA
1908+ E367             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1908+ E366             >
1908+ E366 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1908+ E367 40          >                db      "@"               // name string in 7-bit ascii, but
1908+ E368             >                org     $-1                 // alter last byte of Name just above to set
1908+ E367 C0          >                db      {b $} | END_BIT     // msb as name end
1908+ E368             >
1908+ E368 5B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1908+ E36A             >Prev_Ptr        defl    Heap_Ptr
1908+ E36A             >
1908+ E36A             >mirror_Ptr      defl    $
1908+ E36A             >
1908+ E36A 8F 69       >                dw      Dict_Ptr + 2        // xt
1908+ E36C             >Heap_Ptr        defl    $ - $E000           // save current HP
1908+ E36C             >
1908+ E36C             >Current_HP      defl  $ - $E000             // used to set HP once!
1908+ E36C             >
1908+ E36C             >//              ______________________________________________________________________
1908+ E36C             >//              Dictionary part
1908+ E36C             >
1908+ E36C             >                org     Dict_Ptr
1908+ 698D             >
1908+ 698D 6A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1908+ 698F             >
1908+ 698F             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1908+ 698F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1908+ 698F ~           >
1908+ 698F ~           >
1908+ 698F             >                endif           ; ok        // for other definitions it "points" the correct handler
1908+ 698F             >                // Use of "; ok" to suppress "warning[fwdref]"
1908+ 698F             >
1908+ 698F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1909+ 698F E1                           pop     hl
1910+ 6990 7E                           ld      a, (hl)             // low-byte
1911+ 6991 23                           inc     hl
1912+ 6992 66                           ld      h, (hl)             // high-byte
1913+ 6993 6F                           ld      l, a
1914+ 6994 E5                           push    hl
1915+ 6995                              next
1915+ 6995 DD E9       >                jp      (ix)
1916+ 6997
1917+ 6997              //  ______________________________________________________________________
1918+ 6997              //
1919+ 6997              // !            n a --
1920+ 6997              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1921+ 6997                              New_Def STORE, "!", is_code, is_normal
1921+ 6997             >
1921+ 6997             >Dict_Ptr        defl    $
1921+ 6997             >
1921+ 6997             >//              ______________________________________________________________________
1921+ 6997             >//              Heap part
1921+ 6997             >
1921+ 6997             >
1921+ 6997             >                org     (Heap_Ptr & $1FFF) + $E000
1921+ E36C             >
1921+ E36C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1921+ E36C             >Latest_Definition defl  Heap_Ptr
1921+ E36C             >
1921+ E36C             >                // dummy db directives used to calculate length of namec
1921+ E36C 21          >                db      "!"
1921+ E36D             >len_NFA         defl    $ - temp_NFA
1921+ E36D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1921+ E36C             >
1921+ E36C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1921+ E36D 21          >                db      "!"               // name string in 7-bit ascii, but
1921+ E36E             >                org     $-1                 // alter last byte of Name just above to set
1921+ E36D A1          >                db      {b $} | END_BIT     // msb as name end
1921+ E36E             >
1921+ E36E 66 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1921+ E370             >Prev_Ptr        defl    Heap_Ptr
1921+ E370             >
1921+ E370             >mirror_Ptr      defl    $
1921+ E370             >
1921+ E370 99 69       >                dw      Dict_Ptr + 2        // xt
1921+ E372             >Heap_Ptr        defl    $ - $E000           // save current HP
1921+ E372             >
1921+ E372             >Current_HP      defl  $ - $E000             // used to set HP once!
1921+ E372             >
1921+ E372             >//              ______________________________________________________________________
1921+ E372             >//              Dictionary part
1921+ E372             >
1921+ E372             >                org     Dict_Ptr
1921+ 6997             >
1921+ 6997 70 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1921+ 6999             >
1921+ 6999             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1921+ 6999 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1921+ 6999 ~           >
1921+ 6999 ~           >
1921+ 6999             >                endif           ; ok        // for other definitions it "points" the correct handler
1921+ 6999             >                // Use of "; ok" to suppress "warning[fwdref]"
1921+ 6999             >
1921+ 6999             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1922+ 6999 D9                           exx
1923+ 699A E1                           pop     hl                  // address
1924+ 699B D1                           pop     de                  // < n
1925+ 699C 73                           ld      (hl), e             // low-byte
1926+ 699D 23                           inc     hl
1927+ 699E 72                           ld      (hl), d             // high-byte
1928+ 699F D9                           exx
1929+ 69A0                              next
1929+ 69A0 DD E9       >                jp      (ix)
1930+ 69A2
1931+ 69A2              //  ______________________________________________________________________
1932+ 69A2              //
1933+ 69A2              // c@           a -- c
1934+ 69A2              // fetch a character n from address a
1935+ 69A2                              New_Def CFETCH, "C@", is_code, is_normal
1935+ 69A2             >
1935+ 69A2             >Dict_Ptr        defl    $
1935+ 69A2             >
1935+ 69A2             >//              ______________________________________________________________________
1935+ 69A2             >//              Heap part
1935+ 69A2             >
1935+ 69A2             >
1935+ 69A2             >                org     (Heap_Ptr & $1FFF) + $E000
1935+ E372             >
1935+ E372             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1935+ E372             >Latest_Definition defl  Heap_Ptr
1935+ E372             >
1935+ E372             >                // dummy db directives used to calculate length of namec
1935+ E372 43 40       >                db      "C@"
1935+ E374             >len_NFA         defl    $ - temp_NFA
1935+ E374             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1935+ E372             >
1935+ E372 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1935+ E373 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1935+ E375             >                org     $-1                 // alter last byte of Name just above to set
1935+ E374 C0          >                db      {b $} | END_BIT     // msb as name end
1935+ E375             >
1935+ E375 6C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1935+ E377             >Prev_Ptr        defl    Heap_Ptr
1935+ E377             >
1935+ E377             >mirror_Ptr      defl    $
1935+ E377             >
1935+ E377 A4 69       >                dw      Dict_Ptr + 2        // xt
1935+ E379             >Heap_Ptr        defl    $ - $E000           // save current HP
1935+ E379             >
1935+ E379             >Current_HP      defl  $ - $E000             // used to set HP once!
1935+ E379             >
1935+ E379             >//              ______________________________________________________________________
1935+ E379             >//              Dictionary part
1935+ E379             >
1935+ E379             >                org     Dict_Ptr
1935+ 69A2             >
1935+ 69A2 77 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1935+ 69A4             >
1935+ 69A4             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1935+ 69A4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1935+ 69A4 ~           >
1935+ 69A4 ~           >
1935+ 69A4             >                endif           ; ok        // for other definitions it "points" the correct handler
1935+ 69A4             >                // Use of "; ok" to suppress "warning[fwdref]"
1935+ 69A4             >
1935+ 69A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1936+ 69A4 E1                           pop     hl
1937+ 69A5 6E                           ld      l, (hl)             // low-byte
1938+ 69A6 26 00                        ld      h, 0
1939+ 69A8
1940+ 69A8                              psh1
1940+ 69A8 E5          >                push    hl
1940+ 69A9 DD E9       >                jp      (ix)
1941+ 69AB
1942+ 69AB              //  ______________________________________________________________________
1943+ 69AB              //
1944+ 69AB              // c!           c a --
1945+ 69AB              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1946+ 69AB                              New_Def CSTORE, "C!", is_code, is_normal
1946+ 69AB             >
1946+ 69AB             >Dict_Ptr        defl    $
1946+ 69AB             >
1946+ 69AB             >//              ______________________________________________________________________
1946+ 69AB             >//              Heap part
1946+ 69AB             >
1946+ 69AB             >
1946+ 69AB             >                org     (Heap_Ptr & $1FFF) + $E000
1946+ E379             >
1946+ E379             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1946+ E379             >Latest_Definition defl  Heap_Ptr
1946+ E379             >
1946+ E379             >                // dummy db directives used to calculate length of namec
1946+ E379 43 21       >                db      "C!"
1946+ E37B             >len_NFA         defl    $ - temp_NFA
1946+ E37B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1946+ E379             >
1946+ E379 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1946+ E37A 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1946+ E37C             >                org     $-1                 // alter last byte of Name just above to set
1946+ E37B A1          >                db      {b $} | END_BIT     // msb as name end
1946+ E37C             >
1946+ E37C 72 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1946+ E37E             >Prev_Ptr        defl    Heap_Ptr
1946+ E37E             >
1946+ E37E             >mirror_Ptr      defl    $
1946+ E37E             >
1946+ E37E AD 69       >                dw      Dict_Ptr + 2        // xt
1946+ E380             >Heap_Ptr        defl    $ - $E000           // save current HP
1946+ E380             >
1946+ E380             >Current_HP      defl  $ - $E000             // used to set HP once!
1946+ E380             >
1946+ E380             >//              ______________________________________________________________________
1946+ E380             >//              Dictionary part
1946+ E380             >
1946+ E380             >                org     Dict_Ptr
1946+ 69AB             >
1946+ 69AB 7E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1946+ 69AD             >
1946+ 69AD             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1946+ 69AD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1946+ 69AD ~           >
1946+ 69AD ~           >
1946+ 69AD             >                endif           ; ok        // for other definitions it "points" the correct handler
1946+ 69AD             >                // Use of "; ok" to suppress "warning[fwdref]"
1946+ 69AD             >
1946+ 69AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1947+ 69AD D9                           exx
1948+ 69AE E1                           pop     hl                  // < address
1949+ 69AF D1                           pop     de
1950+ 69B0 73                           ld      (hl), e             // low-byte
1951+ 69B1 D9                           exx
1952+ 69B2                              next
1952+ 69B2 DD E9       >                jp      (ix)
1953+ 69B4
1954+ 69B4              //  ______________________________________________________________________
1955+ 69B4              //
1956+ 69B4              // 2@           a -- d
1957+ 69B4              // fetch a 32 bits number d from address a and leaves it on top of the
1958+ 69B4              // stack as two single numbers, high part as top of the stack.
1959+ 69B4              // A double number is normally kept in CPU registers as HLDE.
1960+ 69B4              // On stack a double number is treated as two single numbers
1961+ 69B4              // where BC is on the top of the stack and HL is the second from top,
1962+ 69B4              // so the sign of the number can be checked on top of stack
1963+ 69B4              // and in the stack memory it appears as LHED.
1964+ 69B4                              New_Def TWO_FETCH, "2@", is_code, is_normal
1964+ 69B4             >
1964+ 69B4             >Dict_Ptr        defl    $
1964+ 69B4             >
1964+ 69B4             >//              ______________________________________________________________________
1964+ 69B4             >//              Heap part
1964+ 69B4             >
1964+ 69B4             >
1964+ 69B4             >                org     (Heap_Ptr & $1FFF) + $E000
1964+ E380             >
1964+ E380             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1964+ E380             >Latest_Definition defl  Heap_Ptr
1964+ E380             >
1964+ E380             >                // dummy db directives used to calculate length of namec
1964+ E380 32 40       >                db      "2@"
1964+ E382             >len_NFA         defl    $ - temp_NFA
1964+ E382             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1964+ E380             >
1964+ E380 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1964+ E381 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1964+ E383             >                org     $-1                 // alter last byte of Name just above to set
1964+ E382 C0          >                db      {b $} | END_BIT     // msb as name end
1964+ E383             >
1964+ E383 79 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1964+ E385             >Prev_Ptr        defl    Heap_Ptr
1964+ E385             >
1964+ E385             >mirror_Ptr      defl    $
1964+ E385             >
1964+ E385 B6 69       >                dw      Dict_Ptr + 2        // xt
1964+ E387             >Heap_Ptr        defl    $ - $E000           // save current HP
1964+ E387             >
1964+ E387             >Current_HP      defl  $ - $E000             // used to set HP once!
1964+ E387             >
1964+ E387             >//              ______________________________________________________________________
1964+ E387             >//              Dictionary part
1964+ E387             >
1964+ E387             >                org     Dict_Ptr
1964+ 69B4             >
1964+ 69B4 85 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1964+ 69B6             >
1964+ 69B6             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1964+ 69B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1964+ 69B6 ~           >
1964+ 69B6 ~           >
1964+ 69B6             >                endif           ; ok        // for other definitions it "points" the correct handler
1964+ 69B6             >                // Use of "; ok" to suppress "warning[fwdref]"
1964+ 69B6             >
1964+ 69B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1965+ 69B6 D9                           exx
1966+ 69B7 E1                           pop     hl                  // address
1967+ 69B8 5E                           ld      e, (hl)             // low-byte
1968+ 69B9 23                           inc     hl
1969+ 69BA 56                           ld      d, (hl)             // high-byte
1970+ 69BB 23                           inc     hl
1971+ 69BC 4E                           ld      c, (hl)             // low-byte
1972+ 69BD 23                           inc     hl
1973+ 69BE 46                           ld      b, (hl)             // high-byte
1974+ 69BF C5                           push    bc
1975+ 69C0 D5                           push    de
1976+ 69C1 D9                           exx
1977+ 69C2                              next
1977+ 69C2 DD E9       >                jp      (ix)
1978+ 69C4
1979+ 69C4              //  ______________________________________________________________________
1980+ 69C4              //
1981+ 69C4              // 2!           d a --
1982+ 69C4              // stores a 32 bits number d from address a and leaves it on top of the
1983+ 69C4              // stack as two single numbers, high part as top of the stack.
1984+ 69C4              // A double number is normally kept in CPU registers as HLDE.
1985+ 69C4              // On stack a double number is treated as two single numbers
1986+ 69C4              // where BC is on the top of the stack and HL is the second from top,
1987+ 69C4              // so the sign of the number can be checked on top of stack
1988+ 69C4              // and in the stack memory it appears as LHED.
1989+ 69C4                              New_Def TWO_STORE, "2!", is_code, is_normal
1989+ 69C4             >
1989+ 69C4             >Dict_Ptr        defl    $
1989+ 69C4             >
1989+ 69C4             >//              ______________________________________________________________________
1989+ 69C4             >//              Heap part
1989+ 69C4             >
1989+ 69C4             >
1989+ 69C4             >                org     (Heap_Ptr & $1FFF) + $E000
1989+ E387             >
1989+ E387             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1989+ E387             >Latest_Definition defl  Heap_Ptr
1989+ E387             >
1989+ E387             >                // dummy db directives used to calculate length of namec
1989+ E387 32 21       >                db      "2!"
1989+ E389             >len_NFA         defl    $ - temp_NFA
1989+ E389             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1989+ E387             >
1989+ E387 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1989+ E388 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1989+ E38A             >                org     $-1                 // alter last byte of Name just above to set
1989+ E389 A1          >                db      {b $} | END_BIT     // msb as name end
1989+ E38A             >
1989+ E38A 80 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1989+ E38C             >Prev_Ptr        defl    Heap_Ptr
1989+ E38C             >
1989+ E38C             >mirror_Ptr      defl    $
1989+ E38C             >
1989+ E38C C6 69       >                dw      Dict_Ptr + 2        // xt
1989+ E38E             >Heap_Ptr        defl    $ - $E000           // save current HP
1989+ E38E             >
1989+ E38E             >Current_HP      defl  $ - $E000             // used to set HP once!
1989+ E38E             >
1989+ E38E             >//              ______________________________________________________________________
1989+ E38E             >//              Dictionary part
1989+ E38E             >
1989+ E38E             >                org     Dict_Ptr
1989+ 69C4             >
1989+ 69C4 8C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1989+ 69C6             >
1989+ 69C6             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1989+ 69C6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1989+ 69C6 ~           >
1989+ 69C6 ~           >
1989+ 69C6             >                endif           ; ok        // for other definitions it "points" the correct handler
1989+ 69C6             >                // Use of "; ok" to suppress "warning[fwdref]"
1989+ 69C6             >
1989+ 69C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1990+ 69C6 D9                           exx
1991+ 69C7 E1                           pop     hl                  // address
1992+ 69C8 C1                           pop     bc                  // < high-part
1993+ 69C9 D1                           pop     de                  // < low-part > Instruction Pointer
1994+ 69CA 71                           ld      (hl), c
1995+ 69CB 23                           inc     hl
1996+ 69CC 70                           ld      (hl), b
1997+ 69CD 23                           inc     hl
1998+ 69CE 73                           ld      (hl), e
1999+ 69CF 23                           inc     hl
2000+ 69D0 72                           ld      (hl), d
2001+ 69D1 D9                           exx
2002+ 69D2                              next
2002+ 69D2 DD E9       >                jp      (ix)
2003+ 69D4
2004+ 69D4              //  ______________________________________________________________________
2005+ 69D4              //
2006+ 69D4              // p@           a -- c
2007+ 69D4              // Read one byte from port a and leave the result on top of stack
2008+ 69D4                              New_Def PFETCH, "P@", is_code, is_normal
2008+ 69D4             >
2008+ 69D4             >Dict_Ptr        defl    $
2008+ 69D4             >
2008+ 69D4             >//              ______________________________________________________________________
2008+ 69D4             >//              Heap part
2008+ 69D4             >
2008+ 69D4             >
2008+ 69D4             >                org     (Heap_Ptr & $1FFF) + $E000
2008+ E38E             >
2008+ E38E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2008+ E38E             >Latest_Definition defl  Heap_Ptr
2008+ E38E             >
2008+ E38E             >                // dummy db directives used to calculate length of namec
2008+ E38E 50 40       >                db      "P@"
2008+ E390             >len_NFA         defl    $ - temp_NFA
2008+ E390             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2008+ E38E             >
2008+ E38E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2008+ E38F 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2008+ E391             >                org     $-1                 // alter last byte of Name just above to set
2008+ E390 C0          >                db      {b $} | END_BIT     // msb as name end
2008+ E391             >
2008+ E391 87 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2008+ E393             >Prev_Ptr        defl    Heap_Ptr
2008+ E393             >
2008+ E393             >mirror_Ptr      defl    $
2008+ E393             >
2008+ E393 D6 69       >                dw      Dict_Ptr + 2        // xt
2008+ E395             >Heap_Ptr        defl    $ - $E000           // save current HP
2008+ E395             >
2008+ E395             >Current_HP      defl  $ - $E000             // used to set HP once!
2008+ E395             >
2008+ E395             >//              ______________________________________________________________________
2008+ E395             >//              Dictionary part
2008+ E395             >
2008+ E395             >                org     Dict_Ptr
2008+ 69D4             >
2008+ 69D4 93 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2008+ 69D6             >
2008+ 69D6             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2008+ 69D6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2008+ 69D6 ~           >
2008+ 69D6 ~           >
2008+ 69D6             >                endif           ; ok        // for other definitions it "points" the correct handler
2008+ 69D6             >                // Use of "; ok" to suppress "warning[fwdref]"
2008+ 69D6             >
2008+ 69D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2009+ 69D6 D9                           exx
2010+ 69D7 C1                           pop     bc
2011+ 69D8 26 00                        ld      h, 0
2012+ 69DA ED 68                        in      l, (c)
2013+ 69DC E5                           push    hl
2014+ 69DD D9                           exx
2015+ 69DE                              next
2015+ 69DE DD E9       >                jp      (ix)
2016+ 69E0
2017+ 69E0              //  ______________________________________________________________________
2018+ 69E0              //
2019+ 69E0              // p!           c a --
2020+ 69E0              // Send one byte (top of stack) to port a
2021+ 69E0                              New_Def PSTORE, "P!", is_code, is_normal
2021+ 69E0             >
2021+ 69E0             >Dict_Ptr        defl    $
2021+ 69E0             >
2021+ 69E0             >//              ______________________________________________________________________
2021+ 69E0             >//              Heap part
2021+ 69E0             >
2021+ 69E0             >
2021+ 69E0             >                org     (Heap_Ptr & $1FFF) + $E000
2021+ E395             >
2021+ E395             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2021+ E395             >Latest_Definition defl  Heap_Ptr
2021+ E395             >
2021+ E395             >                // dummy db directives used to calculate length of namec
2021+ E395 50 21       >                db      "P!"
2021+ E397             >len_NFA         defl    $ - temp_NFA
2021+ E397             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2021+ E395             >
2021+ E395 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2021+ E396 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2021+ E398             >                org     $-1                 // alter last byte of Name just above to set
2021+ E397 A1          >                db      {b $} | END_BIT     // msb as name end
2021+ E398             >
2021+ E398 8E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2021+ E39A             >Prev_Ptr        defl    Heap_Ptr
2021+ E39A             >
2021+ E39A             >mirror_Ptr      defl    $
2021+ E39A             >
2021+ E39A E2 69       >                dw      Dict_Ptr + 2        // xt
2021+ E39C             >Heap_Ptr        defl    $ - $E000           // save current HP
2021+ E39C             >
2021+ E39C             >Current_HP      defl  $ - $E000             // used to set HP once!
2021+ E39C             >
2021+ E39C             >//              ______________________________________________________________________
2021+ E39C             >//              Dictionary part
2021+ E39C             >
2021+ E39C             >                org     Dict_Ptr
2021+ 69E0             >
2021+ 69E0 9A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2021+ 69E2             >
2021+ 69E2             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2021+ 69E2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2021+ 69E2 ~           >
2021+ 69E2 ~           >
2021+ 69E2             >                endif           ; ok        // for other definitions it "points" the correct handler
2021+ 69E2             >                // Use of "; ok" to suppress "warning[fwdref]"
2021+ 69E2             >
2021+ 69E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2022+ 69E2 D9                           exx
2023+ 69E3 C1                           pop     bc
2024+ 69E4 E1                           pop     hl                  // < c
2025+ 69E5 ED 69                        out     (c), l              // low-byte
2026+ 69E7 D9                           exx
2027+ 69E8                              next
2027+ 69E8 DD E9       >                jp      (ix)
2028+ 69EA
2029+ 69EA
2030+ 69EA              //  ______________________________________________________________________
2031+ 69EA              //
2032+ 69EA              // 2*           n1 -- n2
2033+ 69EA              // doubles the number at top of stack
2034+ 69EA                              New_Def TWO_MUL, "2*", is_code, is_normal
2034+ 69EA             >
2034+ 69EA             >Dict_Ptr        defl    $
2034+ 69EA             >
2034+ 69EA             >//              ______________________________________________________________________
2034+ 69EA             >//              Heap part
2034+ 69EA             >
2034+ 69EA             >
2034+ 69EA             >                org     (Heap_Ptr & $1FFF) + $E000
2034+ E39C             >
2034+ E39C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2034+ E39C             >Latest_Definition defl  Heap_Ptr
2034+ E39C             >
2034+ E39C             >                // dummy db directives used to calculate length of namec
2034+ E39C 32 2A       >                db      "2*"
2034+ E39E             >len_NFA         defl    $ - temp_NFA
2034+ E39E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2034+ E39C             >
2034+ E39C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2034+ E39D 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2034+ E39F             >                org     $-1                 // alter last byte of Name just above to set
2034+ E39E AA          >                db      {b $} | END_BIT     // msb as name end
2034+ E39F             >
2034+ E39F 95 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2034+ E3A1             >Prev_Ptr        defl    Heap_Ptr
2034+ E3A1             >
2034+ E3A1             >mirror_Ptr      defl    $
2034+ E3A1             >
2034+ E3A1 EC 69       >                dw      Dict_Ptr + 2        // xt
2034+ E3A3             >Heap_Ptr        defl    $ - $E000           // save current HP
2034+ E3A3             >
2034+ E3A3             >Current_HP      defl  $ - $E000             // used to set HP once!
2034+ E3A3             >
2034+ E3A3             >//              ______________________________________________________________________
2034+ E3A3             >//              Dictionary part
2034+ E3A3             >
2034+ E3A3             >                org     Dict_Ptr
2034+ 69EA             >
2034+ 69EA A1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2034+ 69EC             >
2034+ 69EC             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2034+ 69EC ~           >                call    runcode ; ok        // for primitive definitions  actual code
2034+ 69EC ~           >
2034+ 69EC ~           >
2034+ 69EC             >                endif           ; ok        // for other definitions it "points" the correct handler
2034+ 69EC             >                // Use of "; ok" to suppress "warning[fwdref]"
2034+ 69EC             >
2034+ 69EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2035+ 69EC              Two_Mul_Ptr:
2036+ 69EC E1                           pop     hl
2037+ 69ED 29                           add     hl, hl
2038+ 69EE
2039+ 69EE                              psh1
2039+ 69EE E5          >                push    hl
2039+ 69EF DD E9       >                jp      (ix)
2040+ 69F1
2041+ 69F1              //  ______________________________________________________________________
2042+ 69F1              //
2043+ 69F1              // 2/           n1 -- n2
2044+ 69F1              // halves the top of stack, sign is unchanged
2045+ 69F1                              New_Def TWO_DIV, "2/", is_code, is_normal
2045+ 69F1             >
2045+ 69F1             >Dict_Ptr        defl    $
2045+ 69F1             >
2045+ 69F1             >//              ______________________________________________________________________
2045+ 69F1             >//              Heap part
2045+ 69F1             >
2045+ 69F1             >
2045+ 69F1             >                org     (Heap_Ptr & $1FFF) + $E000
2045+ E3A3             >
2045+ E3A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2045+ E3A3             >Latest_Definition defl  Heap_Ptr
2045+ E3A3             >
2045+ E3A3             >                // dummy db directives used to calculate length of namec
2045+ E3A3 32 2F       >                db      "2/"
2045+ E3A5             >len_NFA         defl    $ - temp_NFA
2045+ E3A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2045+ E3A3             >
2045+ E3A3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2045+ E3A4 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2045+ E3A6             >                org     $-1                 // alter last byte of Name just above to set
2045+ E3A5 AF          >                db      {b $} | END_BIT     // msb as name end
2045+ E3A6             >
2045+ E3A6 9C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2045+ E3A8             >Prev_Ptr        defl    Heap_Ptr
2045+ E3A8             >
2045+ E3A8             >mirror_Ptr      defl    $
2045+ E3A8             >
2045+ E3A8 F3 69       >                dw      Dict_Ptr + 2        // xt
2045+ E3AA             >Heap_Ptr        defl    $ - $E000           // save current HP
2045+ E3AA             >
2045+ E3AA             >Current_HP      defl  $ - $E000             // used to set HP once!
2045+ E3AA             >
2045+ E3AA             >//              ______________________________________________________________________
2045+ E3AA             >//              Dictionary part
2045+ E3AA             >
2045+ E3AA             >                org     Dict_Ptr
2045+ 69F1             >
2045+ 69F1 A8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2045+ 69F3             >
2045+ 69F3             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2045+ 69F3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2045+ 69F3 ~           >
2045+ 69F3 ~           >
2045+ 69F3             >                endif           ; ok        // for other definitions it "points" the correct handler
2045+ 69F3             >                // Use of "; ok" to suppress "warning[fwdref]"
2045+ 69F3             >
2045+ 69F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2046+ 69F3 E1                           pop     hl
2047+ 69F4 CB 2C                        sra     h
2048+ 69F6 CB 1D                        rr      l
2049+ 69F8
2050+ 69F8                              psh1
2050+ 69F8 E5          >                push    hl
2050+ 69F9 DD E9       >                jp      (ix)
2051+ 69FB
2052+ 69FB              //  ______________________________________________________________________
2053+ 69FB              //
2054+ 69FB              // lshift       n1 u -- n2
2055+ 69FB              // bit left shift of u bits
2056+ 69FB                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2056+ 69FB             >
2056+ 69FB             >Dict_Ptr        defl    $
2056+ 69FB             >
2056+ 69FB             >//              ______________________________________________________________________
2056+ 69FB             >//              Heap part
2056+ 69FB             >
2056+ 69FB             >
2056+ 69FB             >                org     (Heap_Ptr & $1FFF) + $E000
2056+ E3AA             >
2056+ E3AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2056+ E3AA             >Latest_Definition defl  Heap_Ptr
2056+ E3AA             >
2056+ E3AA             >                // dummy db directives used to calculate length of namec
2056+ E3AA 4C 53 48 49 >                db      "LSHIFT"
2056+ E3AE 46 54       >
2056+ E3B0             >len_NFA         defl    $ - temp_NFA
2056+ E3B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2056+ E3AA             >
2056+ E3AA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2056+ E3AB 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2056+ E3AF 46 54       >
2056+ E3B1             >                org     $-1                 // alter last byte of Name just above to set
2056+ E3B0 D4          >                db      {b $} | END_BIT     // msb as name end
2056+ E3B1             >
2056+ E3B1 A3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2056+ E3B3             >Prev_Ptr        defl    Heap_Ptr
2056+ E3B3             >
2056+ E3B3             >mirror_Ptr      defl    $
2056+ E3B3             >
2056+ E3B3 FD 69       >                dw      Dict_Ptr + 2        // xt
2056+ E3B5             >Heap_Ptr        defl    $ - $E000           // save current HP
2056+ E3B5             >
2056+ E3B5             >Current_HP      defl  $ - $E000             // used to set HP once!
2056+ E3B5             >
2056+ E3B5             >//              ______________________________________________________________________
2056+ E3B5             >//              Dictionary part
2056+ E3B5             >
2056+ E3B5             >                org     Dict_Ptr
2056+ 69FB             >
2056+ 69FB B3 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2056+ 69FD             >
2056+ 69FD             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2056+ 69FD ~           >                call    runcode ; ok        // for primitive definitions  actual code
2056+ 69FD ~           >
2056+ 69FD ~           >
2056+ 69FD             >                endif           ; ok        // for other definitions it "points" the correct handler
2056+ 69FD             >                // Use of "; ok" to suppress "warning[fwdref]"
2056+ 69FD             >
2056+ 69FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2057+ 69FD D9                           exx
2058+ 69FE C1                           pop     bc
2059+ 69FF 41                           ld      b, c
2060+ 6A00 D1                           pop     de
2061+ 6A01 ED 28                        bsla    de, b
2062+ 6A03 D5                           push    de
2063+ 6A04 D9                           exx
2064+ 6A05                              next
2064+ 6A05 DD E9       >                jp      (ix)
2065+ 6A07
2066+ 6A07              //  ______________________________________________________________________
2067+ 6A07              //
2068+ 6A07              // rshift       n1 u -- n2
2069+ 6A07              // bit right shift of u bits
2070+ 6A07                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2070+ 6A07             >
2070+ 6A07             >Dict_Ptr        defl    $
2070+ 6A07             >
2070+ 6A07             >//              ______________________________________________________________________
2070+ 6A07             >//              Heap part
2070+ 6A07             >
2070+ 6A07             >
2070+ 6A07             >                org     (Heap_Ptr & $1FFF) + $E000
2070+ E3B5             >
2070+ E3B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2070+ E3B5             >Latest_Definition defl  Heap_Ptr
2070+ E3B5             >
2070+ E3B5             >                // dummy db directives used to calculate length of namec
2070+ E3B5 52 53 48 49 >                db      "RSHIFT"
2070+ E3B9 46 54       >
2070+ E3BB             >len_NFA         defl    $ - temp_NFA
2070+ E3BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2070+ E3B5             >
2070+ E3B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2070+ E3B6 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2070+ E3BA 46 54       >
2070+ E3BC             >                org     $-1                 // alter last byte of Name just above to set
2070+ E3BB D4          >                db      {b $} | END_BIT     // msb as name end
2070+ E3BC             >
2070+ E3BC AA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2070+ E3BE             >Prev_Ptr        defl    Heap_Ptr
2070+ E3BE             >
2070+ E3BE             >mirror_Ptr      defl    $
2070+ E3BE             >
2070+ E3BE 09 6A       >                dw      Dict_Ptr + 2        // xt
2070+ E3C0             >Heap_Ptr        defl    $ - $E000           // save current HP
2070+ E3C0             >
2070+ E3C0             >Current_HP      defl  $ - $E000             // used to set HP once!
2070+ E3C0             >
2070+ E3C0             >//              ______________________________________________________________________
2070+ E3C0             >//              Dictionary part
2070+ E3C0             >
2070+ E3C0             >                org     Dict_Ptr
2070+ 6A07             >
2070+ 6A07 BE 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2070+ 6A09             >
2070+ 6A09             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2070+ 6A09 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2070+ 6A09 ~           >
2070+ 6A09 ~           >
2070+ 6A09             >                endif           ; ok        // for other definitions it "points" the correct handler
2070+ 6A09             >                // Use of "; ok" to suppress "warning[fwdref]"
2070+ 6A09             >
2070+ 6A09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2071+ 6A09 D9                           exx
2072+ 6A0A C1                           pop     bc
2073+ 6A0B 41                           ld      b, c
2074+ 6A0C D1                           pop     de
2075+ 6A0D ED 2A                        bsrl    de, b
2076+ 6A0F D5                           push    de
2077+ 6A10 D9                           exx
2078+ 6A11                              next
2078+ 6A11 DD E9       >                jp      (ix)
2079+ 6A13
2080+ 6A13              //  ______________________________________________________________________
2081+ 6A13              //
2082+ 6A13              // cells        n1 -- n2
2083+ 6A13              // decrement by 2 top of stack
2084+ 6A13                              New_Def CELLS, "CELLS", is_code, is_normal
2084+ 6A13             >
2084+ 6A13             >Dict_Ptr        defl    $
2084+ 6A13             >
2084+ 6A13             >//              ______________________________________________________________________
2084+ 6A13             >//              Heap part
2084+ 6A13             >
2084+ 6A13             >
2084+ 6A13             >                org     (Heap_Ptr & $1FFF) + $E000
2084+ E3C0             >
2084+ E3C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2084+ E3C0             >Latest_Definition defl  Heap_Ptr
2084+ E3C0             >
2084+ E3C0             >                // dummy db directives used to calculate length of namec
2084+ E3C0 43 45 4C 4C >                db      "CELLS"
2084+ E3C4 53          >
2084+ E3C5             >len_NFA         defl    $ - temp_NFA
2084+ E3C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2084+ E3C0             >
2084+ E3C0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2084+ E3C1 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2084+ E3C5 53          >
2084+ E3C6             >                org     $-1                 // alter last byte of Name just above to set
2084+ E3C5 D3          >                db      {b $} | END_BIT     // msb as name end
2084+ E3C6             >
2084+ E3C6 B5 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2084+ E3C8             >Prev_Ptr        defl    Heap_Ptr
2084+ E3C8             >
2084+ E3C8             >mirror_Ptr      defl    $
2084+ E3C8             >
2084+ E3C8 15 6A       >                dw      Dict_Ptr + 2        // xt
2084+ E3CA             >Heap_Ptr        defl    $ - $E000           // save current HP
2084+ E3CA             >
2084+ E3CA             >Current_HP      defl  $ - $E000             // used to set HP once!
2084+ E3CA             >
2084+ E3CA             >//              ______________________________________________________________________
2084+ E3CA             >//              Dictionary part
2084+ E3CA             >
2084+ E3CA             >                org     Dict_Ptr
2084+ 6A13             >
2084+ 6A13 C8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2084+ 6A15             >
2084+ 6A15             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2084+ 6A15 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2084+ 6A15 ~           >
2084+ 6A15 ~           >
2084+ 6A15             >                endif           ; ok        // for other definitions it "points" the correct handler
2084+ 6A15             >                // Use of "; ok" to suppress "warning[fwdref]"
2084+ 6A15             >
2084+ 6A15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2085+ 6A15 18 D5                        jr      Two_Mul_Ptr
2086+ 6A17
2087+ 6A17
2088+ 6A17              //  ______________________________________________________________________
2089+ 6A17
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
 139  6A17                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
   1+ 6A17              //  ______________________________________________________________________
   2+ 6A17              //
   3+ 6A17              //  L1.asm
   4+ 6A17              //
   5+ 6A17              //  Level-1 definitions and derivate
   6+ 6A17              //  ______________________________________________________________________
   7+ 6A17
   8+ 6A17              //  ______________________________________________________________________
   9+ 6A17              //
  10+ 6A17              // :            -- cccc     ( compile time )
  11+ 6A17              //              i*x -- j*x  ( run time )
  12+ 6A17              // Colon Definition
  13+ 6A17                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6A17             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6A17             >
  13+ 6A17             >Dict_Ptr        defl    $
  13+ 6A17             >
  13+ 6A17             >//              ______________________________________________________________________
  13+ 6A17             >//              Heap part
  13+ 6A17             >
  13+ 6A17             >
  13+ 6A17             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3CA             >
  13+ E3CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3CA             >Latest_Definition defl  Heap_Ptr
  13+ E3CA             >
  13+ E3CA             >                // dummy db directives used to calculate length of namec
  13+ E3CA 3A          >                db      ":"
  13+ E3CB             >len_NFA         defl    $ - temp_NFA
  13+ E3CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3CA             >
  13+ E3CA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3CB 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3CC             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3CB BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3CC             >
  13+ E3CC C0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CE             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CE             >
  13+ E3CE             >mirror_Ptr      defl    $
  13+ E3CE             >
  13+ E3CE 19 6A       >                dw      Dict_Ptr + 2        // xt
  13+ E3D0             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3D0             >
  13+ E3D0             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3D0             >
  13+ E3D0             >//              ______________________________________________________________________
  13+ E3D0             >//              Dictionary part
  13+ E3D0             >
  13+ E3D0             >                org     Dict_Ptr
  13+ 6A17             >
  13+ 6A17 CE 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 6A19             >
  13+ 6A19             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6A19 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6A1C             >
  13+ 6A1C             >
  13+ 6A1C             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6A1C             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6A1C             >
  13+ 6A1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6A1C
  15+ 6A1C 06 6E                        dw      QEXEC                   // ?exec
  16+ 6A1E D1 6D                        dw      STORE_CSP               // !csp
  17+ 6A20 4A 6B 8F 69                  dw      CURRENT, FETCH          // current @
  18+ 6A24 44 6B 99 69                  dw      CONTEXT, STORE          // context !
  19+ 6A28 F4 73                        dw      CREATE                  // create  ( forward )
  20+ 6A2A 88 6E                        dw      SMUDGE                  // dmudge
  21+ 6A2C 79 6E                        dw      SQUARED_CLOSE           // ]
  22+ 6A2E C4 6E                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6A30                                                              // ... immediate
  24+ 6A30              Enter_Ptr:
  25+ 6A30                              // via call coded in CFA
  26+ 6A30 EB                           ex      de, hl //**
  27+ 6A31                              // *** ldhlrp
  28+ 6A31 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 6A32 70                           ld      (hl), b
  30+ 6A33 2B                           dec     hl
  31+ 6A34 71                           ld      (hl), c
  32+ 6A35                              // *** ldrphl
  33+ 6A35 EB                           ex      de, hl //**
  34+ 6A36
  35+ 6A36
  36+ 6A36 C1                           pop     bc                  // points to PFA of "this" word
  37+ 6A37                              next
  37+ 6A37 DD E9       >                jp      (ix)
  38+ 6A39
  39+ 6A39              //  ______________________________________________________________________
  40+ 6A39              //
  41+ 6A39              // ;            --
  42+ 6A39              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 6A39                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 6A39             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 6A39             >
  43+ 6A39             >Dict_Ptr        defl    $
  43+ 6A39             >
  43+ 6A39             >//              ______________________________________________________________________
  43+ 6A39             >//              Heap part
  43+ 6A39             >
  43+ 6A39             >
  43+ 6A39             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3D0             >
  43+ E3D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3D0             >Latest_Definition defl  Heap_Ptr
  43+ E3D0             >
  43+ E3D0             >                // dummy db directives used to calculate length of namec
  43+ E3D0 3B          >                db      ";"
  43+ E3D1             >len_NFA         defl    $ - temp_NFA
  43+ E3D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3D0             >
  43+ E3D0 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3D1 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3D2             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3D1 BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3D2             >
  43+ E3D2 CA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D4             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D4             >
  43+ E3D4             >mirror_Ptr      defl    $
  43+ E3D4             >
  43+ E3D4 3B 6A       >                dw      Dict_Ptr + 2        // xt
  43+ E3D6             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D6             >
  43+ E3D6             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D6             >
  43+ E3D6             >//              ______________________________________________________________________
  43+ E3D6             >//              Dictionary part
  43+ E3D6             >
  43+ E3D6             >                org     Dict_Ptr
  43+ 6A39             >
  43+ 6A39 D4 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 6A3B             >
  43+ 6A3B             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 6A3B CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 6A3E             >
  43+ 6A3E             >
  43+ 6A3E             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 6A3E             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 6A3E             >
  43+ 6A3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 6A3E
  45+ 6A3E 26 6E                        dw      QCSP                    // ?csp
  46+ 6A40 4E 6E 4F 68                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 6A44 88 6E                        dw      SMUDGE                  // smudge
  48+ 6A46 6C 6E                        dw      SQUARED_OPEN            // [
  49+ 6A48 4F 68                        dw      EXIT                    // ; immediate
  50+ 6A4A
  51+ 6A4A              //  ______________________________________________________________________
  52+ 6A4A              //
  53+ 6A4A              // noop         --
  54+ 6A4A
  55+ 6A4A                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 6A4A             >
  55+ 6A4A             >Dict_Ptr        defl    $
  55+ 6A4A             >
  55+ 6A4A             >//              ______________________________________________________________________
  55+ 6A4A             >//              Heap part
  55+ 6A4A             >
  55+ 6A4A             >
  55+ 6A4A             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D6             >
  55+ E3D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D6             >Latest_Definition defl  Heap_Ptr
  55+ E3D6             >
  55+ E3D6             >                // dummy db directives used to calculate length of namec
  55+ E3D6 4E 4F 4F 50 >                db      "NOOP"
  55+ E3DA             >len_NFA         defl    $ - temp_NFA
  55+ E3DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D6             >
  55+ E3D6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D7 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3DB             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3DA D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3DB             >
  55+ E3DB D0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DD             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DD             >
  55+ E3DD             >mirror_Ptr      defl    $
  55+ E3DD             >
  55+ E3DD 4C 6A       >                dw      Dict_Ptr + 2        // xt
  55+ E3DF             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DF             >
  55+ E3DF             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DF             >
  55+ E3DF             >//              ______________________________________________________________________
  55+ E3DF             >//              Dictionary part
  55+ E3DF             >
  55+ E3DF             >                org     Dict_Ptr
  55+ 6A4A             >
  55+ 6A4A DD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 6A4C             >
  55+ 6A4C             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 6A4C ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 6A4C ~           >
  55+ 6A4C ~           >
  55+ 6A4C             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 6A4C             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 6A4C             >
  55+ 6A4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 6A4C                              next
  56+ 6A4C DD E9       >                jp      (ix)
  57+ 6A4E
  58+ 6A4E              //  ______________________________________________________________________
  59+ 6A4E              //
  60+ 6A4E              // constant     n -- cccc     ( compile time )
  61+ 6A4E              //              -- n          ( run time )
  62+ 6A4E              // Constant definition.
  63+ 6A4E                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 6A4E             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 6A4E             >
  63+ 6A4E             >Dict_Ptr        defl    $
  63+ 6A4E             >
  63+ 6A4E             >//              ______________________________________________________________________
  63+ 6A4E             >//              Heap part
  63+ 6A4E             >
  63+ 6A4E             >
  63+ 6A4E             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DF             >
  63+ E3DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DF             >Latest_Definition defl  Heap_Ptr
  63+ E3DF             >
  63+ E3DF             >                // dummy db directives used to calculate length of namec
  63+ E3DF 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E3 54 41 4E 54 >
  63+ E3E7             >len_NFA         defl    $ - temp_NFA
  63+ E3E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DF             >
  63+ E3DF 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3E0 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E4 54 41 4E 54 >
  63+ E3E8             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E7 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E8             >
  63+ E3E8 D6 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3EA             >Prev_Ptr        defl    Heap_Ptr
  63+ E3EA             >
  63+ E3EA             >mirror_Ptr      defl    $
  63+ E3EA             >
  63+ E3EA 50 6A       >                dw      Dict_Ptr + 2        // xt
  63+ E3EC             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3EC             >
  63+ E3EC             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3EC             >
  63+ E3EC             >//              ______________________________________________________________________
  63+ E3EC             >//              Dictionary part
  63+ E3EC             >
  63+ E3EC             >                org     Dict_Ptr
  63+ 6A4E             >
  63+ 6A4E EA 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 6A50             >
  63+ 6A50             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 6A50 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 6A53             >
  63+ 6A53             >
  63+ 6A53             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 6A53             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 6A53             >
  63+ 6A53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 6A53 F4 73                        dw      CREATE                  // create
  65+ 6A55 C0 6B                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 6A57 C4 6E                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 6A59              Constant_Ptr:
  68+ 6A59
  69+ 6A59
  70+ 6A59 E1                           pop     hl
  71+ 6A5A
  72+ 6A5A 7E                           ld      a, (hl)
  73+ 6A5B 23                           inc     hl
  74+ 6A5C 66                           ld      h, (hl)
  75+ 6A5D 6F                           ld      l, a
  76+ 6A5E E5                           push    hl
  77+ 6A5F                              next
  77+ 6A5F DD E9       >                jp      (ix)
  78+ 6A61
  79+ 6A61              //  ______________________________________________________________________
  80+ 6A61              //
  81+ 6A61              // variable     n -- cccc     ( compile time )
  82+ 6A61              //              -- a          ( run time )
  83+ 6A61              // Variable definition, n is the initial value.
  84+ 6A61                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 6A61             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 6A61             >
  84+ 6A61             >Dict_Ptr        defl    $
  84+ 6A61             >
  84+ 6A61             >//              ______________________________________________________________________
  84+ 6A61             >//              Heap part
  84+ 6A61             >
  84+ 6A61             >
  84+ 6A61             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3EC             >
  84+ E3EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3EC             >Latest_Definition defl  Heap_Ptr
  84+ E3EC             >
  84+ E3EC             >                // dummy db directives used to calculate length of namec
  84+ E3EC 56 41 52 49 >                db      "VARIABLE"
  84+ E3F0 41 42 4C 45 >
  84+ E3F4             >len_NFA         defl    $ - temp_NFA
  84+ E3F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3EC             >
  84+ E3EC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3ED 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3F1 41 42 4C 45 >
  84+ E3F5             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F4 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F5             >
  84+ E3F5 DF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F7             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F7             >
  84+ E3F7             >mirror_Ptr      defl    $
  84+ E3F7             >
  84+ E3F7 63 6A       >                dw      Dict_Ptr + 2        // xt
  84+ E3F9             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F9             >
  84+ E3F9             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F9             >
  84+ E3F9             >//              ______________________________________________________________________
  84+ E3F9             >//              Dictionary part
  84+ E3F9             >
  84+ E3F9             >                org     Dict_Ptr
  84+ 6A61             >
  84+ 6A61 F7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 6A63             >
  84+ 6A63             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 6A63 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 6A66             >
  84+ 6A66             >
  84+ 6A66             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 6A66             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 6A66             >
  84+ 6A66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 6A66
  86+ 6A66 85 6A                        dw      ZERO
  87+ 6A68 50 6A                        dw      CONSTANT                // constant
  88+ 6A6A C4 6E                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 6A6C              Variable_Ptr:
  90+ 6A6C
  91+ 6A6C
  92+ 6A6C
  93+ 6A6C
  94+ 6A6C                              next
  94+ 6A6C DD E9       >                jp      (ix)
  95+ 6A6E
  96+ 6A6E              //  ______________________________________________________________________
  97+ 6A6E              //
  98+ 6A6E              // user         b -- cccc     ( compile time )
  99+ 6A6E              //              -- a          ( run time )
 100+ 6A6E              // User variable definition
 101+ 6A6E                              Colon_Def USER, "USER", is_normal
 101+ 6A6E             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 6A6E             >
 101+ 6A6E             >Dict_Ptr        defl    $
 101+ 6A6E             >
 101+ 6A6E             >//              ______________________________________________________________________
 101+ 6A6E             >//              Heap part
 101+ 6A6E             >
 101+ 6A6E             >
 101+ 6A6E             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F9             >
 101+ E3F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F9             >Latest_Definition defl  Heap_Ptr
 101+ E3F9             >
 101+ E3F9             >                // dummy db directives used to calculate length of namec
 101+ E3F9 55 53 45 52 >                db      "USER"
 101+ E3FD             >len_NFA         defl    $ - temp_NFA
 101+ E3FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F9             >
 101+ E3F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3FA 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FE             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FD D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FE             >
 101+ E3FE EC 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E400             >Prev_Ptr        defl    Heap_Ptr
 101+ E400             >
 101+ E400             >mirror_Ptr      defl    $
 101+ E400             >
 101+ E400 70 6A       >                dw      Dict_Ptr + 2        // xt
 101+ E402             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E402             >
 101+ E402             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E402             >
 101+ E402             >//              ______________________________________________________________________
 101+ E402             >//              Dictionary part
 101+ E402             >
 101+ E402             >                org     Dict_Ptr
 101+ 6A6E             >
 101+ 6A6E 00 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 6A70             >
 101+ 6A70             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 6A70 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 6A73             >
 101+ 6A73             >
 101+ 6A73             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 6A73             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 6A73             >
 101+ 6A73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 6A73
 103+ 6A73 F4 73                        dw      CREATE                  // create
 104+ 6A75 CF 6B                        dw      CCOMMA                  // c,
 105+ 6A77 C4 6E                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 6A79
 107+ 6A79
 108+ 6A79              User_Ptr:
 109+ 6A79                              // via call coded in CFA
 110+ 6A79 E1                           pop     hl
 111+ 6A7A
 112+ 6A7A 7E                           ld      a, (hl)
 113+ 6A7B 2A 94 63                     ld      hl, (USER_Pointer)
 114+ 6A7E ED 31                        add     hl, a
 115+ 6A80 E5                           push    hl
 116+ 6A81                              next
 116+ 6A81 DD E9       >                jp      (ix)
 117+ 6A83
 118+ 6A83              //  ______________________________________________________________________
 119+ 6A83              //
 120+ 6A83                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 6A83             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 6A83             >
 120+ 6A83             >Dict_Ptr        defl    $
 120+ 6A83             >
 120+ 6A83             >//              ______________________________________________________________________
 120+ 6A83             >//              Heap part
 120+ 6A83             >
 120+ 6A83             >
 120+ 6A83             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E402             >
 120+ E402             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E402             >Latest_Definition defl  Heap_Ptr
 120+ E402             >
 120+ E402             >                // dummy db directives used to calculate length of namec
 120+ E402 30          >                db      "0"
 120+ E403             >len_NFA         defl    $ - temp_NFA
 120+ E403             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E402             >
 120+ E402 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E403 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E404             >                org     $-1                 // alter last byte of Name just above to set
 120+ E403 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E404             >
 120+ E404 F9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E406             >Prev_Ptr        defl    Heap_Ptr
 120+ E406             >
 120+ E406             >mirror_Ptr      defl    $
 120+ E406             >
 120+ E406 85 6A       >                dw      Dict_Ptr + 2        // xt
 120+ E408             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E408             >
 120+ E408             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E408             >
 120+ E408             >//              ______________________________________________________________________
 120+ E408             >//              Dictionary part
 120+ E408             >
 120+ E408             >                org     Dict_Ptr
 120+ 6A83             >
 120+ 6A83 06 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 6A85             >
 120+ 6A85             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6A85 CD 59 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6A88             >
 120+ 6A88             >
 120+ 6A88             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6A88             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6A88             >
 120+ 6A88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6A88 00 00       >                dw      0
 121+ 6A8A                              Constant_Def ONE        ,   "1"     ,   1
 121+ 6A8A             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 6A8A             >
 121+ 6A8A             >Dict_Ptr        defl    $
 121+ 6A8A             >
 121+ 6A8A             >//              ______________________________________________________________________
 121+ 6A8A             >//              Heap part
 121+ 6A8A             >
 121+ 6A8A             >
 121+ 6A8A             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E408             >
 121+ E408             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E408             >Latest_Definition defl  Heap_Ptr
 121+ E408             >
 121+ E408             >                // dummy db directives used to calculate length of namec
 121+ E408 31          >                db      "1"
 121+ E409             >len_NFA         defl    $ - temp_NFA
 121+ E409             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E408             >
 121+ E408 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E409 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E40A             >                org     $-1                 // alter last byte of Name just above to set
 121+ E409 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E40A             >
 121+ E40A 02 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E40C             >Prev_Ptr        defl    Heap_Ptr
 121+ E40C             >
 121+ E40C             >mirror_Ptr      defl    $
 121+ E40C             >
 121+ E40C 8C 6A       >                dw      Dict_Ptr + 2        // xt
 121+ E40E             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40E             >
 121+ E40E             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40E             >
 121+ E40E             >//              ______________________________________________________________________
 121+ E40E             >//              Dictionary part
 121+ E40E             >
 121+ E40E             >                org     Dict_Ptr
 121+ 6A8A             >
 121+ 6A8A 0C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 6A8C             >
 121+ 6A8C             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6A8C CD 59 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6A8F             >
 121+ 6A8F             >
 121+ 6A8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6A8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6A8F             >
 121+ 6A8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6A8F 01 00       >                dw      1
 122+ 6A91                              Constant_Def TWO        ,   "2"     ,   2
 122+ 6A91             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 6A91             >
 122+ 6A91             >Dict_Ptr        defl    $
 122+ 6A91             >
 122+ 6A91             >//              ______________________________________________________________________
 122+ 6A91             >//              Heap part
 122+ 6A91             >
 122+ 6A91             >
 122+ 6A91             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40E             >
 122+ E40E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40E             >Latest_Definition defl  Heap_Ptr
 122+ E40E             >
 122+ E40E             >                // dummy db directives used to calculate length of namec
 122+ E40E 32          >                db      "2"
 122+ E40F             >len_NFA         defl    $ - temp_NFA
 122+ E40F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40E             >
 122+ E40E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40F 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E410             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40F B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E410             >
 122+ E410 08 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E412             >Prev_Ptr        defl    Heap_Ptr
 122+ E412             >
 122+ E412             >mirror_Ptr      defl    $
 122+ E412             >
 122+ E412 93 6A       >                dw      Dict_Ptr + 2        // xt
 122+ E414             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E414             >
 122+ E414             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E414             >
 122+ E414             >//              ______________________________________________________________________
 122+ E414             >//              Dictionary part
 122+ E414             >
 122+ E414             >                org     Dict_Ptr
 122+ 6A91             >
 122+ 6A91 12 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 6A93             >
 122+ 6A93             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6A93 CD 59 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6A96             >
 122+ 6A96             >
 122+ 6A96             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6A96             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6A96             >
 122+ 6A96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6A96 02 00       >                dw      2
 123+ 6A98                              Constant_Def THREE      ,   "3"     ,   3
 123+ 6A98             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 6A98             >
 123+ 6A98             >Dict_Ptr        defl    $
 123+ 6A98             >
 123+ 6A98             >//              ______________________________________________________________________
 123+ 6A98             >//              Heap part
 123+ 6A98             >
 123+ 6A98             >
 123+ 6A98             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E414             >
 123+ E414             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E414             >Latest_Definition defl  Heap_Ptr
 123+ E414             >
 123+ E414             >                // dummy db directives used to calculate length of namec
 123+ E414 33          >                db      "3"
 123+ E415             >len_NFA         defl    $ - temp_NFA
 123+ E415             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E414             >
 123+ E414 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E415 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E416             >                org     $-1                 // alter last byte of Name just above to set
 123+ E415 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E416             >
 123+ E416 0E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E418             >Prev_Ptr        defl    Heap_Ptr
 123+ E418             >
 123+ E418             >mirror_Ptr      defl    $
 123+ E418             >
 123+ E418 9A 6A       >                dw      Dict_Ptr + 2        // xt
 123+ E41A             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E41A             >
 123+ E41A             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E41A             >
 123+ E41A             >//              ______________________________________________________________________
 123+ E41A             >//              Dictionary part
 123+ E41A             >
 123+ E41A             >                org     Dict_Ptr
 123+ 6A98             >
 123+ 6A98 18 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 6A9A             >
 123+ 6A9A             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6A9A CD 59 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6A9D             >
 123+ 6A9D             >
 123+ 6A9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6A9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6A9D             >
 123+ 6A9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6A9D 03 00       >                dw      3
 124+ 6A9F                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 6A9F             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 6A9F             >
 124+ 6A9F             >Dict_Ptr        defl    $
 124+ 6A9F             >
 124+ 6A9F             >//              ______________________________________________________________________
 124+ 6A9F             >//              Heap part
 124+ 6A9F             >
 124+ 6A9F             >
 124+ 6A9F             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E41A             >
 124+ E41A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E41A             >Latest_Definition defl  Heap_Ptr
 124+ E41A             >
 124+ E41A             >                // dummy db directives used to calculate length of namec
 124+ E41A 2D 31       >                db      "-1"
 124+ E41C             >len_NFA         defl    $ - temp_NFA
 124+ E41C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E41A             >
 124+ E41A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E41B 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41D             >                org     $-1                 // alter last byte of Name just above to set
 124+ E41C B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41D             >
 124+ E41D 14 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41F             >Prev_Ptr        defl    Heap_Ptr
 124+ E41F             >
 124+ E41F             >mirror_Ptr      defl    $
 124+ E41F             >
 124+ E41F A1 6A       >                dw      Dict_Ptr + 2        // xt
 124+ E421             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E421             >
 124+ E421             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E421             >
 124+ E421             >//              ______________________________________________________________________
 124+ E421             >//              Dictionary part
 124+ E421             >
 124+ E421             >                org     Dict_Ptr
 124+ 6A9F             >
 124+ 6A9F 1F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 6AA1             >
 124+ 6AA1             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6AA1 CD 59 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6AA4             >
 124+ 6AA4             >
 124+ 6AA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6AA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6AA4             >
 124+ 6AA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6AA4 FF FF       >                dw      -1
 125+ 6AA6                              Constant_Def BL         ,   "BL"    , $20
 125+ 6AA6             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 6AA6             >
 125+ 6AA6             >Dict_Ptr        defl    $
 125+ 6AA6             >
 125+ 6AA6             >//              ______________________________________________________________________
 125+ 6AA6             >//              Heap part
 125+ 6AA6             >
 125+ 6AA6             >
 125+ 6AA6             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E421             >
 125+ E421             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E421             >Latest_Definition defl  Heap_Ptr
 125+ E421             >
 125+ E421             >                // dummy db directives used to calculate length of namec
 125+ E421 42 4C       >                db      "BL"
 125+ E423             >len_NFA         defl    $ - temp_NFA
 125+ E423             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E421             >
 125+ E421 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E422 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E424             >                org     $-1                 // alter last byte of Name just above to set
 125+ E423 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E424             >
 125+ E424 1A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E426             >Prev_Ptr        defl    Heap_Ptr
 125+ E426             >
 125+ E426             >mirror_Ptr      defl    $
 125+ E426             >
 125+ E426 A8 6A       >                dw      Dict_Ptr + 2        // xt
 125+ E428             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E428             >
 125+ E428             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E428             >
 125+ E428             >//              ______________________________________________________________________
 125+ E428             >//              Dictionary part
 125+ E428             >
 125+ E428             >                org     Dict_Ptr
 125+ 6AA6             >
 125+ 6AA6 26 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 6AA8             >
 125+ 6AA8             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6AA8 CD 59 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6AAB             >
 125+ 6AAB             >
 125+ 6AAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6AAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6AAB             >
 125+ 6AAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6AAB 20 00       >                dw      $20
 126+ 6AAD                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 6AAD             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 6AAD             >
 126+ 6AAD             >Dict_Ptr        defl    $
 126+ 6AAD             >
 126+ 6AAD             >//              ______________________________________________________________________
 126+ 6AAD             >//              Heap part
 126+ 6AAD             >
 126+ 6AAD             >
 126+ 6AAD             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E428             >
 126+ E428             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E428             >Latest_Definition defl  Heap_Ptr
 126+ E428             >
 126+ E428             >                // dummy db directives used to calculate length of namec
 126+ E428 43 2F 4C    >                db      "C/L"
 126+ E42B             >len_NFA         defl    $ - temp_NFA
 126+ E42B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E428             >
 126+ E428 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E429 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E42C             >                org     $-1                 // alter last byte of Name just above to set
 126+ E42B CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E42C             >
 126+ E42C 21 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42E             >Prev_Ptr        defl    Heap_Ptr
 126+ E42E             >
 126+ E42E             >mirror_Ptr      defl    $
 126+ E42E             >
 126+ E42E AF 6A       >                dw      Dict_Ptr + 2        // xt
 126+ E430             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E430             >
 126+ E430             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E430             >
 126+ E430             >//              ______________________________________________________________________
 126+ E430             >//              Dictionary part
 126+ E430             >
 126+ E430             >                org     Dict_Ptr
 126+ 6AAD             >
 126+ 6AAD 2E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 6AAF             >
 126+ 6AAF             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6AAF CD 59 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6AB2             >
 126+ 6AB2             >
 126+ 6AB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6AB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6AB2             >
 126+ 6AB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6AB2 40 00       >                dw      64
 127+ 6AB4                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 6AB4             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 6AB4             >
 127+ 6AB4             >Dict_Ptr        defl    $
 127+ 6AB4             >
 127+ 6AB4             >//              ______________________________________________________________________
 127+ 6AB4             >//              Heap part
 127+ 6AB4             >
 127+ 6AB4             >
 127+ 6AB4             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E430             >
 127+ E430             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E430             >Latest_Definition defl  Heap_Ptr
 127+ E430             >
 127+ E430             >                // dummy db directives used to calculate length of namec
 127+ E430 42 2F 42 55 >                db      "B/BUF"
 127+ E434 46          >
 127+ E435             >len_NFA         defl    $ - temp_NFA
 127+ E435             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E430             >
 127+ E430 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E431 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E435 46          >
 127+ E436             >                org     $-1                 // alter last byte of Name just above to set
 127+ E435 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E436             >
 127+ E436 28 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E438             >Prev_Ptr        defl    Heap_Ptr
 127+ E438             >
 127+ E438             >mirror_Ptr      defl    $
 127+ E438             >
 127+ E438 B6 6A       >                dw      Dict_Ptr + 2        // xt
 127+ E43A             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E43A             >
 127+ E43A             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E43A             >
 127+ E43A             >//              ______________________________________________________________________
 127+ E43A             >//              Dictionary part
 127+ E43A             >
 127+ E43A             >                org     Dict_Ptr
 127+ 6AB4             >
 127+ 6AB4 38 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 6AB6             >
 127+ 6AB6             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6AB6 CD 59 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6AB9             >
 127+ 6AB9             >
 127+ 6AB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6AB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6AB9             >
 127+ 6AB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6AB9 00 02       >                dw      512
 128+ 6ABB                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 6ABB             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 6ABB             >
 128+ 6ABB             >Dict_Ptr        defl    $
 128+ 6ABB             >
 128+ 6ABB             >//              ______________________________________________________________________
 128+ 6ABB             >//              Heap part
 128+ 6ABB             >
 128+ 6ABB             >
 128+ 6ABB             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E43A             >
 128+ E43A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E43A             >Latest_Definition defl  Heap_Ptr
 128+ E43A             >
 128+ E43A             >                // dummy db directives used to calculate length of namec
 128+ E43A 42 2F 53 43 >                db      "B/SCR"
 128+ E43E 52          >
 128+ E43F             >len_NFA         defl    $ - temp_NFA
 128+ E43F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E43A             >
 128+ E43A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E43B 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43F 52          >
 128+ E440             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43F D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E440             >
 128+ E440 30 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E442             >Prev_Ptr        defl    Heap_Ptr
 128+ E442             >
 128+ E442             >mirror_Ptr      defl    $
 128+ E442             >
 128+ E442 BD 6A       >                dw      Dict_Ptr + 2        // xt
 128+ E444             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E444             >
 128+ E444             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E444             >
 128+ E444             >//              ______________________________________________________________________
 128+ E444             >//              Dictionary part
 128+ E444             >
 128+ E444             >                org     Dict_Ptr
 128+ 6ABB             >
 128+ 6ABB 42 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 6ABD             >
 128+ 6ABD             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6ABD CD 59 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6AC0             >
 128+ 6AC0             >
 128+ 6AC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6AC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6AC0             >
 128+ 6AC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6AC0 02 00       >                dw      2
 129+ 6AC2                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 6AC2             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 6AC2             >
 129+ 6AC2             >Dict_Ptr        defl    $
 129+ 6AC2             >
 129+ 6AC2             >//              ______________________________________________________________________
 129+ 6AC2             >//              Heap part
 129+ 6AC2             >
 129+ 6AC2             >
 129+ 6AC2             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E444             >
 129+ E444             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E444             >Latest_Definition defl  Heap_Ptr
 129+ E444             >
 129+ E444             >                // dummy db directives used to calculate length of namec
 129+ E444 4C 2F 53 43 >                db      "L/SCR"
 129+ E448 52          >
 129+ E449             >len_NFA         defl    $ - temp_NFA
 129+ E449             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E444             >
 129+ E444 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E445 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E449 52          >
 129+ E44A             >                org     $-1                 // alter last byte of Name just above to set
 129+ E449 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E44A             >
 129+ E44A 3A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E44C             >Prev_Ptr        defl    Heap_Ptr
 129+ E44C             >
 129+ E44C             >mirror_Ptr      defl    $
 129+ E44C             >
 129+ E44C C4 6A       >                dw      Dict_Ptr + 2        // xt
 129+ E44E             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44E             >
 129+ E44E             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44E             >
 129+ E44E             >//              ______________________________________________________________________
 129+ E44E             >//              Dictionary part
 129+ E44E             >
 129+ E44E             >                org     Dict_Ptr
 129+ 6AC2             >
 129+ 6AC2 4C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 6AC4             >
 129+ 6AC4             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 6AC4 CD 59 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 6AC7             >
 129+ 6AC7             >
 129+ 6AC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 6AC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 6AC7             >
 129+ 6AC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 6AC7 10 00       >                dw      16
 130+ 6AC9
 131+ 6AC9              //  ______________________________________________________________________
 132+ 6AC9              //
 133+ 6AC9              // +origin         --
 134+ 6AC9              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 6AC9              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 6AC9              //              dw      PLUS                    // +
 137+ 6AC9              //              dw      EXIT                    // ;
 138+ 6AC9                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 6AC9             >
 138+ 6AC9             >Dict_Ptr        defl    $
 138+ 6AC9             >
 138+ 6AC9             >//              ______________________________________________________________________
 138+ 6AC9             >//              Heap part
 138+ 6AC9             >
 138+ 6AC9             >
 138+ 6AC9             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44E             >
 138+ E44E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44E             >Latest_Definition defl  Heap_Ptr
 138+ E44E             >
 138+ E44E             >                // dummy db directives used to calculate length of namec
 138+ E44E 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E452 47 49 4E    >
 138+ E455             >len_NFA         defl    $ - temp_NFA
 138+ E455             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44E             >
 138+ E44E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44F 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E453 47 49 4E    >
 138+ E456             >                org     $-1                 // alter last byte of Name just above to set
 138+ E455 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E456             >
 138+ E456 44 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E458             >Prev_Ptr        defl    Heap_Ptr
 138+ E458             >
 138+ E458             >mirror_Ptr      defl    $
 138+ E458             >
 138+ E458 CB 6A       >                dw      Dict_Ptr + 2        // xt
 138+ E45A             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E45A             >
 138+ E45A             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E45A             >
 138+ E45A             >//              ______________________________________________________________________
 138+ E45A             >//              Dictionary part
 138+ E45A             >
 138+ E45A             >                org     Dict_Ptr
 138+ 6AC9             >
 138+ 6AC9 58 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 6ACB             >
 138+ 6ACB             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6ACB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 6ACB ~           >
 138+ 6ACB ~           >
 138+ 6ACB             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 6ACB             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 6ACB             >
 138+ 6ACB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6ACB D9                           exx
 140+ 6ACC E1                           pop     hl
 141+ 6ACD 11 66 63                     ld      de, Cold_origin
 142+ 6AD0 19                           add     hl, de
 143+ 6AD1 E5                           push    hl
 144+ 6AD2 D9                           exx
 145+ 6AD3                              next
 145+ 6AD3 DD E9       >                jp      (ix)
 146+ 6AD5
 147+ 6AD5
 148+ 6AD5              //  ______________________________________________________________________
 149+ 6AD5              //
 150+ 6AD5                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 6AD5             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 6AD5             >
 150+ 6AD5             >Dict_Ptr        defl    $
 150+ 6AD5             >
 150+ 6AD5             >//              ______________________________________________________________________
 150+ 6AD5             >//              Heap part
 150+ 6AD5             >
 150+ 6AD5             >
 150+ 6AD5             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E45A             >
 150+ E45A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E45A             >Latest_Definition defl  Heap_Ptr
 150+ E45A             >
 150+ E45A             >                // dummy db directives used to calculate length of namec
 150+ E45A 28 4E 45 58 >                db      "(NEXT)"
 150+ E45E 54 29       >
 150+ E460             >len_NFA         defl    $ - temp_NFA
 150+ E460             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E45A             >
 150+ E45A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E45B 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45F 54 29       >
 150+ E461             >                org     $-1                 // alter last byte of Name just above to set
 150+ E460 A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E461             >
 150+ E461 4E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E463             >Prev_Ptr        defl    Heap_Ptr
 150+ E463             >
 150+ E463             >mirror_Ptr      defl    $
 150+ E463             >
 150+ E463 D7 6A       >                dw      Dict_Ptr + 2        // xt
 150+ E465             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E465             >
 150+ E465             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E465             >
 150+ E465             >//              ______________________________________________________________________
 150+ E465             >//              Dictionary part
 150+ E465             >
 150+ E465             >                org     Dict_Ptr
 150+ 6AD5             >
 150+ 6AD5 63 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 6AD7             >
 150+ 6AD7             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6AD7 CD 59 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 6ADA             >
 150+ 6ADA             >
 150+ 6ADA             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6ADA             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6ADA             >
 150+ 6ADA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6ADA 9A 63       >                dw      Next_Ptr
 151+ 6ADC
 152+ 6ADC              //  ______________________________________________________________________
 153+ 6ADC              //
 154+ 6ADC
 155+ 6ADC                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 6ADC             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 6ADC             >
 155+ 6ADC             >Dict_Ptr        defl    $
 155+ 6ADC             >
 155+ 6ADC             >//              ______________________________________________________________________
 155+ 6ADC             >//              Heap part
 155+ 6ADC             >
 155+ 6ADC             >
 155+ 6ADC             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E465             >
 155+ E465             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E465             >Latest_Definition defl  Heap_Ptr
 155+ E465             >
 155+ E465             >                // dummy db directives used to calculate length of namec
 155+ E465 53 30       >                db      "S0"
 155+ E467             >len_NFA         defl    $ - temp_NFA
 155+ E467             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E465             >
 155+ E465 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E466 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E468             >                org     $-1                 // alter last byte of Name just above to set
 155+ E467 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E468             >
 155+ E468 5A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E46A             >Prev_Ptr        defl    Heap_Ptr
 155+ E46A             >
 155+ E46A             >mirror_Ptr      defl    $
 155+ E46A             >
 155+ E46A DE 6A       >                dw      Dict_Ptr + 2        // xt
 155+ E46C             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E46C             >
 155+ E46C             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E46C             >
 155+ E46C             >//              ______________________________________________________________________
 155+ E46C             >//              Dictionary part
 155+ E46C             >
 155+ E46C             >                org     Dict_Ptr
 155+ 6ADC             >
 155+ 6ADC 6A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 6ADE             >
 155+ 6ADE             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6ADE CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6AE1             >
 155+ 6AE1             >
 155+ 6AE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6AE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6AE1             >
 155+ 6AE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6AE1 06          >                db      06
 156+ 6AE2                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 6AE2             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 6AE2             >
 156+ 6AE2             >Dict_Ptr        defl    $
 156+ 6AE2             >
 156+ 6AE2             >//              ______________________________________________________________________
 156+ 6AE2             >//              Heap part
 156+ 6AE2             >
 156+ 6AE2             >
 156+ 6AE2             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E46C             >
 156+ E46C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E46C             >Latest_Definition defl  Heap_Ptr
 156+ E46C             >
 156+ E46C             >                // dummy db directives used to calculate length of namec
 156+ E46C 52 30       >                db      "R0"
 156+ E46E             >len_NFA         defl    $ - temp_NFA
 156+ E46E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E46C             >
 156+ E46C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46D 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46F             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46E B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46F             >
 156+ E46F 65 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E471             >Prev_Ptr        defl    Heap_Ptr
 156+ E471             >
 156+ E471             >mirror_Ptr      defl    $
 156+ E471             >
 156+ E471 E4 6A       >                dw      Dict_Ptr + 2        // xt
 156+ E473             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E473             >
 156+ E473             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E473             >
 156+ E473             >//              ______________________________________________________________________
 156+ E473             >//              Dictionary part
 156+ E473             >
 156+ E473             >                org     Dict_Ptr
 156+ 6AE2             >
 156+ 6AE2 71 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 6AE4             >
 156+ 6AE4             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6AE4 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6AE7             >
 156+ 6AE7             >
 156+ 6AE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6AE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6AE7             >
 156+ 6AE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6AE7 08          >                db      08
 157+ 6AE8                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 6AE8             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 6AE8             >
 157+ 6AE8             >Dict_Ptr        defl    $
 157+ 6AE8             >
 157+ 6AE8             >//              ______________________________________________________________________
 157+ 6AE8             >//              Heap part
 157+ 6AE8             >
 157+ 6AE8             >
 157+ 6AE8             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E473             >
 157+ E473             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E473             >Latest_Definition defl  Heap_Ptr
 157+ E473             >
 157+ E473             >                // dummy db directives used to calculate length of namec
 157+ E473 54 49 42    >                db      "TIB"
 157+ E476             >len_NFA         defl    $ - temp_NFA
 157+ E476             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E473             >
 157+ E473 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E474 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E477             >                org     $-1                 // alter last byte of Name just above to set
 157+ E476 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E477             >
 157+ E477 6C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E479             >Prev_Ptr        defl    Heap_Ptr
 157+ E479             >
 157+ E479             >mirror_Ptr      defl    $
 157+ E479             >
 157+ E479 EA 6A       >                dw      Dict_Ptr + 2        // xt
 157+ E47B             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E47B             >
 157+ E47B             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E47B             >
 157+ E47B             >//              ______________________________________________________________________
 157+ E47B             >//              Dictionary part
 157+ E47B             >
 157+ E47B             >                org     Dict_Ptr
 157+ 6AE8             >
 157+ 6AE8 79 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 6AEA             >
 157+ 6AEA             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6AEA CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6AED             >
 157+ 6AED             >
 157+ 6AED             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6AED             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6AED             >
 157+ 6AED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6AED 0A          >                db      10
 158+ 6AEE                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 6AEE             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 6AEE             >
 158+ 6AEE             >Dict_Ptr        defl    $
 158+ 6AEE             >
 158+ 6AEE             >//              ______________________________________________________________________
 158+ 6AEE             >//              Heap part
 158+ 6AEE             >
 158+ 6AEE             >
 158+ 6AEE             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E47B             >
 158+ E47B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E47B             >Latest_Definition defl  Heap_Ptr
 158+ E47B             >
 158+ E47B             >                // dummy db directives used to calculate length of namec
 158+ E47B 57 49 44 54 >                db      "WIDTH"
 158+ E47F 48          >
 158+ E480             >len_NFA         defl    $ - temp_NFA
 158+ E480             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E47B             >
 158+ E47B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E47C 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E480 48          >
 158+ E481             >                org     $-1                 // alter last byte of Name just above to set
 158+ E480 C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E481             >
 158+ E481 73 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E483             >Prev_Ptr        defl    Heap_Ptr
 158+ E483             >
 158+ E483             >mirror_Ptr      defl    $
 158+ E483             >
 158+ E483 F0 6A       >                dw      Dict_Ptr + 2        // xt
 158+ E485             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E485             >
 158+ E485             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E485             >
 158+ E485             >//              ______________________________________________________________________
 158+ E485             >//              Dictionary part
 158+ E485             >
 158+ E485             >                org     Dict_Ptr
 158+ 6AEE             >
 158+ 6AEE 83 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 6AF0             >
 158+ 6AF0             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6AF0 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6AF3             >
 158+ 6AF3             >
 158+ 6AF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6AF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6AF3             >
 158+ 6AF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6AF3 0C          >                db      12
 159+ 6AF4                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 6AF4             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 6AF4             >
 159+ 6AF4             >Dict_Ptr        defl    $
 159+ 6AF4             >
 159+ 6AF4             >//              ______________________________________________________________________
 159+ 6AF4             >//              Heap part
 159+ 6AF4             >
 159+ 6AF4             >
 159+ 6AF4             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E485             >
 159+ E485             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E485             >Latest_Definition defl  Heap_Ptr
 159+ E485             >
 159+ E485             >                // dummy db directives used to calculate length of namec
 159+ E485 57 41 52 4E >                db      "WARNING"
 159+ E489 49 4E 47    >
 159+ E48C             >len_NFA         defl    $ - temp_NFA
 159+ E48C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E485             >
 159+ E485 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E486 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E48A 49 4E 47    >
 159+ E48D             >                org     $-1                 // alter last byte of Name just above to set
 159+ E48C C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48D             >
 159+ E48D 7B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48F             >Prev_Ptr        defl    Heap_Ptr
 159+ E48F             >
 159+ E48F             >mirror_Ptr      defl    $
 159+ E48F             >
 159+ E48F F6 6A       >                dw      Dict_Ptr + 2        // xt
 159+ E491             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E491             >
 159+ E491             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E491             >
 159+ E491             >//              ______________________________________________________________________
 159+ E491             >//              Dictionary part
 159+ E491             >
 159+ E491             >                org     Dict_Ptr
 159+ 6AF4             >
 159+ 6AF4 8F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 6AF6             >
 159+ 6AF6             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6AF6 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6AF9             >
 159+ 6AF9             >
 159+ 6AF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6AF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6AF9             >
 159+ 6AF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6AF9 0E          >                db      14
 160+ 6AFA                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 6AFA             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 6AFA             >
 160+ 6AFA             >Dict_Ptr        defl    $
 160+ 6AFA             >
 160+ 6AFA             >//              ______________________________________________________________________
 160+ 6AFA             >//              Heap part
 160+ 6AFA             >
 160+ 6AFA             >
 160+ 6AFA             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E491             >
 160+ E491             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E491             >Latest_Definition defl  Heap_Ptr
 160+ E491             >
 160+ E491             >                // dummy db directives used to calculate length of namec
 160+ E491 46 45 4E 43 >                db      "FENCE"
 160+ E495 45          >
 160+ E496             >len_NFA         defl    $ - temp_NFA
 160+ E496             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E491             >
 160+ E491 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E492 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E496 45          >
 160+ E497             >                org     $-1                 // alter last byte of Name just above to set
 160+ E496 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E497             >
 160+ E497 85 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E499             >Prev_Ptr        defl    Heap_Ptr
 160+ E499             >
 160+ E499             >mirror_Ptr      defl    $
 160+ E499             >
 160+ E499 FC 6A       >                dw      Dict_Ptr + 2        // xt
 160+ E49B             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E49B             >
 160+ E49B             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E49B             >
 160+ E49B             >//              ______________________________________________________________________
 160+ E49B             >//              Dictionary part
 160+ E49B             >
 160+ E49B             >                org     Dict_Ptr
 160+ 6AFA             >
 160+ 6AFA 99 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 6AFC             >
 160+ 6AFC             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6AFC CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6AFF             >
 160+ 6AFF             >
 160+ 6AFF             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6AFF             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6AFF             >
 160+ 6AFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6AFF 10          >                db      16
 161+ 6B00                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 6B00             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 6B00             >
 161+ 6B00             >Dict_Ptr        defl    $
 161+ 6B00             >
 161+ 6B00             >//              ______________________________________________________________________
 161+ 6B00             >//              Heap part
 161+ 6B00             >
 161+ 6B00             >
 161+ 6B00             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E49B             >
 161+ E49B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E49B             >Latest_Definition defl  Heap_Ptr
 161+ E49B             >
 161+ E49B             >                // dummy db directives used to calculate length of namec
 161+ E49B 44 50       >                db      "DP"
 161+ E49D             >len_NFA         defl    $ - temp_NFA
 161+ E49D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E49B             >
 161+ E49B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E49C 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49E             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49D D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49E             >
 161+ E49E 91 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E4A0             >Prev_Ptr        defl    Heap_Ptr
 161+ E4A0             >
 161+ E4A0             >mirror_Ptr      defl    $
 161+ E4A0             >
 161+ E4A0 02 6B       >                dw      Dict_Ptr + 2        // xt
 161+ E4A2             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E4A2             >
 161+ E4A2             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E4A2             >
 161+ E4A2             >//              ______________________________________________________________________
 161+ E4A2             >//              Dictionary part
 161+ E4A2             >
 161+ E4A2             >                org     Dict_Ptr
 161+ 6B00             >
 161+ 6B00 A0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 6B02             >
 161+ 6B02             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6B02 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6B05             >
 161+ 6B05             >
 161+ 6B05             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6B05             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6B05             >
 161+ 6B05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6B05 12          >                db      18
 162+ 6B06                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 6B06             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 6B06             >
 162+ 6B06             >Dict_Ptr        defl    $
 162+ 6B06             >
 162+ 6B06             >//              ______________________________________________________________________
 162+ 6B06             >//              Heap part
 162+ 6B06             >
 162+ 6B06             >
 162+ 6B06             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E4A2             >
 162+ E4A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E4A2             >Latest_Definition defl  Heap_Ptr
 162+ E4A2             >
 162+ E4A2             >                // dummy db directives used to calculate length of namec
 162+ E4A2 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A6 4C 49 4E 4B >
 162+ E4AA             >len_NFA         defl    $ - temp_NFA
 162+ E4AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E4A2             >
 162+ E4A2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A3 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A7 4C 49 4E 4B >
 162+ E4AB             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4AA CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4AB             >
 162+ E4AB 9B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AD             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AD             >
 162+ E4AD             >mirror_Ptr      defl    $
 162+ E4AD             >
 162+ E4AD 08 6B       >                dw      Dict_Ptr + 2        // xt
 162+ E4AF             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AF             >
 162+ E4AF             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AF             >
 162+ E4AF             >//              ______________________________________________________________________
 162+ E4AF             >//              Dictionary part
 162+ E4AF             >
 162+ E4AF             >                org     Dict_Ptr
 162+ 6B06             >
 162+ 6B06 AD 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6B08             >
 162+ 6B08             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6B08 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6B0B             >
 162+ 6B0B             >
 162+ 6B0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6B0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6B0B             >
 162+ 6B0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6B0B 14          >                db      20
 163+ 6B0C                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 6B0C             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 6B0C             >
 163+ 6B0C             >Dict_Ptr        defl    $
 163+ 6B0C             >
 163+ 6B0C             >//              ______________________________________________________________________
 163+ 6B0C             >//              Heap part
 163+ 6B0C             >
 163+ 6B0C             >
 163+ 6B0C             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AF             >
 163+ E4AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AF             >Latest_Definition defl  Heap_Ptr
 163+ E4AF             >
 163+ E4AF             >                // dummy db directives used to calculate length of namec
 163+ E4AF 46 49 52 53 >                db      "FIRST"
 163+ E4B3 54          >
 163+ E4B4             >len_NFA         defl    $ - temp_NFA
 163+ E4B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AF             >
 163+ E4AF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4B0 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B4 54          >
 163+ E4B5             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B4 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B5             >
 163+ E4B5 A2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B7             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B7             >
 163+ E4B7             >mirror_Ptr      defl    $
 163+ E4B7             >
 163+ E4B7 0E 6B       >                dw      Dict_Ptr + 2        // xt
 163+ E4B9             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B9             >
 163+ E4B9             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B9             >
 163+ E4B9             >//              ______________________________________________________________________
 163+ E4B9             >//              Dictionary part
 163+ E4B9             >
 163+ E4B9             >                org     Dict_Ptr
 163+ 6B0C             >
 163+ 6B0C B7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 6B0E             >
 163+ 6B0E             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6B0E CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6B11             >
 163+ 6B11             >
 163+ 6B11             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6B11             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6B11             >
 163+ 6B11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6B11 16          >                db      22
 164+ 6B12                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 6B12             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 6B12             >
 164+ 6B12             >Dict_Ptr        defl    $
 164+ 6B12             >
 164+ 6B12             >//              ______________________________________________________________________
 164+ 6B12             >//              Heap part
 164+ 6B12             >
 164+ 6B12             >
 164+ 6B12             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B9             >
 164+ E4B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B9             >Latest_Definition defl  Heap_Ptr
 164+ E4B9             >
 164+ E4B9             >                // dummy db directives used to calculate length of namec
 164+ E4B9 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BD 54          >
 164+ E4BE             >len_NFA         defl    $ - temp_NFA
 164+ E4BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B9             >
 164+ E4B9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4BA 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BE 54          >
 164+ E4BF             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BE D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BF             >
 164+ E4BF AF 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4C1             >Prev_Ptr        defl    Heap_Ptr
 164+ E4C1             >
 164+ E4C1             >mirror_Ptr      defl    $
 164+ E4C1             >
 164+ E4C1 14 6B       >                dw      Dict_Ptr + 2        // xt
 164+ E4C3             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C3             >
 164+ E4C3             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C3             >
 164+ E4C3             >//              ______________________________________________________________________
 164+ E4C3             >//              Dictionary part
 164+ E4C3             >
 164+ E4C3             >                org     Dict_Ptr
 164+ 6B12             >
 164+ 6B12 C1 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 6B14             >
 164+ 6B14             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6B14 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6B17             >
 164+ 6B17             >
 164+ 6B17             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6B17             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6B17             >
 164+ 6B17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6B17 18          >                db      24
 165+ 6B18                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 6B18             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 6B18             >
 165+ 6B18             >Dict_Ptr        defl    $
 165+ 6B18             >
 165+ 6B18             >//              ______________________________________________________________________
 165+ 6B18             >//              Heap part
 165+ 6B18             >
 165+ 6B18             >
 165+ 6B18             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C3             >
 165+ E4C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C3             >Latest_Definition defl  Heap_Ptr
 165+ E4C3             >
 165+ E4C3             >                // dummy db directives used to calculate length of namec
 165+ E4C3 48 50       >                db      "HP"
 165+ E4C5             >len_NFA         defl    $ - temp_NFA
 165+ E4C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C3             >
 165+ E4C3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C4 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C6             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C5 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C6             >
 165+ E4C6 B9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C8             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C8             >
 165+ E4C8             >mirror_Ptr      defl    $
 165+ E4C8             >
 165+ E4C8 1A 6B       >                dw      Dict_Ptr + 2        // xt
 165+ E4CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4CA             >
 165+ E4CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4CA             >
 165+ E4CA             >//              ______________________________________________________________________
 165+ E4CA             >//              Dictionary part
 165+ E4CA             >
 165+ E4CA             >                org     Dict_Ptr
 165+ 6B18             >
 165+ 6B18 C8 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 6B1A             >
 165+ 6B1A             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6B1A CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6B1D             >
 165+ 6B1D             >
 165+ 6B1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6B1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6B1D             >
 165+ 6B1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6B1D 1A          >                db      26
 166+ 6B1E                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 6B1E             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 6B1E             >
 166+ 6B1E             >Dict_Ptr        defl    $
 166+ 6B1E             >
 166+ 6B1E             >//              ______________________________________________________________________
 166+ 6B1E             >//              Heap part
 166+ 6B1E             >
 166+ 6B1E             >
 166+ 6B1E             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4CA             >
 166+ E4CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4CA             >Latest_Definition defl  Heap_Ptr
 166+ E4CA             >
 166+ E4CA             >                // dummy db directives used to calculate length of namec
 166+ E4CA 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CE 45          >
 166+ E4CF             >len_NFA         defl    $ - temp_NFA
 166+ E4CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4CA             >
 166+ E4CA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4CB 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CF 45          >
 166+ E4D0             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CF C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4D0             >
 166+ E4D0 C3 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4D2             >Prev_Ptr        defl    Heap_Ptr
 166+ E4D2             >
 166+ E4D2             >mirror_Ptr      defl    $
 166+ E4D2             >
 166+ E4D2 20 6B       >                dw      Dict_Ptr + 2        // xt
 166+ E4D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D4             >
 166+ E4D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D4             >
 166+ E4D4             >//              ______________________________________________________________________
 166+ E4D4             >//              Dictionary part
 166+ E4D4             >
 166+ E4D4             >                org     Dict_Ptr
 166+ 6B1E             >
 166+ 6B1E D2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 6B20             >
 166+ 6B20             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6B20 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6B23             >
 166+ 6B23             >
 166+ 6B23             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6B23             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6B23             >
 166+ 6B23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6B23 1C          >                db      28
 167+ 6B24                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 6B24             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 6B24             >
 167+ 6B24             >Dict_Ptr        defl    $
 167+ 6B24             >
 167+ 6B24             >//              ______________________________________________________________________
 167+ 6B24             >//              Heap part
 167+ 6B24             >
 167+ 6B24             >
 167+ 6B24             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D4             >
 167+ E4D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D4             >Latest_Definition defl  Heap_Ptr
 167+ E4D4             >
 167+ E4D4             >                // dummy db directives used to calculate length of namec
 167+ E4D4 42 4C 4B    >                db      "BLK"
 167+ E4D7             >len_NFA         defl    $ - temp_NFA
 167+ E4D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D4             >
 167+ E4D4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D5 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D8             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D7 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D8             >
 167+ E4D8 CA 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4DA             >Prev_Ptr        defl    Heap_Ptr
 167+ E4DA             >
 167+ E4DA             >mirror_Ptr      defl    $
 167+ E4DA             >
 167+ E4DA 26 6B       >                dw      Dict_Ptr + 2        // xt
 167+ E4DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4DC             >
 167+ E4DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4DC             >
 167+ E4DC             >//              ______________________________________________________________________
 167+ E4DC             >//              Dictionary part
 167+ E4DC             >
 167+ E4DC             >                org     Dict_Ptr
 167+ 6B24             >
 167+ 6B24 DA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 6B26             >
 167+ 6B26             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6B26 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6B29             >
 167+ 6B29             >
 167+ 6B29             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6B29             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6B29             >
 167+ 6B29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6B29 1E          >                db      30
 168+ 6B2A                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 6B2A             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 6B2A             >
 168+ 6B2A             >Dict_Ptr        defl    $
 168+ 6B2A             >
 168+ 6B2A             >//              ______________________________________________________________________
 168+ 6B2A             >//              Heap part
 168+ 6B2A             >
 168+ 6B2A             >
 168+ 6B2A             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4DC             >
 168+ E4DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4DC             >Latest_Definition defl  Heap_Ptr
 168+ E4DC             >
 168+ E4DC             >                // dummy db directives used to calculate length of namec
 168+ E4DC 3E 49 4E    >                db      ">IN"
 168+ E4DF             >len_NFA         defl    $ - temp_NFA
 168+ E4DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4DC             >
 168+ E4DC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DD 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4E0             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DF CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4E0             >
 168+ E4E0 D4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4E2             >Prev_Ptr        defl    Heap_Ptr
 168+ E4E2             >
 168+ E4E2             >mirror_Ptr      defl    $
 168+ E4E2             >
 168+ E4E2 2C 6B       >                dw      Dict_Ptr + 2        // xt
 168+ E4E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E4             >
 168+ E4E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E4             >
 168+ E4E4             >//              ______________________________________________________________________
 168+ E4E4             >//              Dictionary part
 168+ E4E4             >
 168+ E4E4             >                org     Dict_Ptr
 168+ 6B2A             >
 168+ 6B2A E2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 6B2C             >
 168+ 6B2C             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6B2C CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6B2F             >
 168+ 6B2F             >
 168+ 6B2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6B2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6B2F             >
 168+ 6B2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6B2F 20          >                db      32
 169+ 6B30                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 6B30             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 6B30             >
 169+ 6B30             >Dict_Ptr        defl    $
 169+ 6B30             >
 169+ 6B30             >//              ______________________________________________________________________
 169+ 6B30             >//              Heap part
 169+ 6B30             >
 169+ 6B30             >
 169+ 6B30             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E4             >
 169+ E4E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E4             >Latest_Definition defl  Heap_Ptr
 169+ E4E4             >
 169+ E4E4             >                // dummy db directives used to calculate length of namec
 169+ E4E4 4F 55 54    >                db      "OUT"
 169+ E4E7             >len_NFA         defl    $ - temp_NFA
 169+ E4E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E4             >
 169+ E4E4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E5 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E8             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E7 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E8             >
 169+ E4E8 DC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4EA             >Prev_Ptr        defl    Heap_Ptr
 169+ E4EA             >
 169+ E4EA             >mirror_Ptr      defl    $
 169+ E4EA             >
 169+ E4EA 32 6B       >                dw      Dict_Ptr + 2        // xt
 169+ E4EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4EC             >
 169+ E4EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4EC             >
 169+ E4EC             >//              ______________________________________________________________________
 169+ E4EC             >//              Dictionary part
 169+ E4EC             >
 169+ E4EC             >                org     Dict_Ptr
 169+ 6B30             >
 169+ 6B30 EA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 6B32             >
 169+ 6B32             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6B32 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6B35             >
 169+ 6B35             >
 169+ 6B35             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6B35             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6B35             >
 169+ 6B35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6B35 22          >                db      34
 170+ 6B36                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 6B36             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 6B36             >
 170+ 6B36             >Dict_Ptr        defl    $
 170+ 6B36             >
 170+ 6B36             >//              ______________________________________________________________________
 170+ 6B36             >//              Heap part
 170+ 6B36             >
 170+ 6B36             >
 170+ 6B36             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4EC             >
 170+ E4EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4EC             >Latest_Definition defl  Heap_Ptr
 170+ E4EC             >
 170+ E4EC             >                // dummy db directives used to calculate length of namec
 170+ E4EC 53 43 52    >                db      "SCR"
 170+ E4EF             >len_NFA         defl    $ - temp_NFA
 170+ E4EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4EC             >
 170+ E4EC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4ED 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4F0             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4EF D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4F0             >
 170+ E4F0 E4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4F2             >Prev_Ptr        defl    Heap_Ptr
 170+ E4F2             >
 170+ E4F2             >mirror_Ptr      defl    $
 170+ E4F2             >
 170+ E4F2 38 6B       >                dw      Dict_Ptr + 2        // xt
 170+ E4F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F4             >
 170+ E4F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F4             >
 170+ E4F4             >//              ______________________________________________________________________
 170+ E4F4             >//              Dictionary part
 170+ E4F4             >
 170+ E4F4             >                org     Dict_Ptr
 170+ 6B36             >
 170+ 6B36 F2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 6B38             >
 170+ 6B38             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6B38 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6B3B             >
 170+ 6B3B             >
 170+ 6B3B             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6B3B             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6B3B             >
 170+ 6B3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6B3B 24          >                db      36
 171+ 6B3C                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 6B3C             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 6B3C             >
 171+ 6B3C             >Dict_Ptr        defl    $
 171+ 6B3C             >
 171+ 6B3C             >//              ______________________________________________________________________
 171+ 6B3C             >//              Heap part
 171+ 6B3C             >
 171+ 6B3C             >
 171+ 6B3C             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F4             >
 171+ E4F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F4             >Latest_Definition defl  Heap_Ptr
 171+ E4F4             >
 171+ E4F4             >                // dummy db directives used to calculate length of namec
 171+ E4F4 4F 46 46 53 >                db      "OFFSET"
 171+ E4F8 45 54       >
 171+ E4FA             >len_NFA         defl    $ - temp_NFA
 171+ E4FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F4             >
 171+ E4F4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F5 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F9 45 54       >
 171+ E4FB             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4FA D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4FB             >
 171+ E4FB EC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FD             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FD             >
 171+ E4FD             >mirror_Ptr      defl    $
 171+ E4FD             >
 171+ E4FD 3E 6B       >                dw      Dict_Ptr + 2        // xt
 171+ E4FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FF             >
 171+ E4FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FF             >
 171+ E4FF             >//              ______________________________________________________________________
 171+ E4FF             >//              Dictionary part
 171+ E4FF             >
 171+ E4FF             >                org     Dict_Ptr
 171+ 6B3C             >
 171+ 6B3C FD 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 6B3E             >
 171+ 6B3E             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6B3E CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6B41             >
 171+ 6B41             >
 171+ 6B41             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6B41             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6B41             >
 171+ 6B41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6B41 26          >                db      38
 172+ 6B42                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 6B42             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 6B42             >
 172+ 6B42             >Dict_Ptr        defl    $
 172+ 6B42             >
 172+ 6B42             >//              ______________________________________________________________________
 172+ 6B42             >//              Heap part
 172+ 6B42             >
 172+ 6B42             >
 172+ 6B42             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FF             >
 172+ E4FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FF             >Latest_Definition defl  Heap_Ptr
 172+ E4FF             >
 172+ E4FF             >                // dummy db directives used to calculate length of namec
 172+ E4FF 43 4F 4E 54 >                db      "CONTEXT"
 172+ E503 45 58 54    >
 172+ E506             >len_NFA         defl    $ - temp_NFA
 172+ E506             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FF             >
 172+ E4FF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E500 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E504 45 58 54    >
 172+ E507             >                org     $-1                 // alter last byte of Name just above to set
 172+ E506 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E507             >
 172+ E507 F4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E509             >Prev_Ptr        defl    Heap_Ptr
 172+ E509             >
 172+ E509             >mirror_Ptr      defl    $
 172+ E509             >
 172+ E509 44 6B       >                dw      Dict_Ptr + 2        // xt
 172+ E50B             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E50B             >
 172+ E50B             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E50B             >
 172+ E50B             >//              ______________________________________________________________________
 172+ E50B             >//              Dictionary part
 172+ E50B             >
 172+ E50B             >                org     Dict_Ptr
 172+ 6B42             >
 172+ 6B42 09 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 6B44             >
 172+ 6B44             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6B44 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6B47             >
 172+ 6B47             >
 172+ 6B47             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6B47             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6B47             >
 172+ 6B47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6B47 28          >                db      40
 173+ 6B48                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 6B48             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 6B48             >
 173+ 6B48             >Dict_Ptr        defl    $
 173+ 6B48             >
 173+ 6B48             >//              ______________________________________________________________________
 173+ 6B48             >//              Heap part
 173+ 6B48             >
 173+ 6B48             >
 173+ 6B48             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E50B             >
 173+ E50B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E50B             >Latest_Definition defl  Heap_Ptr
 173+ E50B             >
 173+ E50B             >                // dummy db directives used to calculate length of namec
 173+ E50B 43 55 52 52 >                db      "CURRENT"
 173+ E50F 45 4E 54    >
 173+ E512             >len_NFA         defl    $ - temp_NFA
 173+ E512             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E50B             >
 173+ E50B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E50C 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E510 45 4E 54    >
 173+ E513             >                org     $-1                 // alter last byte of Name just above to set
 173+ E512 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E513             >
 173+ E513 FF 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E515             >Prev_Ptr        defl    Heap_Ptr
 173+ E515             >
 173+ E515             >mirror_Ptr      defl    $
 173+ E515             >
 173+ E515 4A 6B       >                dw      Dict_Ptr + 2        // xt
 173+ E517             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E517             >
 173+ E517             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E517             >
 173+ E517             >//              ______________________________________________________________________
 173+ E517             >//              Dictionary part
 173+ E517             >
 173+ E517             >                org     Dict_Ptr
 173+ 6B48             >
 173+ 6B48 15 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 6B4A             >
 173+ 6B4A             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6B4A CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6B4D             >
 173+ 6B4D             >
 173+ 6B4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6B4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6B4D             >
 173+ 6B4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6B4D 2A          >                db      42
 174+ 6B4E                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 6B4E             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 6B4E             >
 174+ 6B4E             >Dict_Ptr        defl    $
 174+ 6B4E             >
 174+ 6B4E             >//              ______________________________________________________________________
 174+ 6B4E             >//              Heap part
 174+ 6B4E             >
 174+ 6B4E             >
 174+ 6B4E             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E517             >
 174+ E517             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E517             >Latest_Definition defl  Heap_Ptr
 174+ E517             >
 174+ E517             >                // dummy db directives used to calculate length of namec
 174+ E517 53 54 41 54 >                db      "STATE"
 174+ E51B 45          >
 174+ E51C             >len_NFA         defl    $ - temp_NFA
 174+ E51C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E517             >
 174+ E517 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E518 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E51C 45          >
 174+ E51D             >                org     $-1                 // alter last byte of Name just above to set
 174+ E51C C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51D             >
 174+ E51D 0B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51F             >Prev_Ptr        defl    Heap_Ptr
 174+ E51F             >
 174+ E51F             >mirror_Ptr      defl    $
 174+ E51F             >
 174+ E51F 50 6B       >                dw      Dict_Ptr + 2        // xt
 174+ E521             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E521             >
 174+ E521             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E521             >
 174+ E521             >//              ______________________________________________________________________
 174+ E521             >//              Dictionary part
 174+ E521             >
 174+ E521             >                org     Dict_Ptr
 174+ 6B4E             >
 174+ 6B4E 1F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 6B50             >
 174+ 6B50             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6B50 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6B53             >
 174+ 6B53             >
 174+ 6B53             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6B53             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6B53             >
 174+ 6B53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6B53 2C          >                db      44
 175+ 6B54                              User_Def BASE       , "BASE"      , 46 //
 175+ 6B54             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 6B54             >
 175+ 6B54             >Dict_Ptr        defl    $
 175+ 6B54             >
 175+ 6B54             >//              ______________________________________________________________________
 175+ 6B54             >//              Heap part
 175+ 6B54             >
 175+ 6B54             >
 175+ 6B54             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E521             >
 175+ E521             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E521             >Latest_Definition defl  Heap_Ptr
 175+ E521             >
 175+ E521             >                // dummy db directives used to calculate length of namec
 175+ E521 42 41 53 45 >                db      "BASE"
 175+ E525             >len_NFA         defl    $ - temp_NFA
 175+ E525             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E521             >
 175+ E521 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E522 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E526             >                org     $-1                 // alter last byte of Name just above to set
 175+ E525 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E526             >
 175+ E526 17 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E528             >Prev_Ptr        defl    Heap_Ptr
 175+ E528             >
 175+ E528             >mirror_Ptr      defl    $
 175+ E528             >
 175+ E528 56 6B       >                dw      Dict_Ptr + 2        // xt
 175+ E52A             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E52A             >
 175+ E52A             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E52A             >
 175+ E52A             >//              ______________________________________________________________________
 175+ E52A             >//              Dictionary part
 175+ E52A             >
 175+ E52A             >                org     Dict_Ptr
 175+ 6B54             >
 175+ 6B54 28 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 6B56             >
 175+ 6B56             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6B56 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6B59             >
 175+ 6B59             >
 175+ 6B59             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6B59             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6B59             >
 175+ 6B59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6B59 2E          >                db      46
 176+ 6B5A                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 6B5A             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 6B5A             >
 176+ 6B5A             >Dict_Ptr        defl    $
 176+ 6B5A             >
 176+ 6B5A             >//              ______________________________________________________________________
 176+ 6B5A             >//              Heap part
 176+ 6B5A             >
 176+ 6B5A             >
 176+ 6B5A             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E52A             >
 176+ E52A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E52A             >Latest_Definition defl  Heap_Ptr
 176+ E52A             >
 176+ E52A             >                // dummy db directives used to calculate length of namec
 176+ E52A 44 50 4C    >                db      "DPL"
 176+ E52D             >len_NFA         defl    $ - temp_NFA
 176+ E52D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E52A             >
 176+ E52A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E52B 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52E             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52D CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52E             >
 176+ E52E 21 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E530             >Prev_Ptr        defl    Heap_Ptr
 176+ E530             >
 176+ E530             >mirror_Ptr      defl    $
 176+ E530             >
 176+ E530 5C 6B       >                dw      Dict_Ptr + 2        // xt
 176+ E532             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E532             >
 176+ E532             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E532             >
 176+ E532             >//              ______________________________________________________________________
 176+ E532             >//              Dictionary part
 176+ E532             >
 176+ E532             >                org     Dict_Ptr
 176+ 6B5A             >
 176+ 6B5A 30 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 6B5C             >
 176+ 6B5C             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6B5C CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6B5F             >
 176+ 6B5F             >
 176+ 6B5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6B5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6B5F             >
 176+ 6B5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6B5F 30          >                db      48
 177+ 6B60                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 6B60             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 6B60             >
 177+ 6B60             >Dict_Ptr        defl    $
 177+ 6B60             >
 177+ 6B60             >//              ______________________________________________________________________
 177+ 6B60             >//              Heap part
 177+ 6B60             >
 177+ 6B60             >
 177+ 6B60             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E532             >
 177+ E532             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E532             >Latest_Definition defl  Heap_Ptr
 177+ E532             >
 177+ E532             >                // dummy db directives used to calculate length of namec
 177+ E532 46 4C 44    >                db      "FLD"
 177+ E535             >len_NFA         defl    $ - temp_NFA
 177+ E535             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E532             >
 177+ E532 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E533 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E536             >                org     $-1                 // alter last byte of Name just above to set
 177+ E535 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E536             >
 177+ E536 2A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E538             >Prev_Ptr        defl    Heap_Ptr
 177+ E538             >
 177+ E538             >mirror_Ptr      defl    $
 177+ E538             >
 177+ E538 62 6B       >                dw      Dict_Ptr + 2        // xt
 177+ E53A             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E53A             >
 177+ E53A             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E53A             >
 177+ E53A             >//              ______________________________________________________________________
 177+ E53A             >//              Dictionary part
 177+ E53A             >
 177+ E53A             >                org     Dict_Ptr
 177+ 6B60             >
 177+ 6B60 38 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 6B62             >
 177+ 6B62             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6B62 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6B65             >
 177+ 6B65             >
 177+ 6B65             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6B65             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6B65             >
 177+ 6B65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6B65 32          >                db      50
 178+ 6B66                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 6B66             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 6B66             >
 178+ 6B66             >Dict_Ptr        defl    $
 178+ 6B66             >
 178+ 6B66             >//              ______________________________________________________________________
 178+ 6B66             >//              Heap part
 178+ 6B66             >
 178+ 6B66             >
 178+ 6B66             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E53A             >
 178+ E53A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E53A             >Latest_Definition defl  Heap_Ptr
 178+ E53A             >
 178+ E53A             >                // dummy db directives used to calculate length of namec
 178+ E53A 43 53 50    >                db      "CSP"
 178+ E53D             >len_NFA         defl    $ - temp_NFA
 178+ E53D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E53A             >
 178+ E53A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E53B 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53E             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53D D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53E             >
 178+ E53E 32 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E540             >Prev_Ptr        defl    Heap_Ptr
 178+ E540             >
 178+ E540             >mirror_Ptr      defl    $
 178+ E540             >
 178+ E540 68 6B       >                dw      Dict_Ptr + 2        // xt
 178+ E542             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E542             >
 178+ E542             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E542             >
 178+ E542             >//              ______________________________________________________________________
 178+ E542             >//              Dictionary part
 178+ E542             >
 178+ E542             >                org     Dict_Ptr
 178+ 6B66             >
 178+ 6B66 40 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 6B68             >
 178+ 6B68             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6B68 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6B6B             >
 178+ 6B6B             >
 178+ 6B6B             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6B6B             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6B6B             >
 178+ 6B6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6B6B 34          >                db      52
 179+ 6B6C                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 6B6C             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 6B6C             >
 179+ 6B6C             >Dict_Ptr        defl    $
 179+ 6B6C             >
 179+ 6B6C             >//              ______________________________________________________________________
 179+ 6B6C             >//              Heap part
 179+ 6B6C             >
 179+ 6B6C             >
 179+ 6B6C             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E542             >
 179+ E542             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E542             >Latest_Definition defl  Heap_Ptr
 179+ E542             >
 179+ E542             >                // dummy db directives used to calculate length of namec
 179+ E542 52 23       >                db      "R#"
 179+ E544             >len_NFA         defl    $ - temp_NFA
 179+ E544             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E542             >
 179+ E542 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E543 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E545             >                org     $-1                 // alter last byte of Name just above to set
 179+ E544 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E545             >
 179+ E545 3A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E547             >Prev_Ptr        defl    Heap_Ptr
 179+ E547             >
 179+ E547             >mirror_Ptr      defl    $
 179+ E547             >
 179+ E547 6E 6B       >                dw      Dict_Ptr + 2        // xt
 179+ E549             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E549             >
 179+ E549             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E549             >
 179+ E549             >//              ______________________________________________________________________
 179+ E549             >//              Dictionary part
 179+ E549             >
 179+ E549             >                org     Dict_Ptr
 179+ 6B6C             >
 179+ 6B6C 47 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 6B6E             >
 179+ 6B6E             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6B6E CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6B71             >
 179+ 6B71             >
 179+ 6B71             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6B71             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6B71             >
 179+ 6B71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6B71 36          >                db      54
 180+ 6B72                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 6B72             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 6B72             >
 180+ 6B72             >Dict_Ptr        defl    $
 180+ 6B72             >
 180+ 6B72             >//              ______________________________________________________________________
 180+ 6B72             >//              Heap part
 180+ 6B72             >
 180+ 6B72             >
 180+ 6B72             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E549             >
 180+ E549             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E549             >Latest_Definition defl  Heap_Ptr
 180+ E549             >
 180+ E549             >                // dummy db directives used to calculate length of namec
 180+ E549 48 4C 44    >                db      "HLD"
 180+ E54C             >len_NFA         defl    $ - temp_NFA
 180+ E54C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E549             >
 180+ E549 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E54A 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54D             >                org     $-1                 // alter last byte of Name just above to set
 180+ E54C C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54D             >
 180+ E54D 42 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54F             >Prev_Ptr        defl    Heap_Ptr
 180+ E54F             >
 180+ E54F             >mirror_Ptr      defl    $
 180+ E54F             >
 180+ E54F 74 6B       >                dw      Dict_Ptr + 2        // xt
 180+ E551             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E551             >
 180+ E551             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E551             >
 180+ E551             >//              ______________________________________________________________________
 180+ E551             >//              Dictionary part
 180+ E551             >
 180+ E551             >                org     Dict_Ptr
 180+ 6B72             >
 180+ 6B72 4F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 6B74             >
 180+ 6B74             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6B74 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6B77             >
 180+ 6B77             >
 180+ 6B77             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6B77             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6B77             >
 180+ 6B77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6B77 38          >                db      56
 181+ 6B78                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 6B78             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 6B78             >
 181+ 6B78             >Dict_Ptr        defl    $
 181+ 6B78             >
 181+ 6B78             >//              ______________________________________________________________________
 181+ 6B78             >//              Heap part
 181+ 6B78             >
 181+ 6B78             >
 181+ 6B78             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E551             >
 181+ E551             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E551             >Latest_Definition defl  Heap_Ptr
 181+ E551             >
 181+ E551             >                // dummy db directives used to calculate length of namec
 181+ E551 55 53 45 44 >                db      "USED"
 181+ E555             >len_NFA         defl    $ - temp_NFA
 181+ E555             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E551             >
 181+ E551 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E552 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E556             >                org     $-1                 // alter last byte of Name just above to set
 181+ E555 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E556             >
 181+ E556 49 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E558             >Prev_Ptr        defl    Heap_Ptr
 181+ E558             >
 181+ E558             >mirror_Ptr      defl    $
 181+ E558             >
 181+ E558 7A 6B       >                dw      Dict_Ptr + 2        // xt
 181+ E55A             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E55A             >
 181+ E55A             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E55A             >
 181+ E55A             >//              ______________________________________________________________________
 181+ E55A             >//              Dictionary part
 181+ E55A             >
 181+ E55A             >                org     Dict_Ptr
 181+ 6B78             >
 181+ 6B78 58 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 6B7A             >
 181+ 6B7A             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6B7A CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6B7D             >
 181+ 6B7D             >
 181+ 6B7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6B7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6B7D             >
 181+ 6B7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6B7D 3A          >                db      58
 182+ 6B7E                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 6B7E             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 6B7E             >
 182+ 6B7E             >Dict_Ptr        defl    $
 182+ 6B7E             >
 182+ 6B7E             >//              ______________________________________________________________________
 182+ 6B7E             >//              Heap part
 182+ 6B7E             >
 182+ 6B7E             >
 182+ 6B7E             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E55A             >
 182+ E55A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E55A             >Latest_Definition defl  Heap_Ptr
 182+ E55A             >
 182+ E55A             >                // dummy db directives used to calculate length of namec
 182+ E55A 50 52 45 56 >                db      "PREV"
 182+ E55E             >len_NFA         defl    $ - temp_NFA
 182+ E55E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E55A             >
 182+ E55A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E55B 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55F             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55E D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55F             >
 182+ E55F 51 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E561             >Prev_Ptr        defl    Heap_Ptr
 182+ E561             >
 182+ E561             >mirror_Ptr      defl    $
 182+ E561             >
 182+ E561 80 6B       >                dw      Dict_Ptr + 2        // xt
 182+ E563             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E563             >
 182+ E563             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E563             >
 182+ E563             >//              ______________________________________________________________________
 182+ E563             >//              Dictionary part
 182+ E563             >
 182+ E563             >                org     Dict_Ptr
 182+ 6B7E             >
 182+ 6B7E 61 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 6B80             >
 182+ 6B80             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6B80 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6B83             >
 182+ 6B83             >
 182+ 6B83             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6B83             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6B83             >
 182+ 6B83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6B83 3C          >                db      60
 183+ 6B84                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 6B84             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 6B84             >
 183+ 6B84             >Dict_Ptr        defl    $
 183+ 6B84             >
 183+ 6B84             >//              ______________________________________________________________________
 183+ 6B84             >//              Heap part
 183+ 6B84             >
 183+ 6B84             >
 183+ 6B84             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E563             >
 183+ E563             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E563             >Latest_Definition defl  Heap_Ptr
 183+ E563             >
 183+ E563             >                // dummy db directives used to calculate length of namec
 183+ E563 4C 50       >                db      "LP"
 183+ E565             >len_NFA         defl    $ - temp_NFA
 183+ E565             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E563             >
 183+ E563 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E564 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E566             >                org     $-1                 // alter last byte of Name just above to set
 183+ E565 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E566             >
 183+ E566 5A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E568             >Prev_Ptr        defl    Heap_Ptr
 183+ E568             >
 183+ E568             >mirror_Ptr      defl    $
 183+ E568             >
 183+ E568 86 6B       >                dw      Dict_Ptr + 2        // xt
 183+ E56A             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E56A             >
 183+ E56A             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E56A             >
 183+ E56A             >//              ______________________________________________________________________
 183+ E56A             >//              Dictionary part
 183+ E56A             >
 183+ E56A             >                org     Dict_Ptr
 183+ 6B84             >
 183+ 6B84 68 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 6B86             >
 183+ 6B86             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6B86 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6B89             >
 183+ 6B89             >
 183+ 6B89             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6B89             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6B89             >
 183+ 6B89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6B89 3E          >                db      62
 184+ 6B8A                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 6B8A             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 6B8A             >
 184+ 6B8A             >Dict_Ptr        defl    $
 184+ 6B8A             >
 184+ 6B8A             >//              ______________________________________________________________________
 184+ 6B8A             >//              Heap part
 184+ 6B8A             >
 184+ 6B8A             >
 184+ 6B8A             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E56A             >
 184+ E56A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E56A             >Latest_Definition defl  Heap_Ptr
 184+ E56A             >
 184+ E56A             >                // dummy db directives used to calculate length of namec
 184+ E56A 50 4C 41 43 >                db      "PLACE"
 184+ E56E 45          >
 184+ E56F             >len_NFA         defl    $ - temp_NFA
 184+ E56F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E56A             >
 184+ E56A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E56B 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56F 45          >
 184+ E570             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56F C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E570             >
 184+ E570 63 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E572             >Prev_Ptr        defl    Heap_Ptr
 184+ E572             >
 184+ E572             >mirror_Ptr      defl    $
 184+ E572             >
 184+ E572 8C 6B       >                dw      Dict_Ptr + 2        // xt
 184+ E574             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E574             >
 184+ E574             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E574             >
 184+ E574             >//              ______________________________________________________________________
 184+ E574             >//              Dictionary part
 184+ E574             >
 184+ E574             >                org     Dict_Ptr
 184+ 6B8A             >
 184+ 6B8A 72 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 6B8C             >
 184+ 6B8C             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6B8C CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6B8F             >
 184+ 6B8F             >
 184+ 6B8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6B8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6B8F             >
 184+ 6B8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6B8F 40          >                db      64
 185+ 6B90                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 6B90             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 6B90             >
 185+ 6B90             >Dict_Ptr        defl    $
 185+ 6B90             >
 185+ 6B90             >//              ______________________________________________________________________
 185+ 6B90             >//              Heap part
 185+ 6B90             >
 185+ 6B90             >
 185+ 6B90             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E574             >
 185+ E574             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E574             >Latest_Definition defl  Heap_Ptr
 185+ E574             >
 185+ E574             >                // dummy db directives used to calculate length of namec
 185+ E574 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E578 43 45 2D 49 >
 185+ E57C 44          >
 185+ E57D             >len_NFA         defl    $ - temp_NFA
 185+ E57D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E574             >
 185+ E574 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E575 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E579 43 45 2D 49 >
 185+ E57D 44          >
 185+ E57E             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57D C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57E             >
 185+ E57E 6A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E580             >Prev_Ptr        defl    Heap_Ptr
 185+ E580             >
 185+ E580             >mirror_Ptr      defl    $
 185+ E580             >
 185+ E580 92 6B       >                dw      Dict_Ptr + 2        // xt
 185+ E582             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E582             >
 185+ E582             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E582             >
 185+ E582             >//              ______________________________________________________________________
 185+ E582             >//              Dictionary part
 185+ E582             >
 185+ E582             >                org     Dict_Ptr
 185+ 6B90             >
 185+ 6B90 80 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 6B92             >
 185+ 6B92             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6B92 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6B95             >
 185+ 6B95             >
 185+ 6B95             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6B95             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6B95             >
 185+ 6B95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6B95 42          >                db      66
 186+ 6B96                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 6B96             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 6B96             >
 186+ 6B96             >Dict_Ptr        defl    $
 186+ 6B96             >
 186+ 6B96             >//              ______________________________________________________________________
 186+ 6B96             >//              Heap part
 186+ 6B96             >
 186+ 6B96             >
 186+ 6B96             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E582             >
 186+ E582             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E582             >Latest_Definition defl  Heap_Ptr
 186+ E582             >
 186+ E582             >                // dummy db directives used to calculate length of namec
 186+ E582 53 50 41 4E >                db      "SPAN"
 186+ E586             >len_NFA         defl    $ - temp_NFA
 186+ E586             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E582             >
 186+ E582 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E583 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E587             >                org     $-1                 // alter last byte of Name just above to set
 186+ E586 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E587             >
 186+ E587 74 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E589             >Prev_Ptr        defl    Heap_Ptr
 186+ E589             >
 186+ E589             >mirror_Ptr      defl    $
 186+ E589             >
 186+ E589 98 6B       >                dw      Dict_Ptr + 2        // xt
 186+ E58B             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E58B             >
 186+ E58B             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E58B             >
 186+ E58B             >//              ______________________________________________________________________
 186+ E58B             >//              Dictionary part
 186+ E58B             >
 186+ E58B             >                org     Dict_Ptr
 186+ 6B96             >
 186+ 6B96 89 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 6B98             >
 186+ 6B98             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 6B98 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 6B9B             >
 186+ 6B9B             >
 186+ 6B9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 6B9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 6B9B             >
 186+ 6B9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 6B9B 44          >                db      68
 187+ 6B9C                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 6B9C             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 6B9C             >
 187+ 6B9C             >Dict_Ptr        defl    $
 187+ 6B9C             >
 187+ 6B9C             >//              ______________________________________________________________________
 187+ 6B9C             >//              Heap part
 187+ 6B9C             >
 187+ 6B9C             >
 187+ 6B9C             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E58B             >
 187+ E58B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E58B             >Latest_Definition defl  Heap_Ptr
 187+ E58B             >
 187+ E58B             >                // dummy db directives used to calculate length of namec
 187+ E58B 48 41 4E 44 >                db      "HANDLER"
 187+ E58F 4C 45 52    >
 187+ E592             >len_NFA         defl    $ - temp_NFA
 187+ E592             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E58B             >
 187+ E58B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E58C 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E590 4C 45 52    >
 187+ E593             >                org     $-1                 // alter last byte of Name just above to set
 187+ E592 D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E593             >
 187+ E593 82 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E595             >Prev_Ptr        defl    Heap_Ptr
 187+ E595             >
 187+ E595             >mirror_Ptr      defl    $
 187+ E595             >
 187+ E595 9E 6B       >                dw      Dict_Ptr + 2        // xt
 187+ E597             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E597             >
 187+ E597             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E597             >
 187+ E597             >//              ______________________________________________________________________
 187+ E597             >//              Dictionary part
 187+ E597             >
 187+ E597             >                org     Dict_Ptr
 187+ 6B9C             >
 187+ 6B9C 95 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 6B9E             >
 187+ 6B9E             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6B9E CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 6BA1             >
 187+ 6BA1             >
 187+ 6BA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6BA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6BA1             >
 187+ 6BA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 6BA1 46          >                db      70
 188+ 6BA2                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 6BA2             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 6BA2             >
 188+ 6BA2             >Dict_Ptr        defl    $
 188+ 6BA2             >
 188+ 6BA2             >//              ______________________________________________________________________
 188+ 6BA2             >//              Heap part
 188+ 6BA2             >
 188+ 6BA2             >
 188+ 6BA2             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E597             >
 188+ E597             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E597             >Latest_Definition defl  Heap_Ptr
 188+ E597             >
 188+ E597             >                // dummy db directives used to calculate length of namec
 188+ E597 45 58 50    >                db      "EXP"
 188+ E59A             >len_NFA         defl    $ - temp_NFA
 188+ E59A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E597             >
 188+ E597 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E598 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E59B             >                org     $-1                 // alter last byte of Name just above to set
 188+ E59A D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E59B             >
 188+ E59B 8B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59D             >Prev_Ptr        defl    Heap_Ptr
 188+ E59D             >
 188+ E59D             >mirror_Ptr      defl    $
 188+ E59D             >
 188+ E59D A4 6B       >                dw      Dict_Ptr + 2        // xt
 188+ E59F             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59F             >
 188+ E59F             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59F             >
 188+ E59F             >//              ______________________________________________________________________
 188+ E59F             >//              Dictionary part
 188+ E59F             >
 188+ E59F             >                org     Dict_Ptr
 188+ 6BA2             >
 188+ 6BA2 9D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 6BA4             >
 188+ 6BA4             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6BA4 CD 79 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 6BA7             >
 188+ 6BA7             >
 188+ 6BA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6BA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6BA7             >
 188+ 6BA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 6BA7 48          >                db      72
 189+ 6BA8
 190+ 6BA8              //  ______________________________________________________________________
 191+ 6BA8              //
 192+ 6BA8              // here         -- a
 193+ 6BA8                              Colon_Def HERE, "HERE", is_normal
 193+ 6BA8             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 6BA8             >
 193+ 6BA8             >Dict_Ptr        defl    $
 193+ 6BA8             >
 193+ 6BA8             >//              ______________________________________________________________________
 193+ 6BA8             >//              Heap part
 193+ 6BA8             >
 193+ 6BA8             >
 193+ 6BA8             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59F             >
 193+ E59F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59F             >Latest_Definition defl  Heap_Ptr
 193+ E59F             >
 193+ E59F             >                // dummy db directives used to calculate length of namec
 193+ E59F 48 45 52 45 >                db      "HERE"
 193+ E5A3             >len_NFA         defl    $ - temp_NFA
 193+ E5A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59F             >
 193+ E59F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E5A0 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A4             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A3 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A4             >
 193+ E5A4 97 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A6             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A6             >
 193+ E5A6             >mirror_Ptr      defl    $
 193+ E5A6             >
 193+ E5A6 AA 6B       >                dw      Dict_Ptr + 2        // xt
 193+ E5A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A8             >
 193+ E5A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A8             >
 193+ E5A8             >//              ______________________________________________________________________
 193+ E5A8             >//              Dictionary part
 193+ E5A8             >
 193+ E5A8             >                org     Dict_Ptr
 193+ 6BA8             >
 193+ 6BA8 A6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 6BAA             >
 193+ 6BAA             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 6BAA CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 6BAD             >
 193+ 6BAD             >
 193+ 6BAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 6BAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 6BAD             >
 193+ 6BAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 6BAD 02 6B 8F 69                  dw      DP, FETCH               // dp @
 195+ 6BB1 4F 68                        dw      EXIT                    // ;
 196+ 6BB3
 197+ 6BB3              //  ______________________________________________________________________
 198+ 6BB3              //
 199+ 6BB3              // allot        n --
 200+ 6BB3                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 6BB3             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 6BB3             >
 200+ 6BB3             >Dict_Ptr        defl    $
 200+ 6BB3             >
 200+ 6BB3             >//              ______________________________________________________________________
 200+ 6BB3             >//              Heap part
 200+ 6BB3             >
 200+ 6BB3             >
 200+ 6BB3             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A8             >
 200+ E5A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A8             >Latest_Definition defl  Heap_Ptr
 200+ E5A8             >
 200+ E5A8             >                // dummy db directives used to calculate length of namec
 200+ E5A8 41 4C 4C 4F >                db      "ALLOT"
 200+ E5AC 54          >
 200+ E5AD             >len_NFA         defl    $ - temp_NFA
 200+ E5AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A8             >
 200+ E5A8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A9 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AD 54          >
 200+ E5AE             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AD D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AE             >
 200+ E5AE 9F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5B0             >Prev_Ptr        defl    Heap_Ptr
 200+ E5B0             >
 200+ E5B0             >mirror_Ptr      defl    $
 200+ E5B0             >
 200+ E5B0 B5 6B       >                dw      Dict_Ptr + 2        // xt
 200+ E5B2             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5B2             >
 200+ E5B2             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5B2             >
 200+ E5B2             >//              ______________________________________________________________________
 200+ E5B2             >//              Dictionary part
 200+ E5B2             >
 200+ E5B2             >                org     Dict_Ptr
 200+ 6BB3             >
 200+ 6BB3 B0 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 6BB5             >
 200+ 6BB5             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6BB5 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 6BB8             >
 200+ 6BB8             >
 200+ 6BB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6BB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6BB8             >
 200+ 6BB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6BB8 02 6B 77 69                  dw      DP,  PLUSSTORE          // dp +!
 202+ 6BBC 4F 68                        dw      EXIT                    // ;
 203+ 6BBE
 204+ 6BBE              //  ______________________________________________________________________
 205+ 6BBE              //
 206+ 6BBE              // comma        n --
 207+ 6BBE                              Colon_Def COMMA, ",", is_normal
 207+ 6BBE             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 6BBE             >
 207+ 6BBE             >Dict_Ptr        defl    $
 207+ 6BBE             >
 207+ 6BBE             >//              ______________________________________________________________________
 207+ 6BBE             >//              Heap part
 207+ 6BBE             >
 207+ 6BBE             >
 207+ 6BBE             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5B2             >
 207+ E5B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5B2             >Latest_Definition defl  Heap_Ptr
 207+ E5B2             >
 207+ E5B2             >                // dummy db directives used to calculate length of namec
 207+ E5B2 2C          >                db      ","
 207+ E5B3             >len_NFA         defl    $ - temp_NFA
 207+ E5B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5B2             >
 207+ E5B2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B3 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B4             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B3 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B4             >
 207+ E5B4 A8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B6             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B6             >
 207+ E5B6             >mirror_Ptr      defl    $
 207+ E5B6             >
 207+ E5B6 C0 6B       >                dw      Dict_Ptr + 2        // xt
 207+ E5B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B8             >
 207+ E5B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B8             >
 207+ E5B8             >//              ______________________________________________________________________
 207+ E5B8             >//              Dictionary part
 207+ E5B8             >
 207+ E5B8             >                org     Dict_Ptr
 207+ 6BBE             >
 207+ 6BBE B6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 6BC0             >
 207+ 6BC0             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 6BC0 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 6BC3             >
 207+ 6BC3             >
 207+ 6BC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 6BC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 6BC3             >
 207+ 6BC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 6BC3 AA 6B 99 69                  dw      HERE, STORE             // here !
 209+ 6BC7 93 6A B5 6B                  dw      TWO, ALLOT              // 2 allot
 210+ 6BCB 4F 68                        dw      EXIT                    // ;
 211+ 6BCD
 212+ 6BCD              //  ______________________________________________________________________
 213+ 6BCD              //
 214+ 6BCD              // ccomma       c --
 215+ 6BCD                              Colon_Def CCOMMA, "C,", is_normal
 215+ 6BCD             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 6BCD             >
 215+ 6BCD             >Dict_Ptr        defl    $
 215+ 6BCD             >
 215+ 6BCD             >//              ______________________________________________________________________
 215+ 6BCD             >//              Heap part
 215+ 6BCD             >
 215+ 6BCD             >
 215+ 6BCD             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B8             >
 215+ E5B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B8             >Latest_Definition defl  Heap_Ptr
 215+ E5B8             >
 215+ E5B8             >                // dummy db directives used to calculate length of namec
 215+ E5B8 43 2C       >                db      "C,"
 215+ E5BA             >len_NFA         defl    $ - temp_NFA
 215+ E5BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B8             >
 215+ E5B8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B9 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5BB             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5BA AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5BB             >
 215+ E5BB B2 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BD             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BD             >
 215+ E5BD             >mirror_Ptr      defl    $
 215+ E5BD             >
 215+ E5BD CF 6B       >                dw      Dict_Ptr + 2        // xt
 215+ E5BF             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BF             >
 215+ E5BF             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BF             >
 215+ E5BF             >//              ______________________________________________________________________
 215+ E5BF             >//              Dictionary part
 215+ E5BF             >
 215+ E5BF             >                org     Dict_Ptr
 215+ 6BCD             >
 215+ 6BCD BD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 6BCF             >
 215+ 6BCF             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 6BCF CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 6BD2             >
 215+ 6BD2             >
 215+ 6BD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 6BD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 6BD2             >
 215+ 6BD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 6BD2 AA 6B AD 69                  dw      HERE, CSTORE            // here c!
 217+ 6BD6 8C 6A B5 6B                  dw      ONE, ALLOT              // 1 allot
 218+ 6BDA 4F 68                        dw      EXIT                    // ;
 219+ 6BDC
 220+ 6BDC              //  ______________________________________________________________________
 221+ 6BDC              //
 222+ 6BDC              // hpcomma      n --
 223+ 6BDC              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 6BDC              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 6BDC              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 6BDC              //              dw      EXIT                    // ;
 227+ 6BDC
 228+ 6BDC              //  ______________________________________________________________________
 229+ 6BDC              //
 230+ 6BDC              // s>d          n -- d
 231+ 6BDC              // converts a single precision integer in a double precision
 232+ 6BDC                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 6BDC             >
 232+ 6BDC             >Dict_Ptr        defl    $
 232+ 6BDC             >
 232+ 6BDC             >//              ______________________________________________________________________
 232+ 6BDC             >//              Heap part
 232+ 6BDC             >
 232+ 6BDC             >
 232+ 6BDC             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5BF             >
 232+ E5BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5BF             >Latest_Definition defl  Heap_Ptr
 232+ E5BF             >
 232+ E5BF             >                // dummy db directives used to calculate length of namec
 232+ E5BF 53 3E 44    >                db      "S>D"
 232+ E5C2             >len_NFA         defl    $ - temp_NFA
 232+ E5C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5BF             >
 232+ E5BF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5C0 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C3             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5C2 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C3             >
 232+ E5C3 B8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5C5             >Prev_Ptr        defl    Heap_Ptr
 232+ E5C5             >
 232+ E5C5             >mirror_Ptr      defl    $
 232+ E5C5             >
 232+ E5C5 DE 6B       >                dw      Dict_Ptr + 2        // xt
 232+ E5C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C7             >
 232+ E5C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C7             >
 232+ E5C7             >//              ______________________________________________________________________
 232+ E5C7             >//              Dictionary part
 232+ E5C7             >
 232+ E5C7             >                org     Dict_Ptr
 232+ 6BDC             >
 232+ 6BDC C5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 6BDE             >
 232+ 6BDE             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 6BDE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 6BDE ~           >
 232+ 6BDE ~           >
 232+ 6BDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 6BDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 6BDE             >
 232+ 6BDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 6BDE E1                           pop     hl
 234+ 6BDF 7C                           ld      a, h
 235+ 6BE0 E5                           push    hl
 236+ 6BE1 17                           rla
 237+ 6BE2 ED 62                        sbc     hl, hl
 238+ 6BE4 E5                           push    hl
 239+ 6BE5                              next
 239+ 6BE5 DD E9       >                jp      (ix)
 240+ 6BE7
 241+ 6BE7              //  ______________________________________________________________________
 242+ 6BE7              //
 243+ 6BE7              // -            n1 n2 -- n3
 244+ 6BE7              // subtraction
 245+ 6BE7                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 6BE7             >
 245+ 6BE7             >Dict_Ptr        defl    $
 245+ 6BE7             >
 245+ 6BE7             >//              ______________________________________________________________________
 245+ 6BE7             >//              Heap part
 245+ 6BE7             >
 245+ 6BE7             >
 245+ 6BE7             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C7             >
 245+ E5C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C7             >Latest_Definition defl  Heap_Ptr
 245+ E5C7             >
 245+ E5C7             >                // dummy db directives used to calculate length of namec
 245+ E5C7 2D          >                db      "-"
 245+ E5C8             >len_NFA         defl    $ - temp_NFA
 245+ E5C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C7             >
 245+ E5C7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C8 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C9             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C8 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C9             >
 245+ E5C9 BF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5CB             >Prev_Ptr        defl    Heap_Ptr
 245+ E5CB             >
 245+ E5CB             >mirror_Ptr      defl    $
 245+ E5CB             >
 245+ E5CB E9 6B       >                dw      Dict_Ptr + 2        // xt
 245+ E5CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5CD             >
 245+ E5CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5CD             >
 245+ E5CD             >//              ______________________________________________________________________
 245+ E5CD             >//              Dictionary part
 245+ E5CD             >
 245+ E5CD             >                org     Dict_Ptr
 245+ 6BE7             >
 245+ 6BE7 CB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 6BE9             >
 245+ 6BE9             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 6BE9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 6BE9 ~           >
 245+ 6BE9 ~           >
 245+ 6BE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 6BE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 6BE9             >
 245+ 6BE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 6BE9 D9                           exx
 247+ 6BEA D1                           pop     de
 248+ 6BEB E1                           pop     hl
 249+ 6BEC A7                           and     a
 250+ 6BED ED 52                        sbc     hl, de
 251+ 6BEF E5                           push    hl
 252+ 6BF0 D9                           exx
 253+ 6BF1                              next
 253+ 6BF1 DD E9       >                jp      (ix)
 254+ 6BF3
 255+ 6BF3
 256+ 6BF3              //  ______________________________________________________________________
 257+ 6BF3              //
 258+ 6BF3              // =            n1 n2 -- n3
 259+ 6BF3              // equals
 260+ 6BF3                              Colon_Def EQUALS, "=", is_normal
 260+ 6BF3             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 6BF3             >
 260+ 6BF3             >Dict_Ptr        defl    $
 260+ 6BF3             >
 260+ 6BF3             >//              ______________________________________________________________________
 260+ 6BF3             >//              Heap part
 260+ 6BF3             >
 260+ 6BF3             >
 260+ 6BF3             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5CD             >
 260+ E5CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5CD             >Latest_Definition defl  Heap_Ptr
 260+ E5CD             >
 260+ E5CD             >                // dummy db directives used to calculate length of namec
 260+ E5CD 3D          >                db      "="
 260+ E5CE             >len_NFA         defl    $ - temp_NFA
 260+ E5CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5CD             >
 260+ E5CD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5CE 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5CF             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5CE BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5CF             >
 260+ E5CF C7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5D1             >Prev_Ptr        defl    Heap_Ptr
 260+ E5D1             >
 260+ E5D1             >mirror_Ptr      defl    $
 260+ E5D1             >
 260+ E5D1 F5 6B       >                dw      Dict_Ptr + 2        // xt
 260+ E5D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D3             >
 260+ E5D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D3             >
 260+ E5D3             >//              ______________________________________________________________________
 260+ E5D3             >//              Dictionary part
 260+ E5D3             >
 260+ E5D3             >                org     Dict_Ptr
 260+ 6BF3             >
 260+ 6BF3 D1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6BF5             >
 260+ 6BF5             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6BF5 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 6BF8             >
 260+ 6BF8             >
 260+ 6BF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6BF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6BF8             >
 260+ 6BF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6BF8 E9 6B 74 68                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 6BFC 4F 68                        dw      EXIT                    // ;
 263+ 6BFE
 264+ 6BFE              //  ______________________________________________________________________
 265+ 6BFE              //
 266+ 6BFE              // u<           u1 u2 -- u3
 267+ 6BFE              // unsigned less-than
 268+ 6BFE                              New_Def ULESS, "U<", is_code, is_normal
 268+ 6BFE             >
 268+ 6BFE             >Dict_Ptr        defl    $
 268+ 6BFE             >
 268+ 6BFE             >//              ______________________________________________________________________
 268+ 6BFE             >//              Heap part
 268+ 6BFE             >
 268+ 6BFE             >
 268+ 6BFE             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D3             >
 268+ E5D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D3             >Latest_Definition defl  Heap_Ptr
 268+ E5D3             >
 268+ E5D3             >                // dummy db directives used to calculate length of namec
 268+ E5D3 55 3C       >                db      "U<"
 268+ E5D5             >len_NFA         defl    $ - temp_NFA
 268+ E5D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D3             >
 268+ E5D3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D4 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D6             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5D5 BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D6             >
 268+ E5D6 CD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D8             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D8             >
 268+ E5D8             >mirror_Ptr      defl    $
 268+ E5D8             >
 268+ E5D8 00 6C       >                dw      Dict_Ptr + 2        // xt
 268+ E5DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5DA             >
 268+ E5DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5DA             >
 268+ E5DA             >//              ______________________________________________________________________
 268+ E5DA             >//              Dictionary part
 268+ E5DA             >
 268+ E5DA             >                org     Dict_Ptr
 268+ 6BFE             >
 268+ 6BFE D8 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 6C00             >
 268+ 6C00             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 6C00 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 6C00 ~           >
 268+ 6C00 ~           >
 268+ 6C00             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 6C00             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 6C00             >
 268+ 6C00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 6C00 D9                           exx
 270+ 6C01 D1                           pop     de
 271+ 6C02 E1                           pop     hl
 272+ 6C03              Unsigned_Less_Exit:
 273+ 6C03 A7                           and     a
 274+ 6C04 ED 52                        sbc     hl, de
 275+ 6C06 ED 62                        sbc     hl, hl
 276+ 6C08 E5                           push    hl
 277+ 6C09 D9                           exx
 278+ 6C0A                              next
 278+ 6C0A DD E9       >                jp      (ix)
 279+ 6C0C
 280+ 6C0C              //  ______________________________________________________________________
 281+ 6C0C              //
 282+ 6C0C              // <           n1 n2 -- n3
 283+ 6C0C              // less-than
 284+ 6C0C                              New_Def LESS, "<", is_code, is_normal
 284+ 6C0C             >
 284+ 6C0C             >Dict_Ptr        defl    $
 284+ 6C0C             >
 284+ 6C0C             >//              ______________________________________________________________________
 284+ 6C0C             >//              Heap part
 284+ 6C0C             >
 284+ 6C0C             >
 284+ 6C0C             >                org     (Heap_Ptr & $1FFF) + $E000
 284+ E5DA             >
 284+ E5DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ E5DA             >Latest_Definition defl  Heap_Ptr
 284+ E5DA             >
 284+ E5DA             >                // dummy db directives used to calculate length of namec
 284+ E5DA 3C          >                db      "<"
 284+ E5DB             >len_NFA         defl    $ - temp_NFA
 284+ E5DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ E5DA             >
 284+ E5DA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ E5DB 3C          >                db      "<"               // name string in 7-bit ascii, but
 284+ E5DC             >                org     $-1                 // alter last byte of Name just above to set
 284+ E5DB BC          >                db      {b $} | END_BIT     // msb as name end
 284+ E5DC             >
 284+ E5DC D3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 284+ E5DE             >Prev_Ptr        defl    Heap_Ptr
 284+ E5DE             >
 284+ E5DE             >mirror_Ptr      defl    $
 284+ E5DE             >
 284+ E5DE 0E 6C       >                dw      Dict_Ptr + 2        // xt
 284+ E5E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 284+ E5E0             >
 284+ E5E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 284+ E5E0             >
 284+ E5E0             >//              ______________________________________________________________________
 284+ E5E0             >//              Dictionary part
 284+ E5E0             >
 284+ E5E0             >                org     Dict_Ptr
 284+ 6C0C             >
 284+ 6C0C DE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 284+ 6C0E             >
 284+ 6C0E             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 6C0E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 284+ 6C0E ~           >
 284+ 6C0E ~           >
 284+ 6C0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 6C0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 6C0E             >
 284+ 6C0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 6C0E D9                           exx
 286+ 6C0F E1                           pop     hl
 287+ 6C10 D1                           pop     de
 288+ 6C11 01 00 80                     ld      bc, $8000
 289+ 6C14 09                           add     hl, bc
 290+ 6C15 EB                           ex      de, hl
 291+ 6C16 09                           add     hl, bc
 292+ 6C17 18 EA                        jr      Unsigned_Less_Exit
 293+ 6C19              //              and     a
 294+ 6C19              //              sbc     hl, de
 295+ 6C19              //              sbc     hl, hl
 296+ 6C19              //              push    hl
 297+ 6C19              //              exx
 298+ 6C19              //              next
 299+ 6C19
 300+ 6C19              //  ______________________________________________________________________
 301+ 6C19              //
 302+ 6C19              // >            n1 n2 -- n3
 303+ 6C19              // greater than
 304+ 6C19                              Colon_Def GREATER, ">", is_normal
 304+ 6C19             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 6C19             >
 304+ 6C19             >Dict_Ptr        defl    $
 304+ 6C19             >
 304+ 6C19             >//              ______________________________________________________________________
 304+ 6C19             >//              Heap part
 304+ 6C19             >
 304+ 6C19             >
 304+ 6C19             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5E0             >
 304+ E5E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5E0             >Latest_Definition defl  Heap_Ptr
 304+ E5E0             >
 304+ E5E0             >                // dummy db directives used to calculate length of namec
 304+ E5E0 3E          >                db      ">"
 304+ E5E1             >len_NFA         defl    $ - temp_NFA
 304+ E5E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5E0             >
 304+ E5E0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5E1 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5E2             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5E1 BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5E2             >
 304+ E5E2 DA 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E4             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E4             >
 304+ E5E4             >mirror_Ptr      defl    $
 304+ E5E4             >
 304+ E5E4 1B 6C       >                dw      Dict_Ptr + 2        // xt
 304+ E5E6             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E6             >
 304+ E5E6             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E6             >
 304+ E5E6             >//              ______________________________________________________________________
 304+ E5E6             >//              Dictionary part
 304+ E5E6             >
 304+ E5E6             >                org     Dict_Ptr
 304+ 6C19             >
 304+ 6C19 E4 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 6C1B             >
 304+ 6C1B             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 6C1B CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 6C1E             >
 304+ 6C1E             >
 304+ 6C1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 6C1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 6C1E             >
 304+ 6C1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 6C1E 1E 69 0E 6C                  dw      SWAP, LESS              // swap <
 306+ 6C22 4F 68                        dw      EXIT                    // ;
 307+ 6C24              //  ______________________________________________________________________
 308+ 6C24              //
 309+ 6C24              // min          n1 n2 -- n3
 310+ 6C24              // minimum between n1 and n2
 311+ 6C24                              Colon_Def MIN, "MIN" , is_normal
 311+ 6C24             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 6C24             >
 311+ 6C24             >Dict_Ptr        defl    $
 311+ 6C24             >
 311+ 6C24             >//              ______________________________________________________________________
 311+ 6C24             >//              Heap part
 311+ 6C24             >
 311+ 6C24             >
 311+ 6C24             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E6             >
 311+ E5E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E6             >Latest_Definition defl  Heap_Ptr
 311+ E5E6             >
 311+ E5E6             >                // dummy db directives used to calculate length of namec
 311+ E5E6 4D 49 4E    >                db      "MIN"
 311+ E5E9             >len_NFA         defl    $ - temp_NFA
 311+ E5E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E6             >
 311+ E5E6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E7 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5EA             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E9 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5EA             >
 311+ E5EA E0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5EC             >Prev_Ptr        defl    Heap_Ptr
 311+ E5EC             >
 311+ E5EC             >mirror_Ptr      defl    $
 311+ E5EC             >
 311+ E5EC 26 6C       >                dw      Dict_Ptr + 2        // xt
 311+ E5EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5EE             >
 311+ E5EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5EE             >
 311+ E5EE             >//              ______________________________________________________________________
 311+ E5EE             >//              Dictionary part
 311+ E5EE             >
 311+ E5EE             >                org     Dict_Ptr
 311+ 6C24             >
 311+ 6C24 EC 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 6C26             >
 311+ 6C26             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 6C26 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 6C29             >
 311+ 6C29             >
 311+ 6C29             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 6C29             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 6C29             >
 311+ 6C29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 6C29 6D 69                        dw      TWO_DUP                 // 2dup
 313+ 6C2B 1B 6C                        dw      GREATER                 // >
 314+ 6C2D F5 63                        dw      ZBRANCH
 315+ 6C2F 04 00                        dw      Min_Skip - $   // if
 316+ 6C31 1E 69                        dw          SWAP                //      swap
 317+ 6C33              Min_Skip:                                       // endif
 318+ 6C33 0A 69                        dw      DROP                    // drop
 319+ 6C35 4F 68                        dw      EXIT                    // ;
 320+ 6C37
 321+ 6C37              //  ______________________________________________________________________
 322+ 6C37              //
 323+ 6C37              // max          n1 n2 -- n3
 324+ 6C37              // maximum between n1 and n2
 325+ 6C37                              Colon_Def MAX, "MAX", is_normal
 325+ 6C37             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 6C37             >
 325+ 6C37             >Dict_Ptr        defl    $
 325+ 6C37             >
 325+ 6C37             >//              ______________________________________________________________________
 325+ 6C37             >//              Heap part
 325+ 6C37             >
 325+ 6C37             >
 325+ 6C37             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5EE             >
 325+ E5EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5EE             >Latest_Definition defl  Heap_Ptr
 325+ E5EE             >
 325+ E5EE             >                // dummy db directives used to calculate length of namec
 325+ E5EE 4D 41 58    >                db      "MAX"
 325+ E5F1             >len_NFA         defl    $ - temp_NFA
 325+ E5F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5EE             >
 325+ E5EE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5EF 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5F2             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5F1 D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5F2             >
 325+ E5F2 E6 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F4             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F4             >
 325+ E5F4             >mirror_Ptr      defl    $
 325+ E5F4             >
 325+ E5F4 39 6C       >                dw      Dict_Ptr + 2        // xt
 325+ E5F6             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F6             >
 325+ E5F6             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F6             >
 325+ E5F6             >//              ______________________________________________________________________
 325+ E5F6             >//              Dictionary part
 325+ E5F6             >
 325+ E5F6             >                org     Dict_Ptr
 325+ 6C37             >
 325+ 6C37 F4 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 6C39             >
 325+ 6C39             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 6C39 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 6C3C             >
 325+ 6C3C             >
 325+ 6C3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 6C3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 6C3C             >
 325+ 6C3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 6C3C 6D 69                        dw      TWO_DUP                 // 2dup
 327+ 6C3E 0E 6C                        dw      LESS                    // <
 328+ 6C40 F5 63                        dw      ZBRANCH
 329+ 6C42 04 00                        dw      Max_Skip - $   // if
 330+ 6C44 1E 69                        dw          SWAP                //      swap
 331+ 6C46              Max_Skip:                                       // endif
 332+ 6C46 0A 69                        dw      DROP                    // drop
 333+ 6C48 4F 68                        dw      EXIT                    // ;
 334+ 6C4A
 335+ 6C4A              //  ______________________________________________________________________
 336+ 6C4A              //
 337+ 6C4A              // ?dup         n -- 0 | n n
 338+ 6C4A              // duplicate if not zero
 339+ 6C4A                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 6C4A             >
 339+ 6C4A             >Dict_Ptr        defl    $
 339+ 6C4A             >
 339+ 6C4A             >//              ______________________________________________________________________
 339+ 6C4A             >//              Heap part
 339+ 6C4A             >
 339+ 6C4A             >
 339+ 6C4A             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F6             >
 339+ E5F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F6             >Latest_Definition defl  Heap_Ptr
 339+ E5F6             >
 339+ E5F6             >                // dummy db directives used to calculate length of namec
 339+ E5F6 3F 44 55 50 >                db      "?DUP"
 339+ E5FA             >len_NFA         defl    $ - temp_NFA
 339+ E5FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F6             >
 339+ E5F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F7 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5FB             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5FA D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5FB             >
 339+ E5FB EE 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5FD             >Prev_Ptr        defl    Heap_Ptr
 339+ E5FD             >
 339+ E5FD             >mirror_Ptr      defl    $
 339+ E5FD             >
 339+ E5FD 4C 6C       >                dw      Dict_Ptr + 2        // xt
 339+ E5FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5FF             >
 339+ E5FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5FF             >
 339+ E5FF             >//              ______________________________________________________________________
 339+ E5FF             >//              Dictionary part
 339+ E5FF             >
 339+ E5FF             >                org     Dict_Ptr
 339+ 6C4A             >
 339+ 6C4A FD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 6C4C             >
 339+ 6C4C             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 6C4C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 6C4C ~           >
 339+ 6C4C ~           >
 339+ 6C4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 6C4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 6C4C             >
 339+ 6C4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 6C4C              QDup_Ptr:
 341+ 6C4C E1                           pop     hl
 342+ 6C4D 7C                           ld      a, h
 343+ 6C4E B5                           or      l
 344+ 6C4F 28 01                        jr      z, QDup_Skip
 345+ 6C51 E5                               push    hl
 346+ 6C52              QDup_Skip:
 347+ 6C52                              psh1
 347+ 6C52 E5          >                push    hl
 347+ 6C53 DD E9       >                jp      (ix)
 348+ 6C55
 349+ 6C55              //  ______________________________________________________________________
 350+ 6C55              //
 351+ 6C55              // -dup         n -- 0 | n n
 352+ 6C55              // duplicate if not zero
 353+ 6C55                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 6C55             >
 353+ 6C55             >Dict_Ptr        defl    $
 353+ 6C55             >
 353+ 6C55             >//              ______________________________________________________________________
 353+ 6C55             >//              Heap part
 353+ 6C55             >
 353+ 6C55             >
 353+ 6C55             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5FF             >
 353+ E5FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5FF             >Latest_Definition defl  Heap_Ptr
 353+ E5FF             >
 353+ E5FF             >                // dummy db directives used to calculate length of namec
 353+ E5FF 2D 44 55 50 >                db      "-DUP"
 353+ E603             >len_NFA         defl    $ - temp_NFA
 353+ E603             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5FF             >
 353+ E5FF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E600 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E604             >                org     $-1                 // alter last byte of Name just above to set
 353+ E603 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E604             >
 353+ E604 F6 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E606             >Prev_Ptr        defl    Heap_Ptr
 353+ E606             >
 353+ E606             >mirror_Ptr      defl    $
 353+ E606             >
 353+ E606 57 6C       >                dw      Dict_Ptr + 2        // xt
 353+ E608             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E608             >
 353+ E608             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E608             >
 353+ E608             >//              ______________________________________________________________________
 353+ E608             >//              Dictionary part
 353+ E608             >
 353+ E608             >                org     Dict_Ptr
 353+ 6C55             >
 353+ 6C55 06 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 6C57             >
 353+ 6C57             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 6C57 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 6C57 ~           >
 353+ 6C57 ~           >
 353+ 6C57             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 6C57             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 6C57             >
 353+ 6C57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 6C57 C3 4C 6C                     jp      QDup_Ptr
 355+ 6C5A
 356+ 6C5A              //  ______________________________________________________________________
 357+ 6C5A              //
 358+ 6C5A              // emit         c --
 359+ 6C5A                              Colon_Def EMIT, "EMIT", is_normal
 359+ 6C5A             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 6C5A             >
 359+ 6C5A             >Dict_Ptr        defl    $
 359+ 6C5A             >
 359+ 6C5A             >//              ______________________________________________________________________
 359+ 6C5A             >//              Heap part
 359+ 6C5A             >
 359+ 6C5A             >
 359+ 6C5A             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E608             >
 359+ E608             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E608             >Latest_Definition defl  Heap_Ptr
 359+ E608             >
 359+ E608             >                // dummy db directives used to calculate length of namec
 359+ E608 45 4D 49 54 >                db      "EMIT"
 359+ E60C             >len_NFA         defl    $ - temp_NFA
 359+ E60C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E608             >
 359+ E608 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E609 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E60D             >                org     $-1                 // alter last byte of Name just above to set
 359+ E60C D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E60D             >
 359+ E60D FF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E60F             >Prev_Ptr        defl    Heap_Ptr
 359+ E60F             >
 359+ E60F             >mirror_Ptr      defl    $
 359+ E60F             >
 359+ E60F 5C 6C       >                dw      Dict_Ptr + 2        // xt
 359+ E611             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E611             >
 359+ E611             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E611             >
 359+ E611             >//              ______________________________________________________________________
 359+ E611             >//              Dictionary part
 359+ E611             >
 359+ E611             >                org     Dict_Ptr
 359+ 6C5A             >
 359+ 6C5A 0F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 6C5C             >
 359+ 6C5C             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 6C5C CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 6C5F             >
 359+ 6C5F             >
 359+ 6C5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 6C5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 6C5F             >
 359+ 6C5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 6C5F D1 65                        dw      C_EMIT                      // (?emit)
 361+ 6C61 4C 6C                        dw      QDUP                        // ?dup
 362+ 6C63                                                                  // if
 363+ 6C63 F5 63                        dw      ZBRANCH
 364+ 6C65 0A 00                        dw      Emit_Skip - $
 365+ 6C67 9F 65                        dw          EMITC                   //      emitc
 366+ 6C69 8C 6A                        dw          ONE                     //      1
 367+ 6C6B 32 6B 77 69                  dw          OUT, PLUSSTORE        //      out +!
 368+ 6C6F              Emit_Skip:                                          // endif
 369+ 6C6F 4F 68                        dw      EXIT                        // ;
 370+ 6C71
 371+ 6C71              //  ______________________________________________________________________
 372+ 6C71              //
 373+ 6C71              // space        --
 374+ 6C71                              Colon_Def SPACE, "SPACE", is_normal
 374+ 6C71             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 6C71             >
 374+ 6C71             >Dict_Ptr        defl    $
 374+ 6C71             >
 374+ 6C71             >//              ______________________________________________________________________
 374+ 6C71             >//              Heap part
 374+ 6C71             >
 374+ 6C71             >
 374+ 6C71             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E611             >
 374+ E611             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E611             >Latest_Definition defl  Heap_Ptr
 374+ E611             >
 374+ E611             >                // dummy db directives used to calculate length of namec
 374+ E611 53 50 41 43 >                db      "SPACE"
 374+ E615 45          >
 374+ E616             >len_NFA         defl    $ - temp_NFA
 374+ E616             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E611             >
 374+ E611 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E612 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E616 45          >
 374+ E617             >                org     $-1                 // alter last byte of Name just above to set
 374+ E616 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E617             >
 374+ E617 08 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E619             >Prev_Ptr        defl    Heap_Ptr
 374+ E619             >
 374+ E619             >mirror_Ptr      defl    $
 374+ E619             >
 374+ E619 73 6C       >                dw      Dict_Ptr + 2        // xt
 374+ E61B             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E61B             >
 374+ E61B             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E61B             >
 374+ E61B             >//              ______________________________________________________________________
 374+ E61B             >//              Dictionary part
 374+ E61B             >
 374+ E61B             >                org     Dict_Ptr
 374+ 6C71             >
 374+ 6C71 19 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 6C73             >
 374+ 6C73             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 6C73 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 6C76             >
 374+ 6C76             >
 374+ 6C76             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 6C76             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 6C76             >
 374+ 6C76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 6C76 A8 6A 5C 6C                  dw      BL, EMIT                // bl emit
 376+ 6C7A 4F 68                        dw      EXIT                    // ;
 377+ 6C7C
 378+ 6C7C              //  ______________________________________________________________________
 379+ 6C7C              //
 380+ 6C7C              // traverse     a n -- a
 381+ 6C7C              // A dictionary entry is structured as follows
 382+ 6C7C              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 6C7C              //      +1   word name, last character is toggled with $80
 384+ 6C7C              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 6C7C              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 6C7C              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 6C7C              //
 388+ 6C7C                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 6C7C             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 6C7C             >
 388+ 6C7C             >Dict_Ptr        defl    $
 388+ 6C7C             >
 388+ 6C7C             >//              ______________________________________________________________________
 388+ 6C7C             >//              Heap part
 388+ 6C7C             >
 388+ 6C7C             >
 388+ 6C7C             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E61B             >
 388+ E61B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E61B             >Latest_Definition defl  Heap_Ptr
 388+ E61B             >
 388+ E61B             >                // dummy db directives used to calculate length of namec
 388+ E61B 54 52 41 56 >                db      "TRAVERSE"
 388+ E61F 45 52 53 45 >
 388+ E623             >len_NFA         defl    $ - temp_NFA
 388+ E623             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E61B             >
 388+ E61B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E61C 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E620 45 52 53 45 >
 388+ E624             >                org     $-1                 // alter last byte of Name just above to set
 388+ E623 C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E624             >
 388+ E624 11 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E626             >Prev_Ptr        defl    Heap_Ptr
 388+ E626             >
 388+ E626             >mirror_Ptr      defl    $
 388+ E626             >
 388+ E626 7E 6C       >                dw      Dict_Ptr + 2        // xt
 388+ E628             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E628             >
 388+ E628             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E628             >
 388+ E628             >//              ______________________________________________________________________
 388+ E628             >//              Dictionary part
 388+ E628             >
 388+ E628             >                org     Dict_Ptr
 388+ 6C7C             >
 388+ 6C7C 26 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 6C7E             >
 388+ 6C7E             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 6C7E CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 6C81             >
 388+ 6C81             >
 388+ 6C81             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 6C81             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 6C81             >
 388+ 6C81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 6C81 1E 69                        dw      SWAP                    // swap
 390+ 6C83              Traverse_Begin:                                 // begin
 391+ 6C83 01 69 A1 68                  dw          OVER, PLUS          //      over +
 392+ 6C87 A3 63 7F 00                  dw          LIT, 127            //      127
 393+ 6C8B 01 69 A4 69                  dw          OVER, CFETCH        //      over @
 394+ 6C8F 0E 6C                        dw          LESS                //      <
 395+ 6C91                                                              // until
 396+ 6C91 F5 63                        dw      ZBRANCH
 397+ 6C93 F0 FF                        dw      Traverse_Begin - $
 398+ 6C95 0F 69                        dw      NIP                     //  nip
 399+ 6C97 4F 68                        dw      EXIT                    //  ;
 400+ 6C99
 401+ 6C99              //  ______________________________________________________________________
 402+ 6C99              //
 403+ 6C99              // mmu7@        -- n
 404+ 6C99              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 6C99
 406+ 6C99                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 6C99             >
 406+ 6C99             >Dict_Ptr        defl    $
 406+ 6C99             >
 406+ 6C99             >//              ______________________________________________________________________
 406+ 6C99             >//              Heap part
 406+ 6C99             >
 406+ 6C99             >
 406+ 6C99             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E628             >
 406+ E628             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E628             >Latest_Definition defl  Heap_Ptr
 406+ E628             >
 406+ E628             >                // dummy db directives used to calculate length of namec
 406+ E628 4D 4D 55 37 >                db      "MMU7@"
 406+ E62C 40          >
 406+ E62D             >len_NFA         defl    $ - temp_NFA
 406+ E62D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E628             >
 406+ E628 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E629 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E62D 40          >
 406+ E62E             >                org     $-1                 // alter last byte of Name just above to set
 406+ E62D C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E62E             >
 406+ E62E 1B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E630             >Prev_Ptr        defl    Heap_Ptr
 406+ E630             >
 406+ E630             >mirror_Ptr      defl    $
 406+ E630             >
 406+ E630 9B 6C       >                dw      Dict_Ptr + 2        // xt
 406+ E632             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E632             >
 406+ E632             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E632             >
 406+ E632             >//              ______________________________________________________________________
 406+ E632             >//              Dictionary part
 406+ E632             >
 406+ E632             >                org     Dict_Ptr
 406+ 6C99             >
 406+ 6C99 30 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 6C9B             >
 406+ 6C9B             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 6C9B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 6C9B ~           >
 406+ 6C9B ~           >
 406+ 6C9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 6C9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 6C9B             >
 406+ 6C9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 6C9B D9                           exx
 408+ 6C9C CD 9C 64                     call    MMU7_read
 409+ 6C9F D9                           exx
 410+ 6CA0 6F                           ld      l, a
 411+ 6CA1 26 00                        ld      h, 0
 412+ 6CA3 E5                           push    hl
 413+ 6CA4                              next
 413+ 6CA4 DD E9       >                jp      (ix)
 414+ 6CA6
 415+ 6CA6              //  ______________________________________________________________________
 416+ 6CA6              //
 417+ 6CA6              // mmu7!        n --
 418+ 6CA6              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 6CA6              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 6CA6
 421+ 6CA6                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 6CA6             >
 421+ 6CA6             >Dict_Ptr        defl    $
 421+ 6CA6             >
 421+ 6CA6             >//              ______________________________________________________________________
 421+ 6CA6             >//              Heap part
 421+ 6CA6             >
 421+ 6CA6             >
 421+ 6CA6             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E632             >
 421+ E632             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E632             >Latest_Definition defl  Heap_Ptr
 421+ E632             >
 421+ E632             >                // dummy db directives used to calculate length of namec
 421+ E632 4D 4D 55 37 >                db      "MMU7!"
 421+ E636 21          >
 421+ E637             >len_NFA         defl    $ - temp_NFA
 421+ E637             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E632             >
 421+ E632 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E633 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E637 21          >
 421+ E638             >                org     $-1                 // alter last byte of Name just above to set
 421+ E637 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E638             >
 421+ E638 28 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E63A             >Prev_Ptr        defl    Heap_Ptr
 421+ E63A             >
 421+ E63A             >mirror_Ptr      defl    $
 421+ E63A             >
 421+ E63A A8 6C       >                dw      Dict_Ptr + 2        // xt
 421+ E63C             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E63C             >
 421+ E63C             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E63C             >
 421+ E63C             >//              ______________________________________________________________________
 421+ E63C             >//              Dictionary part
 421+ E63C             >
 421+ E63C             >                org     Dict_Ptr
 421+ 6CA6             >
 421+ 6CA6 3A 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 6CA8             >
 421+ 6CA8             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6CA8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6CA8 ~           >
 421+ 6CA8 ~           >
 421+ 6CA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6CA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6CA8             >
 421+ 6CA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6CA8 E1                           pop     hl
 423+ 6CA9 7D                           ld      a, l
 424+ 6CAA ED 92 57                     nextreg 87, a
 425+ 6CAD
 426+ 6CAD                              next
 426+ 6CAD DD E9       >                jp      (ix)
 427+ 6CAF
 428+ 6CAF              //  ______________________________________________________________________
 429+ 6CAF              //
 430+ 6CAF              // >far         ha -- a n
 431+ 6CAF              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 6CAF              // take lower bits of H and L as an offset from E000h
 433+ 6CAF              // then return address  a  between E000h-FFFFh
 434+ 6CAF              // and page number n  between 64-71 (40h-47h)
 435+ 6CAF              // For example, in hex:
 436+ 6CAF              //   0000 >FAR  gives  40.E000
 437+ 6CAF              //   1FFF >FAR  gives  40.FFFF
 438+ 6CAF              //   2000 >FAR  gives  41.E000
 439+ 6CAF              //   3FFF >FAR  gives  41.FFFF
 440+ 6CAF              //   EFFF >FAR  gives  47.EFFF
 441+ 6CAF              //   FFFF >FAR  gives  47.FFFF
 442+ 6CAF                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 6CAF             >
 442+ 6CAF             >Dict_Ptr        defl    $
 442+ 6CAF             >
 442+ 6CAF             >//              ______________________________________________________________________
 442+ 6CAF             >//              Heap part
 442+ 6CAF             >
 442+ 6CAF             >
 442+ 6CAF             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E63C             >
 442+ E63C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E63C             >Latest_Definition defl  Heap_Ptr
 442+ E63C             >
 442+ E63C             >                // dummy db directives used to calculate length of namec
 442+ E63C 3E 46 41 52 >                db      ">FAR"
 442+ E640             >len_NFA         defl    $ - temp_NFA
 442+ E640             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E63C             >
 442+ E63C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E63D 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E641             >                org     $-1                 // alter last byte of Name just above to set
 442+ E640 D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E641             >
 442+ E641 32 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E643             >Prev_Ptr        defl    Heap_Ptr
 442+ E643             >
 442+ E643             >mirror_Ptr      defl    $
 442+ E643             >
 442+ E643 B1 6C       >                dw      Dict_Ptr + 2        // xt
 442+ E645             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E645             >
 442+ E645             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E645             >
 442+ E645             >//              ______________________________________________________________________
 442+ E645             >//              Dictionary part
 442+ E645             >
 442+ E645             >                org     Dict_Ptr
 442+ 6CAF             >
 442+ 6CAF 43 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 6CB1             >
 442+ 6CB1             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 6CB1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 6CB1 ~           >
 442+ 6CB1 ~           >
 442+ 6CB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 6CB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 6CB1             >
 442+ 6CB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 6CB1 E1                           pop     hl
 444+ 6CB2 CD A7 64                     call    TO_FAR_rout
 445+ 6CB5 E5                           push    hl
 446+ 6CB6 6F                           ld      l, a
 447+ 6CB7 26 00                        ld      h, 0
 448+ 6CB9 E5                           push    hl
 449+ 6CBA                              next
 449+ 6CBA DD E9       >                jp      (ix)
 450+ 6CBC
 451+ 6CBC              //  ______________________________________________________________________
 452+ 6CBC              //
 453+ 6CBC              // <far         a n  -- ha
 454+ 6CBC              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 455+ 6CBC              // reverse of >FAR: encodes a FAR address compressing
 456+ 6CBC              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 6CBC                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 6CBC             >
 457+ 6CBC             >Dict_Ptr        defl    $
 457+ 6CBC             >
 457+ 6CBC             >//              ______________________________________________________________________
 457+ 6CBC             >//              Heap part
 457+ 6CBC             >
 457+ 6CBC             >
 457+ 6CBC             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E645             >
 457+ E645             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E645             >Latest_Definition defl  Heap_Ptr
 457+ E645             >
 457+ E645             >                // dummy db directives used to calculate length of namec
 457+ E645 3C 46 41 52 >                db      "<FAR"
 457+ E649             >len_NFA         defl    $ - temp_NFA
 457+ E649             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E645             >
 457+ E645 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E646 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E64A             >                org     $-1                 // alter last byte of Name just above to set
 457+ E649 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E64A             >
 457+ E64A 3C 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E64C             >Prev_Ptr        defl    Heap_Ptr
 457+ E64C             >
 457+ E64C             >mirror_Ptr      defl    $
 457+ E64C             >
 457+ E64C BE 6C       >                dw      Dict_Ptr + 2        // xt
 457+ E64E             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E64E             >
 457+ E64E             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E64E             >
 457+ E64E             >//              ______________________________________________________________________
 457+ E64E             >//              Dictionary part
 457+ E64E             >
 457+ E64E             >                org     Dict_Ptr
 457+ 6CBC             >
 457+ 6CBC 4C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 6CBE             >
 457+ 6CBE             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 6CBE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 6CBE ~           >
 457+ 6CBE ~           >
 457+ 6CBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 6CBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 6CBE             >
 457+ 6CBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 6CBE E1                           pop     hl                  // page number in l
 459+ 6CBF 7D                           ld      a, l
 460+ 6CC0 E6 07                        and     07
 461+ 6CC2 0F                           rrca
 462+ 6CC3 0F                           rrca
 463+ 6CC4 0F                           rrca
 464+ 6CC5 08                           ex      af, af
 465+ 6CC6 E1                           pop     hl                  // address in hl
 466+ 6CC7 7C                           ld      a, h
 467+ 6CC8 E6 1F                        and     $1F
 468+ 6CCA 67                           ld      h, a
 469+ 6CCB 08                           ex      af, af
 470+ 6CCC B4                           or      h
 471+ 6CCD 67                           ld      h, a
 472+ 6CCE                              psh1
 472+ 6CCE E5          >                push    hl
 472+ 6CCF DD E9       >                jp      (ix)
 473+ 6CD1
 474+ 6CD1              //  ______________________________________________________________________
 475+ 6CD1              //
 476+ 6CD1              // ?IN_MMU7        a -- f
 477+ 6CD1              // check if address lies on MMU7
 478+ 6CD1              // tf is passed address is on MMU7
 479+ 6CD1                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 479+ 6CD1             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 479+ 6CD1             >
 479+ 6CD1             >Dict_Ptr        defl    $
 479+ 6CD1             >
 479+ 6CD1             >//              ______________________________________________________________________
 479+ 6CD1             >//              Heap part
 479+ 6CD1             >
 479+ 6CD1             >
 479+ 6CD1             >                org     (Heap_Ptr & $1FFF) + $E000
 479+ E64E             >
 479+ E64E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 479+ E64E             >Latest_Definition defl  Heap_Ptr
 479+ E64E             >
 479+ E64E             >                // dummy db directives used to calculate length of namec
 479+ E64E 3F 49 4E 5F >                db      "?IN_MMU7"
 479+ E652 4D 4D 55 37 >
 479+ E656             >len_NFA         defl    $ - temp_NFA
 479+ E656             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 479+ E64E             >
 479+ E64E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 479+ E64F 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 479+ E653 4D 4D 55 37 >
 479+ E657             >                org     $-1                 // alter last byte of Name just above to set
 479+ E656 B7          >                db      {b $} | END_BIT     // msb as name end
 479+ E657             >
 479+ E657 45 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 479+ E659             >Prev_Ptr        defl    Heap_Ptr
 479+ E659             >
 479+ E659             >mirror_Ptr      defl    $
 479+ E659             >
 479+ E659 D3 6C       >                dw      Dict_Ptr + 2        // xt
 479+ E65B             >Heap_Ptr        defl    $ - $E000           // save current HP
 479+ E65B             >
 479+ E65B             >Current_HP      defl  $ - $E000             // used to set HP once!
 479+ E65B             >
 479+ E65B             >//              ______________________________________________________________________
 479+ E65B             >//              Dictionary part
 479+ E65B             >
 479+ E65B             >                org     Dict_Ptr
 479+ 6CD1             >
 479+ 6CD1 59 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 479+ 6CD3             >
 479+ 6CD3             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 479+ 6CD3 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 479+ 6CD6             >
 479+ 6CD6             >
 479+ 6CD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 479+ 6CD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 479+ 6CD6             >
 479+ 6CD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 480+ 6CD6 25 69                        dw      DUP
 481+ 6CD8 A3 63 00 E0                  dw      LIT, $E000
 482+ 6CDC 00 6C                        dw      ULESS
 483+ 6CDE 82 68                        dw      NOT_OP
 484+ 6CE0 4F 68                        dw      EXIT
 485+ 6CE2
 486+ 6CE2              //  ______________________________________________________________________
 487+ 6CE2              //
 488+ 6CE2              // far          hp -- ha
 489+ 6CE2              // Convert an "heap-pointer address" (ha) into a real address (a)
 490+ 6CE2              // between E000h and FFFFh and fit the correct 8K page on MMU7
 491+ 6CE2              // An "ha" uses the 3 msb as page-number and the lower bits as offset at E000.
 492+ 6CE2                              Colon_Def FAR, "FAR", is_normal
 492+ 6CE2             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 492+ 6CE2             >
 492+ 6CE2             >Dict_Ptr        defl    $
 492+ 6CE2             >
 492+ 6CE2             >//              ______________________________________________________________________
 492+ 6CE2             >//              Heap part
 492+ 6CE2             >
 492+ 6CE2             >
 492+ 6CE2             >                org     (Heap_Ptr & $1FFF) + $E000
 492+ E65B             >
 492+ E65B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ E65B             >Latest_Definition defl  Heap_Ptr
 492+ E65B             >
 492+ E65B             >                // dummy db directives used to calculate length of namec
 492+ E65B 46 41 52    >                db      "FAR"
 492+ E65E             >len_NFA         defl    $ - temp_NFA
 492+ E65E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ E65B             >
 492+ E65B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ E65C 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 492+ E65F             >                org     $-1                 // alter last byte of Name just above to set
 492+ E65E D2          >                db      {b $} | END_BIT     // msb as name end
 492+ E65F             >
 492+ E65F 4E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 492+ E661             >Prev_Ptr        defl    Heap_Ptr
 492+ E661             >
 492+ E661             >mirror_Ptr      defl    $
 492+ E661             >
 492+ E661 E4 6C       >                dw      Dict_Ptr + 2        // xt
 492+ E663             >Heap_Ptr        defl    $ - $E000           // save current HP
 492+ E663             >
 492+ E663             >Current_HP      defl  $ - $E000             // used to set HP once!
 492+ E663             >
 492+ E663             >//              ______________________________________________________________________
 492+ E663             >//              Dictionary part
 492+ E663             >
 492+ E663             >                org     Dict_Ptr
 492+ 6CE2             >
 492+ 6CE2 61 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 492+ 6CE4             >
 492+ 6CE4             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 6CE4 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 6CE7             >
 492+ 6CE7             >
 492+ 6CE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 6CE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 6CE7             >
 492+ 6CE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 6CE7 B1 6C                        dw      TO_FAR
 494+ 6CE9 A8 6C                        dw      MMU7_STORE
 495+ 6CEB 4F 68                        dw      EXIT
 496+ 6CED
 497+ 6CED              //  ______________________________________________________________________
 498+ 6CED              //
 499+ 6CED              // ?HEAP_PTR       n -- n f
 500+ 6CED              // check if it's a non-zero heap-pointer or less than $6300
 501+ 6CED              // tf if passed argument is an hp
 502+ 6CED              // ff if passed argument isn't hp
 503+ 6CED                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 503+ 6CED             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 503+ 6CED             >
 503+ 6CED             >Dict_Ptr        defl    $
 503+ 6CED             >
 503+ 6CED             >//              ______________________________________________________________________
 503+ 6CED             >//              Heap part
 503+ 6CED             >
 503+ 6CED             >
 503+ 6CED             >                org     (Heap_Ptr & $1FFF) + $E000
 503+ E663             >
 503+ E663             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ E663             >Latest_Definition defl  Heap_Ptr
 503+ E663             >
 503+ E663             >                // dummy db directives used to calculate length of namec
 503+ E663 3F 48 45 41 >                db      "?HEAP_PTR"
 503+ E667 50 5F 50 54 >
 503+ E66B 52          >
 503+ E66C             >len_NFA         defl    $ - temp_NFA
 503+ E66C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ E663             >
 503+ E663 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ E664 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 503+ E668 50 5F 50 54 >
 503+ E66C 52          >
 503+ E66D             >                org     $-1                 // alter last byte of Name just above to set
 503+ E66C D2          >                db      {b $} | END_BIT     // msb as name end
 503+ E66D             >
 503+ E66D 5B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 503+ E66F             >Prev_Ptr        defl    Heap_Ptr
 503+ E66F             >
 503+ E66F             >mirror_Ptr      defl    $
 503+ E66F             >
 503+ E66F EF 6C       >                dw      Dict_Ptr + 2        // xt
 503+ E671             >Heap_Ptr        defl    $ - $E000           // save current HP
 503+ E671             >
 503+ E671             >Current_HP      defl  $ - $E000             // used to set HP once!
 503+ E671             >
 503+ E671             >//              ______________________________________________________________________
 503+ E671             >//              Dictionary part
 503+ E671             >
 503+ E671             >                org     Dict_Ptr
 503+ 6CED             >
 503+ 6CED 6F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 503+ 6CEF             >
 503+ 6CEF             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 6CEF CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 6CF2             >
 503+ 6CF2             >
 503+ 6CF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 6CF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 6CF2             >
 503+ 6CF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 6CF2 25 69                        dw      DUP
 505+ 6CF4 F5 63                        dw      ZBRANCH
 506+ 6CF6 08 00                        dw      QHeap_Skip - $
 507+ 6CF8 A3 63 00 63                  dw          LIT, $6300
 508+ 6CFC 00 6C                        dw          ULESS
 509+ 6CFE              QHeap_Skip:                                          // endif
 510+ 6CFE 4F 68                        dw      EXIT                        // ;
 511+ 6D00
 512+ 6D00              //  ______________________________________________________________________
 513+ 6D00              //
 514+ 6D00              // ?>heap       n1 -- n2
 515+ 6D00              // heap correction: given an LFA check if it's a real address or a heap-pointer
 516+ 6D00              // address <= 6300h -- except 0000h -- are interpreted as heap-pointers
 517+ 6D00              // and converted to heap address updating MMU7 via FAR
 518+ 6D00                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 518+ 6D00             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 518+ 6D00             >
 518+ 6D00             >Dict_Ptr        defl    $
 518+ 6D00             >
 518+ 6D00             >//              ______________________________________________________________________
 518+ 6D00             >//              Heap part
 518+ 6D00             >
 518+ 6D00             >
 518+ 6D00             >                org     (Heap_Ptr & $1FFF) + $E000
 518+ E671             >
 518+ E671             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 518+ E671             >Latest_Definition defl  Heap_Ptr
 518+ E671             >
 518+ E671             >                // dummy db directives used to calculate length of namec
 518+ E671 3F 3E 48 45 >                db      "?>HEAP"
 518+ E675 41 50       >
 518+ E677             >len_NFA         defl    $ - temp_NFA
 518+ E677             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 518+ E671             >
 518+ E671 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 518+ E672 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 518+ E676 41 50       >
 518+ E678             >                org     $-1                 // alter last byte of Name just above to set
 518+ E677 D0          >                db      {b $} | END_BIT     // msb as name end
 518+ E678             >
 518+ E678 63 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 518+ E67A             >Prev_Ptr        defl    Heap_Ptr
 518+ E67A             >
 518+ E67A             >mirror_Ptr      defl    $
 518+ E67A             >
 518+ E67A 02 6D       >                dw      Dict_Ptr + 2        // xt
 518+ E67C             >Heap_Ptr        defl    $ - $E000           // save current HP
 518+ E67C             >
 518+ E67C             >Current_HP      defl  $ - $E000             // used to set HP once!
 518+ E67C             >
 518+ E67C             >//              ______________________________________________________________________
 518+ E67C             >//              Dictionary part
 518+ E67C             >
 518+ E67C             >                org     Dict_Ptr
 518+ 6D00             >
 518+ 6D00 7A 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 518+ 6D02             >
 518+ 6D02             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 518+ 6D02 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 518+ 6D05             >
 518+ 6D05             >
 518+ 6D05             >                endif           ; ok        // for other definitions it "points" the correct handler
 518+ 6D05             >                // Use of "; ok" to suppress "warning[fwdref]"
 518+ 6D05             >
 518+ 6D05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 519+ 6D05 25 69                        dw      DUP
 520+ 6D07 EF 6C                        dw      QHEAPP
 521+ 6D09 F5 63                        dw      ZBRANCH
 522+ 6D0B 04 00                        dw      Q2Heap_Skip - $
 523+ 6D0D E4 6C                        dw          FAR
 524+ 6D0F              Q2Heap_Skip:                                          // endif
 525+ 6D0F 4F 68                        dw      EXIT                        // ;
 526+ 6D11
 527+ 6D11              //  ______________________________________________________________________
 528+ 6D11              //
 529+ 6D11              // hp_fetch     -- a
 530+ 6D11                              Colon_Def HP_FETCH, "HP@", is_normal
 530+ 6D11             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 530+ 6D11             >
 530+ 6D11             >Dict_Ptr        defl    $
 530+ 6D11             >
 530+ 6D11             >//              ______________________________________________________________________
 530+ 6D11             >//              Heap part
 530+ 6D11             >
 530+ 6D11             >
 530+ 6D11             >                org     (Heap_Ptr & $1FFF) + $E000
 530+ E67C             >
 530+ E67C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ E67C             >Latest_Definition defl  Heap_Ptr
 530+ E67C             >
 530+ E67C             >                // dummy db directives used to calculate length of namec
 530+ E67C 48 50 40    >                db      "HP@"
 530+ E67F             >len_NFA         defl    $ - temp_NFA
 530+ E67F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ E67C             >
 530+ E67C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ E67D 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 530+ E680             >                org     $-1                 // alter last byte of Name just above to set
 530+ E67F C0          >                db      {b $} | END_BIT     // msb as name end
 530+ E680             >
 530+ E680 71 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 530+ E682             >Prev_Ptr        defl    Heap_Ptr
 530+ E682             >
 530+ E682             >mirror_Ptr      defl    $
 530+ E682             >
 530+ E682 13 6D       >                dw      Dict_Ptr + 2        // xt
 530+ E684             >Heap_Ptr        defl    $ - $E000           // save current HP
 530+ E684             >
 530+ E684             >Current_HP      defl  $ - $E000             // used to set HP once!
 530+ E684             >
 530+ E684             >//              ______________________________________________________________________
 530+ E684             >//              Dictionary part
 530+ E684             >
 530+ E684             >                org     Dict_Ptr
 530+ 6D11             >
 530+ 6D11 82 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 530+ 6D13             >
 530+ 6D13             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 6D13 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 6D16             >
 530+ 6D16             >
 530+ 6D16             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 6D16             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 6D16             >
 530+ 6D16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 6D16 1A 6B 8F 69                  dw      HP, FETCH               // hp @
 532+ 6D1A 4F 68                        dw      EXIT                    // ;
 533+ 6D1C
 534+ 6D1C              //  ______________________________________________________________________
 535+ 6D1C              //
 536+ 6D1C              // page-watermark   -- n
 537+ 6D1C              // how much a 8K page can be filled..
 538+ 6D1C                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 538+ 6D1C             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 538+ 6D1C             >
 538+ 6D1C             >Dict_Ptr        defl    $
 538+ 6D1C             >
 538+ 6D1C             >//              ______________________________________________________________________
 538+ 6D1C             >//              Heap part
 538+ 6D1C             >
 538+ 6D1C             >
 538+ 6D1C             >                org     (Heap_Ptr & $1FFF) + $E000
 538+ E684             >
 538+ E684             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ E684             >Latest_Definition defl  Heap_Ptr
 538+ E684             >
 538+ E684             >                // dummy db directives used to calculate length of namec
 538+ E684 50 41 47 45 >                db      "PAGE-WATERMARK"
 538+ E688 2D 57 41 54 >
 538+ E68C 45 52 4D 41 >
 538+ E690 52 4B       >
 538+ E692             >len_NFA         defl    $ - temp_NFA
 538+ E692             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ E684             >
 538+ E684 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ E685 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 538+ E689 2D 57 41 54 >
 538+ E68D 45 52 4D 41 >
 538+ E691 52 4B       >
 538+ E693             >                org     $-1                 // alter last byte of Name just above to set
 538+ E692 CB          >                db      {b $} | END_BIT     // msb as name end
 538+ E693             >
 538+ E693 7C 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 538+ E695             >Prev_Ptr        defl    Heap_Ptr
 538+ E695             >
 538+ E695             >mirror_Ptr      defl    $
 538+ E695             >
 538+ E695 1E 6D       >                dw      Dict_Ptr + 2        // xt
 538+ E697             >Heap_Ptr        defl    $ - $E000           // save current HP
 538+ E697             >
 538+ E697             >Current_HP      defl  $ - $E000             // used to set HP once!
 538+ E697             >
 538+ E697             >//              ______________________________________________________________________
 538+ E697             >//              Dictionary part
 538+ E697             >
 538+ E697             >                org     Dict_Ptr
 538+ 6D1C             >
 538+ 6D1C 95 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 538+ 6D1E             >
 538+ 6D1E             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 6D1E CD 59 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 538+ 6D21             >
 538+ 6D21             >
 538+ 6D21             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 6D21             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 6D21             >
 538+ 6D21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 6D21 80 1F       >                dw      $1F80
 539+ 6D23
 540+ 6D23              //  ______________________________________________________________________
 541+ 6D23              //
 542+ 6D23              // skip-hp-page ha -- a
 543+ 6D23                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 543+ 6D23             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 543+ 6D23             >
 543+ 6D23             >Dict_Ptr        defl    $
 543+ 6D23             >
 543+ 6D23             >//              ______________________________________________________________________
 543+ 6D23             >//              Heap part
 543+ 6D23             >
 543+ 6D23             >
 543+ 6D23             >                org     (Heap_Ptr & $1FFF) + $E000
 543+ E697             >
 543+ E697             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 543+ E697             >Latest_Definition defl  Heap_Ptr
 543+ E697             >
 543+ E697             >                // dummy db directives used to calculate length of namec
 543+ E697 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 543+ E69B 2D 48 50 2D >
 543+ E69F 50 41 47 45 >
 543+ E6A3             >len_NFA         defl    $ - temp_NFA
 543+ E6A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 543+ E697             >
 543+ E697 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 543+ E698 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 543+ E69C 2D 48 50 2D >
 543+ E6A0 50 41 47 45 >
 543+ E6A4             >                org     $-1                 // alter last byte of Name just above to set
 543+ E6A3 C5          >                db      {b $} | END_BIT     // msb as name end
 543+ E6A4             >
 543+ E6A4 84 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 543+ E6A6             >Prev_Ptr        defl    Heap_Ptr
 543+ E6A6             >
 543+ E6A6             >mirror_Ptr      defl    $
 543+ E6A6             >
 543+ E6A6 25 6D       >                dw      Dict_Ptr + 2        // xt
 543+ E6A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 543+ E6A8             >
 543+ E6A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 543+ E6A8             >
 543+ E6A8             >//              ______________________________________________________________________
 543+ E6A8             >//              Dictionary part
 543+ E6A8             >
 543+ E6A8             >                org     Dict_Ptr
 543+ 6D23             >
 543+ 6D23 A6 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 543+ 6D25             >
 543+ 6D25             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 543+ 6D25 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 543+ 6D28             >
 543+ 6D28             >
 543+ 6D28             >                endif           ; ok        // for other definitions it "points" the correct handler
 543+ 6D28             >                // Use of "; ok" to suppress "warning[fwdref]"
 543+ 6D28             >
 543+ 6D28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 544+ 6D28 13 6D                        dw      HP_FETCH                // hp@
 545+ 6D2A A3 63 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 545+ 6D2E 0F 68
 546+ 6D30 A1 68                        dw      PLUS
 547+ 6D32 1E 6D                        dw      PAGE_WATERMARK
 548+ 6D34 1B 6C                        dw      GREATER
 549+ 6D36 F5 63                        dw      ZBRANCH
 550+ 6D38 12 00                        dw      Skip_Skip - $   // if
 551+ 6D3A 13 6D                        dw      HP_FETCH
 552+ 6D3C A3 63 FF 1F                  dw      LIT, $1FFF, OR_OP
 552+ 6D40 1E 68
 553+ 6D42 BA 68 C8 68                  dw      ONE_PLUS, TWO_PLUS
 554+ 6D46 1A 6B 99 69                  dw      HP, STORE
 555+ 6D4A              Skip_Skip:
 556+ 6D4A 4F 68                        dw      EXIT                    // ;
 557+ 6D4C              //  ______________________________________________________________________
 558+ 6D4C              //
 559+ 6D4C              // latest       -- nfa
 560+ 6D4C                              Colon_Def LATEST, "LATEST", is_normal
 560+ 6D4C             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 560+ 6D4C             >
 560+ 6D4C             >Dict_Ptr        defl    $
 560+ 6D4C             >
 560+ 6D4C             >//              ______________________________________________________________________
 560+ 6D4C             >//              Heap part
 560+ 6D4C             >
 560+ 6D4C             >
 560+ 6D4C             >                org     (Heap_Ptr & $1FFF) + $E000
 560+ E6A8             >
 560+ E6A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ E6A8             >Latest_Definition defl  Heap_Ptr
 560+ E6A8             >
 560+ E6A8             >                // dummy db directives used to calculate length of namec
 560+ E6A8 4C 41 54 45 >                db      "LATEST"
 560+ E6AC 53 54       >
 560+ E6AE             >len_NFA         defl    $ - temp_NFA
 560+ E6AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ E6A8             >
 560+ E6A8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ E6A9 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 560+ E6AD 53 54       >
 560+ E6AF             >                org     $-1                 // alter last byte of Name just above to set
 560+ E6AE D4          >                db      {b $} | END_BIT     // msb as name end
 560+ E6AF             >
 560+ E6AF 97 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 560+ E6B1             >Prev_Ptr        defl    Heap_Ptr
 560+ E6B1             >
 560+ E6B1             >mirror_Ptr      defl    $
 560+ E6B1             >
 560+ E6B1 4E 6D       >                dw      Dict_Ptr + 2        // xt
 560+ E6B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 560+ E6B3             >
 560+ E6B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 560+ E6B3             >
 560+ E6B3             >//              ______________________________________________________________________
 560+ E6B3             >//              Dictionary part
 560+ E6B3             >
 560+ E6B3             >                org     Dict_Ptr
 560+ 6D4C             >
 560+ 6D4C B1 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 560+ 6D4E             >
 560+ 6D4E             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 6D4E CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 6D51             >
 560+ 6D51             >
 560+ 6D51             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 6D51             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 6D51             >
 560+ 6D51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 6D51 4A 6B                        dw      CURRENT                 // current
 562+ 6D53 8F 69 8F 69                  dw      FETCH, FETCH            // @ @
 563+ 6D57 E4 6C                        dw      FAR // Q TO HEAP
 564+ 6D59 4F 68                        dw      EXIT                    // ;
 565+ 6D5B
 566+ 6D5B              //  ______________________________________________________________________
 567+ 6D5B              //
 568+ 6D5B              // >body        cfa -- pfa
 569+ 6D5B                              Colon_Def TO_BODY, ">BODY", is_normal
 569+ 6D5B             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 569+ 6D5B             >
 569+ 6D5B             >Dict_Ptr        defl    $
 569+ 6D5B             >
 569+ 6D5B             >//              ______________________________________________________________________
 569+ 6D5B             >//              Heap part
 569+ 6D5B             >
 569+ 6D5B             >
 569+ 6D5B             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6B3             >
 569+ E6B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6B3             >Latest_Definition defl  Heap_Ptr
 569+ E6B3             >
 569+ E6B3             >                // dummy db directives used to calculate length of namec
 569+ E6B3 3E 42 4F 44 >                db      ">BODY"
 569+ E6B7 59          >
 569+ E6B8             >len_NFA         defl    $ - temp_NFA
 569+ E6B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6B3             >
 569+ E6B3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6B4 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 569+ E6B8 59          >
 569+ E6B9             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6B8 D9          >                db      {b $} | END_BIT     // msb as name end
 569+ E6B9             >
 569+ E6B9 A8 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6BB             >Prev_Ptr        defl    Heap_Ptr
 569+ E6BB             >
 569+ E6BB             >mirror_Ptr      defl    $
 569+ E6BB             >
 569+ E6BB 5D 6D       >                dw      Dict_Ptr + 2        // xt
 569+ E6BD             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6BD             >
 569+ E6BD             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6BD             >
 569+ E6BD             >//              ______________________________________________________________________
 569+ E6BD             >//              Dictionary part
 569+ E6BD             >
 569+ E6BD             >                org     Dict_Ptr
 569+ 6D5B             >
 569+ 6D5B BB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 6D5D             >
 569+ 6D5D             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 6D5D CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 6D60             >
 569+ 6D60             >
 569+ 6D60             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 6D60             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 6D60             >
 569+ 6D60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 6D60 9A 6A A1 68                  dw      THREE, PLUS             // cell+ --> 3 +
 571+ 6D64 4F 68                        dw      EXIT                    // ;
 572+ 6D66
 573+ 6D66              //  ______________________________________________________________________
 574+ 6D66              //
 575+ 6D66              // <name        cfa -- nfa
 576+ 6D66                              Colon_Def TO_NAME, "<NAME", is_normal
 576+ 6D66             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 576+ 6D66             >
 576+ 6D66             >Dict_Ptr        defl    $
 576+ 6D66             >
 576+ 6D66             >//              ______________________________________________________________________
 576+ 6D66             >//              Heap part
 576+ 6D66             >
 576+ 6D66             >
 576+ 6D66             >                org     (Heap_Ptr & $1FFF) + $E000
 576+ E6BD             >
 576+ E6BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ E6BD             >Latest_Definition defl  Heap_Ptr
 576+ E6BD             >
 576+ E6BD             >                // dummy db directives used to calculate length of namec
 576+ E6BD 3C 4E 41 4D >                db      "<NAME"
 576+ E6C1 45          >
 576+ E6C2             >len_NFA         defl    $ - temp_NFA
 576+ E6C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ E6BD             >
 576+ E6BD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ E6BE 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 576+ E6C2 45          >
 576+ E6C3             >                org     $-1                 // alter last byte of Name just above to set
 576+ E6C2 C5          >                db      {b $} | END_BIT     // msb as name end
 576+ E6C3             >
 576+ E6C3 B3 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 576+ E6C5             >Prev_Ptr        defl    Heap_Ptr
 576+ E6C5             >
 576+ E6C5             >mirror_Ptr      defl    $
 576+ E6C5             >
 576+ E6C5 68 6D       >                dw      Dict_Ptr + 2        // xt
 576+ E6C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 576+ E6C7             >
 576+ E6C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 576+ E6C7             >
 576+ E6C7             >//              ______________________________________________________________________
 576+ E6C7             >//              Dictionary part
 576+ E6C7             >
 576+ E6C7             >                org     Dict_Ptr
 576+ 6D66             >
 576+ 6D66 C5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 576+ 6D68             >
 576+ 6D68             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 6D68 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 6D6B             >
 576+ 6D6B             >
 576+ 6D6B             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 6D6B             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 6D6B             >
 576+ 6D6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 6D6B D4 68                        dw      CELL_MINUS              // cell-
 578+ 6D6D 25 69 8F 69                  dw      DUP, FETCH
 579+ 6D71 EF 6C                        dw      QHEAPP
 580+ 6D73 F5 63                        dw      ZBRANCH
 581+ 6D75 08 00                        dw      ToName_Skip - $
 582+ 6D77 8F 69 E4 6C                  dw          FETCH, FAR
 583+ 6D7B D4 68                        dw          CELL_MINUS
 584+ 6D7D              ToName_Skip:                                    // endif
 585+ 6D7D
 586+ 6D7D C1 68                        dw      ONE_SUBTRACT            // 1-
 587+ 6D7F A1 6A                        dw      NEG_ONE                 // -1
 588+ 6D81 7E 6C                        dw      TRAVERSE                // traverse
 589+ 6D83 4F 68                        dw      EXIT                    // ;
 590+ 6D85
 591+ 6D85              //  ______________________________________________________________________
 592+ 6D85              //
 593+ 6D85              // cfa          pfa -- cfa
 594+ 6D85                              Colon_Def CFA, "CFA", is_normal
 594+ 6D85             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 594+ 6D85             >
 594+ 6D85             >Dict_Ptr        defl    $
 594+ 6D85             >
 594+ 6D85             >//              ______________________________________________________________________
 594+ 6D85             >//              Heap part
 594+ 6D85             >
 594+ 6D85             >
 594+ 6D85             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6C7             >
 594+ E6C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6C7             >Latest_Definition defl  Heap_Ptr
 594+ E6C7             >
 594+ E6C7             >                // dummy db directives used to calculate length of namec
 594+ E6C7 43 46 41    >                db      "CFA"
 594+ E6CA             >len_NFA         defl    $ - temp_NFA
 594+ E6CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6C7             >
 594+ E6C7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6C8 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 594+ E6CB             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6CA C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6CB             >
 594+ E6CB BD 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6CD             >Prev_Ptr        defl    Heap_Ptr
 594+ E6CD             >
 594+ E6CD             >mirror_Ptr      defl    $
 594+ E6CD             >
 594+ E6CD 87 6D       >                dw      Dict_Ptr + 2        // xt
 594+ E6CF             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6CF             >
 594+ E6CF             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6CF             >
 594+ E6CF             >//              ______________________________________________________________________
 594+ E6CF             >//              Dictionary part
 594+ E6CF             >
 594+ E6CF             >                org     Dict_Ptr
 594+ 6D85             >
 594+ 6D85 CD 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 6D87             >
 594+ 6D87             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 6D87 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 6D8A             >
 594+ 6D8A             >
 594+ 6D8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 6D8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 6D8A             >
 594+ 6D8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 6D8A 9A 6A E9 6B                  dw      THREE, SUBTRACT         // 3 -
 596+ 6D8E 4F 68                        dw      EXIT                    // ;
 597+ 6D90
 598+ 6D90              //  ______________________________________________________________________
 599+ 6D90              //
 600+ 6D90              // nfa          pfa -- nfa
 601+ 6D90                              Colon_Def NFA, "NFA", is_normal
 601+ 6D90             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 601+ 6D90             >
 601+ 6D90             >Dict_Ptr        defl    $
 601+ 6D90             >
 601+ 6D90             >//              ______________________________________________________________________
 601+ 6D90             >//              Heap part
 601+ 6D90             >
 601+ 6D90             >
 601+ 6D90             >                org     (Heap_Ptr & $1FFF) + $E000
 601+ E6CF             >
 601+ E6CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ E6CF             >Latest_Definition defl  Heap_Ptr
 601+ E6CF             >
 601+ E6CF             >                // dummy db directives used to calculate length of namec
 601+ E6CF 4E 46 41    >                db      "NFA"
 601+ E6D2             >len_NFA         defl    $ - temp_NFA
 601+ E6D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ E6CF             >
 601+ E6CF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ E6D0 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 601+ E6D3             >                org     $-1                 // alter last byte of Name just above to set
 601+ E6D2 C1          >                db      {b $} | END_BIT     // msb as name end
 601+ E6D3             >
 601+ E6D3 C7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 601+ E6D5             >Prev_Ptr        defl    Heap_Ptr
 601+ E6D5             >
 601+ E6D5             >mirror_Ptr      defl    $
 601+ E6D5             >
 601+ E6D5 92 6D       >                dw      Dict_Ptr + 2        // xt
 601+ E6D7             >Heap_Ptr        defl    $ - $E000           // save current HP
 601+ E6D7             >
 601+ E6D7             >Current_HP      defl  $ - $E000             // used to set HP once!
 601+ E6D7             >
 601+ E6D7             >//              ______________________________________________________________________
 601+ E6D7             >//              Dictionary part
 601+ E6D7             >
 601+ E6D7             >                org     Dict_Ptr
 601+ 6D90             >
 601+ 6D90 D5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 601+ 6D92             >
 601+ 6D92             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 6D92 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 6D95             >
 601+ 6D95             >
 601+ 6D95             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 6D95             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 6D95             >
 601+ 6D95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 6D95 87 6D                        dw      CFA                     // cfa
 603+ 6D97 68 6D                        dw      TO_NAME                 // traverse
 604+ 6D99 4F 68                        dw      EXIT                    // ;
 605+ 6D9B
 606+ 6D9B              //  ______________________________________________________________________
 607+ 6D9B              //
 608+ 6D9B              // lfa          pfa -- lfa
 609+ 6D9B                              Colon_Def LFA, "LFA", is_normal
 609+ 6D9B             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 609+ 6D9B             >
 609+ 6D9B             >Dict_Ptr        defl    $
 609+ 6D9B             >
 609+ 6D9B             >//              ______________________________________________________________________
 609+ 6D9B             >//              Heap part
 609+ 6D9B             >
 609+ 6D9B             >
 609+ 6D9B             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ E6D7             >
 609+ E6D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ E6D7             >Latest_Definition defl  Heap_Ptr
 609+ E6D7             >
 609+ E6D7             >                // dummy db directives used to calculate length of namec
 609+ E6D7 4C 46 41    >                db      "LFA"
 609+ E6DA             >len_NFA         defl    $ - temp_NFA
 609+ E6DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ E6D7             >
 609+ E6D7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ E6D8 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 609+ E6DB             >                org     $-1                 // alter last byte of Name just above to set
 609+ E6DA C1          >                db      {b $} | END_BIT     // msb as name end
 609+ E6DB             >
 609+ E6DB CF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ E6DD             >Prev_Ptr        defl    Heap_Ptr
 609+ E6DD             >
 609+ E6DD             >mirror_Ptr      defl    $
 609+ E6DD             >
 609+ E6DD 9D 6D       >                dw      Dict_Ptr + 2        // xt
 609+ E6DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ E6DF             >
 609+ E6DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ E6DF             >
 609+ E6DF             >//              ______________________________________________________________________
 609+ E6DF             >//              Dictionary part
 609+ E6DF             >
 609+ E6DF             >                org     Dict_Ptr
 609+ 6D9B             >
 609+ 6D9B DD 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 6D9D             >
 609+ 6D9D             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 6D9D CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 6DA0             >
 609+ 6DA0             >
 609+ 6DA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 6DA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 6DA0             >
 609+ 6DA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 6DA0 92 6D                        dw      NFA                     // nfa
 611+ 6DA2 8C 6A                        dw      ONE                     // 1
 612+ 6DA4 7E 6C                        dw      TRAVERSE                // traverse
 613+ 6DA6 BA 68                        dw      ONE_PLUS                // 1+
 614+ 6DA8 4F 68                        dw      EXIT                    // ;
 615+ 6DAA
 616+ 6DAA              //  ______________________________________________________________________
 617+ 6DAA              //
 618+ 6DAA              // pfa          nfa -- pfa
 619+ 6DAA                              Colon_Def PFA, "PFA", is_normal
 619+ 6DAA             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 619+ 6DAA             >
 619+ 6DAA             >Dict_Ptr        defl    $
 619+ 6DAA             >
 619+ 6DAA             >//              ______________________________________________________________________
 619+ 6DAA             >//              Heap part
 619+ 6DAA             >
 619+ 6DAA             >
 619+ 6DAA             >                org     (Heap_Ptr & $1FFF) + $E000
 619+ E6DF             >
 619+ E6DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 619+ E6DF             >Latest_Definition defl  Heap_Ptr
 619+ E6DF             >
 619+ E6DF             >                // dummy db directives used to calculate length of namec
 619+ E6DF 50 46 41    >                db      "PFA"
 619+ E6E2             >len_NFA         defl    $ - temp_NFA
 619+ E6E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 619+ E6DF             >
 619+ E6DF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 619+ E6E0 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 619+ E6E3             >                org     $-1                 // alter last byte of Name just above to set
 619+ E6E2 C1          >                db      {b $} | END_BIT     // msb as name end
 619+ E6E3             >
 619+ E6E3 D7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 619+ E6E5             >Prev_Ptr        defl    Heap_Ptr
 619+ E6E5             >
 619+ E6E5             >mirror_Ptr      defl    $
 619+ E6E5             >
 619+ E6E5 AC 6D       >                dw      Dict_Ptr + 2        // xt
 619+ E6E7             >Heap_Ptr        defl    $ - $E000           // save current HP
 619+ E6E7             >
 619+ E6E7             >Current_HP      defl  $ - $E000             // used to set HP once!
 619+ E6E7             >
 619+ E6E7             >//              ______________________________________________________________________
 619+ E6E7             >//              Dictionary part
 619+ E6E7             >
 619+ E6E7             >                org     Dict_Ptr
 619+ 6DAA             >
 619+ 6DAA E5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 619+ 6DAC             >
 619+ 6DAC             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 619+ 6DAC CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 619+ 6DAF             >
 619+ 6DAF             >
 619+ 6DAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 619+ 6DAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 619+ 6DAF             >
 619+ 6DAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 620+ 6DAF 02 6D                        dw      QTOHEAP
 621+ 6DB1 8C 6A                        dw      ONE                     // 1
 622+ 6DB3 7E 6C                        dw      TRAVERSE                // traverse
 623+ 6DB5 BA 68                        dw      ONE_PLUS                // 1+
 624+ 6DB7 D0 68                        dw      CELL_PLUS               // cell+
 625+ 6DB9 D3 6C                        dw      QMMU7
 626+ 6DBB F5 63                        dw      ZBRANCH
 627+ 6DBD 0E 00                        dw      PFA_Skip - $
 628+ 6DBF 9B 6C                        dw          MMU7_FETCH
 629+ 6DC1 8C 6A E9 6B                  dw          ONE, SUBTRACT
 630+ 6DC5 F5 63                        dw          ZBRANCH
 631+ 6DC7 04 00                        dw          PFA_Skip - $
 632+ 6DC9 8F 69                        dw              FETCH
 633+ 6DCB              PFA_Skip:                                    // endif
 634+ 6DCB 5D 6D                        dw      TO_BODY                 // >body
 635+ 6DCD 4F 68                        dw      EXIT                    // ;
 636+ 6DCF
 637+ 6DCF              //  ______________________________________________________________________
 638+ 6DCF              //
 639+ 6DCF              // !csp         --
 640+ 6DCF              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 641+ 6DCF                              Colon_Def STORE_CSP, "!CSP", is_normal
 641+ 6DCF             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 641+ 6DCF             >
 641+ 6DCF             >Dict_Ptr        defl    $
 641+ 6DCF             >
 641+ 6DCF             >//              ______________________________________________________________________
 641+ 6DCF             >//              Heap part
 641+ 6DCF             >
 641+ 6DCF             >
 641+ 6DCF             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ E6E7             >
 641+ E6E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ E6E7             >Latest_Definition defl  Heap_Ptr
 641+ E6E7             >
 641+ E6E7             >                // dummy db directives used to calculate length of namec
 641+ E6E7 21 43 53 50 >                db      "!CSP"
 641+ E6EB             >len_NFA         defl    $ - temp_NFA
 641+ E6EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ E6E7             >
 641+ E6E7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ E6E8 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 641+ E6EC             >                org     $-1                 // alter last byte of Name just above to set
 641+ E6EB D0          >                db      {b $} | END_BIT     // msb as name end
 641+ E6EC             >
 641+ E6EC DF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ E6EE             >Prev_Ptr        defl    Heap_Ptr
 641+ E6EE             >
 641+ E6EE             >mirror_Ptr      defl    $
 641+ E6EE             >
 641+ E6EE D1 6D       >                dw      Dict_Ptr + 2        // xt
 641+ E6F0             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ E6F0             >
 641+ E6F0             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ E6F0             >
 641+ E6F0             >//              ______________________________________________________________________
 641+ E6F0             >//              Dictionary part
 641+ E6F0             >
 641+ E6F0             >                org     Dict_Ptr
 641+ 6DCF             >
 641+ 6DCF EE 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 6DD1             >
 641+ 6DD1             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 6DD1 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 6DD4             >
 641+ 6DD4             >
 641+ 6DD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 6DD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 6DD4             >
 641+ 6DD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 6DD4 36 68                        dw      SPFETCH                 // sp@
 643+ 6DD6 68 6B 99 69                  dw      CSP, STORE              // csp !
 644+ 6DDA 4F 68                        dw      EXIT                    // ;
 645+ 6DDC
 646+ 6DDC              //  ______________________________________________________________________
 647+ 6DDC              //
 648+ 6DDC              // ?error       f n --
 649+ 6DDC              // rase error n if flag f it true
 650+ 6DDC                              Colon_Def QERROR, "?ERROR", is_normal
 650+ 6DDC             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 650+ 6DDC             >
 650+ 6DDC             >Dict_Ptr        defl    $
 650+ 6DDC             >
 650+ 6DDC             >//              ______________________________________________________________________
 650+ 6DDC             >//              Heap part
 650+ 6DDC             >
 650+ 6DDC             >
 650+ 6DDC             >                org     (Heap_Ptr & $1FFF) + $E000
 650+ E6F0             >
 650+ E6F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 650+ E6F0             >Latest_Definition defl  Heap_Ptr
 650+ E6F0             >
 650+ E6F0             >                // dummy db directives used to calculate length of namec
 650+ E6F0 3F 45 52 52 >                db      "?ERROR"
 650+ E6F4 4F 52       >
 650+ E6F6             >len_NFA         defl    $ - temp_NFA
 650+ E6F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 650+ E6F0             >
 650+ E6F0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 650+ E6F1 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 650+ E6F5 4F 52       >
 650+ E6F7             >                org     $-1                 // alter last byte of Name just above to set
 650+ E6F6 D2          >                db      {b $} | END_BIT     // msb as name end
 650+ E6F7             >
 650+ E6F7 E7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 650+ E6F9             >Prev_Ptr        defl    Heap_Ptr
 650+ E6F9             >
 650+ E6F9             >mirror_Ptr      defl    $
 650+ E6F9             >
 650+ E6F9 DE 6D       >                dw      Dict_Ptr + 2        // xt
 650+ E6FB             >Heap_Ptr        defl    $ - $E000           // save current HP
 650+ E6FB             >
 650+ E6FB             >Current_HP      defl  $ - $E000             // used to set HP once!
 650+ E6FB             >
 650+ E6FB             >//              ______________________________________________________________________
 650+ E6FB             >//              Dictionary part
 650+ E6FB             >
 650+ E6FB             >                org     Dict_Ptr
 650+ 6DDC             >
 650+ 6DDC F9 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 650+ 6DDE             >
 650+ 6DDE             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 650+ 6DDE CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 650+ 6DE1             >
 650+ 6DE1             >
 650+ 6DE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 650+ 6DE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 650+ 6DE1             >
 650+ 6DE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 651+ 6DE1 1E 69                        dw      SWAP                    // swap
 652+ 6DE3                                                              // if
 653+ 6DE3 F5 63                        dw      ZBRANCH
 654+ 6DE5 08 00                        dw      QError_Else - $
 655+ 6DE7 18 73                        dw          ERROR               //      error  ( is a forward-ref )
 656+ 6DE9                                                              // else
 657+ 6DE9 E8 63                        dw      BRANCH
 658+ 6DEB 04 00                        dw      QError_Endif - $
 659+ 6DED              QError_Else:
 660+ 6DED 0A 69                        dw          DROP                //      drop
 661+ 6DEF              QError_Endif:                                   // endif
 662+ 6DEF 4F 68                        dw      EXIT                    // ;
 663+ 6DF1
 664+ 6DF1              //  ______________________________________________________________________
 665+ 6DF1              //
 666+ 6DF1              // ?comp       --
 667+ 6DF1              // raise msg #17 if not compiling
 668+ 6DF1                              Colon_Def QCOMP, "?COMP", is_normal
 668+ 6DF1             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 668+ 6DF1             >
 668+ 6DF1             >Dict_Ptr        defl    $
 668+ 6DF1             >
 668+ 6DF1             >//              ______________________________________________________________________
 668+ 6DF1             >//              Heap part
 668+ 6DF1             >
 668+ 6DF1             >
 668+ 6DF1             >                org     (Heap_Ptr & $1FFF) + $E000
 668+ E6FB             >
 668+ E6FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 668+ E6FB             >Latest_Definition defl  Heap_Ptr
 668+ E6FB             >
 668+ E6FB             >                // dummy db directives used to calculate length of namec
 668+ E6FB 3F 43 4F 4D >                db      "?COMP"
 668+ E6FF 50          >
 668+ E700             >len_NFA         defl    $ - temp_NFA
 668+ E700             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 668+ E6FB             >
 668+ E6FB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 668+ E6FC 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 668+ E700 50          >
 668+ E701             >                org     $-1                 // alter last byte of Name just above to set
 668+ E700 D0          >                db      {b $} | END_BIT     // msb as name end
 668+ E701             >
 668+ E701 F0 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 668+ E703             >Prev_Ptr        defl    Heap_Ptr
 668+ E703             >
 668+ E703             >mirror_Ptr      defl    $
 668+ E703             >
 668+ E703 F3 6D       >                dw      Dict_Ptr + 2        // xt
 668+ E705             >Heap_Ptr        defl    $ - $E000           // save current HP
 668+ E705             >
 668+ E705             >Current_HP      defl  $ - $E000             // used to set HP once!
 668+ E705             >
 668+ E705             >//              ______________________________________________________________________
 668+ E705             >//              Dictionary part
 668+ E705             >
 668+ E705             >                org     Dict_Ptr
 668+ 6DF1             >
 668+ 6DF1 03 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 668+ 6DF3             >
 668+ 6DF3             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 668+ 6DF3 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 668+ 6DF6             >
 668+ 6DF6             >
 668+ 6DF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 668+ 6DF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 668+ 6DF6             >
 668+ 6DF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 669+ 6DF6 50 6B 8F 69                  dw      STATE, FETCH            // state @
 670+ 6DFA 74 68                        dw      ZEQUAL                  // 0=
 671+ 6DFC A3 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 672+ 6E00 DE 6D                        dw      QERROR                  // ?error
 673+ 6E02 4F 68                        dw      EXIT                    // ;
 674+ 6E04
 675+ 6E04              //  ______________________________________________________________________
 676+ 6E04              //
 677+ 6E04              // ?exec       --
 678+ 6E04              // raise msg #18 if compiling
 679+ 6E04                              Colon_Def QEXEC, "?EXEC", is_normal
 679+ 6E04             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 679+ 6E04             >
 679+ 6E04             >Dict_Ptr        defl    $
 679+ 6E04             >
 679+ 6E04             >//              ______________________________________________________________________
 679+ 6E04             >//              Heap part
 679+ 6E04             >
 679+ 6E04             >
 679+ 6E04             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E705             >
 679+ E705             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E705             >Latest_Definition defl  Heap_Ptr
 679+ E705             >
 679+ E705             >                // dummy db directives used to calculate length of namec
 679+ E705 3F 45 58 45 >                db      "?EXEC"
 679+ E709 43          >
 679+ E70A             >len_NFA         defl    $ - temp_NFA
 679+ E70A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E705             >
 679+ E705 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E706 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 679+ E70A 43          >
 679+ E70B             >                org     $-1                 // alter last byte of Name just above to set
 679+ E70A C3          >                db      {b $} | END_BIT     // msb as name end
 679+ E70B             >
 679+ E70B FB 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E70D             >Prev_Ptr        defl    Heap_Ptr
 679+ E70D             >
 679+ E70D             >mirror_Ptr      defl    $
 679+ E70D             >
 679+ E70D 06 6E       >                dw      Dict_Ptr + 2        // xt
 679+ E70F             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E70F             >
 679+ E70F             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E70F             >
 679+ E70F             >//              ______________________________________________________________________
 679+ E70F             >//              Dictionary part
 679+ E70F             >
 679+ E70F             >                org     Dict_Ptr
 679+ 6E04             >
 679+ 6E04 0D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 6E06             >
 679+ 6E06             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 6E06 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 6E09             >
 679+ 6E09             >
 679+ 6E09             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 6E09             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 6E09             >
 679+ 6E09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 6E09 50 6B 8F 69                  dw      STATE, FETCH            // state @
 681+ 6E0D A3 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 682+ 6E11 DE 6D                        dw      QERROR                  // ?error
 683+ 6E13 4F 68                        dw      EXIT                    // ;
 684+ 6E15
 685+ 6E15              //  ______________________________________________________________________
 686+ 6E15              //
 687+ 6E15              // ?pairs       n1 n2 --
 688+ 6E15              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 689+ 6E15                              Colon_Def QPAIRS, "?PAIRS", is_normal
 689+ 6E15             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 689+ 6E15             >
 689+ 6E15             >Dict_Ptr        defl    $
 689+ 6E15             >
 689+ 6E15             >//              ______________________________________________________________________
 689+ 6E15             >//              Heap part
 689+ 6E15             >
 689+ 6E15             >
 689+ 6E15             >                org     (Heap_Ptr & $1FFF) + $E000
 689+ E70F             >
 689+ E70F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 689+ E70F             >Latest_Definition defl  Heap_Ptr
 689+ E70F             >
 689+ E70F             >                // dummy db directives used to calculate length of namec
 689+ E70F 3F 50 41 49 >                db      "?PAIRS"
 689+ E713 52 53       >
 689+ E715             >len_NFA         defl    $ - temp_NFA
 689+ E715             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 689+ E70F             >
 689+ E70F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 689+ E710 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 689+ E714 52 53       >
 689+ E716             >                org     $-1                 // alter last byte of Name just above to set
 689+ E715 D3          >                db      {b $} | END_BIT     // msb as name end
 689+ E716             >
 689+ E716 05 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 689+ E718             >Prev_Ptr        defl    Heap_Ptr
 689+ E718             >
 689+ E718             >mirror_Ptr      defl    $
 689+ E718             >
 689+ E718 17 6E       >                dw      Dict_Ptr + 2        // xt
 689+ E71A             >Heap_Ptr        defl    $ - $E000           // save current HP
 689+ E71A             >
 689+ E71A             >Current_HP      defl  $ - $E000             // used to set HP once!
 689+ E71A             >
 689+ E71A             >//              ______________________________________________________________________
 689+ E71A             >//              Dictionary part
 689+ E71A             >
 689+ E71A             >                org     Dict_Ptr
 689+ 6E15             >
 689+ 6E15 18 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 689+ 6E17             >
 689+ 6E17             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 689+ 6E17 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 689+ 6E1A             >
 689+ 6E1A             >
 689+ 6E1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 689+ 6E1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 689+ 6E1A             >
 689+ 6E1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 690+ 6E1A E9 6B                        dw      SUBTRACT                // -
 691+ 6E1C A3 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 692+ 6E20 DE 6D                        dw      QERROR                  // ?error
 693+ 6E22 4F 68                        dw      EXIT                    // ;
 694+ 6E24
 695+ 6E24              //  ______________________________________________________________________
 696+ 6E24              //
 697+ 6E24              // ?csp       --
 698+ 6E24              // raise msg #20 if surrent SP in not what previously saved in CSP.
 699+ 6E24              // Compiler relies on that for  syntax checking of structures
 700+ 6E24                              Colon_Def QCSP, "?CSP", is_normal
 700+ 6E24             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 700+ 6E24             >
 700+ 6E24             >Dict_Ptr        defl    $
 700+ 6E24             >
 700+ 6E24             >//              ______________________________________________________________________
 700+ 6E24             >//              Heap part
 700+ 6E24             >
 700+ 6E24             >
 700+ 6E24             >                org     (Heap_Ptr & $1FFF) + $E000
 700+ E71A             >
 700+ E71A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 700+ E71A             >Latest_Definition defl  Heap_Ptr
 700+ E71A             >
 700+ E71A             >                // dummy db directives used to calculate length of namec
 700+ E71A 3F 43 53 50 >                db      "?CSP"
 700+ E71E             >len_NFA         defl    $ - temp_NFA
 700+ E71E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 700+ E71A             >
 700+ E71A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 700+ E71B 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 700+ E71F             >                org     $-1                 // alter last byte of Name just above to set
 700+ E71E D0          >                db      {b $} | END_BIT     // msb as name end
 700+ E71F             >
 700+ E71F 0F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 700+ E721             >Prev_Ptr        defl    Heap_Ptr
 700+ E721             >
 700+ E721             >mirror_Ptr      defl    $
 700+ E721             >
 700+ E721 26 6E       >                dw      Dict_Ptr + 2        // xt
 700+ E723             >Heap_Ptr        defl    $ - $E000           // save current HP
 700+ E723             >
 700+ E723             >Current_HP      defl  $ - $E000             // used to set HP once!
 700+ E723             >
 700+ E723             >//              ______________________________________________________________________
 700+ E723             >//              Dictionary part
 700+ E723             >
 700+ E723             >                org     Dict_Ptr
 700+ 6E24             >
 700+ 6E24 21 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 700+ 6E26             >
 700+ 6E26             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 700+ 6E26 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 700+ 6E29             >
 700+ 6E29             >
 700+ 6E29             >                endif           ; ok        // for other definitions it "points" the correct handler
 700+ 6E29             >                // Use of "; ok" to suppress "warning[fwdref]"
 700+ 6E29             >
 700+ 6E29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 701+ 6E29 36 68                        dw      SPFETCH                 // sp@
 702+ 6E2B 68 6B 8F 69                  dw      CSP, FETCH              // csp @
 703+ 6E2F E9 6B                        dw      SUBTRACT                // -
 704+ 6E31 A3 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 705+ 6E35 DE 6D                        dw      QERROR                  // ?error
 706+ 6E37 4F 68                        dw      EXIT                    // ;
 707+ 6E39
 708+ 6E39              //  ______________________________________________________________________
 709+ 6E39              //
 710+ 6E39              // ?loading      --
 711+ 6E39              // raise msg #22 if not loading
 712+ 6E39                              Colon_Def QLOADING, "?LOADING", is_normal
 712+ 6E39             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 712+ 6E39             >
 712+ 6E39             >Dict_Ptr        defl    $
 712+ 6E39             >
 712+ 6E39             >//              ______________________________________________________________________
 712+ 6E39             >//              Heap part
 712+ 6E39             >
 712+ 6E39             >
 712+ 6E39             >                org     (Heap_Ptr & $1FFF) + $E000
 712+ E723             >
 712+ E723             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ E723             >Latest_Definition defl  Heap_Ptr
 712+ E723             >
 712+ E723             >                // dummy db directives used to calculate length of namec
 712+ E723 3F 4C 4F 41 >                db      "?LOADING"
 712+ E727 44 49 4E 47 >
 712+ E72B             >len_NFA         defl    $ - temp_NFA
 712+ E72B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ E723             >
 712+ E723 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ E724 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 712+ E728 44 49 4E 47 >
 712+ E72C             >                org     $-1                 // alter last byte of Name just above to set
 712+ E72B C7          >                db      {b $} | END_BIT     // msb as name end
 712+ E72C             >
 712+ E72C 1A 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 712+ E72E             >Prev_Ptr        defl    Heap_Ptr
 712+ E72E             >
 712+ E72E             >mirror_Ptr      defl    $
 712+ E72E             >
 712+ E72E 3B 6E       >                dw      Dict_Ptr + 2        // xt
 712+ E730             >Heap_Ptr        defl    $ - $E000           // save current HP
 712+ E730             >
 712+ E730             >Current_HP      defl  $ - $E000             // used to set HP once!
 712+ E730             >
 712+ E730             >//              ______________________________________________________________________
 712+ E730             >//              Dictionary part
 712+ E730             >
 712+ E730             >                org     Dict_Ptr
 712+ 6E39             >
 712+ 6E39 2E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 712+ 6E3B             >
 712+ 6E3B             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 6E3B CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 6E3E             >
 712+ 6E3E             >
 712+ 6E3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 6E3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 6E3E             >
 712+ 6E3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 6E3E 26 6B 8F 69                  dw      BLK, FETCH              // blk @
 714+ 6E42 74 68                        dw      ZEQUAL                  // 0=
 715+ 6E44 A3 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 716+ 6E48 DE 6D                        dw      QERROR                  // ?error
 717+ 6E4A 4F 68                        dw      EXIT                    // ;
 718+ 6E4C
 719+ 6E4C              //  ______________________________________________________________________
 720+ 6E4C              //
 721+ 6E4C              // compile      --
 722+ 6E4C              // compiles the following word
 723+ 6E4C                              Colon_Def COMPILE, "COMPILE", is_normal
 723+ 6E4C             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 723+ 6E4C             >
 723+ 6E4C             >Dict_Ptr        defl    $
 723+ 6E4C             >
 723+ 6E4C             >//              ______________________________________________________________________
 723+ 6E4C             >//              Heap part
 723+ 6E4C             >
 723+ 6E4C             >
 723+ 6E4C             >                org     (Heap_Ptr & $1FFF) + $E000
 723+ E730             >
 723+ E730             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 723+ E730             >Latest_Definition defl  Heap_Ptr
 723+ E730             >
 723+ E730             >                // dummy db directives used to calculate length of namec
 723+ E730 43 4F 4D 50 >                db      "COMPILE"
 723+ E734 49 4C 45    >
 723+ E737             >len_NFA         defl    $ - temp_NFA
 723+ E737             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 723+ E730             >
 723+ E730 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 723+ E731 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 723+ E735 49 4C 45    >
 723+ E738             >                org     $-1                 // alter last byte of Name just above to set
 723+ E737 C5          >                db      {b $} | END_BIT     // msb as name end
 723+ E738             >
 723+ E738 23 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 723+ E73A             >Prev_Ptr        defl    Heap_Ptr
 723+ E73A             >
 723+ E73A             >mirror_Ptr      defl    $
 723+ E73A             >
 723+ E73A 4E 6E       >                dw      Dict_Ptr + 2        // xt
 723+ E73C             >Heap_Ptr        defl    $ - $E000           // save current HP
 723+ E73C             >
 723+ E73C             >Current_HP      defl  $ - $E000             // used to set HP once!
 723+ E73C             >
 723+ E73C             >//              ______________________________________________________________________
 723+ E73C             >//              Dictionary part
 723+ E73C             >
 723+ E73C             >                org     Dict_Ptr
 723+ 6E4C             >
 723+ 6E4C 3A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 723+ 6E4E             >
 723+ 6E4E             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 723+ 6E4E CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 723+ 6E51             >
 723+ 6E51             >
 723+ 6E51             >                endif           ; ok        // for other definitions it "points" the correct handler
 723+ 6E51             >                // Use of "; ok" to suppress "warning[fwdref]"
 723+ 6E51             >
 723+ 6E51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 724+ 6E51 F3 6D                        dw      QCOMP                   // ?comp
 725+ 6E53 64 68                        dw      R_TO                    // r>
 726+ 6E55 25 69 D0 68                  dw      DUP, CELL_PLUS          // dup, cell+
 727+ 6E59 59 68                        dw      TO_R                    // >r
 728+ 6E5B 8F 69 C0 6B                  dw      FETCH, COMMA            // @ ,
 729+ 6E5F 4F 68                        dw      EXIT                    // ;
 730+ 6E61
 731+ 6E61              //  ______________________________________________________________________
 732+ 6E61              //
 733+ 6E61              // compile,     --
 734+ 6E61              // compiles the following word
 735+ 6E61                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 735+ 6E61             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 735+ 6E61             >
 735+ 6E61             >Dict_Ptr        defl    $
 735+ 6E61             >
 735+ 6E61             >//              ______________________________________________________________________
 735+ 6E61             >//              Heap part
 735+ 6E61             >
 735+ 6E61             >
 735+ 6E61             >                org     (Heap_Ptr & $1FFF) + $E000
 735+ E73C             >
 735+ E73C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 735+ E73C             >Latest_Definition defl  Heap_Ptr
 735+ E73C             >
 735+ E73C             >                // dummy db directives used to calculate length of namec
 735+ E73C 43 4F 4D 50 >                db      "COMPILE,"
 735+ E740 49 4C 45 2C >
 735+ E744             >len_NFA         defl    $ - temp_NFA
 735+ E744             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 735+ E73C             >
 735+ E73C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 735+ E73D 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 735+ E741 49 4C 45 2C >
 735+ E745             >                org     $-1                 // alter last byte of Name just above to set
 735+ E744 AC          >                db      {b $} | END_BIT     // msb as name end
 735+ E745             >
 735+ E745 30 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 735+ E747             >Prev_Ptr        defl    Heap_Ptr
 735+ E747             >
 735+ E747             >mirror_Ptr      defl    $
 735+ E747             >
 735+ E747 63 6E       >                dw      Dict_Ptr + 2        // xt
 735+ E749             >Heap_Ptr        defl    $ - $E000           // save current HP
 735+ E749             >
 735+ E749             >Current_HP      defl  $ - $E000             // used to set HP once!
 735+ E749             >
 735+ E749             >//              ______________________________________________________________________
 735+ E749             >//              Dictionary part
 735+ E749             >
 735+ E749             >                org     Dict_Ptr
 735+ 6E61             >
 735+ 6E61 47 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 735+ 6E63             >
 735+ 6E63             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 735+ 6E63 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 735+ 6E66             >
 735+ 6E66             >
 735+ 6E66             >                endif           ; ok        // for other definitions it "points" the correct handler
 735+ 6E66             >                // Use of "; ok" to suppress "warning[fwdref]"
 735+ 6E66             >
 735+ 6E66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 736+ 6E66              //              dw      QCOMP                   // ?comp
 737+ 6E66 C0 6B                        dw      COMMA                   // ,
 738+ 6E68 4F 68                        dw      EXIT                    // ;
 739+ 6E6A
 740+ 6E6A              //  ______________________________________________________________________
 741+ 6E6A              //
 742+ 6E6A              // [            --
 743+ 6E6A              // stop compilation
 744+ 6E6A                              Colon_Def SQUARED_OPEN, "[", is_immediate
 744+ 6E6A             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 744+ 6E6A             >
 744+ 6E6A             >Dict_Ptr        defl    $
 744+ 6E6A             >
 744+ 6E6A             >//              ______________________________________________________________________
 744+ 6E6A             >//              Heap part
 744+ 6E6A             >
 744+ 6E6A             >
 744+ 6E6A             >                org     (Heap_Ptr & $1FFF) + $E000
 744+ E749             >
 744+ E749             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 744+ E749             >Latest_Definition defl  Heap_Ptr
 744+ E749             >
 744+ E749             >                // dummy db directives used to calculate length of namec
 744+ E749 5B          >                db      "["
 744+ E74A             >len_NFA         defl    $ - temp_NFA
 744+ E74A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 744+ E749             >
 744+ E749 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 744+ E74A 5B          >                db      "["               // name string in 7-bit ascii, but
 744+ E74B             >                org     $-1                 // alter last byte of Name just above to set
 744+ E74A DB          >                db      {b $} | END_BIT     // msb as name end
 744+ E74B             >
 744+ E74B 3C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 744+ E74D             >Prev_Ptr        defl    Heap_Ptr
 744+ E74D             >
 744+ E74D             >mirror_Ptr      defl    $
 744+ E74D             >
 744+ E74D 6C 6E       >                dw      Dict_Ptr + 2        // xt
 744+ E74F             >Heap_Ptr        defl    $ - $E000           // save current HP
 744+ E74F             >
 744+ E74F             >Current_HP      defl  $ - $E000             // used to set HP once!
 744+ E74F             >
 744+ E74F             >//              ______________________________________________________________________
 744+ E74F             >//              Dictionary part
 744+ E74F             >
 744+ E74F             >                org     Dict_Ptr
 744+ 6E6A             >
 744+ 6E6A 4D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 744+ 6E6C             >
 744+ 6E6C             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 744+ 6E6C CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 744+ 6E6F             >
 744+ 6E6F             >
 744+ 6E6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 744+ 6E6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 744+ 6E6F             >
 744+ 6E6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 745+ 6E6F 85 6A                        dw      ZERO                    // 0
 746+ 6E71 50 6B 99 69                  dw      STATE, STORE            // state !
 747+ 6E75 4F 68                        dw      EXIT                    // ; immediate
 748+ 6E77
 749+ 6E77              //  ______________________________________________________________________
 750+ 6E77              //
 751+ 6E77              // ]            --
 752+ 6E77              // start compilation
 753+ 6E77                              Colon_Def SQUARED_CLOSE, "]", is_normal
 753+ 6E77             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 753+ 6E77             >
 753+ 6E77             >Dict_Ptr        defl    $
 753+ 6E77             >
 753+ 6E77             >//              ______________________________________________________________________
 753+ 6E77             >//              Heap part
 753+ 6E77             >
 753+ 6E77             >
 753+ 6E77             >                org     (Heap_Ptr & $1FFF) + $E000
 753+ E74F             >
 753+ E74F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 753+ E74F             >Latest_Definition defl  Heap_Ptr
 753+ E74F             >
 753+ E74F             >                // dummy db directives used to calculate length of namec
 753+ E74F 5D          >                db      "]"
 753+ E750             >len_NFA         defl    $ - temp_NFA
 753+ E750             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 753+ E74F             >
 753+ E74F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 753+ E750 5D          >                db      "]"               // name string in 7-bit ascii, but
 753+ E751             >                org     $-1                 // alter last byte of Name just above to set
 753+ E750 DD          >                db      {b $} | END_BIT     // msb as name end
 753+ E751             >
 753+ E751 49 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 753+ E753             >Prev_Ptr        defl    Heap_Ptr
 753+ E753             >
 753+ E753             >mirror_Ptr      defl    $
 753+ E753             >
 753+ E753 79 6E       >                dw      Dict_Ptr + 2        // xt
 753+ E755             >Heap_Ptr        defl    $ - $E000           // save current HP
 753+ E755             >
 753+ E755             >Current_HP      defl  $ - $E000             // used to set HP once!
 753+ E755             >
 753+ E755             >//              ______________________________________________________________________
 753+ E755             >//              Dictionary part
 753+ E755             >
 753+ E755             >                org     Dict_Ptr
 753+ 6E77             >
 753+ 6E77 53 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 753+ 6E79             >
 753+ 6E79             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 753+ 6E79 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 753+ 6E7C             >
 753+ 6E7C             >
 753+ 6E7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 753+ 6E7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 753+ 6E7C             >
 753+ 6E7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 754+ 6E7C A3 63 C0 00                  dw      LIT, $C0                // 192
 755+ 6E80 50 6B 99 69                  dw      STATE, STORE            // state !
 756+ 6E84 4F 68                        dw      EXIT                    // ;
 757+ 6E86
 758+ 6E86              //  ______________________________________________________________________
 759+ 6E86              //
 760+ 6E86              // smudge       --
 761+ 6E86              // toggle smudge bit of latest definition
 762+ 6E86                              Colon_Def SMUDGE, "SMUDGE", is_normal
 762+ 6E86             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 762+ 6E86             >
 762+ 6E86             >Dict_Ptr        defl    $
 762+ 6E86             >
 762+ 6E86             >//              ______________________________________________________________________
 762+ 6E86             >//              Heap part
 762+ 6E86             >
 762+ 6E86             >
 762+ 6E86             >                org     (Heap_Ptr & $1FFF) + $E000
 762+ E755             >
 762+ E755             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 762+ E755             >Latest_Definition defl  Heap_Ptr
 762+ E755             >
 762+ E755             >                // dummy db directives used to calculate length of namec
 762+ E755 53 4D 55 44 >                db      "SMUDGE"
 762+ E759 47 45       >
 762+ E75B             >len_NFA         defl    $ - temp_NFA
 762+ E75B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 762+ E755             >
 762+ E755 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 762+ E756 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 762+ E75A 47 45       >
 762+ E75C             >                org     $-1                 // alter last byte of Name just above to set
 762+ E75B C5          >                db      {b $} | END_BIT     // msb as name end
 762+ E75C             >
 762+ E75C 4F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 762+ E75E             >Prev_Ptr        defl    Heap_Ptr
 762+ E75E             >
 762+ E75E             >mirror_Ptr      defl    $
 762+ E75E             >
 762+ E75E 88 6E       >                dw      Dict_Ptr + 2        // xt
 762+ E760             >Heap_Ptr        defl    $ - $E000           // save current HP
 762+ E760             >
 762+ E760             >Current_HP      defl  $ - $E000             // used to set HP once!
 762+ E760             >
 762+ E760             >//              ______________________________________________________________________
 762+ E760             >//              Dictionary part
 762+ E760             >
 762+ E760             >                org     Dict_Ptr
 762+ 6E86             >
 762+ 6E86 5E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 762+ 6E88             >
 762+ 6E88             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 762+ 6E88 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 762+ 6E8B             >
 762+ 6E8B             >
 762+ 6E8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 762+ 6E8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 762+ 6E8B             >
 762+ 6E8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 763+ 6E8B 4E 6D                        dw      LATEST                  // latest
 764+ 6E8D A3 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 765+ 6E91 86 69                        dw      TOGGLE                  // toggle
 766+ 6E93 4F 68                        dw      EXIT                    // ;
 767+ 6E95
 768+ 6E95              //  ______________________________________________________________________
 769+ 6E95              //
 770+ 6E95              // immediate    --
 771+ 6E95              // make immediate the latest definition
 772+ 6E95                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 772+ 6E95             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 772+ 6E95             >
 772+ 6E95             >Dict_Ptr        defl    $
 772+ 6E95             >
 772+ 6E95             >//              ______________________________________________________________________
 772+ 6E95             >//              Heap part
 772+ 6E95             >
 772+ 6E95             >
 772+ 6E95             >                org     (Heap_Ptr & $1FFF) + $E000
 772+ E760             >
 772+ E760             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ E760             >Latest_Definition defl  Heap_Ptr
 772+ E760             >
 772+ E760             >                // dummy db directives used to calculate length of namec
 772+ E760 49 4D 4D 45 >                db      "IMMEDIATE"
 772+ E764 44 49 41 54 >
 772+ E768 45          >
 772+ E769             >len_NFA         defl    $ - temp_NFA
 772+ E769             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ E760             >
 772+ E760 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ E761 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 772+ E765 44 49 41 54 >
 772+ E769 45          >
 772+ E76A             >                org     $-1                 // alter last byte of Name just above to set
 772+ E769 C5          >                db      {b $} | END_BIT     // msb as name end
 772+ E76A             >
 772+ E76A 55 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 772+ E76C             >Prev_Ptr        defl    Heap_Ptr
 772+ E76C             >
 772+ E76C             >mirror_Ptr      defl    $
 772+ E76C             >
 772+ E76C 97 6E       >                dw      Dict_Ptr + 2        // xt
 772+ E76E             >Heap_Ptr        defl    $ - $E000           // save current HP
 772+ E76E             >
 772+ E76E             >Current_HP      defl  $ - $E000             // used to set HP once!
 772+ E76E             >
 772+ E76E             >//              ______________________________________________________________________
 772+ E76E             >//              Dictionary part
 772+ E76E             >
 772+ E76E             >                org     Dict_Ptr
 772+ 6E95             >
 772+ 6E95 6C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 772+ 6E97             >
 772+ 6E97             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 6E97 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 6E9A             >
 772+ 6E9A             >
 772+ 6E9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 6E9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 6E9A             >
 772+ 6E9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 6E9A 4E 6D                        dw      LATEST                  // latest
 774+ 6E9C A3 63 40 00                  dw      LIT, $40                // 64
 775+ 6EA0 86 69                        dw      TOGGLE                  // toggle
 776+ 6EA2 4F 68                        dw      EXIT                    // ;
 777+ 6EA4
 778+ 6EA4              //  ______________________________________________________________________
 779+ 6EA4              //
 780+ 6EA4              // hex          --
 781+ 6EA4              // change numeration base
 782+ 6EA4                              Colon_Def HEX, "HEX", is_normal
 782+ 6EA4             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 782+ 6EA4             >
 782+ 6EA4             >Dict_Ptr        defl    $
 782+ 6EA4             >
 782+ 6EA4             >//              ______________________________________________________________________
 782+ 6EA4             >//              Heap part
 782+ 6EA4             >
 782+ 6EA4             >
 782+ 6EA4             >                org     (Heap_Ptr & $1FFF) + $E000
 782+ E76E             >
 782+ E76E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 782+ E76E             >Latest_Definition defl  Heap_Ptr
 782+ E76E             >
 782+ E76E             >                // dummy db directives used to calculate length of namec
 782+ E76E 48 45 58    >                db      "HEX"
 782+ E771             >len_NFA         defl    $ - temp_NFA
 782+ E771             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 782+ E76E             >
 782+ E76E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 782+ E76F 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 782+ E772             >                org     $-1                 // alter last byte of Name just above to set
 782+ E771 D8          >                db      {b $} | END_BIT     // msb as name end
 782+ E772             >
 782+ E772 60 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 782+ E774             >Prev_Ptr        defl    Heap_Ptr
 782+ E774             >
 782+ E774             >mirror_Ptr      defl    $
 782+ E774             >
 782+ E774 A6 6E       >                dw      Dict_Ptr + 2        // xt
 782+ E776             >Heap_Ptr        defl    $ - $E000           // save current HP
 782+ E776             >
 782+ E776             >Current_HP      defl  $ - $E000             // used to set HP once!
 782+ E776             >
 782+ E776             >//              ______________________________________________________________________
 782+ E776             >//              Dictionary part
 782+ E776             >
 782+ E776             >                org     Dict_Ptr
 782+ 6EA4             >
 782+ 6EA4 74 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 782+ 6EA6             >
 782+ 6EA6             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 782+ 6EA6 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 782+ 6EA9             >
 782+ 6EA9             >
 782+ 6EA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 782+ 6EA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 782+ 6EA9             >
 782+ 6EA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 783+ 6EA9 A3 63 10 00                  dw      LIT, 16                 // 16
 784+ 6EAD 56 6B 99 69                  dw      BASE, STORE             // base !
 785+ 6EB1 4F 68                        dw      EXIT                    // ;
 786+ 6EB3
 787+ 6EB3              //  ______________________________________________________________________
 788+ 6EB3              //
 789+ 6EB3              // decimal      --
 790+ 6EB3              // change numeration base
 791+ 6EB3                              Colon_Def DECIMAL, "DECIMAL", is_normal
 791+ 6EB3             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 791+ 6EB3             >
 791+ 6EB3             >Dict_Ptr        defl    $
 791+ 6EB3             >
 791+ 6EB3             >//              ______________________________________________________________________
 791+ 6EB3             >//              Heap part
 791+ 6EB3             >
 791+ 6EB3             >
 791+ 6EB3             >                org     (Heap_Ptr & $1FFF) + $E000
 791+ E776             >
 791+ E776             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 791+ E776             >Latest_Definition defl  Heap_Ptr
 791+ E776             >
 791+ E776             >                // dummy db directives used to calculate length of namec
 791+ E776 44 45 43 49 >                db      "DECIMAL"
 791+ E77A 4D 41 4C    >
 791+ E77D             >len_NFA         defl    $ - temp_NFA
 791+ E77D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 791+ E776             >
 791+ E776 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 791+ E777 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 791+ E77B 4D 41 4C    >
 791+ E77E             >                org     $-1                 // alter last byte of Name just above to set
 791+ E77D CC          >                db      {b $} | END_BIT     // msb as name end
 791+ E77E             >
 791+ E77E 6E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 791+ E780             >Prev_Ptr        defl    Heap_Ptr
 791+ E780             >
 791+ E780             >mirror_Ptr      defl    $
 791+ E780             >
 791+ E780 B5 6E       >                dw      Dict_Ptr + 2        // xt
 791+ E782             >Heap_Ptr        defl    $ - $E000           // save current HP
 791+ E782             >
 791+ E782             >Current_HP      defl  $ - $E000             // used to set HP once!
 791+ E782             >
 791+ E782             >//              ______________________________________________________________________
 791+ E782             >//              Dictionary part
 791+ E782             >
 791+ E782             >                org     Dict_Ptr
 791+ 6EB3             >
 791+ 6EB3 80 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 791+ 6EB5             >
 791+ 6EB5             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 791+ 6EB5 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 791+ 6EB8             >
 791+ 6EB8             >
 791+ 6EB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 791+ 6EB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 791+ 6EB8             >
 791+ 6EB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 792+ 6EB8 A3 63 0A 00                  dw      LIT, 10                 // 10
 793+ 6EBC 56 6B 99 69                  dw      BASE, STORE             // base !
 794+ 6EC0 4F 68                        dw      EXIT                    // ;
 795+ 6EC2
 796+ 6EC2              //  ______________________________________________________________________
 797+ 6EC2              //
 798+ 6EC2              // (;code)       --
 799+ 6EC2              // patch to CFA to call/jump to the "following code"
 800+ 6EC2                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 800+ 6EC2             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 800+ 6EC2             >
 800+ 6EC2             >Dict_Ptr        defl    $
 800+ 6EC2             >
 800+ 6EC2             >//              ______________________________________________________________________
 800+ 6EC2             >//              Heap part
 800+ 6EC2             >
 800+ 6EC2             >
 800+ 6EC2             >                org     (Heap_Ptr & $1FFF) + $E000
 800+ E782             >
 800+ E782             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 800+ E782             >Latest_Definition defl  Heap_Ptr
 800+ E782             >
 800+ E782             >                // dummy db directives used to calculate length of namec
 800+ E782 28 3B 43 4F >                db      "(;CODE)"
 800+ E786 44 45 29    >
 800+ E789             >len_NFA         defl    $ - temp_NFA
 800+ E789             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 800+ E782             >
 800+ E782 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 800+ E783 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 800+ E787 44 45 29    >
 800+ E78A             >                org     $-1                 // alter last byte of Name just above to set
 800+ E789 A9          >                db      {b $} | END_BIT     // msb as name end
 800+ E78A             >
 800+ E78A 76 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 800+ E78C             >Prev_Ptr        defl    Heap_Ptr
 800+ E78C             >
 800+ E78C             >mirror_Ptr      defl    $
 800+ E78C             >
 800+ E78C C4 6E       >                dw      Dict_Ptr + 2        // xt
 800+ E78E             >Heap_Ptr        defl    $ - $E000           // save current HP
 800+ E78E             >
 800+ E78E             >Current_HP      defl  $ - $E000             // used to set HP once!
 800+ E78E             >
 800+ E78E             >//              ______________________________________________________________________
 800+ E78E             >//              Dictionary part
 800+ E78E             >
 800+ E78E             >                org     Dict_Ptr
 800+ 6EC2             >
 800+ 6EC2 8C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 800+ 6EC4             >
 800+ 6EC4             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 800+ 6EC4 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 800+ 6EC7             >
 800+ 6EC7             >
 800+ 6EC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 800+ 6EC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 800+ 6EC7             >
 800+ 6EC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 801+ 6EC7 64 68                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 802+ 6EC9 4E 6D                        dw      LATEST                  // latest   ( Word being defined in this moment )
 803+ 6ECB AC 6D 87 6D                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 804+ 6ECF
 805+ 6ECF A3 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 806+ 6ED3 01 69 AD 69                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 807+ 6ED7 BA 68                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 808+ 6ED9
 809+ 6ED9 99 69                        dw      STORE                   // !
 810+ 6EDB 4F 68                        dw      EXIT                    // ;
 811+ 6EDD
 812+ 6EDD              //  ______________________________________________________________________
 813+ 6EDD              //
 814+ 6EDD              // ;code        --
 815+ 6EDD                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 815+ 6EDD             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 815+ 6EDD             >
 815+ 6EDD             >Dict_Ptr        defl    $
 815+ 6EDD             >
 815+ 6EDD             >//              ______________________________________________________________________
 815+ 6EDD             >//              Heap part
 815+ 6EDD             >
 815+ 6EDD             >
 815+ 6EDD             >                org     (Heap_Ptr & $1FFF) + $E000
 815+ E78E             >
 815+ E78E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ E78E             >Latest_Definition defl  Heap_Ptr
 815+ E78E             >
 815+ E78E             >                // dummy db directives used to calculate length of namec
 815+ E78E 3B 43 4F 44 >                db      ";CODE"
 815+ E792 45          >
 815+ E793             >len_NFA         defl    $ - temp_NFA
 815+ E793             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ E78E             >
 815+ E78E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ E78F 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 815+ E793 45          >
 815+ E794             >                org     $-1                 // alter last byte of Name just above to set
 815+ E793 C5          >                db      {b $} | END_BIT     // msb as name end
 815+ E794             >
 815+ E794 82 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 815+ E796             >Prev_Ptr        defl    Heap_Ptr
 815+ E796             >
 815+ E796             >mirror_Ptr      defl    $
 815+ E796             >
 815+ E796 DF 6E       >                dw      Dict_Ptr + 2        // xt
 815+ E798             >Heap_Ptr        defl    $ - $E000           // save current HP
 815+ E798             >
 815+ E798             >Current_HP      defl  $ - $E000             // used to set HP once!
 815+ E798             >
 815+ E798             >//              ______________________________________________________________________
 815+ E798             >//              Dictionary part
 815+ E798             >
 815+ E798             >                org     Dict_Ptr
 815+ 6EDD             >
 815+ 6EDD 96 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 815+ 6EDF             >
 815+ 6EDF             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 6EDF CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 815+ 6EE2             >
 815+ 6EE2             >
 815+ 6EE2             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 6EE2             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 6EE2             >
 815+ 6EE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 6EE2 26 6E                        dw      QCSP                    // ?csp
 817+ 6EE4 4E 6E                        dw      COMPILE                 // compile
 818+ 6EE6 C4 6E                        dw      C_SEMICOLON_CODE        // (;code)
 819+ 6EE8 6C 6E                        dw      SQUARED_OPEN            // [
 820+ 6EEA 4C 6A                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 821+ 6EEC 4F 68                        dw      EXIT                    // ; immediate
 822+ 6EEE
 823+ 6EEE              //  ______________________________________________________________________
 824+ 6EEE              //
 825+ 6EEE              // <builds      --
 826+ 6EEE                              Colon_Def CBUILDS, "<BUILDS", is_normal
 826+ 6EEE             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 826+ 6EEE             >
 826+ 6EEE             >Dict_Ptr        defl    $
 826+ 6EEE             >
 826+ 6EEE             >//              ______________________________________________________________________
 826+ 6EEE             >//              Heap part
 826+ 6EEE             >
 826+ 6EEE             >
 826+ 6EEE             >                org     (Heap_Ptr & $1FFF) + $E000
 826+ E798             >
 826+ E798             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 826+ E798             >Latest_Definition defl  Heap_Ptr
 826+ E798             >
 826+ E798             >                // dummy db directives used to calculate length of namec
 826+ E798 3C 42 55 49 >                db      "<BUILDS"
 826+ E79C 4C 44 53    >
 826+ E79F             >len_NFA         defl    $ - temp_NFA
 826+ E79F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 826+ E798             >
 826+ E798 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 826+ E799 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 826+ E79D 4C 44 53    >
 826+ E7A0             >                org     $-1                 // alter last byte of Name just above to set
 826+ E79F D3          >                db      {b $} | END_BIT     // msb as name end
 826+ E7A0             >
 826+ E7A0 8E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 826+ E7A2             >Prev_Ptr        defl    Heap_Ptr
 826+ E7A2             >
 826+ E7A2             >mirror_Ptr      defl    $
 826+ E7A2             >
 826+ E7A2 F0 6E       >                dw      Dict_Ptr + 2        // xt
 826+ E7A4             >Heap_Ptr        defl    $ - $E000           // save current HP
 826+ E7A4             >
 826+ E7A4             >Current_HP      defl  $ - $E000             // used to set HP once!
 826+ E7A4             >
 826+ E7A4             >//              ______________________________________________________________________
 826+ E7A4             >//              Dictionary part
 826+ E7A4             >
 826+ E7A4             >                org     Dict_Ptr
 826+ 6EEE             >
 826+ 6EEE A2 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 826+ 6EF0             >
 826+ 6EF0             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 826+ 6EF0 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 826+ 6EF3             >
 826+ 6EF3             >
 826+ 6EF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 826+ 6EF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 826+ 6EF3             >
 826+ 6EF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 827+ 6EF3 85 6A                        dw      ZERO                    // 0
 828+ 6EF5 50 6A                        dw      CONSTANT                // constant
 829+ 6EF7 4F 68                        dw      EXIT                    // ;
 830+ 6EF9
 831+ 6EF9              //  ______________________________________________________________________
 832+ 6EF9              //
 833+ 6EF9              // recurse      --
 834+ 6EF9              //              Colon_Def RECURSE, "RECURSE", is_immediate
 835+ 6EF9              //              dw      QCOMP                   // ?comp
 836+ 6EF9              //              dw      LATEST                  // latest
 837+ 6EF9              //              dw      PFA, CFA                // pfa cfa
 838+ 6EF9              //              dw      COMMA                   // ,
 839+ 6EF9              //              dw      EXIT                    // ; immediate
 840+ 6EF9
 841+ 6EF9              //  ______________________________________________________________________
 842+ 6EF9              //
 843+ 6EF9              // does>     --
 844+ 6EF9                              Colon_Def DOES_TO, "DOES>", is_normal
 844+ 6EF9             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 844+ 6EF9             >
 844+ 6EF9             >Dict_Ptr        defl    $
 844+ 6EF9             >
 844+ 6EF9             >//              ______________________________________________________________________
 844+ 6EF9             >//              Heap part
 844+ 6EF9             >
 844+ 6EF9             >
 844+ 6EF9             >                org     (Heap_Ptr & $1FFF) + $E000
 844+ E7A4             >
 844+ E7A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 844+ E7A4             >Latest_Definition defl  Heap_Ptr
 844+ E7A4             >
 844+ E7A4             >                // dummy db directives used to calculate length of namec
 844+ E7A4 44 4F 45 53 >                db      "DOES>"
 844+ E7A8 3E          >
 844+ E7A9             >len_NFA         defl    $ - temp_NFA
 844+ E7A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 844+ E7A4             >
 844+ E7A4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 844+ E7A5 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 844+ E7A9 3E          >
 844+ E7AA             >                org     $-1                 // alter last byte of Name just above to set
 844+ E7A9 BE          >                db      {b $} | END_BIT     // msb as name end
 844+ E7AA             >
 844+ E7AA 98 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 844+ E7AC             >Prev_Ptr        defl    Heap_Ptr
 844+ E7AC             >
 844+ E7AC             >mirror_Ptr      defl    $
 844+ E7AC             >
 844+ E7AC FB 6E       >                dw      Dict_Ptr + 2        // xt
 844+ E7AE             >Heap_Ptr        defl    $ - $E000           // save current HP
 844+ E7AE             >
 844+ E7AE             >Current_HP      defl  $ - $E000             // used to set HP once!
 844+ E7AE             >
 844+ E7AE             >//              ______________________________________________________________________
 844+ E7AE             >//              Dictionary part
 844+ E7AE             >
 844+ E7AE             >                org     Dict_Ptr
 844+ 6EF9             >
 844+ 6EF9 AC 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 844+ 6EFB             >
 844+ 6EFB             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 844+ 6EFB CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 844+ 6EFE             >
 844+ 6EFE             >
 844+ 6EFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 844+ 6EFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 844+ 6EFE             >
 844+ 6EFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 845+ 6EFE 64 68                        dw      R_TO                    // r>
 846+ 6F00 4E 6D                        dw      LATEST                  // latest
 847+ 6F02 AC 6D                        dw      PFA                     // pfa
 848+ 6F04 99 69                        dw      STORE                   // !        \ old use of <BUILDS
 849+ 6F06              //              dw      COMMA                   // ,        \ new use of CREATE
 850+ 6F06 C4 6E                        dw      C_SEMICOLON_CODE        // ;code
 851+ 6F08              Does_Ptr:
 852+ 6F08                              // via call coded in CFA
 853+ 6F08 EB                           ex      de, hl //**
 854+ 6F09                              // *** ldhlrp
 855+ 6F09 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 856+ 6F0A 70                           ld      (hl), b
 857+ 6F0B 2B                           dec     hl
 858+ 6F0C 71                           ld      (hl), c
 859+ 6F0D                              // *** ldrphl
 860+ 6F0D EB                           ex      de, hl //**
 861+ 6F0E E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 862+ 6F0F
 863+ 6F0F 4E                           ld      c, (hl)
 864+ 6F10 23                           inc     hl
 865+ 6F11 46                           ld      b, (hl)
 866+ 6F12 23                           inc     hl
 867+ 6F13
 868+ 6F13                              psh1
 868+ 6F13 E5          >                push    hl
 868+ 6F14 DD E9       >                jp      (ix)
 869+ 6F16                              // SMUDGE !
 870+ 6F16
 871+ 6F16              //  ______________________________________________________________________
 872+ 6F16              //
 873+ 6F16              // count        a -- a2 n
 874+ 6F16              // expects a counted string at address a, returns string address and counter
 875+ 6F16                              New_Def COUNT, "COUNT", is_code, is_normal
 875+ 6F16             >
 875+ 6F16             >Dict_Ptr        defl    $
 875+ 6F16             >
 875+ 6F16             >//              ______________________________________________________________________
 875+ 6F16             >//              Heap part
 875+ 6F16             >
 875+ 6F16             >
 875+ 6F16             >                org     (Heap_Ptr & $1FFF) + $E000
 875+ E7AE             >
 875+ E7AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ E7AE             >Latest_Definition defl  Heap_Ptr
 875+ E7AE             >
 875+ E7AE             >                // dummy db directives used to calculate length of namec
 875+ E7AE 43 4F 55 4E >                db      "COUNT"
 875+ E7B2 54          >
 875+ E7B3             >len_NFA         defl    $ - temp_NFA
 875+ E7B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ E7AE             >
 875+ E7AE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ E7AF 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 875+ E7B3 54          >
 875+ E7B4             >                org     $-1                 // alter last byte of Name just above to set
 875+ E7B3 D4          >                db      {b $} | END_BIT     // msb as name end
 875+ E7B4             >
 875+ E7B4 A4 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 875+ E7B6             >Prev_Ptr        defl    Heap_Ptr
 875+ E7B6             >
 875+ E7B6             >mirror_Ptr      defl    $
 875+ E7B6             >
 875+ E7B6 18 6F       >                dw      Dict_Ptr + 2        // xt
 875+ E7B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 875+ E7B8             >
 875+ E7B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 875+ E7B8             >
 875+ E7B8             >//              ______________________________________________________________________
 875+ E7B8             >//              Dictionary part
 875+ E7B8             >
 875+ E7B8             >                org     Dict_Ptr
 875+ 6F16             >
 875+ 6F16 B6 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 875+ 6F18             >
 875+ 6F18             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 6F18 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 875+ 6F18 ~           >
 875+ 6F18 ~           >
 875+ 6F18             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 6F18             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 6F18             >
 875+ 6F18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 6F18 D9                           exx
 877+ 6F19 E1                           pop     hl
 878+ 6F1A 5E                           ld      e, (hl)
 879+ 6F1B 16 00                        ld      d, 0
 880+ 6F1D 23                           inc     hl
 881+ 6F1E              Count_Here:
 882+ 6F1E E5                           push    hl
 883+ 6F1F D5                           push    de
 884+ 6F20 D9                           exx
 885+ 6F21                              next
 885+ 6F21 DD E9       >                jp      (ix)
 886+ 6F23              //                pop     hl
 887+ 6F23              //                ld      a, (hl)
 888+ 6F23              //                inc     hl
 889+ 6F23              //                push    hl
 890+ 6F23              //                ld      h, 0
 891+ 6F23              //                ld      l, a
 892+ 6F23              //                push    hl
 893+ 6F23              //                next
 894+ 6F23
 895+ 6F23              //  ______________________________________________________________________
 896+ 6F23              //
 897+ 6F23              // bounds       a n -- a+n n
 898+ 6F23              // given an address and a length ( a n ) calculate the bound addresses
 899+ 6F23              // suitable for DO-LOOP
 900+ 6F23                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 900+ 6F23             >
 900+ 6F23             >Dict_Ptr        defl    $
 900+ 6F23             >
 900+ 6F23             >//              ______________________________________________________________________
 900+ 6F23             >//              Heap part
 900+ 6F23             >
 900+ 6F23             >
 900+ 6F23             >                org     (Heap_Ptr & $1FFF) + $E000
 900+ E7B8             >
 900+ E7B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 900+ E7B8             >Latest_Definition defl  Heap_Ptr
 900+ E7B8             >
 900+ E7B8             >                // dummy db directives used to calculate length of namec
 900+ E7B8 42 4F 55 4E >                db      "BOUNDS"
 900+ E7BC 44 53       >
 900+ E7BE             >len_NFA         defl    $ - temp_NFA
 900+ E7BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 900+ E7B8             >
 900+ E7B8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 900+ E7B9 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 900+ E7BD 44 53       >
 900+ E7BF             >                org     $-1                 // alter last byte of Name just above to set
 900+ E7BE D3          >                db      {b $} | END_BIT     // msb as name end
 900+ E7BF             >
 900+ E7BF AE 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 900+ E7C1             >Prev_Ptr        defl    Heap_Ptr
 900+ E7C1             >
 900+ E7C1             >mirror_Ptr      defl    $
 900+ E7C1             >
 900+ E7C1 25 6F       >                dw      Dict_Ptr + 2        // xt
 900+ E7C3             >Heap_Ptr        defl    $ - $E000           // save current HP
 900+ E7C3             >
 900+ E7C3             >Current_HP      defl  $ - $E000             // used to set HP once!
 900+ E7C3             >
 900+ E7C3             >//              ______________________________________________________________________
 900+ E7C3             >//              Dictionary part
 900+ E7C3             >
 900+ E7C3             >                org     Dict_Ptr
 900+ 6F23             >
 900+ 6F23 C1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 900+ 6F25             >
 900+ 6F25             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 900+ 6F25 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 900+ 6F25 ~           >
 900+ 6F25 ~           >
 900+ 6F25             >                endif           ; ok        // for other definitions it "points" the correct handler
 900+ 6F25             >                // Use of "; ok" to suppress "warning[fwdref]"
 900+ 6F25             >
 900+ 6F25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 901+ 6F25 D9                           exx
 902+ 6F26 E1                           pop     hl
 903+ 6F27 D1                           pop     de
 904+ 6F28 19                           add     hl, de
 905+ 6F29 18 F3                        jr      Count_Here
 906+ 6F2B                              // push    hl
 907+ 6F2B                              // push    de
 908+ 6F2B                              // exx
 909+ 6F2B                              // next
 910+ 6F2B
 911+ 6F2B              //  ______________________________________________________________________
 912+ 6F2B              //
 913+ 6F2B              // leave        --
 914+ 6F2B              // Compile (leave) to leave current LOOP and jump just after it
 915+ 6F2B                              Colon_Def LEAVE, "LEAVE", is_immediate
 915+ 6F2B             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 915+ 6F2B             >
 915+ 6F2B             >Dict_Ptr        defl    $
 915+ 6F2B             >
 915+ 6F2B             >//              ______________________________________________________________________
 915+ 6F2B             >//              Heap part
 915+ 6F2B             >
 915+ 6F2B             >
 915+ 6F2B             >                org     (Heap_Ptr & $1FFF) + $E000
 915+ E7C3             >
 915+ E7C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 915+ E7C3             >Latest_Definition defl  Heap_Ptr
 915+ E7C3             >
 915+ E7C3             >                // dummy db directives used to calculate length of namec
 915+ E7C3 4C 45 41 56 >                db      "LEAVE"
 915+ E7C7 45          >
 915+ E7C8             >len_NFA         defl    $ - temp_NFA
 915+ E7C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 915+ E7C3             >
 915+ E7C3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 915+ E7C4 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 915+ E7C8 45          >
 915+ E7C9             >                org     $-1                 // alter last byte of Name just above to set
 915+ E7C8 C5          >                db      {b $} | END_BIT     // msb as name end
 915+ E7C9             >
 915+ E7C9 B8 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 915+ E7CB             >Prev_Ptr        defl    Heap_Ptr
 915+ E7CB             >
 915+ E7CB             >mirror_Ptr      defl    $
 915+ E7CB             >
 915+ E7CB 2D 6F       >                dw      Dict_Ptr + 2        // xt
 915+ E7CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 915+ E7CD             >
 915+ E7CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 915+ E7CD             >
 915+ E7CD             >//              ______________________________________________________________________
 915+ E7CD             >//              Dictionary part
 915+ E7CD             >
 915+ E7CD             >                org     Dict_Ptr
 915+ 6F2B             >
 915+ 6F2B CB 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 915+ 6F2D             >
 915+ 6F2D             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 915+ 6F2D CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 915+ 6F30             >
 915+ 6F30             >
 915+ 6F30             >                endif           ; ok        // for other definitions it "points" the correct handler
 915+ 6F30             >                // Use of "; ok" to suppress "warning[fwdref]"
 915+ 6F30             >
 915+ 6F30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 916+ 6F30 4E 6E 00 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 917+ 6F34 AA 6B 59 68                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 917+ 6F38 85 6A C0 6B
 918+ 6F3C 85 6A 85 6A                  dw      ZERO, ZERO
 919+ 6F40 36 68 25 69                  dw      SPFETCH, DUP
 920+ 6F44 D0 68 D0 68                  dw      CELL_PLUS, CELL_PLUS
 921+ 6F48 15 69                        dw      TUCK
 922+ 6F4A 68 6B 8F 69                  dw      CSP, FETCH
 923+ 6F4E 1E 69 E9 6B                  dw      SWAP, SUBTRACT
 924+ 6F52 90 67                        dw      CMOVE
 925+ 6F54 68 6B 8F 69                  dw      CSP, FETCH, CELL_MINUS
 925+ 6F58 D4 68
 926+ 6F5A 64 68 01 69                  dw      R_TO, OVER, STORE
 926+ 6F5E 99 69
 927+ 6F60 D4 68 85 6A                  dw      CELL_MINUS, ZERO
 928+ 6F64 1E 69 99 69                  dw      SWAP, STORE
 929+ 6F68 4F 68                        dw      EXIT                    // ;
 930+ 6F6A
 931+ 6F6A              //  ______________________________________________________________________
 932+ 6F6A              //
 933+ 6F6A              // type         a n --
 934+ 6F6A              // Sends to current output channel n characters starting at address a.
 935+ 6F6A                              Colon_Def TYPE, "TYPE", is_normal
 935+ 6F6A             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 935+ 6F6A             >
 935+ 6F6A             >Dict_Ptr        defl    $
 935+ 6F6A             >
 935+ 6F6A             >//              ______________________________________________________________________
 935+ 6F6A             >//              Heap part
 935+ 6F6A             >
 935+ 6F6A             >
 935+ 6F6A             >                org     (Heap_Ptr & $1FFF) + $E000
 935+ E7CD             >
 935+ E7CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 935+ E7CD             >Latest_Definition defl  Heap_Ptr
 935+ E7CD             >
 935+ E7CD             >                // dummy db directives used to calculate length of namec
 935+ E7CD 54 59 50 45 >                db      "TYPE"
 935+ E7D1             >len_NFA         defl    $ - temp_NFA
 935+ E7D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 935+ E7CD             >
 935+ E7CD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 935+ E7CE 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 935+ E7D2             >                org     $-1                 // alter last byte of Name just above to set
 935+ E7D1 C5          >                db      {b $} | END_BIT     // msb as name end
 935+ E7D2             >
 935+ E7D2 C3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 935+ E7D4             >Prev_Ptr        defl    Heap_Ptr
 935+ E7D4             >
 935+ E7D4             >mirror_Ptr      defl    $
 935+ E7D4             >
 935+ E7D4 6C 6F       >                dw      Dict_Ptr + 2        // xt
 935+ E7D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 935+ E7D6             >
 935+ E7D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 935+ E7D6             >
 935+ E7D6             >//              ______________________________________________________________________
 935+ E7D6             >//              Dictionary part
 935+ E7D6             >
 935+ E7D6             >                org     Dict_Ptr
 935+ 6F6A             >
 935+ 6F6A D4 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 935+ 6F6C             >
 935+ 6F6C             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 935+ 6F6C CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 935+ 6F6F             >
 935+ 6F6F             >
 935+ 6F6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 935+ 6F6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 935+ 6F6F             >
 935+ 6F6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 936+ 6F6F 25 6F                        dw      BOUNDS                  // bounds
 937+ 6F71 0A 64                        dw      C_Q_DO                  // ?do
 938+ 6F73 0C 00                        dw      Type_Skip - $
 939+ 6F75              Type_Loop:
 940+ 6F75 38 64 A4 69                  dw          I, CFETCH           //      i c@
 941+ 6F79 5C 6C                        dw          EMIT                //      emit
 942+ 6F7B E0 63                        dw      C_LOOP                  // loop
 943+ 6F7D F8 FF                        dw      Type_Loop - $
 944+ 6F7F              Type_Skip:
 945+ 6F7F 4F 68                        dw      EXIT                    // ;
 946+ 6F81
 947+ 6F81              //  ______________________________________________________________________
 948+ 6F81              //
 949+ 6F81              // -trailing    a n1 -- a n2
 950+ 6F81              // Assumes that an n1 bytes-long string is stored at address a
 951+ 6F81              // and the string contains a space delimited word,
 952+ 6F81              // Finds n2 as the position of the first character after the word.
 953+ 6F81                              Colon_Def LTRAILING, "-TRAILING", is_normal
 953+ 6F81             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 953+ 6F81             >
 953+ 6F81             >Dict_Ptr        defl    $
 953+ 6F81             >
 953+ 6F81             >//              ______________________________________________________________________
 953+ 6F81             >//              Heap part
 953+ 6F81             >
 953+ 6F81             >
 953+ 6F81             >                org     (Heap_Ptr & $1FFF) + $E000
 953+ E7D6             >
 953+ E7D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 953+ E7D6             >Latest_Definition defl  Heap_Ptr
 953+ E7D6             >
 953+ E7D6             >                // dummy db directives used to calculate length of namec
 953+ E7D6 2D 54 52 41 >                db      "-TRAILING"
 953+ E7DA 49 4C 49 4E >
 953+ E7DE 47          >
 953+ E7DF             >len_NFA         defl    $ - temp_NFA
 953+ E7DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 953+ E7D6             >
 953+ E7D6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 953+ E7D7 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 953+ E7DB 49 4C 49 4E >
 953+ E7DF 47          >
 953+ E7E0             >                org     $-1                 // alter last byte of Name just above to set
 953+ E7DF C7          >                db      {b $} | END_BIT     // msb as name end
 953+ E7E0             >
 953+ E7E0 CD 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 953+ E7E2             >Prev_Ptr        defl    Heap_Ptr
 953+ E7E2             >
 953+ E7E2             >mirror_Ptr      defl    $
 953+ E7E2             >
 953+ E7E2 83 6F       >                dw      Dict_Ptr + 2        // xt
 953+ E7E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 953+ E7E4             >
 953+ E7E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 953+ E7E4             >
 953+ E7E4             >//              ______________________________________________________________________
 953+ E7E4             >//              Dictionary part
 953+ E7E4             >
 953+ E7E4             >                org     Dict_Ptr
 953+ 6F81             >
 953+ 6F81 E2 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 953+ 6F83             >
 953+ 6F83             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 953+ 6F83 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 953+ 6F86             >
 953+ 6F86             >
 953+ 6F86             >                endif           ; ok        // for other definitions it "points" the correct handler
 953+ 6F86             >                // Use of "; ok" to suppress "warning[fwdref]"
 953+ 6F86             >
 953+ 6F86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 954+ 6F86 25 69 85 6A                  dw      DUP, ZERO               // dup 0
 955+ 6F8A                                                              // do
 956+ 6F8A 0A 64                        dw      C_Q_DO
 957+ 6F8C 20 00                        dw      LTrailing_Leave - $
 958+ 6F8E              LTrailing_Loop:
 959+ 6F8E 6D 69 A1 68                  dw          TWO_DUP, PLUS       //      2dup +
 960+ 6F92 C1 68                        dw          ONE_SUBTRACT        //      1-
 961+ 6F94 A4 69                        dw          CFETCH              //      c@
 962+ 6F96 A8 6A E9 6B                  dw          BL, SUBTRACT        //      bl -
 963+ 6F9A                                                              //      if
 964+ 6F9A F5 63                        dw          ZBRANCH
 965+ 6F9C 0A 00                        dw          LTrailing_Else - $
 966+ 6F9E 00 64                        dw              C_LEAVE         //          leave
 967+ 6FA0 0C 00                        dw              LTrailing_Leave - $
 968+ 6FA2 E8 63                        dw          BRANCH              //      else
 969+ 6FA4 04 00                        dw          LTrailing_Endif - $
 970+ 6FA6              LTrailing_Else:
 971+ 6FA6 C1 68                        dw              ONE_SUBTRACT    //          1-
 972+ 6FA8              LTrailing_Endif:                                //      endif
 973+ 6FA8                                                              // loop
 974+ 6FA8 E0 63                        dw      C_LOOP
 975+ 6FAA E4 FF                        dw      LTrailing_Loop - $
 976+ 6FAC              LTrailing_Leave:
 977+ 6FAC 4F 68                        dw      EXIT                    // ;
 978+ 6FAE
 979+ 6FAE              //  ______________________________________________________________________
 980+ 6FAE              //
 981+ 6FAE              // accept       a n1 -- n2
 982+ 6FAE              // Accepts at most n1 characters from terminal and stores them at address a
 983+ 6FAE              // CR stops input. A 'nul' is added as trailer.
 984+ 6FAE              // n2 is the string length. n2 is kept in span user variable also.
 985+ 6FAE                              Colon_Def ACCEPT, "ACCEPT", is_normal
 985+ 6FAE             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 985+ 6FAE             >
 985+ 6FAE             >Dict_Ptr        defl    $
 985+ 6FAE             >
 985+ 6FAE             >//              ______________________________________________________________________
 985+ 6FAE             >//              Heap part
 985+ 6FAE             >
 985+ 6FAE             >
 985+ 6FAE             >                org     (Heap_Ptr & $1FFF) + $E000
 985+ E7E4             >
 985+ E7E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 985+ E7E4             >Latest_Definition defl  Heap_Ptr
 985+ E7E4             >
 985+ E7E4             >                // dummy db directives used to calculate length of namec
 985+ E7E4 41 43 43 45 >                db      "ACCEPT"
 985+ E7E8 50 54       >
 985+ E7EA             >len_NFA         defl    $ - temp_NFA
 985+ E7EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 985+ E7E4             >
 985+ E7E4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 985+ E7E5 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 985+ E7E9 50 54       >
 985+ E7EB             >                org     $-1                 // alter last byte of Name just above to set
 985+ E7EA D4          >                db      {b $} | END_BIT     // msb as name end
 985+ E7EB             >
 985+ E7EB D6 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 985+ E7ED             >Prev_Ptr        defl    Heap_Ptr
 985+ E7ED             >
 985+ E7ED             >mirror_Ptr      defl    $
 985+ E7ED             >
 985+ E7ED B0 6F       >                dw      Dict_Ptr + 2        // xt
 985+ E7EF             >Heap_Ptr        defl    $ - $E000           // save current HP
 985+ E7EF             >
 985+ E7EF             >Current_HP      defl  $ - $E000             // used to set HP once!
 985+ E7EF             >
 985+ E7EF             >//              ______________________________________________________________________
 985+ E7EF             >//              Dictionary part
 985+ E7EF             >
 985+ E7EF             >                org     Dict_Ptr
 985+ 6FAE             >
 985+ 6FAE ED 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 985+ 6FB0             >
 985+ 6FB0             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 985+ 6FB0 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 985+ 6FB3             >
 985+ 6FB3             >
 985+ 6FB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 985+ 6FB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 985+ 6FB3             >
 985+ 6FB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 986+ 6FB3 01 69 A1 68                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 986+ 6FB7 01 69
 987+ 6FB9 85 6A 35 69                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 988+ 6FBD                                                              // do
 989+ 6FBD 0A 64                        dw      C_Q_DO
 990+ 6FBF 8C 00                        dw      Accept_Leave - $
 991+ 6FC1              Accept_Loop:
 992+ 6FC1 2F 66                        dw          CUR
 993+ 6FC3 0A 69 77 66                  dw          DROP, KEY           //      drop key        ( a  c )
 994+ 6FC7 25 69                        dw          DUP                 //      dup             ( a  c  c )
 995+ 6FC9 A3 63 0E 00                  dw          LIT, $0E            //      0E
 996+ 6FCD CB 6A                        dw          PLUS_ORIGIN         //      +origin
 997+ 6FCF 8F 69                        dw          FETCH               //      @               ( a  c  c  del )
 998+ 6FD1 F5 6B                        dw          EQUALS              //      =               ( a  c  c==del )
 999+ 6FD3                                                              //      if
1000+ 6FD3 F5 63                        dw          ZBRANCH
1001+ 6FD5 2C 00                        dw          Accept_Else_0 - $
1002+ 6FD7 0A 69                        dw              DROP            //          drop        ( a  )
1003+ 6FD9 25 69 38 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
1003+ 6FDD F5 6B
1004+ 6FDF 8C 6A 0F 68                  dw              ONE, AND_OP     //          1 and
1005+ 6FE3 25 69                        dw              DUP             //          dup         ( a  a==i  a==i )
1006+ 6FE5 64 68                        dw              R_TO            //          r> 2 - + r>
1007+ 6FE7 DC 68 A1 68                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1008+ 6FEB 59 68                        dw              TO_R            //
1009+ 6FED                                                              //          if
1010+ 6FED F5 63                        dw              ZBRANCH
1011+ 6FEF 0A 00                        dw              Accept_Else_1 - $
1012+ 6FF1 A3 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1013+ 6FF5                                                              //          else
1014+ 6FF5 E8 63                        dw              BRANCH
1015+ 6FF7 06 00                        dw              Accept_Endif_1 - $
1016+ 6FF9              Accept_Else_1:
1017+ 6FF9 A3 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1018+ 6FFD              Accept_Endif_1:                                 //          endif
1019+ 6FFD E8 63                        dw          BRANCH
1020+ 6FFF 2E 00                        dw          Accept_Endif_0 - $
1021+ 7001              Accept_Else_0:                                  //      else
1022+ 7001 25 69                        dw              DUP             //          dup         ( a  c  c )
1023+ 7003 A3 63 0D 00                  dw              LIT, 13         //          13
1024+ 7007 F5 6B                        dw              EQUALS          //          =           ( a  c  c==CR )
1025+ 7009                                                              //          if
1026+ 7009 F5 63                        dw              ZBRANCH
1027+ 700B 0C 00                        dw              Accept_Else_2 - $
1028+ 700D 0A 69 A8 6A                  dw                  DROP, BL    //              drop bl ( a  bl )
1029+ 7011 85 6A                        dw                  ZERO        //              0       ( a  c  0 )
1030+ 7013                                                              //          else
1031+ 7013 E8 63                        dw              BRANCH
1032+ 7015 04 00                        dw              Accept_Endif_2 - $
1033+ 7017              Accept_Else_2:
1034+ 7017 25 69                        dw                  DUP         //              dup     ( a  c  c )
1035+ 7019                                                              //          endif
1036+ 7019              Accept_Endif_2:
1037+ 7019 38 64 AD 69                  dw              I, CSTORE       //          i           ( a  c )
1038+ 701D 25 69 A8 6A                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1038+ 7021 0E 6C
1039+ 7023                                                              //          if
1040+ 7023 F5 63                        dw              ZBRANCH
1041+ 7025 08 00                        dw              Accept_Endif_3 - $
1042+ 7027 64 68                        dw                  R_TO        //              r>
1043+ 7029 C1 68                        dw                  ONE_SUBTRACT//              1-
1044+ 702B 59 68                        dw                  TO_R        //              >r
1045+ 702D                                                              //          endif
1046+ 702D              Accept_Endif_3:
1047+ 702D              Accept_Endif_0:                                 //      endif
1048+ 702D 5C 6C                        dw          EMIT                //      emit
1049+ 702F
1050+ 702F 85 6A 38 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1050+ 7033 BA 68
1051+ 7035 99 69                        dw          STORE               //          ( zero pad )
1052+ 7037 38 64                        dw          I                   //      i
1053+ 7039 38 64 A4 69                  dw          I, CFETCH, ZEQUAL   //      i 0= if
1053+ 703D 74 68
1054+ 703F F5 63                        dw          ZBRANCH             //
1055+ 7041 06 00                        dw              Accept_Endif_4 - $
1056+ 7043 00 64                        dw                  C_LEAVE     //              leave
1057+ 7045 06 00                        dw                  Accept_Leave - $
1058+ 7047              Accept_Endif_4:                                 //      endif
1059+ 7047                                                              // loop
1060+ 7047 E0 63                        dw      C_LOOP
1061+ 7049 78 FF                        dw      Accept_Loop - $
1062+ 704B              Accept_Leave:
1063+ 704B 1E 69 E9 6B                  dw      SWAP, SUBTRACT          // swap -
1064+ 704F BA 68                        dw      ONE_PLUS                // 1+
1065+ 7051 25 69 98 6B                  dw      DUP, SPAN, STORE        // dup span !
1065+ 7055 99 69
1066+ 7057 4F 68                        dw      EXIT                    // ;
1067+ 7059
1068+ 7059              //  ______________________________________________________________________
1069+ 7059              //
1070+ 7059              // expect      a n --
1071+ 7059              // Accepts at most n1 characters from terminal and stores them at address a
1072+ 7059              // CR stops input. A 'nul' is added as trailer.
1073+ 7059              // n2 is the string length. n2 is kept in span user variable also.
1074+ 7059              //              Colon_Def EXPECT, "EXPECT", is_normal
1075+ 7059              //              dw      ACCEPT, DROP            // accept drop
1076+ 7059              //              dw      EXIT                    // ;
1077+ 7059
1078+ 7059              //  ______________________________________________________________________
1079+ 7059              //
1080+ 7059              // query        --
1081+ 7059              // Accept at most 80 character from console. CR stops.
1082+ 7059              // Text is stored in TIB. Variable IN is zeroed.
1083+ 7059                              Colon_Def QUERY, "QUERY", is_normal
1083+ 7059             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1083+ 7059             >
1083+ 7059             >Dict_Ptr        defl    $
1083+ 7059             >
1083+ 7059             >//              ______________________________________________________________________
1083+ 7059             >//              Heap part
1083+ 7059             >
1083+ 7059             >
1083+ 7059             >                org     (Heap_Ptr & $1FFF) + $E000
1083+ E7EF             >
1083+ E7EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ E7EF             >Latest_Definition defl  Heap_Ptr
1083+ E7EF             >
1083+ E7EF             >                // dummy db directives used to calculate length of namec
1083+ E7EF 51 55 45 52 >                db      "QUERY"
1083+ E7F3 59          >
1083+ E7F4             >len_NFA         defl    $ - temp_NFA
1083+ E7F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ E7EF             >
1083+ E7EF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ E7F0 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1083+ E7F4 59          >
1083+ E7F5             >                org     $-1                 // alter last byte of Name just above to set
1083+ E7F4 D9          >                db      {b $} | END_BIT     // msb as name end
1083+ E7F5             >
1083+ E7F5 E4 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1083+ E7F7             >Prev_Ptr        defl    Heap_Ptr
1083+ E7F7             >
1083+ E7F7             >mirror_Ptr      defl    $
1083+ E7F7             >
1083+ E7F7 5B 70       >                dw      Dict_Ptr + 2        // xt
1083+ E7F9             >Heap_Ptr        defl    $ - $E000           // save current HP
1083+ E7F9             >
1083+ E7F9             >Current_HP      defl  $ - $E000             // used to set HP once!
1083+ E7F9             >
1083+ E7F9             >//              ______________________________________________________________________
1083+ E7F9             >//              Dictionary part
1083+ E7F9             >
1083+ E7F9             >                org     Dict_Ptr
1083+ 7059             >
1083+ 7059 F7 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1083+ 705B             >
1083+ 705B             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 705B CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1083+ 705E             >
1083+ 705E             >
1083+ 705E             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 705E             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 705E             >
1083+ 705E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 705E EA 6A 8F 69                  dw      TIB, FETCH              // tib @
1085+ 7062 A3 63 50 00                  dw      LIT, 80                 // 80
1086+ 7066 B0 6F 0A 69                  dw      ACCEPT, DROP            // accept drop
1087+ 706A 85 6A 2C 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
1087+ 706E 99 69
1088+ 7070 4F 68                        dw      EXIT                    // ;
1089+ 7072
1090+ 7072              //  ______________________________________________________________________
1091+ 7072              //
1092+ 7072              // fill        a n c --
1093+ 7072              // If n > 0, fills n locations starting from address a with the value c.
1094+ 7072                              New_Def FILL, "FILL", is_code, is_normal
1094+ 7072             >
1094+ 7072             >Dict_Ptr        defl    $
1094+ 7072             >
1094+ 7072             >//              ______________________________________________________________________
1094+ 7072             >//              Heap part
1094+ 7072             >
1094+ 7072             >
1094+ 7072             >                org     (Heap_Ptr & $1FFF) + $E000
1094+ E7F9             >
1094+ E7F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1094+ E7F9             >Latest_Definition defl  Heap_Ptr
1094+ E7F9             >
1094+ E7F9             >                // dummy db directives used to calculate length of namec
1094+ E7F9 46 49 4C 4C >                db      "FILL"
1094+ E7FD             >len_NFA         defl    $ - temp_NFA
1094+ E7FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1094+ E7F9             >
1094+ E7F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1094+ E7FA 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1094+ E7FE             >                org     $-1                 // alter last byte of Name just above to set
1094+ E7FD CC          >                db      {b $} | END_BIT     // msb as name end
1094+ E7FE             >
1094+ E7FE EF 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1094+ E800             >Prev_Ptr        defl    Heap_Ptr
1094+ E800             >
1094+ E800             >mirror_Ptr      defl    $
1094+ E800             >
1094+ E800 74 70       >                dw      Dict_Ptr + 2        // xt
1094+ E802             >Heap_Ptr        defl    $ - $E000           // save current HP
1094+ E802             >
1094+ E802             >Current_HP      defl  $ - $E000             // used to set HP once!
1094+ E802             >
1094+ E802             >//              ______________________________________________________________________
1094+ E802             >//              Dictionary part
1094+ E802             >
1094+ E802             >                org     Dict_Ptr
1094+ 7072             >
1094+ 7072 00 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1094+ 7074             >
1094+ 7074             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1094+ 7074 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1094+ 7074 ~           >
1094+ 7074 ~           >
1094+ 7074             >                endif           ; ok        // for other definitions it "points" the correct handler
1094+ 7074             >                // Use of "; ok" to suppress "warning[fwdref]"
1094+ 7074             >
1094+ 7074             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1095+ 7074 D9                           exx
1096+ 7075 D1                           pop     de                  // de has character
1097+ 7076 C1                           pop     bc                  // bc has counter
1098+ 7077 E1                           pop     hl                  // hl has address, save Instruction Pointer
1099+ 7078              Fill_Loop:
1100+ 7078 78                               ld      a, b
1101+ 7079 B1                               or      c
1102+ 707A 28 05                        jr      z, Fill_While_End
1103+ 707C 73                               ld      (hl), e
1104+ 707D 0B                               dec     bc
1105+ 707E 23                               inc     hl
1106+ 707F 18 F7                        jr      Fill_Loop
1107+ 7081              Fill_While_End:
1108+ 7081 D9                           exx
1109+ 7082                              next
1109+ 7082 DD E9       >                jp      (ix)
1110+ 7084
1111+ 7084              //  ______________________________________________________________________
1112+ 7084              //
1113+ 7084              // erase        a n --
1114+ 7084              // If n > 0, fills n locations starting from address a with 'nul' characters.
1115+ 7084                              Colon_Def ERASE, "ERASE", is_normal
1115+ 7084             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1115+ 7084             >
1115+ 7084             >Dict_Ptr        defl    $
1115+ 7084             >
1115+ 7084             >//              ______________________________________________________________________
1115+ 7084             >//              Heap part
1115+ 7084             >
1115+ 7084             >
1115+ 7084             >                org     (Heap_Ptr & $1FFF) + $E000
1115+ E802             >
1115+ E802             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1115+ E802             >Latest_Definition defl  Heap_Ptr
1115+ E802             >
1115+ E802             >                // dummy db directives used to calculate length of namec
1115+ E802 45 52 41 53 >                db      "ERASE"
1115+ E806 45          >
1115+ E807             >len_NFA         defl    $ - temp_NFA
1115+ E807             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1115+ E802             >
1115+ E802 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1115+ E803 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1115+ E807 45          >
1115+ E808             >                org     $-1                 // alter last byte of Name just above to set
1115+ E807 C5          >                db      {b $} | END_BIT     // msb as name end
1115+ E808             >
1115+ E808 F9 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1115+ E80A             >Prev_Ptr        defl    Heap_Ptr
1115+ E80A             >
1115+ E80A             >mirror_Ptr      defl    $
1115+ E80A             >
1115+ E80A 86 70       >                dw      Dict_Ptr + 2        // xt
1115+ E80C             >Heap_Ptr        defl    $ - $E000           // save current HP
1115+ E80C             >
1115+ E80C             >Current_HP      defl  $ - $E000             // used to set HP once!
1115+ E80C             >
1115+ E80C             >//              ______________________________________________________________________
1115+ E80C             >//              Dictionary part
1115+ E80C             >
1115+ E80C             >                org     Dict_Ptr
1115+ 7084             >
1115+ 7084 0A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1115+ 7086             >
1115+ 7086             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1115+ 7086 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1115+ 7089             >
1115+ 7089             >
1115+ 7089             >                endif           ; ok        // for other definitions it "points" the correct handler
1115+ 7089             >                // Use of "; ok" to suppress "warning[fwdref]"
1115+ 7089             >
1115+ 7089             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1116+ 7089 85 6A 74 70                  dw      ZERO, FILL              // 0 fill
1117+ 708D 4F 68                        dw      EXIT                    // ;
1118+ 708F
1119+ 708F              //  ______________________________________________________________________
1120+ 708F              //
1121+ 708F              // blank        a n --
1122+ 708F              // If n > 0, fills n locations starting from address a with 'nul' characters.
1123+ 708F                              Colon_Def BLANK, "BLANK", is_normal
1123+ 708F             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1123+ 708F             >
1123+ 708F             >Dict_Ptr        defl    $
1123+ 708F             >
1123+ 708F             >//              ______________________________________________________________________
1123+ 708F             >//              Heap part
1123+ 708F             >
1123+ 708F             >
1123+ 708F             >                org     (Heap_Ptr & $1FFF) + $E000
1123+ E80C             >
1123+ E80C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1123+ E80C             >Latest_Definition defl  Heap_Ptr
1123+ E80C             >
1123+ E80C             >                // dummy db directives used to calculate length of namec
1123+ E80C 42 4C 41 4E >                db      "BLANK"
1123+ E810 4B          >
1123+ E811             >len_NFA         defl    $ - temp_NFA
1123+ E811             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1123+ E80C             >
1123+ E80C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1123+ E80D 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1123+ E811 4B          >
1123+ E812             >                org     $-1                 // alter last byte of Name just above to set
1123+ E811 CB          >                db      {b $} | END_BIT     // msb as name end
1123+ E812             >
1123+ E812 02 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1123+ E814             >Prev_Ptr        defl    Heap_Ptr
1123+ E814             >
1123+ E814             >mirror_Ptr      defl    $
1123+ E814             >
1123+ E814 91 70       >                dw      Dict_Ptr + 2        // xt
1123+ E816             >Heap_Ptr        defl    $ - $E000           // save current HP
1123+ E816             >
1123+ E816             >Current_HP      defl  $ - $E000             // used to set HP once!
1123+ E816             >
1123+ E816             >//              ______________________________________________________________________
1123+ E816             >//              Dictionary part
1123+ E816             >
1123+ E816             >                org     Dict_Ptr
1123+ 708F             >
1123+ 708F 14 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1123+ 7091             >
1123+ 7091             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1123+ 7091 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1123+ 7094             >
1123+ 7094             >
1123+ 7094             >                endif           ; ok        // for other definitions it "points" the correct handler
1123+ 7094             >                // Use of "; ok" to suppress "warning[fwdref]"
1123+ 7094             >
1123+ 7094             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1124+ 7094 A8 6A 74 70                  dw      BL, FILL                // bl fill
1125+ 7098 4F 68                        dw      EXIT                    // ;
1126+ 709A
1127+ 709A              //  ______________________________________________________________________
1128+ 709A              //
1129+ 709A              // hold         c --
1130+ 709A              // Used between <# and #> to insert a character c in numeric formatting.
1131+ 709A                              Colon_Def HOLD, "HOLD", is_normal
1131+ 709A             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1131+ 709A             >
1131+ 709A             >Dict_Ptr        defl    $
1131+ 709A             >
1131+ 709A             >//              ______________________________________________________________________
1131+ 709A             >//              Heap part
1131+ 709A             >
1131+ 709A             >
1131+ 709A             >                org     (Heap_Ptr & $1FFF) + $E000
1131+ E816             >
1131+ E816             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1131+ E816             >Latest_Definition defl  Heap_Ptr
1131+ E816             >
1131+ E816             >                // dummy db directives used to calculate length of namec
1131+ E816 48 4F 4C 44 >                db      "HOLD"
1131+ E81A             >len_NFA         defl    $ - temp_NFA
1131+ E81A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1131+ E816             >
1131+ E816 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1131+ E817 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1131+ E81B             >                org     $-1                 // alter last byte of Name just above to set
1131+ E81A C4          >                db      {b $} | END_BIT     // msb as name end
1131+ E81B             >
1131+ E81B 0C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1131+ E81D             >Prev_Ptr        defl    Heap_Ptr
1131+ E81D             >
1131+ E81D             >mirror_Ptr      defl    $
1131+ E81D             >
1131+ E81D 9C 70       >                dw      Dict_Ptr + 2        // xt
1131+ E81F             >Heap_Ptr        defl    $ - $E000           // save current HP
1131+ E81F             >
1131+ E81F             >Current_HP      defl  $ - $E000             // used to set HP once!
1131+ E81F             >
1131+ E81F             >//              ______________________________________________________________________
1131+ E81F             >//              Dictionary part
1131+ E81F             >
1131+ E81F             >                org     Dict_Ptr
1131+ 709A             >
1131+ 709A 1D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1131+ 709C             >
1131+ 709C             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1131+ 709C CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1131+ 709F             >
1131+ 709F             >
1131+ 709F             >                endif           ; ok        // for other definitions it "points" the correct handler
1131+ 709F             >                // Use of "; ok" to suppress "warning[fwdref]"
1131+ 709F             >
1131+ 709F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1132+ 709F A1 6A                        dw      NEG_ONE                 // -1
1133+ 70A1 74 6B 77 69                  dw      HLD, PLUSSTORE          // hld +!
1134+ 70A5 74 6B 8F 69                  dw      HLD, FETCH, CSTORE      // hld @ c!
1134+ 70A9 AD 69
1135+ 70AB 4F 68                        dw      EXIT                    // ;
1136+ 70AD
1137+ 70AD              //  ______________________________________________________________________
1138+ 70AD              //
1139+ 70AD              // pad         -- a
1140+ 70AD              // leaves the buffer text address. This is at a fixed distance over HERE.
1141+ 70AD                              Colon_Def PAD, "PAD", is_normal
1141+ 70AD             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1141+ 70AD             >
1141+ 70AD             >Dict_Ptr        defl    $
1141+ 70AD             >
1141+ 70AD             >//              ______________________________________________________________________
1141+ 70AD             >//              Heap part
1141+ 70AD             >
1141+ 70AD             >
1141+ 70AD             >                org     (Heap_Ptr & $1FFF) + $E000
1141+ E81F             >
1141+ E81F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1141+ E81F             >Latest_Definition defl  Heap_Ptr
1141+ E81F             >
1141+ E81F             >                // dummy db directives used to calculate length of namec
1141+ E81F 50 41 44    >                db      "PAD"
1141+ E822             >len_NFA         defl    $ - temp_NFA
1141+ E822             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1141+ E81F             >
1141+ E81F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1141+ E820 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1141+ E823             >                org     $-1                 // alter last byte of Name just above to set
1141+ E822 C4          >                db      {b $} | END_BIT     // msb as name end
1141+ E823             >
1141+ E823 16 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1141+ E825             >Prev_Ptr        defl    Heap_Ptr
1141+ E825             >
1141+ E825             >mirror_Ptr      defl    $
1141+ E825             >
1141+ E825 AF 70       >                dw      Dict_Ptr + 2        // xt
1141+ E827             >Heap_Ptr        defl    $ - $E000           // save current HP
1141+ E827             >
1141+ E827             >Current_HP      defl  $ - $E000             // used to set HP once!
1141+ E827             >
1141+ E827             >//              ______________________________________________________________________
1141+ E827             >//              Dictionary part
1141+ E827             >
1141+ E827             >                org     Dict_Ptr
1141+ 70AD             >
1141+ 70AD 25 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1141+ 70AF             >
1141+ 70AF             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1141+ 70AF CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1141+ 70B2             >
1141+ 70B2             >
1141+ 70B2             >                endif           ; ok        // for other definitions it "points" the correct handler
1141+ 70B2             >                // Use of "; ok" to suppress "warning[fwdref]"
1141+ 70B2             >
1141+ 70B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1142+ 70B2 AA 6B                        dw      HERE                    // here
1143+ 70B4 A3 63 44 00                  dw      LIT, 68                 // 68
1144+ 70B8 A1 68                        dw      PLUS                    // +
1145+ 70BA 4F 68                        dw      EXIT                    // ;
1146+ 70BC
1147+ 70BC              //  ______________________________________________________________________
1148+ 70BC              //
1149+ 70BC              // word         c -- a
1150+ 70BC              // reads characters from input streams until it encouners a c delimiter.
1151+ 70BC              // Stores that packet so it starts from HERE
1152+ 70BC              // WORD leaves a counter as first byte and ends the packet with two spaces.
1153+ 70BC              // Other occurrences of c are ignored.
1154+ 70BC              // If BLK is zero, text is taken from terminal buffer TIB.
1155+ 70BC              // Otherwise text is taken from the disk-block given by BLK.
1156+ 70BC              // "in" variable is incremented of the number of character read.
1157+ 70BC              // The number of characters read is given by ENCLOSE.
1158+ 70BC                              Colon_Def WORD, "WORD", is_normal
1158+ 70BC             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1158+ 70BC             >
1158+ 70BC             >Dict_Ptr        defl    $
1158+ 70BC             >
1158+ 70BC             >//              ______________________________________________________________________
1158+ 70BC             >//              Heap part
1158+ 70BC             >
1158+ 70BC             >
1158+ 70BC             >                org     (Heap_Ptr & $1FFF) + $E000
1158+ E827             >
1158+ E827             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1158+ E827             >Latest_Definition defl  Heap_Ptr
1158+ E827             >
1158+ E827             >                // dummy db directives used to calculate length of namec
1158+ E827 57 4F 52 44 >                db      "WORD"
1158+ E82B             >len_NFA         defl    $ - temp_NFA
1158+ E82B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1158+ E827             >
1158+ E827 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1158+ E828 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1158+ E82C             >                org     $-1                 // alter last byte of Name just above to set
1158+ E82B C4          >                db      {b $} | END_BIT     // msb as name end
1158+ E82C             >
1158+ E82C 1F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1158+ E82E             >Prev_Ptr        defl    Heap_Ptr
1158+ E82E             >
1158+ E82E             >mirror_Ptr      defl    $
1158+ E82E             >
1158+ E82E BE 70       >                dw      Dict_Ptr + 2        // xt
1158+ E830             >Heap_Ptr        defl    $ - $E000           // save current HP
1158+ E830             >
1158+ E830             >Current_HP      defl  $ - $E000             // used to set HP once!
1158+ E830             >
1158+ E830             >//              ______________________________________________________________________
1158+ E830             >//              Dictionary part
1158+ E830             >
1158+ E830             >                org     Dict_Ptr
1158+ 70BC             >
1158+ 70BC 2E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1158+ 70BE             >
1158+ 70BE             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1158+ 70BE CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1158+ 70C1             >
1158+ 70C1             >
1158+ 70C1             >                endif           ; ok        // for other definitions it "points" the correct handler
1158+ 70C1             >                // Use of "; ok" to suppress "warning[fwdref]"
1158+ 70C1             >
1158+ 70C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1159+ 70C1 26 6B 8F 69                  dw      BLK, FETCH              // blk @
1160+ 70C5                                                              // if
1161+ 70C5 F5 63                        dw      ZBRANCH
1162+ 70C7 0C 00                        dw      Word_Else - $
1163+ 70C9 26 6B 8F 69                  dw          BLK, FETCH          //      blk @
1164+ 70CD 71 79                        dw          BLOCK               //      block ( forward )
1165+ 70CF                                                              // else
1166+ 70CF E8 63                        dw      BRANCH
1167+ 70D1 06 00                        dw      Word_Endif - $
1168+ 70D3              Word_Else:
1169+ 70D3 EA 6A 8F 69                  dw         TIB, FETCH           //      tib @
1170+ 70D7              Word_Endif:                                     // endif
1171+ 70D7 2C 6B 8F 69                  dw      TO_IN, FETCH, PLUS      // >in @ +
1171+ 70DB A1 68
1172+ 70DD 1E 69 26 65                  dw      SWAP, ENCLOSE           // swap enclose
1173+ 70E1 AA 6B A3 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1173+ 70E5 22 00 91 70
1174+ 70E9 2C 6B 77 69                  dw      TO_IN, PLUSSTORE        // >in @ +
1175+ 70ED 01 69 E9 6B                  dw      OVER, SUBTRACT, TO_R    // over - >r
1175+ 70F1 59 68
1176+ 70F3 6F 68 AA 6B                  dw      R_OP, HERE, CSTORE      // r here c!
1176+ 70F7 AD 69
1177+ 70F9 A1 68                        dw      PLUS                    // +
1178+ 70FB AA 6B BA 68                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1178+ 70FF 64 68
1179+ 7101 90 67                        dw      CMOVE                   // cmove
1180+ 7103 AA 6B                        dw      HERE                    // here
1181+ 7105 4F 68                        dw      EXIT                    // ;
1182+ 7107
1183+ 7107              //  ______________________________________________________________________
1184+ 7107              //
1185+ 7107              // (.")         --
1186+ 7107              // Direct procedure compiled by ." and  .(  It executes TYPE.
1187+ 7107                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1187+ 7107             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1187+ 7107             >
1187+ 7107             >Dict_Ptr        defl    $
1187+ 7107             >
1187+ 7107             >//              ______________________________________________________________________
1187+ 7107             >//              Heap part
1187+ 7107             >
1187+ 7107             >
1187+ 7107             >                org     (Heap_Ptr & $1FFF) + $E000
1187+ E830             >
1187+ E830             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1187+ E830             >Latest_Definition defl  Heap_Ptr
1187+ E830             >
1187+ E830             >                // dummy db directives used to calculate length of namec
1187+ E830 28 2E 22 29 >                db      '(.")'
1187+ E834             >len_NFA         defl    $ - temp_NFA
1187+ E834             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1187+ E830             >
1187+ E830 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1187+ E831 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1187+ E835             >                org     $-1                 // alter last byte of Name just above to set
1187+ E834 A9          >                db      {b $} | END_BIT     // msb as name end
1187+ E835             >
1187+ E835 27 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1187+ E837             >Prev_Ptr        defl    Heap_Ptr
1187+ E837             >
1187+ E837             >mirror_Ptr      defl    $
1187+ E837             >
1187+ E837 09 71       >                dw      Dict_Ptr + 2        // xt
1187+ E839             >Heap_Ptr        defl    $ - $E000           // save current HP
1187+ E839             >
1187+ E839             >Current_HP      defl  $ - $E000             // used to set HP once!
1187+ E839             >
1187+ E839             >//              ______________________________________________________________________
1187+ E839             >//              Dictionary part
1187+ E839             >
1187+ E839             >                org     Dict_Ptr
1187+ 7107             >
1187+ 7107 37 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1187+ 7109             >
1187+ 7109             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1187+ 7109 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1187+ 710C             >
1187+ 710C             >
1187+ 710C             >                endif           ; ok        // for other definitions it "points" the correct handler
1187+ 710C             >                // Use of "; ok" to suppress "warning[fwdref]"
1187+ 710C             >
1187+ 710C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1188+ 710C 6F 68 18 6F                  dw      R_OP, COUNT             // r count
1189+ 7110 25 69 BA 68                  dw      DUP, ONE_PLUS           // dup 1+
1190+ 7114 64 68 A1 68                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1190+ 7118 59 68
1191+ 711A 6C 6F                        dw      TYPE                    // type
1192+ 711C 4F 68                        dw      EXIT                    // ;
1193+ 711E
1194+ 711E              //  ______________________________________________________________________
1195+ 711E              //
1196+ 711E              // char         -- c
1197+ 711E              // get first character from next input word
1198+ 711E                              Colon_Def CHAR,  "CHAR", is_normal
1198+ 711E             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1198+ 711E             >
1198+ 711E             >Dict_Ptr        defl    $
1198+ 711E             >
1198+ 711E             >//              ______________________________________________________________________
1198+ 711E             >//              Heap part
1198+ 711E             >
1198+ 711E             >
1198+ 711E             >                org     (Heap_Ptr & $1FFF) + $E000
1198+ E839             >
1198+ E839             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1198+ E839             >Latest_Definition defl  Heap_Ptr
1198+ E839             >
1198+ E839             >                // dummy db directives used to calculate length of namec
1198+ E839 43 48 41 52 >                db      "CHAR"
1198+ E83D             >len_NFA         defl    $ - temp_NFA
1198+ E83D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1198+ E839             >
1198+ E839 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1198+ E83A 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1198+ E83E             >                org     $-1                 // alter last byte of Name just above to set
1198+ E83D D2          >                db      {b $} | END_BIT     // msb as name end
1198+ E83E             >
1198+ E83E 30 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1198+ E840             >Prev_Ptr        defl    Heap_Ptr
1198+ E840             >
1198+ E840             >mirror_Ptr      defl    $
1198+ E840             >
1198+ E840 20 71       >                dw      Dict_Ptr + 2        // xt
1198+ E842             >Heap_Ptr        defl    $ - $E000           // save current HP
1198+ E842             >
1198+ E842             >Current_HP      defl  $ - $E000             // used to set HP once!
1198+ E842             >
1198+ E842             >//              ______________________________________________________________________
1198+ E842             >//              Dictionary part
1198+ E842             >
1198+ E842             >                org     Dict_Ptr
1198+ 711E             >
1198+ 711E 40 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1198+ 7120             >
1198+ 7120             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1198+ 7120 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1198+ 7123             >
1198+ 7123             >
1198+ 7123             >                endif           ; ok        // for other definitions it "points" the correct handler
1198+ 7123             >                // Use of "; ok" to suppress "warning[fwdref]"
1198+ 7123             >
1198+ 7123             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1199+ 7123 A8 6A BE 70                  dw      BL, WORD                // bl word
1200+ 7127 BA 68 A4 69                  dw      ONE_PLUS, CFETCH        // 1+ c@
1201+ 712B 4F 68                        dw      EXIT                    // ;
1202+ 712D
1203+ 712D              //  ______________________________________________________________________
1204+ 712D              //
1205+ 712D              // ,"           --
1206+ 712D              // compiles a string terminated by " as a counted string from next input stream
1207+ 712D                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1207+ 712D             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1207+ 712D             >
1207+ 712D             >Dict_Ptr        defl    $
1207+ 712D             >
1207+ 712D             >//              ______________________________________________________________________
1207+ 712D             >//              Heap part
1207+ 712D             >
1207+ 712D             >
1207+ 712D             >                org     (Heap_Ptr & $1FFF) + $E000
1207+ E842             >
1207+ E842             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1207+ E842             >Latest_Definition defl  Heap_Ptr
1207+ E842             >
1207+ E842             >                // dummy db directives used to calculate length of namec
1207+ E842 2C 22       >                db      ',"'
1207+ E844             >len_NFA         defl    $ - temp_NFA
1207+ E844             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1207+ E842             >
1207+ E842 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1207+ E843 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1207+ E845             >                org     $-1                 // alter last byte of Name just above to set
1207+ E844 A2          >                db      {b $} | END_BIT     // msb as name end
1207+ E845             >
1207+ E845 39 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1207+ E847             >Prev_Ptr        defl    Heap_Ptr
1207+ E847             >
1207+ E847             >mirror_Ptr      defl    $
1207+ E847             >
1207+ E847 2F 71       >                dw      Dict_Ptr + 2        // xt
1207+ E849             >Heap_Ptr        defl    $ - $E000           // save current HP
1207+ E849             >
1207+ E849             >Current_HP      defl  $ - $E000             // used to set HP once!
1207+ E849             >
1207+ E849             >//              ______________________________________________________________________
1207+ E849             >//              Dictionary part
1207+ E849             >
1207+ E849             >                org     Dict_Ptr
1207+ 712D             >
1207+ 712D 47 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1207+ 712F             >
1207+ 712F             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1207+ 712F CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1207+ 7132             >
1207+ 7132             >
1207+ 7132             >                endif           ; ok        // for other definitions it "points" the correct handler
1207+ 7132             >                // Use of "; ok" to suppress "warning[fwdref]"
1207+ 7132             >
1207+ 7132             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1208+ 7132 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1209+ 7136 BE 70                        dw      WORD                    // word
1210+ 7138 A4 69 BA 68                  dw      CFETCH, ONE_PLUS        // c@ 1+
1211+ 713C B5 6B                        dw      ALLOT                   // allot
1212+ 713E 85 6A CF 6B                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1213+ 7142 4F 68                        dw      EXIT
1214+ 7144
1215+ 7144              //  ______________________________________________________________________
1216+ 7144              //
1217+ 7144              // .c           c --
1218+ 7144              // intermediate general purpose string builder, used by ." and .(
1219+ 7144                              Colon_Def DOT_C,  ".C", is_immediate
1219+ 7144             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1219+ 7144             >
1219+ 7144             >Dict_Ptr        defl    $
1219+ 7144             >
1219+ 7144             >//              ______________________________________________________________________
1219+ 7144             >//              Heap part
1219+ 7144             >
1219+ 7144             >
1219+ 7144             >                org     (Heap_Ptr & $1FFF) + $E000
1219+ E849             >
1219+ E849             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1219+ E849             >Latest_Definition defl  Heap_Ptr
1219+ E849             >
1219+ E849             >                // dummy db directives used to calculate length of namec
1219+ E849 2E 43       >                db      ".C"
1219+ E84B             >len_NFA         defl    $ - temp_NFA
1219+ E84B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1219+ E849             >
1219+ E849 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1219+ E84A 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1219+ E84C             >                org     $-1                 // alter last byte of Name just above to set
1219+ E84B C3          >                db      {b $} | END_BIT     // msb as name end
1219+ E84C             >
1219+ E84C 42 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1219+ E84E             >Prev_Ptr        defl    Heap_Ptr
1219+ E84E             >
1219+ E84E             >mirror_Ptr      defl    $
1219+ E84E             >
1219+ E84E 46 71       >                dw      Dict_Ptr + 2        // xt
1219+ E850             >Heap_Ptr        defl    $ - $E000           // save current HP
1219+ E850             >
1219+ E850             >Current_HP      defl  $ - $E000             // used to set HP once!
1219+ E850             >
1219+ E850             >//              ______________________________________________________________________
1219+ E850             >//              Dictionary part
1219+ E850             >
1219+ E850             >                org     Dict_Ptr
1219+ 7144             >
1219+ 7144 4E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1219+ 7146             >
1219+ 7146             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1219+ 7146 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1219+ 7149             >
1219+ 7149             >
1219+ 7149             >                endif           ; ok        // for other definitions it "points" the correct handler
1219+ 7149             >                // Use of "; ok" to suppress "warning[fwdref]"
1219+ 7149             >
1219+ 7149             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1220+ 7149 50 6B 8F 69                  dw      STATE, FETCH            // state @
1221+ 714D                                                              // if
1222+ 714D F5 63                        dw      ZBRANCH
1223+ 714F 12 00                        dw      Dot_C_Else - $
1224+ 7151 4E 6E 09 71                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1225+ 7155 BE 70 A4 69                  dw          WORD, CFETCH        //      word c@
1226+ 7159 BA 68 B5 6B                  dw          ONE_PLUS, ALLOT     //      1+ allot
1227+ 715D                                                              // else
1228+ 715D E8 63                        dw      BRANCH
1229+ 715F 08 00                        dw      Dot_C_Endif - $
1230+ 7161              Dot_C_Else:
1231+ 7161 BE 70 18 6F                  dw          WORD, COUNT, TYPE   //      word count type
1231+ 7165 6C 6F
1232+ 7167              Dot_C_Endif:                                    // endif
1233+ 7167 4F 68                        dw      EXIT                    ;
1234+ 7169
1235+ 7169              //  ______________________________________________________________________
1236+ 7169              //
1237+ 7169              // ."           c --
1238+ 7169                              Colon_Def DOT_QUOTE,  '."', is_immediate
1238+ 7169             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1238+ 7169             >
1238+ 7169             >Dict_Ptr        defl    $
1238+ 7169             >
1238+ 7169             >//              ______________________________________________________________________
1238+ 7169             >//              Heap part
1238+ 7169             >
1238+ 7169             >
1238+ 7169             >                org     (Heap_Ptr & $1FFF) + $E000
1238+ E850             >
1238+ E850             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1238+ E850             >Latest_Definition defl  Heap_Ptr
1238+ E850             >
1238+ E850             >                // dummy db directives used to calculate length of namec
1238+ E850 2E 22       >                db      '."'
1238+ E852             >len_NFA         defl    $ - temp_NFA
1238+ E852             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1238+ E850             >
1238+ E850 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1238+ E851 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1238+ E853             >                org     $-1                 // alter last byte of Name just above to set
1238+ E852 A2          >                db      {b $} | END_BIT     // msb as name end
1238+ E853             >
1238+ E853 49 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1238+ E855             >Prev_Ptr        defl    Heap_Ptr
1238+ E855             >
1238+ E855             >mirror_Ptr      defl    $
1238+ E855             >
1238+ E855 6B 71       >                dw      Dict_Ptr + 2        // xt
1238+ E857             >Heap_Ptr        defl    $ - $E000           // save current HP
1238+ E857             >
1238+ E857             >Current_HP      defl  $ - $E000             // used to set HP once!
1238+ E857             >
1238+ E857             >//              ______________________________________________________________________
1238+ E857             >//              Dictionary part
1238+ E857             >
1238+ E857             >                org     Dict_Ptr
1238+ 7169             >
1238+ 7169 55 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1238+ 716B             >
1238+ 716B             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1238+ 716B CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1238+ 716E             >
1238+ 716E             >
1238+ 716E             >                endif           ; ok        // for other definitions it "points" the correct handler
1238+ 716E             >                // Use of "; ok" to suppress "warning[fwdref]"
1238+ 716E             >
1238+ 716E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1239+ 716E A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1240+ 7172 46 71                        dw      DOT_C                   // [compile] .c
1241+ 7174 4F 68                        dw      EXIT                    // ; immediate
1242+ 7176
1243+ 7176              //  ______________________________________________________________________
1244+ 7176              //
1245+ 7176              // .(           c --
1246+ 7176                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1246+ 7176             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1246+ 7176             >
1246+ 7176             >Dict_Ptr        defl    $
1246+ 7176             >
1246+ 7176             >//              ______________________________________________________________________
1246+ 7176             >//              Heap part
1246+ 7176             >
1246+ 7176             >
1246+ 7176             >                org     (Heap_Ptr & $1FFF) + $E000
1246+ E857             >
1246+ E857             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1246+ E857             >Latest_Definition defl  Heap_Ptr
1246+ E857             >
1246+ E857             >                // dummy db directives used to calculate length of namec
1246+ E857 2E 28       >                db      ".("
1246+ E859             >len_NFA         defl    $ - temp_NFA
1246+ E859             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1246+ E857             >
1246+ E857 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1246+ E858 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1246+ E85A             >                org     $-1                 // alter last byte of Name just above to set
1246+ E859 A8          >                db      {b $} | END_BIT     // msb as name end
1246+ E85A             >
1246+ E85A 50 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1246+ E85C             >Prev_Ptr        defl    Heap_Ptr
1246+ E85C             >
1246+ E85C             >mirror_Ptr      defl    $
1246+ E85C             >
1246+ E85C 78 71       >                dw      Dict_Ptr + 2        // xt
1246+ E85E             >Heap_Ptr        defl    $ - $E000           // save current HP
1246+ E85E             >
1246+ E85E             >Current_HP      defl  $ - $E000             // used to set HP once!
1246+ E85E             >
1246+ E85E             >//              ______________________________________________________________________
1246+ E85E             >//              Dictionary part
1246+ E85E             >
1246+ E85E             >                org     Dict_Ptr
1246+ 7176             >
1246+ 7176 5C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1246+ 7178             >
1246+ 7178             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1246+ 7178 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1246+ 717B             >
1246+ 717B             >
1246+ 717B             >                endif           ; ok        // for other definitions it "points" the correct handler
1246+ 717B             >                // Use of "; ok" to suppress "warning[fwdref]"
1246+ 717B             >
1246+ 717B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1247+ 717B A3 63 29 00                  dw      LIT, ")"                // [char] )
1248+ 717F 46 71                        dw      DOT_C                   // [compile] .c
1249+ 7181 4F 68                        dw      EXIT                    // ; immediate
1250+ 7183
1251+ 7183              //  ______________________________________________________________________
1252+ 7183              //
1253+ 7183              // (sgn)        a -- a f
1254+ 7183              // determines if char in addr a is a sign (+ or -), and in that case increments
1255+ 7183              // a flag. Returns f as the sign, true for negative, false for positive.
1256+ 7183              // called by NUMBER and (EXP)
1257+ 7183                              Colon_Def CSGN,  "(SGN)", is_normal
1257+ 7183             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1257+ 7183             >
1257+ 7183             >Dict_Ptr        defl    $
1257+ 7183             >
1257+ 7183             >//              ______________________________________________________________________
1257+ 7183             >//              Heap part
1257+ 7183             >
1257+ 7183             >
1257+ 7183             >                org     (Heap_Ptr & $1FFF) + $E000
1257+ E85E             >
1257+ E85E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1257+ E85E             >Latest_Definition defl  Heap_Ptr
1257+ E85E             >
1257+ E85E             >                // dummy db directives used to calculate length of namec
1257+ E85E 28 53 47 4E >                db      "(SGN)"
1257+ E862 29          >
1257+ E863             >len_NFA         defl    $ - temp_NFA
1257+ E863             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1257+ E85E             >
1257+ E85E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1257+ E85F 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1257+ E863 29          >
1257+ E864             >                org     $-1                 // alter last byte of Name just above to set
1257+ E863 A9          >                db      {b $} | END_BIT     // msb as name end
1257+ E864             >
1257+ E864 57 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1257+ E866             >Prev_Ptr        defl    Heap_Ptr
1257+ E866             >
1257+ E866             >mirror_Ptr      defl    $
1257+ E866             >
1257+ E866 85 71       >                dw      Dict_Ptr + 2        // xt
1257+ E868             >Heap_Ptr        defl    $ - $E000           // save current HP
1257+ E868             >
1257+ E868             >Current_HP      defl  $ - $E000             // used to set HP once!
1257+ E868             >
1257+ E868             >//              ______________________________________________________________________
1257+ E868             >//              Dictionary part
1257+ E868             >
1257+ E868             >                org     Dict_Ptr
1257+ 7183             >
1257+ 7183 66 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1257+ 7185             >
1257+ 7185             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1257+ 7185 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1257+ 7188             >
1257+ 7188             >
1257+ 7188             >                endif           ; ok        // for other definitions it "points" the correct handler
1257+ 7188             >                // Use of "; ok" to suppress "warning[fwdref]"
1257+ 7188             >
1257+ 7188             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1258+ 7188 25 69 BA 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1258+ 718C A4 69
1259+ 718E 25 69 A3 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1259+ 7192 2D 00 F5 6B
1260+ 7196                                                              // if
1261+ 7196 F5 63                        dw      ZBRANCH
1262+ 7198 12 00                        dw      CSgn_Else_0 - $
1263+ 719A 0A 69                        dw          DROP                //      drop
1264+ 719C BA 68                        dw          ONE_PLUS            //      1+
1265+ 719E 8C 6A 5C 6B                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1265+ 71A2 77 69
1266+ 71A4 8C 6A                        dw          ONE                 //      1
1267+ 71A6                                                              // else
1268+ 71A6 E8 63                        dw      BRANCH
1269+ 71A8 16 00                        dw      CSgn_Endif_0 - $
1270+ 71AA              CSgn_Else_0:
1271+ 71AA A3 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1271+ 71AE F5 6B
1272+ 71B0                                                              //      if
1273+ 71B0 F5 63                        dw          ZBRANCH
1274+ 71B2 0A 00                        dw          CSgn_Endif_1 - $
1275+ 71B4 BA 68                        dw              ONE_PLUS        //          1+
1276+ 71B6 8C 6A 5C 6B                  dw              ONE, DPL        //          1 dpl
1277+ 71BA 77 69                        dw              PLUSSTORE       //          +!
1278+ 71BC              CSgn_Endif_1                                    //      endif
1279+ 71BC 85 6A                        dw          ZERO                //      0
1280+ 71BE              CSgn_Endif_0:                                   // endif
1281+ 71BE 4F 68                        dw      EXIT
1282+ 71C0
1283+ 71C0              //  ______________________________________________________________________
1284+ 71C0              //
1285+ 71C0              // (number)     d a -- d1 a1
1286+ 71C0              // using the current BASE parse characters stored in address a
1287+ 71C0              // accumulating a double precision integer d
1288+ 71C0              // the process stops at the first not-convertible character
1289+ 71C0              // A double-number is kept in CPU registers as HLDE.
1290+ 71C0              // On the stack a double number is treated as two single numbers
1291+ 71C0              // where HL is on the top of the stack and DE is the second from top,
1292+ 71C0              // so in the stack memory it appears as LHED.
1293+ 71C0              // Instead, in 2VARIABLE a double number is stored as EDLH.
1294+ 71C0                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1294+ 71C0             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1294+ 71C0             >
1294+ 71C0             >Dict_Ptr        defl    $
1294+ 71C0             >
1294+ 71C0             >//              ______________________________________________________________________
1294+ 71C0             >//              Heap part
1294+ 71C0             >
1294+ 71C0             >
1294+ 71C0             >                org     (Heap_Ptr & $1FFF) + $E000
1294+ E868             >
1294+ E868             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1294+ E868             >Latest_Definition defl  Heap_Ptr
1294+ E868             >
1294+ E868             >                // dummy db directives used to calculate length of namec
1294+ E868 28 4E 55 4D >                db      "(NUMBER)"
1294+ E86C 42 45 52 29 >
1294+ E870             >len_NFA         defl    $ - temp_NFA
1294+ E870             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1294+ E868             >
1294+ E868 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1294+ E869 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1294+ E86D 42 45 52 29 >
1294+ E871             >                org     $-1                 // alter last byte of Name just above to set
1294+ E870 A9          >                db      {b $} | END_BIT     // msb as name end
1294+ E871             >
1294+ E871 5E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1294+ E873             >Prev_Ptr        defl    Heap_Ptr
1294+ E873             >
1294+ E873             >mirror_Ptr      defl    $
1294+ E873             >
1294+ E873 C2 71       >                dw      Dict_Ptr + 2        // xt
1294+ E875             >Heap_Ptr        defl    $ - $E000           // save current HP
1294+ E875             >
1294+ E875             >Current_HP      defl  $ - $E000             // used to set HP once!
1294+ E875             >
1294+ E875             >//              ______________________________________________________________________
1294+ E875             >//              Dictionary part
1294+ E875             >
1294+ E875             >                org     Dict_Ptr
1294+ 71C0             >
1294+ 71C0 73 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1294+ 71C2             >
1294+ 71C2             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1294+ 71C2 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1294+ 71C5             >
1294+ 71C5             >
1294+ 71C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1294+ 71C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1294+ 71C5             >
1294+ 71C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1295+ 71C5                                                              // begin
1296+ 71C5              CNumber_Begin:
1297+ 71C5 BA 68                        dw          ONE_PLUS            //      1+
1298+ 71C7 25 69 59 68                  dw          DUP, TO_R           //      dup >r
1299+ 71CB A4 69                        dw          CFETCH              //      @
1300+ 71CD 56 6B 8F 69                  dw          BASE, FETCH         //      base @
1301+ 71D1 4B 64                        dw          DIGIT               //      digit
1302+ 71D3                                                              // while
1303+ 71D3 F5 63                        dw      ZBRANCH
1304+ 71D5 2C 00                        dw      CNumber_While_end - $
1305+ 71D7 1E 69                        dw          SWAP                //      swap
1306+ 71D9 56 6B 8F 69                  dw          BASE, FETCH         //      base @
1307+ 71DD B4 67                        dw          UM_MUL              //      um*
1308+ 71DF 0A 69 2C 69                  dw          DROP, ROT           //      drop rot
1309+ 71E3 56 6B 8F 69                  dw          BASE, FETCH         //      base @
1310+ 71E7 B4 67                        dw          UM_MUL              //      um*
1311+ 71E9 AB 68                        dw          DPLUS               //      d+
1312+ 71EB 5C 6B 8F 69                  dw          DPL, FETCH          //      dpl @
1313+ 71EF BA 68                        dw          ONE_PLUS            //      1+
1314+ 71F1                                                              //      if
1315+ 71F1 F5 63                        dw          ZBRANCH
1316+ 71F3 08 00                        dw          CNumber_Endif - $
1317+ 71F5 8C 6A 5C 6B                  dw              ONE, DPL        //          1 dpl
1318+ 71F9 77 69                        dw              PLUSSTORE       //          +!
1319+ 71FB              CNumber_Endif:                                  //      endif
1320+ 71FB 64 68                        dw             R_TO             //      r>  ( balance rp )
1321+ 71FD E8 63                        dw      BRANCH
1322+ 71FF C6 FF                        dw      CNumber_Begin - $
1323+ 7201              CNumber_While_end:                              // repeat
1324+ 7201 64 68                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1325+ 7203 4F 68                        dw      EXIT                    // ;
1326+ 7205
1327+ 7205              //  ______________________________________________________________________
1328+ 7205              //
1329+ 7205              // (prefix)
1330+ 7205                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1330+ 7205             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1330+ 7205             >
1330+ 7205             >Dict_Ptr        defl    $
1330+ 7205             >
1330+ 7205             >//              ______________________________________________________________________
1330+ 7205             >//              Heap part
1330+ 7205             >
1330+ 7205             >
1330+ 7205             >                org     (Heap_Ptr & $1FFF) + $E000
1330+ E875             >
1330+ E875             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1330+ E875             >Latest_Definition defl  Heap_Ptr
1330+ E875             >
1330+ E875             >                // dummy db directives used to calculate length of namec
1330+ E875 28 50 52 45 >                db      "(PREFIX)"
1330+ E879 46 49 58 29 >
1330+ E87D             >len_NFA         defl    $ - temp_NFA
1330+ E87D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1330+ E875             >
1330+ E875 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1330+ E876 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1330+ E87A 46 49 58 29 >
1330+ E87E             >                org     $-1                 // alter last byte of Name just above to set
1330+ E87D A9          >                db      {b $} | END_BIT     // msb as name end
1330+ E87E             >
1330+ E87E 68 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1330+ E880             >Prev_Ptr        defl    Heap_Ptr
1330+ E880             >
1330+ E880             >mirror_Ptr      defl    $
1330+ E880             >
1330+ E880 07 72       >                dw      Dict_Ptr + 2        // xt
1330+ E882             >Heap_Ptr        defl    $ - $E000           // save current HP
1330+ E882             >
1330+ E882             >Current_HP      defl  $ - $E000             // used to set HP once!
1330+ E882             >
1330+ E882             >//              ______________________________________________________________________
1330+ E882             >//              Dictionary part
1330+ E882             >
1330+ E882             >                org     Dict_Ptr
1330+ 7205             >
1330+ 7205 80 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1330+ 7207             >
1330+ 7207             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1330+ 7207 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1330+ 720A             >
1330+ 720A             >
1330+ 720A             >                endif           ; ok        // for other definitions it "points" the correct handler
1330+ 720A             >                // Use of "; ok" to suppress "warning[fwdref]"
1330+ 720A             >
1330+ 720A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1331+ 720A 25 69 BA 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1331+ 720E A4 69
1332+ 7210 25 69 59 68                  dw      DUP, TO_R               // dup >r
1333+ 7214 A3 63 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1333+ 7218 F5 6B
1334+ 721A                                                              // if
1335+ 721A F5 63                        dw      ZBRANCH
1336+ 721C 06 00                        dw      CPrefix_Endif_0 - $
1337+ 721E BA 68                        dw          ONE_PLUS            //      1+
1338+ 7220 A6 6E                        dw          HEX
1339+ 7222              CPrefix_Endif_0:                                // endif
1340+ 7222 6F 68                        dw      R_OP                    // r@
1341+ 7224 A3 63 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1341+ 7228 F5 6B
1342+ 722A                                                              // if
1343+ 722A F5 63                        dw      ZBRANCH
1344+ 722C 0A 00                        dw      CPrefix_Endif_1 - $
1345+ 722E BA 68                        dw          ONE_PLUS            //      1+
1346+ 7230 93 6A                        dw          TWO
1347+ 7232 56 6B 99 69                  dw          BASE, STORE         //      2 base !
1348+ 7236              CPrefix_Endif_1:                                // endif
1349+ 7236 64 68                        dw      R_TO                    // r>
1350+ 7238 A3 63 23 00                  dw      LIT, "#", EQUALS        // [char] $ =
1350+ 723C F5 6B
1351+ 723E                                                              // if
1352+ 723E F5 63                        dw      ZBRANCH
1353+ 7240 06 00                        dw      CPrefix_Endif_2 - $
1354+ 7242 BA 68                        dw          ONE_PLUS            //      1+
1355+ 7244 B5 6E                        dw          DECIMAL
1356+ 7246              CPrefix_Endif_2:                                // endif
1357+ 7246 4F 68                        dw      EXIT
1358+ 7248
1359+ 7248              //  ______________________________________________________________________
1360+ 7248
1361+ 7248              PDOM_PTR:
1362+ 7248              //              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1363+ 7248 2C 2F 2D 3A                  db ',/-:'
1364+ 724C              PCDM_PTR:
1365+ 724C              //              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1366+ 724C 2E 2E 2E 2E                  db '....'
1367+ 7250
1368+ 7250              //  ______________________________________________________________________
1369+ 7250              //
1370+ 7250              // number       a -- d
1371+ 7250                              Colon_Def NUMBER,  "NUMBER", is_normal
1371+ 7250             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1371+ 7250             >
1371+ 7250             >Dict_Ptr        defl    $
1371+ 7250             >
1371+ 7250             >//              ______________________________________________________________________
1371+ 7250             >//              Heap part
1371+ 7250             >
1371+ 7250             >
1371+ 7250             >                org     (Heap_Ptr & $1FFF) + $E000
1371+ E882             >
1371+ E882             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1371+ E882             >Latest_Definition defl  Heap_Ptr
1371+ E882             >
1371+ E882             >                // dummy db directives used to calculate length of namec
1371+ E882 4E 55 4D 42 >                db      "NUMBER"
1371+ E886 45 52       >
1371+ E888             >len_NFA         defl    $ - temp_NFA
1371+ E888             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1371+ E882             >
1371+ E882 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1371+ E883 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1371+ E887 45 52       >
1371+ E889             >                org     $-1                 // alter last byte of Name just above to set
1371+ E888 D2          >                db      {b $} | END_BIT     // msb as name end
1371+ E889             >
1371+ E889 75 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1371+ E88B             >Prev_Ptr        defl    Heap_Ptr
1371+ E88B             >
1371+ E88B             >mirror_Ptr      defl    $
1371+ E88B             >
1371+ E88B 52 72       >                dw      Dict_Ptr + 2        // xt
1371+ E88D             >Heap_Ptr        defl    $ - $E000           // save current HP
1371+ E88D             >
1371+ E88D             >Current_HP      defl  $ - $E000             // used to set HP once!
1371+ E88D             >
1371+ E88D             >//              ______________________________________________________________________
1371+ E88D             >//              Dictionary part
1371+ E88D             >
1371+ E88D             >                org     Dict_Ptr
1371+ 7250             >
1371+ 7250 8B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1371+ 7252             >
1371+ 7252             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1371+ 7252 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1371+ 7255             >
1371+ 7255             >
1371+ 7255             >                endif           ; ok        // for other definitions it "points" the correct handler
1371+ 7255             >                // Use of "; ok" to suppress "warning[fwdref]"
1371+ 7255             >
1371+ 7255             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1372+ 7255 85 6A 85 6A                  dw      ZERO, ZERO              // 0 0
1373+ 7259 2C 69                        dw      ROT                     // rot
1374+ 725B
1375+ 725B 56 6B 8F 69                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1375+ 725F 59 68
1376+ 7261 07 72                        dw      CPREFIX                 // (prefix)   // ***
1377+ 7263
1378+ 7263 85 71 59 68                  dw      CSGN, TO_R              // (sgn) >r
1379+ 7267
1380+ 7267 A1 6A 5C 6B                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1380+ 726B 99 69
1381+ 726D C2 71                        dw      CNUMBER                 // (number)
1382+ 726F              Number_Begin:                                   // begin
1383+ 726F 25 69 A4 69                  dw        DUP, CFETCH             // dup c@
1384+ 7273 59 68                        dw        TO_R                    // >r
1385+ 7275                          //  dw        PCDM, PDOM              //  pcdm pdom
1386+ 7275 A3 63 4C 72                  dw        LIT, PCDM_PTR           //
1387+ 7279 A3 63 48 72                  dw        LIT, PDOM_PTR           //
1388+ 727D A3 63 04 00                  dw        LIT, 4                  //  4
1389+ 7281 64 68                        dw        R_TO                    // r>
1390+ 7283 58 65                        dw        C_MAP                   // (map)
1391+ 7285 85 6A 1E 69                  dw        ZERO, SWAP              // 0 swap
1392+ 7289 A3 63 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1392+ 728D F5 6B
1393+ 728F
1394+ 728F F5 63                        dw        ZBRANCH                 // if
1395+ 7291 0A 00                        dw        Number_Endif_1 - $
1396+ 7293 85 6A 5C 6B                  dw          ZERO, DPL, STORE        //      0 dpl !
1396+ 7297 99 69
1397+ 7299 BA 68                        dw          ONE_PLUS                //      1+
1398+ 729B              Number_Endif_1:                                   // endif
1399+ 729B
1400+ 729B F5 63                        dw      ZBRANCH                // while
1401+ 729D 08 00                        dw      Number_While_end - $
1402+ 729F C2 71                        dw        CNUMBER                 // (number)
1403+ 72A1 E8 63                        dw      BRANCH
1404+ 72A3 CC FF                        dw      Number_Begin - $
1405+ 72A5              Number_While_end:                               // repeat
1406+ 72A5
1407+ 72A5 A4 69 A8 6A                  dw      CFETCH, BL              // c@ bl
1408+ 72A9 E9 6B 85 6A                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1408+ 72AD DE 6D
1409+ 72AF 64 68                        dw      R_TO                    // r>
1410+ 72B1                                                              // if
1411+ 72B1 F5 63                        dw      ZBRANCH
1412+ 72B3 04 00                        dw      Number_Endif_2 - $
1413+ 72B5 EE 68                        dw          DMINUS              //      dminus
1414+ 72B7              Number_Endif_2:                                 // endif
1415+ 72B7 64 68 56 6B                  dw      R_TO, BASE, STORE       // r> base !  // ***
1415+ 72BB 99 69
1416+ 72BD 4F 68                        dw      EXIT                    // ;
1417+ 72BF
1418+ 72BF              //  ______________________________________________________________________
1419+ 72BF              //
1420+ 72BF              // twofind      a -- d
1421+ 72BF                              Colon_Def TWOFIND,  "2FIND", is_normal
1421+ 72BF             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1421+ 72BF             >
1421+ 72BF             >Dict_Ptr        defl    $
1421+ 72BF             >
1421+ 72BF             >//              ______________________________________________________________________
1421+ 72BF             >//              Heap part
1421+ 72BF             >
1421+ 72BF             >
1421+ 72BF             >                org     (Heap_Ptr & $1FFF) + $E000
1421+ E88D             >
1421+ E88D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1421+ E88D             >Latest_Definition defl  Heap_Ptr
1421+ E88D             >
1421+ E88D             >                // dummy db directives used to calculate length of namec
1421+ E88D 32 46 49 4E >                db      "2FIND"
1421+ E891 44          >
1421+ E892             >len_NFA         defl    $ - temp_NFA
1421+ E892             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1421+ E88D             >
1421+ E88D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1421+ E88E 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1421+ E892 44          >
1421+ E893             >                org     $-1                 // alter last byte of Name just above to set
1421+ E892 C4          >                db      {b $} | END_BIT     // msb as name end
1421+ E893             >
1421+ E893 82 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1421+ E895             >Prev_Ptr        defl    Heap_Ptr
1421+ E895             >
1421+ E895             >mirror_Ptr      defl    $
1421+ E895             >
1421+ E895 C1 72       >                dw      Dict_Ptr + 2        // xt
1421+ E897             >Heap_Ptr        defl    $ - $E000           // save current HP
1421+ E897             >
1421+ E897             >Current_HP      defl  $ - $E000             // used to set HP once!
1421+ E897             >
1421+ E897             >//              ______________________________________________________________________
1421+ E897             >//              Dictionary part
1421+ E897             >
1421+ E897             >                org     Dict_Ptr
1421+ 72BF             >
1421+ 72BF 95 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1421+ 72C1             >
1421+ 72C1             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1421+ 72C1 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1421+ 72C4             >
1421+ 72C4             >
1421+ 72C4             >                endif           ; ok        // for other definitions it "points" the correct handler
1421+ 72C4             >                // Use of "; ok" to suppress "warning[fwdref]"
1421+ 72C4             >
1421+ 72C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1422+ 72C4 59 68 6F 68                  dw      TO_R, R_OP              // >r r@
1423+ 72C8 44 6B 8F 69                  dw      CONTEXT, FETCH, FETCH   // context @ @
1423+ 72CC 8F 69
1424+ 72CE B8 64                        dw      C_FIND                  // (find)
1425+ 72D0 4C 6C                        dw      QDUP                    // ?dup
1426+ 72D2 74 68                        dw      ZEQUAL                  // 0=
1427+ 72D4                                                              // if
1428+ 72D4 F5 63                        dw      ZBRANCH
1429+ 72D6 24 00                        dw      LFind_Endif - $
1430+ 72D8 6F 68                        dw          R_OP                //      r@
1431+ 72DA                              // dw          LATEST               //      latest
1432+ 72DA 4A 6B 8F 69                  dw          CURRENT, FETCH, FETCH   // context @ @
1432+ 72DE 8F 69
1433+ 72E0 B8 64                        dw          C_FIND              //      (find)
1434+ 72E2
1435+ 72E2 4C 6C                            dw      QDUP                    // ?dup
1436+ 72E4 74 68                            dw      ZEQUAL                  // 0=
1437+ 72E6                                                                  // if
1438+ 72E6 F5 63                            dw      ZBRANCH
1439+ 72E8 12 00                            dw      LFind_Endif2 - $
1440+ 72EA 6F 68                            dw          R_OP                //      r@
1441+ 72EC A3 63 3B 75                      dw          LIT, FORTH, TO_BODY
1441+ 72F0 5D 6D
1442+ 72F2 D0 68 D0 68                      dw          CELL_PLUS, CELL_PLUS
1443+ 72F6 8F 69                            dw          FETCH
1444+ 72F8 B8 64                            dw          C_FIND              //      (find)
1445+ 72FA              LFind_Endif2:                                    // endif
1446+ 72FA
1447+ 72FA
1448+ 72FA              LFind_Endif:                                    // endif
1449+ 72FA 64 68 0A 69                  dw      R_TO, DROP              // r> drop
1450+ 72FE 4F 68                        dw      EXIT                    // ;
1451+ 7300
1452+ 7300              //  ______________________________________________________________________
1453+ 7300              //
1454+ 7300              // -find        a -- d
1455+ 7300                              Colon_Def LFIND,  "-FIND", is_normal
1455+ 7300             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1455+ 7300             >
1455+ 7300             >Dict_Ptr        defl    $
1455+ 7300             >
1455+ 7300             >//              ______________________________________________________________________
1455+ 7300             >//              Heap part
1455+ 7300             >
1455+ 7300             >
1455+ 7300             >                org     (Heap_Ptr & $1FFF) + $E000
1455+ E897             >
1455+ E897             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1455+ E897             >Latest_Definition defl  Heap_Ptr
1455+ E897             >
1455+ E897             >                // dummy db directives used to calculate length of namec
1455+ E897 2D 46 49 4E >                db      "-FIND"
1455+ E89B 44          >
1455+ E89C             >len_NFA         defl    $ - temp_NFA
1455+ E89C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1455+ E897             >
1455+ E897 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1455+ E898 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1455+ E89C 44          >
1455+ E89D             >                org     $-1                 // alter last byte of Name just above to set
1455+ E89C C4          >                db      {b $} | END_BIT     // msb as name end
1455+ E89D             >
1455+ E89D 8D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1455+ E89F             >Prev_Ptr        defl    Heap_Ptr
1455+ E89F             >
1455+ E89F             >mirror_Ptr      defl    $
1455+ E89F             >
1455+ E89F 02 73       >                dw      Dict_Ptr + 2        // xt
1455+ E8A1             >Heap_Ptr        defl    $ - $E000           // save current HP
1455+ E8A1             >
1455+ E8A1             >Current_HP      defl  $ - $E000             // used to set HP once!
1455+ E8A1             >
1455+ E8A1             >//              ______________________________________________________________________
1455+ E8A1             >//              Dictionary part
1455+ E8A1             >
1455+ E8A1             >                org     Dict_Ptr
1455+ 7300             >
1455+ 7300 9F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1455+ 7302             >
1455+ 7302             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1455+ 7302 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1455+ 7305             >
1455+ 7305             >
1455+ 7305             >                endif           ; ok        // for other definitions it "points" the correct handler
1455+ 7305             >                // Use of "; ok" to suppress "warning[fwdref]"
1455+ 7305             >
1455+ 7305             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1456+ 7305 A8 6A BE 70                  dw      BL, WORD                // bl word
1457+ 7309 C1 72                        dw      TWOFIND                 // 2find
1458+ 730B 4F 68                        dw      EXIT                    // ;
1459+ 730D
1460+ 730D              //  ______________________________________________________________________
1461+ 730D              //
1462+ 730D              // (abort)      --
1463+ 730D                              Colon_Def CABORT,  "(ABORT)", is_normal
1463+ 730D             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1463+ 730D             >
1463+ 730D             >Dict_Ptr        defl    $
1463+ 730D             >
1463+ 730D             >//              ______________________________________________________________________
1463+ 730D             >//              Heap part
1463+ 730D             >
1463+ 730D             >
1463+ 730D             >                org     (Heap_Ptr & $1FFF) + $E000
1463+ E8A1             >
1463+ E8A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1463+ E8A1             >Latest_Definition defl  Heap_Ptr
1463+ E8A1             >
1463+ E8A1             >                // dummy db directives used to calculate length of namec
1463+ E8A1 28 41 42 4F >                db      "(ABORT)"
1463+ E8A5 52 54 29    >
1463+ E8A8             >len_NFA         defl    $ - temp_NFA
1463+ E8A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1463+ E8A1             >
1463+ E8A1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1463+ E8A2 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1463+ E8A6 52 54 29    >
1463+ E8A9             >                org     $-1                 // alter last byte of Name just above to set
1463+ E8A8 A9          >                db      {b $} | END_BIT     // msb as name end
1463+ E8A9             >
1463+ E8A9 97 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1463+ E8AB             >Prev_Ptr        defl    Heap_Ptr
1463+ E8AB             >
1463+ E8AB             >mirror_Ptr      defl    $
1463+ E8AB             >
1463+ E8AB 0F 73       >                dw      Dict_Ptr + 2        // xt
1463+ E8AD             >Heap_Ptr        defl    $ - $E000           // save current HP
1463+ E8AD             >
1463+ E8AD             >Current_HP      defl  $ - $E000             // used to set HP once!
1463+ E8AD             >
1463+ E8AD             >//              ______________________________________________________________________
1463+ E8AD             >//              Dictionary part
1463+ E8AD             >
1463+ E8AD             >                org     Dict_Ptr
1463+ 730D             >
1463+ 730D AB 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1463+ 730F             >
1463+ 730F             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1463+ 730F CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1463+ 7312             >
1463+ 7312             >
1463+ 7312             >                endif           ; ok        // for other definitions it "points" the correct handler
1463+ 7312             >                // Use of "; ok" to suppress "warning[fwdref]"
1463+ 7312             >
1463+ 7312             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1464+ 7312 A2 75                        dw      ABORT                   // abort
1465+ 7314 4F 68                        dw      EXIT                    // ;
1466+ 7316
1467+ 7316              //  ______________________________________________________________________
1468+ 7316              //
1469+ 7316              // error        n --
1470+ 7316              // raise an error
1471+ 7316              // if WARNING is 0, prints "MSG#n".
1472+ 7316              // if WARNING is 1, prints line n of screen 4.
1473+ 7316              // if WARNING is -1 does (ABORT) that normally does ABORT
1474+ 7316              // value can be negative or beyond block 4.
1475+ 7316                              Colon_Def ERROR,  "ERROR", is_normal
1475+ 7316             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1475+ 7316             >
1475+ 7316             >Dict_Ptr        defl    $
1475+ 7316             >
1475+ 7316             >//              ______________________________________________________________________
1475+ 7316             >//              Heap part
1475+ 7316             >
1475+ 7316             >
1475+ 7316             >                org     (Heap_Ptr & $1FFF) + $E000
1475+ E8AD             >
1475+ E8AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1475+ E8AD             >Latest_Definition defl  Heap_Ptr
1475+ E8AD             >
1475+ E8AD             >                // dummy db directives used to calculate length of namec
1475+ E8AD 45 52 52 4F >                db      "ERROR"
1475+ E8B1 52          >
1475+ E8B2             >len_NFA         defl    $ - temp_NFA
1475+ E8B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1475+ E8AD             >
1475+ E8AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1475+ E8AE 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1475+ E8B2 52          >
1475+ E8B3             >                org     $-1                 // alter last byte of Name just above to set
1475+ E8B2 D2          >                db      {b $} | END_BIT     // msb as name end
1475+ E8B3             >
1475+ E8B3 A1 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1475+ E8B5             >Prev_Ptr        defl    Heap_Ptr
1475+ E8B5             >
1475+ E8B5             >mirror_Ptr      defl    $
1475+ E8B5             >
1475+ E8B5 18 73       >                dw      Dict_Ptr + 2        // xt
1475+ E8B7             >Heap_Ptr        defl    $ - $E000           // save current HP
1475+ E8B7             >
1475+ E8B7             >Current_HP      defl  $ - $E000             // used to set HP once!
1475+ E8B7             >
1475+ E8B7             >//              ______________________________________________________________________
1475+ E8B7             >//              Dictionary part
1475+ E8B7             >
1475+ E8B7             >                org     Dict_Ptr
1475+ 7316             >
1475+ 7316 B5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1475+ 7318             >
1475+ 7318             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1475+ 7318 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1475+ 731B             >
1475+ 731B             >
1475+ 731B             >                endif           ; ok        // for other definitions it "points" the correct handler
1475+ 731B             >                // Use of "; ok" to suppress "warning[fwdref]"
1475+ 731B             >
1475+ 731B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1476+ 731B F6 6A 8F 69                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1476+ 731F 86 68
1477+ 7321                                                              // if
1478+ 7321 F5 63                        dw      ZBRANCH
1479+ 7323 04 00                        dw      Error_Endif_1 - $
1480+ 7325 0F 73                        dw          CABORT              //      (abort)
1481+ 7327              Error_Endif_1:                                  // endif
1482+ 7327 AA 6B 18 6F                  dw      HERE, COUNT, TYPE       // here count type
1482+ 732B 6C 6F
1483+ 732D 09 71                        dw      C_DOT_QUOTE             // .( ? )
1484+ 732F 02 3F 20                     db      2, "? "
1485+ 7332 88 77                        dw      MESSAGE                 // message  ( forward )
1486+ 7334 DE 6A 8F 69                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1486+ 7338 3F 68
1487+ 733A 26 6B 8F 69                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1487+ 733E 4C 6C
1488+ 7340                                                              // if
1489+ 7340 F5 63                        dw      ZBRANCH
1490+ 7342 08 00                        dw      Error_Endif_2 - $
1491+ 7344 2C 6B 8F 69                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1491+ 7348 1E 69
1492+ 734A              Error_Endif_2:                                  // endif
1493+ 734A 66 75                        dw      QUIT                    // quit ( forward )
1494+ 734C 4F 68                        dw      EXIT                    // ;
1495+ 734E              //  ______________________________________________________________________
1496+ 734E              //
1497+ 734E              // id.          nfa --
1498+ 734E                              Colon_Def ID_DOT,  "ID.", is_normal
1498+ 734E             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1498+ 734E             >
1498+ 734E             >Dict_Ptr        defl    $
1498+ 734E             >
1498+ 734E             >//              ______________________________________________________________________
1498+ 734E             >//              Heap part
1498+ 734E             >
1498+ 734E             >
1498+ 734E             >                org     (Heap_Ptr & $1FFF) + $E000
1498+ E8B7             >
1498+ E8B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1498+ E8B7             >Latest_Definition defl  Heap_Ptr
1498+ E8B7             >
1498+ E8B7             >                // dummy db directives used to calculate length of namec
1498+ E8B7 49 44 2E    >                db      "ID."
1498+ E8BA             >len_NFA         defl    $ - temp_NFA
1498+ E8BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1498+ E8B7             >
1498+ E8B7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1498+ E8B8 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1498+ E8BB             >                org     $-1                 // alter last byte of Name just above to set
1498+ E8BA AE          >                db      {b $} | END_BIT     // msb as name end
1498+ E8BB             >
1498+ E8BB AD 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1498+ E8BD             >Prev_Ptr        defl    Heap_Ptr
1498+ E8BD             >
1498+ E8BD             >mirror_Ptr      defl    $
1498+ E8BD             >
1498+ E8BD 50 73       >                dw      Dict_Ptr + 2        // xt
1498+ E8BF             >Heap_Ptr        defl    $ - $E000           // save current HP
1498+ E8BF             >
1498+ E8BF             >Current_HP      defl  $ - $E000             // used to set HP once!
1498+ E8BF             >
1498+ E8BF             >//              ______________________________________________________________________
1498+ E8BF             >//              Dictionary part
1498+ E8BF             >
1498+ E8BF             >                org     Dict_Ptr
1498+ 734E             >
1498+ 734E BD 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1498+ 7350             >
1498+ 7350             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1498+ 7350 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1498+ 7353             >
1498+ 7353             >
1498+ 7353             >                endif           ; ok        // for other definitions it "points" the correct handler
1498+ 7353             >                // Use of "; ok" to suppress "warning[fwdref]"
1498+ 7353             >
1498+ 7353             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1499+ 7353 02 6D                        dw      QTOHEAP
1500+ 7355 25 69 8C 6A                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1500+ 7359 7E 6C
1501+ 735B BA 68                        dw      ONE_PLUS                // 1+
1502+ 735D 01 69 E9 6B                  dw      OVER, SUBTRACT          // over -
1503+ 7361 25 69 59 68                  dw      DUP, TO_R               // >r
1504+ 7365 AF 70 1E 69                  dw      PAD, SWAP               // pad swap
1505+ 7369 90 67                        dw      CMOVE                   // cmove
1506+ 736B AF 70 BA 68                  dw      PAD, ONE_PLUS           // pad 1+
1507+ 736F 64 68 C1 68                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1508+ 7373 6C 6F 73 6C                  dw      TYPE, SPACE             // type
1509+ 7377 4F 68                        dw      EXIT                    // ;
1510+ 7379
1511+ 7379              //  ______________________________________________________________________
1512+ 7379              //
1513+ 7379              // code         -- cccc
1514+ 7379                              Colon_Def CODE,  "CODE", is_normal
1514+ 7379             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1514+ 7379             >
1514+ 7379             >Dict_Ptr        defl    $
1514+ 7379             >
1514+ 7379             >//              ______________________________________________________________________
1514+ 7379             >//              Heap part
1514+ 7379             >
1514+ 7379             >
1514+ 7379             >                org     (Heap_Ptr & $1FFF) + $E000
1514+ E8BF             >
1514+ E8BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1514+ E8BF             >Latest_Definition defl  Heap_Ptr
1514+ E8BF             >
1514+ E8BF             >                // dummy db directives used to calculate length of namec
1514+ E8BF 43 4F 44 45 >                db      "CODE"
1514+ E8C3             >len_NFA         defl    $ - temp_NFA
1514+ E8C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1514+ E8BF             >
1514+ E8BF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1514+ E8C0 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1514+ E8C4             >                org     $-1                 // alter last byte of Name just above to set
1514+ E8C3 C5          >                db      {b $} | END_BIT     // msb as name end
1514+ E8C4             >
1514+ E8C4 B7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1514+ E8C6             >Prev_Ptr        defl    Heap_Ptr
1514+ E8C6             >
1514+ E8C6             >mirror_Ptr      defl    $
1514+ E8C6             >
1514+ E8C6 7B 73       >                dw      Dict_Ptr + 2        // xt
1514+ E8C8             >Heap_Ptr        defl    $ - $E000           // save current HP
1514+ E8C8             >
1514+ E8C8             >Current_HP      defl  $ - $E000             // used to set HP once!
1514+ E8C8             >
1514+ E8C8             >//              ______________________________________________________________________
1514+ E8C8             >//              Dictionary part
1514+ E8C8             >
1514+ E8C8             >                org     Dict_Ptr
1514+ 7379             >
1514+ 7379 C6 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1514+ 737B             >
1514+ 737B             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1514+ 737B CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1514+ 737E             >
1514+ 737E             >
1514+ 737E             >                endif           ; ok        // for other definitions it "points" the correct handler
1514+ 737E             >                // Use of "; ok" to suppress "warning[fwdref]"
1514+ 737E             >
1514+ 737E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1515+ 737E 02 73                        dw      LFIND                   // -find
1516+ 7380                                                              // if
1517+ 7380 F5 63                        dw      ZBRANCH
1518+ 7382 10 00                        dw      Code_Endif - $
1519+ 7384 0A 69                        dw          DROP                //      drop
1520+ 7386 68 6D 50 73                  dw          TO_NAME, ID_DOT     //      >name id.
1521+ 738A A3 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1521+ 738E 88 77
1522+ 7390 73 6C                        dw          SPACE               //      space
1523+ 7392              Code_Endif:                                     // endif
1524+ 7392 AA 6B                        dw      HERE                    // here
1525+ 7394                                                              // ( ---- here begins NFA ---- )
1526+ 7394 25 69 A4 69                  dw      DUP, CFETCH             // dup c@
1527+ 7398 F0 6A 8F 69                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1527+ 739C 26 6C
1528+ 739E BA 68                        dw      ONE_PLUS                // 1+
1529+ 73A0 25 69 B5 6B                  dw      DUP, ALLOT              // dup allot
1530+ 73A4 D0 68 D0 68                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1531+ 73A8 59 68                        dw      TO_R                    // >r
1532+ 73AA 25 69                        dw      DUP                     // dup
1533+ 73AC A3 63                        dw      LIT
1534+ 73AE A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1535+ 73B0 86 69                        dw      TOGGLE                  // toggle
1536+ 73B2 AA 6B C1 68                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1537+ 73B6 A3 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1537+ 73BA 86 69
1538+ 73BC                                                              // ( ---- here is LFA ---- )
1539+ 73BC 4A 6B 8F 69                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1539+ 73C0 8F 69
1540+ 73C2 C0 6B                        dw      COMMA
1541+ 73C4 25 69 D0 68                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1541+ 73C8 C0 6B
1542+ 73CA 13 6D                        dw      HP_FETCH                // hp@
1543+ 73CC 4A 6B 8F 69                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1543+ 73D0 99 69
1544+ 73D2 13 6D E4 6C                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1545+ 73D6 6F 68 90 67                  dw      R_OP, CMOVE
1546+ 73DA 6F 68 E1 68                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1546+ 73DE B5 6B
1547+ 73E0 64 68 1A 6B                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1547+ 73E4 77 69
1548+ 73E6 13 6D D4 68                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1549+ 73EA C0 6B                        dw      COMMA
1550+ 73EC 85 6A 25 6D                  dw      ZERO, SKIP_HP_PAGE
1551+ 73F0                                                              // ( ---- here is LFA ---- )
1552+ 73F0 4F 68                        dw      EXIT                    // ;
1553+ 73F2
1554+ 73F2              //  ______________________________________________________________________
1555+ 73F2              //
1556+ 73F2              // create       -- cccc     ( compile time )
1557+ 73F2              //              -- a        ( run time )
1558+ 73F2                              Colon_Def CREATE,  "CREATE", is_normal
1558+ 73F2             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1558+ 73F2             >
1558+ 73F2             >Dict_Ptr        defl    $
1558+ 73F2             >
1558+ 73F2             >//              ______________________________________________________________________
1558+ 73F2             >//              Heap part
1558+ 73F2             >
1558+ 73F2             >
1558+ 73F2             >                org     (Heap_Ptr & $1FFF) + $E000
1558+ E8C8             >
1558+ E8C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1558+ E8C8             >Latest_Definition defl  Heap_Ptr
1558+ E8C8             >
1558+ E8C8             >                // dummy db directives used to calculate length of namec
1558+ E8C8 43 52 45 41 >                db      "CREATE"
1558+ E8CC 54 45       >
1558+ E8CE             >len_NFA         defl    $ - temp_NFA
1558+ E8CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1558+ E8C8             >
1558+ E8C8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1558+ E8C9 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1558+ E8CD 54 45       >
1558+ E8CF             >                org     $-1                 // alter last byte of Name just above to set
1558+ E8CE C5          >                db      {b $} | END_BIT     // msb as name end
1558+ E8CF             >
1558+ E8CF BF 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1558+ E8D1             >Prev_Ptr        defl    Heap_Ptr
1558+ E8D1             >
1558+ E8D1             >mirror_Ptr      defl    $
1558+ E8D1             >
1558+ E8D1 F4 73       >                dw      Dict_Ptr + 2        // xt
1558+ E8D3             >Heap_Ptr        defl    $ - $E000           // save current HP
1558+ E8D3             >
1558+ E8D3             >Current_HP      defl  $ - $E000             // used to set HP once!
1558+ E8D3             >
1558+ E8D3             >//              ______________________________________________________________________
1558+ E8D3             >//              Dictionary part
1558+ E8D3             >
1558+ E8D3             >                org     Dict_Ptr
1558+ 73F2             >
1558+ 73F2 D1 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1558+ 73F4             >
1558+ 73F4             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1558+ 73F4 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1558+ 73F7             >
1558+ 73F7             >
1558+ 73F7             >                endif           ; ok        // for other definitions it "points" the correct handler
1558+ 73F7             >                // Use of "; ok" to suppress "warning[fwdref]"
1558+ 73F7             >
1558+ 73F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1559+ 73F7 7B 73 88 6E                  dw      CODE, SMUDGE            // code smudge
1560+ 73FB A3 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1560+ 73FF CF 6B
1561+ 7401 A3 63 6C 6A                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1561+ 7405 C0 6B
1562+ 7407 C4 6E                        dw      C_SEMICOLON_CODE
1563+ 7409                              // this routine is called from the call coded in CFA
1564+ 7409              Create_Ptr:
1565+ 7409
1566+ 7409
1567+ 7409
1568+ 7409                              next
1568+ 7409 DD E9       >                jp      (ix)
1569+ 740B
1570+ 740B              //  ______________________________________________________________________
1571+ 740B              //
1572+ 740B              // [compile]    -- cccc     ( compile time )
1573+ 740B                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1573+ 740B             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1573+ 740B             >
1573+ 740B             >Dict_Ptr        defl    $
1573+ 740B             >
1573+ 740B             >//              ______________________________________________________________________
1573+ 740B             >//              Heap part
1573+ 740B             >
1573+ 740B             >
1573+ 740B             >                org     (Heap_Ptr & $1FFF) + $E000
1573+ E8D3             >
1573+ E8D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1573+ E8D3             >Latest_Definition defl  Heap_Ptr
1573+ E8D3             >
1573+ E8D3             >                // dummy db directives used to calculate length of namec
1573+ E8D3 5B 43 4F 4D >                db      "[COMPILE]"
1573+ E8D7 50 49 4C 45 >
1573+ E8DB 5D          >
1573+ E8DC             >len_NFA         defl    $ - temp_NFA
1573+ E8DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1573+ E8D3             >
1573+ E8D3 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1573+ E8D4 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1573+ E8D8 50 49 4C 45 >
1573+ E8DC 5D          >
1573+ E8DD             >                org     $-1                 // alter last byte of Name just above to set
1573+ E8DC DD          >                db      {b $} | END_BIT     // msb as name end
1573+ E8DD             >
1573+ E8DD C8 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1573+ E8DF             >Prev_Ptr        defl    Heap_Ptr
1573+ E8DF             >
1573+ E8DF             >mirror_Ptr      defl    $
1573+ E8DF             >
1573+ E8DF 0D 74       >                dw      Dict_Ptr + 2        // xt
1573+ E8E1             >Heap_Ptr        defl    $ - $E000           // save current HP
1573+ E8E1             >
1573+ E8E1             >Current_HP      defl  $ - $E000             // used to set HP once!
1573+ E8E1             >
1573+ E8E1             >//              ______________________________________________________________________
1573+ E8E1             >//              Dictionary part
1573+ E8E1             >
1573+ E8E1             >                org     Dict_Ptr
1573+ 740B             >
1573+ 740B DF 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1573+ 740D             >
1573+ 740D             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1573+ 740D CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1573+ 7410             >
1573+ 7410             >
1573+ 7410             >                endif           ; ok        // for other definitions it "points" the correct handler
1573+ 7410             >                // Use of "; ok" to suppress "warning[fwdref]"
1573+ 7410             >
1573+ 7410             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1574+ 7410 02 73                        dw      LFIND                   // -find      (  cfa  b  f  )
1575+ 7412 74 68                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1576+ 7414 85 6A DE 6D                  dw      ZERO, QERROR            // 0 ?error
1577+ 7418 0A 69                        dw      DROP                    // drop       (  cfa  )
1578+ 741A C0 6B                        dw      COMMA                   // ,
1579+ 741C 4F 68                        dw      EXIT                    // ; immediate
1580+ 741E
1581+ 741E              //  ______________________________________________________________________
1582+ 741E              //
1583+ 741E              // literal      n --      ( compile time )
1584+ 741E                              Colon_Def LITERAL,  "LITERAL", is_immediate
1584+ 741E             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1584+ 741E             >
1584+ 741E             >Dict_Ptr        defl    $
1584+ 741E             >
1584+ 741E             >//              ______________________________________________________________________
1584+ 741E             >//              Heap part
1584+ 741E             >
1584+ 741E             >
1584+ 741E             >                org     (Heap_Ptr & $1FFF) + $E000
1584+ E8E1             >
1584+ E8E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1584+ E8E1             >Latest_Definition defl  Heap_Ptr
1584+ E8E1             >
1584+ E8E1             >                // dummy db directives used to calculate length of namec
1584+ E8E1 4C 49 54 45 >                db      "LITERAL"
1584+ E8E5 52 41 4C    >
1584+ E8E8             >len_NFA         defl    $ - temp_NFA
1584+ E8E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1584+ E8E1             >
1584+ E8E1 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1584+ E8E2 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1584+ E8E6 52 41 4C    >
1584+ E8E9             >                org     $-1                 // alter last byte of Name just above to set
1584+ E8E8 CC          >                db      {b $} | END_BIT     // msb as name end
1584+ E8E9             >
1584+ E8E9 D3 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1584+ E8EB             >Prev_Ptr        defl    Heap_Ptr
1584+ E8EB             >
1584+ E8EB             >mirror_Ptr      defl    $
1584+ E8EB             >
1584+ E8EB 20 74       >                dw      Dict_Ptr + 2        // xt
1584+ E8ED             >Heap_Ptr        defl    $ - $E000           // save current HP
1584+ E8ED             >
1584+ E8ED             >Current_HP      defl  $ - $E000             // used to set HP once!
1584+ E8ED             >
1584+ E8ED             >//              ______________________________________________________________________
1584+ E8ED             >//              Dictionary part
1584+ E8ED             >
1584+ E8ED             >                org     Dict_Ptr
1584+ 741E             >
1584+ 741E EB 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1584+ 7420             >
1584+ 7420             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1584+ 7420 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1584+ 7423             >
1584+ 7423             >
1584+ 7423             >                endif           ; ok        // for other definitions it "points" the correct handler
1584+ 7423             >                // Use of "; ok" to suppress "warning[fwdref]"
1584+ 7423             >
1584+ 7423             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1585+ 7423 50 6B 8F 69                  dw      STATE, FETCH            // state @
1586+ 7427                                                              // if
1587+ 7427 F5 63                        dw      ZBRANCH
1588+ 7429 08 00                        dw      Literal_Endif - $
1589+ 742B 4E 6E A3 63                  dw          COMPILE, LIT        //      compile lit
1590+ 742F C0 6B                        dw          COMMA               //      ,
1591+ 7431              Literal_Endif:                                  // endif
1592+ 7431 4F 68                        dw      EXIT                    // ; immediate
1593+ 7433
1594+ 7433              //  ______________________________________________________________________
1595+ 7433              //
1596+ 7433              // dliteral     n --      ( compile time )
1597+ 7433                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1597+ 7433             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1597+ 7433             >
1597+ 7433             >Dict_Ptr        defl    $
1597+ 7433             >
1597+ 7433             >//              ______________________________________________________________________
1597+ 7433             >//              Heap part
1597+ 7433             >
1597+ 7433             >
1597+ 7433             >                org     (Heap_Ptr & $1FFF) + $E000
1597+ E8ED             >
1597+ E8ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1597+ E8ED             >Latest_Definition defl  Heap_Ptr
1597+ E8ED             >
1597+ E8ED             >                // dummy db directives used to calculate length of namec
1597+ E8ED 44 4C 49 54 >                db      "DLITERAL"
1597+ E8F1 45 52 41 4C >
1597+ E8F5             >len_NFA         defl    $ - temp_NFA
1597+ E8F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1597+ E8ED             >
1597+ E8ED C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1597+ E8EE 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1597+ E8F2 45 52 41 4C >
1597+ E8F6             >                org     $-1                 // alter last byte of Name just above to set
1597+ E8F5 CC          >                db      {b $} | END_BIT     // msb as name end
1597+ E8F6             >
1597+ E8F6 E1 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1597+ E8F8             >Prev_Ptr        defl    Heap_Ptr
1597+ E8F8             >
1597+ E8F8             >mirror_Ptr      defl    $
1597+ E8F8             >
1597+ E8F8 35 74       >                dw      Dict_Ptr + 2        // xt
1597+ E8FA             >Heap_Ptr        defl    $ - $E000           // save current HP
1597+ E8FA             >
1597+ E8FA             >Current_HP      defl  $ - $E000             // used to set HP once!
1597+ E8FA             >
1597+ E8FA             >//              ______________________________________________________________________
1597+ E8FA             >//              Dictionary part
1597+ E8FA             >
1597+ E8FA             >                org     Dict_Ptr
1597+ 7433             >
1597+ 7433 F8 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1597+ 7435             >
1597+ 7435             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1597+ 7435 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1597+ 7438             >
1597+ 7438             >
1597+ 7438             >                endif           ; ok        // for other definitions it "points" the correct handler
1597+ 7438             >                // Use of "; ok" to suppress "warning[fwdref]"
1597+ 7438             >
1597+ 7438             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1598+ 7438 50 6B 8F 69                  dw      STATE, FETCH            // state @
1599+ 743C                                                              // if
1600+ 743C F5 63                        dw      ZBRANCH
1601+ 743E 08 00                        dw      DLiteral_Endif - $
1602+ 7440 1E 69                        dw          SWAP                //      swap
1603+ 7442 20 74 20 74                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1604+ 7446              DLiteral_Endif:                                 // endif
1605+ 7446 4F 68                        dw      EXIT                    // ; immediate
1606+ 7448
1607+ 7448              //  ______________________________________________________________________
1608+ 7448              //
1609+ 7448              // [char]       n --      ( compile time )
1610+ 7448              // inside colon definition, gets first character from next input word
1611+ 7448              // and compiles it as literal.
1612+ 7448                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1612+ 7448             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1612+ 7448             >
1612+ 7448             >Dict_Ptr        defl    $
1612+ 7448             >
1612+ 7448             >//              ______________________________________________________________________
1612+ 7448             >//              Heap part
1612+ 7448             >
1612+ 7448             >
1612+ 7448             >                org     (Heap_Ptr & $1FFF) + $E000
1612+ E8FA             >
1612+ E8FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1612+ E8FA             >Latest_Definition defl  Heap_Ptr
1612+ E8FA             >
1612+ E8FA             >                // dummy db directives used to calculate length of namec
1612+ E8FA 5B 43 48 41 >                db      "[CHAR]"
1612+ E8FE 52 5D       >
1612+ E900             >len_NFA         defl    $ - temp_NFA
1612+ E900             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1612+ E8FA             >
1612+ E8FA C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1612+ E8FB 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1612+ E8FF 52 5D       >
1612+ E901             >                org     $-1                 // alter last byte of Name just above to set
1612+ E900 DD          >                db      {b $} | END_BIT     // msb as name end
1612+ E901             >
1612+ E901 ED 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1612+ E903             >Prev_Ptr        defl    Heap_Ptr
1612+ E903             >
1612+ E903             >mirror_Ptr      defl    $
1612+ E903             >
1612+ E903 4A 74       >                dw      Dict_Ptr + 2        // xt
1612+ E905             >Heap_Ptr        defl    $ - $E000           // save current HP
1612+ E905             >
1612+ E905             >Current_HP      defl  $ - $E000             // used to set HP once!
1612+ E905             >
1612+ E905             >//              ______________________________________________________________________
1612+ E905             >//              Dictionary part
1612+ E905             >
1612+ E905             >                org     Dict_Ptr
1612+ 7448             >
1612+ 7448 03 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1612+ 744A             >
1612+ 744A             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1612+ 744A CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1612+ 744D             >
1612+ 744D             >
1612+ 744D             >                endif           ; ok        // for other definitions it "points" the correct handler
1612+ 744D             >                // Use of "; ok" to suppress "warning[fwdref]"
1612+ 744D             >
1612+ 744D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1613+ 744D 20 71 20 74                  dw      CHAR, LITERAL           // char [compile] literal
1614+ 7451 4F 68                        dw      EXIT                    // ; immediate
1615+ 7453
1616+ 7453              //  ______________________________________________________________________
1617+ 7453              //
1618+ 7453              // 0x00         n --      ( compile time )
1619+ 7453                              Colon_Def NUL_WORD,  $00, is_immediate
1619+ 7453             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1619+ 7453             >
1619+ 7453             >Dict_Ptr        defl    $
1619+ 7453             >
1619+ 7453             >//              ______________________________________________________________________
1619+ 7453             >//              Heap part
1619+ 7453             >
1619+ 7453             >
1619+ 7453             >                org     (Heap_Ptr & $1FFF) + $E000
1619+ E905             >
1619+ E905             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1619+ E905             >Latest_Definition defl  Heap_Ptr
1619+ E905             >
1619+ E905             >                // dummy db directives used to calculate length of namec
1619+ E905 00          >                db      $00
1619+ E906             >len_NFA         defl    $ - temp_NFA
1619+ E906             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1619+ E905             >
1619+ E905 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1619+ E906 00          >                db      $00               // name string in 7-bit ascii, but
1619+ E907             >                org     $-1                 // alter last byte of Name just above to set
1619+ E906 80          >                db      {b $} | END_BIT     // msb as name end
1619+ E907             >
1619+ E907 FA 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1619+ E909             >Prev_Ptr        defl    Heap_Ptr
1619+ E909             >
1619+ E909             >mirror_Ptr      defl    $
1619+ E909             >
1619+ E909 55 74       >                dw      Dict_Ptr + 2        // xt
1619+ E90B             >Heap_Ptr        defl    $ - $E000           // save current HP
1619+ E90B             >
1619+ E90B             >Current_HP      defl  $ - $E000             // used to set HP once!
1619+ E90B             >
1619+ E90B             >//              ______________________________________________________________________
1619+ E90B             >//              Dictionary part
1619+ E90B             >
1619+ E90B             >                org     Dict_Ptr
1619+ 7453             >
1619+ 7453 09 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1619+ 7455             >
1619+ 7455             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1619+ 7455 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1619+ 7458             >
1619+ 7458             >
1619+ 7458             >                endif           ; ok        // for other definitions it "points" the correct handler
1619+ 7458             >                // Use of "; ok" to suppress "warning[fwdref]"
1619+ 7458             >
1619+ 7458             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1620+ 7458 26 6B 8F 69                  dw      BLK, FETCH, ONE         // blk @ 1
1620+ 745C 8C 6A
1621+ 745E 1B 6C                        dw      GREATER                 // > if
1622+ 7460                                                              // if
1623+ 7460 F5 63                        dw      ZBRANCH
1624+ 7462 28 00                        dw      Nul_Else_1 - $
1625+ 7464 8C 6A 26 6B                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1625+ 7468 77 69
1626+ 746A 85 6A 2C 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
1626+ 746E 99 69
1627+ 7470 26 6B 8F 69                  dw          BLK, FETCH          //      blk @
1628+ 7474 BD 6A                        dw          BSCR                //      b/scr
1629+ 7476 C1 68                        dw          ONE_SUBTRACT        //      1 -
1630+ 7478 0F 68                        dw          AND_OP              //      and  ( this is tricky )
1631+ 747A 74 68                        dw          ZEQUAL              //      0=
1632+ 747C                                                              //      if
1633+ 747C F5 63                        dw          ZBRANCH
1634+ 747E 08 00                        dw          Nul_Endif_2 - $
1635+ 7480 06 6E                        dw              QEXEC           //          ?exec
1636+ 7482 64 68 0A 69                  dw              R_TO, DROP      //          r> drop
1637+ 7486              Nul_Endif_2:                                    //      endif
1638+ 7486 E8 63                        dw      BRANCH
1639+ 7488 06 00                        dw      Nul_Endif_1 - $
1640+ 748A              Nul_Else_1:                                     // else
1641+ 748A 64 68 0A 69                  dw          R_TO, DROP          //      r> drop
1642+ 748E              Nul_Endif_1:                                    // endif
1643+ 748E 4F 68                        dw      EXIT                    // ;
1644+ 7490
1645+ 7490              //  ______________________________________________________________________
1646+ 7490              //
1647+ 7490              // ?stack       --
1648+ 7490              // Raise error #1 if stack is empty and you pop it
1649+ 7490              // Raise error #7 if stack is full.
1650+ 7490              // This means SP must always stay between HERE and FFFF
1651+ 7490              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1652+ 7490              // for Next 8K MMU paging this is $DOE8
1653+ 7490                              Colon_Def QSTACK, "?STACK", is_normal
1653+ 7490             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1653+ 7490             >
1653+ 7490             >Dict_Ptr        defl    $
1653+ 7490             >
1653+ 7490             >//              ______________________________________________________________________
1653+ 7490             >//              Heap part
1653+ 7490             >
1653+ 7490             >
1653+ 7490             >                org     (Heap_Ptr & $1FFF) + $E000
1653+ E90B             >
1653+ E90B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1653+ E90B             >Latest_Definition defl  Heap_Ptr
1653+ E90B             >
1653+ E90B             >                // dummy db directives used to calculate length of namec
1653+ E90B 3F 53 54 41 >                db      "?STACK"
1653+ E90F 43 4B       >
1653+ E911             >len_NFA         defl    $ - temp_NFA
1653+ E911             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1653+ E90B             >
1653+ E90B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1653+ E90C 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1653+ E910 43 4B       >
1653+ E912             >                org     $-1                 // alter last byte of Name just above to set
1653+ E911 CB          >                db      {b $} | END_BIT     // msb as name end
1653+ E912             >
1653+ E912 05 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1653+ E914             >Prev_Ptr        defl    Heap_Ptr
1653+ E914             >
1653+ E914             >mirror_Ptr      defl    $
1653+ E914             >
1653+ E914 92 74       >                dw      Dict_Ptr + 2        // xt
1653+ E916             >Heap_Ptr        defl    $ - $E000           // save current HP
1653+ E916             >
1653+ E916             >Current_HP      defl  $ - $E000             // used to set HP once!
1653+ E916             >
1653+ E916             >//              ______________________________________________________________________
1653+ E916             >//              Dictionary part
1653+ E916             >
1653+ E916             >                org     Dict_Ptr
1653+ 7490             >
1653+ 7490 14 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1653+ 7492             >
1653+ 7492             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1653+ 7492 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1653+ 7495             >
1653+ 7495             >
1653+ 7495             >                endif           ; ok        // for other definitions it "points" the correct handler
1653+ 7495             >                // Use of "; ok" to suppress "warning[fwdref]"
1653+ 7495             >
1653+ 7495             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1654+ 7495 36 68                        dw      SPFETCH                 // sp@
1655+ 7497 DE 6A 8F 69                  dw      S0, FETCH               // s0 @
1656+ 749B 1E 69 00 6C                  dw      SWAP, ULESS             // swap u<
1657+ 749F 8C 6A DE 6D                  dw      ONE, QERROR             // 1 ?error
1658+ 74A3 AA 6B                        dw      HERE                    // here
1659+ 74A5 DE 6A 8F 69                  dw      S0, FETCH, LESS         // s0 @ <
1659+ 74A9 0E 6C
1660+ 74AB                                                              // if
1661+ 74AB F5 63                        dw      ZBRANCH
1662+ 74AD 14 00                        dw      QStack_Endif - $
1663+ 74AF 36 68                        dw          SPFETCH             //      sp@
1664+ 74B1 AA 6B A3 63                  dw          HERE, LIT, 128      //      here 128
1664+ 74B5 80 00
1665+ 74B7 A1 68 00 6C                  dw          PLUS, ULESS         //      plus u<
1666+ 74BB A3 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1666+ 74BF DE 6D
1667+ 74C1              QStack_Endif:                                   // endif
1668+ 74C1 4F 68                        dw      EXIT                    // ;
1669+ 74C3
1670+ 74C3
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
 140  74C3                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
   1+ 74C3              //  ______________________________________________________________________
   2+ 74C3              //
   3+ 74C3              //  L2.asm
   4+ 74C3              //
   5+ 74C3              //  Level-2 3dos
   6+ 74C3              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 74C3              //  ______________________________________________________________________
   8+ 74C3
   9+ 74C3
  10+ 74C3              //  ______________________________________________________________________
  11+ 74C3              //
  12+ 74C3              // interpret    --
  13+ 74C3              // This is the text interpreter.
  14+ 74C3              // It executes or compiles, depending on STATE, the text coming from
  15+ 74C3              // current input stream.
  16+ 74C3              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 74C3              // the word is interpreted as numeric and converted, using current BASE,
  18+ 74C3              // leaving on top of stack a single or double precision number, depending
  19+ 74C3              // on the presence of a decimal point.
  20+ 74C3              // If the number conversion fails, the terminal is notified with ? followed
  21+ 74C3              // by the offending word.
  22+ 74C3                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 74C3             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 74C3             >
  22+ 74C3             >Dict_Ptr        defl    $
  22+ 74C3             >
  22+ 74C3             >//              ______________________________________________________________________
  22+ 74C3             >//              Heap part
  22+ 74C3             >
  22+ 74C3             >
  22+ 74C3             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E916             >
  22+ E916             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E916             >Latest_Definition defl  Heap_Ptr
  22+ E916             >
  22+ E916             >                // dummy db directives used to calculate length of namec
  22+ E916 49 4E 54 45 >                db      "INTERPRET"
  22+ E91A 52 50 52 45 >
  22+ E91E 54          >
  22+ E91F             >len_NFA         defl    $ - temp_NFA
  22+ E91F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E916             >
  22+ E916 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E917 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E91B 52 50 52 45 >
  22+ E91F 54          >
  22+ E920             >                org     $-1                 // alter last byte of Name just above to set
  22+ E91F D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E920             >
  22+ E920 0B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E922             >Prev_Ptr        defl    Heap_Ptr
  22+ E922             >
  22+ E922             >mirror_Ptr      defl    $
  22+ E922             >
  22+ E922 C5 74       >                dw      Dict_Ptr + 2        // xt
  22+ E924             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E924             >
  22+ E924             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E924             >
  22+ E924             >//              ______________________________________________________________________
  22+ E924             >//              Dictionary part
  22+ E924             >
  22+ E924             >                org     Dict_Ptr
  22+ 74C3             >
  22+ 74C3 22 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 74C5             >
  22+ 74C5             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 74C5 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 74C8             >
  22+ 74C8             >
  22+ 74C8             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 74C8             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 74C8             >
  22+ 74C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 74C8
  24+ 74C8              Interpret_Begin:                                        // begin
  25+ 74C8 02 73                        dw          LFIND                       //      -find
  26+ 74CA                                                                      //      if
  27+ 74CA F5 63                        dw          ZBRANCH
  28+ 74CC 1A 00                        dw          Interpret_Else_1 - $
  29+ 74CE 50 6B 8F 69                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 74D2 0E 6C
  30+ 74D4                                                                      //          if
  31+ 74D4 F5 63                        dw              ZBRANCH
  32+ 74D6 08 00                        dw              Interpret_Else_2 - $
  33+ 74D8 63 6E                        dw                  COMPILE_XT          //              compile,
  34+ 74DA                                                                      //          else
  35+ 74DA E8 63                        dw              BRANCH
  36+ 74DC 06 00                        dw              Interpret_Endif_2 - $
  37+ 74DE              Interpret_Else_2:
  38+ 74DE AE 63 4C 6A                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 74E2              Interpret_Endif_2:                                      //          endif
  40+ 74E2                                                                      //      else
  41+ 74E2 E8 63                        dw          BRANCH
  42+ 74E4 1A 00                        dw          Interpret_Endif_1 - $
  43+ 74E6              Interpret_Else_1:
  44+ 74E6 AA 6B 52 72                  dw              HERE, NUMBER            //          here number
  45+ 74EA 5C 6B 8F 69                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 74EE BA 68
  46+ 74F0                                                                      //          if
  47+ 74F0 F5 63                        dw              ZBRANCH
  48+ 74F2 08 00                        dw              Interpret_Else_3 - $
  49+ 74F4              //              dw                  NMODE, FETCH        //              nmode @
  50+ 74F4              //                                                      //              if
  51+ 74F4              //              dw                  ZBRANCH
  52+ 74F4              //              dw                  Interpret_Endif_4 - $
  53+ 74F4              //              dw                      ONE, ZERO       //                  1 0
  54+ 74F4              //              dw                      TWO_DROP        //                  2drop
  55+ 74F4              //Interpret_Endif_4:                                      //              endif
  56+ 74F4 35 74                        dw                  DLITERAL            //              [compile] dliteral
  57+ 74F6                                                                      //          else
  58+ 74F6 E8 63                        dw              BRANCH
  59+ 74F8 06 00                        dw              Interpret_Endif_3 - $
  60+ 74FA              Interpret_Else_3:
  61+ 74FA 0A 69                        dw                  DROP                //              drop
  62+ 74FC 20 74                        dw                  LITERAL             //              [compile]  literal
  63+ 74FE              Interpret_Endif_3:                                      //          endif
  64+ 74FE              Interpret_Endif_1:                                      //      endif
  65+ 74FE 92 74                        dw          QSTACK                      //      ?stack
  66+ 7500 AA 66                        dw          QTERMINAL                   //      ?terminal
  67+ 7502                                                                      //      if
  68+ 7502 F5 63                        dw          ZBRANCH
  69+ 7504 04 00                        dw          Interpret_Endif_5 - $
  70+ 7506 66 75                        dw              QUIT                    //          quit
  71+ 7508              Interpret_Endif_5:                                      //      endif
  72+ 7508 E8 63                        dw      BRANCH
  73+ 750A BE FF                        dw      Interpret_Begin - $
  74+ 750C 4F 68                        dw      EXIT                            // ;
  75+ 750E
  76+ 750E              //  ______________________________________________________________________
  77+ 750E              //
  78+ 750E              // vocabulary   -- cccc     ( compile time )
  79+ 750E              // Defining word used in the form   VOCABULARY cccc
  80+ 750E              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 750E              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 750E              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 750E              // so new definitions can be inserted in that vocabulary.
  84+ 750E                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 750E             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 750E             >
  84+ 750E             >Dict_Ptr        defl    $
  84+ 750E             >
  84+ 750E             >//              ______________________________________________________________________
  84+ 750E             >//              Heap part
  84+ 750E             >
  84+ 750E             >
  84+ 750E             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E924             >
  84+ E924             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E924             >Latest_Definition defl  Heap_Ptr
  84+ E924             >
  84+ E924             >                // dummy db directives used to calculate length of namec
  84+ E924 56 4F 43 41 >                db      "VOCABULARY"
  84+ E928 42 55 4C 41 >
  84+ E92C 52 59       >
  84+ E92E             >len_NFA         defl    $ - temp_NFA
  84+ E92E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E924             >
  84+ E924 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E925 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E929 42 55 4C 41 >
  84+ E92D 52 59       >
  84+ E92F             >                org     $-1                 // alter last byte of Name just above to set
  84+ E92E D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E92F             >
  84+ E92F 16 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E931             >Prev_Ptr        defl    Heap_Ptr
  84+ E931             >
  84+ E931             >mirror_Ptr      defl    $
  84+ E931             >
  84+ E931 10 75       >                dw      Dict_Ptr + 2        // xt
  84+ E933             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E933             >
  84+ E933             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E933             >
  84+ E933             >//              ______________________________________________________________________
  84+ E933             >//              Dictionary part
  84+ E933             >
  84+ E933             >                org     Dict_Ptr
  84+ 750E             >
  84+ 750E 31 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 7510             >
  84+ 7510             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 7510 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7513             >
  84+ 7513             >
  84+ 7513             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7513             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7513             >
  84+ 7513             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7513
  86+ 7513 F0 6E                        dw      CBUILDS
  87+ 7515
  88+ 7515                              // dummy word + link part
  89+ 7515 A3 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 7519 C0 6B
  90+ 751B 4A 6B 8F 69                  dw      CURRENT, FETCH          // current @
  91+ 751F 8F 69                        dw      FETCH                   // @
  92+ 7521                          //  dw      CELL_MINUS              // cell-
  93+ 7521 C0 6B                        dw      COMMA                   // ,
  94+ 7523
  95+ 7523                              // voc-link part
  96+ 7523 AA 6B                        dw      HERE                    // here
  97+ 7525 08 6B 8F 69                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 7529 C0 6B                        dw      COMMA                   // ,
  99+ 752B 08 6B 99 69                  dw      VOC_LINK, STORE         // voc-link !
 100+ 752F                              // DOES part
 101+ 752F FB 6E                        dw      DOES_TO                 // does>
 102+ 7531              Vocabulary_Does:
 103+ 7531 D0 68                        dw      CELL_PLUS               // cell+
 104+ 7533 44 6B 99 69                  dw      CONTEXT, STORE          // context !
 105+ 7537 4F 68                        dw      EXIT                    // ;
 106+ 7539
 107+ 7539              //  ______________________________________________________________________
 108+ 7539              //
 109+ 7539              // forth        --
 110+ 7539              // Name of the first vocabulary.
 111+ 7539              // It makes FORTH the CONTEXT vocabulary.
 112+ 7539              // Until new user vocabulary are defined, new colon-definitions becomes
 113+ 7539              // part of FORTH. It is immediate, so it will executed during the creation
 114+ 7539              // of a colon definition to be able to select the vocabulary.
 115+ 7539
 116+ 7539                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 116+ 7539             >
 116+ 7539             >Dict_Ptr        defl    $
 116+ 7539             >
 116+ 7539             >//              ______________________________________________________________________
 116+ 7539             >//              Heap part
 116+ 7539             >
 116+ 7539             >
 116+ 7539             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ E933             >
 116+ E933             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ E933             >Latest_Definition defl  Heap_Ptr
 116+ E933             >
 116+ E933             >                // dummy db directives used to calculate length of namec
 116+ E933 46 4F 52 54 >                db      "FORTH"
 116+ E937 48          >
 116+ E938             >len_NFA         defl    $ - temp_NFA
 116+ E938             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ E933             >
 116+ E933 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ E934 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 116+ E938 48          >
 116+ E939             >                org     $-1                 // alter last byte of Name just above to set
 116+ E938 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ E939             >
 116+ E939 24 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ E93B             >Prev_Ptr        defl    Heap_Ptr
 116+ E93B             >
 116+ E93B             >mirror_Ptr      defl    $
 116+ E93B             >
 116+ E93B 3B 75       >                dw      Dict_Ptr + 2        // xt
 116+ E93D             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ E93D             >
 116+ E93D             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ E93D             >
 116+ E93D             >//              ______________________________________________________________________
 116+ E93D             >//              Dictionary part
 116+ E93D             >
 116+ E93D             >                org     Dict_Ptr
 116+ 7539             >
 116+ 7539 3B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 753B             >
 116+ 753B             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 753B CD 08 6F    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 116+ 753E             >
 116+ 753E             >
 116+ 753E             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 753E             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 753E             >
 116+ 753E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 753E 31 75                        dw      Vocabulary_Does
 118+ 7540
 119+ 7540 81 A0                        db      $81, $A0
 120+ 7542              Forth_Latest_Ptr:
 121+ 7542 33 09                        dw      Latest_Definition
 122+ 7544              Voclink_Ptr:
 123+ 7544 00 00                        dw      0
 124+ 7546
 125+ 7546              // ____
 126+ 7546              // temp_VOC        defl    $                   // save this address
 127+ 7546              //              org     (Heap_Ptr & $1FFF) + $E000
 128+ 7546              //              db      $81, $A0
 129+ 7546              // Forth_Latest_Ptr_HEAP:
 130+ 7546              //                 dw      Latest_Definition
 131+ 7546              // Voclink_Ptr_HEAP:
 132+ 7546              //                 dw      0
 133+ 7546              // Heap_Ptr        defl    $ - $E000           // save current HP
 134+ 7546              //                 org     temp_VOC
 135+ 7546              // ____
 136+ 7546
 137+ 7546              // Any new vocabulary is structured as follow:
 138+ 7546              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 139+ 7546              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 140+ 7546              // PFA+4 always contains the LATEST word of this VOCABULARY.
 141+ 7546              //       at creations it points to the null-word of its parent vocabulary
 142+ 7546              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 143+ 7546              // PFA+6 is the pointer that builds up the vocabulary linked list.
 144+ 7546              //       FORTH has 0 here to signal the end of the list and user's variable
 145+ 7546              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 146+ 7546              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 147+ 7546              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 148+ 7546
 149+ 7546              //  ______________________________________________________________________
 150+ 7546              //
 151+ 7546              // definitions  --
 152+ 7546              // Used in the form  cccc DEFINITIONS
 153+ 7546              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 154+ 7546              // vocabulary cccc.
 155+ 7546                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 155+ 7546             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 155+ 7546             >
 155+ 7546             >Dict_Ptr        defl    $
 155+ 7546             >
 155+ 7546             >//              ______________________________________________________________________
 155+ 7546             >//              Heap part
 155+ 7546             >
 155+ 7546             >
 155+ 7546             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E93D             >
 155+ E93D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E93D             >Latest_Definition defl  Heap_Ptr
 155+ E93D             >
 155+ E93D             >                // dummy db directives used to calculate length of namec
 155+ E93D 44 45 46 49 >                db      "DEFINITIONS"
 155+ E941 4E 49 54 49 >
 155+ E945 4F 4E 53    >
 155+ E948             >len_NFA         defl    $ - temp_NFA
 155+ E948             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E93D             >
 155+ E93D 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E93E 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 155+ E942 4E 49 54 49 >
 155+ E946 4F 4E 53    >
 155+ E949             >                org     $-1                 // alter last byte of Name just above to set
 155+ E948 D3          >                db      {b $} | END_BIT     // msb as name end
 155+ E949             >
 155+ E949 33 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E94B             >Prev_Ptr        defl    Heap_Ptr
 155+ E94B             >
 155+ E94B             >mirror_Ptr      defl    $
 155+ E94B             >
 155+ E94B 48 75       >                dw      Dict_Ptr + 2        // xt
 155+ E94D             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E94D             >
 155+ E94D             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E94D             >
 155+ E94D             >//              ______________________________________________________________________
 155+ E94D             >//              Dictionary part
 155+ E94D             >
 155+ E94D             >                org     Dict_Ptr
 155+ 7546             >
 155+ 7546 4B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 7548             >
 155+ 7548             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 7548 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 754B             >
 155+ 754B             >
 155+ 754B             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 754B             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 754B             >
 155+ 754B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 754B 44 6B 8F 69                  dw      CONTEXT, FETCH          // context @
 157+ 754F 4A 6B 99 69                  dw      CURRENT, STORE          // current !
 158+ 7553 4F 68                        dw      EXIT                    // ;
 159+ 7555
 160+ 7555              //  ______________________________________________________________________
 161+ 7555              //
 162+ 7555              // (            -- cccc )
 163+ 7555              // the following text is interpreted as a comment until a closing )
 164+ 7555                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 164+ 7555             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 164+ 7555             >
 164+ 7555             >Dict_Ptr        defl    $
 164+ 7555             >
 164+ 7555             >//              ______________________________________________________________________
 164+ 7555             >//              Heap part
 164+ 7555             >
 164+ 7555             >
 164+ 7555             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E94D             >
 164+ E94D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E94D             >Latest_Definition defl  Heap_Ptr
 164+ E94D             >
 164+ E94D             >                // dummy db directives used to calculate length of namec
 164+ E94D 28          >                db      "("
 164+ E94E             >len_NFA         defl    $ - temp_NFA
 164+ E94E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E94D             >
 164+ E94D C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E94E 28          >                db      "("               // name string in 7-bit ascii, but
 164+ E94F             >                org     $-1                 // alter last byte of Name just above to set
 164+ E94E A8          >                db      {b $} | END_BIT     // msb as name end
 164+ E94F             >
 164+ E94F 3D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E951             >Prev_Ptr        defl    Heap_Ptr
 164+ E951             >
 164+ E951             >mirror_Ptr      defl    $
 164+ E951             >
 164+ E951 57 75       >                dw      Dict_Ptr + 2        // xt
 164+ E953             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E953             >
 164+ E953             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E953             >
 164+ E953             >//              ______________________________________________________________________
 164+ E953             >//              Dictionary part
 164+ E953             >
 164+ E953             >                org     Dict_Ptr
 164+ 7555             >
 164+ 7555 51 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 7557             >
 164+ 7557             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 7557 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 164+ 755A             >
 164+ 755A             >
 164+ 755A             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 755A             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 755A             >
 164+ 755A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 755A A3 63 29 00                  dw      LIT, ")"                // [char] )
 166+ 755E BE 70 0A 69                  dw      WORD, DROP              // word drop
 167+ 7562 4F 68                        dw      EXIT                    // ;
 168+ 7564
 169+ 7564              //  ______________________________________________________________________
 170+ 7564              //
 171+ 7564              // quit         --
 172+ 7564              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 173+ 7564                              Colon_Def QUIT, "QUIT", is_normal
 173+ 7564             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 173+ 7564             >
 173+ 7564             >Dict_Ptr        defl    $
 173+ 7564             >
 173+ 7564             >//              ______________________________________________________________________
 173+ 7564             >//              Heap part
 173+ 7564             >
 173+ 7564             >
 173+ 7564             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E953             >
 173+ E953             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E953             >Latest_Definition defl  Heap_Ptr
 173+ E953             >
 173+ E953             >                // dummy db directives used to calculate length of namec
 173+ E953 51 55 49 54 >                db      "QUIT"
 173+ E957             >len_NFA         defl    $ - temp_NFA
 173+ E957             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E953             >
 173+ E953 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E954 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 173+ E958             >                org     $-1                 // alter last byte of Name just above to set
 173+ E957 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E958             >
 173+ E958 4D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E95A             >Prev_Ptr        defl    Heap_Ptr
 173+ E95A             >
 173+ E95A             >mirror_Ptr      defl    $
 173+ E95A             >
 173+ E95A 66 75       >                dw      Dict_Ptr + 2        // xt
 173+ E95C             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E95C             >
 173+ E95C             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E95C             >
 173+ E95C             >//              ______________________________________________________________________
 173+ E95C             >//              Dictionary part
 173+ E95C             >
 173+ E95C             >                org     Dict_Ptr
 173+ 7564             >
 173+ 7564 5A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 7566             >
 173+ 7566             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7566 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7569             >
 173+ 7569             >
 173+ 7569             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7569             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7569             >
 173+ 7569             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7569
 175+ 7569 92 6B 8F 69                  dw      SOURCE_ID, FETCH        // source-id @
 176+ 756D F8 66 0A 69                  dw      F_CLOSE, DROP           // f_close drop
 177+ 7571 85 6A 92 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 177+ 7575 99 69
 178+ 7577 85 6A 26 6B                  dw      ZERO, BLK, STORE        // 0 blk !
 178+ 757B 99 69
 179+ 757D 6C 6E                        dw      SQUARED_OPEN            // [compile] [
 180+ 757F                                                              // begin
 181+ 757F              Quit_Begin:
 182+ 757F E4 6A 8F 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 182+ 7583 4A 68
 183+ 7585 B3 65                        dw      CR                      //      cr
 184+ 7587 5B 70                        dw      QUERY                   //      query
 185+ 7589              Next_Breakpoint_1:
 186+ 7589 C5 74                        dw      INTERPRET               //      interpret
 187+ 758B 50 6B 8F 69                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 187+ 758F 74 68
 188+ 7591                                                              //      if
 189+ 7591 F5 63                        dw      ZBRANCH
 190+ 7593 07 00                        dw      Quit_Endif - $
 191+ 7595 09 71                        dw          C_DOT_QUOTE
 192+ 7597 02 6F 6B                     db          2, "ok"             //          .( ok)
 193+ 759A              Quit_Endif:                                     //      else
 194+ 759A                                                              // again
 195+ 759A E8 63                        dw      BRANCH
 196+ 759C E3 FF                        dw      Quit_Begin - $
 197+ 759E 4F 68                        dw      EXIT                    // ;
 198+ 75A0
 199+ 75A0              //  ______________________________________________________________________
 200+ 75A0              //
 201+ 75A0              // abort        --
 202+ 75A0                              Colon_Def ABORT, "ABORT", is_normal
 202+ 75A0             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 202+ 75A0             >
 202+ 75A0             >Dict_Ptr        defl    $
 202+ 75A0             >
 202+ 75A0             >//              ______________________________________________________________________
 202+ 75A0             >//              Heap part
 202+ 75A0             >
 202+ 75A0             >
 202+ 75A0             >                org     (Heap_Ptr & $1FFF) + $E000
 202+ E95C             >
 202+ E95C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 202+ E95C             >Latest_Definition defl  Heap_Ptr
 202+ E95C             >
 202+ E95C             >                // dummy db directives used to calculate length of namec
 202+ E95C 41 42 4F 52 >                db      "ABORT"
 202+ E960 54          >
 202+ E961             >len_NFA         defl    $ - temp_NFA
 202+ E961             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 202+ E95C             >
 202+ E95C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 202+ E95D 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 202+ E961 54          >
 202+ E962             >                org     $-1                 // alter last byte of Name just above to set
 202+ E961 D4          >                db      {b $} | END_BIT     // msb as name end
 202+ E962             >
 202+ E962 53 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 202+ E964             >Prev_Ptr        defl    Heap_Ptr
 202+ E964             >
 202+ E964             >mirror_Ptr      defl    $
 202+ E964             >
 202+ E964 A2 75       >                dw      Dict_Ptr + 2        // xt
 202+ E966             >Heap_Ptr        defl    $ - $E000           // save current HP
 202+ E966             >
 202+ E966             >Current_HP      defl  $ - $E000             // used to set HP once!
 202+ E966             >
 202+ E966             >//              ______________________________________________________________________
 202+ E966             >//              Dictionary part
 202+ E966             >
 202+ E966             >                org     Dict_Ptr
 202+ 75A0             >
 202+ 75A0 64 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 202+ 75A2             >
 202+ 75A2             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 202+ 75A2 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 202+ 75A5             >
 202+ 75A5             >
 202+ 75A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 202+ 75A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 202+ 75A5             >
 202+ 75A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 203+ 75A5 DE 6A 8F 69                  dw      S0, FETCH               // s0 @
 204+ 75A9 A8 6A                        dw      BL                      // bl
 205+ 75AB 01 69 99 69                  dw      OVER, STORE             // over !
 206+ 75AF 3F 68                        dw      SPSTORE                 // sp!
 207+ 75B1 B5 6E                        dw      DECIMAL                 // decimal
 208+ 75B3 3B 75                        dw      FORTH                   // [compile] forth
 209+ 75B5 48 75                        dw      DEFINITIONS             // definitions
 210+ 75B7
 211+ 75B7 6C 6E                        dw      SQUARED_OPEN            // [compile] [
 212+ 75B9 E4 6A 8F 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 212+ 75BD 4A 68
 213+ 75BF
 214+ 75BF              Autoexec_Ptr:
 215+ 75BF BC 7F                        dw      AUTOEXEC                // autoexec, patched to noop
 216+ 75C1 66 75                        dw      QUIT                    // quit
 217+ 75C3              //              dw      EXIT                    // ;
 218+ 75C3
 219+ 75C3              //  ______________________________________________________________________
 220+ 75C3              //
 221+ 75C3              // warm         --
 222+ 75C3                              Colon_Def WARM, "WARM", is_normal
 222+ 75C3             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 222+ 75C3             >
 222+ 75C3             >Dict_Ptr        defl    $
 222+ 75C3             >
 222+ 75C3             >//              ______________________________________________________________________
 222+ 75C3             >//              Heap part
 222+ 75C3             >
 222+ 75C3             >
 222+ 75C3             >                org     (Heap_Ptr & $1FFF) + $E000
 222+ E966             >
 222+ E966             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ E966             >Latest_Definition defl  Heap_Ptr
 222+ E966             >
 222+ E966             >                // dummy db directives used to calculate length of namec
 222+ E966 57 41 52 4D >                db      "WARM"
 222+ E96A             >len_NFA         defl    $ - temp_NFA
 222+ E96A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ E966             >
 222+ E966 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ E967 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 222+ E96B             >                org     $-1                 // alter last byte of Name just above to set
 222+ E96A CD          >                db      {b $} | END_BIT     // msb as name end
 222+ E96B             >
 222+ E96B 5C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 222+ E96D             >Prev_Ptr        defl    Heap_Ptr
 222+ E96D             >
 222+ E96D             >mirror_Ptr      defl    $
 222+ E96D             >
 222+ E96D C5 75       >                dw      Dict_Ptr + 2        // xt
 222+ E96F             >Heap_Ptr        defl    $ - $E000           // save current HP
 222+ E96F             >
 222+ E96F             >Current_HP      defl  $ - $E000             // used to set HP once!
 222+ E96F             >
 222+ E96F             >//              ______________________________________________________________________
 222+ E96F             >//              Dictionary part
 222+ E96F             >
 222+ E96F             >                org     Dict_Ptr
 222+ 75C3             >
 222+ 75C3 6D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 222+ 75C5             >
 222+ 75C5             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 75C5 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 75C8             >
 222+ 75C8             >
 222+ 75C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 75C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 75C8             >
 222+ 75C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 75C8 82 78                        dw      BLK_INIT                // blk-init
 224+ 75CA 98 7F                        dw      SPLASH                  // splash
 225+ 75CC                          //  dw      LIT, 7, EMIT            // 7 emit
 226+ 75CC A2 75                        dw      ABORT                   // abort
 227+ 75CE                          //  dw      EXIT                    // exit
 228+ 75CE
 229+ 75CE              //  ______________________________________________________________________
 230+ 75CE              //
 231+ 75CE              // cold         --
 232+ 75CE                              Colon_Def COLD, "COLD", is_normal
 232+ 75CE             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 232+ 75CE             >
 232+ 75CE             >Dict_Ptr        defl    $
 232+ 75CE             >
 232+ 75CE             >//              ______________________________________________________________________
 232+ 75CE             >//              Heap part
 232+ 75CE             >
 232+ 75CE             >
 232+ 75CE             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E96F             >
 232+ E96F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E96F             >Latest_Definition defl  Heap_Ptr
 232+ E96F             >
 232+ E96F             >                // dummy db directives used to calculate length of namec
 232+ E96F 43 4F 4C 44 >                db      "COLD"
 232+ E973             >len_NFA         defl    $ - temp_NFA
 232+ E973             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E96F             >
 232+ E96F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E970 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 232+ E974             >                org     $-1                 // alter last byte of Name just above to set
 232+ E973 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E974             >
 232+ E974 66 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E976             >Prev_Ptr        defl    Heap_Ptr
 232+ E976             >
 232+ E976             >mirror_Ptr      defl    $
 232+ E976             >
 232+ E976 D0 75       >                dw      Dict_Ptr + 2        // xt
 232+ E978             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E978             >
 232+ E978             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E978             >
 232+ E978             >//              ______________________________________________________________________
 232+ E978             >//              Dictionary part
 232+ E978             >
 232+ E978             >                org     Dict_Ptr
 232+ 75CE             >
 232+ 75CE 76 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 75D0             >
 232+ 75D0             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 75D0 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 232+ 75D3             >
 232+ 75D3             >
 232+ 75D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 75D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 75D3             >
 232+ 75D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 75D3 4C 6A 4C 6A                  dw      NOOP, NOOP
 234+ 75D7 A3 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 235+ 75DB A3 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 236+ 75DF 8F 69                        dw      FETCH                   // @
 237+ 75E1 A3 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 237+ 75E5 A1 68
 238+ 75E7 A3 63 16 00                  dw      LIT, 22                 // 22
 239+ 75EB 90 67                        dw      CMOVE
 240+ 75ED A3 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 241+ 75F1 8F 69                        dw      FETCH                   // @
 242+ 75F3 A3 63 42 75                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 243+ 75F7 99 69                        dw      STORE                   // !
 244+ 75F9 85 6A 20 6B                  dw      ZERO, NMODE, STORE      // 0 nmode !
 244+ 75FD 99 69
 245+ 75FF 0E 6B 8F 69                  dw      FIRST, FETCH, DUP       // first @ dup
 245+ 7603 25 69
 246+ 7605 7A 6B 99 69                  dw      USED, STORE             // used !
 247+ 7609 80 6B 99 69                  dw      PREV, STORE             // prev !
 248+ 760D A3 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 248+ 7611 8C 6B 99 69
 249+ 7615              //              dw      LIT, 8
 250+ 7615              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 251+ 7615 19 79                        dw      EMPTY_BUFFERS
 252+ 7617 85 6A 26 6B                  dw      ZERO, BLK, STORE
 252+ 761B 99 69
 253+ 761D 85 6A 92 6B                  dw      ZERO, SOURCE_ID, STORE
 253+ 7621 99 69
 254+ 7623
 255+ 7623 C5 75        Warm_Start:     dw      WARM
 256+ 7625 D0 75        Cold_Start:     dw      COLD
 257+ 7627              //              dw      EXIT
 258+ 7627
 259+ 7627              //  ______________________________________________________________________
 260+ 7627              WarmRoutine:
 261+ 7627              ColdRoutine:
 262+ 7627                              // First, save Basic's status: H'L' and SP
 263+ 7627 D9                           exx
 264+ 7628 E5                           push    hl                      // save Basic's return address
 265+ 7629 D9                           exx
 266+ 762A ED 73 6E 63                  ld      (SP_Basic), sp
 267+ 762E
 268+ 762E                              // pre-set the four main 16-bit registers
 269+ 762E ED 7B 78 63                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 270+ 7632 2A 7A 63                     ld      hl, (R0_origin)         // Return Stack Pointer
 271+ 7635 EB                           ex      de, hl
 272+ 7636 DD 21 9A 63                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 273+ 763A 01 23 76                     ld      bc, Warm_Start          // Instruction Pointer
 274+ 763D
 275+ 763D 38 02                        jr      c, Warm_Skip
 276+ 763F 03                           inc     bc
 277+ 7640 03                           inc     bc
 278+ 7641              Warm_Skip:
 279+ 7641                              next
 279+ 7641 DD E9       >                jp      (ix)
 280+ 7643
 281+ 7643              //  ______________________________________________________________________
 282+ 7643              //
 283+ 7643              // basic        --
 284+ 7643                              New_Def BASIC, "BASIC", is_code, is_normal
 284+ 7643             >
 284+ 7643             >Dict_Ptr        defl    $
 284+ 7643             >
 284+ 7643             >//              ______________________________________________________________________
 284+ 7643             >//              Heap part
 284+ 7643             >
 284+ 7643             >
 284+ 7643             >                org     (Heap_Ptr & $1FFF) + $E000
 284+ E978             >
 284+ E978             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ E978             >Latest_Definition defl  Heap_Ptr
 284+ E978             >
 284+ E978             >                // dummy db directives used to calculate length of namec
 284+ E978 42 41 53 49 >                db      "BASIC"
 284+ E97C 43          >
 284+ E97D             >len_NFA         defl    $ - temp_NFA
 284+ E97D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ E978             >
 284+ E978 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ E979 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 284+ E97D 43          >
 284+ E97E             >                org     $-1                 // alter last byte of Name just above to set
 284+ E97D C3          >                db      {b $} | END_BIT     // msb as name end
 284+ E97E             >
 284+ E97E 6F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 284+ E980             >Prev_Ptr        defl    Heap_Ptr
 284+ E980             >
 284+ E980             >mirror_Ptr      defl    $
 284+ E980             >
 284+ E980 45 76       >                dw      Dict_Ptr + 2        // xt
 284+ E982             >Heap_Ptr        defl    $ - $E000           // save current HP
 284+ E982             >
 284+ E982             >Current_HP      defl  $ - $E000             // used to set HP once!
 284+ E982             >
 284+ E982             >//              ______________________________________________________________________
 284+ E982             >//              Dictionary part
 284+ E982             >
 284+ E982             >                org     Dict_Ptr
 284+ 7643             >
 284+ 7643 80 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 284+ 7645             >
 284+ 7645             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 7645 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 284+ 7645 ~           >
 284+ 7645 ~           >
 284+ 7645             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 7645             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 7645             >
 284+ 7645             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 7645 C1                           pop     bc                      // return  TOS  value to Basic
 286+ 7646 21 00 00                     ld      hl, 0
 287+ 7649 39                           add     hl, sp
 288+ 764A ED 7B 6E 63                  ld      sp, (SP_Basic)          // restore Basic's SP
 289+ 764E              //              nop
 290+ 764E 22 6E 63                     ld      (SP_Basic),hl           // but also save Forth's
 291+ 7651 D9                           exx
 292+ 7652 E1                           pop     hl                      // restore h'l'
 293+ 7653 D9                           exx
 294+ 7654 C9                           ret                             // to where USR Basic was left
 295+ 7655
 296+ 7655              //  ______________________________________________________________________
 297+ 7655              //
 298+ 7655              // +-           n1 n2 -- n3
 299+ 7655              // leaves n1 with the sign of n2 as n3.
 300+ 7655                              Colon_Def PLUS_MINUS, "+-", is_normal
 300+ 7655             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 300+ 7655             >
 300+ 7655             >Dict_Ptr        defl    $
 300+ 7655             >
 300+ 7655             >//              ______________________________________________________________________
 300+ 7655             >//              Heap part
 300+ 7655             >
 300+ 7655             >
 300+ 7655             >                org     (Heap_Ptr & $1FFF) + $E000
 300+ E982             >
 300+ E982             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 300+ E982             >Latest_Definition defl  Heap_Ptr
 300+ E982             >
 300+ E982             >                // dummy db directives used to calculate length of namec
 300+ E982 2B 2D       >                db      "+-"
 300+ E984             >len_NFA         defl    $ - temp_NFA
 300+ E984             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 300+ E982             >
 300+ E982 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 300+ E983 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 300+ E985             >                org     $-1                 // alter last byte of Name just above to set
 300+ E984 AD          >                db      {b $} | END_BIT     // msb as name end
 300+ E985             >
 300+ E985 78 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 300+ E987             >Prev_Ptr        defl    Heap_Ptr
 300+ E987             >
 300+ E987             >mirror_Ptr      defl    $
 300+ E987             >
 300+ E987 57 76       >                dw      Dict_Ptr + 2        // xt
 300+ E989             >Heap_Ptr        defl    $ - $E000           // save current HP
 300+ E989             >
 300+ E989             >Current_HP      defl  $ - $E000             // used to set HP once!
 300+ E989             >
 300+ E989             >//              ______________________________________________________________________
 300+ E989             >//              Dictionary part
 300+ E989             >
 300+ E989             >                org     Dict_Ptr
 300+ 7655             >
 300+ 7655 87 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 300+ 7657             >
 300+ 7657             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 300+ 7657 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 300+ 765A             >
 300+ 765A             >
 300+ 765A             >                endif           ; ok        // for other definitions it "points" the correct handler
 300+ 765A             >                // Use of "; ok" to suppress "warning[fwdref]"
 300+ 765A             >
 300+ 765A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 301+ 765A 86 68                        dw      ZLESS                   // 0<
 302+ 765C                                                              // if
 303+ 765C F5 63                        dw      ZBRANCH
 304+ 765E 04 00                        dw      Plus_Minus_Endif - $
 305+ 7660 E1 68                        dw          MINUS               //      minus
 306+ 7662              Plus_Minus_Endif:                               // endif
 307+ 7662 4F 68                        dw      EXIT                    // ;
 308+ 7664
 309+ 7664              //  ______________________________________________________________________
 310+ 7664              //
 311+ 7664              // d+-          d1 n -- d2
 312+ 7664              // leaves d1 with the sign of n as d2.
 313+ 7664                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 313+ 7664             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 313+ 7664             >
 313+ 7664             >Dict_Ptr        defl    $
 313+ 7664             >
 313+ 7664             >//              ______________________________________________________________________
 313+ 7664             >//              Heap part
 313+ 7664             >
 313+ 7664             >
 313+ 7664             >                org     (Heap_Ptr & $1FFF) + $E000
 313+ E989             >
 313+ E989             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 313+ E989             >Latest_Definition defl  Heap_Ptr
 313+ E989             >
 313+ E989             >                // dummy db directives used to calculate length of namec
 313+ E989 44 2B 2D    >                db      "D+-"
 313+ E98C             >len_NFA         defl    $ - temp_NFA
 313+ E98C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 313+ E989             >
 313+ E989 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 313+ E98A 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 313+ E98D             >                org     $-1                 // alter last byte of Name just above to set
 313+ E98C AD          >                db      {b $} | END_BIT     // msb as name end
 313+ E98D             >
 313+ E98D 82 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 313+ E98F             >Prev_Ptr        defl    Heap_Ptr
 313+ E98F             >
 313+ E98F             >mirror_Ptr      defl    $
 313+ E98F             >
 313+ E98F 66 76       >                dw      Dict_Ptr + 2        // xt
 313+ E991             >Heap_Ptr        defl    $ - $E000           // save current HP
 313+ E991             >
 313+ E991             >Current_HP      defl  $ - $E000             // used to set HP once!
 313+ E991             >
 313+ E991             >//              ______________________________________________________________________
 313+ E991             >//              Dictionary part
 313+ E991             >
 313+ E991             >                org     Dict_Ptr
 313+ 7664             >
 313+ 7664 8F 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 313+ 7666             >
 313+ 7666             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 313+ 7666 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 313+ 7669             >
 313+ 7669             >
 313+ 7669             >                endif           ; ok        // for other definitions it "points" the correct handler
 313+ 7669             >                // Use of "; ok" to suppress "warning[fwdref]"
 313+ 7669             >
 313+ 7669             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 314+ 7669 86 68                        dw      ZLESS                   // 0<
 315+ 766B                                                              // if
 316+ 766B F5 63                        dw      ZBRANCH
 317+ 766D 04 00                        dw      DPlus_Minus_Endif - $
 318+ 766F EE 68                        dw          DMINUS              //      dminus
 319+ 7671              DPlus_Minus_Endif:                              // endif
 320+ 7671 4F 68                        dw      EXIT                    // ;
 321+ 7673
 322+ 7673              //  ______________________________________________________________________
 323+ 7673              //
 324+ 7673              // abs          n1 -- n2
 325+ 7673                              Colon_Def ABS_OP, "ABS", is_normal
 325+ 7673             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 325+ 7673             >
 325+ 7673             >Dict_Ptr        defl    $
 325+ 7673             >
 325+ 7673             >//              ______________________________________________________________________
 325+ 7673             >//              Heap part
 325+ 7673             >
 325+ 7673             >
 325+ 7673             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E991             >
 325+ E991             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E991             >Latest_Definition defl  Heap_Ptr
 325+ E991             >
 325+ E991             >                // dummy db directives used to calculate length of namec
 325+ E991 41 42 53    >                db      "ABS"
 325+ E994             >len_NFA         defl    $ - temp_NFA
 325+ E994             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E991             >
 325+ E991 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E992 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 325+ E995             >                org     $-1                 // alter last byte of Name just above to set
 325+ E994 D3          >                db      {b $} | END_BIT     // msb as name end
 325+ E995             >
 325+ E995 89 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E997             >Prev_Ptr        defl    Heap_Ptr
 325+ E997             >
 325+ E997             >mirror_Ptr      defl    $
 325+ E997             >
 325+ E997 75 76       >                dw      Dict_Ptr + 2        // xt
 325+ E999             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E999             >
 325+ E999             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E999             >
 325+ E999             >//              ______________________________________________________________________
 325+ E999             >//              Dictionary part
 325+ E999             >
 325+ E999             >                org     Dict_Ptr
 325+ 7673             >
 325+ 7673 97 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 7675             >
 325+ 7675             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 7675 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 7678             >
 325+ 7678             >
 325+ 7678             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 7678             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 7678             >
 325+ 7678             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 7678 25 69                        dw      DUP                     // dup
 327+ 767A 57 76                        dw      PLUS_MINUS              // +-
 328+ 767C 4F 68                        dw      EXIT                    // ;
 329+ 767E
 330+ 767E              //  ______________________________________________________________________
 331+ 767E              //
 332+ 767E              // dabs         d1 -- d2
 333+ 767E                              Colon_Def DABS, "DABS", is_normal
 333+ 767E             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 333+ 767E             >
 333+ 767E             >Dict_Ptr        defl    $
 333+ 767E             >
 333+ 767E             >//              ______________________________________________________________________
 333+ 767E             >//              Heap part
 333+ 767E             >
 333+ 767E             >
 333+ 767E             >                org     (Heap_Ptr & $1FFF) + $E000
 333+ E999             >
 333+ E999             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 333+ E999             >Latest_Definition defl  Heap_Ptr
 333+ E999             >
 333+ E999             >                // dummy db directives used to calculate length of namec
 333+ E999 44 41 42 53 >                db      "DABS"
 333+ E99D             >len_NFA         defl    $ - temp_NFA
 333+ E99D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 333+ E999             >
 333+ E999 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 333+ E99A 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 333+ E99E             >                org     $-1                 // alter last byte of Name just above to set
 333+ E99D D3          >                db      {b $} | END_BIT     // msb as name end
 333+ E99E             >
 333+ E99E 91 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 333+ E9A0             >Prev_Ptr        defl    Heap_Ptr
 333+ E9A0             >
 333+ E9A0             >mirror_Ptr      defl    $
 333+ E9A0             >
 333+ E9A0 80 76       >                dw      Dict_Ptr + 2        // xt
 333+ E9A2             >Heap_Ptr        defl    $ - $E000           // save current HP
 333+ E9A2             >
 333+ E9A2             >Current_HP      defl  $ - $E000             // used to set HP once!
 333+ E9A2             >
 333+ E9A2             >//              ______________________________________________________________________
 333+ E9A2             >//              Dictionary part
 333+ E9A2             >
 333+ E9A2             >                org     Dict_Ptr
 333+ 767E             >
 333+ 767E A0 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 333+ 7680             >
 333+ 7680             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 333+ 7680 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 333+ 7683             >
 333+ 7683             >
 333+ 7683             >                endif           ; ok        // for other definitions it "points" the correct handler
 333+ 7683             >                // Use of "; ok" to suppress "warning[fwdref]"
 333+ 7683             >
 333+ 7683             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 334+ 7683 25 69                        dw      DUP                     // dup
 335+ 7685 66 76                        dw      DPLUS_MINUS             // d+-
 336+ 7687 4F 68                        dw      EXIT                    // ;
 337+ 7689
 338+ 7689              //  ______________________________________________________________________
 339+ 7689              //
 340+ 7689              // m*           n1 n2 -- d
 341+ 7689              // multiply two integer giving a double
 342+ 7689                              Colon_Def MMUL, "M*", is_normal
 342+ 7689             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 342+ 7689             >
 342+ 7689             >Dict_Ptr        defl    $
 342+ 7689             >
 342+ 7689             >//              ______________________________________________________________________
 342+ 7689             >//              Heap part
 342+ 7689             >
 342+ 7689             >
 342+ 7689             >                org     (Heap_Ptr & $1FFF) + $E000
 342+ E9A2             >
 342+ E9A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 342+ E9A2             >Latest_Definition defl  Heap_Ptr
 342+ E9A2             >
 342+ E9A2             >                // dummy db directives used to calculate length of namec
 342+ E9A2 4D 2A       >                db      "M*"
 342+ E9A4             >len_NFA         defl    $ - temp_NFA
 342+ E9A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 342+ E9A2             >
 342+ E9A2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 342+ E9A3 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 342+ E9A5             >                org     $-1                 // alter last byte of Name just above to set
 342+ E9A4 AA          >                db      {b $} | END_BIT     // msb as name end
 342+ E9A5             >
 342+ E9A5 99 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 342+ E9A7             >Prev_Ptr        defl    Heap_Ptr
 342+ E9A7             >
 342+ E9A7             >mirror_Ptr      defl    $
 342+ E9A7             >
 342+ E9A7 8B 76       >                dw      Dict_Ptr + 2        // xt
 342+ E9A9             >Heap_Ptr        defl    $ - $E000           // save current HP
 342+ E9A9             >
 342+ E9A9             >Current_HP      defl  $ - $E000             // used to set HP once!
 342+ E9A9             >
 342+ E9A9             >//              ______________________________________________________________________
 342+ E9A9             >//              Dictionary part
 342+ E9A9             >
 342+ E9A9             >                org     Dict_Ptr
 342+ 7689             >
 342+ 7689 A7 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 342+ 768B             >
 342+ 768B             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 342+ 768B CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 342+ 768E             >
 342+ 768E             >
 342+ 768E             >                endif           ; ok        // for other definitions it "points" the correct handler
 342+ 768E             >                // Use of "; ok" to suppress "warning[fwdref]"
 342+ 768E             >
 342+ 768E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 343+ 768E 6D 69 2A 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 343+ 7692 59 68
 344+ 7694 75 76 1E 69                  dw      ABS_OP, SWAP            // abs swap
 345+ 7698 75 76 B4 67                  dw      ABS_OP, UM_MUL          // abs um*
 346+ 769C 64 68 66 76                  dw      R_TO, DPLUS_MINUS       // r> d+-
 347+ 76A0 4F 68                        dw      EXIT                    // ;
 348+ 76A2
 349+ 76A2              //  ______________________________________________________________________
 350+ 76A2              //
 351+ 76A2              // sm/rem       d n -- q r
 352+ 76A2              // Symmetric division: divides a double into n giving quotient q and remainder r
 353+ 76A2              // the remainder has the sign of d.
 354+ 76A2                              Colon_Def SMDIVM, "SM/REM", is_normal
 354+ 76A2             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 354+ 76A2             >
 354+ 76A2             >Dict_Ptr        defl    $
 354+ 76A2             >
 354+ 76A2             >//              ______________________________________________________________________
 354+ 76A2             >//              Heap part
 354+ 76A2             >
 354+ 76A2             >
 354+ 76A2             >                org     (Heap_Ptr & $1FFF) + $E000
 354+ E9A9             >
 354+ E9A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 354+ E9A9             >Latest_Definition defl  Heap_Ptr
 354+ E9A9             >
 354+ E9A9             >                // dummy db directives used to calculate length of namec
 354+ E9A9 53 4D 2F 52 >                db      "SM/REM"
 354+ E9AD 45 4D       >
 354+ E9AF             >len_NFA         defl    $ - temp_NFA
 354+ E9AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 354+ E9A9             >
 354+ E9A9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 354+ E9AA 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 354+ E9AE 45 4D       >
 354+ E9B0             >                org     $-1                 // alter last byte of Name just above to set
 354+ E9AF CD          >                db      {b $} | END_BIT     // msb as name end
 354+ E9B0             >
 354+ E9B0 A2 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 354+ E9B2             >Prev_Ptr        defl    Heap_Ptr
 354+ E9B2             >
 354+ E9B2             >mirror_Ptr      defl    $
 354+ E9B2             >
 354+ E9B2 A4 76       >                dw      Dict_Ptr + 2        // xt
 354+ E9B4             >Heap_Ptr        defl    $ - $E000           // save current HP
 354+ E9B4             >
 354+ E9B4             >Current_HP      defl  $ - $E000             // used to set HP once!
 354+ E9B4             >
 354+ E9B4             >//              ______________________________________________________________________
 354+ E9B4             >//              Dictionary part
 354+ E9B4             >
 354+ E9B4             >                org     Dict_Ptr
 354+ 76A2             >
 354+ 76A2 B2 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 354+ 76A4             >
 354+ 76A4             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 354+ 76A4 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 354+ 76A7             >
 354+ 76A7             >
 354+ 76A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 354+ 76A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 354+ 76A7             >
 354+ 76A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 355+ 76A7 01 69 59 68                  dw      OVER, TO_R, TO_R        // over >r >r
 355+ 76AB 59 68
 356+ 76AD 80 76 6F 68                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 356+ 76B1 75 76
 357+ 76B3 DC 67                        dw      UMDIVMOD                // um/mod
 358+ 76B5 64 68                        dw      R_TO                    // r>
 359+ 76B7 6F 68 2A 68                  dw      R_OP, XOR_OP            // r xor
 360+ 76BB 57 76 1E 69                  dw      PLUS_MINUS, SWAP        // +- swap
 361+ 76BF 64 68                        dw      R_TO                    // r>
 362+ 76C1 57 76 1E 69                  dw      PLUS_MINUS, SWAP        // +- swap
 363+ 76C5 4F 68                        dw      EXIT                    // ;
 364+ 76C7
 365+ 76C7              //  ______________________________________________________________________
 366+ 76C7              //
 367+ 76C7              // fm/mod       d n -- q r
 368+ 76C7              // Floored division: divides a double into n giving quotient q and remainder r
 369+ 76C7              // the remainder has the sign of d.
 370+ 76C7                              Colon_Def FMDIVM, "FM/MOD", is_normal
 370+ 76C7             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 370+ 76C7             >
 370+ 76C7             >Dict_Ptr        defl    $
 370+ 76C7             >
 370+ 76C7             >//              ______________________________________________________________________
 370+ 76C7             >//              Heap part
 370+ 76C7             >
 370+ 76C7             >
 370+ 76C7             >                org     (Heap_Ptr & $1FFF) + $E000
 370+ E9B4             >
 370+ E9B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 370+ E9B4             >Latest_Definition defl  Heap_Ptr
 370+ E9B4             >
 370+ E9B4             >                // dummy db directives used to calculate length of namec
 370+ E9B4 46 4D 2F 4D >                db      "FM/MOD"
 370+ E9B8 4F 44       >
 370+ E9BA             >len_NFA         defl    $ - temp_NFA
 370+ E9BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 370+ E9B4             >
 370+ E9B4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 370+ E9B5 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 370+ E9B9 4F 44       >
 370+ E9BB             >                org     $-1                 // alter last byte of Name just above to set
 370+ E9BA C4          >                db      {b $} | END_BIT     // msb as name end
 370+ E9BB             >
 370+ E9BB A9 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 370+ E9BD             >Prev_Ptr        defl    Heap_Ptr
 370+ E9BD             >
 370+ E9BD             >mirror_Ptr      defl    $
 370+ E9BD             >
 370+ E9BD C9 76       >                dw      Dict_Ptr + 2        // xt
 370+ E9BF             >Heap_Ptr        defl    $ - $E000           // save current HP
 370+ E9BF             >
 370+ E9BF             >Current_HP      defl  $ - $E000             // used to set HP once!
 370+ E9BF             >
 370+ E9BF             >//              ______________________________________________________________________
 370+ E9BF             >//              Dictionary part
 370+ E9BF             >
 370+ E9BF             >                org     Dict_Ptr
 370+ 76C7             >
 370+ 76C7 BD 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 370+ 76C9             >
 370+ 76C9             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 370+ 76C9 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 370+ 76CC             >
 370+ 76CC             >
 370+ 76CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 370+ 76CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 370+ 76CC             >
 370+ 76CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 371+ 76CC 25 69 59 68                  dw      DUP, TO_R               // dup >r
 372+ 76D0 A4 76                        dw      SMDIVM
 373+ 76D2 01 69 25 69                  dw      OVER, DUP
 374+ 76D6 74 68 74 68                  dw      ZEQUAL, ZEQUAL
 375+ 76DA 1E 69 86 68                  dw      SWAP, ZLESS
 376+ 76DE 6F 68 86 68                  dw      R_OP, ZLESS
 377+ 76E2 2A 68 0F 68                  dw      XOR_OP, AND_OP
 378+ 76E6 F5 63                        dw      ZBRANCH
 379+ 76E8 10 00                        dw      Fm_Mod_Else - $
 380+ 76EA C1 68                        dw          ONE_SUBTRACT
 381+ 76EC 1E 69 64 68                  dw          SWAP, R_TO
 382+ 76F0 A1 68 1E 69                  dw          PLUS, SWAP
 383+ 76F4 E8 63                        dw      BRANCH
 384+ 76F6 06 00                        dw      Fm_Mod_Endif - $
 385+ 76F8              Fm_Mod_Else:
 386+ 76F8 64 68 0A 69                  dw          R_TO, DROP
 387+ 76FC              Fm_Mod_Endif:
 388+ 76FC 4F 68                        dw      EXIT
 389+ 76FE              //              dw      TWO_DUP                 // 2dup
 390+ 76FE              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 391+ 76FE              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 392+ 76FE              //              dw      UMDIVMOD                // um/mod
 393+ 76FE              //              dw      SWAP                    // swap
 394+ 76FE              //              dw      II, ZLESS               // i'
 395+ 76FE              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 396+ 76FE              //              dw      R_TO                    // r>
 397+ 76FE              //              dw      PLUS_MINUS, SWAP        // +- swap
 398+ 76FE              //              dw      R_OP                    // r@
 399+ 76FE              //              dw      ZLESS                   // i'
 400+ 76FE              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 401+ 76FE              //              dw      R_TO                    // r>
 402+ 76FE              //              dw      PLUS_MINUS              // +- swap
 403+ 76FE              //              dw      EXIT                    // ;
 404+ 76FE
 405+ 76FE              //  ______________________________________________________________________
 406+ 76FE              //
 407+ 76FE              // m/mod        d n -- q r
 408+ 76FE              // multiply two integer giving a double
 409+ 76FE                              Colon_Def MDIVM, "M/MOD", is_normal
 409+ 76FE             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 409+ 76FE             >
 409+ 76FE             >Dict_Ptr        defl    $
 409+ 76FE             >
 409+ 76FE             >//              ______________________________________________________________________
 409+ 76FE             >//              Heap part
 409+ 76FE             >
 409+ 76FE             >
 409+ 76FE             >                org     (Heap_Ptr & $1FFF) + $E000
 409+ E9BF             >
 409+ E9BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 409+ E9BF             >Latest_Definition defl  Heap_Ptr
 409+ E9BF             >
 409+ E9BF             >                // dummy db directives used to calculate length of namec
 409+ E9BF 4D 2F 4D 4F >                db      "M/MOD"
 409+ E9C3 44          >
 409+ E9C4             >len_NFA         defl    $ - temp_NFA
 409+ E9C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 409+ E9BF             >
 409+ E9BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 409+ E9C0 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 409+ E9C4 44          >
 409+ E9C5             >                org     $-1                 // alter last byte of Name just above to set
 409+ E9C4 C4          >                db      {b $} | END_BIT     // msb as name end
 409+ E9C5             >
 409+ E9C5 B4 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 409+ E9C7             >Prev_Ptr        defl    Heap_Ptr
 409+ E9C7             >
 409+ E9C7             >mirror_Ptr      defl    $
 409+ E9C7             >
 409+ E9C7 00 77       >                dw      Dict_Ptr + 2        // xt
 409+ E9C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 409+ E9C9             >
 409+ E9C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 409+ E9C9             >
 409+ E9C9             >//              ______________________________________________________________________
 409+ E9C9             >//              Dictionary part
 409+ E9C9             >
 409+ E9C9             >                org     Dict_Ptr
 409+ 76FE             >
 409+ 76FE C7 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 409+ 7700             >
 409+ 7700             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 409+ 7700 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 409+ 7703             >
 409+ 7703             >
 409+ 7703             >                endif           ; ok        // for other definitions it "points" the correct handler
 409+ 7703             >                // Use of "; ok" to suppress "warning[fwdref]"
 409+ 7703             >
 409+ 7703             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 410+ 7703 A4 76                        dw      SMDIVM
 411+ 7705 4F 68                        dw      EXIT                    // ;
 412+ 7707
 413+ 7707              //  ______________________________________________________________________
 414+ 7707              //
 415+ 7707              // m/           d n -- q
 416+ 7707              // multiply two integer giving a double
 417+ 7707                              Colon_Def MDIV, "M/", is_normal
 417+ 7707             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 417+ 7707             >
 417+ 7707             >Dict_Ptr        defl    $
 417+ 7707             >
 417+ 7707             >//              ______________________________________________________________________
 417+ 7707             >//              Heap part
 417+ 7707             >
 417+ 7707             >
 417+ 7707             >                org     (Heap_Ptr & $1FFF) + $E000
 417+ E9C9             >
 417+ E9C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 417+ E9C9             >Latest_Definition defl  Heap_Ptr
 417+ E9C9             >
 417+ E9C9             >                // dummy db directives used to calculate length of namec
 417+ E9C9 4D 2F       >                db      "M/"
 417+ E9CB             >len_NFA         defl    $ - temp_NFA
 417+ E9CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 417+ E9C9             >
 417+ E9C9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 417+ E9CA 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 417+ E9CC             >                org     $-1                 // alter last byte of Name just above to set
 417+ E9CB AF          >                db      {b $} | END_BIT     // msb as name end
 417+ E9CC             >
 417+ E9CC BF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 417+ E9CE             >Prev_Ptr        defl    Heap_Ptr
 417+ E9CE             >
 417+ E9CE             >mirror_Ptr      defl    $
 417+ E9CE             >
 417+ E9CE 09 77       >                dw      Dict_Ptr + 2        // xt
 417+ E9D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 417+ E9D0             >
 417+ E9D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 417+ E9D0             >
 417+ E9D0             >//              ______________________________________________________________________
 417+ E9D0             >//              Dictionary part
 417+ E9D0             >
 417+ E9D0             >                org     Dict_Ptr
 417+ 7707             >
 417+ 7707 CE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 417+ 7709             >
 417+ 7709             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 417+ 7709 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 417+ 770C             >
 417+ 770C             >
 417+ 770C             >                endif           ; ok        // for other definitions it "points" the correct handler
 417+ 770C             >                // Use of "; ok" to suppress "warning[fwdref]"
 417+ 770C             >
 417+ 770C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 418+ 770C 00 77 0F 69                  dw      MDIVM, NIP
 419+ 7710 4F 68                        dw      EXIT                    // ;
 420+ 7712
 421+ 7712              //  ______________________________________________________________________
 422+ 7712              //
 423+ 7712              // *            n1 n2 -- n3
 424+ 7712              // multiply two integer
 425+ 7712                              Colon_Def MUL, "*", is_normal
 425+ 7712             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 425+ 7712             >
 425+ 7712             >Dict_Ptr        defl    $
 425+ 7712             >
 425+ 7712             >//              ______________________________________________________________________
 425+ 7712             >//              Heap part
 425+ 7712             >
 425+ 7712             >
 425+ 7712             >                org     (Heap_Ptr & $1FFF) + $E000
 425+ E9D0             >
 425+ E9D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 425+ E9D0             >Latest_Definition defl  Heap_Ptr
 425+ E9D0             >
 425+ E9D0             >                // dummy db directives used to calculate length of namec
 425+ E9D0 2A          >                db      "*"
 425+ E9D1             >len_NFA         defl    $ - temp_NFA
 425+ E9D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 425+ E9D0             >
 425+ E9D0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 425+ E9D1 2A          >                db      "*"               // name string in 7-bit ascii, but
 425+ E9D2             >                org     $-1                 // alter last byte of Name just above to set
 425+ E9D1 AA          >                db      {b $} | END_BIT     // msb as name end
 425+ E9D2             >
 425+ E9D2 C9 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 425+ E9D4             >Prev_Ptr        defl    Heap_Ptr
 425+ E9D4             >
 425+ E9D4             >mirror_Ptr      defl    $
 425+ E9D4             >
 425+ E9D4 14 77       >                dw      Dict_Ptr + 2        // xt
 425+ E9D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 425+ E9D6             >
 425+ E9D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 425+ E9D6             >
 425+ E9D6             >//              ______________________________________________________________________
 425+ E9D6             >//              Dictionary part
 425+ E9D6             >
 425+ E9D6             >                org     Dict_Ptr
 425+ 7712             >
 425+ 7712 D4 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 425+ 7714             >
 425+ 7714             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 425+ 7714 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 425+ 7717             >
 425+ 7717             >
 425+ 7717             >                endif           ; ok        // for other definitions it "points" the correct handler
 425+ 7717             >                // Use of "; ok" to suppress "warning[fwdref]"
 425+ 7717             >
 425+ 7717             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 426+ 7717 8B 76 0A 69                  dw      MMUL, DROP              // m* drop
 427+ 771B 4F 68                        dw      EXIT                    // ;
 428+ 771D
 429+ 771D              //  ______________________________________________________________________
 430+ 771D              //
 431+ 771D              // /mod         n1 n2 -- n3 n4
 432+ 771D              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 433+ 771D              // The remainder has the sign of n1
 434+ 771D                              Colon_Def DIVMOD, "/MOD", is_normal
 434+ 771D             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 434+ 771D             >
 434+ 771D             >Dict_Ptr        defl    $
 434+ 771D             >
 434+ 771D             >//              ______________________________________________________________________
 434+ 771D             >//              Heap part
 434+ 771D             >
 434+ 771D             >
 434+ 771D             >                org     (Heap_Ptr & $1FFF) + $E000
 434+ E9D6             >
 434+ E9D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 434+ E9D6             >Latest_Definition defl  Heap_Ptr
 434+ E9D6             >
 434+ E9D6             >                // dummy db directives used to calculate length of namec
 434+ E9D6 2F 4D 4F 44 >                db      "/MOD"
 434+ E9DA             >len_NFA         defl    $ - temp_NFA
 434+ E9DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 434+ E9D6             >
 434+ E9D6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 434+ E9D7 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 434+ E9DB             >                org     $-1                 // alter last byte of Name just above to set
 434+ E9DA C4          >                db      {b $} | END_BIT     // msb as name end
 434+ E9DB             >
 434+ E9DB D0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 434+ E9DD             >Prev_Ptr        defl    Heap_Ptr
 434+ E9DD             >
 434+ E9DD             >mirror_Ptr      defl    $
 434+ E9DD             >
 434+ E9DD 1F 77       >                dw      Dict_Ptr + 2        // xt
 434+ E9DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 434+ E9DF             >
 434+ E9DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 434+ E9DF             >
 434+ E9DF             >//              ______________________________________________________________________
 434+ E9DF             >//              Dictionary part
 434+ E9DF             >
 434+ E9DF             >                org     Dict_Ptr
 434+ 771D             >
 434+ 771D DD 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 434+ 771F             >
 434+ 771F             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 434+ 771F CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 434+ 7722             >
 434+ 7722             >
 434+ 7722             >                endif           ; ok        // for other definitions it "points" the correct handler
 434+ 7722             >                // Use of "; ok" to suppress "warning[fwdref]"
 434+ 7722             >
 434+ 7722             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 435+ 7722 59 68 DE 6B                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 435+ 7726 64 68
 436+ 7728 00 77                        dw      MDIVM                   // m/mod
 437+ 772A 4F 68                        dw      EXIT                    // ;
 438+ 772C
 439+ 772C              //  ______________________________________________________________________
 440+ 772C              //
 441+ 772C              // /            n1 n2 -- n3
 442+ 772C              // division
 443+ 772C                              Colon_Def DIV, "/", is_normal
 443+ 772C             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 443+ 772C             >
 443+ 772C             >Dict_Ptr        defl    $
 443+ 772C             >
 443+ 772C             >//              ______________________________________________________________________
 443+ 772C             >//              Heap part
 443+ 772C             >
 443+ 772C             >
 443+ 772C             >                org     (Heap_Ptr & $1FFF) + $E000
 443+ E9DF             >
 443+ E9DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 443+ E9DF             >Latest_Definition defl  Heap_Ptr
 443+ E9DF             >
 443+ E9DF             >                // dummy db directives used to calculate length of namec
 443+ E9DF 2F          >                db      "/"
 443+ E9E0             >len_NFA         defl    $ - temp_NFA
 443+ E9E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 443+ E9DF             >
 443+ E9DF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 443+ E9E0 2F          >                db      "/"               // name string in 7-bit ascii, but
 443+ E9E1             >                org     $-1                 // alter last byte of Name just above to set
 443+ E9E0 AF          >                db      {b $} | END_BIT     // msb as name end
 443+ E9E1             >
 443+ E9E1 D6 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 443+ E9E3             >Prev_Ptr        defl    Heap_Ptr
 443+ E9E3             >
 443+ E9E3             >mirror_Ptr      defl    $
 443+ E9E3             >
 443+ E9E3 2E 77       >                dw      Dict_Ptr + 2        // xt
 443+ E9E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 443+ E9E5             >
 443+ E9E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 443+ E9E5             >
 443+ E9E5             >//              ______________________________________________________________________
 443+ E9E5             >//              Dictionary part
 443+ E9E5             >
 443+ E9E5             >                org     Dict_Ptr
 443+ 772C             >
 443+ 772C E3 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 443+ 772E             >
 443+ 772E             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 443+ 772E CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 443+ 7731             >
 443+ 7731             >
 443+ 7731             >                endif           ; ok        // for other definitions it "points" the correct handler
 443+ 7731             >                // Use of "; ok" to suppress "warning[fwdref]"
 443+ 7731             >
 443+ 7731             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 444+ 7731 1F 77 0F 69                  dw      DIVMOD, NIP             // /mod nip
 445+ 7735 4F 68                        dw      EXIT                    // ;
 446+ 7737
 447+ 7737              //  ______________________________________________________________________
 448+ 7737              //
 449+ 7737              // mod          n1 n2 -- n3
 450+ 7737                              Colon_Def MOD, "MOD", is_normal
 450+ 7737             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 450+ 7737             >
 450+ 7737             >Dict_Ptr        defl    $
 450+ 7737             >
 450+ 7737             >//              ______________________________________________________________________
 450+ 7737             >//              Heap part
 450+ 7737             >
 450+ 7737             >
 450+ 7737             >                org     (Heap_Ptr & $1FFF) + $E000
 450+ E9E5             >
 450+ E9E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 450+ E9E5             >Latest_Definition defl  Heap_Ptr
 450+ E9E5             >
 450+ E9E5             >                // dummy db directives used to calculate length of namec
 450+ E9E5 4D 4F 44    >                db      "MOD"
 450+ E9E8             >len_NFA         defl    $ - temp_NFA
 450+ E9E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 450+ E9E5             >
 450+ E9E5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 450+ E9E6 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 450+ E9E9             >                org     $-1                 // alter last byte of Name just above to set
 450+ E9E8 C4          >                db      {b $} | END_BIT     // msb as name end
 450+ E9E9             >
 450+ E9E9 DF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 450+ E9EB             >Prev_Ptr        defl    Heap_Ptr
 450+ E9EB             >
 450+ E9EB             >mirror_Ptr      defl    $
 450+ E9EB             >
 450+ E9EB 39 77       >                dw      Dict_Ptr + 2        // xt
 450+ E9ED             >Heap_Ptr        defl    $ - $E000           // save current HP
 450+ E9ED             >
 450+ E9ED             >Current_HP      defl  $ - $E000             // used to set HP once!
 450+ E9ED             >
 450+ E9ED             >//              ______________________________________________________________________
 450+ E9ED             >//              Dictionary part
 450+ E9ED             >
 450+ E9ED             >                org     Dict_Ptr
 450+ 7737             >
 450+ 7737 EB 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 450+ 7739             >
 450+ 7739             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 450+ 7739 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 450+ 773C             >
 450+ 773C             >
 450+ 773C             >                endif           ; ok        // for other definitions it "points" the correct handler
 450+ 773C             >                // Use of "; ok" to suppress "warning[fwdref]"
 450+ 773C             >
 450+ 773C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 451+ 773C 1F 77 0A 69                  dw      DIVMOD, DROP            // /mod drop
 452+ 7740 4F 68                        dw      EXIT                    // ;
 453+ 7742
 454+ 7742              //  ______________________________________________________________________
 455+ 7742              //
 456+ 7742              // */mod        n1 n2 n3 -- n4 n5
 457+ 7742              // leaves the quotient n5 and the remainder n4 of the operation
 458+ 7742              // (n1 * n2) / n3. The intermediate passage through a double number
 459+ 7742              // avoids loss of precision
 460+ 7742                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 460+ 7742             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 460+ 7742             >
 460+ 7742             >Dict_Ptr        defl    $
 460+ 7742             >
 460+ 7742             >//              ______________________________________________________________________
 460+ 7742             >//              Heap part
 460+ 7742             >
 460+ 7742             >
 460+ 7742             >                org     (Heap_Ptr & $1FFF) + $E000
 460+ E9ED             >
 460+ E9ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ E9ED             >Latest_Definition defl  Heap_Ptr
 460+ E9ED             >
 460+ E9ED             >                // dummy db directives used to calculate length of namec
 460+ E9ED 2A 2F 4D 4F >                db      "*/MOD"
 460+ E9F1 44          >
 460+ E9F2             >len_NFA         defl    $ - temp_NFA
 460+ E9F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ E9ED             >
 460+ E9ED 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ E9EE 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 460+ E9F2 44          >
 460+ E9F3             >                org     $-1                 // alter last byte of Name just above to set
 460+ E9F2 C4          >                db      {b $} | END_BIT     // msb as name end
 460+ E9F3             >
 460+ E9F3 E5 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 460+ E9F5             >Prev_Ptr        defl    Heap_Ptr
 460+ E9F5             >
 460+ E9F5             >mirror_Ptr      defl    $
 460+ E9F5             >
 460+ E9F5 44 77       >                dw      Dict_Ptr + 2        // xt
 460+ E9F7             >Heap_Ptr        defl    $ - $E000           // save current HP
 460+ E9F7             >
 460+ E9F7             >Current_HP      defl  $ - $E000             // used to set HP once!
 460+ E9F7             >
 460+ E9F7             >//              ______________________________________________________________________
 460+ E9F7             >//              Dictionary part
 460+ E9F7             >
 460+ E9F7             >                org     Dict_Ptr
 460+ 7742             >
 460+ 7742 F5 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 460+ 7744             >
 460+ 7744             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 7744 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 7747             >
 460+ 7747             >
 460+ 7747             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 7747             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 7747             >
 460+ 7747             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 7747 59 68 8B 76                  dw      TO_R, MMUL              // >r  m*
 462+ 774B 64 68 00 77                  dw      R_TO, MDIVM             // r>  m/mod
 463+ 774F 4F 68                        dw      EXIT                    // ;
 464+ 7751
 465+ 7751              //  ______________________________________________________________________
 466+ 7751              //
 467+ 7751              // */          n1 n2 n3 -- n4
 468+ 7751              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 469+ 7751                              Colon_Def MUL_DIV, "*/", is_normal
 469+ 7751             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 469+ 7751             >
 469+ 7751             >Dict_Ptr        defl    $
 469+ 7751             >
 469+ 7751             >//              ______________________________________________________________________
 469+ 7751             >//              Heap part
 469+ 7751             >
 469+ 7751             >
 469+ 7751             >                org     (Heap_Ptr & $1FFF) + $E000
 469+ E9F7             >
 469+ E9F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 469+ E9F7             >Latest_Definition defl  Heap_Ptr
 469+ E9F7             >
 469+ E9F7             >                // dummy db directives used to calculate length of namec
 469+ E9F7 2A 2F       >                db      "*/"
 469+ E9F9             >len_NFA         defl    $ - temp_NFA
 469+ E9F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 469+ E9F7             >
 469+ E9F7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 469+ E9F8 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 469+ E9FA             >                org     $-1                 // alter last byte of Name just above to set
 469+ E9F9 AF          >                db      {b $} | END_BIT     // msb as name end
 469+ E9FA             >
 469+ E9FA ED 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 469+ E9FC             >Prev_Ptr        defl    Heap_Ptr
 469+ E9FC             >
 469+ E9FC             >mirror_Ptr      defl    $
 469+ E9FC             >
 469+ E9FC 53 77       >                dw      Dict_Ptr + 2        // xt
 469+ E9FE             >Heap_Ptr        defl    $ - $E000           // save current HP
 469+ E9FE             >
 469+ E9FE             >Current_HP      defl  $ - $E000             // used to set HP once!
 469+ E9FE             >
 469+ E9FE             >//              ______________________________________________________________________
 469+ E9FE             >//              Dictionary part
 469+ E9FE             >
 469+ E9FE             >                org     Dict_Ptr
 469+ 7751             >
 469+ 7751 FC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 469+ 7753             >
 469+ 7753             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 469+ 7753 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 469+ 7756             >
 469+ 7756             >
 469+ 7756             >                endif           ; ok        // for other definitions it "points" the correct handler
 469+ 7756             >                // Use of "; ok" to suppress "warning[fwdref]"
 469+ 7756             >
 469+ 7756             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 470+ 7756 44 77                        dw     MUL_DIV_MOD              // */mod
 471+ 7758 0F 69                        dw     NIP                      // nip
 472+ 775A 4F 68                        dw     EXIT                     // ;
 473+ 775C
 474+ 775C
 475+ 775C              //  ______________________________________________________________________
 476+ 775C              //
 477+ 775C              // m/mod        ud1 u2 -- u3 ud4
 478+ 775C              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 479+ 775C              // All terms are unsigned.
 480+ 775C              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 481+ 775C              //              dw      TO_R                    // >r           ( ud1 )
 482+ 775C              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 483+ 775C              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 484+ 775C              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 485+ 775C              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 486+ 775C              //              dw      EXIT                    // ;
 487+ 775C
 488+ 775C              //  ______________________________________________________________________
 489+ 775C              //
 490+ 775C              // (line)       n1 n2 -- a b
 491+ 775C              // sends the line n1 of block n2 to the disk buffer.
 492+ 775C              // it returns the address a and ca counter b = C/L meaning a whole line.
 493+ 775C                              Colon_Def CLINE, "(LINE)", is_normal
 493+ 775C             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 493+ 775C             >
 493+ 775C             >Dict_Ptr        defl    $
 493+ 775C             >
 493+ 775C             >//              ______________________________________________________________________
 493+ 775C             >//              Heap part
 493+ 775C             >
 493+ 775C             >
 493+ 775C             >                org     (Heap_Ptr & $1FFF) + $E000
 493+ E9FE             >
 493+ E9FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 493+ E9FE             >Latest_Definition defl  Heap_Ptr
 493+ E9FE             >
 493+ E9FE             >                // dummy db directives used to calculate length of namec
 493+ E9FE 28 4C 49 4E >                db      "(LINE)"
 493+ EA02 45 29       >
 493+ EA04             >len_NFA         defl    $ - temp_NFA
 493+ EA04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 493+ E9FE             >
 493+ E9FE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 493+ E9FF 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 493+ EA03 45 29       >
 493+ EA05             >                org     $-1                 // alter last byte of Name just above to set
 493+ EA04 A9          >                db      {b $} | END_BIT     // msb as name end
 493+ EA05             >
 493+ EA05 F7 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 493+ EA07             >Prev_Ptr        defl    Heap_Ptr
 493+ EA07             >
 493+ EA07             >mirror_Ptr      defl    $
 493+ EA07             >
 493+ EA07 5E 77       >                dw      Dict_Ptr + 2        // xt
 493+ EA09             >Heap_Ptr        defl    $ - $E000           // save current HP
 493+ EA09             >
 493+ EA09             >Current_HP      defl  $ - $E000             // used to set HP once!
 493+ EA09             >
 493+ EA09             >//              ______________________________________________________________________
 493+ EA09             >//              Dictionary part
 493+ EA09             >
 493+ EA09             >                org     Dict_Ptr
 493+ 775C             >
 493+ 775C 07 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 493+ 775E             >
 493+ 775E             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 493+ 775E CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 493+ 7761             >
 493+ 7761             >
 493+ 7761             >                endif           ; ok        // for other definitions it "points" the correct handler
 493+ 7761             >                // Use of "; ok" to suppress "warning[fwdref]"
 493+ 7761             >
 493+ 7761             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 494+ 7761 59 68                        dw      TO_R                    // >r
 495+ 7763 AF 6A                        dw      CL                      // c/l
 496+ 7765 B6 6A 44 77                  dw      BBUF, MUL_DIV_MOD       // */mod
 497+ 7769 64 68                        dw      R_TO                    // r>
 498+ 776B BD 6A 14 77                  dw      BSCR, MUL, PLUS         // b/scr * +
 498+ 776F A1 68
 499+ 7771 71 79                        dw      BLOCK                   // block   ( forward )
 500+ 7773 A1 68                        dw      PLUS                    // +
 501+ 7775 AF 6A                        dw      CL                      // c/l
 502+ 7777 4F 68                        dw      EXIT                    // ;
 503+ 7779
 504+ 7779              //  ______________________________________________________________________
 505+ 7779              //
 506+ 7779              // .line        n1 n2 --
 507+ 7779              // Sends to output line  n1  of screen n2.
 508+ 7779                              Colon_Def DOT_LINE, ".LINE", is_normal
 508+ 7779             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 508+ 7779             >
 508+ 7779             >Dict_Ptr        defl    $
 508+ 7779             >
 508+ 7779             >//              ______________________________________________________________________
 508+ 7779             >//              Heap part
 508+ 7779             >
 508+ 7779             >
 508+ 7779             >                org     (Heap_Ptr & $1FFF) + $E000
 508+ EA09             >
 508+ EA09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 508+ EA09             >Latest_Definition defl  Heap_Ptr
 508+ EA09             >
 508+ EA09             >                // dummy db directives used to calculate length of namec
 508+ EA09 2E 4C 49 4E >                db      ".LINE"
 508+ EA0D 45          >
 508+ EA0E             >len_NFA         defl    $ - temp_NFA
 508+ EA0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 508+ EA09             >
 508+ EA09 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 508+ EA0A 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 508+ EA0E 45          >
 508+ EA0F             >                org     $-1                 // alter last byte of Name just above to set
 508+ EA0E C5          >                db      {b $} | END_BIT     // msb as name end
 508+ EA0F             >
 508+ EA0F FE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 508+ EA11             >Prev_Ptr        defl    Heap_Ptr
 508+ EA11             >
 508+ EA11             >mirror_Ptr      defl    $
 508+ EA11             >
 508+ EA11 7B 77       >                dw      Dict_Ptr + 2        // xt
 508+ EA13             >Heap_Ptr        defl    $ - $E000           // save current HP
 508+ EA13             >
 508+ EA13             >Current_HP      defl  $ - $E000             // used to set HP once!
 508+ EA13             >
 508+ EA13             >//              ______________________________________________________________________
 508+ EA13             >//              Dictionary part
 508+ EA13             >
 508+ EA13             >                org     Dict_Ptr
 508+ 7779             >
 508+ 7779 11 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 508+ 777B             >
 508+ 777B             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 508+ 777B CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 508+ 777E             >
 508+ 777E             >
 508+ 777E             >                endif           ; ok        // for other definitions it "points" the correct handler
 508+ 777E             >                // Use of "; ok" to suppress "warning[fwdref]"
 508+ 777E             >
 508+ 777E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 509+ 777E 5E 77 83 6F                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 509+ 7782 6C 6F
 510+ 7784 4F 68                        dw      EXIT                    // ;
 511+ 7786
 512+ 7786              //  ______________________________________________________________________
 513+ 7786              //
 514+ 7786              // message       n1 n2 --
 515+ 7786              // prints error message to current channel.
 516+ 7786              // if WARNING is 0, prints "MSG#n".
 517+ 7786              // if WARNING is 1, prints line n of screen 4.
 518+ 7786              // if WARNING is -1, see ERROR
 519+ 7786              // value can be negative or beyond block 4.
 520+ 7786                              Colon_Def MESSAGE, "MESSAGE", is_normal
 520+ 7786             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 520+ 7786             >
 520+ 7786             >Dict_Ptr        defl    $
 520+ 7786             >
 520+ 7786             >//              ______________________________________________________________________
 520+ 7786             >//              Heap part
 520+ 7786             >
 520+ 7786             >
 520+ 7786             >                org     (Heap_Ptr & $1FFF) + $E000
 520+ EA13             >
 520+ EA13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 520+ EA13             >Latest_Definition defl  Heap_Ptr
 520+ EA13             >
 520+ EA13             >                // dummy db directives used to calculate length of namec
 520+ EA13 4D 45 53 53 >                db      "MESSAGE"
 520+ EA17 41 47 45    >
 520+ EA1A             >len_NFA         defl    $ - temp_NFA
 520+ EA1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 520+ EA13             >
 520+ EA13 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 520+ EA14 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 520+ EA18 41 47 45    >
 520+ EA1B             >                org     $-1                 // alter last byte of Name just above to set
 520+ EA1A C5          >                db      {b $} | END_BIT     // msb as name end
 520+ EA1B             >
 520+ EA1B 09 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 520+ EA1D             >Prev_Ptr        defl    Heap_Ptr
 520+ EA1D             >
 520+ EA1D             >mirror_Ptr      defl    $
 520+ EA1D             >
 520+ EA1D 88 77       >                dw      Dict_Ptr + 2        // xt
 520+ EA1F             >Heap_Ptr        defl    $ - $E000           // save current HP
 520+ EA1F             >
 520+ EA1F             >Current_HP      defl  $ - $E000             // used to set HP once!
 520+ EA1F             >
 520+ EA1F             >//              ______________________________________________________________________
 520+ EA1F             >//              Dictionary part
 520+ EA1F             >
 520+ EA1F             >                org     Dict_Ptr
 520+ 7786             >
 520+ 7786 1D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 520+ 7788             >
 520+ 7788             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 520+ 7788 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 520+ 778B             >
 520+ 778B             >
 520+ 778B             >                endif           ; ok        // for other definitions it "points" the correct handler
 520+ 778B             >                // Use of "; ok" to suppress "warning[fwdref]"
 520+ 778B             >
 520+ 778B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 521+ 778B F6 6A 8F 69                  dw      WARNING, FETCH          // warning @
 522+ 778F                                                              // if
 523+ 778F F5 63                        dw      ZBRANCH
 524+ 7791 12 00                        dw      Message_Else - $
 525+ 7793 A3 63 20 00                  dw          LIT, 32, PLUS       //      32 +
 525+ 7797 A1 68
 526+ 7799 93 6A                        dw          TWO                 //      2
 527+ 779B 7B 77                        dw          DOT_LINE            //      .line
 528+ 779D 73 6C                        dw          SPACE               //      space
 529+ 779F                                                              // else
 530+ 779F
 531+ 779F E8 63                        dw      BRANCH
 532+ 77A1 0B 00                        dw      Message_ENdif - $
 533+ 77A3              Message_Else:
 534+ 77A3 09 71                        dw          C_DOT_QUOTE         //      .( msg#)
 535+ 77A5 04 6D 73 67                  db          4, "msg#"
 535+ 77A9 23
 536+ 77AA A7 7E                        dw          DOT                 //      .  ( forward )
 537+ 77AC              Message_ENdif:                                  // endif
 538+ 77AC 4F 68                        dw      EXIT                    // ;
 539+ 77AE
 540+ 77AE
 541+ 77AE              //  ______________________________________________________________________
 542+ 77AE              //
 543+ 77AE              // device
 544+ 77AE                              Variable_Def DEVICE,   "DEVICE",   2
 544+ 77AE             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 544+ 77AE             >
 544+ 77AE             >Dict_Ptr        defl    $
 544+ 77AE             >
 544+ 77AE             >//              ______________________________________________________________________
 544+ 77AE             >//              Heap part
 544+ 77AE             >
 544+ 77AE             >
 544+ 77AE             >                org     (Heap_Ptr & $1FFF) + $E000
 544+ EA1F             >
 544+ EA1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 544+ EA1F             >Latest_Definition defl  Heap_Ptr
 544+ EA1F             >
 544+ EA1F             >                // dummy db directives used to calculate length of namec
 544+ EA1F 44 45 56 49 >                db      "DEVICE"
 544+ EA23 43 45       >
 544+ EA25             >len_NFA         defl    $ - temp_NFA
 544+ EA25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 544+ EA1F             >
 544+ EA1F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 544+ EA20 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 544+ EA24 43 45       >
 544+ EA26             >                org     $-1                 // alter last byte of Name just above to set
 544+ EA25 C5          >                db      {b $} | END_BIT     // msb as name end
 544+ EA26             >
 544+ EA26 13 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 544+ EA28             >Prev_Ptr        defl    Heap_Ptr
 544+ EA28             >
 544+ EA28             >mirror_Ptr      defl    $
 544+ EA28             >
 544+ EA28 B0 77       >                dw      Dict_Ptr + 2        // xt
 544+ EA2A             >Heap_Ptr        defl    $ - $E000           // save current HP
 544+ EA2A             >
 544+ EA2A             >Current_HP      defl  $ - $E000             // used to set HP once!
 544+ EA2A             >
 544+ EA2A             >//              ______________________________________________________________________
 544+ EA2A             >//              Dictionary part
 544+ EA2A             >
 544+ EA2A             >                org     Dict_Ptr
 544+ 77AE             >
 544+ 77AE 28 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 544+ 77B0             >
 544+ 77B0             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 544+ 77B0 CD 6C 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 544+ 77B3             >
 544+ 77B3             >
 544+ 77B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 544+ 77B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 544+ 77B3             >
 544+ 77B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 544+ 77B3 02 00       >                dw      2
 545+ 77B5
 546+ 77B5              //  ______________________________________________________________________
 547+ 77B5
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
 141  77B5                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
   1+ 77B5              //  ______________________________________________________________________
   2+ 77B5              //
   3+ 77B5              //  next-opt.asm
   4+ 77B5              //
   5+ 77B5              //  ZX Spectrum Next - peculiar definitions
   6+ 77B5              //  ______________________________________________________________________
   7+ 77B5
   8+ 77B5              //  ______________________________________________________________________
   9+ 77B5              //
  10+ 77B5              // reg@         n -- b
  11+ 77B5              // read Next REGister n giving byte b
  12+ 77B5              //
  13+ 77B5              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 77B5              //              dw      LIT, $243B
  15+ 77B5              //              dw      PSTORE
  16+ 77B5              //              dw      LIT, $253B
  17+ 77B5              //              dw      PFETCH
  18+ 77B5              //              dw      EXIT
  19+ 77B5                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 77B5             >
  19+ 77B5             >Dict_Ptr        defl    $
  19+ 77B5             >
  19+ 77B5             >//              ______________________________________________________________________
  19+ 77B5             >//              Heap part
  19+ 77B5             >
  19+ 77B5             >
  19+ 77B5             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA2A             >
  19+ EA2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA2A             >Latest_Definition defl  Heap_Ptr
  19+ EA2A             >
  19+ EA2A             >                // dummy db directives used to calculate length of namec
  19+ EA2A 52 45 47 40 >                db      "REG@"
  19+ EA2E             >len_NFA         defl    $ - temp_NFA
  19+ EA2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA2A             >
  19+ EA2A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA2B 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA2F             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA2E C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA2F             >
  19+ EA2F 1F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA31             >Prev_Ptr        defl    Heap_Ptr
  19+ EA31             >
  19+ EA31             >mirror_Ptr      defl    $
  19+ EA31             >
  19+ EA31 B7 77       >                dw      Dict_Ptr + 2        // xt
  19+ EA33             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA33             >
  19+ EA33             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA33             >
  19+ EA33             >//              ______________________________________________________________________
  19+ EA33             >//              Dictionary part
  19+ EA33             >
  19+ EA33             >                org     Dict_Ptr
  19+ 77B5             >
  19+ 77B5 31 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 77B7             >
  19+ 77B7             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 77B7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 77B7 ~           >
  19+ 77B7 ~           >
  19+ 77B7             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 77B7             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 77B7             >
  19+ 77B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 77B7 D9                           exx
  21+ 77B8 01 3B 24                     ld      bc, $243B
  22+ 77BB E1                           pop     hl
  23+ 77BC ED 69                        out     (c), l
  24+ 77BE 04                           inc     b
  25+ 77BF ED 68                        in      l, (c)
  26+ 77C1 E5                           push    hl
  27+ 77C2 D9                           exx
  28+ 77C3                              next
  28+ 77C3 DD E9       >                jp      (ix)
  29+ 77C5
  30+ 77C5
  31+ 77C5              //  ______________________________________________________________________
  32+ 77C5              //
  33+ 77C5              // reg!         b n --
  34+ 77C5              // write value b to Next REGister n
  35+ 77C5              //
  36+ 77C5              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 77C5              //              dw      LIT, $243B
  38+ 77C5              //              dw      PSTORE
  39+ 77C5              //              dw      LIT, $253B
  40+ 77C5              //              dw      PSTORE
  41+ 77C5              //              dw      EXIT
  42+ 77C5                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 77C5             >
  42+ 77C5             >Dict_Ptr        defl    $
  42+ 77C5             >
  42+ 77C5             >//              ______________________________________________________________________
  42+ 77C5             >//              Heap part
  42+ 77C5             >
  42+ 77C5             >
  42+ 77C5             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA33             >
  42+ EA33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA33             >Latest_Definition defl  Heap_Ptr
  42+ EA33             >
  42+ EA33             >                // dummy db directives used to calculate length of namec
  42+ EA33 52 45 47 21 >                db      "REG!"
  42+ EA37             >len_NFA         defl    $ - temp_NFA
  42+ EA37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA33             >
  42+ EA33 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA34 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA38             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA37 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA38             >
  42+ EA38 2A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA3A             >Prev_Ptr        defl    Heap_Ptr
  42+ EA3A             >
  42+ EA3A             >mirror_Ptr      defl    $
  42+ EA3A             >
  42+ EA3A C7 77       >                dw      Dict_Ptr + 2        // xt
  42+ EA3C             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA3C             >
  42+ EA3C             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA3C             >
  42+ EA3C             >//              ______________________________________________________________________
  42+ EA3C             >//              Dictionary part
  42+ EA3C             >
  42+ EA3C             >                org     Dict_Ptr
  42+ 77C5             >
  42+ 77C5 3A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 77C7             >
  42+ 77C7             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 77C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 77C7 ~           >
  42+ 77C7 ~           >
  42+ 77C7             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 77C7             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 77C7             >
  42+ 77C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 77C7 D9                           exx
  44+ 77C8 01 3B 24                     ld      bc, $243B
  45+ 77CB E1                           pop     hl
  46+ 77CC ED 69                        out     (c), l
  47+ 77CE 04                           inc     b
  48+ 77CF E1                           pop     hl
  49+ 77D0 ED 69                        out     (c), l
  50+ 77D2 D9                           exx
  51+ 77D3                              next
  51+ 77D3 DD E9       >                jp      (ix)
  52+ 77D5
  53+ 77D5
  54+ 77D5              //  ______________________________________________________________________
  55+ 77D5              //
  56+ 77D5              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 77D5              // NextZXOS call wrapper.
  58+ 77D5              //  n1 = hl register parameter value
  59+ 77D5              //  n2 = de register parameter value
  60+ 77D5              //  n3 = bc register parameter value
  61+ 77D5              //  n4 =  a register parameter value
  62+ 77D5              //   a = routine address in ROM 3
  63+ 77D5              // ----
  64+ 77D5              //  n5 = hl returned value
  65+ 77D5              //  n6 = de returned value
  66+ 77D5              //  n7 = bc returned value
  67+ 77D5              //  n8 =  a returned value
  68+ 77D5              //   f
  69+ 77D5                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 77D5             >
  69+ 77D5             >Dict_Ptr        defl    $
  69+ 77D5             >
  69+ 77D5             >//              ______________________________________________________________________
  69+ 77D5             >//              Heap part
  69+ 77D5             >
  69+ 77D5             >
  69+ 77D5             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA3C             >
  69+ EA3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA3C             >Latest_Definition defl  Heap_Ptr
  69+ EA3C             >
  69+ EA3C             >                // dummy db directives used to calculate length of namec
  69+ EA3C 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA40 44 4F 53    >
  69+ EA43             >len_NFA         defl    $ - temp_NFA
  69+ EA43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA3C             >
  69+ EA3C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA3D 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA41 44 4F 53    >
  69+ EA44             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA43 D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA44             >
  69+ EA44 33 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA46             >Prev_Ptr        defl    Heap_Ptr
  69+ EA46             >
  69+ EA46             >mirror_Ptr      defl    $
  69+ EA46             >
  69+ EA46 D7 77       >                dw      Dict_Ptr + 2        // xt
  69+ EA48             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA48             >
  69+ EA48             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA48             >
  69+ EA48             >//              ______________________________________________________________________
  69+ EA48             >//              Dictionary part
  69+ EA48             >
  69+ EA48             >                org     Dict_Ptr
  69+ 77D5             >
  69+ 77D5 46 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 77D7             >
  69+ 77D7             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 77D7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 77D7 ~           >
  69+ 77D7 ~           >
  69+ 77D7             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 77D7             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 77D7             >
  69+ 77D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 77D7 D9                            exx
  71+ 77D8 E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 77D9 D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 77DA 7B                            ld      a, e
  74+ 77DB C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 77DC D1                            pop     de                  // de' argument              //  n1
  76+ 77DD E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 77DE D9                           exx
  78+ 77DF E1                           pop     hl                  // entry address a
  79+ 77E0 DD E5                        push    ix
  80+ 77E2 D5                           push    de
  81+ 77E3 C5                           push    bc
  82+ 77E4 EB                           ex      de, hl              // de is entry address
  83+ 77E5              //              ld      (SP_Saved), sp
  84+ 77E5              //              ld      sp, Cold_origin - 5
  85+ 77E5 0E 07                        ld      c, 7                // use 7 RAM Bank
  86+ 77E7 F3                           di
  87+ 77E8 CF                           rst     08
  88+ 77E9 94                           db      $94
  89+ 77EA FB                           ei
  90+ 77EB              //              ld      sp, (SP_Saved)
  91+ 77EB              //              push    ix
  92+ 77EB              //              pop     hl
  93+ 77EB              //              ld      (IX_Echo), hl
  94+ 77EB DD 22 98 63                  ld      (IX_Echo), ix
  95+ 77EF
  96+ 77EF D9                           exx
  97+ 77F0 C1                           pop     bc
  98+ 77F1 D1                           pop     de
  99+ 77F2 DD E1                        pop     ix
 100+ 77F4 D9                            exx
 101+ 77F5 E5                            push    hl
 102+ 77F6 D5                            push    de
 103+ 77F7 C5                            push    bc
 104+ 77F8 26 00                         ld      h, 0
 105+ 77FA 6F                            ld      l, a
 106+ 77FB E5                            push    hl
 107+ 77FC D9                           exx
 108+ 77FD ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 109+ 77FF 23                           inc     hl                  //  0 for OK ; 1 for ko
 110+ 7800 E5                           push    hl
 111+ 7801                              next
 111+ 7801 DD E9       >                jp      (ix)
 112+ 7803
 113+ 7803              //  ______________________________________________________________________
 114+ 7803              //
 115+ 7803              // blk-fh
 116+ 7803                              Variable_Def BLK_FH,   "BLK-FH",   1
 116+ 7803             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 116+ 7803             >
 116+ 7803             >Dict_Ptr        defl    $
 116+ 7803             >
 116+ 7803             >//              ______________________________________________________________________
 116+ 7803             >//              Heap part
 116+ 7803             >
 116+ 7803             >
 116+ 7803             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ EA48             >
 116+ EA48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ EA48             >Latest_Definition defl  Heap_Ptr
 116+ EA48             >
 116+ EA48             >                // dummy db directives used to calculate length of namec
 116+ EA48 42 4C 4B 2D >                db      "BLK-FH"
 116+ EA4C 46 48       >
 116+ EA4E             >len_NFA         defl    $ - temp_NFA
 116+ EA4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ EA48             >
 116+ EA48 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ EA49 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 116+ EA4D 46 48       >
 116+ EA4F             >                org     $-1                 // alter last byte of Name just above to set
 116+ EA4E C8          >                db      {b $} | END_BIT     // msb as name end
 116+ EA4F             >
 116+ EA4F 3C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ EA51             >Prev_Ptr        defl    Heap_Ptr
 116+ EA51             >
 116+ EA51             >mirror_Ptr      defl    $
 116+ EA51             >
 116+ EA51 05 78       >                dw      Dict_Ptr + 2        // xt
 116+ EA53             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ EA53             >
 116+ EA53             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ EA53             >
 116+ EA53             >//              ______________________________________________________________________
 116+ EA53             >//              Dictionary part
 116+ EA53             >
 116+ EA53             >                org     Dict_Ptr
 116+ 7803             >
 116+ 7803 51 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 7805             >
 116+ 7805             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 7805 CD 6C 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 116+ 7808             >
 116+ 7808             >
 116+ 7808             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 7808             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 7808             >
 116+ 7808             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 116+ 7808 01 00       >                dw      1
 117+ 780A
 118+ 780A                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 118+ 780A             >
 118+ 780A             >Dict_Ptr        defl    $
 118+ 780A             >
 118+ 780A             >//              ______________________________________________________________________
 118+ 780A             >//              Heap part
 118+ 780A             >
 118+ 780A             >
 118+ 780A             >                org     (Heap_Ptr & $1FFF) + $E000
 118+ EA53             >
 118+ EA53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ EA53             >Latest_Definition defl  Heap_Ptr
 118+ EA53             >
 118+ EA53             >                // dummy db directives used to calculate length of namec
 118+ EA53 42 4C 4B 2D >                db      "BLK-FNAME"
 118+ EA57 46 4E 41 4D >
 118+ EA5B 45          >
 118+ EA5C             >len_NFA         defl    $ - temp_NFA
 118+ EA5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ EA53             >
 118+ EA53 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ EA54 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 118+ EA58 46 4E 41 4D >
 118+ EA5C 45          >
 118+ EA5D             >                org     $-1                 // alter last byte of Name just above to set
 118+ EA5C C5          >                db      {b $} | END_BIT     // msb as name end
 118+ EA5D             >
 118+ EA5D 48 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 118+ EA5F             >Prev_Ptr        defl    Heap_Ptr
 118+ EA5F             >
 118+ EA5F             >mirror_Ptr      defl    $
 118+ EA5F             >
 118+ EA5F 0C 78       >                dw      Dict_Ptr + 2        // xt
 118+ EA61             >Heap_Ptr        defl    $ - $E000           // save current HP
 118+ EA61             >
 118+ EA61             >Current_HP      defl  $ - $E000             // used to set HP once!
 118+ EA61             >
 118+ EA61             >//              ______________________________________________________________________
 118+ EA61             >//              Dictionary part
 118+ EA61             >
 118+ EA61             >                org     Dict_Ptr
 118+ 780A             >
 118+ 780A 5F 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 118+ 780C             >
 118+ 780C             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 780C CD 09 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 118+ 780F             >
 118+ 780F             >
 118+ 780F             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 780F             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 780F             >
 118+ 780F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 780F 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 119+ 7813 6F 63 6B 73
 119+ 7817 2D 36 34 2E
 119+ 781B 62 69 6E 00
 120+ 781F 00 00 00...                  ds      24     // so this buffer is 24+14+1=39
 121+ 7837
 122+ 7837              //  ______________________________________________________________________
 123+ 7837              //
 124+ 7837              // blk-seek     n --
 125+ 7837              // seek block n  within blocks!.bin  file
 126+ 7837                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 126+ 7837             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 126+ 7837             >
 126+ 7837             >Dict_Ptr        defl    $
 126+ 7837             >
 126+ 7837             >//              ______________________________________________________________________
 126+ 7837             >//              Heap part
 126+ 7837             >
 126+ 7837             >
 126+ 7837             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ EA61             >
 126+ EA61             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ EA61             >Latest_Definition defl  Heap_Ptr
 126+ EA61             >
 126+ EA61             >                // dummy db directives used to calculate length of namec
 126+ EA61 42 4C 4B 2D >                db      "BLK-SEEK"
 126+ EA65 53 45 45 4B >
 126+ EA69             >len_NFA         defl    $ - temp_NFA
 126+ EA69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ EA61             >
 126+ EA61 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ EA62 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 126+ EA66 53 45 45 4B >
 126+ EA6A             >                org     $-1                 // alter last byte of Name just above to set
 126+ EA69 CB          >                db      {b $} | END_BIT     // msb as name end
 126+ EA6A             >
 126+ EA6A 53 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ EA6C             >Prev_Ptr        defl    Heap_Ptr
 126+ EA6C             >
 126+ EA6C             >mirror_Ptr      defl    $
 126+ EA6C             >
 126+ EA6C 39 78       >                dw      Dict_Ptr + 2        // xt
 126+ EA6E             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ EA6E             >
 126+ EA6E             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ EA6E             >
 126+ EA6E             >//              ______________________________________________________________________
 126+ EA6E             >//              Dictionary part
 126+ EA6E             >
 126+ EA6E             >                org     Dict_Ptr
 126+ 7837             >
 126+ 7837 6C 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 7839             >
 126+ 7839             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 7839 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 126+ 783C             >
 126+ 783C             >
 126+ 783C             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 783C             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 783C             >
 126+ 783C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 783C B6 6A 8B 76                  dw  BBUF, MMUL
 128+ 7840 05 78 8F 69                  dw  BLK_FH, FETCH
 129+ 7844 DA 66                        dw  F_SEEK
 130+ 7846 A3 63 2D 00                  dw  LIT, $2D, QERROR
 130+ 784A DE 6D
 131+ 784C 4F 68                        dw  EXIT
 132+ 784E
 133+ 784E              //  ______________________________________________________________________
 134+ 784E              //
 135+ 784E              // blk-read     n --
 136+ 784E              // seek block n  within blocks!.bin  file
 137+ 784E                              Colon_Def BLK_READ, "BLK-READ", is_normal
 137+ 784E             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 137+ 784E             >
 137+ 784E             >Dict_Ptr        defl    $
 137+ 784E             >
 137+ 784E             >//              ______________________________________________________________________
 137+ 784E             >//              Heap part
 137+ 784E             >
 137+ 784E             >
 137+ 784E             >                org     (Heap_Ptr & $1FFF) + $E000
 137+ EA6E             >
 137+ EA6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ EA6E             >Latest_Definition defl  Heap_Ptr
 137+ EA6E             >
 137+ EA6E             >                // dummy db directives used to calculate length of namec
 137+ EA6E 42 4C 4B 2D >                db      "BLK-READ"
 137+ EA72 52 45 41 44 >
 137+ EA76             >len_NFA         defl    $ - temp_NFA
 137+ EA76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ EA6E             >
 137+ EA6E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ EA6F 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 137+ EA73 52 45 41 44 >
 137+ EA77             >                org     $-1                 // alter last byte of Name just above to set
 137+ EA76 C4          >                db      {b $} | END_BIT     // msb as name end
 137+ EA77             >
 137+ EA77 61 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 137+ EA79             >Prev_Ptr        defl    Heap_Ptr
 137+ EA79             >
 137+ EA79             >mirror_Ptr      defl    $
 137+ EA79             >
 137+ EA79 50 78       >                dw      Dict_Ptr + 2        // xt
 137+ EA7B             >Heap_Ptr        defl    $ - $E000           // save current HP
 137+ EA7B             >
 137+ EA7B             >Current_HP      defl  $ - $E000             // used to set HP once!
 137+ EA7B             >
 137+ EA7B             >//              ______________________________________________________________________
 137+ EA7B             >//              Dictionary part
 137+ EA7B             >
 137+ EA7B             >                org     Dict_Ptr
 137+ 784E             >
 137+ 784E 79 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 137+ 7850             >
 137+ 7850             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 7850 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 137+ 7853             >
 137+ 7853             >
 137+ 7853             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 7853             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 7853             >
 137+ 7853             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 7853 39 78                        dw  BLK_SEEK
 139+ 7855 B6 6A                        dw  BBUF
 140+ 7857 05 78 8F 69                  dw  BLK_FH, FETCH
 141+ 785B 2C 67                        dw  F_READ
 142+ 785D A3 63 2E 00                  dw  LIT, $2E, QERROR
 142+ 7861 DE 6D
 143+ 7863 0A 69                        dw  DROP
 144+ 7865 4F 68                        dw  EXIT
 145+ 7867
 146+ 7867              //  ______________________________________________________________________
 147+ 7867              //
 148+ 7867              // blk-write     n --
 149+ 7867              // seek block n  within blocks!.bin  file
 150+ 7867                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 150+ 7867             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 150+ 7867             >
 150+ 7867             >Dict_Ptr        defl    $
 150+ 7867             >
 150+ 7867             >//              ______________________________________________________________________
 150+ 7867             >//              Heap part
 150+ 7867             >
 150+ 7867             >
 150+ 7867             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ EA7B             >
 150+ EA7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ EA7B             >Latest_Definition defl  Heap_Ptr
 150+ EA7B             >
 150+ EA7B             >                // dummy db directives used to calculate length of namec
 150+ EA7B 42 4C 4B 2D >                db      "BLK-WRITE"
 150+ EA7F 57 52 49 54 >
 150+ EA83 45          >
 150+ EA84             >len_NFA         defl    $ - temp_NFA
 150+ EA84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ EA7B             >
 150+ EA7B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ EA7C 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 150+ EA80 57 52 49 54 >
 150+ EA84 45          >
 150+ EA85             >                org     $-1                 // alter last byte of Name just above to set
 150+ EA84 C5          >                db      {b $} | END_BIT     // msb as name end
 150+ EA85             >
 150+ EA85 6E 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ EA87             >Prev_Ptr        defl    Heap_Ptr
 150+ EA87             >
 150+ EA87             >mirror_Ptr      defl    $
 150+ EA87             >
 150+ EA87 69 78       >                dw      Dict_Ptr + 2        // xt
 150+ EA89             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ EA89             >
 150+ EA89             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ EA89             >
 150+ EA89             >//              ______________________________________________________________________
 150+ EA89             >//              Dictionary part
 150+ EA89             >
 150+ EA89             >                org     Dict_Ptr
 150+ 7867             >
 150+ 7867 87 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 7869             >
 150+ 7869             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 7869 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 150+ 786C             >
 150+ 786C             >
 150+ 786C             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 786C             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 786C             >
 150+ 786C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 786C 39 78                        dw  BLK_SEEK
 152+ 786E B6 6A                        dw  BBUF
 153+ 7870 05 78 8F 69                  dw  BLK_FH, FETCH
 154+ 7874 49 67                        dw  F_WRITE
 155+ 7876 A3 63 2F 00                  dw  LIT, $2F, QERROR
 155+ 787A DE 6D
 156+ 787C 0A 69                        dw  DROP
 157+ 787E 4F 68                        dw  EXIT
 158+ 7880
 159+ 7880              //  ______________________________________________________________________
 160+ 7880              //
 161+ 7880              // blk-init     n --
 162+ 7880              // seek block n  within blocks!.bin  file
 163+ 7880                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 163+ 7880             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 163+ 7880             >
 163+ 7880             >Dict_Ptr        defl    $
 163+ 7880             >
 163+ 7880             >//              ______________________________________________________________________
 163+ 7880             >//              Heap part
 163+ 7880             >
 163+ 7880             >
 163+ 7880             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ EA89             >
 163+ EA89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ EA89             >Latest_Definition defl  Heap_Ptr
 163+ EA89             >
 163+ EA89             >                // dummy db directives used to calculate length of namec
 163+ EA89 42 4C 4B 2D >                db      "BLK-INIT"
 163+ EA8D 49 4E 49 54 >
 163+ EA91             >len_NFA         defl    $ - temp_NFA
 163+ EA91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ EA89             >
 163+ EA89 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ EA8A 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 163+ EA8E 49 4E 49 54 >
 163+ EA92             >                org     $-1                 // alter last byte of Name just above to set
 163+ EA91 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ EA92             >
 163+ EA92 7B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ EA94             >Prev_Ptr        defl    Heap_Ptr
 163+ EA94             >
 163+ EA94             >mirror_Ptr      defl    $
 163+ EA94             >
 163+ EA94 82 78       >                dw      Dict_Ptr + 2        // xt
 163+ EA96             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ EA96             >
 163+ EA96             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ EA96             >
 163+ EA96             >//              ______________________________________________________________________
 163+ EA96             >//              Dictionary part
 163+ EA96             >
 163+ EA96             >                org     Dict_Ptr
 163+ 7880             >
 163+ 7880 94 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 7882             >
 163+ 7882             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 7882 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 163+ 7885             >
 163+ 7885             >
 163+ 7885             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 7885             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 7885             >
 163+ 7885             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 7885 05 78 8F 69                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 164+ 7889 F8 66 0A 69
 165+ 788D 0C 78 BA 68                  dw  BLK_FNAME, ONE_PLUS
 166+ 7891 AA 6B 9A 6A                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 166+ 7895 5A 67
 167+ 7897 A3 63 2C 00                  dw  LIT, $2C, QERROR
 167+ 789B DE 6D
 168+ 789D 05 78 99 69                  dw  BLK_FH, STORE
 169+ 78A1 4F 68                        dw  EXIT
 170+ 78A3
 171+ 78A3              //  ______________________________________________________________________
 172+ 78A3              //
 173+ 78A3              // #sec
 174+ 78A3              // number of 512-Byte "sectors" available on thie sysstem.
 175+ 78A3              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 176+ 78A3
 177+ 78A3                              Constant_Def NSEC , "#SEC", 32767
 177+ 78A3             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 177+ 78A3             >
 177+ 78A3             >Dict_Ptr        defl    $
 177+ 78A3             >
 177+ 78A3             >//              ______________________________________________________________________
 177+ 78A3             >//              Heap part
 177+ 78A3             >
 177+ 78A3             >
 177+ 78A3             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ EA96             >
 177+ EA96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ EA96             >Latest_Definition defl  Heap_Ptr
 177+ EA96             >
 177+ EA96             >                // dummy db directives used to calculate length of namec
 177+ EA96 23 53 45 43 >                db      "#SEC"
 177+ EA9A             >len_NFA         defl    $ - temp_NFA
 177+ EA9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ EA96             >
 177+ EA96 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ EA97 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 177+ EA9B             >                org     $-1                 // alter last byte of Name just above to set
 177+ EA9A C3          >                db      {b $} | END_BIT     // msb as name end
 177+ EA9B             >
 177+ EA9B 89 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ EA9D             >Prev_Ptr        defl    Heap_Ptr
 177+ EA9D             >
 177+ EA9D             >mirror_Ptr      defl    $
 177+ EA9D             >
 177+ EA9D A5 78       >                dw      Dict_Ptr + 2        // xt
 177+ EA9F             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ EA9F             >
 177+ EA9F             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ EA9F             >
 177+ EA9F             >//              ______________________________________________________________________
 177+ EA9F             >//              Dictionary part
 177+ EA9F             >
 177+ EA9F             >                org     Dict_Ptr
 177+ 78A3             >
 177+ 78A3 9D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 78A5             >
 177+ 78A5             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 78A5 CD 59 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 177+ 78A8             >
 177+ 78A8             >
 177+ 78A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 78A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 78A8             >
 177+ 78A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 78A8 FF 7F       >                dw      32767
 178+ 78AA
 179+ 78AA              //  ______________________________________________________________________
 180+ 78AA
 181+ 78AA
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
 142  78AA                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
   1+ 78AA              //  ______________________________________________________________________
   2+ 78AA              //
   3+ 78AA              //  L3.asm
   4+ 78AA              //
   5+ 78AA              //  Continuation of L2.asm
   6+ 78AA              //  I/O Block definitions
   7+ 78AA              //  ______________________________________________________________________
   8+ 78AA
   9+ 78AA
  10+ 78AA              //  ______________________________________________________________________
  11+ 78AA              //
  12+ 78AA              // r/w          a n f --
  13+ 78AA              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 78AA                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 78AA             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 78AA             >
  14+ 78AA             >Dict_Ptr        defl    $
  14+ 78AA             >
  14+ 78AA             >//              ______________________________________________________________________
  14+ 78AA             >//              Heap part
  14+ 78AA             >
  14+ 78AA             >
  14+ 78AA             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EA9F             >
  14+ EA9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EA9F             >Latest_Definition defl  Heap_Ptr
  14+ EA9F             >
  14+ EA9F             >                // dummy db directives used to calculate length of namec
  14+ EA9F 52 2F 57    >                db      "R/W"
  14+ EAA2             >len_NFA         defl    $ - temp_NFA
  14+ EAA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EA9F             >
  14+ EA9F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EAA0 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EAA3             >                org     $-1                 // alter last byte of Name just above to set
  14+ EAA2 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EAA3             >
  14+ EAA3 96 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EAA5             >Prev_Ptr        defl    Heap_Ptr
  14+ EAA5             >
  14+ EAA5             >mirror_Ptr      defl    $
  14+ EAA5             >
  14+ EAA5 AC 78       >                dw      Dict_Ptr + 2        // xt
  14+ EAA7             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EAA7             >
  14+ EAA7             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EAA7             >
  14+ EAA7             >//              ______________________________________________________________________
  14+ EAA7             >//              Dictionary part
  14+ EAA7             >
  14+ EAA7             >                org     Dict_Ptr
  14+ 78AA             >
  14+ 78AA A5 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 78AC             >
  14+ 78AC             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 78AC CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 78AF             >
  14+ 78AF             >
  14+ 78AF             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 78AF             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 78AF             >
  14+ 78AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 78AF 59 68                        dw      TO_R                    // >r
  16+ 78B1 C1 68                        dw      ONE_SUBTRACT            // 1-
  17+ 78B3 25 69 86 68                  dw      DUP, ZLESS              // dup 0<
  18+ 78B7 01 69 A5 78                  dw      OVER, NSEC              // over #sec
  19+ 78BB C1 68 1B 6C                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 78BF 1E 68                        dw      OR_OP                   // or
  21+ 78C1 A3 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 78C5 DE 6D
  22+ 78C7 64 68                        dw      R_TO                    // r>
  23+ 78C9                                                              // if
  24+ 78C9 F5 63                        dw      ZBRANCH
  25+ 78CB 08 00                        dw      Read_Write_Else - $
  26+ 78CD 50 78                        dw          BLK_READ            //      blk-read
  27+ 78CF E8 63                        dw      BRANCH
  28+ 78D1 04 00                        dw      Read_Write_Endif - $
  29+ 78D3              Read_Write_Else:                                // else
  30+ 78D3 69 78                        dw          BLK_WRITE           //      blk-write
  31+ 78D5              Read_Write_Endif:                               // endif
  32+ 78D5 4F 68                        dw      EXIT                    // ;
  33+ 78D7
  34+ 78D7
  35+ 78D7              //  ______________________________________________________________________
  36+ 78D7              //
  37+ 78D7              // +buf        a1 -- a2 f
  38+ 78D7              // advences to next buffer, cyclically rotating along them
  39+ 78D7                              Colon_Def PBUF, "+BUF", is_normal
  39+ 78D7             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 78D7             >
  39+ 78D7             >Dict_Ptr        defl    $
  39+ 78D7             >
  39+ 78D7             >//              ______________________________________________________________________
  39+ 78D7             >//              Heap part
  39+ 78D7             >
  39+ 78D7             >
  39+ 78D7             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EAA7             >
  39+ EAA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EAA7             >Latest_Definition defl  Heap_Ptr
  39+ EAA7             >
  39+ EAA7             >                // dummy db directives used to calculate length of namec
  39+ EAA7 2B 42 55 46 >                db      "+BUF"
  39+ EAAB             >len_NFA         defl    $ - temp_NFA
  39+ EAAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EAA7             >
  39+ EAA7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EAA8 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EAAC             >                org     $-1                 // alter last byte of Name just above to set
  39+ EAAB C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EAAC             >
  39+ EAAC 9F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EAAE             >Prev_Ptr        defl    Heap_Ptr
  39+ EAAE             >
  39+ EAAE             >mirror_Ptr      defl    $
  39+ EAAE             >
  39+ EAAE D9 78       >                dw      Dict_Ptr + 2        // xt
  39+ EAB0             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EAB0             >
  39+ EAB0             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EAB0             >
  39+ EAB0             >//              ______________________________________________________________________
  39+ EAB0             >//              Dictionary part
  39+ EAB0             >
  39+ EAB0             >                org     Dict_Ptr
  39+ 78D7             >
  39+ 78D7 AE 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 78D9             >
  39+ 78D9             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 78D9 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 78DC             >
  39+ 78DC             >
  39+ 78DC             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 78DC             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 78DC             >
  39+ 78DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 78DC A3 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 78E0 A1 68
  41+ 78E2 25 69 14 6B                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 78E6 8F 69
  42+ 78E8 F5 6B                        dw      EQUALS                  // =
  43+ 78EA                                                              // if
  44+ 78EA F5 63                        dw      ZBRANCH
  45+ 78EC 08 00                        dw      PBuf_Endif - $
  46+ 78EE 0A 69                        dw          DROP                //      drop
  47+ 78F0 0E 6B 8F 69                  dw          FIRST, FETCH        //      first @
  48+ 78F4              PBuf_Endif:                                     // endif
  49+ 78F4 25 69 80 6B                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 78F8 8F 69
  50+ 78FA E9 6B                        dw      SUBTRACT                // -
  51+ 78FC 4F 68                        dw      EXIT                    // ;
  52+ 78FE
  53+ 78FE              //  ______________________________________________________________________
  54+ 78FE              //
  55+ 78FE              // update       --
  56+ 78FE              // mark the last used block to be written to disk
  57+ 78FE                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 78FE             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 78FE             >
  57+ 78FE             >Dict_Ptr        defl    $
  57+ 78FE             >
  57+ 78FE             >//              ______________________________________________________________________
  57+ 78FE             >//              Heap part
  57+ 78FE             >
  57+ 78FE             >
  57+ 78FE             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EAB0             >
  57+ EAB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EAB0             >Latest_Definition defl  Heap_Ptr
  57+ EAB0             >
  57+ EAB0             >                // dummy db directives used to calculate length of namec
  57+ EAB0 55 50 44 41 >                db      "UPDATE"
  57+ EAB4 54 45       >
  57+ EAB6             >len_NFA         defl    $ - temp_NFA
  57+ EAB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EAB0             >
  57+ EAB0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EAB1 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EAB5 54 45       >
  57+ EAB7             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAB6 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAB7             >
  57+ EAB7 A7 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EAB9             >Prev_Ptr        defl    Heap_Ptr
  57+ EAB9             >
  57+ EAB9             >mirror_Ptr      defl    $
  57+ EAB9             >
  57+ EAB9 00 79       >                dw      Dict_Ptr + 2        // xt
  57+ EABB             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EABB             >
  57+ EABB             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EABB             >
  57+ EABB             >//              ______________________________________________________________________
  57+ EABB             >//              Dictionary part
  57+ EABB             >
  57+ EABB             >                org     Dict_Ptr
  57+ 78FE             >
  57+ 78FE B9 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 7900             >
  57+ 7900             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7900 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7903             >
  57+ 7903             >
  57+ 7903             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7903             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7903             >
  57+ 7903             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7903 80 6B 8F 69                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7907 8F 69
  59+ 7909 A3 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 790D 1E 68
  60+ 790F 80 6B 8F 69                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7913 99 69
  61+ 7915 4F 68                        dw      EXIT                    // ;
  62+ 7917
  63+ 7917
  64+ 7917              //  ______________________________________________________________________
  65+ 7917              //
  66+ 7917              // empty-buffers --
  67+ 7917                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7917             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7917             >
  67+ 7917             >Dict_Ptr        defl    $
  67+ 7917             >
  67+ 7917             >//              ______________________________________________________________________
  67+ 7917             >//              Heap part
  67+ 7917             >
  67+ 7917             >
  67+ 7917             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EABB             >
  67+ EABB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EABB             >Latest_Definition defl  Heap_Ptr
  67+ EABB             >
  67+ EABB             >                // dummy db directives used to calculate length of namec
  67+ EABB 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EABF 59 2D 42 55 >
  67+ EAC3 46 46 45 52 >
  67+ EAC7 53          >
  67+ EAC8             >len_NFA         defl    $ - temp_NFA
  67+ EAC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EABB             >
  67+ EABB 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EABC 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAC0 59 2D 42 55 >
  67+ EAC4 46 46 45 52 >
  67+ EAC8 53          >
  67+ EAC9             >                org     $-1                 // alter last byte of Name just above to set
  67+ EAC8 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EAC9             >
  67+ EAC9 B0 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EACB             >Prev_Ptr        defl    Heap_Ptr
  67+ EACB             >
  67+ EACB             >mirror_Ptr      defl    $
  67+ EACB             >
  67+ EACB 19 79       >                dw      Dict_Ptr + 2        // xt
  67+ EACD             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EACD             >
  67+ EACD             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EACD             >
  67+ EACD             >//              ______________________________________________________________________
  67+ EACD             >//              Dictionary part
  67+ EACD             >
  67+ EACD             >                org     Dict_Ptr
  67+ 7917             >
  67+ 7917 CB 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 7919             >
  67+ 7919             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7919 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 791C             >
  67+ 791C             >
  67+ 791C             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 791C             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 791C             >
  67+ 791C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 791C 0E 6B 8F 69                  dw      FIRST, FETCH            // first @
  69+ 7920 14 6B 8F 69                  dw      LIMIT, FETCH            // limit @
  70+ 7924 01 69 E9 6B                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7928 86 70
  71+ 792A 4F 68                        dw      EXIT                    // ;
  72+ 792C
  73+ 792C              //  ______________________________________________________________________
  74+ 792C              //
  75+ 792C              // buffer       n -- a
  76+ 792C              // read block n and gives the address to a buffer
  77+ 792C              // any block previously inside the buffer, if modified, is rewritten to
  78+ 792C              // disk before reading the block n.
  79+ 792C
  80+ 792C                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 792C             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 792C             >
  80+ 792C             >Dict_Ptr        defl    $
  80+ 792C             >
  80+ 792C             >//              ______________________________________________________________________
  80+ 792C             >//              Heap part
  80+ 792C             >
  80+ 792C             >
  80+ 792C             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EACD             >
  80+ EACD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EACD             >Latest_Definition defl  Heap_Ptr
  80+ EACD             >
  80+ EACD             >                // dummy db directives used to calculate length of namec
  80+ EACD 42 55 46 46 >                db      "BUFFER"
  80+ EAD1 45 52       >
  80+ EAD3             >len_NFA         defl    $ - temp_NFA
  80+ EAD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EACD             >
  80+ EACD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EACE 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAD2 45 52       >
  80+ EAD4             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAD3 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EAD4             >
  80+ EAD4 BB 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EAD6             >Prev_Ptr        defl    Heap_Ptr
  80+ EAD6             >
  80+ EAD6             >mirror_Ptr      defl    $
  80+ EAD6             >
  80+ EAD6 2E 79       >                dw      Dict_Ptr + 2        // xt
  80+ EAD8             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EAD8             >
  80+ EAD8             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EAD8             >
  80+ EAD8             >//              ______________________________________________________________________
  80+ EAD8             >//              Dictionary part
  80+ EAD8             >
  80+ EAD8             >                org     Dict_Ptr
  80+ 792C             >
  80+ 792C D6 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 792E             >
  80+ 792E             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 792E CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7931             >
  80+ 7931             >
  80+ 7931             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7931             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7931             >
  80+ 7931             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7931 7A 6B 8F 69                  dw      USED, FETCH             // used @
  82+ 7935 25 69 59 68                  dw      DUP, TO_R               // dup >r
  83+ 7939                                                              // begin
  84+ 7939              Buffer_Begin:
  85+ 7939 D9 78                        dw          PBUF                //      +buf
  86+ 793B                                                              // until
  87+ 793B F5 63                        dw      ZBRANCH
  88+ 793D FC FF                        dw      Buffer_Begin - $
  89+ 793F 7A 6B 99 69                  dw      USED, STORE             // used !
  90+ 7943 6F 68 8F 69                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7947 86 68
  91+ 7949                                                              // if
  92+ 7949 F5 63                        dw      ZBRANCH
  93+ 794B 14 00                        dw      Buffer_Endif - $
  94+ 794D 6F 68 D0 68                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7951 6F 68 8F 69                  dw          R_OP, FETCH         //      r fetch
  96+ 7955 A3 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7959 0F 68                        dw          AND_OP              //      and
  98+ 795B 85 6A AC 78                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 795F              Buffer_Endif:                                   // endif
 100+ 795F 6F 68 99 69                  dw      R_OP, STORE             // r !
 101+ 7963 6F 68 80 6B                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7967 99 69
 102+ 7969 64 68 D0 68                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 796D 4F 68                        dw      EXIT                    // ;
 104+ 796F
 105+ 796F              //  ______________________________________________________________________
 106+ 796F              //
 107+ 796F              // block        n -- a
 108+ 796F              // Leaves the buffer address that contains the block n.
 109+ 796F              // If the block is not already present, it will be loaded from disk
 110+ 796F              // The block previously inside the buffer, if modified, is rewritten to
 111+ 796F              // disk before reading the block n.
 112+ 796F              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 796F
 114+ 796F                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 796F             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 796F             >
 114+ 796F             >Dict_Ptr        defl    $
 114+ 796F             >
 114+ 796F             >//              ______________________________________________________________________
 114+ 796F             >//              Heap part
 114+ 796F             >
 114+ 796F             >
 114+ 796F             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EAD8             >
 114+ EAD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EAD8             >Latest_Definition defl  Heap_Ptr
 114+ EAD8             >
 114+ EAD8             >                // dummy db directives used to calculate length of namec
 114+ EAD8 42 4C 4F 43 >                db      "BLOCK"
 114+ EADC 4B          >
 114+ EADD             >len_NFA         defl    $ - temp_NFA
 114+ EADD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EAD8             >
 114+ EAD8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EAD9 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EADD 4B          >
 114+ EADE             >                org     $-1                 // alter last byte of Name just above to set
 114+ EADD CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EADE             >
 114+ EADE CD 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAE0             >Prev_Ptr        defl    Heap_Ptr
 114+ EAE0             >
 114+ EAE0             >mirror_Ptr      defl    $
 114+ EAE0             >
 114+ EAE0 71 79       >                dw      Dict_Ptr + 2        // xt
 114+ EAE2             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAE2             >
 114+ EAE2             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAE2             >
 114+ EAE2             >//              ______________________________________________________________________
 114+ EAE2             >//              Dictionary part
 114+ EAE2             >
 114+ EAE2             >                org     Dict_Ptr
 114+ 796F             >
 114+ 796F E0 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 7971             >
 114+ 7971             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7971 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7974             >
 114+ 7974             >
 114+ 7974             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7974             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7974             >
 114+ 7974             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7974                          //  dw      OFFSET, FETCH           // offset @
 116+ 7974                          //  dw      PLUS
 117+ 7974 59 68                        dw      TO_R                    // + >r
 118+ 7976 80 6B 8F 69                  dw      PREV, FETCH             // prev @
 119+ 797A 25 69 8F 69                  dw      DUP, FETCH              // dup @
 120+ 797E 6F 68 E9 6B                  dw      R_OP, SUBTRACT          // r -
 121+ 7982 25 69 A1 68                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 7986                                                              // if
 123+ 7986 F5 63                        dw        ZBRANCH
 124+ 7988 32 00                        dw        Block_Endif_1 - $
 125+ 798A              Block_Begin:                                    //      begin
 126+ 798A D9 78 74 68                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 798E                                                              //          if
 128+ 798E F5 63                        dw          ZBRANCH
 129+ 7990 12 00                        dw          Block_Endif_2 - $
 130+ 7992 0A 69                        dw              DROP            //              drop
 131+ 7994 6F 68 2E 79                  dw              R_OP, BUFFER    //              r buffer
 132+ 7998 25 69                        dw              DUP             //              dup
 133+ 799A 6F 68 8C 6A                  dw              R_OP, ONE       //              r 1
 134+ 799E AC 78                        dw              READ_WRITE      //              r/w
 135+ 79A0 DC 68                        dw              TWO_MINUS       //              2-
 136+ 79A2              Block_Endif_2:                                  //          endif
 137+ 79A2 25 69 8F 69                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 79A6 6F 68
 138+ 79A8 E9 6B 25 69                  dw          SUBTRACT, DUP       //          - dup
 139+ 79AC A1 68 74 68                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 79B0                                                              //      until
 141+ 79B0 F5 63                        dw        ZBRANCH
 142+ 79B2 D8 FF                        dw        Block_Begin - $
 143+ 79B4 25 69 80 6B                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 79B8 99 69
 144+ 79BA              Block_Endif_1:                                  // endif
 145+ 79BA 64 68 0A 69                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 79BE D0 68
 146+ 79C0 4F 68                        dw      EXIT                    // ;
 147+ 79C2
 148+ 79C2              //  ______________________________________________________________________
 149+ 79C2              //
 150+ 79C2              // #buff        -- n
 151+ 79C2              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 79C2                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 79C2             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 79C2             >
 152+ 79C2             >Dict_Ptr        defl    $
 152+ 79C2             >
 152+ 79C2             >//              ______________________________________________________________________
 152+ 79C2             >//              Heap part
 152+ 79C2             >
 152+ 79C2             >
 152+ 79C2             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAE2             >
 152+ EAE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAE2             >Latest_Definition defl  Heap_Ptr
 152+ EAE2             >
 152+ EAE2             >                // dummy db directives used to calculate length of namec
 152+ EAE2 23 42 55 46 >                db      "#BUFF"
 152+ EAE6 46          >
 152+ EAE7             >len_NFA         defl    $ - temp_NFA
 152+ EAE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAE2             >
 152+ EAE2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAE3 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EAE7 46          >
 152+ EAE8             >                org     $-1                 // alter last byte of Name just above to set
 152+ EAE7 C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EAE8             >
 152+ EAE8 D8 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EAEA             >Prev_Ptr        defl    Heap_Ptr
 152+ EAEA             >
 152+ EAEA             >mirror_Ptr      defl    $
 152+ EAEA             >
 152+ EAEA C4 79       >                dw      Dict_Ptr + 2        // xt
 152+ EAEC             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAEC             >
 152+ EAEC             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAEC             >
 152+ EAEC             >//              ______________________________________________________________________
 152+ EAEC             >//              Dictionary part
 152+ EAEC             >
 152+ EAEC             >                org     Dict_Ptr
 152+ 79C2             >
 152+ 79C2 EA 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 79C4             >
 152+ 79C4             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 79C4 CD 59 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 79C7             >
 152+ 79C7             >
 152+ 79C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 79C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 79C7             >
 152+ 79C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 79C7 07 00       >                dw      7
 153+ 79C9
 154+ 79C9              //  ______________________________________________________________________
 155+ 79C9              //
 156+ 79C9              // flush        --
 157+ 79C9                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 79C9             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 79C9             >
 157+ 79C9             >Dict_Ptr        defl    $
 157+ 79C9             >
 157+ 79C9             >//              ______________________________________________________________________
 157+ 79C9             >//              Heap part
 157+ 79C9             >
 157+ 79C9             >
 157+ 79C9             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAEC             >
 157+ EAEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAEC             >Latest_Definition defl  Heap_Ptr
 157+ EAEC             >
 157+ EAEC             >                // dummy db directives used to calculate length of namec
 157+ EAEC 46 4C 55 53 >                db      "FLUSH"
 157+ EAF0 48          >
 157+ EAF1             >len_NFA         defl    $ - temp_NFA
 157+ EAF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAEC             >
 157+ EAEC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAED 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EAF1 48          >
 157+ EAF2             >                org     $-1                 // alter last byte of Name just above to set
 157+ EAF1 C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EAF2             >
 157+ EAF2 E2 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EAF4             >Prev_Ptr        defl    Heap_Ptr
 157+ EAF4             >
 157+ EAF4             >mirror_Ptr      defl    $
 157+ EAF4             >
 157+ EAF4 CB 79       >                dw      Dict_Ptr + 2        // xt
 157+ EAF6             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EAF6             >
 157+ EAF6             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EAF6             >
 157+ EAF6             >//              ______________________________________________________________________
 157+ EAF6             >//              Dictionary part
 157+ EAF6             >
 157+ EAF6             >                org     Dict_Ptr
 157+ 79C9             >
 157+ 79C9 F4 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 79CB             >
 157+ 79CB             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 79CB CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 79CE             >
 157+ 79CE             >
 157+ 79CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 79CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 79CE             >
 157+ 79CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 79CE C4 79 BA 68                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 79D2 85 6A
 159+ 79D4              Flush_Do:                                       // do
 160+ 79D4 32 64                        dw      C_DO
 161+ 79D6 85 6A 2E 79                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 79DA 0A 69
 162+ 79DC                                                              // loop
 163+ 79DC E0 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 79E0 05 78 8F 69                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 79E4 05 67 0A 69                  dw      F_SYNC, DROP            // f_sync drop
 166+ 79E8 4F 68                        dw      EXIT                    // exit
 167+ 79EA
 168+ 79EA              //  ______________________________________________________________________
 169+ 79EA              //
 170+ 79EA              // f_getline    a m fh -- n
 171+ 79EA              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 79EA              // Address a is left for subsequent processing
 173+ 79EA              // and n as the actual number of byte read, that is the length of line
 174+ 79EA                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 79EA             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 79EA             >
 174+ 79EA             >Dict_Ptr        defl    $
 174+ 79EA             >
 174+ 79EA             >//              ______________________________________________________________________
 174+ 79EA             >//              Heap part
 174+ 79EA             >
 174+ 79EA             >
 174+ 79EA             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EAF6             >
 174+ EAF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EAF6             >Latest_Definition defl  Heap_Ptr
 174+ EAF6             >
 174+ EAF6             >                // dummy db directives used to calculate length of namec
 174+ EAF6 46 5F 47 45 >                db      "F_GETLINE"
 174+ EAFA 54 4C 49 4E >
 174+ EAFE 45          >
 174+ EAFF             >len_NFA         defl    $ - temp_NFA
 174+ EAFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EAF6             >
 174+ EAF6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EAF7 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EAFB 54 4C 49 4E >
 174+ EAFF 45          >
 174+ EB00             >                org     $-1                 // alter last byte of Name just above to set
 174+ EAFF C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EB00             >
 174+ EB00 EC 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EB02             >Prev_Ptr        defl    Heap_Ptr
 174+ EB02             >
 174+ EB02             >mirror_Ptr      defl    $
 174+ EB02             >
 174+ EB02 EC 79       >                dw      Dict_Ptr + 2        // xt
 174+ EB04             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EB04             >
 174+ EB04             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EB04             >
 174+ EB04             >//              ______________________________________________________________________
 174+ EB04             >//              Dictionary part
 174+ EB04             >
 174+ EB04             >                org     Dict_Ptr
 174+ 79EA             >
 174+ 79EA 02 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 79EC             >
 174+ 79EC             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 79EC CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 79EF             >
 174+ 79EF             >
 174+ 79EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 79EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 79EF             >
 174+ 79EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 79EF 59 68                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 79F1 15 69                        dw      TUCK                    // tuck             ( m a m )
 177+ 79F3 6F 68 12 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 79F7 A3 63 23 00                  dw      LIT, 35, QERROR         // 44 ?error        ( m a m d )
 178+ 79FB DE 6D
 179+ 79FD
 180+ 79FD 60 69 01 69                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 7A01 BA 68 1E 69                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 7A05
 183+ 7A05 6F 68 2C 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 7A09 A3 63 23 00                  dw      LIT, 35, QERROR         // 46 ?error        ( m d a n )
 184+ 7A0D DE 6D
 185+ 7A0F                                                              // if ( at least 1 chr was read )  \  fh
 186+ 7A0F F5 63                        dw      ZBRANCH
 187+ 7A11 3C 00                        dw      FGetline_Else - $
 188+ 7A13 A3 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 7A17 26 65
 189+ 7A19 0A 69 0F 69                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 7A1D 1E 69                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 7A1F A3 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 7A23 26 65
 192+ 7A25 0A 69 0F 69                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 7A29 2C 69 26 6C                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 7A2D 25 69 98 6B                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 7A31 99 69
 195+ 7A33 25 69 59 68                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 7A37 60 69 64 68                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 7A3B 85 6A AB 68                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 7A3F 64 68 DA 66                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 7A43 A3 63 24 00                  dw          LIT, 36, QERROR     //      45 ?error        ( m a n )
 199+ 7A47 DE 6D
 200+ 7A49                                                              // else
 201+ 7A49 E8 63                        dw      BRANCH
 202+ 7A4B 0C 00                        dw      FGetline_Endif - $
 203+ 7A4D              FGetline_Else:
 204+ 7A4D 64 68                        dw          R_TO                //      r>              ( m d a fh )
 205+ 7A4F 60 69 5A 69                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 7A53 0A 69 85 6A                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 7A57              FGetline_Endif:                                 // endif
 208+ 7A57 59 68 25 69                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 7A5B 25 69
 209+ 7A5D BA 68 1E 69                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 7A61 6F 68 90 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 7A65 6D 69 A1 68                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 7A69 85 6A 1E 69                  dw      ZERO, SWAP              // 0 swap
 213+ 7A6D D4 68 99 69                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 7A71 6F 68 A1 68                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 7A75 C1 68
 215+ 7A77 1E 69 6F 68                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 7A7B E9 6B
 216+ 7A7D 91 70                        dw      BLANK                   // blank
 217+ 7A7F 64 68                        dw      R_TO                    // r>                   ( n )
 218+ 7A81 4F 68                        dw      EXIT                    // ;
 219+ 7A83
 220+ 7A83              //  ______________________________________________________________________
 221+ 7A83              //
 222+ 7A83              // f_include    fh --
 223+ 7A83              // Given a filehandle includes the source from file
 224+ 7A83                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 7A83             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 7A83             >
 224+ 7A83             >Dict_Ptr        defl    $
 224+ 7A83             >
 224+ 7A83             >//              ______________________________________________________________________
 224+ 7A83             >//              Heap part
 224+ 7A83             >
 224+ 7A83             >
 224+ 7A83             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EB04             >
 224+ EB04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EB04             >Latest_Definition defl  Heap_Ptr
 224+ EB04             >
 224+ EB04             >                // dummy db directives used to calculate length of namec
 224+ EB04 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EB08 43 4C 55 44 >
 224+ EB0C 45          >
 224+ EB0D             >len_NFA         defl    $ - temp_NFA
 224+ EB0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EB04             >
 224+ EB04 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EB05 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EB09 43 4C 55 44 >
 224+ EB0D 45          >
 224+ EB0E             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB0D C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB0E             >
 224+ EB0E F6 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB10             >Prev_Ptr        defl    Heap_Ptr
 224+ EB10             >
 224+ EB10             >mirror_Ptr      defl    $
 224+ EB10             >
 224+ EB10 85 7A       >                dw      Dict_Ptr + 2        // xt
 224+ EB12             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB12             >
 224+ EB12             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB12             >
 224+ EB12             >//              ______________________________________________________________________
 224+ EB12             >//              Dictionary part
 224+ EB12             >
 224+ EB12             >                org     Dict_Ptr
 224+ 7A83             >
 224+ 7A83 10 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 7A85             >
 224+ 7A85             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 7A85 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 7A88             >
 224+ 7A88             >
 224+ 7A88             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 7A88             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 7A88             >
 224+ 7A88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 7A88 26 6B 8F 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 7A8C 59 68
 226+ 7A8E 2C 6B 8F 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 7A92 59 68
 227+ 7A94 92 6B 8F 69                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 7A98 59 68
 228+ 7A9A 6F 68                        dw      R_OP                    // r
 229+ 7A9C 8F 68                        dw      ZGREATER                // 0>  (filehandle)
 230+ 7A9E                                                              // if
 231+ 7A9E F5 63                        dw      ZBRANCH
 232+ 7AA0 20 00                        dw      FInclude_Else_1 - $
 233+ 7AA2 6F 68 12 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 234+ 7AA6 A3 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 234+ 7AAA DE 6D
 235+ 7AAC 2C 6B 8F 69                  dw          TO_IN, FETCH        //      >in @ 2-
 236+ 7AB0 DC 68                        dw          TWO_MINUS
 237+ 7AB2 98 6B 8F 69                  dw          SPAN, FETCH         //      span @ -
 238+ 7AB6 E9 6B                        dw          SUBTRACT
 239+ 7AB8 DE 6B AB 68                  dw          S_TO_D, DPLUS       //      s>d d+
 240+ 7ABC                                                              // else
 241+ 7ABC E8 63                        dw      BRANCH
 242+ 7ABE 06 00                        dw      FInclude_Endif_1 - $
 243+ 7AC0              FInclude_Else_1:
 244+ 7AC0 85 6A 85 6A                  dw          ZERO, ZERO          //      0 0
 245+ 7AC4                                                              // endif
 246+ 7AC4              FInclude_Endif_1:
 247+ 7AC4 59 68 59 68                  dw      TO_R, TO_R              // >r >r
 248+ 7AC8 92 6B 99 69                  dw      SOURCE_ID, STORE        // source-id !
 249+ 7ACC              FInclude_Begin:                                 // begin
 250+ 7ACC 8C 6A 71 79                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 250+ 7AD0 B6 6A
 251+ 7AD2 6D 69 91 70                  dw          TWO_DUP, BLANK      //      2dup blank
 252+ 7AD6 1E 69 BA 68                  dw          SWAP, ONE_PLUS      //      swap 1+
 253+ 7ADA 1E 69 D4 68                  dw          SWAP, CELL_MINUS    //      swap cell-
 254+ 7ADE 92 6B 8F 69                  dw          SOURCE_ID, FETCH    //      source-id @
 255+ 7AE2 EC 79                        dw          F_GETLINE           //      f_getline
 256+ 7AE4                                                              // while
 257+ 7AE4 F5 63                        dw      ZBRANCH
 258+ 7AE6 14 00                        dw      FInclude_Repeat - $
 259+ 7AE8 8C 6A 26 6B                  dw          ONE, BLK, STORE     //      1 blk !
 259+ 7AEC 99 69
 260+ 7AEE 85 6A 2C 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
 260+ 7AF2 99 69
 261+ 7AF4 C5 74                        dw          INTERPRET           //      interpret
 262+ 7AF6 E8 63                        dw      BRANCH
 263+ 7AF8 D4 FF                        dw      FInclude_Begin - $
 264+ 7AFA              FInclude_Repeat:                                // repeat
 265+ 7AFA                              //  close current file
 266+ 7AFA 92 6B 8F 69                  dw      SOURCE_ID, FETCH        // source-id @
 267+ 7AFE F8 66                        dw      F_CLOSE                 // f_close
 268+ 7B00 A3 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 268+ 7B04 DE 6D
 269+ 7B06
 270+ 7B06 64 68 64 68                  dw      R_TO, R_TO, R_TO        // r> r> r>
 270+ 7B0A 64 68
 271+ 7B0C 25 69 92 6B                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 271+ 7B10 99 69
 272+ 7B12 8F 68                        dw      ZGREATER                // 0>
 273+ 7B14                                                              // if
 274+ 7B14 F5 63                        dw      ZBRANCH
 275+ 7B16 12 00                        dw      FInclude_Else_2 - $
 276+ 7B18 92 6B 8F 69                  dw          SOURCE_ID, FETCH    //      source-id @
 277+ 7B1C DA 66                        dw          F_SEEK              //      f_seek
 278+ 7B1E A3 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 278+ 7B22 DE 6D
 279+ 7B24                                                              // else
 280+ 7B24 E8 63                        dw      BRANCH
 281+ 7B26 04 00                        dw      FInclude_Endif_2 - $
 282+ 7B28              FInclude_Else_2:
 283+ 7B28 5A 69                        dw          TWO_DROP            //      2drop
 284+ 7B2A              FInclude_Endif_2:                               // endif
 285+ 7B2A 64 68 2C 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 285+ 7B2E 99 69
 286+ 7B30 64 68 26 6B                  dw      R_TO, BLK, STORE        // r> blk !
 286+ 7B34 99 69
 287+ 7B36 4F 68                        dw      EXIT                    // ;
 288+ 7B38
 289+ 7B38              //  ______________________________________________________________________
 290+ 7B38              //
 291+ 7B38              // open<         -- fh
 292+ 7B38              // Open the following filename and return it file-handle
 293+ 7B38              // Used in the form OPEN CCCC
 294+ 7B38                              Colon_Def OPEN_FH, "OPEN<", is_normal
 294+ 7B38             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 294+ 7B38             >
 294+ 7B38             >Dict_Ptr        defl    $
 294+ 7B38             >
 294+ 7B38             >//              ______________________________________________________________________
 294+ 7B38             >//              Heap part
 294+ 7B38             >
 294+ 7B38             >
 294+ 7B38             >                org     (Heap_Ptr & $1FFF) + $E000
 294+ EB12             >
 294+ EB12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ EB12             >Latest_Definition defl  Heap_Ptr
 294+ EB12             >
 294+ EB12             >                // dummy db directives used to calculate length of namec
 294+ EB12 4F 50 45 4E >                db      "OPEN<"
 294+ EB16 3C          >
 294+ EB17             >len_NFA         defl    $ - temp_NFA
 294+ EB17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ EB12             >
 294+ EB12 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ EB13 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 294+ EB17 3C          >
 294+ EB18             >                org     $-1                 // alter last byte of Name just above to set
 294+ EB17 BC          >                db      {b $} | END_BIT     // msb as name end
 294+ EB18             >
 294+ EB18 04 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 294+ EB1A             >Prev_Ptr        defl    Heap_Ptr
 294+ EB1A             >
 294+ EB1A             >mirror_Ptr      defl    $
 294+ EB1A             >
 294+ EB1A 3A 7B       >                dw      Dict_Ptr + 2        // xt
 294+ EB1C             >Heap_Ptr        defl    $ - $E000           // save current HP
 294+ EB1C             >
 294+ EB1C             >Current_HP      defl  $ - $E000             // used to set HP once!
 294+ EB1C             >
 294+ EB1C             >//              ______________________________________________________________________
 294+ EB1C             >//              Dictionary part
 294+ EB1C             >
 294+ EB1C             >                org     Dict_Ptr
 294+ 7B38             >
 294+ 7B38 1A 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 294+ 7B3A             >
 294+ 7B3A             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 7B3A CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 7B3D             >
 294+ 7B3D             >
 294+ 7B3D             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 7B3D             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 7B3D             >
 294+ 7B3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 7B3D A8 6A                        dw      BL
 296+ 7B3F BE 70 18 6F                  dw      WORD, COUNT, OVER       // bl word count over
 296+ 7B43 01 69
 297+ 7B45 A1 68 85 6A                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 297+ 7B49 1E 69 99 69
 298+ 7B4D AF 70 8C 6A                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 298+ 7B51 5A 67
 299+ 7B53 A3 63 2B 00                  dw      LIT, 43                 // 43
 300+ 7B57 DE 6D                        dw      QERROR                  // ?error
 301+ 7B59 4F 68                        dw      EXIT                    // ;
 302+ 7B5B
 303+ 7B5B              //  ______________________________________________________________________
 304+ 7B5B              //
 305+ 7B5B              // use          -- cccc
 306+ 7B5B              // Include the following filename
 307+ 7B5B              //              Colon_Def USE, "USE", is_normal
 308+ 7B5B              //              dw      OPEN_FH                 // open<
 309+ 7B5B              //              dw      BLK_FH, FETCH           // blk-fh @
 310+ 7B5B              //              dw      F_CLOSE, DROP           // f_close drop
 311+ 7B5B              //              dw      BLK_FH, STORE           // blk-fh !
 312+ 7B5B              //              dw      EXIT                    // ;
 313+ 7B5B
 314+ 7B5B              //  ______________________________________________________________________
 315+ 7B5B              //
 316+ 7B5B              // include      -- cccc
 317+ 7B5B              // Include the following filename
 318+ 7B5B                              Colon_Def INCLUDE, "INCLUDE", is_normal
 318+ 7B5B             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 318+ 7B5B             >
 318+ 7B5B             >Dict_Ptr        defl    $
 318+ 7B5B             >
 318+ 7B5B             >//              ______________________________________________________________________
 318+ 7B5B             >//              Heap part
 318+ 7B5B             >
 318+ 7B5B             >
 318+ 7B5B             >                org     (Heap_Ptr & $1FFF) + $E000
 318+ EB1C             >
 318+ EB1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ EB1C             >Latest_Definition defl  Heap_Ptr
 318+ EB1C             >
 318+ EB1C             >                // dummy db directives used to calculate length of namec
 318+ EB1C 49 4E 43 4C >                db      "INCLUDE"
 318+ EB20 55 44 45    >
 318+ EB23             >len_NFA         defl    $ - temp_NFA
 318+ EB23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ EB1C             >
 318+ EB1C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ EB1D 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 318+ EB21 55 44 45    >
 318+ EB24             >                org     $-1                 // alter last byte of Name just above to set
 318+ EB23 C5          >                db      {b $} | END_BIT     // msb as name end
 318+ EB24             >
 318+ EB24 12 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 318+ EB26             >Prev_Ptr        defl    Heap_Ptr
 318+ EB26             >
 318+ EB26             >mirror_Ptr      defl    $
 318+ EB26             >
 318+ EB26 5D 7B       >                dw      Dict_Ptr + 2        // xt
 318+ EB28             >Heap_Ptr        defl    $ - $E000           // save current HP
 318+ EB28             >
 318+ EB28             >Current_HP      defl  $ - $E000             // used to set HP once!
 318+ EB28             >
 318+ EB28             >//              ______________________________________________________________________
 318+ EB28             >//              Dictionary part
 318+ EB28             >
 318+ EB28             >                org     Dict_Ptr
 318+ 7B5B             >
 318+ 7B5B 26 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 318+ 7B5D             >
 318+ 7B5D             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 7B5D CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 318+ 7B60             >
 318+ 7B60             >
 318+ 7B60             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 7B60             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 7B60             >
 318+ 7B60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 7B60 3A 7B                        dw      OPEN_FH                 // open
 320+ 7B62 85 7A                        dw      F_INCLUDE               //  f_include
 321+ 7B64 4F 68                        dw      EXIT                    // ;
 322+ 7B66
 323+ 7B66              //  ______________________________________________________________________
 324+ 7B66              //
 325+ 7B66              // needs
 326+ 7B66              // check for cccc exists in vocabulary
 327+ 7B66              // if it doesn't then  INCLUDE  inc/cccc.F
 328+ 7B66
 329+ 7B66              // temp filename cccc.f as counted string zero-padded
 330+ 7B66                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 330+ 7B66             >
 330+ 7B66             >Dict_Ptr        defl    $
 330+ 7B66             >
 330+ 7B66             >//              ______________________________________________________________________
 330+ 7B66             >//              Heap part
 330+ 7B66             >
 330+ 7B66             >
 330+ 7B66             >                org     (Heap_Ptr & $1FFF) + $E000
 330+ EB28             >
 330+ EB28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ EB28             >Latest_Definition defl  Heap_Ptr
 330+ EB28             >
 330+ EB28             >                // dummy db directives used to calculate length of namec
 330+ EB28 4E 45 45 44 >                db      "NEEDS-W"
 330+ EB2C 53 2D 57    >
 330+ EB2F             >len_NFA         defl    $ - temp_NFA
 330+ EB2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ EB28             >
 330+ EB28 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ EB29 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 330+ EB2D 53 2D 57    >
 330+ EB30             >                org     $-1                 // alter last byte of Name just above to set
 330+ EB2F D7          >                db      {b $} | END_BIT     // msb as name end
 330+ EB30             >
 330+ EB30 1C 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 330+ EB32             >Prev_Ptr        defl    Heap_Ptr
 330+ EB32             >
 330+ EB32             >mirror_Ptr      defl    $
 330+ EB32             >
 330+ EB32 68 7B       >                dw      Dict_Ptr + 2        // xt
 330+ EB34             >Heap_Ptr        defl    $ - $E000           // save current HP
 330+ EB34             >
 330+ EB34             >Current_HP      defl  $ - $E000             // used to set HP once!
 330+ EB34             >
 330+ EB34             >//              ______________________________________________________________________
 330+ EB34             >//              Dictionary part
 330+ EB34             >
 330+ EB34             >                org     Dict_Ptr
 330+ 7B66             >
 330+ 7B66 32 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 330+ 7B68             >
 330+ 7B68             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 7B68 CD 09 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 330+ 7B6B             >
 330+ 7B6B             >
 330+ 7B6B             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 7B6B             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 7B6B             >
 330+ 7B6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 7B6B 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 332+ 7B8E              // temp complete path+filename
 333+ 7B8E                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 333+ 7B8E             >
 333+ 7B8E             >Dict_Ptr        defl    $
 333+ 7B8E             >
 333+ 7B8E             >//              ______________________________________________________________________
 333+ 7B8E             >//              Heap part
 333+ 7B8E             >
 333+ 7B8E             >
 333+ 7B8E             >                org     (Heap_Ptr & $1FFF) + $E000
 333+ EB34             >
 333+ EB34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 333+ EB34             >Latest_Definition defl  Heap_Ptr
 333+ EB34             >
 333+ EB34             >                // dummy db directives used to calculate length of namec
 333+ EB34 4E 45 45 44 >                db      "NEEDS-FN"
 333+ EB38 53 2D 46 4E >
 333+ EB3C             >len_NFA         defl    $ - temp_NFA
 333+ EB3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 333+ EB34             >
 333+ EB34 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 333+ EB35 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 333+ EB39 53 2D 46 4E >
 333+ EB3D             >                org     $-1                 // alter last byte of Name just above to set
 333+ EB3C CE          >                db      {b $} | END_BIT     // msb as name end
 333+ EB3D             >
 333+ EB3D 28 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 333+ EB3F             >Prev_Ptr        defl    Heap_Ptr
 333+ EB3F             >
 333+ EB3F             >mirror_Ptr      defl    $
 333+ EB3F             >
 333+ EB3F 90 7B       >                dw      Dict_Ptr + 2        // xt
 333+ EB41             >Heap_Ptr        defl    $ - $E000           // save current HP
 333+ EB41             >
 333+ EB41             >Current_HP      defl  $ - $E000             // used to set HP once!
 333+ EB41             >
 333+ EB41             >//              ______________________________________________________________________
 333+ EB41             >//              Dictionary part
 333+ EB41             >
 333+ EB41             >                org     Dict_Ptr
 333+ 7B8E             >
 333+ 7B8E 3F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 333+ 7B90             >
 333+ 7B90             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 333+ 7B90 CD 09 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 333+ 7B93             >
 333+ 7B93             >
 333+ 7B93             >                endif           ; ok        // for other definitions it "points" the correct handler
 333+ 7B93             >                // Use of "; ok" to suppress "warning[fwdref]"
 333+ 7B93             >
 333+ 7B93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 334+ 7B93
 335+ 7B93 00 00 00...                  ds      40
 336+ 7BBB              // constant path
 337+ 7BBB                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 337+ 7BBB             >
 337+ 7BBB             >Dict_Ptr        defl    $
 337+ 7BBB             >
 337+ 7BBB             >//              ______________________________________________________________________
 337+ 7BBB             >//              Heap part
 337+ 7BBB             >
 337+ 7BBB             >
 337+ 7BBB             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ EB41             >
 337+ EB41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ EB41             >Latest_Definition defl  Heap_Ptr
 337+ EB41             >
 337+ EB41             >                // dummy db directives used to calculate length of namec
 337+ EB41 4E 45 45 44 >                db      "NEEDS-INC"
 337+ EB45 53 2D 49 4E >
 337+ EB49 43          >
 337+ EB4A             >len_NFA         defl    $ - temp_NFA
 337+ EB4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ EB41             >
 337+ EB41 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ EB42 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 337+ EB46 53 2D 49 4E >
 337+ EB4A 43          >
 337+ EB4B             >                org     $-1                 // alter last byte of Name just above to set
 337+ EB4A C3          >                db      {b $} | END_BIT     // msb as name end
 337+ EB4B             >
 337+ EB4B 34 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ EB4D             >Prev_Ptr        defl    Heap_Ptr
 337+ EB4D             >
 337+ EB4D             >mirror_Ptr      defl    $
 337+ EB4D             >
 337+ EB4D BD 7B       >                dw      Dict_Ptr + 2        // xt
 337+ EB4F             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ EB4F             >
 337+ EB4F             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ EB4F             >
 337+ EB4F             >//              ______________________________________________________________________
 337+ EB4F             >//              Dictionary part
 337+ EB4F             >
 337+ EB4F             >                org     Dict_Ptr
 337+ 7BBB             >
 337+ 7BBB 4D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 7BBD             >
 337+ 7BBD             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 7BBD CD 09 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 337+ 7BC0             >
 337+ 7BC0             >
 337+ 7BC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 7BC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 7BC0             >
 337+ 7BC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 7BC0 04 69 6E 63                  db      4, "inc/", 0
 338+ 7BC4 2F 00
 339+ 7BC6                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 339+ 7BC6             >
 339+ 7BC6             >Dict_Ptr        defl    $
 339+ 7BC6             >
 339+ 7BC6             >//              ______________________________________________________________________
 339+ 7BC6             >//              Heap part
 339+ 7BC6             >
 339+ 7BC6             >
 339+ 7BC6             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ EB4F             >
 339+ EB4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ EB4F             >Latest_Definition defl  Heap_Ptr
 339+ EB4F             >
 339+ EB4F             >                // dummy db directives used to calculate length of namec
 339+ EB4F 4E 45 45 44 >                db      "NEEDS-LIB"
 339+ EB53 53 2D 4C 49 >
 339+ EB57 42          >
 339+ EB58             >len_NFA         defl    $ - temp_NFA
 339+ EB58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ EB4F             >
 339+ EB4F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ EB50 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 339+ EB54 53 2D 4C 49 >
 339+ EB58 42          >
 339+ EB59             >                org     $-1                 // alter last byte of Name just above to set
 339+ EB58 C2          >                db      {b $} | END_BIT     // msb as name end
 339+ EB59             >
 339+ EB59 41 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ EB5B             >Prev_Ptr        defl    Heap_Ptr
 339+ EB5B             >
 339+ EB5B             >mirror_Ptr      defl    $
 339+ EB5B             >
 339+ EB5B C8 7B       >                dw      Dict_Ptr + 2        // xt
 339+ EB5D             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ EB5D             >
 339+ EB5D             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ EB5D             >
 339+ EB5D             >//              ______________________________________________________________________
 339+ EB5D             >//              Dictionary part
 339+ EB5D             >
 339+ EB5D             >                org     Dict_Ptr
 339+ 7BC6             >
 339+ 7BC6 5B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 7BC8             >
 339+ 7BC8             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 7BC8 CD 09 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 339+ 7BCB             >
 339+ 7BCB             >
 339+ 7BCB             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 7BCB             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 7BCB             >
 339+ 7BCB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 7BCB 04 6C 69 62                  db      4, "lib/", 0
 340+ 7BCF 2F 00
 341+ 7BD1
 342+ 7BD1              // Concatenate path at a and filename and include it
 343+ 7BD1              // No error is issued if filename doesn't exist.
 344+ 7BD1                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 344+ 7BD1             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 344+ 7BD1             >
 344+ 7BD1             >Dict_Ptr        defl    $
 344+ 7BD1             >
 344+ 7BD1             >//              ______________________________________________________________________
 344+ 7BD1             >//              Heap part
 344+ 7BD1             >
 344+ 7BD1             >
 344+ 7BD1             >                org     (Heap_Ptr & $1FFF) + $E000
 344+ EB5D             >
 344+ EB5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ EB5D             >Latest_Definition defl  Heap_Ptr
 344+ EB5D             >
 344+ EB5D             >                // dummy db directives used to calculate length of namec
 344+ EB5D 4E 45 45 44 >                db      "NEEDS/"
 344+ EB61 53 2F       >
 344+ EB63             >len_NFA         defl    $ - temp_NFA
 344+ EB63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ EB5D             >
 344+ EB5D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ EB5E 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 344+ EB62 53 2F       >
 344+ EB64             >                org     $-1                 // alter last byte of Name just above to set
 344+ EB63 AF          >                db      {b $} | END_BIT     // msb as name end
 344+ EB64             >
 344+ EB64 4F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 344+ EB66             >Prev_Ptr        defl    Heap_Ptr
 344+ EB66             >
 344+ EB66             >mirror_Ptr      defl    $
 344+ EB66             >
 344+ EB66 D3 7B       >                dw      Dict_Ptr + 2        // xt
 344+ EB68             >Heap_Ptr        defl    $ - $E000           // save current HP
 344+ EB68             >
 344+ EB68             >Current_HP      defl  $ - $E000             // used to set HP once!
 344+ EB68             >
 344+ EB68             >//              ______________________________________________________________________
 344+ EB68             >//              Dictionary part
 344+ EB68             >
 344+ EB68             >                org     Dict_Ptr
 344+ 7BD1             >
 344+ 7BD1 66 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 344+ 7BD3             >
 344+ 7BD3             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 7BD3 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 7BD6             >
 344+ 7BD6             >
 344+ 7BD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 7BD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 7BD6             >
 344+ 7BD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 7BD6 18 6F 15 69                  dw      COUNT, TUCK             // n a n
 346+ 7BDA 90 7B 1E 69                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 346+ 7BDE 90 67
 347+ 7BE0 90 7B A1 68                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 348+ 7BE4 68 7B BA 68                  dw      NEEDS_W, ONE_PLUS, SWAP
 348+ 7BE8 1E 69
 349+ 7BEA A3 63 23 00                  dw      LIT, 35
 350+ 7BEE 90 67                        dw      CMOVE
 351+ 7BF0 90 7B                        dw      NEEDS_FN
 352+ 7BF2 AF 70 8C 6A                  dw      PAD, ONE, F_OPEN
 352+ 7BF6 5A 67
 353+ 7BF8 74 68                        dw      ZEQUAL
 354+ 7BFA F5 63                        dw      ZBRANCH
 355+ 7BFC 08 00                        dw      Needs_1 - $
 356+ 7BFE 85 7A                        dw          F_INCLUDE
 357+ 7C00 E8 63                        dw      BRANCH
 358+ 7C02 04 00                        dw      Needs_2 - $
 359+ 7C04              Needs_1:
 360+ 7C04              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 361+ 7C04              //              dw          LIT, 43, MESSAGE
 362+ 7C04 0A 69                        dw          DROP
 363+ 7C06              Needs_2:
 364+ 7C06 4F 68                        dw      EXIT                    // ;
 365+ 7C08
 366+ 7C08
 367+ 7C08                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 367+ 7C08             >
 367+ 7C08             >Dict_Ptr        defl    $
 367+ 7C08             >
 367+ 7C08             >//              ______________________________________________________________________
 367+ 7C08             >//              Heap part
 367+ 7C08             >
 367+ 7C08             >
 367+ 7C08             >                org     (Heap_Ptr & $1FFF) + $E000
 367+ EB68             >
 367+ EB68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ EB68             >Latest_Definition defl  Heap_Ptr
 367+ EB68             >
 367+ EB68             >                // dummy db directives used to calculate length of namec
 367+ EB68 4E 44 4F 4D >                db      "NDOM"
 367+ EB6C             >len_NFA         defl    $ - temp_NFA
 367+ EB6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ EB68             >
 367+ EB68 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ EB69 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 367+ EB6D             >                org     $-1                 // alter last byte of Name just above to set
 367+ EB6C CD          >                db      {b $} | END_BIT     // msb as name end
 367+ EB6D             >
 367+ EB6D 5D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 367+ EB6F             >Prev_Ptr        defl    Heap_Ptr
 367+ EB6F             >
 367+ EB6F             >mirror_Ptr      defl    $
 367+ EB6F             >
 367+ EB6F 0A 7C       >                dw      Dict_Ptr + 2        // xt
 367+ EB71             >Heap_Ptr        defl    $ - $E000           // save current HP
 367+ EB71             >
 367+ EB71             >Current_HP      defl  $ - $E000             // used to set HP once!
 367+ EB71             >
 367+ EB71             >//              ______________________________________________________________________
 367+ EB71             >//              Dictionary part
 367+ EB71             >
 367+ EB71             >                org     Dict_Ptr
 367+ 7C08             >
 367+ 7C08 6F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 367+ 7C0A             >
 367+ 7C0A             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 7C0A CD 09 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 367+ 7C0D             >
 367+ 7C0D             >
 367+ 7C0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 7C0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 7C0D             >
 367+ 7C0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 7C0D              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 369+ 7C0D 3A 3F 2F 2A                  db ':?/*|\<>"'
 369+ 7C11 7C 5C 3C 3E
 369+ 7C15 22
 370+ 7C16 00                           db 0
 371+ 7C17
 372+ 7C17                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 372+ 7C17             >
 372+ 7C17             >Dict_Ptr        defl    $
 372+ 7C17             >
 372+ 7C17             >//              ______________________________________________________________________
 372+ 7C17             >//              Heap part
 372+ 7C17             >
 372+ 7C17             >
 372+ 7C17             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ EB71             >
 372+ EB71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ EB71             >Latest_Definition defl  Heap_Ptr
 372+ EB71             >
 372+ EB71             >                // dummy db directives used to calculate length of namec
 372+ EB71 4E 43 44 4D >                db      "NCDM"
 372+ EB75             >len_NFA         defl    $ - temp_NFA
 372+ EB75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ EB71             >
 372+ EB71 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ EB72 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 372+ EB76             >                org     $-1                 // alter last byte of Name just above to set
 372+ EB75 CD          >                db      {b $} | END_BIT     // msb as name end
 372+ EB76             >
 372+ EB76 68 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ EB78             >Prev_Ptr        defl    Heap_Ptr
 372+ EB78             >
 372+ EB78             >mirror_Ptr      defl    $
 372+ EB78             >
 372+ EB78 19 7C       >                dw      Dict_Ptr + 2        // xt
 372+ EB7A             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ EB7A             >
 372+ EB7A             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ EB7A             >
 372+ EB7A             >//              ______________________________________________________________________
 372+ EB7A             >//              Dictionary part
 372+ EB7A             >
 372+ EB7A             >                org     Dict_Ptr
 372+ 7C17             >
 372+ 7C17 78 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 7C19             >
 372+ 7C19             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 7C19 CD 09 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 372+ 7C1C             >
 372+ 7C1C             >
 372+ 7C1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 7C1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 7C1C             >
 372+ 7C1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 7C1C              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 374+ 7C1C 5F 5E 25 26                  db '_^%&$_{}~'
 374+ 7C20 24 5F 7B 7D
 374+ 7C24 7E
 375+ 7C25 00                           db 0
 376+ 7C26
 377+ 7C26              // Replace illegal character in filename using the map here above
 378+ 7C26              // at the moment we need only  "
 379+ 7C26                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 379+ 7C26             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 379+ 7C26             >
 379+ 7C26             >Dict_Ptr        defl    $
 379+ 7C26             >
 379+ 7C26             >//              ______________________________________________________________________
 379+ 7C26             >//              Heap part
 379+ 7C26             >
 379+ 7C26             >
 379+ 7C26             >                org     (Heap_Ptr & $1FFF) + $E000
 379+ EB7A             >
 379+ EB7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ EB7A             >Latest_Definition defl  Heap_Ptr
 379+ EB7A             >
 379+ EB7A             >                // dummy db directives used to calculate length of namec
 379+ EB7A 4D 41 50 2D >                db      "MAP-FN"
 379+ EB7E 46 4E       >
 379+ EB80             >len_NFA         defl    $ - temp_NFA
 379+ EB80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ EB7A             >
 379+ EB7A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ EB7B 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 379+ EB7F 46 4E       >
 379+ EB81             >                org     $-1                 // alter last byte of Name just above to set
 379+ EB80 CE          >                db      {b $} | END_BIT     // msb as name end
 379+ EB81             >
 379+ EB81 71 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 379+ EB83             >Prev_Ptr        defl    Heap_Ptr
 379+ EB83             >
 379+ EB83             >mirror_Ptr      defl    $
 379+ EB83             >
 379+ EB83 28 7C       >                dw      Dict_Ptr + 2        // xt
 379+ EB85             >Heap_Ptr        defl    $ - $E000           // save current HP
 379+ EB85             >
 379+ EB85             >Current_HP      defl  $ - $E000             // used to set HP once!
 379+ EB85             >
 379+ EB85             >//              ______________________________________________________________________
 379+ EB85             >//              Dictionary part
 379+ EB85             >
 379+ EB85             >                org     Dict_Ptr
 379+ 7C26             >
 379+ 7C26 83 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 379+ 7C28             >
 379+ 7C28             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 7C28 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 7C2B             >
 379+ 7C2B             >
 379+ 7C2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 7C2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 7C2B             >
 379+ 7C2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 7C2B 18 6F 25 6F                  dw      COUNT, BOUNDS
 381+ 7C2F 32 64                        dw      C_DO
 382+ 7C31              Needs_3:
 383+ 7C31 19 7C 0A 7C                  dw          NCDM, NDOM, LIT, 10
 383+ 7C35 A3 63 0A 00
 384+ 7C39 38 64 A4 69                  dw          I, CFETCH
 385+ 7C3D 58 65                        dw          C_MAP
 386+ 7C3F 38 64 AD 69                  dw          I, CSTORE
 387+ 7C43              Needs_4:
 388+ 7C43 E0 63                        dw      C_LOOP
 389+ 7C45 EC FF                        dw      Needs_3 - $
 390+ 7C47 4F 68                        dw      EXIT
 391+ 7C49
 392+ 7C49
 393+ 7C49              // include  "path/cccc.f" if cccc is not defined
 394+ 7C49              // filename cccc.f is temporary stored at NEEDS-W
 395+ 7C49                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 395+ 7C49             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 395+ 7C49             >
 395+ 7C49             >Dict_Ptr        defl    $
 395+ 7C49             >
 395+ 7C49             >//              ______________________________________________________________________
 395+ 7C49             >//              Heap part
 395+ 7C49             >
 395+ 7C49             >
 395+ 7C49             >                org     (Heap_Ptr & $1FFF) + $E000
 395+ EB85             >
 395+ EB85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 395+ EB85             >Latest_Definition defl  Heap_Ptr
 395+ EB85             >
 395+ EB85             >                // dummy db directives used to calculate length of namec
 395+ EB85 4E 45 45 44 >                db      "NEEDS-F"
 395+ EB89 53 2D 46    >
 395+ EB8C             >len_NFA         defl    $ - temp_NFA
 395+ EB8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 395+ EB85             >
 395+ EB85 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 395+ EB86 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 395+ EB8A 53 2D 46    >
 395+ EB8D             >                org     $-1                 // alter last byte of Name just above to set
 395+ EB8C C6          >                db      {b $} | END_BIT     // msb as name end
 395+ EB8D             >
 395+ EB8D 7A 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 395+ EB8F             >Prev_Ptr        defl    Heap_Ptr
 395+ EB8F             >
 395+ EB8F             >mirror_Ptr      defl    $
 395+ EB8F             >
 395+ EB8F 4B 7C       >                dw      Dict_Ptr + 2        // xt
 395+ EB91             >Heap_Ptr        defl    $ - $E000           // save current HP
 395+ EB91             >
 395+ EB91             >Current_HP      defl  $ - $E000             // used to set HP once!
 395+ EB91             >
 395+ EB91             >//              ______________________________________________________________________
 395+ EB91             >//              Dictionary part
 395+ EB91             >
 395+ EB91             >                org     Dict_Ptr
 395+ 7C49             >
 395+ 7C49 8F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 395+ 7C4B             >
 395+ 7C4B             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 395+ 7C4B CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 395+ 7C4E             >
 395+ 7C4E             >
 395+ 7C4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 395+ 7C4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 395+ 7C4E             >
 395+ 7C4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 396+ 7C4E 02 73                        dw      LFIND
 397+ 7C50 F5 63                        dw      ZBRANCH
 398+ 7C52 0A 00                        dw      Needs_5 - $
 399+ 7C54
 400+ 7C54 0A 69 5A 69                  dw          DROP, TWO_DROP
 401+ 7C58 E8 63                        dw      BRANCH
 402+ 7C5A 2C 00                        dw      Needs_6 - $
 403+ 7C5C              Needs_5:
 404+ 7C5C 68 7B                        dw          NEEDS_W
 405+ 7C5E A3 63 23 00                  dw          LIT, 35
 406+ 7C62 86 70                        dw          ERASE                   // a
 407+ 7C64 AA 6B A4 69                  dw          HERE, CFETCH, ONE_PLUS  // a n
 407+ 7C68 BA 68
 408+ 7C6A AA 6B 01 69                  dw          HERE, OVER              // a n here n
 409+ 7C6E 68 7B 1E 69                  dw          NEEDS_W, SWAP, CMOVE    // a n
 409+ 7C72 90 67
 410+ 7C74 68 7B 28 7C                  dw          NEEDS_W, NEEDS_CHECK
 411+ 7C78 68 7B A1 68                  dw          NEEDS_W, PLUS           // a a1+1
 412+ 7C7C A3 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 413+ 7C80 1E 69 99 69                  dw          SWAP, STORE             // a
 414+ 7C84 D3 7B                        dw          NEEDS_SLASH
 415+ 7C86              Needs_6:
 416+ 7C86 4F 68                        dw      EXIT
 417+ 7C88
 418+ 7C88
 419+ 7C88              // check for cccc exists in vocabulary
 420+ 7C88              // if it doesn't then  INCLUDE  inc/cccc.F
 421+ 7C88              // search in inc subdirectory
 422+ 7C88                              Colon_Def NEEDS, "NEEDS", is_normal
 422+ 7C88             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 422+ 7C88             >
 422+ 7C88             >Dict_Ptr        defl    $
 422+ 7C88             >
 422+ 7C88             >//              ______________________________________________________________________
 422+ 7C88             >//              Heap part
 422+ 7C88             >
 422+ 7C88             >
 422+ 7C88             >                org     (Heap_Ptr & $1FFF) + $E000
 422+ EB91             >
 422+ EB91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 422+ EB91             >Latest_Definition defl  Heap_Ptr
 422+ EB91             >
 422+ EB91             >                // dummy db directives used to calculate length of namec
 422+ EB91 4E 45 45 44 >                db      "NEEDS"
 422+ EB95 53          >
 422+ EB96             >len_NFA         defl    $ - temp_NFA
 422+ EB96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 422+ EB91             >
 422+ EB91 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 422+ EB92 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 422+ EB96 53          >
 422+ EB97             >                org     $-1                 // alter last byte of Name just above to set
 422+ EB96 D3          >                db      {b $} | END_BIT     // msb as name end
 422+ EB97             >
 422+ EB97 85 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 422+ EB99             >Prev_Ptr        defl    Heap_Ptr
 422+ EB99             >
 422+ EB99             >mirror_Ptr      defl    $
 422+ EB99             >
 422+ EB99 8A 7C       >                dw      Dict_Ptr + 2        // xt
 422+ EB9B             >Heap_Ptr        defl    $ - $E000           // save current HP
 422+ EB9B             >
 422+ EB9B             >Current_HP      defl  $ - $E000             // used to set HP once!
 422+ EB9B             >
 422+ EB9B             >//              ______________________________________________________________________
 422+ EB9B             >//              Dictionary part
 422+ EB9B             >
 422+ EB9B             >                org     Dict_Ptr
 422+ 7C88             >
 422+ 7C88 99 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 422+ 7C8A             >
 422+ 7C8A             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 422+ 7C8A CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 422+ 7C8D             >
 422+ 7C8D             >
 422+ 7C8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 422+ 7C8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 422+ 7C8D             >
 422+ 7C8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 423+ 7C8D 2C 6B 8F 69                  dw      TO_IN, FETCH
 424+ 7C91 25 69                        dw      DUP
 425+ 7C93 BD 7B 4B 7C                  dw      NEEDS_INC, NEEDS_PATH
 426+ 7C97 2C 6B 99 69                  dw      TO_IN, STORE
 427+ 7C9B C8 7B 4B 7C                  dw      NEEDS_LIB, NEEDS_PATH
 428+ 7C9F 2C 6B 99 69                  dw      TO_IN, STORE
 429+ 7CA3 02 73                        dw      LFIND
 430+ 7CA5 F5 63                        dw      ZBRANCH
 431+ 7CA7 08 00                        dw      Needs_10 - $
 432+ 7CA9 5A 69                        dw          TWO_DROP
 433+ 7CAB E8 63                        dw      BRANCH
 434+ 7CAD 10 00                        dw      Needs_11 - $
 435+ 7CAF              Needs_10:
 436+ 7CAF 68 7B 18 6F                  dw      NEEDS_W, COUNT, TYPE, SPACE
 436+ 7CB3 6C 6F 73 6C
 437+ 7CB7 A3 63 2B 00                  dw      LIT, 43, MESSAGE
 437+ 7CBB 88 77
 438+ 7CBD              Needs_11:
 439+ 7CBD 4F 68                        dw      EXIT
 440+ 7CBF
 441+ 7CBF
 442+ 7CBF              //  ______________________________________________________________________
 443+ 7CBF              //
 444+ 7CBF              // load         n --
 445+ 7CBF                              Colon_Def LOAD, "LOAD", is_normal
 445+ 7CBF             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 445+ 7CBF             >
 445+ 7CBF             >Dict_Ptr        defl    $
 445+ 7CBF             >
 445+ 7CBF             >//              ______________________________________________________________________
 445+ 7CBF             >//              Heap part
 445+ 7CBF             >
 445+ 7CBF             >
 445+ 7CBF             >                org     (Heap_Ptr & $1FFF) + $E000
 445+ EB9B             >
 445+ EB9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ EB9B             >Latest_Definition defl  Heap_Ptr
 445+ EB9B             >
 445+ EB9B             >                // dummy db directives used to calculate length of namec
 445+ EB9B 4C 4F 41 44 >                db      "LOAD"
 445+ EB9F             >len_NFA         defl    $ - temp_NFA
 445+ EB9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ EB9B             >
 445+ EB9B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ EB9C 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 445+ EBA0             >                org     $-1                 // alter last byte of Name just above to set
 445+ EB9F C4          >                db      {b $} | END_BIT     // msb as name end
 445+ EBA0             >
 445+ EBA0 91 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 445+ EBA2             >Prev_Ptr        defl    Heap_Ptr
 445+ EBA2             >
 445+ EBA2             >mirror_Ptr      defl    $
 445+ EBA2             >
 445+ EBA2 C1 7C       >                dw      Dict_Ptr + 2        // xt
 445+ EBA4             >Heap_Ptr        defl    $ - $E000           // save current HP
 445+ EBA4             >
 445+ EBA4             >Current_HP      defl  $ - $E000             // used to set HP once!
 445+ EBA4             >
 445+ EBA4             >//              ______________________________________________________________________
 445+ EBA4             >//              Dictionary part
 445+ EBA4             >
 445+ EBA4             >                org     Dict_Ptr
 445+ 7CBF             >
 445+ 7CBF A2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 445+ 7CC1             >
 445+ 7CC1             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 7CC1 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 7CC4             >
 445+ 7CC4             >
 445+ 7CC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 7CC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 7CC4             >
 445+ 7CC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 7CC4 26 6B 8F 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 446+ 7CC8 59 68
 447+ 7CCA 2C 6B 8F 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 447+ 7CCE 59 68
 448+ 7CD0
 449+ 7CD0 85 6A 2C 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 449+ 7CD4 99 69
 450+ 7CD6 BD 6A 14 77                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 450+ 7CDA 26 6B 99 69
 451+ 7CDE C5 74                        dw      INTERPRET               // interpret
 452+ 7CE0
 453+ 7CE0 64 68 2C 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 453+ 7CE4 99 69
 454+ 7CE6 64 68 26 6B                  dw      R_TO, BLK, STORE        // r> blk !
 454+ 7CEA 99 69
 455+ 7CEC 4F 68                        dw      EXIT                    // ;
 456+ 7CEE
 457+ 7CEE              //  ______________________________________________________________________
 458+ 7CEE              //
 459+ 7CEE              // -->          --
 460+ 7CEE                              Colon_Def LOAD_NEXT, "-->", is_immediate
 460+ 7CEE             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 460+ 7CEE             >
 460+ 7CEE             >Dict_Ptr        defl    $
 460+ 7CEE             >
 460+ 7CEE             >//              ______________________________________________________________________
 460+ 7CEE             >//              Heap part
 460+ 7CEE             >
 460+ 7CEE             >
 460+ 7CEE             >                org     (Heap_Ptr & $1FFF) + $E000
 460+ EBA4             >
 460+ EBA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ EBA4             >Latest_Definition defl  Heap_Ptr
 460+ EBA4             >
 460+ EBA4             >                // dummy db directives used to calculate length of namec
 460+ EBA4 2D 2D 3E    >                db      "-->"
 460+ EBA7             >len_NFA         defl    $ - temp_NFA
 460+ EBA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ EBA4             >
 460+ EBA4 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ EBA5 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 460+ EBA8             >                org     $-1                 // alter last byte of Name just above to set
 460+ EBA7 BE          >                db      {b $} | END_BIT     // msb as name end
 460+ EBA8             >
 460+ EBA8 9B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 460+ EBAA             >Prev_Ptr        defl    Heap_Ptr
 460+ EBAA             >
 460+ EBAA             >mirror_Ptr      defl    $
 460+ EBAA             >
 460+ EBAA F0 7C       >                dw      Dict_Ptr + 2        // xt
 460+ EBAC             >Heap_Ptr        defl    $ - $E000           // save current HP
 460+ EBAC             >
 460+ EBAC             >Current_HP      defl  $ - $E000             // used to set HP once!
 460+ EBAC             >
 460+ EBAC             >//              ______________________________________________________________________
 460+ EBAC             >//              Dictionary part
 460+ EBAC             >
 460+ EBAC             >                org     Dict_Ptr
 460+ 7CEE             >
 460+ 7CEE AA 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 460+ 7CF0             >
 460+ 7CF0             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 7CF0 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 7CF3             >
 460+ 7CF3             >
 460+ 7CF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 7CF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 7CF3             >
 460+ 7CF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 7CF3 3B 6E                        dw      QLOADING                // ?loading
 462+ 7CF5 85 6A 2C 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 462+ 7CF9 99 69
 463+ 7CFB BD 6A                        dw      BSCR                    // b/scr
 464+ 7CFD 26 6B 8F 69                  dw      BLK, FETCH              // blk @
 465+ 7D01 01 69                        dw      OVER                    // over
 466+ 7D03 39 77                        dw      MOD                     // mod
 467+ 7D05 E9 6B                        dw      SUBTRACT                // -
 468+ 7D07 26 6B 77 69                  dw      BLK, PLUSSTORE          // +!
 469+ 7D0B 4F 68                        dw      EXIT                    // ;
 470+ 7D0D
 471+ 7D0D              //  ______________________________________________________________________
 472+ 7D0D              //
 473+ 7D0D              // '            -- xt
 474+ 7D0D                              Colon_Def TICK, "'", is_normal
 474+ 7D0D             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 474+ 7D0D             >
 474+ 7D0D             >Dict_Ptr        defl    $
 474+ 7D0D             >
 474+ 7D0D             >//              ______________________________________________________________________
 474+ 7D0D             >//              Heap part
 474+ 7D0D             >
 474+ 7D0D             >
 474+ 7D0D             >                org     (Heap_Ptr & $1FFF) + $E000
 474+ EBAC             >
 474+ EBAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 474+ EBAC             >Latest_Definition defl  Heap_Ptr
 474+ EBAC             >
 474+ EBAC             >                // dummy db directives used to calculate length of namec
 474+ EBAC 27          >                db      "'"
 474+ EBAD             >len_NFA         defl    $ - temp_NFA
 474+ EBAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 474+ EBAC             >
 474+ EBAC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 474+ EBAD 27          >                db      "'"               // name string in 7-bit ascii, but
 474+ EBAE             >                org     $-1                 // alter last byte of Name just above to set
 474+ EBAD A7          >                db      {b $} | END_BIT     // msb as name end
 474+ EBAE             >
 474+ EBAE A4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 474+ EBB0             >Prev_Ptr        defl    Heap_Ptr
 474+ EBB0             >
 474+ EBB0             >mirror_Ptr      defl    $
 474+ EBB0             >
 474+ EBB0 0F 7D       >                dw      Dict_Ptr + 2        // xt
 474+ EBB2             >Heap_Ptr        defl    $ - $E000           // save current HP
 474+ EBB2             >
 474+ EBB2             >Current_HP      defl  $ - $E000             // used to set HP once!
 474+ EBB2             >
 474+ EBB2             >//              ______________________________________________________________________
 474+ EBB2             >//              Dictionary part
 474+ EBB2             >
 474+ EBB2             >                org     Dict_Ptr
 474+ 7D0D             >
 474+ 7D0D B0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 474+ 7D0F             >
 474+ 7D0F             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 474+ 7D0F CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 474+ 7D12             >
 474+ 7D12             >
 474+ 7D12             >                endif           ; ok        // for other definitions it "points" the correct handler
 474+ 7D12             >                // Use of "; ok" to suppress "warning[fwdref]"
 474+ 7D12             >
 474+ 7D12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 475+ 7D12 02 73                        dw      LFIND                   // -find
 476+ 7D14 74 68                        dw      ZEQUAL                  // 0=
 477+ 7D16 85 6A DE 6D                  dw      ZERO, QERROR            // 0 ?error
 478+ 7D1A 0A 69                        dw      DROP                    // drop
 479+ 7D1C 4F 68                        dw      EXIT                    // ;
 480+ 7D1E
 481+ 7D1E              //  ______________________________________________________________________
 482+ 7D1E              //
 483+ 7D1E              // forget       -- cccc
 484+ 7D1E                              Colon_Def FORGET, "FORGET", is_normal
 484+ 7D1E             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 484+ 7D1E             >
 484+ 7D1E             >Dict_Ptr        defl    $
 484+ 7D1E             >
 484+ 7D1E             >//              ______________________________________________________________________
 484+ 7D1E             >//              Heap part
 484+ 7D1E             >
 484+ 7D1E             >
 484+ 7D1E             >                org     (Heap_Ptr & $1FFF) + $E000
 484+ EBB2             >
 484+ EBB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ EBB2             >Latest_Definition defl  Heap_Ptr
 484+ EBB2             >
 484+ EBB2             >                // dummy db directives used to calculate length of namec
 484+ EBB2 46 4F 52 47 >                db      "FORGET"
 484+ EBB6 45 54       >
 484+ EBB8             >len_NFA         defl    $ - temp_NFA
 484+ EBB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ EBB2             >
 484+ EBB2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ EBB3 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 484+ EBB7 45 54       >
 484+ EBB9             >                org     $-1                 // alter last byte of Name just above to set
 484+ EBB8 D4          >                db      {b $} | END_BIT     // msb as name end
 484+ EBB9             >
 484+ EBB9 AC 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 484+ EBBB             >Prev_Ptr        defl    Heap_Ptr
 484+ EBBB             >
 484+ EBBB             >mirror_Ptr      defl    $
 484+ EBBB             >
 484+ EBBB 20 7D       >                dw      Dict_Ptr + 2        // xt
 484+ EBBD             >Heap_Ptr        defl    $ - $E000           // save current HP
 484+ EBBD             >
 484+ EBBD             >Current_HP      defl  $ - $E000             // used to set HP once!
 484+ EBBD             >
 484+ EBBD             >//              ______________________________________________________________________
 484+ EBBD             >//              Dictionary part
 484+ EBBD             >
 484+ EBBD             >                org     Dict_Ptr
 484+ 7D1E             >
 484+ 7D1E BB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 484+ 7D20             >
 484+ 7D20             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 7D20 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 484+ 7D23             >
 484+ 7D23             >
 484+ 7D23             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 7D23             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 7D23             >
 484+ 7D23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 7D23 4A 6B 8F 69                  dw      CURRENT, FETCH          // current @
 486+ 7D27 44 6B 8F 69                  dw      CONTEXT, FETCH          // context @
 487+ 7D2B E9 6B A3 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 487+ 7D2F 17 00 DE 6D
 488+ 7D33 0F 7D 5D 6D                  dw      TICK, TO_BODY           // ' >body
 489+ 7D37 25 69 FC 6A                  dw      DUP, FENCE, FETCH       // dup fence @
 489+ 7D3B 8F 69
 490+ 7D3D 00 6C A3 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 490+ 7D41 15 00 DE 6D
 491+ 7D45 25 69 92 6D                  dw      DUP, NFA                // dup nfa
 492+ 7D49
 493+ 7D49                          //  dw      DUP
 494+ 7D49                          //  dw      LIT, $E000, LESS
 495+ 7D49                          //  dw      MMU7_FETCH, ONE, EQUALS
 496+ 7D49                          //  dw      OR_OP, NOT_OP
 497+ 7D49                          //  dw      ZBRANCH
 498+ 7D49                          //  dw      Forget_then - $
 499+ 7D49
 500+ 7D49 9B 6C BE 6C                  dw      MMU7_FETCH, FROM_FAR
 501+ 7D4D 1A 6B 99 69                  dw      HP, STORE
 502+ 7D51 25 69 87 6D                  dw      DUP, CFA, CELL_MINUS
 502+ 7D55 D4 68
 503+ 7D57              // Forget_then:
 504+ 7D57 02 6B 99 69                  dw      DP, STORE               // dp !
 505+ 7D5B 9D 6D 8F 69                  dw      LFA, FETCH              // lfa @
 506+ 7D5F 44 6B 8F 69                  dw      CONTEXT, FETCH, STORE   // context @ !
 506+ 7D63 99 69
 507+ 7D65 4F 68                        dw      EXIT                    // ;
 508+ 7D67
 509+ 7D67              //  ______________________________________________________________________
 510+ 7D67              //
 511+ 7D67              // marker       -- cccc
 512+ 7D67                              Colon_Def MARKER, "MARKER", is_immediate
 512+ 7D67             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 512+ 7D67             >
 512+ 7D67             >Dict_Ptr        defl    $
 512+ 7D67             >
 512+ 7D67             >//              ______________________________________________________________________
 512+ 7D67             >//              Heap part
 512+ 7D67             >
 512+ 7D67             >
 512+ 7D67             >                org     (Heap_Ptr & $1FFF) + $E000
 512+ EBBD             >
 512+ EBBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 512+ EBBD             >Latest_Definition defl  Heap_Ptr
 512+ EBBD             >
 512+ EBBD             >                // dummy db directives used to calculate length of namec
 512+ EBBD 4D 41 52 4B >                db      "MARKER"
 512+ EBC1 45 52       >
 512+ EBC3             >len_NFA         defl    $ - temp_NFA
 512+ EBC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 512+ EBBD             >
 512+ EBBD C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 512+ EBBE 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 512+ EBC2 45 52       >
 512+ EBC4             >                org     $-1                 // alter last byte of Name just above to set
 512+ EBC3 D2          >                db      {b $} | END_BIT     // msb as name end
 512+ EBC4             >
 512+ EBC4 B2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 512+ EBC6             >Prev_Ptr        defl    Heap_Ptr
 512+ EBC6             >
 512+ EBC6             >mirror_Ptr      defl    $
 512+ EBC6             >
 512+ EBC6 69 7D       >                dw      Dict_Ptr + 2        // xt
 512+ EBC8             >Heap_Ptr        defl    $ - $E000           // save current HP
 512+ EBC8             >
 512+ EBC8             >Current_HP      defl  $ - $E000             // used to set HP once!
 512+ EBC8             >
 512+ EBC8             >//              ______________________________________________________________________
 512+ EBC8             >//              Dictionary part
 512+ EBC8             >
 512+ EBC8             >                org     Dict_Ptr
 512+ 7D67             >
 512+ 7D67 C6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 512+ 7D69             >
 512+ 7D69             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 512+ 7D69 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 512+ 7D6C             >
 512+ 7D6C             >
 512+ 7D6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 512+ 7D6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 512+ 7D6C             >
 512+ 7D6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 513+ 7D6C F0 6E                        dw      CBUILDS
 514+ 7D6E 08 6B 8F 69                  dw      VOC_LINK, FETCH, COMMA
 514+ 7D72 C0 6B
 515+ 7D74 4A 6B 8F 69                  dw      CURRENT, FETCH, COMMA
 515+ 7D78 C0 6B
 516+ 7D7A 44 6B 8F 69                  dw      CONTEXT, FETCH, COMMA
 516+ 7D7E C0 6B
 517+ 7D80 4A 6B 8F 69                  dw      CURRENT, FETCH, FETCH,  COMMA
 517+ 7D84 8F 69 C0 6B
 518+ 7D88 4E 6D AC 6D                  dw      LATEST, PFA, LFA, FETCH, COMMA
 518+ 7D8C 9D 6D 8F 69
 518+ 7D90 C0 6B
 519+ 7D92 FB 6E                        dw      DOES_TO
 520+ 7D94 25 69 8F 69                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 520+ 7D98 08 6B 99 69
 520+ 7D9C D0 68
 521+ 7D9E 25 69 8F 69                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 521+ 7DA2 4A 6B 99 69
 521+ 7DA6 D0 68
 522+ 7DA8 25 69 8F 69                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 522+ 7DAC 44 6B 99 69
 522+ 7DB0 D0 68
 523+ 7DB2 25 69 8F 69                  dw      DUP, FETCH
 524+ 7DB6                          //  dw      DUP, QHEAPP
 525+ 7DB6                          //  dw      ZBRANCH
 526+ 7DB6                          //  dw      Marker_then - $
 527+ 7DB6 25 69 1A 6B                  dw          DUP, HP, STORE
 527+ 7DBA 99 69
 528+ 7DBC AC 6D 87 6D                  dw          PFA, CFA, CELL_MINUS
 528+ 7DC0 D4 68
 529+ 7DC2              // Marker_then:
 530+ 7DC2 02 6B 99 69                  dw      DP, STORE, CELL_PLUS
 530+ 7DC6 D0 68
 531+ 7DC8 8F 69 4A 6B                  dw      FETCH, CURRENT, FETCH, STORE
 531+ 7DCC 8F 69 99 69
 532+ 7DD0 4F 68                        dw      EXIT
 533+ 7DD2
 534+ 7DD2              //  ______________________________________________________________________
 535+ 7DD2              //
 536+ 7DD2              // spaces       n --
 537+ 7DD2                              Colon_Def SPACES, "SPACES", is_normal
 537+ 7DD2             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 537+ 7DD2             >
 537+ 7DD2             >Dict_Ptr        defl    $
 537+ 7DD2             >
 537+ 7DD2             >//              ______________________________________________________________________
 537+ 7DD2             >//              Heap part
 537+ 7DD2             >
 537+ 7DD2             >
 537+ 7DD2             >                org     (Heap_Ptr & $1FFF) + $E000
 537+ EBC8             >
 537+ EBC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 537+ EBC8             >Latest_Definition defl  Heap_Ptr
 537+ EBC8             >
 537+ EBC8             >                // dummy db directives used to calculate length of namec
 537+ EBC8 53 50 41 43 >                db      "SPACES"
 537+ EBCC 45 53       >
 537+ EBCE             >len_NFA         defl    $ - temp_NFA
 537+ EBCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 537+ EBC8             >
 537+ EBC8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 537+ EBC9 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 537+ EBCD 45 53       >
 537+ EBCF             >                org     $-1                 // alter last byte of Name just above to set
 537+ EBCE D3          >                db      {b $} | END_BIT     // msb as name end
 537+ EBCF             >
 537+ EBCF BD 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 537+ EBD1             >Prev_Ptr        defl    Heap_Ptr
 537+ EBD1             >
 537+ EBD1             >mirror_Ptr      defl    $
 537+ EBD1             >
 537+ EBD1 D4 7D       >                dw      Dict_Ptr + 2        // xt
 537+ EBD3             >Heap_Ptr        defl    $ - $E000           // save current HP
 537+ EBD3             >
 537+ EBD3             >Current_HP      defl  $ - $E000             // used to set HP once!
 537+ EBD3             >
 537+ EBD3             >//              ______________________________________________________________________
 537+ EBD3             >//              Dictionary part
 537+ EBD3             >
 537+ EBD3             >                org     Dict_Ptr
 537+ 7DD2             >
 537+ 7DD2 D1 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 537+ 7DD4             >
 537+ 7DD4             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 537+ 7DD4 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 537+ 7DD7             >
 537+ 7DD7             >
 537+ 7DD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 537+ 7DD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 537+ 7DD7             >
 537+ 7DD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 7DD7 85 6A 39 6C                  dw      ZERO, MAX
 539+ 7DDB 85 6A 0A 64                  dw      ZERO, C_Q_DO
 540+ 7DDF 08 00                        dw      Spaces_Leave - $
 541+ 7DE1              Spaces_Loop:
 542+ 7DE1 73 6C                        dw          SPACE
 543+ 7DE3 E0 63                        dw      C_LOOP
 544+ 7DE5 FC FF                        dw      Spaces_Loop - $
 545+ 7DE7              Spaces_Leave:
 546+ 7DE7 4F 68                        dw      EXIT                    // ;
 547+ 7DE9
 548+ 7DE9              //  ______________________________________________________________________
 549+ 7DE9              //
 550+ 7DE9              // <#           --
 551+ 7DE9                              Colon_Def BEGIN_DASH, "<#", is_normal
 551+ 7DE9             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 551+ 7DE9             >
 551+ 7DE9             >Dict_Ptr        defl    $
 551+ 7DE9             >
 551+ 7DE9             >//              ______________________________________________________________________
 551+ 7DE9             >//              Heap part
 551+ 7DE9             >
 551+ 7DE9             >
 551+ 7DE9             >                org     (Heap_Ptr & $1FFF) + $E000
 551+ EBD3             >
 551+ EBD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 551+ EBD3             >Latest_Definition defl  Heap_Ptr
 551+ EBD3             >
 551+ EBD3             >                // dummy db directives used to calculate length of namec
 551+ EBD3 3C 23       >                db      "<#"
 551+ EBD5             >len_NFA         defl    $ - temp_NFA
 551+ EBD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 551+ EBD3             >
 551+ EBD3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 551+ EBD4 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 551+ EBD6             >                org     $-1                 // alter last byte of Name just above to set
 551+ EBD5 A3          >                db      {b $} | END_BIT     // msb as name end
 551+ EBD6             >
 551+ EBD6 C8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 551+ EBD8             >Prev_Ptr        defl    Heap_Ptr
 551+ EBD8             >
 551+ EBD8             >mirror_Ptr      defl    $
 551+ EBD8             >
 551+ EBD8 EB 7D       >                dw      Dict_Ptr + 2        // xt
 551+ EBDA             >Heap_Ptr        defl    $ - $E000           // save current HP
 551+ EBDA             >
 551+ EBDA             >Current_HP      defl  $ - $E000             // used to set HP once!
 551+ EBDA             >
 551+ EBDA             >//              ______________________________________________________________________
 551+ EBDA             >//              Dictionary part
 551+ EBDA             >
 551+ EBDA             >                org     Dict_Ptr
 551+ 7DE9             >
 551+ 7DE9 D8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 551+ 7DEB             >
 551+ 7DEB             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 551+ 7DEB CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 551+ 7DEE             >
 551+ 7DEE             >
 551+ 7DEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 551+ 7DEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 551+ 7DEE             >
 551+ 7DEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 552+ 7DEE AF 70 74 6B                  dw      PAD, HLD, STORE
 552+ 7DF2 99 69
 553+ 7DF4 4F 68                        dw      EXIT
 554+ 7DF6
 555+ 7DF6              //  ______________________________________________________________________
 556+ 7DF6              //
 557+ 7DF6              // #>           --
 558+ 7DF6                              Colon_Def DASH_END, "#>", is_normal
 558+ 7DF6             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 558+ 7DF6             >
 558+ 7DF6             >Dict_Ptr        defl    $
 558+ 7DF6             >
 558+ 7DF6             >//              ______________________________________________________________________
 558+ 7DF6             >//              Heap part
 558+ 7DF6             >
 558+ 7DF6             >
 558+ 7DF6             >                org     (Heap_Ptr & $1FFF) + $E000
 558+ EBDA             >
 558+ EBDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 558+ EBDA             >Latest_Definition defl  Heap_Ptr
 558+ EBDA             >
 558+ EBDA             >                // dummy db directives used to calculate length of namec
 558+ EBDA 23 3E       >                db      "#>"
 558+ EBDC             >len_NFA         defl    $ - temp_NFA
 558+ EBDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 558+ EBDA             >
 558+ EBDA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 558+ EBDB 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 558+ EBDD             >                org     $-1                 // alter last byte of Name just above to set
 558+ EBDC BE          >                db      {b $} | END_BIT     // msb as name end
 558+ EBDD             >
 558+ EBDD D3 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 558+ EBDF             >Prev_Ptr        defl    Heap_Ptr
 558+ EBDF             >
 558+ EBDF             >mirror_Ptr      defl    $
 558+ EBDF             >
 558+ EBDF F8 7D       >                dw      Dict_Ptr + 2        // xt
 558+ EBE1             >Heap_Ptr        defl    $ - $E000           // save current HP
 558+ EBE1             >
 558+ EBE1             >Current_HP      defl  $ - $E000             // used to set HP once!
 558+ EBE1             >
 558+ EBE1             >//              ______________________________________________________________________
 558+ EBE1             >//              Dictionary part
 558+ EBE1             >
 558+ EBE1             >                org     Dict_Ptr
 558+ 7DF6             >
 558+ 7DF6 DF 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 558+ 7DF8             >
 558+ 7DF8             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 558+ 7DF8 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 558+ 7DFB             >
 558+ 7DFB             >
 558+ 7DFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 558+ 7DFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 558+ 7DFB             >
 558+ 7DFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 559+ 7DFB 5A 69                        dw      TWO_DROP
 560+ 7DFD 74 6B 8F 69                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 560+ 7E01 AF 70 01 69
 560+ 7E05 E9 6B
 561+ 7E07 4F 68                        dw      EXIT
 562+ 7E09
 563+ 7E09              //  ______________________________________________________________________
 564+ 7E09              //
 565+ 7E09              // sign         n d -- d
 566+ 7E09                              Colon_Def SIGN, "SIGN", is_normal
 566+ 7E09             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 566+ 7E09             >
 566+ 7E09             >Dict_Ptr        defl    $
 566+ 7E09             >
 566+ 7E09             >//              ______________________________________________________________________
 566+ 7E09             >//              Heap part
 566+ 7E09             >
 566+ 7E09             >
 566+ 7E09             >                org     (Heap_Ptr & $1FFF) + $E000
 566+ EBE1             >
 566+ EBE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ EBE1             >Latest_Definition defl  Heap_Ptr
 566+ EBE1             >
 566+ EBE1             >                // dummy db directives used to calculate length of namec
 566+ EBE1 53 49 47 4E >                db      "SIGN"
 566+ EBE5             >len_NFA         defl    $ - temp_NFA
 566+ EBE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ EBE1             >
 566+ EBE1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ EBE2 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 566+ EBE6             >                org     $-1                 // alter last byte of Name just above to set
 566+ EBE5 CE          >                db      {b $} | END_BIT     // msb as name end
 566+ EBE6             >
 566+ EBE6 DA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 566+ EBE8             >Prev_Ptr        defl    Heap_Ptr
 566+ EBE8             >
 566+ EBE8             >mirror_Ptr      defl    $
 566+ EBE8             >
 566+ EBE8 0B 7E       >                dw      Dict_Ptr + 2        // xt
 566+ EBEA             >Heap_Ptr        defl    $ - $E000           // save current HP
 566+ EBEA             >
 566+ EBEA             >Current_HP      defl  $ - $E000             // used to set HP once!
 566+ EBEA             >
 566+ EBEA             >//              ______________________________________________________________________
 566+ EBEA             >//              Dictionary part
 566+ EBEA             >
 566+ EBEA             >                org     Dict_Ptr
 566+ 7E09             >
 566+ 7E09 E8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 566+ 7E0B             >
 566+ 7E0B             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 7E0B CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 7E0E             >
 566+ 7E0E             >
 566+ 7E0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 7E0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 7E0E             >
 566+ 7E0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 7E0E 86 68                        dw      ZLESS
 568+ 7E10 F5 63                        dw      ZBRANCH
 569+ 7E12 08 00                        dw      Sign_Endif - $
 570+ 7E14 A3 63 2D 00                  dw          LIT, 45, HOLD
 570+ 7E18 9C 70
 571+ 7E1A              Sign_Endif:
 572+ 7E1A 4F 68                        dw      EXIT
 573+ 7E1C
 574+ 7E1C              //  ______________________________________________________________________
 575+ 7E1C              //
 576+ 7E1C              // #           d1 -- d2
 577+ 7E1C                              Colon_Def DASH, "#", is_normal
 577+ 7E1C             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 577+ 7E1C             >
 577+ 7E1C             >Dict_Ptr        defl    $
 577+ 7E1C             >
 577+ 7E1C             >//              ______________________________________________________________________
 577+ 7E1C             >//              Heap part
 577+ 7E1C             >
 577+ 7E1C             >
 577+ 7E1C             >                org     (Heap_Ptr & $1FFF) + $E000
 577+ EBEA             >
 577+ EBEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 577+ EBEA             >Latest_Definition defl  Heap_Ptr
 577+ EBEA             >
 577+ EBEA             >                // dummy db directives used to calculate length of namec
 577+ EBEA 23          >                db      "#"
 577+ EBEB             >len_NFA         defl    $ - temp_NFA
 577+ EBEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 577+ EBEA             >
 577+ EBEA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 577+ EBEB 23          >                db      "#"               // name string in 7-bit ascii, but
 577+ EBEC             >                org     $-1                 // alter last byte of Name just above to set
 577+ EBEB A3          >                db      {b $} | END_BIT     // msb as name end
 577+ EBEC             >
 577+ EBEC E1 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 577+ EBEE             >Prev_Ptr        defl    Heap_Ptr
 577+ EBEE             >
 577+ EBEE             >mirror_Ptr      defl    $
 577+ EBEE             >
 577+ EBEE 1E 7E       >                dw      Dict_Ptr + 2        // xt
 577+ EBF0             >Heap_Ptr        defl    $ - $E000           // save current HP
 577+ EBF0             >
 577+ EBF0             >Current_HP      defl  $ - $E000             // used to set HP once!
 577+ EBF0             >
 577+ EBF0             >//              ______________________________________________________________________
 577+ EBF0             >//              Dictionary part
 577+ EBF0             >
 577+ EBF0             >                org     Dict_Ptr
 577+ 7E1C             >
 577+ 7E1C EE 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 577+ 7E1E             >
 577+ 7E1E             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 577+ 7E1E CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 577+ 7E21             >
 577+ 7E21             >
 577+ 7E21             >                endif           ; ok        // for other definitions it "points" the correct handler
 577+ 7E21             >                // Use of "; ok" to suppress "warning[fwdref]"
 577+ 7E21             >
 577+ 7E21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 578+ 7E21 56 6B 8F 69                  dw      BASE, FETCH
 579+ 7E25
 580+ 7E25 59 68                        dw      TO_R                    // >r           ( ud1 )
 581+ 7E27 85 6A 6F 68                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 581+ 7E2B DC 67
 582+ 7E2D 64 68 1E 69                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 582+ 7E31 59 68
 583+ 7E33 DC 67                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 584+ 7E35 64 68                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 585+ 7E37
 586+ 7E37 2C 69                        dw      ROT
 587+ 7E39 A3 63 09 00                  dw      LIT, 9, OVER, LESS
 587+ 7E3D 01 69 0E 6C
 588+ 7E41 F5 63                        dw      ZBRANCH
 589+ 7E43 08 00                        dw      Dash_Endif - $
 590+ 7E45 A3 63 07 00                  dw          LIT, 7, PLUS
 590+ 7E49 A1 68
 591+ 7E4B              Dash_Endif:
 592+ 7E4B
 593+ 7E4B A3 63 30 00                  dw      LIT, 48, PLUS, HOLD
 593+ 7E4F A1 68 9C 70
 594+ 7E53 4F 68                        dw      EXIT
 595+ 7E55
 596+ 7E55              //  ______________________________________________________________________
 597+ 7E55              //
 598+ 7E55              // #s           d1 -- d2
 599+ 7E55                              Colon_Def DASHES, "#S", is_normal
 599+ 7E55             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 599+ 7E55             >
 599+ 7E55             >Dict_Ptr        defl    $
 599+ 7E55             >
 599+ 7E55             >//              ______________________________________________________________________
 599+ 7E55             >//              Heap part
 599+ 7E55             >
 599+ 7E55             >
 599+ 7E55             >                org     (Heap_Ptr & $1FFF) + $E000
 599+ EBF0             >
 599+ EBF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ EBF0             >Latest_Definition defl  Heap_Ptr
 599+ EBF0             >
 599+ EBF0             >                // dummy db directives used to calculate length of namec
 599+ EBF0 23 53       >                db      "#S"
 599+ EBF2             >len_NFA         defl    $ - temp_NFA
 599+ EBF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ EBF0             >
 599+ EBF0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ EBF1 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 599+ EBF3             >                org     $-1                 // alter last byte of Name just above to set
 599+ EBF2 D3          >                db      {b $} | END_BIT     // msb as name end
 599+ EBF3             >
 599+ EBF3 EA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 599+ EBF5             >Prev_Ptr        defl    Heap_Ptr
 599+ EBF5             >
 599+ EBF5             >mirror_Ptr      defl    $
 599+ EBF5             >
 599+ EBF5 57 7E       >                dw      Dict_Ptr + 2        // xt
 599+ EBF7             >Heap_Ptr        defl    $ - $E000           // save current HP
 599+ EBF7             >
 599+ EBF7             >Current_HP      defl  $ - $E000             // used to set HP once!
 599+ EBF7             >
 599+ EBF7             >//              ______________________________________________________________________
 599+ EBF7             >//              Dictionary part
 599+ EBF7             >
 599+ EBF7             >                org     Dict_Ptr
 599+ 7E55             >
 599+ 7E55 F5 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 599+ 7E57             >
 599+ 7E57             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 7E57 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 599+ 7E5A             >
 599+ 7E5A             >
 599+ 7E5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 7E5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 7E5A             >
 599+ 7E5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 7E5A              Dashes_Begin:
 601+ 7E5A 1E 7E 6D 69                  dw      DASH, TWO_DUP
 602+ 7E5E 1E 68 74 68                  dw          OR_OP, ZEQUAL
 603+ 7E62 F5 63                        dw      ZBRANCH
 604+ 7E64 F6 FF                        dw      Dashes_Begin - $
 605+ 7E66 4F 68                        dw      EXIT
 606+ 7E68
 607+ 7E68              //  ______________________________________________________________________
 608+ 7E68              //
 609+ 7E68              // d.r          d n --
 610+ 7E68                              Colon_Def D_DOT_R, "D.R", is_normal
 610+ 7E68             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 610+ 7E68             >
 610+ 7E68             >Dict_Ptr        defl    $
 610+ 7E68             >
 610+ 7E68             >//              ______________________________________________________________________
 610+ 7E68             >//              Heap part
 610+ 7E68             >
 610+ 7E68             >
 610+ 7E68             >                org     (Heap_Ptr & $1FFF) + $E000
 610+ EBF7             >
 610+ EBF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 610+ EBF7             >Latest_Definition defl  Heap_Ptr
 610+ EBF7             >
 610+ EBF7             >                // dummy db directives used to calculate length of namec
 610+ EBF7 44 2E 52    >                db      "D.R"
 610+ EBFA             >len_NFA         defl    $ - temp_NFA
 610+ EBFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 610+ EBF7             >
 610+ EBF7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 610+ EBF8 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 610+ EBFB             >                org     $-1                 // alter last byte of Name just above to set
 610+ EBFA D2          >                db      {b $} | END_BIT     // msb as name end
 610+ EBFB             >
 610+ EBFB F0 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 610+ EBFD             >Prev_Ptr        defl    Heap_Ptr
 610+ EBFD             >
 610+ EBFD             >mirror_Ptr      defl    $
 610+ EBFD             >
 610+ EBFD 6A 7E       >                dw      Dict_Ptr + 2        // xt
 610+ EBFF             >Heap_Ptr        defl    $ - $E000           // save current HP
 610+ EBFF             >
 610+ EBFF             >Current_HP      defl  $ - $E000             // used to set HP once!
 610+ EBFF             >
 610+ EBFF             >//              ______________________________________________________________________
 610+ EBFF             >//              Dictionary part
 610+ EBFF             >
 610+ EBFF             >                org     Dict_Ptr
 610+ 7E68             >
 610+ 7E68 FD 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 610+ 7E6A             >
 610+ 7E6A             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 610+ 7E6A CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 610+ 7E6D             >
 610+ 7E6D             >
 610+ 7E6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 610+ 7E6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 610+ 7E6D             >
 610+ 7E6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 611+ 7E6D 59 68                        dw      TO_R
 612+ 7E6F 15 69 80 76                  dw      TUCK, DABS
 613+ 7E73 EB 7D 57 7E                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 613+ 7E77 2C 69 0B 7E
 613+ 7E7B F8 7D
 614+ 7E7D 64 68                        dw      R_TO
 615+ 7E7F 01 69 E9 6B                  dw      OVER, SUBTRACT, SPACES, TYPE
 615+ 7E83 D4 7D 6C 6F
 616+ 7E87 4F 68                        dw      EXIT
 617+ 7E89
 618+ 7E89              //  ______________________________________________________________________
 619+ 7E89              //
 620+ 7E89              // .r           n1 n2 --
 621+ 7E89                              Colon_Def DOT_R, ".R", is_normal
 621+ 7E89             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 621+ 7E89             >
 621+ 7E89             >Dict_Ptr        defl    $
 621+ 7E89             >
 621+ 7E89             >//              ______________________________________________________________________
 621+ 7E89             >//              Heap part
 621+ 7E89             >
 621+ 7E89             >
 621+ 7E89             >                org     (Heap_Ptr & $1FFF) + $E000
 621+ EBFF             >
 621+ EBFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 621+ EBFF             >Latest_Definition defl  Heap_Ptr
 621+ EBFF             >
 621+ EBFF             >                // dummy db directives used to calculate length of namec
 621+ EBFF 2E 52       >                db      ".R"
 621+ EC01             >len_NFA         defl    $ - temp_NFA
 621+ EC01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 621+ EBFF             >
 621+ EBFF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 621+ EC00 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 621+ EC02             >                org     $-1                 // alter last byte of Name just above to set
 621+ EC01 D2          >                db      {b $} | END_BIT     // msb as name end
 621+ EC02             >
 621+ EC02 F7 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 621+ EC04             >Prev_Ptr        defl    Heap_Ptr
 621+ EC04             >
 621+ EC04             >mirror_Ptr      defl    $
 621+ EC04             >
 621+ EC04 8B 7E       >                dw      Dict_Ptr + 2        // xt
 621+ EC06             >Heap_Ptr        defl    $ - $E000           // save current HP
 621+ EC06             >
 621+ EC06             >Current_HP      defl  $ - $E000             // used to set HP once!
 621+ EC06             >
 621+ EC06             >//              ______________________________________________________________________
 621+ EC06             >//              Dictionary part
 621+ EC06             >
 621+ EC06             >                org     Dict_Ptr
 621+ 7E89             >
 621+ 7E89 04 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 621+ 7E8B             >
 621+ 7E8B             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 621+ 7E8B CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 621+ 7E8E             >
 621+ 7E8E             >
 621+ 7E8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 621+ 7E8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 621+ 7E8E             >
 621+ 7E8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 622+ 7E8E 59 68                        dw      TO_R
 623+ 7E90 DE 6B 64 68                  dw      S_TO_D, R_TO
 624+ 7E94 6A 7E                        dw      D_DOT_R
 625+ 7E96 4F 68                        dw      EXIT
 626+ 7E98
 627+ 7E98              //  ______________________________________________________________________
 628+ 7E98              //
 629+ 7E98              // d.           d --
 630+ 7E98                              Colon_Def D_DOT, "D.", is_normal
 630+ 7E98             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 630+ 7E98             >
 630+ 7E98             >Dict_Ptr        defl    $
 630+ 7E98             >
 630+ 7E98             >//              ______________________________________________________________________
 630+ 7E98             >//              Heap part
 630+ 7E98             >
 630+ 7E98             >
 630+ 7E98             >                org     (Heap_Ptr & $1FFF) + $E000
 630+ EC06             >
 630+ EC06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ EC06             >Latest_Definition defl  Heap_Ptr
 630+ EC06             >
 630+ EC06             >                // dummy db directives used to calculate length of namec
 630+ EC06 44 2E       >                db      "D."
 630+ EC08             >len_NFA         defl    $ - temp_NFA
 630+ EC08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ EC06             >
 630+ EC06 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ EC07 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 630+ EC09             >                org     $-1                 // alter last byte of Name just above to set
 630+ EC08 AE          >                db      {b $} | END_BIT     // msb as name end
 630+ EC09             >
 630+ EC09 FF 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 630+ EC0B             >Prev_Ptr        defl    Heap_Ptr
 630+ EC0B             >
 630+ EC0B             >mirror_Ptr      defl    $
 630+ EC0B             >
 630+ EC0B 9A 7E       >                dw      Dict_Ptr + 2        // xt
 630+ EC0D             >Heap_Ptr        defl    $ - $E000           // save current HP
 630+ EC0D             >
 630+ EC0D             >Current_HP      defl  $ - $E000             // used to set HP once!
 630+ EC0D             >
 630+ EC0D             >//              ______________________________________________________________________
 630+ EC0D             >//              Dictionary part
 630+ EC0D             >
 630+ EC0D             >                org     Dict_Ptr
 630+ 7E98             >
 630+ 7E98 0B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 630+ 7E9A             >
 630+ 7E9A             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 7E9A CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 630+ 7E9D             >
 630+ 7E9D             >
 630+ 7E9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 7E9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 7E9D             >
 630+ 7E9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 7E9D 85 6A 6A 7E                  dw      ZERO, D_DOT_R, SPACE
 631+ 7EA1 73 6C
 632+ 7EA3 4F 68                        dw      EXIT
 633+ 7EA5
 634+ 7EA5              //  ______________________________________________________________________
 635+ 7EA5              //
 636+ 7EA5              // .            n --
 637+ 7EA5                              Colon_Def DOT, ".", is_normal
 637+ 7EA5             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 637+ 7EA5             >
 637+ 7EA5             >Dict_Ptr        defl    $
 637+ 7EA5             >
 637+ 7EA5             >//              ______________________________________________________________________
 637+ 7EA5             >//              Heap part
 637+ 7EA5             >
 637+ 7EA5             >
 637+ 7EA5             >                org     (Heap_Ptr & $1FFF) + $E000
 637+ EC0D             >
 637+ EC0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 637+ EC0D             >Latest_Definition defl  Heap_Ptr
 637+ EC0D             >
 637+ EC0D             >                // dummy db directives used to calculate length of namec
 637+ EC0D 2E          >                db      "."
 637+ EC0E             >len_NFA         defl    $ - temp_NFA
 637+ EC0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 637+ EC0D             >
 637+ EC0D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 637+ EC0E 2E          >                db      "."               // name string in 7-bit ascii, but
 637+ EC0F             >                org     $-1                 // alter last byte of Name just above to set
 637+ EC0E AE          >                db      {b $} | END_BIT     // msb as name end
 637+ EC0F             >
 637+ EC0F 06 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 637+ EC11             >Prev_Ptr        defl    Heap_Ptr
 637+ EC11             >
 637+ EC11             >mirror_Ptr      defl    $
 637+ EC11             >
 637+ EC11 A7 7E       >                dw      Dict_Ptr + 2        // xt
 637+ EC13             >Heap_Ptr        defl    $ - $E000           // save current HP
 637+ EC13             >
 637+ EC13             >Current_HP      defl  $ - $E000             // used to set HP once!
 637+ EC13             >
 637+ EC13             >//              ______________________________________________________________________
 637+ EC13             >//              Dictionary part
 637+ EC13             >
 637+ EC13             >                org     Dict_Ptr
 637+ 7EA5             >
 637+ 7EA5 11 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 637+ 7EA7             >
 637+ 7EA7             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 637+ 7EA7 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 637+ 7EAA             >
 637+ 7EAA             >
 637+ 7EAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 637+ 7EAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 637+ 7EAA             >
 637+ 7EAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 638+ 7EAA DE 6B 9A 7E                  dw      S_TO_D, D_DOT
 639+ 7EAE 4F 68                        dw      EXIT
 640+ 7EB0
 641+ 7EB0              //  ______________________________________________________________________
 642+ 7EB0              //
 643+ 7EB0              // ?            n --
 644+ 7EB0                              Colon_Def QUESTION, "?", is_normal
 644+ 7EB0             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 644+ 7EB0             >
 644+ 7EB0             >Dict_Ptr        defl    $
 644+ 7EB0             >
 644+ 7EB0             >//              ______________________________________________________________________
 644+ 7EB0             >//              Heap part
 644+ 7EB0             >
 644+ 7EB0             >
 644+ 7EB0             >                org     (Heap_Ptr & $1FFF) + $E000
 644+ EC13             >
 644+ EC13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 644+ EC13             >Latest_Definition defl  Heap_Ptr
 644+ EC13             >
 644+ EC13             >                // dummy db directives used to calculate length of namec
 644+ EC13 3F          >                db      "?"
 644+ EC14             >len_NFA         defl    $ - temp_NFA
 644+ EC14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 644+ EC13             >
 644+ EC13 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 644+ EC14 3F          >                db      "?"               // name string in 7-bit ascii, but
 644+ EC15             >                org     $-1                 // alter last byte of Name just above to set
 644+ EC14 BF          >                db      {b $} | END_BIT     // msb as name end
 644+ EC15             >
 644+ EC15 0D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 644+ EC17             >Prev_Ptr        defl    Heap_Ptr
 644+ EC17             >
 644+ EC17             >mirror_Ptr      defl    $
 644+ EC17             >
 644+ EC17 B2 7E       >                dw      Dict_Ptr + 2        // xt
 644+ EC19             >Heap_Ptr        defl    $ - $E000           // save current HP
 644+ EC19             >
 644+ EC19             >Current_HP      defl  $ - $E000             // used to set HP once!
 644+ EC19             >
 644+ EC19             >//              ______________________________________________________________________
 644+ EC19             >//              Dictionary part
 644+ EC19             >
 644+ EC19             >                org     Dict_Ptr
 644+ 7EB0             >
 644+ 7EB0 17 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 644+ 7EB2             >
 644+ 7EB2             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 644+ 7EB2 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 644+ 7EB5             >
 644+ 7EB5             >
 644+ 7EB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 644+ 7EB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 644+ 7EB5             >
 644+ 7EB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 645+ 7EB5 8F 69 A7 7E                  dw      FETCH, DOT
 646+ 7EB9 4F 68                        dw      EXIT
 647+ 7EBB
 648+ 7EBB              //  ______________________________________________________________________
 649+ 7EBB              //
 650+ 7EBB              // u.           u --
 651+ 7EBB                              Colon_Def U_DOT, "U.", is_normal
 651+ 7EBB             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 651+ 7EBB             >
 651+ 7EBB             >Dict_Ptr        defl    $
 651+ 7EBB             >
 651+ 7EBB             >//              ______________________________________________________________________
 651+ 7EBB             >//              Heap part
 651+ 7EBB             >
 651+ 7EBB             >
 651+ 7EBB             >                org     (Heap_Ptr & $1FFF) + $E000
 651+ EC19             >
 651+ EC19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 651+ EC19             >Latest_Definition defl  Heap_Ptr
 651+ EC19             >
 651+ EC19             >                // dummy db directives used to calculate length of namec
 651+ EC19 55 2E       >                db      "U."
 651+ EC1B             >len_NFA         defl    $ - temp_NFA
 651+ EC1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 651+ EC19             >
 651+ EC19 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 651+ EC1A 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 651+ EC1C             >                org     $-1                 // alter last byte of Name just above to set
 651+ EC1B AE          >                db      {b $} | END_BIT     // msb as name end
 651+ EC1C             >
 651+ EC1C 13 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 651+ EC1E             >Prev_Ptr        defl    Heap_Ptr
 651+ EC1E             >
 651+ EC1E             >mirror_Ptr      defl    $
 651+ EC1E             >
 651+ EC1E BD 7E       >                dw      Dict_Ptr + 2        // xt
 651+ EC20             >Heap_Ptr        defl    $ - $E000           // save current HP
 651+ EC20             >
 651+ EC20             >Current_HP      defl  $ - $E000             // used to set HP once!
 651+ EC20             >
 651+ EC20             >//              ______________________________________________________________________
 651+ EC20             >//              Dictionary part
 651+ EC20             >
 651+ EC20             >                org     Dict_Ptr
 651+ 7EBB             >
 651+ 7EBB 1E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 651+ 7EBD             >
 651+ 7EBD             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 651+ 7EBD CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 651+ 7EC0             >
 651+ 7EC0             >
 651+ 7EC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 651+ 7EC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 651+ 7EC0             >
 651+ 7EC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 652+ 7EC0 85 6A 9A 7E                  dw      ZERO, D_DOT
 653+ 7EC4 4F 68                        dw      EXIT
 654+ 7EC6
 655+ 7EC6              //  ______________________________________________________________________
 656+ 7EC6              //
 657+ 7EC6              // words        --
 658+ 7EC6                              Colon_Def WORDS, "WORDS", is_normal
 658+ 7EC6             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 658+ 7EC6             >
 658+ 7EC6             >Dict_Ptr        defl    $
 658+ 7EC6             >
 658+ 7EC6             >//              ______________________________________________________________________
 658+ 7EC6             >//              Heap part
 658+ 7EC6             >
 658+ 7EC6             >
 658+ 7EC6             >                org     (Heap_Ptr & $1FFF) + $E000
 658+ EC20             >
 658+ EC20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 658+ EC20             >Latest_Definition defl  Heap_Ptr
 658+ EC20             >
 658+ EC20             >                // dummy db directives used to calculate length of namec
 658+ EC20 57 4F 52 44 >                db      "WORDS"
 658+ EC24 53          >
 658+ EC25             >len_NFA         defl    $ - temp_NFA
 658+ EC25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 658+ EC20             >
 658+ EC20 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 658+ EC21 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 658+ EC25 53          >
 658+ EC26             >                org     $-1                 // alter last byte of Name just above to set
 658+ EC25 D3          >                db      {b $} | END_BIT     // msb as name end
 658+ EC26             >
 658+ EC26 19 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 658+ EC28             >Prev_Ptr        defl    Heap_Ptr
 658+ EC28             >
 658+ EC28             >mirror_Ptr      defl    $
 658+ EC28             >
 658+ EC28 C8 7E       >                dw      Dict_Ptr + 2        // xt
 658+ EC2A             >Heap_Ptr        defl    $ - $E000           // save current HP
 658+ EC2A             >
 658+ EC2A             >Current_HP      defl  $ - $E000             // used to set HP once!
 658+ EC2A             >
 658+ EC2A             >//              ______________________________________________________________________
 658+ EC2A             >//              Dictionary part
 658+ EC2A             >
 658+ EC2A             >                org     Dict_Ptr
 658+ 7EC6             >
 658+ 7EC6 28 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 658+ 7EC8             >
 658+ 7EC8             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 658+ 7EC8 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 658+ 7ECB             >
 658+ 7ECB             >
 658+ 7ECB             >                endif           ; ok        // for other definitions it "points" the correct handler
 658+ 7ECB             >                // Use of "; ok" to suppress "warning[fwdref]"
 658+ 7ECB             >
 658+ 7ECB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 659+ 7ECB A3 63 80 00                  dw      LIT, 128, OUT, STORE
 659+ 7ECF 32 6B 99 69
 660+ 7ED3 44 6B 8F 69                  dw      CONTEXT, FETCH, FETCH
 660+ 7ED7 8F 69
 661+ 7ED9              Words_Begin:
 662+ 7ED9 E4 6C                        dw          FAR // Q TO HEAP
 663+ 7EDB 25 69 A4 69                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 663+ 7EDF A3 63 1F 00
 663+ 7EE3 0F 68
 664+ 7EE5 32 6B 8F 69                  dw          OUT, FETCH, PLUS
 664+ 7EE9 A1 68
 665+ 7EEB AF 6A 0E 6C                  dw          CL, LESS, ZEQUAL
 665+ 7EEF 74 68
 666+ 7EF1 F5 63                        dw          ZBRANCH
 667+ 7EF3 0A 00                        dw          Words_Endif - $
 668+ 7EF5 B3 65 85 6A                  dw              CR, ZERO, OUT, STORE
 668+ 7EF9 32 6B 99 69
 669+ 7EFD              Words_Endif:
 670+ 7EFD 25 69 50 73                  dw          DUP, ID_DOT
 671+ 7F01 8C 6A 7E 6C                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 671+ 7F05 BA 68 8F 69
 672+ 7F09 25 69 74 68                  dw          DUP, ZEQUAL
 673+ 7F0D AA 66 1E 68                  dw          QTERMINAL, OR_OP
 674+ 7F11 F5 63                        dw      ZBRANCH
 675+ 7F13 C6 FF                        dw      Words_Begin - $
 676+ 7F15 0A 69                        dw      DROP
 677+ 7F17 4F 68                        dw      EXIT
 678+ 7F19
 679+ 7F19              //  ______________________________________________________________________
 680+ 7F19              //
 681+ 7F19              // list         n --
 682+ 7F19                              Colon_Def LIST, "LIST", is_normal
 682+ 7F19             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 682+ 7F19             >
 682+ 7F19             >Dict_Ptr        defl    $
 682+ 7F19             >
 682+ 7F19             >//              ______________________________________________________________________
 682+ 7F19             >//              Heap part
 682+ 7F19             >
 682+ 7F19             >
 682+ 7F19             >                org     (Heap_Ptr & $1FFF) + $E000
 682+ EC2A             >
 682+ EC2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ EC2A             >Latest_Definition defl  Heap_Ptr
 682+ EC2A             >
 682+ EC2A             >                // dummy db directives used to calculate length of namec
 682+ EC2A 4C 49 53 54 >                db      "LIST"
 682+ EC2E             >len_NFA         defl    $ - temp_NFA
 682+ EC2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ EC2A             >
 682+ EC2A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ EC2B 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 682+ EC2F             >                org     $-1                 // alter last byte of Name just above to set
 682+ EC2E D4          >                db      {b $} | END_BIT     // msb as name end
 682+ EC2F             >
 682+ EC2F 20 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 682+ EC31             >Prev_Ptr        defl    Heap_Ptr
 682+ EC31             >
 682+ EC31             >mirror_Ptr      defl    $
 682+ EC31             >
 682+ EC31 1B 7F       >                dw      Dict_Ptr + 2        // xt
 682+ EC33             >Heap_Ptr        defl    $ - $E000           // save current HP
 682+ EC33             >
 682+ EC33             >Current_HP      defl  $ - $E000             // used to set HP once!
 682+ EC33             >
 682+ EC33             >//              ______________________________________________________________________
 682+ EC33             >//              Dictionary part
 682+ EC33             >
 682+ EC33             >                org     Dict_Ptr
 682+ 7F19             >
 682+ 7F19 31 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 682+ 7F1B             >
 682+ 7F1B             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 7F1B CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 7F1E             >
 682+ 7F1E             >
 682+ 7F1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 7F1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 7F1E             >
 682+ 7F1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 7F1E B5 6E B3 65                  dw      DECIMAL, CR
 684+ 7F22 25 69 38 6B                  dw      DUP, SCR, STORE
 684+ 7F26 99 69
 685+ 7F28 09 71                        dw      C_DOT_QUOTE
 686+ 7F2A 05 53 63 72                  db      5, "Scr# "
 686+ 7F2E 23 20
 687+ 7F30 A7 7E                        dw      DOT
 688+ 7F32 C4 6A 85 6A                  dw      LSCR, ZERO, C_DO
 688+ 7F36 32 64
 689+ 7F38              List_Loop:
 690+ 7F38 B3 65                        dw          CR
 691+ 7F3A 38 64 9A 6A                  dw          I, THREE
 692+ 7F3E 8B 7E 73 6C                  dw          DOT_R, SPACE
 693+ 7F42 38 64 38 6B                  dw          I, SCR, FETCH, DOT_LINE
 693+ 7F46 8F 69 7B 77
 694+ 7F4A AA 66                        dw          QTERMINAL
 695+ 7F4C F5 63                        dw          ZBRANCH
 696+ 7F4E 06 00                        dw          List_Endif - $
 697+ 7F50 00 64                        dw              C_LEAVE
 698+ 7F52 06 00                        dw              List_Leave - $
 699+ 7F54              List_Endif:
 700+ 7F54 E0 63                        dw      C_LOOP
 701+ 7F56 E2 FF                        dw      List_Loop - $
 702+ 7F58              List_Leave:
 703+ 7F58 B3 65                        dw      CR
 704+ 7F5A 4F 68                        dw      EXIT
 705+ 7F5C
 706+ 7F5C              //  ______________________________________________________________________
 707+ 7F5C              //
 708+ 7F5C              // index        n1 n2 --
 709+ 7F5C                              Colon_Def INDEX, "INDEX", is_normal
 709+ 7F5C             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 709+ 7F5C             >
 709+ 7F5C             >Dict_Ptr        defl    $
 709+ 7F5C             >
 709+ 7F5C             >//              ______________________________________________________________________
 709+ 7F5C             >//              Heap part
 709+ 7F5C             >
 709+ 7F5C             >
 709+ 7F5C             >                org     (Heap_Ptr & $1FFF) + $E000
 709+ EC33             >
 709+ EC33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 709+ EC33             >Latest_Definition defl  Heap_Ptr
 709+ EC33             >
 709+ EC33             >                // dummy db directives used to calculate length of namec
 709+ EC33 49 4E 44 45 >                db      "INDEX"
 709+ EC37 58          >
 709+ EC38             >len_NFA         defl    $ - temp_NFA
 709+ EC38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 709+ EC33             >
 709+ EC33 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 709+ EC34 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 709+ EC38 58          >
 709+ EC39             >                org     $-1                 // alter last byte of Name just above to set
 709+ EC38 D8          >                db      {b $} | END_BIT     // msb as name end
 709+ EC39             >
 709+ EC39 2A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 709+ EC3B             >Prev_Ptr        defl    Heap_Ptr
 709+ EC3B             >
 709+ EC3B             >mirror_Ptr      defl    $
 709+ EC3B             >
 709+ EC3B 5E 7F       >                dw      Dict_Ptr + 2        // xt
 709+ EC3D             >Heap_Ptr        defl    $ - $E000           // save current HP
 709+ EC3D             >
 709+ EC3D             >Current_HP      defl  $ - $E000             // used to set HP once!
 709+ EC3D             >
 709+ EC3D             >//              ______________________________________________________________________
 709+ EC3D             >//              Dictionary part
 709+ EC3D             >
 709+ EC3D             >                org     Dict_Ptr
 709+ 7F5C             >
 709+ 7F5C 3B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 709+ 7F5E             >
 709+ 7F5E             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 709+ 7F5E CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 709+ 7F61             >
 709+ 7F61             >
 709+ 7F61             >                endif           ; ok        // for other definitions it "points" the correct handler
 709+ 7F61             >                // Use of "; ok" to suppress "warning[fwdref]"
 709+ 7F61             >
 709+ 7F61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 710+ 7F61 BA 68 1E 69                  dw      ONE_PLUS, SWAP, C_DO
 710+ 7F65 32 64
 711+ 7F67              Index_Loop:
 712+ 7F67 B3 65 38 64                  dw          CR, I, THREE
 712+ 7F6B 9A 6A
 713+ 7F6D 8B 7E 73 6C                  dw          DOT_R, SPACE
 714+ 7F71 85 6A 38 64                  dw          ZERO, I, DOT_LINE
 714+ 7F75 7B 77
 715+ 7F77 AA 66                        dw          QTERMINAL
 716+ 7F79 F5 63                        dw          ZBRANCH
 717+ 7F7B 06 00                        dw          Index_Endif - $
 718+ 7F7D 00 64                        dw              C_LEAVE
 719+ 7F7F 06 00                        dw              Index_Leave - $
 720+ 7F81              Index_Endif:
 721+ 7F81 E0 63                        dw      C_LOOP
 722+ 7F83 E4 FF                        dw      Index_Loop - $
 723+ 7F85              Index_Leave:
 724+ 7F85 B3 65                        dw      CR
 725+ 7F87 4F 68                        dw      EXIT
 726+ 7F89
 727+ 7F89              //  ______________________________________________________________________
 728+ 7F89              //
 729+ 7F89              // cls          --
 730+ 7F89                              Colon_Def CLS, "CLS", is_normal
 730+ 7F89             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 730+ 7F89             >
 730+ 7F89             >Dict_Ptr        defl    $
 730+ 7F89             >
 730+ 7F89             >//              ______________________________________________________________________
 730+ 7F89             >//              Heap part
 730+ 7F89             >
 730+ 7F89             >
 730+ 7F89             >                org     (Heap_Ptr & $1FFF) + $E000
 730+ EC3D             >
 730+ EC3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 730+ EC3D             >Latest_Definition defl  Heap_Ptr
 730+ EC3D             >
 730+ EC3D             >                // dummy db directives used to calculate length of namec
 730+ EC3D 43 4C 53    >                db      "CLS"
 730+ EC40             >len_NFA         defl    $ - temp_NFA
 730+ EC40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 730+ EC3D             >
 730+ EC3D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 730+ EC3E 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 730+ EC41             >                org     $-1                 // alter last byte of Name just above to set
 730+ EC40 D3          >                db      {b $} | END_BIT     // msb as name end
 730+ EC41             >
 730+ EC41 33 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 730+ EC43             >Prev_Ptr        defl    Heap_Ptr
 730+ EC43             >
 730+ EC43             >mirror_Ptr      defl    $
 730+ EC43             >
 730+ EC43 8B 7F       >                dw      Dict_Ptr + 2        // xt
 730+ EC45             >Heap_Ptr        defl    $ - $E000           // save current HP
 730+ EC45             >
 730+ EC45             >Current_HP      defl  $ - $E000             // used to set HP once!
 730+ EC45             >
 730+ EC45             >//              ______________________________________________________________________
 730+ EC45             >//              Dictionary part
 730+ EC45             >
 730+ EC45             >                org     Dict_Ptr
 730+ 7F89             >
 730+ 7F89 43 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 730+ 7F8B             >
 730+ 7F8B             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 730+ 7F8B CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 730+ 7F8E             >
 730+ 7F8E             >
 730+ 7F8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 730+ 7F8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 730+ 7F8E             >
 730+ 7F8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 731+ 7F8E A3 63 0E 00                  dw      LIT, $0E, EMITC
 731+ 7F92 9F 65
 732+ 7F94 4F 68                        dw      EXIT
 733+ 7F96
 734+ 7F96              //  ______________________________________________________________________
 735+ 7F96              //
 736+ 7F96              // splash       --
 737+ 7F96              //              Colon_Def SPLASH, "SPLASH", is_normal
 738+ 7F96              //              dw      CLS
 739+ 7F96              //              dw      C_DOT_QUOTE
 740+ 7F96              //              db      87
 741+ 7F96              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 742+ 7F96              //              db      "Heap Vocabulary - build 20240616", 13  // 33
 743+ 7F96              //              db      "1990-2024 Matteo Vitturi", 13        // 25
 744+ 7F96              //              dw      EXIT
 745+ 7F96
 746+ 7F96              //  ______________________________________________________________________
 747+ 7F96              //
 748+ 7F96              // splash       --
 749+ 7F96                              Colon_Def SPLASH, "SPLASH", is_normal
 749+ 7F96             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 749+ 7F96             >
 749+ 7F96             >Dict_Ptr        defl    $
 749+ 7F96             >
 749+ 7F96             >//              ______________________________________________________________________
 749+ 7F96             >//              Heap part
 749+ 7F96             >
 749+ 7F96             >
 749+ 7F96             >                org     (Heap_Ptr & $1FFF) + $E000
 749+ EC45             >
 749+ EC45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 749+ EC45             >Latest_Definition defl  Heap_Ptr
 749+ EC45             >
 749+ EC45             >                // dummy db directives used to calculate length of namec
 749+ EC45 53 50 4C 41 >                db      "SPLASH"
 749+ EC49 53 48       >
 749+ EC4B             >len_NFA         defl    $ - temp_NFA
 749+ EC4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 749+ EC45             >
 749+ EC45 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 749+ EC46 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 749+ EC4A 53 48       >
 749+ EC4C             >                org     $-1                 // alter last byte of Name just above to set
 749+ EC4B C8          >                db      {b $} | END_BIT     // msb as name end
 749+ EC4C             >
 749+ EC4C 3D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 749+ EC4E             >Prev_Ptr        defl    Heap_Ptr
 749+ EC4E             >
 749+ EC4E             >mirror_Ptr      defl    $
 749+ EC4E             >
 749+ EC4E 98 7F       >                dw      Dict_Ptr + 2        // xt
 749+ EC50             >Heap_Ptr        defl    $ - $E000           // save current HP
 749+ EC50             >
 749+ EC50             >Current_HP      defl  $ - $E000             // used to set HP once!
 749+ EC50             >
 749+ EC50             >//              ______________________________________________________________________
 749+ EC50             >//              Dictionary part
 749+ EC50             >
 749+ EC50             >                org     Dict_Ptr
 749+ 7F96             >
 749+ 7F96 4E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 749+ 7F98             >
 749+ 7F98             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 749+ 7F98 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 749+ 7F9B             >
 749+ 7F9B             >
 749+ 7F9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 749+ 7F9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 749+ 7F9B             >
 749+ 7F9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 750+ 7F9B 8B 7F                        dw      CLS
 751+ 7F9D A3 63 02 00                  dw      LIT, Splash_Ptr
 752+ 7FA1 E4 6C                        dw      FAR
 753+ 7FA3 18 6F 6C 6F                  dw      COUNT, TYPE
 754+ 7FA7 4F 68                        dw      EXIT
 755+ 7FA9
 756+ 7FA9              //  ______________________________________________________________________
 757+ 7FA9              //
 758+ 7FA9              // video        --
 759+ 7FA9                              Colon_Def VIDEO, "VIDEO", is_normal
 759+ 7FA9             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 759+ 7FA9             >
 759+ 7FA9             >Dict_Ptr        defl    $
 759+ 7FA9             >
 759+ 7FA9             >//              ______________________________________________________________________
 759+ 7FA9             >//              Heap part
 759+ 7FA9             >
 759+ 7FA9             >
 759+ 7FA9             >                org     (Heap_Ptr & $1FFF) + $E000
 759+ EC50             >
 759+ EC50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 759+ EC50             >Latest_Definition defl  Heap_Ptr
 759+ EC50             >
 759+ EC50             >                // dummy db directives used to calculate length of namec
 759+ EC50 56 49 44 45 >                db      "VIDEO"
 759+ EC54 4F          >
 759+ EC55             >len_NFA         defl    $ - temp_NFA
 759+ EC55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 759+ EC50             >
 759+ EC50 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 759+ EC51 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 759+ EC55 4F          >
 759+ EC56             >                org     $-1                 // alter last byte of Name just above to set
 759+ EC55 CF          >                db      {b $} | END_BIT     // msb as name end
 759+ EC56             >
 759+ EC56 45 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 759+ EC58             >Prev_Ptr        defl    Heap_Ptr
 759+ EC58             >
 759+ EC58             >mirror_Ptr      defl    $
 759+ EC58             >
 759+ EC58 AB 7F       >                dw      Dict_Ptr + 2        // xt
 759+ EC5A             >Heap_Ptr        defl    $ - $E000           // save current HP
 759+ EC5A             >
 759+ EC5A             >Current_HP      defl  $ - $E000             // used to set HP once!
 759+ EC5A             >
 759+ EC5A             >//              ______________________________________________________________________
 759+ EC5A             >//              Dictionary part
 759+ EC5A             >
 759+ EC5A             >                org     Dict_Ptr
 759+ 7FA9             >
 759+ 7FA9 58 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 759+ 7FAB             >
 759+ 7FAB             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 759+ 7FAB CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 759+ 7FAE             >
 759+ 7FAE             >
 759+ 7FAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 759+ 7FAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 759+ 7FAE             >
 759+ 7FAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 760+ 7FAE 93 6A 25 69                  dw      TWO, DUP, DEVICE, STORE
 760+ 7FB2 B0 77 99 69
 761+ 7FB6 BE 66                        dw      SELECT
 762+ 7FB8 4F 68                        dw      EXIT
 763+ 7FBA
 764+ 7FBA              //  ______________________________________________________________________
 765+ 7FBA              //
 766+ 7FBA              // autoexec     --
 767+ 7FBA              // this word is called the first time the Forth system boot to
 768+ 7FBA              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 769+ 7FBA                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 769+ 7FBA             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 769+ 7FBA             >
 769+ 7FBA             >Dict_Ptr        defl    $
 769+ 7FBA             >
 769+ 7FBA             >//              ______________________________________________________________________
 769+ 7FBA             >//              Heap part
 769+ 7FBA             >
 769+ 7FBA             >
 769+ 7FBA             >                org     (Heap_Ptr & $1FFF) + $E000
 769+ EC5A             >
 769+ EC5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 769+ EC5A             >Latest_Definition defl  Heap_Ptr
 769+ EC5A             >
 769+ EC5A             >                // dummy db directives used to calculate length of namec
 769+ EC5A 41 55 54 4F >                db      "AUTOEXEC"
 769+ EC5E 45 58 45 43 >
 769+ EC62             >len_NFA         defl    $ - temp_NFA
 769+ EC62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 769+ EC5A             >
 769+ EC5A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 769+ EC5B 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 769+ EC5F 45 58 45 43 >
 769+ EC63             >                org     $-1                 // alter last byte of Name just above to set
 769+ EC62 C3          >                db      {b $} | END_BIT     // msb as name end
 769+ EC63             >
 769+ EC63 50 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 769+ EC65             >Prev_Ptr        defl    Heap_Ptr
 769+ EC65             >
 769+ EC65             >mirror_Ptr      defl    $
 769+ EC65             >
 769+ EC65 BC 7F       >                dw      Dict_Ptr + 2        // xt
 769+ EC67             >Heap_Ptr        defl    $ - $E000           // save current HP
 769+ EC67             >
 769+ EC67             >Current_HP      defl  $ - $E000             // used to set HP once!
 769+ EC67             >
 769+ EC67             >//              ______________________________________________________________________
 769+ EC67             >//              Dictionary part
 769+ EC67             >
 769+ EC67             >                org     Dict_Ptr
 769+ 7FBA             >
 769+ 7FBA 65 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 769+ 7FBC             >
 769+ 7FBC             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 769+ 7FBC CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 769+ 7FBF             >
 769+ 7FBF             >
 769+ 7FBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 769+ 7FBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 769+ 7FBF             >
 769+ 7FBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 770+ 7FBF A3 63 0B 00                  dw      LIT, 11
 771+ 7FC3 A3 63 4C 6A                  dw      LIT, NOOP
 772+ 7FC7 A3 63 BF 75                  dw      LIT, Autoexec_Ptr
 773+ 7FCB 99 69                        dw      STORE
 774+ 7FCD C1 7C                        dw      LOAD
 775+ 7FCF 66 75                        dw      QUIT
 776+ 7FD1 4F 68                        dw      EXIT
 777+ 7FD3
 778+ 7FD3
 779+ 7FD3              //  ______________________________________________________________________
 780+ 7FD3              //
 781+ 7FD3              // bye     --
 782+ 7FD3              //
 783+ 7FD3                              Colon_Def BYE, "BYE", is_normal
 783+ 7FD3             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 783+ 7FD3             >
 783+ 7FD3             >Dict_Ptr        defl    $
 783+ 7FD3             >
 783+ 7FD3             >//              ______________________________________________________________________
 783+ 7FD3             >//              Heap part
 783+ 7FD3             >
 783+ 7FD3             >
 783+ 7FD3             >                org     (Heap_Ptr & $1FFF) + $E000
 783+ EC67             >
 783+ EC67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 783+ EC67             >Latest_Definition defl  Heap_Ptr
 783+ EC67             >
 783+ EC67             >                // dummy db directives used to calculate length of namec
 783+ EC67 42 59 45    >                db      "BYE"
 783+ EC6A             >len_NFA         defl    $ - temp_NFA
 783+ EC6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 783+ EC67             >
 783+ EC67 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 783+ EC68 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 783+ EC6B             >                org     $-1                 // alter last byte of Name just above to set
 783+ EC6A C5          >                db      {b $} | END_BIT     // msb as name end
 783+ EC6B             >
 783+ EC6B 5A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 783+ EC6D             >Prev_Ptr        defl    Heap_Ptr
 783+ EC6D             >
 783+ EC6D             >mirror_Ptr      defl    $
 783+ EC6D             >
 783+ EC6D D5 7F       >                dw      Dict_Ptr + 2        // xt
 783+ EC6F             >Heap_Ptr        defl    $ - $E000           // save current HP
 783+ EC6F             >
 783+ EC6F             >Current_HP      defl  $ - $E000             // used to set HP once!
 783+ EC6F             >
 783+ EC6F             >//              ______________________________________________________________________
 783+ EC6F             >//              Dictionary part
 783+ EC6F             >
 783+ EC6F             >                org     Dict_Ptr
 783+ 7FD3             >
 783+ 7FD3 6D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 783+ 7FD5             >
 783+ 7FD5             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 783+ 7FD5 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 783+ 7FD8             >
 783+ 7FD8             >
 783+ 7FD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 783+ 7FD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 783+ 7FD8             >
 783+ 7FD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 784+ 7FD8 CB 79                        dw      FLUSH
 785+ 7FDA 19 79                        dw      EMPTY_BUFFERS
 786+ 7FDC 05 78 8F 69                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 786+ 7FE0 F8 66 0A 69
 787+ 7FE4 85 6A CB 6A                  dw      ZERO, PLUS_ORIGIN
 788+ 7FE8 45 76                        dw      BASIC
 789+ 7FEA
 790+ 7FEA              //  ______________________________________________________________________
 791+ 7FEA              //
 792+ 7FEA              // invv     --
 793+ 7FEA              //
 794+ 7FEA              //              Colon_Def INVV, "INVV", is_normal
 795+ 7FEA              //              dw      LIT, 20, EMITC, ONE, EMITC
 796+ 7FEA              //              dw      EXIT
 797+ 7FEA
 798+ 7FEA              //  ______________________________________________________________________
 799+ 7FEA              //
 800+ 7FEA              // truv     --
 801+ 7FEA              //
 802+ 7FEA              //              Colon_Def TRUV, "TRUV", is_normal
 803+ 7FEA              //              dw      LIT, 20, EMITC, ZERO, EMITC
 804+ 7FEA              //              dw      EXIT
 805+ 7FEA
 806+ 7FEA              //  ______________________________________________________________________
 807+ 7FEA              //
 808+ 7FEA              // mark     --
 809+ 7FEA              //
 810+ 7FEA              //              Colon_Def MARK, "MARK", is_normal
 811+ 7FEA              //              dw      INVV, TYPE, TRUV
 812+ 7FEA              //              dw      EXIT
 813+ 7FEA
 814+ 7FEA              //  ______________________________________________________________________
 815+ 7FEA              //
 816+ 7FEA              // back     --
 817+ 7FEA              //
 818+ 7FEA                              Colon_Def BACK, "BACK", is_normal
 818+ 7FEA             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 818+ 7FEA             >
 818+ 7FEA             >Dict_Ptr        defl    $
 818+ 7FEA             >
 818+ 7FEA             >//              ______________________________________________________________________
 818+ 7FEA             >//              Heap part
 818+ 7FEA             >
 818+ 7FEA             >
 818+ 7FEA             >                org     (Heap_Ptr & $1FFF) + $E000
 818+ EC6F             >
 818+ EC6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 818+ EC6F             >Latest_Definition defl  Heap_Ptr
 818+ EC6F             >
 818+ EC6F             >                // dummy db directives used to calculate length of namec
 818+ EC6F 42 41 43 4B >                db      "BACK"
 818+ EC73             >len_NFA         defl    $ - temp_NFA
 818+ EC73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 818+ EC6F             >
 818+ EC6F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 818+ EC70 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 818+ EC74             >                org     $-1                 // alter last byte of Name just above to set
 818+ EC73 CB          >                db      {b $} | END_BIT     // msb as name end
 818+ EC74             >
 818+ EC74 67 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 818+ EC76             >Prev_Ptr        defl    Heap_Ptr
 818+ EC76             >
 818+ EC76             >mirror_Ptr      defl    $
 818+ EC76             >
 818+ EC76 EC 7F       >                dw      Dict_Ptr + 2        // xt
 818+ EC78             >Heap_Ptr        defl    $ - $E000           // save current HP
 818+ EC78             >
 818+ EC78             >Current_HP      defl  $ - $E000             // used to set HP once!
 818+ EC78             >
 818+ EC78             >//              ______________________________________________________________________
 818+ EC78             >//              Dictionary part
 818+ EC78             >
 818+ EC78             >                org     Dict_Ptr
 818+ 7FEA             >
 818+ 7FEA 76 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 818+ 7FEC             >
 818+ 7FEC             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 818+ 7FEC CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 818+ 7FEF             >
 818+ 7FEF             >
 818+ 7FEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 818+ 7FEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 818+ 7FEF             >
 818+ 7FEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 819+ 7FEF AA 6B E9 6B                  dw      HERE, SUBTRACT, COMMA
 819+ 7FF3 C0 6B
 820+ 7FF5 4F 68                        dw      EXIT
 821+ 7FF7
 822+ 7FF7              //  ______________________________________________________________________
 823+ 7FF7              //
 824+ 7FF7              // if          ( -- a 2 ) \ compile-time
 825+ 7FF7              // IF ... THEN
 826+ 7FF7              // IF ... ELSE ... ENDIF
 827+ 7FF7                              Colon_Def IF, "IF", is_immediate
 827+ 7FF7             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 827+ 7FF7             >
 827+ 7FF7             >Dict_Ptr        defl    $
 827+ 7FF7             >
 827+ 7FF7             >//              ______________________________________________________________________
 827+ 7FF7             >//              Heap part
 827+ 7FF7             >
 827+ 7FF7             >
 827+ 7FF7             >                org     (Heap_Ptr & $1FFF) + $E000
 827+ EC78             >
 827+ EC78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 827+ EC78             >Latest_Definition defl  Heap_Ptr
 827+ EC78             >
 827+ EC78             >                // dummy db directives used to calculate length of namec
 827+ EC78 49 46       >                db      "IF"
 827+ EC7A             >len_NFA         defl    $ - temp_NFA
 827+ EC7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 827+ EC78             >
 827+ EC78 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 827+ EC79 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 827+ EC7B             >                org     $-1                 // alter last byte of Name just above to set
 827+ EC7A C6          >                db      {b $} | END_BIT     // msb as name end
 827+ EC7B             >
 827+ EC7B 6F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 827+ EC7D             >Prev_Ptr        defl    Heap_Ptr
 827+ EC7D             >
 827+ EC7D             >mirror_Ptr      defl    $
 827+ EC7D             >
 827+ EC7D F9 7F       >                dw      Dict_Ptr + 2        // xt
 827+ EC7F             >Heap_Ptr        defl    $ - $E000           // save current HP
 827+ EC7F             >
 827+ EC7F             >Current_HP      defl  $ - $E000             // used to set HP once!
 827+ EC7F             >
 827+ EC7F             >//              ______________________________________________________________________
 827+ EC7F             >//              Dictionary part
 827+ EC7F             >
 827+ EC7F             >                org     Dict_Ptr
 827+ 7FF7             >
 827+ 7FF7 7D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 827+ 7FF9             >
 827+ 7FF9             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 827+ 7FF9 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 827+ 7FFC             >
 827+ 7FFC             >
 827+ 7FFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 827+ 7FFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 827+ 7FFC             >
 827+ 7FFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 828+ 7FFC 4E 6E F5 63                  dw      COMPILE, ZBRANCH
 829+ 8000 AA 6B 85 6A                  dw      HERE, ZERO, COMMA
 829+ 8004 C0 6B
 830+ 8006 93 6A                        dw      TWO
 831+ 8008 4F 68                        dw      EXIT
 832+ 800A
 833+ 800A              //  ______________________________________________________________________
 834+ 800A              //
 835+ 800A              // then        ( a 2 -- ) \ compile-time
 836+ 800A              //
 837+ 800A                              Colon_Def THEN, "THEN", is_immediate
 837+ 800A             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 837+ 800A             >
 837+ 800A             >Dict_Ptr        defl    $
 837+ 800A             >
 837+ 800A             >//              ______________________________________________________________________
 837+ 800A             >//              Heap part
 837+ 800A             >
 837+ 800A             >
 837+ 800A             >                org     (Heap_Ptr & $1FFF) + $E000
 837+ EC7F             >
 837+ EC7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 837+ EC7F             >Latest_Definition defl  Heap_Ptr
 837+ EC7F             >
 837+ EC7F             >                // dummy db directives used to calculate length of namec
 837+ EC7F 54 48 45 4E >                db      "THEN"
 837+ EC83             >len_NFA         defl    $ - temp_NFA
 837+ EC83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 837+ EC7F             >
 837+ EC7F C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 837+ EC80 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 837+ EC84             >                org     $-1                 // alter last byte of Name just above to set
 837+ EC83 CE          >                db      {b $} | END_BIT     // msb as name end
 837+ EC84             >
 837+ EC84 78 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 837+ EC86             >Prev_Ptr        defl    Heap_Ptr
 837+ EC86             >
 837+ EC86             >mirror_Ptr      defl    $
 837+ EC86             >
 837+ EC86 0C 80       >                dw      Dict_Ptr + 2        // xt
 837+ EC88             >Heap_Ptr        defl    $ - $E000           // save current HP
 837+ EC88             >
 837+ EC88             >Current_HP      defl  $ - $E000             // used to set HP once!
 837+ EC88             >
 837+ EC88             >//              ______________________________________________________________________
 837+ EC88             >//              Dictionary part
 837+ EC88             >
 837+ EC88             >                org     Dict_Ptr
 837+ 800A             >
 837+ 800A 86 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 837+ 800C             >
 837+ 800C             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 837+ 800C CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 837+ 800F             >
 837+ 800F             >
 837+ 800F             >                endif           ; ok        // for other definitions it "points" the correct handler
 837+ 800F             >                // Use of "; ok" to suppress "warning[fwdref]"
 837+ 800F             >
 837+ 800F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 838+ 800F F3 6D                        dw      QCOMP
 839+ 8011 93 6A 17 6E                  dw      TWO, QPAIRS
 840+ 8015 AA 6B 01 69                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 840+ 8019 E9 6B 1E 69
 840+ 801D 99 69
 841+ 801F 4F 68                        dw      EXIT
 842+ 8021
 843+ 8021              //  ______________________________________________________________________
 844+ 8021              //
 845+ 8021              // endif       ( a 2 -- ) \ compile-time
 846+ 8021              //
 847+ 8021                              Colon_Def ENDIF, "ENDIF", is_immediate
 847+ 8021             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 847+ 8021             >
 847+ 8021             >Dict_Ptr        defl    $
 847+ 8021             >
 847+ 8021             >//              ______________________________________________________________________
 847+ 8021             >//              Heap part
 847+ 8021             >
 847+ 8021             >
 847+ 8021             >                org     (Heap_Ptr & $1FFF) + $E000
 847+ EC88             >
 847+ EC88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 847+ EC88             >Latest_Definition defl  Heap_Ptr
 847+ EC88             >
 847+ EC88             >                // dummy db directives used to calculate length of namec
 847+ EC88 45 4E 44 49 >                db      "ENDIF"
 847+ EC8C 46          >
 847+ EC8D             >len_NFA         defl    $ - temp_NFA
 847+ EC8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 847+ EC88             >
 847+ EC88 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 847+ EC89 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 847+ EC8D 46          >
 847+ EC8E             >                org     $-1                 // alter last byte of Name just above to set
 847+ EC8D C6          >                db      {b $} | END_BIT     // msb as name end
 847+ EC8E             >
 847+ EC8E 7F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 847+ EC90             >Prev_Ptr        defl    Heap_Ptr
 847+ EC90             >
 847+ EC90             >mirror_Ptr      defl    $
 847+ EC90             >
 847+ EC90 23 80       >                dw      Dict_Ptr + 2        // xt
 847+ EC92             >Heap_Ptr        defl    $ - $E000           // save current HP
 847+ EC92             >
 847+ EC92             >Current_HP      defl  $ - $E000             // used to set HP once!
 847+ EC92             >
 847+ EC92             >//              ______________________________________________________________________
 847+ EC92             >//              Dictionary part
 847+ EC92             >
 847+ EC92             >                org     Dict_Ptr
 847+ 8021             >
 847+ 8021 90 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 847+ 8023             >
 847+ 8023             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 847+ 8023 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 847+ 8026             >
 847+ 8026             >
 847+ 8026             >                endif           ; ok        // for other definitions it "points" the correct handler
 847+ 8026             >                // Use of "; ok" to suppress "warning[fwdref]"
 847+ 8026             >
 847+ 8026             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 848+ 8026 0C 80                        dw      THEN
 849+ 8028 4F 68                        dw      EXIT
 850+ 802A
 851+ 802A              //  ______________________________________________________________________
 852+ 802A              //
 853+ 802A              // else        ( a1 2 -- a2 2 ) \ compile-time
 854+ 802A              //
 855+ 802A                              Colon_Def ELSE, "ELSE", is_immediate
 855+ 802A             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 855+ 802A             >
 855+ 802A             >Dict_Ptr        defl    $
 855+ 802A             >
 855+ 802A             >//              ______________________________________________________________________
 855+ 802A             >//              Heap part
 855+ 802A             >
 855+ 802A             >
 855+ 802A             >                org     (Heap_Ptr & $1FFF) + $E000
 855+ EC92             >
 855+ EC92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ EC92             >Latest_Definition defl  Heap_Ptr
 855+ EC92             >
 855+ EC92             >                // dummy db directives used to calculate length of namec
 855+ EC92 45 4C 53 45 >                db      "ELSE"
 855+ EC96             >len_NFA         defl    $ - temp_NFA
 855+ EC96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ EC92             >
 855+ EC92 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ EC93 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 855+ EC97             >                org     $-1                 // alter last byte of Name just above to set
 855+ EC96 C5          >                db      {b $} | END_BIT     // msb as name end
 855+ EC97             >
 855+ EC97 88 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 855+ EC99             >Prev_Ptr        defl    Heap_Ptr
 855+ EC99             >
 855+ EC99             >mirror_Ptr      defl    $
 855+ EC99             >
 855+ EC99 2C 80       >                dw      Dict_Ptr + 2        // xt
 855+ EC9B             >Heap_Ptr        defl    $ - $E000           // save current HP
 855+ EC9B             >
 855+ EC9B             >Current_HP      defl  $ - $E000             // used to set HP once!
 855+ EC9B             >
 855+ EC9B             >//              ______________________________________________________________________
 855+ EC9B             >//              Dictionary part
 855+ EC9B             >
 855+ EC9B             >                org     Dict_Ptr
 855+ 802A             >
 855+ 802A 99 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 855+ 802C             >
 855+ 802C             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 802C CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 855+ 802F             >
 855+ 802F             >
 855+ 802F             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 802F             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 802F             >
 855+ 802F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 802F F3 6D                        dw      QCOMP
 857+ 8031 93 6A 17 6E                  dw      TWO, QPAIRS
 858+ 8035 4E 6E E8 63                  dw      COMPILE, BRANCH
 859+ 8039 AA 6B 85 6A                  dw      HERE, ZERO, COMMA
 859+ 803D C0 6B
 860+ 803F 1E 69 93 6A                  dw      SWAP, TWO, THEN
 860+ 8043 0C 80
 861+ 8045 93 6A                        dw      TWO
 862+ 8047 4F 68                        dw      EXIT
 863+ 8049
 864+ 8049              //  ______________________________________________________________________
 865+ 8049              //
 866+ 8049              // begin        ( -- a 1 ) \ compile-time
 867+ 8049              // BEGIN ... AGAIN
 868+ 8049              // BEGIN ... f UNTIL
 869+ 8049              // BEGIN ... f WHILE ... REPEAT
 870+ 8049                              Colon_Def BEGIN, "BEGIN", is_immediate
 870+ 8049             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 870+ 8049             >
 870+ 8049             >Dict_Ptr        defl    $
 870+ 8049             >
 870+ 8049             >//              ______________________________________________________________________
 870+ 8049             >//              Heap part
 870+ 8049             >
 870+ 8049             >
 870+ 8049             >                org     (Heap_Ptr & $1FFF) + $E000
 870+ EC9B             >
 870+ EC9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 870+ EC9B             >Latest_Definition defl  Heap_Ptr
 870+ EC9B             >
 870+ EC9B             >                // dummy db directives used to calculate length of namec
 870+ EC9B 42 45 47 49 >                db      "BEGIN"
 870+ EC9F 4E          >
 870+ ECA0             >len_NFA         defl    $ - temp_NFA
 870+ ECA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 870+ EC9B             >
 870+ EC9B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 870+ EC9C 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 870+ ECA0 4E          >
 870+ ECA1             >                org     $-1                 // alter last byte of Name just above to set
 870+ ECA0 CE          >                db      {b $} | END_BIT     // msb as name end
 870+ ECA1             >
 870+ ECA1 92 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 870+ ECA3             >Prev_Ptr        defl    Heap_Ptr
 870+ ECA3             >
 870+ ECA3             >mirror_Ptr      defl    $
 870+ ECA3             >
 870+ ECA3 4B 80       >                dw      Dict_Ptr + 2        // xt
 870+ ECA5             >Heap_Ptr        defl    $ - $E000           // save current HP
 870+ ECA5             >
 870+ ECA5             >Current_HP      defl  $ - $E000             // used to set HP once!
 870+ ECA5             >
 870+ ECA5             >//              ______________________________________________________________________
 870+ ECA5             >//              Dictionary part
 870+ ECA5             >
 870+ ECA5             >                org     Dict_Ptr
 870+ 8049             >
 870+ 8049 A3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 870+ 804B             >
 870+ 804B             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 870+ 804B CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 870+ 804E             >
 870+ 804E             >
 870+ 804E             >                endif           ; ok        // for other definitions it "points" the correct handler
 870+ 804E             >                // Use of "; ok" to suppress "warning[fwdref]"
 870+ 804E             >
 870+ 804E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 871+ 804E F3 6D                        dw      QCOMP
 872+ 8050 AA 6B                        dw      HERE
 873+ 8052 93 6A                        dw      TWO
 874+ 8054 4F 68                        dw      EXIT
 875+ 8056
 876+ 8056              //  ______________________________________________________________________
 877+ 8056              //
 878+ 8056              // again        ( a 1 -- ) \ compile-time
 879+ 8056                              Colon_Def AGAIN, "AGAIN", is_immediate
 879+ 8056             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 879+ 8056             >
 879+ 8056             >Dict_Ptr        defl    $
 879+ 8056             >
 879+ 8056             >//              ______________________________________________________________________
 879+ 8056             >//              Heap part
 879+ 8056             >
 879+ 8056             >
 879+ 8056             >                org     (Heap_Ptr & $1FFF) + $E000
 879+ ECA5             >
 879+ ECA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ ECA5             >Latest_Definition defl  Heap_Ptr
 879+ ECA5             >
 879+ ECA5             >                // dummy db directives used to calculate length of namec
 879+ ECA5 41 47 41 49 >                db      "AGAIN"
 879+ ECA9 4E          >
 879+ ECAA             >len_NFA         defl    $ - temp_NFA
 879+ ECAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ ECA5             >
 879+ ECA5 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ ECA6 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 879+ ECAA 4E          >
 879+ ECAB             >                org     $-1                 // alter last byte of Name just above to set
 879+ ECAA CE          >                db      {b $} | END_BIT     // msb as name end
 879+ ECAB             >
 879+ ECAB 9B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 879+ ECAD             >Prev_Ptr        defl    Heap_Ptr
 879+ ECAD             >
 879+ ECAD             >mirror_Ptr      defl    $
 879+ ECAD             >
 879+ ECAD 58 80       >                dw      Dict_Ptr + 2        // xt
 879+ ECAF             >Heap_Ptr        defl    $ - $E000           // save current HP
 879+ ECAF             >
 879+ ECAF             >Current_HP      defl  $ - $E000             // used to set HP once!
 879+ ECAF             >
 879+ ECAF             >//              ______________________________________________________________________
 879+ ECAF             >//              Dictionary part
 879+ ECAF             >
 879+ ECAF             >                org     Dict_Ptr
 879+ 8056             >
 879+ 8056 AD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 879+ 8058             >
 879+ 8058             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 8058 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 879+ 805B             >
 879+ 805B             >
 879+ 805B             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 805B             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 805B             >
 879+ 805B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 805B F3 6D                        dw      QCOMP
 881+ 805D 93 6A 17 6E                  dw      TWO, QPAIRS
 882+ 8061 4E 6E E8 63                  dw      COMPILE, BRANCH
 883+ 8065 EC 7F                        dw      BACK
 884+ 8067 4F 68                        dw      EXIT
 885+ 8069
 886+ 8069              //  ______________________________________________________________________
 887+ 8069              //
 888+ 8069              // until        ( a 1 -- ) \ compile-time
 889+ 8069                              Colon_Def UNTIL, "UNTIL", is_immediate
 889+ 8069             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 889+ 8069             >
 889+ 8069             >Dict_Ptr        defl    $
 889+ 8069             >
 889+ 8069             >//              ______________________________________________________________________
 889+ 8069             >//              Heap part
 889+ 8069             >
 889+ 8069             >
 889+ 8069             >                org     (Heap_Ptr & $1FFF) + $E000
 889+ ECAF             >
 889+ ECAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 889+ ECAF             >Latest_Definition defl  Heap_Ptr
 889+ ECAF             >
 889+ ECAF             >                // dummy db directives used to calculate length of namec
 889+ ECAF 55 4E 54 49 >                db      "UNTIL"
 889+ ECB3 4C          >
 889+ ECB4             >len_NFA         defl    $ - temp_NFA
 889+ ECB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 889+ ECAF             >
 889+ ECAF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 889+ ECB0 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 889+ ECB4 4C          >
 889+ ECB5             >                org     $-1                 // alter last byte of Name just above to set
 889+ ECB4 CC          >                db      {b $} | END_BIT     // msb as name end
 889+ ECB5             >
 889+ ECB5 A5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 889+ ECB7             >Prev_Ptr        defl    Heap_Ptr
 889+ ECB7             >
 889+ ECB7             >mirror_Ptr      defl    $
 889+ ECB7             >
 889+ ECB7 6B 80       >                dw      Dict_Ptr + 2        // xt
 889+ ECB9             >Heap_Ptr        defl    $ - $E000           // save current HP
 889+ ECB9             >
 889+ ECB9             >Current_HP      defl  $ - $E000             // used to set HP once!
 889+ ECB9             >
 889+ ECB9             >//              ______________________________________________________________________
 889+ ECB9             >//              Dictionary part
 889+ ECB9             >
 889+ ECB9             >                org     Dict_Ptr
 889+ 8069             >
 889+ 8069 B7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 889+ 806B             >
 889+ 806B             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 889+ 806B CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 889+ 806E             >
 889+ 806E             >
 889+ 806E             >                endif           ; ok        // for other definitions it "points" the correct handler
 889+ 806E             >                // Use of "; ok" to suppress "warning[fwdref]"
 889+ 806E             >
 889+ 806E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 890+ 806E F3 6D                        dw      QCOMP
 891+ 8070 93 6A 17 6E                  dw      TWO, QPAIRS
 892+ 8074 4E 6E F5 63                  dw      COMPILE, ZBRANCH
 893+ 8078 EC 7F                        dw      BACK
 894+ 807A 4F 68                        dw      EXIT
 895+ 807C
 896+ 807C              //  ______________________________________________________________________
 897+ 807C              //
 898+ 807C              // end          ( a 1 -- ) \ compile-time
 899+ 807C                              Colon_Def END, "END", is_immediate
 899+ 807C             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 899+ 807C             >
 899+ 807C             >Dict_Ptr        defl    $
 899+ 807C             >
 899+ 807C             >//              ______________________________________________________________________
 899+ 807C             >//              Heap part
 899+ 807C             >
 899+ 807C             >
 899+ 807C             >                org     (Heap_Ptr & $1FFF) + $E000
 899+ ECB9             >
 899+ ECB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 899+ ECB9             >Latest_Definition defl  Heap_Ptr
 899+ ECB9             >
 899+ ECB9             >                // dummy db directives used to calculate length of namec
 899+ ECB9 45 4E 44    >                db      "END"
 899+ ECBC             >len_NFA         defl    $ - temp_NFA
 899+ ECBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 899+ ECB9             >
 899+ ECB9 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 899+ ECBA 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 899+ ECBD             >                org     $-1                 // alter last byte of Name just above to set
 899+ ECBC C4          >                db      {b $} | END_BIT     // msb as name end
 899+ ECBD             >
 899+ ECBD AF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 899+ ECBF             >Prev_Ptr        defl    Heap_Ptr
 899+ ECBF             >
 899+ ECBF             >mirror_Ptr      defl    $
 899+ ECBF             >
 899+ ECBF 7E 80       >                dw      Dict_Ptr + 2        // xt
 899+ ECC1             >Heap_Ptr        defl    $ - $E000           // save current HP
 899+ ECC1             >
 899+ ECC1             >Current_HP      defl  $ - $E000             // used to set HP once!
 899+ ECC1             >
 899+ ECC1             >//              ______________________________________________________________________
 899+ ECC1             >//              Dictionary part
 899+ ECC1             >
 899+ ECC1             >                org     Dict_Ptr
 899+ 807C             >
 899+ 807C BF 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 899+ 807E             >
 899+ 807E             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 899+ 807E CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 899+ 8081             >
 899+ 8081             >
 899+ 8081             >                endif           ; ok        // for other definitions it "points" the correct handler
 899+ 8081             >                // Use of "; ok" to suppress "warning[fwdref]"
 899+ 8081             >
 899+ 8081             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 900+ 8081 6B 80                        dw      UNTIL
 901+ 8083 4F 68                        dw      EXIT
 902+ 8085
 903+ 8085              //  ______________________________________________________________________
 904+ 8085              //
 905+ 8085              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 906+ 8085                              Colon_Def WHILE, "WHILE", is_immediate
 906+ 8085             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 906+ 8085             >
 906+ 8085             >Dict_Ptr        defl    $
 906+ 8085             >
 906+ 8085             >//              ______________________________________________________________________
 906+ 8085             >//              Heap part
 906+ 8085             >
 906+ 8085             >
 906+ 8085             >                org     (Heap_Ptr & $1FFF) + $E000
 906+ ECC1             >
 906+ ECC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 906+ ECC1             >Latest_Definition defl  Heap_Ptr
 906+ ECC1             >
 906+ ECC1             >                // dummy db directives used to calculate length of namec
 906+ ECC1 57 48 49 4C >                db      "WHILE"
 906+ ECC5 45          >
 906+ ECC6             >len_NFA         defl    $ - temp_NFA
 906+ ECC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 906+ ECC1             >
 906+ ECC1 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 906+ ECC2 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 906+ ECC6 45          >
 906+ ECC7             >                org     $-1                 // alter last byte of Name just above to set
 906+ ECC6 C5          >                db      {b $} | END_BIT     // msb as name end
 906+ ECC7             >
 906+ ECC7 B9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 906+ ECC9             >Prev_Ptr        defl    Heap_Ptr
 906+ ECC9             >
 906+ ECC9             >mirror_Ptr      defl    $
 906+ ECC9             >
 906+ ECC9 87 80       >                dw      Dict_Ptr + 2        // xt
 906+ ECCB             >Heap_Ptr        defl    $ - $E000           // save current HP
 906+ ECCB             >
 906+ ECCB             >Current_HP      defl  $ - $E000             // used to set HP once!
 906+ ECCB             >
 906+ ECCB             >//              ______________________________________________________________________
 906+ ECCB             >//              Dictionary part
 906+ ECCB             >
 906+ ECCB             >                org     Dict_Ptr
 906+ 8085             >
 906+ 8085 C9 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 906+ 8087             >
 906+ 8087             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 906+ 8087 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 906+ 808A             >
 906+ 808A             >
 906+ 808A             >                endif           ; ok        // for other definitions it "points" the correct handler
 906+ 808A             >                // Use of "; ok" to suppress "warning[fwdref]"
 906+ 808A             >
 906+ 808A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 907+ 808A F9 7F                        dw      IF
 908+ 808C              //              dw      TWO_PLUS // ( that is 4 )
 909+ 808C 60 69                        dw      TWO_SWAP
 910+ 808E 4F 68                        dw      EXIT
 911+ 8090
 912+ 8090              //  ______________________________________________________________________
 913+ 8090              //
 914+ 8090              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 915+ 8090                              Colon_Def REPEAT, "REPEAT", is_immediate
 915+ 8090             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 915+ 8090             >
 915+ 8090             >Dict_Ptr        defl    $
 915+ 8090             >
 915+ 8090             >//              ______________________________________________________________________
 915+ 8090             >//              Heap part
 915+ 8090             >
 915+ 8090             >
 915+ 8090             >                org     (Heap_Ptr & $1FFF) + $E000
 915+ ECCB             >
 915+ ECCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 915+ ECCB             >Latest_Definition defl  Heap_Ptr
 915+ ECCB             >
 915+ ECCB             >                // dummy db directives used to calculate length of namec
 915+ ECCB 52 45 50 45 >                db      "REPEAT"
 915+ ECCF 41 54       >
 915+ ECD1             >len_NFA         defl    $ - temp_NFA
 915+ ECD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 915+ ECCB             >
 915+ ECCB C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 915+ ECCC 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 915+ ECD0 41 54       >
 915+ ECD2             >                org     $-1                 // alter last byte of Name just above to set
 915+ ECD1 D4          >                db      {b $} | END_BIT     // msb as name end
 915+ ECD2             >
 915+ ECD2 C1 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 915+ ECD4             >Prev_Ptr        defl    Heap_Ptr
 915+ ECD4             >
 915+ ECD4             >mirror_Ptr      defl    $
 915+ ECD4             >
 915+ ECD4 92 80       >                dw      Dict_Ptr + 2        // xt
 915+ ECD6             >Heap_Ptr        defl    $ - $E000           // save current HP
 915+ ECD6             >
 915+ ECD6             >Current_HP      defl  $ - $E000             // used to set HP once!
 915+ ECD6             >
 915+ ECD6             >//              ______________________________________________________________________
 915+ ECD6             >//              Dictionary part
 915+ ECD6             >
 915+ ECD6             >                org     Dict_Ptr
 915+ 8090             >
 915+ 8090 D4 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 915+ 8092             >
 915+ 8092             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 915+ 8092 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 915+ 8095             >
 915+ 8095             >
 915+ 8095             >                endif           ; ok        // for other definitions it "points" the correct handler
 915+ 8095             >                // Use of "; ok" to suppress "warning[fwdref]"
 915+ 8095             >
 915+ 8095             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 916+ 8095 58 80                        dw      AGAIN
 917+ 8097              //              dw      TWO_MINUS
 918+ 8097 0C 80                        dw      THEN
 919+ 8099 4F 68                        dw      EXIT
 920+ 809B
 921+ 809B              //  ______________________________________________________________________
 922+ 809B              //
 923+ 809B              // ?do-
 924+ 809B              // special version of "BACK" used by ?DO and LOOP
 925+ 809B                              Colon_Def C_DO_BACK, "?DO-", is_normal
 925+ 809B             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 925+ 809B             >
 925+ 809B             >Dict_Ptr        defl    $
 925+ 809B             >
 925+ 809B             >//              ______________________________________________________________________
 925+ 809B             >//              Heap part
 925+ 809B             >
 925+ 809B             >
 925+ 809B             >                org     (Heap_Ptr & $1FFF) + $E000
 925+ ECD6             >
 925+ ECD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 925+ ECD6             >Latest_Definition defl  Heap_Ptr
 925+ ECD6             >
 925+ ECD6             >                // dummy db directives used to calculate length of namec
 925+ ECD6 3F 44 4F 2D >                db      "?DO-"
 925+ ECDA             >len_NFA         defl    $ - temp_NFA
 925+ ECDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 925+ ECD6             >
 925+ ECD6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 925+ ECD7 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 925+ ECDB             >                org     $-1                 // alter last byte of Name just above to set
 925+ ECDA AD          >                db      {b $} | END_BIT     // msb as name end
 925+ ECDB             >
 925+ ECDB CB 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 925+ ECDD             >Prev_Ptr        defl    Heap_Ptr
 925+ ECDD             >
 925+ ECDD             >mirror_Ptr      defl    $
 925+ ECDD             >
 925+ ECDD 9D 80       >                dw      Dict_Ptr + 2        // xt
 925+ ECDF             >Heap_Ptr        defl    $ - $E000           // save current HP
 925+ ECDF             >
 925+ ECDF             >Current_HP      defl  $ - $E000             // used to set HP once!
 925+ ECDF             >
 925+ ECDF             >//              ______________________________________________________________________
 925+ ECDF             >//              Dictionary part
 925+ ECDF             >
 925+ ECDF             >                org     Dict_Ptr
 925+ 809B             >
 925+ 809B DD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 925+ 809D             >
 925+ 809D             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 925+ 809D CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 925+ 80A0             >
 925+ 80A0             >
 925+ 80A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 925+ 80A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 925+ 80A0             >
 925+ 80A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 926+ 80A0 EC 7F                        dw      BACK
 927+ 80A2              CDoBack_Begin:
 928+ 80A2 36 68 68 6B                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 928+ 80A6 8F 69 E9 6B
 929+ 80AA F5 63                        dw      ZBRANCH
 930+ 80AC 0A 00                        dw      CDoBack_While - $
 931+ 80AE C8 68 0C 80                  dw          TWO_PLUS, THEN
 932+ 80B2 E8 63                        dw      BRANCH
 933+ 80B4 EE FF                        dw      CDoBack_Begin - $
 934+ 80B6              CDoBack_While:
 935+ 80B6 26 6E 68 6B                  dw      QCSP, CSP, STORE
 935+ 80BA 99 69
 936+ 80BC 4F 68                        dw      EXIT
 937+ 80BE
 938+ 80BE              //  ______________________________________________________________________
 939+ 80BE              //
 940+ 80BE              // do
 941+ 80BE              // DO  ... LOOP
 942+ 80BE              // DO  ... n +LOOP
 943+ 80BE              // ?DO ... LOOP
 944+ 80BE              // ?DO ... n +LOOP
 945+ 80BE                              Colon_Def DO, "DO", is_immediate
 945+ 80BE             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 945+ 80BE             >
 945+ 80BE             >Dict_Ptr        defl    $
 945+ 80BE             >
 945+ 80BE             >//              ______________________________________________________________________
 945+ 80BE             >//              Heap part
 945+ 80BE             >
 945+ 80BE             >
 945+ 80BE             >                org     (Heap_Ptr & $1FFF) + $E000
 945+ ECDF             >
 945+ ECDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 945+ ECDF             >Latest_Definition defl  Heap_Ptr
 945+ ECDF             >
 945+ ECDF             >                // dummy db directives used to calculate length of namec
 945+ ECDF 44 4F       >                db      "DO"
 945+ ECE1             >len_NFA         defl    $ - temp_NFA
 945+ ECE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 945+ ECDF             >
 945+ ECDF C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 945+ ECE0 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 945+ ECE2             >                org     $-1                 // alter last byte of Name just above to set
 945+ ECE1 CF          >                db      {b $} | END_BIT     // msb as name end
 945+ ECE2             >
 945+ ECE2 D6 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 945+ ECE4             >Prev_Ptr        defl    Heap_Ptr
 945+ ECE4             >
 945+ ECE4             >mirror_Ptr      defl    $
 945+ ECE4             >
 945+ ECE4 C0 80       >                dw      Dict_Ptr + 2        // xt
 945+ ECE6             >Heap_Ptr        defl    $ - $E000           // save current HP
 945+ ECE6             >
 945+ ECE6             >Current_HP      defl  $ - $E000             // used to set HP once!
 945+ ECE6             >
 945+ ECE6             >//              ______________________________________________________________________
 945+ ECE6             >//              Dictionary part
 945+ ECE6             >
 945+ ECE6             >                org     Dict_Ptr
 945+ 80BE             >
 945+ 80BE E4 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 945+ 80C0             >
 945+ 80C0             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 945+ 80C0 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 945+ 80C3             >
 945+ 80C3             >
 945+ 80C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 945+ 80C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 945+ 80C3             >
 945+ 80C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 946+ 80C3 4E 6E 32 64                  dw      COMPILE, C_DO
 947+ 80C7 68 6B 8F 69                  dw      CSP, FETCH, STORE_CSP
 947+ 80CB D1 6D
 948+ 80CD AA 6B 9A 6A                  dw      HERE, THREE
 949+ 80D1 4F 68                        dw      EXIT
 950+ 80D3
 951+ 80D3              //  ______________________________________________________________________
 952+ 80D3              //
 953+ 80D3              // loop
 954+ 80D3                              Colon_Def LOOP, "LOOP", is_immediate
 954+ 80D3             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 954+ 80D3             >
 954+ 80D3             >Dict_Ptr        defl    $
 954+ 80D3             >
 954+ 80D3             >//              ______________________________________________________________________
 954+ 80D3             >//              Heap part
 954+ 80D3             >
 954+ 80D3             >
 954+ 80D3             >                org     (Heap_Ptr & $1FFF) + $E000
 954+ ECE6             >
 954+ ECE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 954+ ECE6             >Latest_Definition defl  Heap_Ptr
 954+ ECE6             >
 954+ ECE6             >                // dummy db directives used to calculate length of namec
 954+ ECE6 4C 4F 4F 50 >                db      "LOOP"
 954+ ECEA             >len_NFA         defl    $ - temp_NFA
 954+ ECEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 954+ ECE6             >
 954+ ECE6 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 954+ ECE7 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 954+ ECEB             >                org     $-1                 // alter last byte of Name just above to set
 954+ ECEA D0          >                db      {b $} | END_BIT     // msb as name end
 954+ ECEB             >
 954+ ECEB DF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 954+ ECED             >Prev_Ptr        defl    Heap_Ptr
 954+ ECED             >
 954+ ECED             >mirror_Ptr      defl    $
 954+ ECED             >
 954+ ECED D5 80       >                dw      Dict_Ptr + 2        // xt
 954+ ECEF             >Heap_Ptr        defl    $ - $E000           // save current HP
 954+ ECEF             >
 954+ ECEF             >Current_HP      defl  $ - $E000             // used to set HP once!
 954+ ECEF             >
 954+ ECEF             >//              ______________________________________________________________________
 954+ ECEF             >//              Dictionary part
 954+ ECEF             >
 954+ ECEF             >                org     Dict_Ptr
 954+ 80D3             >
 954+ 80D3 ED 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 954+ 80D5             >
 954+ 80D5             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 954+ 80D5 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 954+ 80D8             >
 954+ 80D8             >
 954+ 80D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 954+ 80D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 954+ 80D8             >
 954+ 80D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 955+ 80D8 9A 6A 17 6E                  dw      THREE, QPAIRS
 956+ 80DC 4E 6E E0 63                  dw      COMPILE, C_LOOP
 957+ 80E0 9D 80                        dw      C_DO_BACK
 958+ 80E2 4F 68                        dw      EXIT
 959+ 80E4
 960+ 80E4              //  ______________________________________________________________________
 961+ 80E4              //
 962+ 80E4              // +loop
 963+ 80E4                              Colon_Def PLOOP, "+LOOP", is_immediate
 963+ 80E4             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 963+ 80E4             >
 963+ 80E4             >Dict_Ptr        defl    $
 963+ 80E4             >
 963+ 80E4             >//              ______________________________________________________________________
 963+ 80E4             >//              Heap part
 963+ 80E4             >
 963+ 80E4             >
 963+ 80E4             >                org     (Heap_Ptr & $1FFF) + $E000
 963+ ECEF             >
 963+ ECEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 963+ ECEF             >Latest_Definition defl  Heap_Ptr
 963+ ECEF             >
 963+ ECEF             >                // dummy db directives used to calculate length of namec
 963+ ECEF 2B 4C 4F 4F >                db      "+LOOP"
 963+ ECF3 50          >
 963+ ECF4             >len_NFA         defl    $ - temp_NFA
 963+ ECF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 963+ ECEF             >
 963+ ECEF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 963+ ECF0 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 963+ ECF4 50          >
 963+ ECF5             >                org     $-1                 // alter last byte of Name just above to set
 963+ ECF4 D0          >                db      {b $} | END_BIT     // msb as name end
 963+ ECF5             >
 963+ ECF5 E6 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 963+ ECF7             >Prev_Ptr        defl    Heap_Ptr
 963+ ECF7             >
 963+ ECF7             >mirror_Ptr      defl    $
 963+ ECF7             >
 963+ ECF7 E6 80       >                dw      Dict_Ptr + 2        // xt
 963+ ECF9             >Heap_Ptr        defl    $ - $E000           // save current HP
 963+ ECF9             >
 963+ ECF9             >Current_HP      defl  $ - $E000             // used to set HP once!
 963+ ECF9             >
 963+ ECF9             >//              ______________________________________________________________________
 963+ ECF9             >//              Dictionary part
 963+ ECF9             >
 963+ ECF9             >                org     Dict_Ptr
 963+ 80E4             >
 963+ 80E4 F7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 963+ 80E6             >
 963+ 80E6             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 963+ 80E6 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 963+ 80E9             >
 963+ 80E9             >
 963+ 80E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 963+ 80E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 963+ 80E9             >
 963+ 80E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 964+ 80E9 9A 6A 17 6E                  dw      THREE, QPAIRS
 965+ 80ED 4E 6E B1 63                  dw      COMPILE, C_PLOOP
 966+ 80F1 9D 80                        dw      C_DO_BACK
 967+ 80F3 4F 68                        dw      EXIT
 968+ 80F5
 969+ 80F5              //  ______________________________________________________________________
 970+ 80F5              //
 971+ 80F5              // ?do
 972+ 80F5                              Colon_Def QDO, "?DO", is_immediate
 972+ 80F5             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 972+ 80F5             >
 972+ 80F5             >Dict_Ptr        defl    $
 972+ 80F5             >
 972+ 80F5             >//              ______________________________________________________________________
 972+ 80F5             >//              Heap part
 972+ 80F5             >
 972+ 80F5             >
 972+ 80F5             >                org     (Heap_Ptr & $1FFF) + $E000
 972+ ECF9             >
 972+ ECF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 972+ ECF9             >Latest_Definition defl  Heap_Ptr
 972+ ECF9             >
 972+ ECF9             >                // dummy db directives used to calculate length of namec
 972+ ECF9 3F 44 4F    >                db      "?DO"
 972+ ECFC             >len_NFA         defl    $ - temp_NFA
 972+ ECFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 972+ ECF9             >
 972+ ECF9 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 972+ ECFA 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 972+ ECFD             >                org     $-1                 // alter last byte of Name just above to set
 972+ ECFC CF          >                db      {b $} | END_BIT     // msb as name end
 972+ ECFD             >
 972+ ECFD EF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 972+ ECFF             >Prev_Ptr        defl    Heap_Ptr
 972+ ECFF             >
 972+ ECFF             >mirror_Ptr      defl    $
 972+ ECFF             >
 972+ ECFF F7 80       >                dw      Dict_Ptr + 2        // xt
 972+ ED01             >Heap_Ptr        defl    $ - $E000           // save current HP
 972+ ED01             >
 972+ ED01             >Current_HP      defl  $ - $E000             // used to set HP once!
 972+ ED01             >
 972+ ED01             >//              ______________________________________________________________________
 972+ ED01             >//              Dictionary part
 972+ ED01             >
 972+ ED01             >                org     Dict_Ptr
 972+ 80F5             >
 972+ 80F5 FF 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 972+ 80F7             >
 972+ 80F7             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 972+ 80F7 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 972+ 80FA             >
 972+ 80FA             >
 972+ 80FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 972+ 80FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 972+ 80FA             >
 972+ 80FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 973+ 80FA 4E 6E 0A 64                  dw      COMPILE, C_Q_DO
 974+ 80FE 68 6B 8F 69                  dw      CSP, FETCH, STORE_CSP
 974+ 8102 D1 6D
 975+ 8104 AA 6B 85 6A                  dw      HERE, ZERO, COMMA, ZERO
 975+ 8108 C0 6B 85 6A
 976+ 810C AA 6B 9A 6A                  dw      HERE, THREE
 977+ 8110 4F 68                        dw      EXIT
 978+ 8112
 979+ 8112              //  ______________________________________________________________________
 980+ 8112              //
 981+ 8112              // \
 982+ 8112                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 982+ 8112             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 982+ 8112             >
 982+ 8112             >Dict_Ptr        defl    $
 982+ 8112             >
 982+ 8112             >//              ______________________________________________________________________
 982+ 8112             >//              Heap part
 982+ 8112             >
 982+ 8112             >
 982+ 8112             >                org     (Heap_Ptr & $1FFF) + $E000
 982+ ED01             >
 982+ ED01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 982+ ED01             >Latest_Definition defl  Heap_Ptr
 982+ ED01             >
 982+ ED01             >                // dummy db directives used to calculate length of namec
 982+ ED01 5C          >                db      "\\"
 982+ ED02             >len_NFA         defl    $ - temp_NFA
 982+ ED02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 982+ ED01             >
 982+ ED01 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 982+ ED02 5C          >                db      "\\"               // name string in 7-bit ascii, but
 982+ ED03             >                org     $-1                 // alter last byte of Name just above to set
 982+ ED02 DC          >                db      {b $} | END_BIT     // msb as name end
 982+ ED03             >
 982+ ED03 F9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 982+ ED05             >Prev_Ptr        defl    Heap_Ptr
 982+ ED05             >
 982+ ED05             >mirror_Ptr      defl    $
 982+ ED05             >
 982+ ED05 14 81       >                dw      Dict_Ptr + 2        // xt
 982+ ED07             >Heap_Ptr        defl    $ - $E000           // save current HP
 982+ ED07             >
 982+ ED07             >Current_HP      defl  $ - $E000             // used to set HP once!
 982+ ED07             >
 982+ ED07             >//              ______________________________________________________________________
 982+ ED07             >//              Dictionary part
 982+ ED07             >
 982+ ED07             >                org     Dict_Ptr
 982+ 8112             >
 982+ 8112 05 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 982+ 8114             >
 982+ 8114             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 982+ 8114 CD 30 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 982+ 8117             >
 982+ 8117             >
 982+ 8117             >                endif           ; ok        // for other definitions it "points" the correct handler
 982+ 8117             >                // Use of "; ok" to suppress "warning[fwdref]"
 982+ 8117             >
 982+ 8117             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 983+ 8117 26 6B 8F 69                  dw      BLK, FETCH
 984+ 811B C1 68                        dw      ONE_SUBTRACT // BLOCK 1 is used as temp-line in INCLUDE file
 985+ 811D F5 63                        dw      ZBRANCH
 986+ 811F 34 00                        dw      Backslash_Else_1 - $
 987+ 8121
 988+ 8121 26 6B 8F 69                  dw          BLK, FETCH
 989+ 8125 F5 63                        dw          ZBRANCH
 990+ 8127 1A 00                        dw          Backslash_Else_2 - $
 991+ 8129
 992+ 8129 2C 6B 8F 69                  dw              TO_IN, FETCH, CL, ONE_SUBTRACT, AND_OP, CL
 992+ 812D AF 6A C1 68
 992+ 8131 0F 68 AF 6A
 993+ 8135 1E 69 E9 6B                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 993+ 8139 2C 6B 77 69
 994+ 813D E8 63                        dw          BRANCH
 995+ 813F 10 00                        dw          Backslash_Endif_2 - $
 996+ 8141              Backslash_Else_2:
 997+ 8141 85 6A EA 6A                  dw              ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, CSTORE
 997+ 8145 8F 69 2C 6B
 997+ 8149 8F 69 A1 68
 997+ 814D AD 69
 998+ 814F              Backslash_Endif_2:
 999+ 814F E8 63                        dw      BRANCH
1000+ 8151 0A 00                        dw      Backslash_Endif_1 - $
1001+ 8153              Backslash_Else_1:
1002+ 8153 B6 6A D4 68                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1002+ 8157 2C 6B 99 69
1003+ 815B              Backslash_Endif_1:
1004+ 815B 4F 68                        dw      EXIT
1005+ 815D
1006+ 815D              Fence_Word:
1007+ 815D              //  ______________________________________________________________________
1008+ 815D              //
1009+ 815D
1010+ 815D 00           Here_Dictionary db      0
1011+ 815E
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
 143  815E
 144  815E              // now we save the compiled file so we can either run it or debug it
 145  815E                              SAVENEX OPEN "output/forth17.nex", ORIGIN, S0_system
 146  815E                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 147  815E                              SAVENEX CFG  7, 0
 148  815E                              SAVENEX BANK 5,2,0,1,16
 149  815E              //              SAVENEX BANK 5,2,0,1,3,4,6,7, 16,17,18,19
 150  815E                              SAVENEX AUTO
 151  815E                              SAVENEX CLOSE
 152  815E
 153  815E              //              PAGE 7 ;set 7 page to current slot
 154  815E              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 155  815E              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 156  815E
 157  815E                              SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, 9999
 158  815E                              SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 159  815E
 160  815E                              SAVEBIN "output/forth17d.bin", ORIGIN, 9999
 161  815E                              SAVEBIN "output/ram7.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 162  815E
 163  815E                              // To load on ZX Spectrum Next you have to type
 164  815E                              //      LOAD "ram7.bin" BANK 16
 165  815E                              //      LOAD "forth17d.bin" CODE
 166  815E
 167  815E                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
