# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.8 NextZXOS version
   7  0000              //  Basic Loader version
   8  0000              //  build 20250315
   9  0000              //
  10  0000              //  Direct-Threaded version.
  11  0000              //
  12  0000              //  NextZXOS version
  13  0000              //  ______________________________________________________________________
  14  0000              //
  15  0000              // MIT License
  16  0000              //
  17  0000              // Copyright (c) 1990-2025 Matteo Vitturi
  18  0000              //
  19  0000              // Permission is hereby granted, free of charge, to any person obtaining a copy
  20  0000              // of this software and associated documentation files (the "Software"), to deal
  21  0000              // in the Software without restriction, including without limitation the rights
  22  0000              // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  23  0000              // copies of the Software, and to permit persons to whom the Software is
  24  0000              // furnished to do so, subject to the following conditions:
  25  0000              //
  26  0000              // The above copyright notice and this permission notice shall be included in all
  27  0000              // copies or substantial portions of the Software.
  28  0000              //
  29  0000              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30  0000              // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31  0000              // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  32  0000              // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  33  0000              // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  34  0000              // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  35  0000              // SOFTWARE.
  36  0000              //  ______________________________________________________________________
  37  0000              //
  38  0000              //  by Matteo Vitturi, 1990-2025
  39  0000              //
  40  0000              //  https://sites.google.com/view/vforth/vforth15-next
  41  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  42  0000              //
  43  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  44  0000              //  Each line of this source list mustn't exceed 80 bytes.
  45  0000              //  Z80N (ZX Spectrum Next) extension is available.
  46  0000              //
  47  0000              //  This list has been tested using the following configuration:
  48  0000              //      - CSpect emulator V.2.12.30
  49  0000              //  ______________________________________________________________________
  50  0000              //
  51  0000              //  Z80 Registers usage map
  52  0000              //
  53  0000              //  AF
  54  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  55  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  56  0000              //  HL - Working
  57  0000              //
  58  0000              //  AF'- Sometime used for backup purpose
  59  0000              //  BC'- Not used
  60  0000              //  DE'- Not used
  61  0000              //  HL'- Not used
  62  0000              //
  63  0000              //  SP - Calculator Stack Pointer
  64  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  65  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  66  0000              //
  67  0000              //  ______________________________________________________________________
  68  0000              //
  69  0000              //  _________________
  70  0000              //
  71  0000              //  FORTH DEFINITIONS
  72  0000              //  _________________
  73  0000
  74  0000                              OPT     --zxnext
  75  0000              //  ______________________________________________________________________
  76  0000              //
  77  0000              // this controls some debugging code in L0.asm
  78  0000              //  0 for final binary release.
  79  0000              //  1 for debugging with Visual Studio Code and DeZog
  80  0000              // -1 for for binary comparison with Forth generated code.
  81  0000              DEBUGGING       equ     0
  82  0000              //
  83  0000              //  ______________________________________________________________________
  84  0000
  85  0000                              if ( -2 == DEBUGGING )
  86  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with single incremental compilation
  87  0000 ~            ORIGIN          equ     39060 - $80       // $9aba     // for binary comparison with single incremental compilation
  88  0000 ~            Heap_Ptr        defl    $0100 -$8b      // HP before compilation 1b53
  89  0000 ~            Heap_offset     defl    0                // given by compilation
  90  0000 ~
  91  0000                              endif
  92  0000              //  ______________________________________________________________________
  93  0000
  94  0000                              if ( -1 == DEBUGGING )
  95  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  96  0000 ~            ORIGIN          equ     $6366   -$80                   // for binary comparison with single compilation
  97  0000 ~            Heap_Ptr        defl    $0002              // HP before compilation
  98  0000 ~            Heap_offset     defl    0                // given by compilation
  99  0000 ~
 100  0000                              endif
 101  0000              //  ______________________________________________________________________
 102  0000
 103  0000                              if (  0 == DEBUGGING )
 104  0000              ORIGIN          equ     $6366                   // binary and Tape
 105  0000              // ORIGIN          equ     $9A93                // binary and Tape
 106  0000              Heap_Ptr        defl    $0002
 107  0000              Heap_offset     defl     0
 108  0000
 109  0000                              endif
 110  0000              //  ______________________________________________________________________
 111  0000
 112  0000                              if (  1 == DEBUGGING )
 113  0000 ~            ORIGIN          equ     $8080                   // for DeZog
 114  0000 ~            Heap_Ptr        defl    $0002
 115  0000 ~            Heap_offset     defl     0
 116  0000 ~
 117  0000                              endif
 118  0000              //  ______________________________________________________________________
 119  0000
 120  0000                              DEVICE  ZXSPECTRUMNEXT
 121  0000
 122  0000                              ORG     ORIGIN
 123  6366
 124  6366                              if ( DEBUGGING < 0)
 125  6366 ~                            ds 128                            // for binary comparison
 126  6366                              endif
 127  6366
 128  6366              //  ______________________________________________________________________
 129  6366              //
 130  6366              //  Naming convention for Label vs Forth correspondance
 131  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 132  6366              //    - Leading "0" is converted into "Z_"
 133  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
 134  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 135  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 136  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 137  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 138  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 139  6366              //    - Equal sign "=" is converted in EQUAL
 140  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 141  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 142  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 143  6366              //    - Exclamation mark "!" is converted in STORE
 144  6366              //    - At-Sign "@" is converted in FETCH
 145  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 146  6366
 147  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE: Return Stack Pointer
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366              RAMTOP          equ     $5CB2
  22+ 6366              TSTACK          equ     $5C00                   // TSTACK
  23+ 6366              // FSTACK          ecu     $4000 - 8
  24+ 6366              //  ______________________________________________________________________
  25+ 6366              //
  26+ 6366              // Flag constants
  27+ 6366              TRUE_FLAG       equ     $FFFF
  28+ 6366              FALSE_FLAG      equ     $0000
  29+ 6366
  30+ 6366              //  ______________________________________________________________________
  31+ 6366              //
  32+ 6366              // Ascii char constants
  33+ 6366              NUL_CHAR        equ     $00
  34+ 6366              COMMA_CHAR      equ     $06
  35+ 6366              BACKSPACE_CHAR  equ     $08
  36+ 6366              CR_CHAR         equ     $0D
  37+ 6366              BLANK_CHAR      equ     $20
  38+ 6366              QUOTE_CHAR      equ     "'"
  39+ 6366              DQUOTE_CHAR     equ     '"'
  40+ 6366              UNDERSCORE_CHAR equ     $5F
  41+ 6366              SOLIDBLOCK_CHAR equ     $8F
  42+ 6366              HALFBLOCK_CHAR  equ     $8C
  43+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  44+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  45+ 6366
  46+ 6366
  47+ 6366              //  ______________________________________________________________________
  48+ 6366              //
  49+ 6366
  50+ 6366                              // emulate something like:  ld hl,rp
  51+ 6366              ldhlrp          macro
  52+ 6366 ~                            ld      hl,(RP_Pointer)
  53+ 6366                              endm
  54+ 6366
  55+ 6366                              // emulate something like:  ld rp,hl
  56+ 6366              ldrphl          macro
  57+ 6366 ~                            ld      (RP_Pointer),hl
  58+ 6366                              endm
  59+ 6366
  60+ 6366              //  ______________________________________________________________________
  61+ 6366              //
  62+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  63+ 6366              next            macro
  64+ 6366 ~                            jp      (ix)
  65+ 6366                              endm
  66+ 6366
  67+ 6366              psh1            macro
  68+ 6366 ~                            push    hl
  69+ 6366 ~                            jp      (ix)
  70+ 6366                              endm
  71+ 6366
  72+ 6366              psh2            macro
  73+ 6366 ~                            push    de
  74+ 6366 ~                            push    hl
  75+ 6366 ~                            jp      (ix)
  76+ 6366                              endm
  77+ 6366
  78+ 6366              //  ______________________________________________________________________
  79+ 6366              //
  80+ 6366              // Bit constants in length-byte
  81+ 6366
  82+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  83+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  84+ 6366              END_BIT         equ     %10000000               // $80
  85+ 6366
  86+ 6366
  87+ 6366              //  ______________________________________________________________________
  88+ 6366              //
  89+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  90+ 6366              //  pointers
  91+ 6366              temp_NFA        defl    0
  92+ 6366              last_NFA        defl    0
  93+ 6366              len_NFA         defl    0
  94+ 6366
  95+ 6366              Dict_Ptr        defl    0
  96+ 6366              // Heap_Ptr        defl    $0002
  97+ 6366              Prev_Ptr        defl    0
  98+ 6366              mirror_Ptr      defl    0
  99+ 6366
 100+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
 101+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
 102+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 103+ 6366
 104+ 6366
 105+ 6366              Behave          macro   xp
 106+ 6366 ~            temp_PTR        defl    $                   // save this org
 107+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 108+ 6366 ~                            dw      xp
 109+ 6366 ~                            org     temp_PTR
 110+ 6366                              endm
 111+ 6366
 112+ 6366              //  ______________________________________________________________________
 113+ 6366              //
 114+ 6366              //  Create a new "low-level" definition
 115+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 116+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 117+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 118+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 119+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 120+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 121+ 6366              //  This macro acts much like the standard Forth definition CREATE
 122+ 6366
 123+ 6366              New_Def         macro   label, namec, runcode, bits
 124+ 6366 ~
 125+ 6366 ~            Dict_Ptr        defl    $
 126+ 6366 ~
 127+ 6366 ~            //              ______________________________________________________________________
 128+ 6366 ~            //              Heap part
 129+ 6366 ~
 130+ 6366 ~
 131+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 132+ 6366 ~
 133+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 134+ 6366 ~            Latest_Definition defl  Heap_Ptr
 135+ 6366 ~
 136+ 6366 ~                            // dummy db directives used to calculate length of namec
 137+ 6366 ~                            db      namec
 138+ 6366 ~            len_NFA         defl    $ - temp_NFA
 139+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ 6366 ~
 141+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 143+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 144+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 145+ 6366 ~
 146+ 6366 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147+ 6366 ~            Prev_Ptr        defl    Heap_Ptr
 148+ 6366 ~
 149+ 6366 ~            mirror_Ptr      defl    $
 150+ 6366 ~
 151+ 6366 ~                            dw      Dict_Ptr + 2        // xt
 152+ 6366 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 153+ 6366 ~
 154+ 6366 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 155+ 6366 ~
 156+ 6366 ~            //              ______________________________________________________________________
 157+ 6366 ~            //              Dictionary part
 158+ 6366 ~
 159+ 6366 ~                            org     Dict_Ptr
 160+ 6366 ~
 161+ 6366 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6366 ~
 163+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 165+ 6366 ~
 166+ 6366 ~
 167+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6366 ~
 170+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6366                              endm
 172+ 6366
 173+ 6366              //  ______________________________________________________________________
 174+ 6366              //
 175+ 6366              // Create a "constant"
 176+ 6366              // The constant value is compiled in first PFA cell
 177+ 6366              Constant_Def    macro   label, namec, constant_value
 178+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 179+ 6366 ~                            dw      constant_value
 180+ 6366                              endm
 181+ 6366
 182+ 6366              //  ______________________________________________________________________
 183+ 6366              //
 184+ 6366              // Create a "variable"
 185+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 186+ 6366              // this allow creation of "variables" which content is  of any length
 187+ 6366              Variable_Def    macro   label, namec, initial_value
 188+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 189+ 6366 ~                            dw      initial_value
 190+ 6366                              endm
 191+ 6366
 192+ 6366              //  ______________________________________________________________________
 193+ 6366              //
 194+ 6366              // Create a "user" variable
 195+ 6366              // It uses a single byte as offset to calculate the address of the variable
 196+ 6366              User_Def        macro   label, namec, offset_value
 197+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 198+ 6366 ~                            db      offset_value
 199+ 6366                              endm
 200+ 6366
 201+ 6366              //  ______________________________________________________________________
 202+ 6366              //
 203+ 6366              // Create a "colon-definition"
 204+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 205+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 206+ 6366              Colon_Def       macro   label, namec, bits
 207+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 208+ 6366                              endm
 209+ 6366
 210+ 6366              //  ______________________________________________________________________
 211+ 6366              //
 212+ 6366              // Create a "heap-string"
 213+ 6366              Start_Heap      macro
 214+ 6366 ~            temp_ORG        defl    $                   // save this ORG
 215+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 216+ 6366 ~
 217+ 6366                              endm
 218+ 6366
 219+ 6366              End_Heap        macro
 220+ 6366 ~            Heap_Ptr        defl    $ - $E000
 221+ 6366 ~                            org     temp_ORG
 222+ 6366 ~
 223+ 6366                              endm
 224+ 6366
 225+ 6366
 226+ 6366              //  ______________________________________________________________________
 227+ 6366              //
 228+ 6366
 229+ 6366
 230+ 6366
 231+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 232+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 233+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 234+ 6366              USER_system:    equ     $D188               // User variables zone.
 235+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 236+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 237+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/system.asm
 148  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366              Cold_origin:
   9+ 6366 A7                           and     a
  10+ 6367 C3 18 76                     jp      ColdRoutine
  11+ 636A              Warm_origin:
  12+ 636A 37                           scf
  13+ 636B C3 18 76                     jp      WarmRoutine
  14+ 636E
  15+ 636E              // +008
  16+ 636E 01 01        SP_Basic:       dw      $0101               // These are bits with some "standard" meaning... 0101
  17+ 6370
  18+ 6370              // +00A
  19+ 6370 00 0E                        dw      $0E00
  20+ 6372
  21+ 6372              // +00C
  22+ 6372 F9 0C        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 6374
  24+ 6374              // +00E
  25+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 6376
  27+ 6376              // +010
  28+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 6378
  30+ 6378              // +012
  31+ 6378 E8 D0        S0_origin:      dw      S0_system
  32+ 637A 88 D1        R0_origin:      dw      R0_system
  33+ 637C E8 D0        TIB_origin:     dw      TIB_system
  34+ 637E 1F 00        WIDTH_origin:   dw      31
  35+ 6380 01 00        WARNING_origin: dw      1
  36+ 6382 5B 81        FENCE_origin:   dw      Fence_Word
  37+ 6384 5B 81        DP_origin       dw      Fence_Word
  38+ 6386 2D 75        VOCLINK_origin: dw      Voclink_Ptr
  39+ 6388 E4 D1                        dw      FIRST_system
  40+ 638A 00 E0                        dw      LIMIT_system
  41+ 638C FF 0C        HP_origin:      dw      Current_HP
  42+ 638E
  43+ 638E              // +028
  44+ 638E 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638F 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6390 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6391 00                           db      0
  48+ 6392
  49+ 6392              // +02C
  50+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP during NextOS call
  51+ 6394
  52+ 6394              // +02E
  53+ 6394 88 D1        USER_Pointer:   dw      USER_system
  54+ 6396
  55+ 6396              // +030
  56+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 6398
  58+ 6398              // +32
  59+ 6398 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 639A
  61+ 639A
  62+ 639A                              Start_Heap
  62+ 639A             >temp_ORG        defl    $                   // save this ORG
  62+ 639A             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002                              // length include a leading space in each line
  65+ E002 6F                           db      111
  66+ E003 20 76 2D 46                  db      " v-Forth 1.8 - NextZXOS version ", $0D      // 33
  66+ E007 6F 72 74 68
  66+ E00B 20 31 2E 38
  66+ E00F 20 2D 20 4E
  66+ E013 65 78 74 5A
  66+ E017 58 4F 53 20
  66+ E01B 76 65 72 73
  66+ E01F 69 6F 6E 20
  66+ E023 0D
  67+ E024 20 48 65 61                  db      " Heap Vocabulary - build 2025-03-15 ", $0D  // 37
  67+ E028 70 20 56 6F
  67+ E02C 63 61 62 75
  67+ E030 6C 61 72 79
  67+ E034 20 2D 20 62
  67+ E038 75 69 6C 64
  67+ E03C 20 32 30 32
  67+ E040 35 2D 30 33
  67+ E044 2D 31 35 20
  67+ E048 0D
  68+ E049 20 4D 49 54                  db      " MIT License ", 127                         // 14
  68+ E04D 20 4C 69 63
  68+ E051 65 6E 73 65
  68+ E055 20 7F
  69+ E057 20 31 39 39                  db      " 1990-2025 Matteo Vitturi ", $0D            // 27
  69+ E05B 30 2D 32 30
  69+ E05F 32 35 20 4D
  69+ E063 61 74 74 65
  69+ E067 6F 20 56 69
  69+ E06B 74 74 75 72
  69+ E06F 69 20 0D
  70+ E072                              End_Heap
  70+ E072             >Heap_Ptr        defl    $ - $E000
  70+ E072             >                org     temp_ORG
  70+ 639A             >
  71+ 639A
  72+ 639A              //  ______________________________________________________________________
  73+ 639A
  74+ 639A              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 639A              // instead of their equivalent long sequences.
  76+ 639A
  77+ 639A              //  ______________________________________________________________________
  78+ 639A
  79+ 639A              // address for "next" - inner interpreter
  80+ 639A              // This address must always be pointed by IX
  81+ 639A              // "next" macro simply does a  jp(ix)  instruction
  82+ 639A
  83+ 639A              // Psh2_Ptr:       push    de
  84+ 639A              // Psh1_Ptr:       push    hl
  85+ 639A
  86+ 639A              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 639A
  88+ 639A                              if ( 1 == DEBUGGING )
  89+ 639A ~                            ld      hl, Next_Breakpoint_1
  90+ 639A ~                            and     a
  91+ 639A ~                            sbc     hl, bc
  92+ 639A ~                            jr      nz, Next_Continue
  93+ 639A ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 639A                              endif
  95+ 639A
  96+ 639A              Next_Continue:
  97+ 639A 0A                           ld      a, (bc)
  98+ 639B 03                           inc     bc
  99+ 639C 6F                           ld      l, a
 100+ 639D 0A                           ld      a, (bc)
 101+ 639E 03                           inc     bc
 102+ 639F 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 63A0
 104+ 63A0              // Execute xt i.e. CFA held in HL
 105+ 63A0              Exec_Ptr:
 106+ 63A0
 107+ 63A0
 108+ 63A0
 109+ 63A0
 110+ 63A0 E9                           jp      (hl)                // and jump to it
 111+ 63A1                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 63A1
 113+ 63A1              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 63A1              // 0x00         n --      ( compile time )
 115+ 63A1              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 63A1              //              next
 117+ 63A1
 118+ 63A1              //  ______________________________________________________________________
 119+ 63A1              //
 120+ 63A1              // lit          -- x
 121+ 63A1              // puts on top of stack the value of the following word.
 122+ 63A1              // it is compiled in colon definition before a literal number
 123+ 63A1
 124+ 63A1                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 63A1             >
 124+ 63A1             >Dict_Ptr        defl    $
 124+ 63A1             >
 124+ 63A1             >//              ______________________________________________________________________
 124+ 63A1             >//              Heap part
 124+ 63A1             >
 124+ 63A1             >
 124+ 63A1             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E072             >
 124+ E072             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E072             >Latest_Definition defl  Heap_Ptr
 124+ E072             >
 124+ E072             >                // dummy db directives used to calculate length of namec
 124+ E072 4C 49 54    >                db      "LIT"
 124+ E075             >len_NFA         defl    $ - temp_NFA
 124+ E075             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E072             >
 124+ E072 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E073 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E076             >                org     $-1                 // alter last byte of Name just above to set
 124+ E075 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E076             >
 124+ E076 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E078             >Prev_Ptr        defl    Heap_Ptr
 124+ E078             >
 124+ E078             >mirror_Ptr      defl    $
 124+ E078             >
 124+ E078 A3 63       >                dw      Dict_Ptr + 2        // xt
 124+ E07A             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E07A             >
 124+ E07A             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E07A             >
 124+ E07A             >//              ______________________________________________________________________
 124+ E07A             >//              Dictionary part
 124+ E07A             >
 124+ E07A             >                org     Dict_Ptr
 124+ 63A1             >
 124+ 63A1 78 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 63A3             >
 124+ 63A3             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 63A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 63A3 ~           >
 124+ 63A3 ~           >
 124+ 63A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 63A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 63A3             >
 124+ 63A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 63A3
 126+ 63A3 0A                           ld      a, (bc)
 127+ 63A4 03                           inc     bc
 128+ 63A5 6F                           ld      l, a
 129+ 63A6 0A                           ld      a, (bc)
 130+ 63A7 03                           inc     bc
 131+ 63A8 67                           ld      h, a
 132+ 63A9 E5                           push    hl
 133+ 63AA                              next
 133+ 63AA DD E9       >                jp      (ix)
 134+ 63AC
 135+ 63AC              //  ______________________________________________________________________
 136+ 63AC              //
 137+ 63AC              // execute      i*x xt -- j*x
 138+ 63AC              // execution token. usually xt is given by CFA
 139+ 63AC
 140+ 63AC                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 63AC             >
 140+ 63AC             >Dict_Ptr        defl    $
 140+ 63AC             >
 140+ 63AC             >//              ______________________________________________________________________
 140+ 63AC             >//              Heap part
 140+ 63AC             >
 140+ 63AC             >
 140+ 63AC             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E07A             >
 140+ E07A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E07A             >Latest_Definition defl  Heap_Ptr
 140+ E07A             >
 140+ E07A             >                // dummy db directives used to calculate length of namec
 140+ E07A 45 58 45 43 >                db      "EXECUTE"
 140+ E07E 55 54 45    >
 140+ E081             >len_NFA         defl    $ - temp_NFA
 140+ E081             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E07A             >
 140+ E07A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E07B 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E07F 55 54 45    >
 140+ E082             >                org     $-1                 // alter last byte of Name just above to set
 140+ E081 C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E082             >
 140+ E082 72 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E084             >Prev_Ptr        defl    Heap_Ptr
 140+ E084             >
 140+ E084             >mirror_Ptr      defl    $
 140+ E084             >
 140+ E084 AE 63       >                dw      Dict_Ptr + 2        // xt
 140+ E086             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E086             >
 140+ E086             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E086             >
 140+ E086             >//              ______________________________________________________________________
 140+ E086             >//              Dictionary part
 140+ E086             >
 140+ E086             >                org     Dict_Ptr
 140+ 63AC             >
 140+ 63AC 84 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 63AE             >
 140+ 63AE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 63AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 63AE ~           >
 140+ 63AE ~           >
 140+ 63AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 63AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 63AE             >
 140+ 63AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 63AE C9                           ret
 142+ 63AF
 143+ 63AF              //  ______________________________________________________________________
 144+ 63AF              //
 145+ 63AF              // brk
 146+ 63AF              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 63AF              //              next
 148+ 63AF
 149+ 63AF
 150+ 63AF
 151+ 63AF              //  ______________________________________________________________________
 152+ 63AF              //
 153+ 63AF              // (+loop)      n --
 154+ 63AF              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 63AF              // keep track of index and limit, they are accessed via I and I'
 156+ 63AF              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 63AF              // between the loop limit minus one and the loop limit, continue execution
 158+ 63AF              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 63AF              // parameters and continue execution immediately following the loop.
 160+ 63AF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 63AF             >
 160+ 63AF             >Dict_Ptr        defl    $
 160+ 63AF             >
 160+ 63AF             >//              ______________________________________________________________________
 160+ 63AF             >//              Heap part
 160+ 63AF             >
 160+ 63AF             >
 160+ 63AF             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E086             >
 160+ E086             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E086             >Latest_Definition defl  Heap_Ptr
 160+ E086             >
 160+ E086             >                // dummy db directives used to calculate length of namec
 160+ E086 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E08A 4F 50 29    >
 160+ E08D             >len_NFA         defl    $ - temp_NFA
 160+ E08D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E086             >
 160+ E086 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E087 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E08B 4F 50 29    >
 160+ E08E             >                org     $-1                 // alter last byte of Name just above to set
 160+ E08D A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E08E             >
 160+ E08E 7A 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E090             >Prev_Ptr        defl    Heap_Ptr
 160+ E090             >
 160+ E090             >mirror_Ptr      defl    $
 160+ E090             >
 160+ E090 B1 63       >                dw      Dict_Ptr + 2        // xt
 160+ E092             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E092             >
 160+ E092             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E092             >
 160+ E092             >//              ______________________________________________________________________
 160+ E092             >//              Dictionary part
 160+ E092             >
 160+ E092             >                org     Dict_Ptr
 160+ 63AF             >
 160+ 63AF 90 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 63B1             >
 160+ 63B1             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 63B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 63B1 ~           >
 160+ 63B1 ~           >
 160+ 63B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 63B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 63B1             >
 160+ 63B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 63B1
 162+ 63B1              Loop_Ptr:
 163+ 63B1 D5                           push    de
 164+ 63B2 D9                           exx
 165+ 63B3 E1                           pop     hl                  // HL is RP
 166+ 63B4 D1                           pop     de                  // DE get increment
 167+ 63B5 42                           ld      b, d                // bc is increment also
 168+ 63B6 4B                           ld      c, e
 169+ 63B7
 170+ 63B7 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 63B8 7B                           ld      a, e                // de keeps index before increment.
 172+ 63B9 81                           add     c
 173+ 63BA 77                           ld      (hl), a
 174+ 63BB 23                           inc     hl
 175+ 63BC 56                           ld      d, (hl)
 176+ 63BD 7A                           ld      a, d
 177+ 63BE 88                           adc     b
 178+ 63BF 77                           ld      (hl),a
 179+ 63C0 23                           inc     hl
 180+ 63C1
 181+ 63C1 7B                           ld      a, e
 182+ 63C2 96                           sub     (hl)
 183+ 63C3 5F                           ld      e, a
 184+ 63C4 23                           inc     hl
 185+ 63C5 7A                           ld      a, d
 186+ 63C6 9E                           sbc     (hl)
 187+ 63C7 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 63C8
 189+ 63C8 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 63C9 09                           add     hl, bc
 191+ 63CA CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 63CC 28 01                        jr      z, Loop_NegativeIncrement
 193+ 63CE 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 63CF              Loop_NegativeIncrement:
 195+ 63CF 38 0C                        jr      c, Loop_Endif
 196+ 63D1 D9                               exx                     // restore IP and RP
 197+ 63D2              Branch_Ptr:
 198+ 63D2 0A                               ld      a, (bc)
 199+ 63D3 6F                               ld      l, a
 200+ 63D4 03                               inc     bc
 201+ 63D5 0A                               ld      a, (bc)
 202+ 63D6 67                               ld      h, a
 203+ 63D7 0B                               dec     bc
 204+ 63D8 09                               add     hl, bc
 205+ 63D9 4D                               ld      c, l
 206+ 63DA 44                               ld      b, h
 207+ 63DB                                  next
 207+ 63DB DD E9       >                jp      (ix)
 208+ 63DD              Loop_Endif:
 209+ 63DD 13                           inc     de                  // keep    RP+4 (exit from loop)
 210+ 63DE D5                           push    de
 211+ 63DF D9                           exx
 212+ 63E0 D1                           pop     de
 213+ 63E1              End_Loop_Ptr:
 214+ 63E1 03                           inc     bc                  // skip branch-style offset
 215+ 63E2 03                           inc     bc
 216+ 63E3                              next
 216+ 63E3 DD E9       >                jp      (ix)
 217+ 63E5
 218+ 63E5              //  ______________________________________________________________________
 219+ 63E5              //
 220+ 63E5              // (loop)       n --
 221+ 63E5              // same as (LOOP) but index is incremented by 1
 222+ 63E5              // compiled by LOOP.
 223+ 63E5                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 223+ 63E5             >
 223+ 63E5             >Dict_Ptr        defl    $
 223+ 63E5             >
 223+ 63E5             >//              ______________________________________________________________________
 223+ 63E5             >//              Heap part
 223+ 63E5             >
 223+ 63E5             >
 223+ 63E5             >                org     (Heap_Ptr & $1FFF) + $E000
 223+ E092             >
 223+ E092             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ E092             >Latest_Definition defl  Heap_Ptr
 223+ E092             >
 223+ E092             >                // dummy db directives used to calculate length of namec
 223+ E092 28 4C 4F 4F >                db      "(LOOP)"
 223+ E096 50 29       >
 223+ E098             >len_NFA         defl    $ - temp_NFA
 223+ E098             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ E092             >
 223+ E092 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ E093 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 223+ E097 50 29       >
 223+ E099             >                org     $-1                 // alter last byte of Name just above to set
 223+ E098 A9          >                db      {b $} | END_BIT     // msb as name end
 223+ E099             >
 223+ E099 86 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 223+ E09B             >Prev_Ptr        defl    Heap_Ptr
 223+ E09B             >
 223+ E09B             >mirror_Ptr      defl    $
 223+ E09B             >
 223+ E09B E7 63       >                dw      Dict_Ptr + 2        // xt
 223+ E09D             >Heap_Ptr        defl    $ - $E000           // save current HP
 223+ E09D             >
 223+ E09D             >Current_HP      defl  $ - $E000             // used to set HP once!
 223+ E09D             >
 223+ E09D             >//              ______________________________________________________________________
 223+ E09D             >//              Dictionary part
 223+ E09D             >
 223+ E09D             >                org     Dict_Ptr
 223+ 63E5             >
 223+ 63E5 9B 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 223+ 63E7             >
 223+ 63E7             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 63E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 223+ 63E7 ~           >
 223+ 63E7 ~           >
 223+ 63E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 63E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 63E7             >
 223+ 63E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 63E7 ED 8A 00 01                  push    1
 225+ 63EB 18 C4                        jr      Loop_Ptr
 226+ 63ED
 227+ 63ED              //  ______________________________________________________________________
 228+ 63ED              //
 229+ 63ED              // branch       --
 230+ 63ED              // unconditional branch in colon definition using the following cell as an offset from current IP value
 231+ 63ED              // compiled by ELSE, AGAIN and some other immediate words
 232+ 63ED
 233+ 63ED                              New_Def BRANCH, "BRANCH", is_code, is_normal
 233+ 63ED             >
 233+ 63ED             >Dict_Ptr        defl    $
 233+ 63ED             >
 233+ 63ED             >//              ______________________________________________________________________
 233+ 63ED             >//              Heap part
 233+ 63ED             >
 233+ 63ED             >
 233+ 63ED             >                org     (Heap_Ptr & $1FFF) + $E000
 233+ E09D             >
 233+ E09D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ E09D             >Latest_Definition defl  Heap_Ptr
 233+ E09D             >
 233+ E09D             >                // dummy db directives used to calculate length of namec
 233+ E09D 42 52 41 4E >                db      "BRANCH"
 233+ E0A1 43 48       >
 233+ E0A3             >len_NFA         defl    $ - temp_NFA
 233+ E0A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ E09D             >
 233+ E09D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ E09E 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 233+ E0A2 43 48       >
 233+ E0A4             >                org     $-1                 // alter last byte of Name just above to set
 233+ E0A3 C8          >                db      {b $} | END_BIT     // msb as name end
 233+ E0A4             >
 233+ E0A4 92 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 233+ E0A6             >Prev_Ptr        defl    Heap_Ptr
 233+ E0A6             >
 233+ E0A6             >mirror_Ptr      defl    $
 233+ E0A6             >
 233+ E0A6 EF 63       >                dw      Dict_Ptr + 2        // xt
 233+ E0A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 233+ E0A8             >
 233+ E0A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 233+ E0A8             >
 233+ E0A8             >//              ______________________________________________________________________
 233+ E0A8             >//              Dictionary part
 233+ E0A8             >
 233+ E0A8             >                org     Dict_Ptr
 233+ 63ED             >
 233+ 63ED A6 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 233+ 63EF             >
 233+ 63EF             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 63EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 233+ 63EF ~           >
 233+ 63EF ~           >
 233+ 63EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 63EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 63EF             >
 233+ 63EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 63EF 18 E1                        jr Branch_Ptr
 235+ 63F1
 236+ 63F1
 237+ 63F1              //  ______________________________________________________________________
 238+ 63F1              //
 239+ 63F1              // 0branch      f --
 240+ 63F1              // conditional branch if the top-of-stack is ZERO or FALSE.
 241+ 63F1              // compiled by IF, UNTIL and some other immediate words
 242+ 63F1
 243+ 63F1                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 243+ 63F1             >
 243+ 63F1             >Dict_Ptr        defl    $
 243+ 63F1             >
 243+ 63F1             >//              ______________________________________________________________________
 243+ 63F1             >//              Heap part
 243+ 63F1             >
 243+ 63F1             >
 243+ 63F1             >                org     (Heap_Ptr & $1FFF) + $E000
 243+ E0A8             >
 243+ E0A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 243+ E0A8             >Latest_Definition defl  Heap_Ptr
 243+ E0A8             >
 243+ E0A8             >                // dummy db directives used to calculate length of namec
 243+ E0A8 30 42 52 41 >                db      "0BRANCH"
 243+ E0AC 4E 43 48    >
 243+ E0AF             >len_NFA         defl    $ - temp_NFA
 243+ E0AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 243+ E0A8             >
 243+ E0A8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 243+ E0A9 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 243+ E0AD 4E 43 48    >
 243+ E0B0             >                org     $-1                 // alter last byte of Name just above to set
 243+ E0AF C8          >                db      {b $} | END_BIT     // msb as name end
 243+ E0B0             >
 243+ E0B0 9D 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 243+ E0B2             >Prev_Ptr        defl    Heap_Ptr
 243+ E0B2             >
 243+ E0B2             >mirror_Ptr      defl    $
 243+ E0B2             >
 243+ E0B2 F3 63       >                dw      Dict_Ptr + 2        // xt
 243+ E0B4             >Heap_Ptr        defl    $ - $E000           // save current HP
 243+ E0B4             >
 243+ E0B4             >Current_HP      defl  $ - $E000             // used to set HP once!
 243+ E0B4             >
 243+ E0B4             >//              ______________________________________________________________________
 243+ E0B4             >//              Dictionary part
 243+ E0B4             >
 243+ E0B4             >                org     Dict_Ptr
 243+ 63F1             >
 243+ 63F1 B2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 243+ 63F3             >
 243+ 63F3             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 243+ 63F3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 243+ 63F3 ~           >
 243+ 63F3 ~           >
 243+ 63F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 243+ 63F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 243+ 63F3             >
 243+ 63F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 244+ 63F3              ZBranch_Ptr:
 245+ 63F3 E1                           pop     hl
 246+ 63F4 7D                           ld      a, l
 247+ 63F5 B4                           or      h
 248+ 63F6 28 DA                        jr      z, Branch_Ptr
 249+ 63F8 18 E7                        jr      End_Loop_Ptr
 250+ 63FA              //              inc     bc                  // skip branch-style offseet
 251+ 63FA              //              inc     bc
 252+ 63FA              //              next
 253+ 63FA
 254+ 63FA              //  ______________________________________________________________________
 255+ 63FA              //
 256+ 63FA              // (leave)        --
 257+ 63FA              // compiled by LEAVE
 258+ 63FA              // this forces to exit from loop and jump past
 259+ 63FA                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 259+ 63FA             >
 259+ 63FA             >Dict_Ptr        defl    $
 259+ 63FA             >
 259+ 63FA             >//              ______________________________________________________________________
 259+ 63FA             >//              Heap part
 259+ 63FA             >
 259+ 63FA             >
 259+ 63FA             >                org     (Heap_Ptr & $1FFF) + $E000
 259+ E0B4             >
 259+ E0B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 259+ E0B4             >Latest_Definition defl  Heap_Ptr
 259+ E0B4             >
 259+ E0B4             >                // dummy db directives used to calculate length of namec
 259+ E0B4 28 4C 45 41 >                db      "(LEAVE)"
 259+ E0B8 56 45 29    >
 259+ E0BB             >len_NFA         defl    $ - temp_NFA
 259+ E0BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 259+ E0B4             >
 259+ E0B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 259+ E0B5 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 259+ E0B9 56 45 29    >
 259+ E0BC             >                org     $-1                 // alter last byte of Name just above to set
 259+ E0BB A9          >                db      {b $} | END_BIT     // msb as name end
 259+ E0BC             >
 259+ E0BC A8 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 259+ E0BE             >Prev_Ptr        defl    Heap_Ptr
 259+ E0BE             >
 259+ E0BE             >mirror_Ptr      defl    $
 259+ E0BE             >
 259+ E0BE FC 63       >                dw      Dict_Ptr + 2        // xt
 259+ E0C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 259+ E0C0             >
 259+ E0C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 259+ E0C0             >
 259+ E0C0             >//              ______________________________________________________________________
 259+ E0C0             >//              Dictionary part
 259+ E0C0             >
 259+ E0C0             >                org     Dict_Ptr
 259+ 63FA             >
 259+ 63FA BE 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 259+ 63FC             >
 259+ 63FC             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 259+ 63FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 259+ 63FC ~           >
 259+ 63FC ~           >
 259+ 63FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 259+ 63FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 259+ 63FC             >
 259+ 63FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 260+ 63FC                              // ex      de, hl
 261+ 63FC                              // *** ldhlrp
 262+ 63FC 3E 04                        ld      a, 4
 263+ 63FE ED 32                        add     de, a
 264+ 6400                              // *** ldrphl
 265+ 6400                              // ex      de, hl
 266+ 6400 18 D0                        jr      Branch_Ptr       // perform branch consuming following cell
 267+ 6402                              next
 267+ 6402 DD E9       >                jp      (ix)
 268+ 6404
 269+ 6404              //  ______________________________________________________________________
 270+ 6404              //
 271+ 6404              // (?do)        lim ind --
 272+ 6404              // compiled by ?DO to make a loop checking for lim == ind first
 273+ 6404              // at run-time (?DO) must be followed by a BRANCH offset
 274+ 6404              // used to skip the loop if lim == ind
 275+ 6404                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 275+ 6404             >
 275+ 6404             >Dict_Ptr        defl    $
 275+ 6404             >
 275+ 6404             >//              ______________________________________________________________________
 275+ 6404             >//              Heap part
 275+ 6404             >
 275+ 6404             >
 275+ 6404             >                org     (Heap_Ptr & $1FFF) + $E000
 275+ E0C0             >
 275+ E0C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 275+ E0C0             >Latest_Definition defl  Heap_Ptr
 275+ E0C0             >
 275+ E0C0             >                // dummy db directives used to calculate length of namec
 275+ E0C0 28 3F 44 4F >                db      "(?DO)"
 275+ E0C4 29          >
 275+ E0C5             >len_NFA         defl    $ - temp_NFA
 275+ E0C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 275+ E0C0             >
 275+ E0C0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 275+ E0C1 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 275+ E0C5 29          >
 275+ E0C6             >                org     $-1                 // alter last byte of Name just above to set
 275+ E0C5 A9          >                db      {b $} | END_BIT     // msb as name end
 275+ E0C6             >
 275+ E0C6 B4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 275+ E0C8             >Prev_Ptr        defl    Heap_Ptr
 275+ E0C8             >
 275+ E0C8             >mirror_Ptr      defl    $
 275+ E0C8             >
 275+ E0C8 06 64       >                dw      Dict_Ptr + 2        // xt
 275+ E0CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 275+ E0CA             >
 275+ E0CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 275+ E0CA             >
 275+ E0CA             >//              ______________________________________________________________________
 275+ E0CA             >//              Dictionary part
 275+ E0CA             >
 275+ E0CA             >                org     Dict_Ptr
 275+ 6404             >
 275+ 6404 C8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 275+ 6406             >
 275+ 6406             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 275+ 6406 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 275+ 6406 ~           >
 275+ 6406 ~           >
 275+ 6406             >                endif           ; ok        // for other definitions it "points" the correct handler
 275+ 6406             >                // Use of "; ok" to suppress "warning[fwdref]"
 275+ 6406             >
 275+ 6406             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 276+ 6406 D9                           exx
 277+ 6407 D1                            pop     de                  // de has the index
 278+ 6408 E1                            pop     hl                  // hl has the limit
 279+ 6409 44                            ld      b, h
 280+ 640A 4D                            ld      c, l
 281+ 640B E5                            push    hl                  // put them back to stack for later
 282+ 640C D5                            push    de
 283+ 640D A7                            and     a                   // reset carry flag
 284+ 640E ED 52                         sbc     hl, de              // compute limit - index
 285+ 6410 D9                           exx
 286+ 6411 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 287+ 6413 E1                               pop     hl
 288+ 6414 E1                               pop     hl
 289+ 6415 18 BB                            jr      Branch_Ptr          // perform branch consuming following cell
 290+ 6417              Do_Ptr:
 291+ 6417                              // *** ldhlrp                 // prepare RP
 292+ 6417                              // *** ex      de, hl
 293+ 6417                              // dec     de
 294+ 6417                              // dec     de
 295+ 6417                              // dec     de
 296+ 6417                              // dec     de
 297+ 6417 ED 35 FC FF                  add     de, -4              // cannot use LD A,-4 and ADD DE,A !
 298+ 641B D5                           push    de                  // pass it to h'l'
 299+ 641C                              // *** ex      de, hl
 300+ 641C                              // *** ldrphl
 301+ 641C D9                           exx
 302+ 641D E1                            pop     hl
 303+ 641E
 304+ 641E                               // store index as top RP
 305+ 641E D1                            pop     de
 306+ 641F 73                            ld      (hl), e
 307+ 6420 23                            inc     hl
 308+ 6421 72                            ld      (hl), d
 309+ 6422 23                            inc     hl
 310+ 6423                               // stores lim as second from top RP
 311+ 6423 D1                            pop     de
 312+ 6424 73                            ld      (hl), e
 313+ 6425 23                            inc     hl
 314+ 6426 72                            ld      (hl), d
 315+ 6427 D9                           exx
 316+ 6428 18 B7                        jr      End_Loop_Ptr
 317+ 642A                              // skip branch-style offseet
 318+ 642A                          //  inc     bc
 319+ 642A                          //  inc     bc
 320+ 642A                          //  next
 321+ 642A
 322+ 642A              //  ______________________________________________________________________
 323+ 642A              //
 324+ 642A              // (do)        lim ind --
 325+ 642A              // compiled by DO to make a loop checking for lim == ind first
 326+ 642A              // this is a simpler version of (?DO)
 327+ 642A                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 642A             >
 327+ 642A             >Dict_Ptr        defl    $
 327+ 642A             >
 327+ 642A             >//              ______________________________________________________________________
 327+ 642A             >//              Heap part
 327+ 642A             >
 327+ 642A             >
 327+ 642A             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0CA             >
 327+ E0CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0CA             >Latest_Definition defl  Heap_Ptr
 327+ E0CA             >
 327+ E0CA             >                // dummy db directives used to calculate length of namec
 327+ E0CA 28 44 4F 29 >                db      "(DO)"
 327+ E0CE             >len_NFA         defl    $ - temp_NFA
 327+ E0CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0CA             >
 327+ E0CA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0CB 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0CF             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0CE A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0CF             >
 327+ E0CF C0 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0D1             >Prev_Ptr        defl    Heap_Ptr
 327+ E0D1             >
 327+ E0D1             >mirror_Ptr      defl    $
 327+ E0D1             >
 327+ E0D1 2C 64       >                dw      Dict_Ptr + 2        // xt
 327+ E0D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0D3             >
 327+ E0D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0D3             >
 327+ E0D3             >//              ______________________________________________________________________
 327+ E0D3             >//              Dictionary part
 327+ E0D3             >
 327+ E0D3             >                org     Dict_Ptr
 327+ 642A             >
 327+ 642A D1 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 642C             >
 327+ 642C             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 642C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 642C ~           >
 327+ 642C ~           >
 327+ 642C             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 642C             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 642C             >
 327+ 642C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 642C 0B                           dec     bc                  // prepare IP beforehand
 329+ 642D 0B                           dec     bc                  // to balance the two final 2 inc bc in (?do)
 330+ 642E 18 E7                        jr      Do_Ptr
 331+ 6430
 332+ 6430              //  ______________________________________________________________________
 333+ 6430              //
 334+ 6430              // i            -- n
 335+ 6430              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 6430              // the current value of the index-loop
 337+ 6430                              New_Def I, "I", is_code, is_normal
 337+ 6430             >
 337+ 6430             >Dict_Ptr        defl    $
 337+ 6430             >
 337+ 6430             >//              ______________________________________________________________________
 337+ 6430             >//              Heap part
 337+ 6430             >
 337+ 6430             >
 337+ 6430             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0D3             >
 337+ E0D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0D3             >Latest_Definition defl  Heap_Ptr
 337+ E0D3             >
 337+ E0D3             >                // dummy db directives used to calculate length of namec
 337+ E0D3 49          >                db      "I"
 337+ E0D4             >len_NFA         defl    $ - temp_NFA
 337+ E0D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0D3             >
 337+ E0D3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D4 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D5             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D4 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D5             >
 337+ E0D5 CA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D7             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D7             >
 337+ E0D7             >mirror_Ptr      defl    $
 337+ E0D7             >
 337+ E0D7 32 64       >                dw      Dict_Ptr + 2        // xt
 337+ E0D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0D9             >
 337+ E0D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0D9             >
 337+ E0D9             >//              ______________________________________________________________________
 337+ E0D9             >//              Dictionary part
 337+ E0D9             >
 337+ E0D9             >                org     Dict_Ptr
 337+ 6430             >
 337+ 6430 D7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 6432             >
 337+ 6432             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 6432 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 6432 ~           >
 337+ 6432 ~           >
 337+ 6432             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 6432             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 6432             >
 337+ 6432             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 6432              I_Ptr:
 339+ 6432 62                           ld      h, d
 340+ 6433 6B                           ld      l, e
 341+ 6434                              // *** ldhlrp
 342+ 6434              I_Ptr_prime:
 343+ 6434 7E                           ld      a, (hl)
 344+ 6435 23                           inc     hl
 345+ 6436 66                           ld      h, (hl)
 346+ 6437 6F                           ld      l, a
 347+ 6438 E5                           push    hl
 348+ 6439                              next
 348+ 6439 DD E9       >                jp      (ix)
 349+ 643B
 350+ 643B
 351+ 643B              //  ______________________________________________________________________
 352+ 643B              //
 353+ 643B              // i'            -- n
 354+ 643B              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 643B              // the limit of the index-loop
 356+ 643B
 357+ 643B                              New_Def II, "I'", is_code, is_normal
 357+ 643B             >
 357+ 643B             >Dict_Ptr        defl    $
 357+ 643B             >
 357+ 643B             >//              ______________________________________________________________________
 357+ 643B             >//              Heap part
 357+ 643B             >
 357+ 643B             >
 357+ 643B             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0D9             >
 357+ E0D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0D9             >Latest_Definition defl  Heap_Ptr
 357+ E0D9             >
 357+ E0D9             >                // dummy db directives used to calculate length of namec
 357+ E0D9 49 27       >                db      "I'"
 357+ E0DB             >len_NFA         defl    $ - temp_NFA
 357+ E0DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0D9             >
 357+ E0D9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0DA 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0DC             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0DB A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0DC             >
 357+ E0DC D3 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0DE             >Prev_Ptr        defl    Heap_Ptr
 357+ E0DE             >
 357+ E0DE             >mirror_Ptr      defl    $
 357+ E0DE             >
 357+ E0DE 3D 64       >                dw      Dict_Ptr + 2        // xt
 357+ E0E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0E0             >
 357+ E0E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0E0             >
 357+ E0E0             >//              ______________________________________________________________________
 357+ E0E0             >//              Dictionary part
 357+ E0E0             >
 357+ E0E0             >                org     Dict_Ptr
 357+ 643B             >
 357+ 643B DE 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 643D             >
 357+ 643D             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 643D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 643D ~           >
 357+ 643D ~           >
 357+ 643D             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 643D             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 643D             >
 357+ 643D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 643D 62                           ld      h, d
 359+ 643E 6B                           ld      l, e
 360+ 643F                              // *** ldhlrp
 361+ 643F 23                           inc     hl
 362+ 6440 23                           inc     hl
 363+ 6441 18 F1                        jr      I_Ptr_prime
 364+ 6443
 365+ 6443
 366+ 6443              //  ______________________________________________________________________
 367+ 6443              //
 368+ 6443              // digit        c n -- u tf  |  ff
 369+ 6443              // convert a character c using base n
 370+ 6443              // returns a unsigned number and a true flag
 371+ 6443              // or just a false flag if the conversion fails
 372+ 6443                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 6443             >
 372+ 6443             >Dict_Ptr        defl    $
 372+ 6443             >
 372+ 6443             >//              ______________________________________________________________________
 372+ 6443             >//              Heap part
 372+ 6443             >
 372+ 6443             >
 372+ 6443             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0E0             >
 372+ E0E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0E0             >Latest_Definition defl  Heap_Ptr
 372+ E0E0             >
 372+ E0E0             >                // dummy db directives used to calculate length of namec
 372+ E0E0 44 49 47 49 >                db      "DIGIT"
 372+ E0E4 54          >
 372+ E0E5             >len_NFA         defl    $ - temp_NFA
 372+ E0E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0E0             >
 372+ E0E0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0E1 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E5 54          >
 372+ E0E6             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E5 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E6             >
 372+ E0E6 D9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0E8             >Prev_Ptr        defl    Heap_Ptr
 372+ E0E8             >
 372+ E0E8             >mirror_Ptr      defl    $
 372+ E0E8             >
 372+ E0E8 45 64       >                dw      Dict_Ptr + 2        // xt
 372+ E0EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0EA             >
 372+ E0EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0EA             >
 372+ E0EA             >//              ______________________________________________________________________
 372+ E0EA             >//              Dictionary part
 372+ E0EA             >
 372+ E0EA             >                org     Dict_Ptr
 372+ 6443             >
 372+ 6443 E8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 6445             >
 372+ 6445             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 6445 ~           >
 372+ 6445 ~           >
 372+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 6445             >
 372+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 6445 D9                           exx
 374+ 6446 E1                           pop     hl                  // l has the base
 375+ 6447 D1                           pop     de                  // e has the digit
 376+ 6448 7B                           ld      a, e
 377+ 6449 FE 60                        cp      $60                 // check if lowercase
 378+ 644B 38 02                        jr      c, Digit_Uppercase
 379+ 644D D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 644F              Digit_Uppercase:
 381+ 644F D6 30                        sub     $30
 382+ 6451 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 6453 FE 0A                            cp      $0A
 384+ 6455 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 6457 D6 07                                sub     7                   // try hex and subtract 7
 386+ 6459 FE 0A                                cp      $0A
 387+ 645B 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 388+ 645D
 389+ 645D              Digit_Decimal:
 390+ 645D                              // compare digit
 391+ 645D BD                           cp      l                   // compare with base
 392+ 645E 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 6460 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 6461                              //  ld      hl, -1
 395+ 6461 ED 62                            sbc     hl, hl
 396+ 6463 D5                               push    de
 397+ 6464 E5                               push    hl
 398+ 6465 D9                               exx
 399+ 6466                                  next
 399+ 6466 DD E9       >                jp      (ix)
 400+ 6468              Digit_Fail:
 401+ 6468 21 00 00                     ld      hl, 0
 402+ 646B E5                           push    hl
 403+ 646C D9                           exx
 404+ 646D                              next
 404+ 646D DD E9       >                jp      (ix)
 405+ 646F
 406+ 646F              //  ______________________________________________________________________
 407+ 646F              //
 408+ 646F              //  parametric uppercase routine
 409+ 646F              //  depending on the following op-code the routine can be by-passed
 410+ 646F              //  changing the behaviour of some callers.
 411+ 646F              //  If it is "ret" then the system is Case-Sensitive
 412+ 646F              //  If it is "Nop" then the system is Case-Insensitive
 413+ 646F              //  Only A register is touched.
 414+ 646F 00           Case_Sensitive: nop                         // Default is case-insensitive.
 415+ 6470              Case_Upper:
 416+ 6470 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 417+ 6472 D8                           ret     c                   // no change if A < "a"
 418+ 6473 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 419+ 6475 D0                           ret     nc                  // no change if A > "z"
 420+ 6476 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 421+ 6478 C9                           ret
 422+ 6479
 423+ 6479              //  ______________________________________________________________________
 424+ 6479              //
 425+ 6479              //  caseon      --
 426+ 6479              // set system case-sensitivity on
 427+ 6479              // it patches a RET/NOP at the beginning of the uppercase-routine
 428+ 6479                              New_Def CASEON, "CASEON", is_code, is_normal
 428+ 6479             >
 428+ 6479             >Dict_Ptr        defl    $
 428+ 6479             >
 428+ 6479             >//              ______________________________________________________________________
 428+ 6479             >//              Heap part
 428+ 6479             >
 428+ 6479             >
 428+ 6479             >                org     (Heap_Ptr & $1FFF) + $E000
 428+ E0EA             >
 428+ E0EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ E0EA             >Latest_Definition defl  Heap_Ptr
 428+ E0EA             >
 428+ E0EA             >                // dummy db directives used to calculate length of namec
 428+ E0EA 43 41 53 45 >                db      "CASEON"
 428+ E0EE 4F 4E       >
 428+ E0F0             >len_NFA         defl    $ - temp_NFA
 428+ E0F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ E0EA             >
 428+ E0EA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ E0EB 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 428+ E0EF 4F 4E       >
 428+ E0F1             >                org     $-1                 // alter last byte of Name just above to set
 428+ E0F0 CE          >                db      {b $} | END_BIT     // msb as name end
 428+ E0F1             >
 428+ E0F1 E0 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 428+ E0F3             >Prev_Ptr        defl    Heap_Ptr
 428+ E0F3             >
 428+ E0F3             >mirror_Ptr      defl    $
 428+ E0F3             >
 428+ E0F3 7B 64       >                dw      Dict_Ptr + 2        // xt
 428+ E0F5             >Heap_Ptr        defl    $ - $E000           // save current HP
 428+ E0F5             >
 428+ E0F5             >Current_HP      defl  $ - $E000             // used to set HP once!
 428+ E0F5             >
 428+ E0F5             >//              ______________________________________________________________________
 428+ E0F5             >//              Dictionary part
 428+ E0F5             >
 428+ E0F5             >                org     Dict_Ptr
 428+ 6479             >
 428+ 6479 F3 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 428+ 647B             >
 428+ 647B             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 647B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 428+ 647B ~           >
 428+ 647B ~           >
 428+ 647B             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 647B             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 647B             >
 428+ 647B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 647B 3E C9                        ld      a, $C9              // "ret"
 430+ 647D 32 6F 64                     ld      (Case_Sensitive), a
 431+ 6480                              next
 431+ 6480 DD E9       >                jp      (ix)
 432+ 6482
 433+ 6482              //  ______________________________________________________________________
 434+ 6482              //
 435+ 6482              //  caseoff     --
 436+ 6482              // set system case-sensitivity on
 437+ 6482              // it patches a RET/NOP at the beginning of the uppercase-routine
 438+ 6482                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 438+ 6482             >
 438+ 6482             >Dict_Ptr        defl    $
 438+ 6482             >
 438+ 6482             >//              ______________________________________________________________________
 438+ 6482             >//              Heap part
 438+ 6482             >
 438+ 6482             >
 438+ 6482             >                org     (Heap_Ptr & $1FFF) + $E000
 438+ E0F5             >
 438+ E0F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 438+ E0F5             >Latest_Definition defl  Heap_Ptr
 438+ E0F5             >
 438+ E0F5             >                // dummy db directives used to calculate length of namec
 438+ E0F5 43 41 53 45 >                db      "CASEOFF"
 438+ E0F9 4F 46 46    >
 438+ E0FC             >len_NFA         defl    $ - temp_NFA
 438+ E0FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 438+ E0F5             >
 438+ E0F5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 438+ E0F6 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 438+ E0FA 4F 46 46    >
 438+ E0FD             >                org     $-1                 // alter last byte of Name just above to set
 438+ E0FC C6          >                db      {b $} | END_BIT     // msb as name end
 438+ E0FD             >
 438+ E0FD EA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 438+ E0FF             >Prev_Ptr        defl    Heap_Ptr
 438+ E0FF             >
 438+ E0FF             >mirror_Ptr      defl    $
 438+ E0FF             >
 438+ E0FF 84 64       >                dw      Dict_Ptr + 2        // xt
 438+ E101             >Heap_Ptr        defl    $ - $E000           // save current HP
 438+ E101             >
 438+ E101             >Current_HP      defl  $ - $E000             // used to set HP once!
 438+ E101             >
 438+ E101             >//              ______________________________________________________________________
 438+ E101             >//              Dictionary part
 438+ E101             >
 438+ E101             >                org     Dict_Ptr
 438+ 6482             >
 438+ 6482 FF 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 438+ 6484             >
 438+ 6484             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 438+ 6484 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 438+ 6484 ~           >
 438+ 6484 ~           >
 438+ 6484             >                endif           ; ok        // for other definitions it "points" the correct handler
 438+ 6484             >                // Use of "; ok" to suppress "warning[fwdref]"
 438+ 6484             >
 438+ 6484             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 439+ 6484 3E 00                        ld      a, $00              // "nop"
 440+ 6486 32 6F 64                     ld      (Case_Sensitive), a
 441+ 6489                              next
 441+ 6489 DD E9       >                jp      (ix)
 442+ 648B
 443+ 648B              //  ______________________________________________________________________
 444+ 648B              //
 445+ 648B              //  upper       c1 -- c1 | c2
 446+ 648B              // character on top of stack is forced to Uppercase.
 447+ 648B                              New_Def UPPER, "UPPER", is_code, is_normal
 447+ 648B             >
 447+ 648B             >Dict_Ptr        defl    $
 447+ 648B             >
 447+ 648B             >//              ______________________________________________________________________
 447+ 648B             >//              Heap part
 447+ 648B             >
 447+ 648B             >
 447+ 648B             >                org     (Heap_Ptr & $1FFF) + $E000
 447+ E101             >
 447+ E101             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 447+ E101             >Latest_Definition defl  Heap_Ptr
 447+ E101             >
 447+ E101             >                // dummy db directives used to calculate length of namec
 447+ E101 55 50 50 45 >                db      "UPPER"
 447+ E105 52          >
 447+ E106             >len_NFA         defl    $ - temp_NFA
 447+ E106             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 447+ E101             >
 447+ E101 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 447+ E102 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 447+ E106 52          >
 447+ E107             >                org     $-1                 // alter last byte of Name just above to set
 447+ E106 D2          >                db      {b $} | END_BIT     // msb as name end
 447+ E107             >
 447+ E107 F5 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 447+ E109             >Prev_Ptr        defl    Heap_Ptr
 447+ E109             >
 447+ E109             >mirror_Ptr      defl    $
 447+ E109             >
 447+ E109 8D 64       >                dw      Dict_Ptr + 2        // xt
 447+ E10B             >Heap_Ptr        defl    $ - $E000           // save current HP
 447+ E10B             >
 447+ E10B             >Current_HP      defl  $ - $E000             // used to set HP once!
 447+ E10B             >
 447+ E10B             >//              ______________________________________________________________________
 447+ E10B             >//              Dictionary part
 447+ E10B             >
 447+ E10B             >                org     Dict_Ptr
 447+ 648B             >
 447+ 648B 09 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 447+ 648D             >
 447+ 648D             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 447+ 648D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 447+ 648D ~           >
 447+ 648D ~           >
 447+ 648D             >                endif           ; ok        // for other definitions it "points" the correct handler
 447+ 648D             >                // Use of "; ok" to suppress "warning[fwdref]"
 447+ 648D             >
 447+ 648D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 448+ 648D E1                           pop     hl
 449+ 648E 7D                           ld      a, l
 450+ 648F CD 70 64                     call    Case_Upper
 451+ 6492 6F                           ld      l, a
 452+ 6493
 453+ 6493                              psh1
 453+ 6493 E5          >                push    hl
 453+ 6494 DD E9       >                jp      (ix)
 454+ 6496
 455+ 6496              //  ______________________________________________________________________
 456+ 6496
 457+ 6496              // This routine must be called with alternate registers active
 458+ 6496              // input: None
 459+ 6496              // Output: A = 8k-page number currently fitted at MMU7
 460+ 6496              MMU7_read:
 461+ 6496 3E 57                        ld      a, 87
 462+ 6498 01 3B 24                     ld      bc, $243B
 463+ 649B ED 79                        out     (c), a
 464+ 649D 04                           inc     b
 465+ 649E ED 78                        in      a, (c)
 466+ 64A0 C9                           ret
 467+ 64A1
 468+ 64A1              //  ______________________________________________________________________
 469+ 64A1
 470+ 64A1              // given an HP-pointer in input, turn it into page + offset
 471+ 64A1              // Input: HL = hp-pointer
 472+ 64A1              // Output: A = page,  HL = offset
 473+ 64A1              TO_FAR_rout:
 474+ 64A1 7C                           ld      a, h
 475+ 64A2 08                           ex      af, af
 476+ 64A3 7C                           ld      a, h
 477+ 64A4 F6 E0                        or      $E0
 478+ 64A6 67                           ld      h, a
 479+ 64A7 08                           ex      af, af
 480+ 64A8 07                           rlca
 481+ 64A9 07                           rlca
 482+ 64AA 07                           rlca
 483+ 64AB E6 07                        and     $07
 484+ 64AD C6 20                        add     $20
 485+ 64AF C9                           ret
 486+ 64B0
 487+ 64B0
 488+ 64B0              //  ______________________________________________________________________
 489+ 64B0              //
 490+ 64B0              // (find)       addr voc -- 0 | cfa b 1
 491+ 64B0              // vocabulary search,
 492+ 64B0              // - voc is starting word's NFA
 493+ 64B0              // - addr is the string to be searched for
 494+ 64B0              // On success, it returns the CFA of found word, the first NFA byte
 495+ 64B0              // (which contains length and some flags) and a true flag.
 496+ 64B0              // On fail, a false flag  (no more: leaves addr unchanged)
 497+ 64B0                              New_Def C_FIND, "(FIND)", is_code, is_normal
 497+ 64B0             >
 497+ 64B0             >Dict_Ptr        defl    $
 497+ 64B0             >
 497+ 64B0             >//              ______________________________________________________________________
 497+ 64B0             >//              Heap part
 497+ 64B0             >
 497+ 64B0             >
 497+ 64B0             >                org     (Heap_Ptr & $1FFF) + $E000
 497+ E10B             >
 497+ E10B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 497+ E10B             >Latest_Definition defl  Heap_Ptr
 497+ E10B             >
 497+ E10B             >                // dummy db directives used to calculate length of namec
 497+ E10B 28 46 49 4E >                db      "(FIND)"
 497+ E10F 44 29       >
 497+ E111             >len_NFA         defl    $ - temp_NFA
 497+ E111             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 497+ E10B             >
 497+ E10B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 497+ E10C 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 497+ E110 44 29       >
 497+ E112             >                org     $-1                 // alter last byte of Name just above to set
 497+ E111 A9          >                db      {b $} | END_BIT     // msb as name end
 497+ E112             >
 497+ E112 01 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 497+ E114             >Prev_Ptr        defl    Heap_Ptr
 497+ E114             >
 497+ E114             >mirror_Ptr      defl    $
 497+ E114             >
 497+ E114 B2 64       >                dw      Dict_Ptr + 2        // xt
 497+ E116             >Heap_Ptr        defl    $ - $E000           // save current HP
 497+ E116             >
 497+ E116             >Current_HP      defl  $ - $E000             // used to set HP once!
 497+ E116             >
 497+ E116             >//              ______________________________________________________________________
 497+ E116             >//              Dictionary part
 497+ E116             >
 497+ E116             >                org     Dict_Ptr
 497+ 64B0             >
 497+ 64B0 14 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 497+ 64B2             >
 497+ 64B2             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 497+ 64B2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 497+ 64B2 ~           >
 497+ 64B2 ~           >
 497+ 64B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 497+ 64B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 497+ 64B2             >
 497+ 64B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 498+ 64B2 D9                           exx
 499+ 64B3 CD 96 64                     call    MMU7_read
 500+ 64B6 D9                           exx
 501+ 64B7 6F                           ld      l, a
 502+ 64B8 D9                           exx
 503+ 64B9
 504+ 64B9 D1                           pop     de                      // de has dictionary pointer
 505+ 64BA              Find_VocabularyLoop:
 506+ 64BA 7A                               ld      a, d
 507+ 64BB D6 60                            sub     $60
 508+ 64BD 30 08                            jr      nc, Find_far_endif
 509+ 64BF EB                                   ex      de, hl
 510+ 64C0 CD A1 64                             call    TO_FAR_rout
 511+ 64C3 EB                                   ex      de, hl
 512+ 64C4 ED 92 57                             nextreg 87, a
 513+ 64C7              Find_far_endif:
 514+ 64C7 E1                               pop     hl                  // string pointer to search for
 515+ 64C8 E5                               push    hl                  // keep it on stack too for the end.
 516+ 64C9 1A                               ld      a, (de)             // save NFA length byte
 517+ 64CA 08                               ex      af,af'              // for later use (!)
 518+ 64CB 1A                               ld      a, (de)             // reload NFA length byte
 519+ 64CC AE                               xor     (hl)                // check if same length
 520+ 64CD E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 521+ 64CF                                  // word and text haven't the same length, skip to next vocabulary entry
 522+ 64CF 20 33                            jr      nz, Find_DifferentLenght
 523+ 64D1
 524+ 64D1              Find_ThisWord:      // begin loop
 525+ 64D1 23                                   inc     hl
 526+ 64D2 13                                   inc     de
 527+ 64D3 1A                                   ld      a, (de)
 528+ 64D4                                      // case insensitive option - begin
 529+ 64D4                                      // push    bc
 530+ 64D4 E6 80                                and     $80                 // split A in msb and the rest
 531+ 64D6 47                                   ld      b, a
 532+ 64D7 1A                                   ld      a, (de)
 533+ 64D8 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 534+ 64DA CD 6F 64                             call    Case_Sensitive      // uppercase routine
 535+ 64DD 4F                                   ld      c, a
 536+ 64DE 7E                                   ld      a, (hl)
 537+ 64DF CD 6F 64                             call    Case_Sensitive      // uppercase routine
 538+ 64E2 A9                                   xor     c
 539+ 64E3 A8                                   xor     b
 540+ 64E4                                      // pop     bc
 541+ 64E4                                      // case insensitive option - end
 542+ 64E4 87                                   add     a                   // ignore msb during compare
 543+ 64E5 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 544+ 64E7
 545+ 64E7                                  // loop back until last byte msb is found set
 546+ 64E7                                  // that bit marks the ending char of this word
 547+ 64E7 30 E8                            jr      nc, Find_ThisWord
 548+ 64E9
 549+ 64E9                                  // match found !
 550+ 64E9 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 551+ 64EC 19                               add     hl, de
 552+ 64ED
 553+ 64ED 5E                               ld      e, (hl)
 554+ 64EE 23                               inc     hl
 555+ 64EF 56                               ld      d, (hl)
 556+ 64F0 EB                               ex      de, hl
 557+ 64F1              //Non_MMU7:
 558+ 64F1 E3                               ex      (sp), hl            // CFA on stack and drop addr
 559+ 64F2 08                               ex      af, af'             // retrieve NFA byte (!)
 560+ 64F3 5F                               ld      e, a
 561+ 64F4 16 00                            ld      d, 0
 562+ 64F6 21 FF FF                         ld      hl, -1
 563+ 64F9 D5                               push    de
 564+ 64FA E5                               push    hl
 565+ 64FB D9                               exx
 566+ 64FC 7D                               ld      a, l
 567+ 64FD ED 92 57                         nextreg 87, a
 568+ 6500                                  next
 568+ 6500 DD E9       >                jp      (ix)
 569+ 6502
 570+ 6502              Find_DidntMatch: // didn't match (*)
 571+ 6502 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 572+ 6504
 573+ 6504              Find_DifferentLenght:
 574+ 6504                                  // consume chars until the end of the word
 575+ 6504                                  // that is last byte msb is found set
 576+ 6504 13                                   inc     de
 577+ 6505 1A                                   ld      a, (de)
 578+ 6506 87                                   add     a, a
 579+ 6507 30 FB                            jr      nc, Find_DifferentLenght
 580+ 6509
 581+ 6509              Find_WordEnd:   // word-end  found (**)
 582+ 6509                                  // take LFA and use it
 583+ 6509 13                               inc     de
 584+ 650A EB                               ex      de, hl
 585+ 650B 5E                               ld      e, (hl)
 586+ 650C 23                               inc     hl
 587+ 650D 56                               ld      d, (hl)
 588+ 650E 7A                               ld      a, d
 589+ 650F B3                               or      e
 590+ 6510
 591+ 6510                              // loop until end of vocabulary
 592+ 6510 20 A8                        jr      nz, Find_VocabularyLoop
 593+ 6512
 594+ 6512 E1                           pop     hl              // without this, leaves addr unchanged
 595+ 6513 21 00 00                     ld      hl, 0
 596+ 6516 E5                           push    hl
 597+ 6517 D9                           exx
 598+ 6518 7D                           ld      a, l
 599+ 6519 ED 92 57                     nextreg 87, a
 600+ 651C                              next
 600+ 651C DD E9       >                jp      (ix)
 601+ 651E
 602+ 651E              //  ______________________________________________________________________
 603+ 651E              //
 604+ 651E              // enclose      a c -- a  n1 n2 n3
 605+ 651E              // starting from a, using delimiter c, determines the offsets:
 606+ 651E              //   n1   the first character non-delimiter
 607+ 651E              //   n2   the first delimiter after the text
 608+ 651E              //   n3   the first character non enclosed.
 609+ 651E              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 610+ 651E              // an uncoditional delimiter.
 611+ 651E              // Examples:
 612+ 651E              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 613+ 651E              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 614+ 651E              // iii:	c  c  'nul'          -- 2  3  2
 615+ 651E                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 615+ 651E             >
 615+ 651E             >Dict_Ptr        defl    $
 615+ 651E             >
 615+ 651E             >//              ______________________________________________________________________
 615+ 651E             >//              Heap part
 615+ 651E             >
 615+ 651E             >
 615+ 651E             >                org     (Heap_Ptr & $1FFF) + $E000
 615+ E116             >
 615+ E116             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ E116             >Latest_Definition defl  Heap_Ptr
 615+ E116             >
 615+ E116             >                // dummy db directives used to calculate length of namec
 615+ E116 45 4E 43 4C >                db      "ENCLOSE"
 615+ E11A 4F 53 45    >
 615+ E11D             >len_NFA         defl    $ - temp_NFA
 615+ E11D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ E116             >
 615+ E116 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ E117 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 615+ E11B 4F 53 45    >
 615+ E11E             >                org     $-1                 // alter last byte of Name just above to set
 615+ E11D C5          >                db      {b $} | END_BIT     // msb as name end
 615+ E11E             >
 615+ E11E 0B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 615+ E120             >Prev_Ptr        defl    Heap_Ptr
 615+ E120             >
 615+ E120             >mirror_Ptr      defl    $
 615+ E120             >
 615+ E120 20 65       >                dw      Dict_Ptr + 2        // xt
 615+ E122             >Heap_Ptr        defl    $ - $E000           // save current HP
 615+ E122             >
 615+ E122             >Current_HP      defl  $ - $E000             // used to set HP once!
 615+ E122             >
 615+ E122             >//              ______________________________________________________________________
 615+ E122             >//              Dictionary part
 615+ E122             >
 615+ E122             >                org     Dict_Ptr
 615+ 651E             >
 615+ 651E 20 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 615+ 6520             >
 615+ 6520             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 6520 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 615+ 6520 ~           >
 615+ 6520 ~           >
 615+ 6520             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 6520             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 6520             >
 615+ 6520             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 6520 D9                           exx
 617+ 6521 D1                           pop     de                  //  e has the character
 618+ 6522 E1                           pop     hl                  // hl has the string address
 619+ 6523 E5                           push    hl
 620+ 6524 7B                           ld      a, e
 621+ 6525 11 FF FF                     ld      de, -1              // let's start from -1
 622+ 6528 2B                           dec     hl
 623+ 6529              Enclose_NonDelimiter:
 624+ 6529                              // find first non delimiter
 625+ 6529 23                               inc     hl
 626+ 652A 13                               inc     de
 627+ 652B BE                               cp      (hl)
 628+ 652C 28 FB                        jr      z, Enclose_NonDelimiter
 629+ 652E D5                           push    de
 630+ 652F
 631+ 652F                              // push    bc                  // save Instruction Pointer
 632+ 652F
 633+ 652F 4F                           ld      c, a                // save char
 634+ 6530 7E                           ld      a, (hl)
 635+ 6531 A7                           and     a                   // stop if 0x00
 636+ 6532 20 05                        jr      nz, Enclose_NextChar
 637+ 6534                              /// case iii. no more character in string
 638+ 6534                                  // pop     bc                  // restore Instruction Pointer
 639+ 6534 13                               inc     de
 640+ 6535 D5                               push    de
 641+ 6536 1B                               dec     de
 642+ 6537 18 0F                            jr      Enclose_common_ending
 643+ 6539                              //  push    de
 644+ 6539                              //  exx
 645+ 6539                              //  next
 646+ 6539              Enclose_NextChar:
 647+ 6539 79                               ld      a, c
 648+ 653A 23                               inc     hl
 649+ 653B 13                               inc     de
 650+ 653C BE                               cp      (hl)
 651+ 653D 20 04                            jr      nz, Enclose_NonSeparator
 652+ 653F                                      // case i. first non enclosed
 653+ 653F                                      // pop     bc                  // restore Instruction Pointer
 654+ 653F D5                                   push    de
 655+ 6540 13                                   inc     de
 656+ 6541 18 05                                jr      Enclose_common_ending
 657+ 6543                              //      push    de
 658+ 6543                              //      exx
 659+ 6543                              //      next
 660+ 6543              Enclose_NonSeparator:
 661+ 6543 7E                               ld      a, (hl)
 662+ 6544 A7                               and     a
 663+ 6545 20 F2                        jr      nz, Enclose_NextChar
 664+ 6547
 665+ 6547                              // case ii. separator & terminator
 666+ 6547                              // pop     bc                  // restore Instruction Pointer
 667+ 6547 D5                           push    de
 668+ 6548              Enclose_common_ending:
 669+ 6548 D5                           push    de
 670+ 6549 D9                           exx
 671+ 654A                              next
 671+ 654A DD E9       >                jp      (ix)
 672+ 654C
 673+ 654C              //  ______________________________________________________________________
 674+ 654C              //
 675+ 654C              // (map)        a2 a1 n c1 -- c2
 676+ 654C              // translate character c1 using mapping string a2 and a2
 677+ 654C              // if c1 is not present within string a1 then
 678+ 654C              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 679+ 654C                              New_Def C_MAP, "(MAP)", is_code, is_normal
 679+ 654C             >
 679+ 654C             >Dict_Ptr        defl    $
 679+ 654C             >
 679+ 654C             >//              ______________________________________________________________________
 679+ 654C             >//              Heap part
 679+ 654C             >
 679+ 654C             >
 679+ 654C             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E122             >
 679+ E122             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E122             >Latest_Definition defl  Heap_Ptr
 679+ E122             >
 679+ E122             >                // dummy db directives used to calculate length of namec
 679+ E122 28 4D 41 50 >                db      "(MAP)"
 679+ E126 29          >
 679+ E127             >len_NFA         defl    $ - temp_NFA
 679+ E127             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E122             >
 679+ E122 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E123 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 679+ E127 29          >
 679+ E128             >                org     $-1                 // alter last byte of Name just above to set
 679+ E127 A9          >                db      {b $} | END_BIT     // msb as name end
 679+ E128             >
 679+ E128 16 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E12A             >Prev_Ptr        defl    Heap_Ptr
 679+ E12A             >
 679+ E12A             >mirror_Ptr      defl    $
 679+ E12A             >
 679+ E12A 4E 65       >                dw      Dict_Ptr + 2        // xt
 679+ E12C             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E12C             >
 679+ E12C             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E12C             >
 679+ E12C             >//              ______________________________________________________________________
 679+ E12C             >//              Dictionary part
 679+ E12C             >
 679+ E12C             >                org     Dict_Ptr
 679+ 654C             >
 679+ 654C 2A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 654E             >
 679+ 654E             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 654E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 679+ 654E ~           >
 679+ 654E ~           >
 679+ 654E             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 654E             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 654E             >
 679+ 654E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 654E D9                           exx
 681+ 654F E1                           pop     hl
 682+ 6550 7D                           ld      a, l
 683+ 6551 C1                           pop     bc
 684+ 6552 E1                           pop     hl
 685+ 6553 50                           ld      d, b
 686+ 6554 59                           ld      e, c
 687+ 6555 ED B1                        cpir
 688+ 6557 E1                           pop     hl
 689+ 6558 20 05                        jr      nz, C_Map_Then
 689+ 655A
 690+ 655A 19                               add     hl, de
 691+ 655B 2B                               dec     hl
 692+ 655C ED 42                            sbc     hl, bc
 693+ 655E 7E                               ld      a, (hl)
 694+ 655F              C_Map_Then:
 695+ 655F 6F                           ld      l, a
 696+ 6560 26 00                        ld      h, 0
 697+ 6562 E5                           push    hl
 698+ 6563 D9                           exx
 699+ 6564                              next
 699+ 6564 DD E9       >                jp      (ix)
 700+ 6566
 701+ 6566              //  ______________________________________________________________________
 702+ 6566              //
 703+ 6566              // (compare)    a1 a2 n -- b
 704+ 6566              // this word performs a lexicographic compare of n bytes of text at address a1
 705+ 6566              // with n bytes of text at address a2. It returns numeric a value:
 706+ 6566              //  0 : if strings are equal
 707+ 6566              // +1 : if string at a1 greater than string at a2
 708+ 6566              // -1 : if string at a1 less than string at a2
 709+ 6566              // strings can be 256 bytes in length at most.
 710+ 6566                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 710+ 6566             >
 710+ 6566             >Dict_Ptr        defl    $
 710+ 6566             >
 710+ 6566             >//              ______________________________________________________________________
 710+ 6566             >//              Heap part
 710+ 6566             >
 710+ 6566             >
 710+ 6566             >                org     (Heap_Ptr & $1FFF) + $E000
 710+ E12C             >
 710+ E12C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 710+ E12C             >Latest_Definition defl  Heap_Ptr
 710+ E12C             >
 710+ E12C             >                // dummy db directives used to calculate length of namec
 710+ E12C 28 43 4F 4D >                db      "(COMPARE)"
 710+ E130 50 41 52 45 >
 710+ E134 29          >
 710+ E135             >len_NFA         defl    $ - temp_NFA
 710+ E135             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 710+ E12C             >
 710+ E12C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 710+ E12D 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 710+ E131 50 41 52 45 >
 710+ E135 29          >
 710+ E136             >                org     $-1                 // alter last byte of Name just above to set
 710+ E135 A9          >                db      {b $} | END_BIT     // msb as name end
 710+ E136             >
 710+ E136 22 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 710+ E138             >Prev_Ptr        defl    Heap_Ptr
 710+ E138             >
 710+ E138             >mirror_Ptr      defl    $
 710+ E138             >
 710+ E138 68 65       >                dw      Dict_Ptr + 2        // xt
 710+ E13A             >Heap_Ptr        defl    $ - $E000           // save current HP
 710+ E13A             >
 710+ E13A             >Current_HP      defl  $ - $E000             // used to set HP once!
 710+ E13A             >
 710+ E13A             >//              ______________________________________________________________________
 710+ E13A             >//              Dictionary part
 710+ E13A             >
 710+ E13A             >                org     Dict_Ptr
 710+ 6566             >
 710+ 6566 38 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 710+ 6568             >
 710+ 6568             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 710+ 6568 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 710+ 6568 ~           >
 710+ 6568 ~           >
 710+ 6568             >                endif           ; ok        // for other definitions it "points" the correct handler
 710+ 6568             >                // Use of "; ok" to suppress "warning[fwdref]"
 710+ 6568             >
 710+ 6568             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 711+ 6568 D9                           exx
 712+ 6569 E1                           pop     hl                  // Number of bytes
 713+ 656A 7D                           ld      a, l
 714+ 656B E1                           pop     hl                  // hl points string a2
 715+ 656C D1                           pop     de                  // hl points string a1
 716+ 656D              //              push    bc                  // Instruction pointer on stack
 717+ 656D 47                           ld      b, a
 718+ 656E              C_Compare_Loop:
 719+ 656E 7E                               ld      a, (hl)
 720+ 656F CD 6F 64                         call    Case_Sensitive
 721+ 6572 4F                               ld      c, a
 722+ 6573 1A                               ld      a, (de)
 723+ 6574 CD 6F 64                         call    Case_Sensitive
 724+ 6577 B9                               cp      c
 725+ 6578 13                               inc     de
 726+ 6579 23                               inc     hl
 727+ 657A 28 0A                            jr      z, C_Compare_Equal
 728+ 657C 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 729+ 657E 21 01 00                                 ld      hl, 1               // a1 gt a2
 730+ 6581 18 08                                jr      C_Compare_common_ending
 731+ 6583                                  //  jr      C_Compare_Then      // Else
 732+ 6583              C_Compare_NotLessThan:
 733+ 6583 21 FF FF                                 ld      hl, -1              // a1 lt a2
 734+ 6586              // C_Compare_Then:                                 // Endif
 735+ 6586              //                      pop     bc              // restore Instruction Pointer
 736+ 6586              //                      jr      C_Compare_common_ending
 737+ 6586                                  //  push    hl
 738+ 6586                                  //  exx
 739+ 6586                                  //  next
 740+ 6586
 741+ 6586              C_Compare_Equal:
 742+ 6586 10 E6                        djnz    C_Compare_Loop
 743+ 6588 21 00 00                     ld      hl, 0               // a1 eq a2
 744+ 658B              //              pop     bc                  // restore Instruction Pointer
 745+ 658B              C_Compare_common_ending:
 746+ 658B E5                           push    hl
 747+ 658C D9                           exx
 748+ 658D
 749+ 658D                              next
 749+ 658D DD E9       >                jp      (ix)
 750+ 658F
 751+ 658F              //  ______________________________________________________________________
 752+ 658F              //
 753+ 658F              // emitc        c --
 754+ 658F              // low level emit, calls ROM routine at #10 to send a character to
 755+ 658F              // the the current channel (see SELECT to change stream-channel)
 756+ 658F                              New_Def EMITC, "EMITC", is_code, is_normal
 756+ 658F             >
 756+ 658F             >Dict_Ptr        defl    $
 756+ 658F             >
 756+ 658F             >//              ______________________________________________________________________
 756+ 658F             >//              Heap part
 756+ 658F             >
 756+ 658F             >
 756+ 658F             >                org     (Heap_Ptr & $1FFF) + $E000
 756+ E13A             >
 756+ E13A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 756+ E13A             >Latest_Definition defl  Heap_Ptr
 756+ E13A             >
 756+ E13A             >                // dummy db directives used to calculate length of namec
 756+ E13A 45 4D 49 54 >                db      "EMITC"
 756+ E13E 43          >
 756+ E13F             >len_NFA         defl    $ - temp_NFA
 756+ E13F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 756+ E13A             >
 756+ E13A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 756+ E13B 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 756+ E13F 43          >
 756+ E140             >                org     $-1                 // alter last byte of Name just above to set
 756+ E13F C3          >                db      {b $} | END_BIT     // msb as name end
 756+ E140             >
 756+ E140 2C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 756+ E142             >Prev_Ptr        defl    Heap_Ptr
 756+ E142             >
 756+ E142             >mirror_Ptr      defl    $
 756+ E142             >
 756+ E142 91 65       >                dw      Dict_Ptr + 2        // xt
 756+ E144             >Heap_Ptr        defl    $ - $E000           // save current HP
 756+ E144             >
 756+ E144             >Current_HP      defl  $ - $E000             // used to set HP once!
 756+ E144             >
 756+ E144             >//              ______________________________________________________________________
 756+ E144             >//              Dictionary part
 756+ E144             >
 756+ E144             >                org     Dict_Ptr
 756+ 658F             >
 756+ 658F 42 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 756+ 6591             >
 756+ 6591             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 756+ 6591 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 756+ 6591 ~           >
 756+ 6591 ~           >
 756+ 6591             >                endif           ; ok        // for other definitions it "points" the correct handler
 756+ 6591             >                // Use of "; ok" to suppress "warning[fwdref]"
 756+ 6591             >
 756+ 6591             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 757+ 6591 E1                           pop     hl
 758+ 6592 7D                           ld      a, l
 759+ 6593              Emitc_Ptr:
 760+ 6593 C5                           push    bc
 761+ 6594 D5                           push    de
 762+ 6595 DD E5                        push    ix
 763+ 6597
 764+ 6597 D7                           rst     $10
 765+ 6598
 766+ 6598 DD E1                        pop     ix
 767+ 659A D1                           pop     de
 768+ 659B C1                           pop     bc
 769+ 659C 3E FF                        ld      a, 255            // max possible
 770+ 659E 32 8C 5C                     ld      (SCR_CT), a
 771+ 65A1                              next
 771+ 65A1 DD E9       >                jp      (ix)
 772+ 65A3
 773+ 65A3              //  ______________________________________________________________________
 774+ 65A3              //
 775+ 65A3              // cr           --
 776+ 65A3              // send a CR via EMITC
 777+ 65A3                              New_Def CR, "CR", is_code, is_normal
 777+ 65A3             >
 777+ 65A3             >Dict_Ptr        defl    $
 777+ 65A3             >
 777+ 65A3             >//              ______________________________________________________________________
 777+ 65A3             >//              Heap part
 777+ 65A3             >
 777+ 65A3             >
 777+ 65A3             >                org     (Heap_Ptr & $1FFF) + $E000
 777+ E144             >
 777+ E144             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 777+ E144             >Latest_Definition defl  Heap_Ptr
 777+ E144             >
 777+ E144             >                // dummy db directives used to calculate length of namec
 777+ E144 43 52       >                db      "CR"
 777+ E146             >len_NFA         defl    $ - temp_NFA
 777+ E146             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 777+ E144             >
 777+ E144 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 777+ E145 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 777+ E147             >                org     $-1                 // alter last byte of Name just above to set
 777+ E146 D2          >                db      {b $} | END_BIT     // msb as name end
 777+ E147             >
 777+ E147 3A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 777+ E149             >Prev_Ptr        defl    Heap_Ptr
 777+ E149             >
 777+ E149             >mirror_Ptr      defl    $
 777+ E149             >
 777+ E149 A5 65       >                dw      Dict_Ptr + 2        // xt
 777+ E14B             >Heap_Ptr        defl    $ - $E000           // save current HP
 777+ E14B             >
 777+ E14B             >Current_HP      defl  $ - $E000             // used to set HP once!
 777+ E14B             >
 777+ E14B             >//              ______________________________________________________________________
 777+ E14B             >//              Dictionary part
 777+ E14B             >
 777+ E14B             >                org     Dict_Ptr
 777+ 65A3             >
 777+ 65A3 49 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 777+ 65A5             >
 777+ 65A5             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 777+ 65A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 777+ 65A5 ~           >
 777+ 65A5 ~           >
 777+ 65A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 777+ 65A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 777+ 65A5             >
 777+ 65A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 778+ 65A5
 779+ 65A5 3E 0D                        ld      a, CR_CHAR
 780+ 65A7 18 EA                        jr      Emitc_Ptr
 781+ 65A9
 782+ 65A9              Emitc_Vec:
 783+ 65A9 E2 65                        dw      C_Emit_Printable  // comma
 784+ 65AB E9 65                        dw      C_Emit_Bel        // bel
 785+ 65AD E2 65                        dw      C_Emit_Printable  // bs
 786+ 65AF 01 66                        dw      C_Emit_Tab        // tab
 787+ 65B1 E2 65                        dw      C_Emit_Printable  // cr
 788+ 65B3 05 66                        dw      C_Emit_NL         // lf (unix newline)
 789+ 65B5 E2 65                        dw      C_Emit_Printable  // blank
 790+ 65B7 E2 65                        dw      C_Emit_Printable  // blank
 791+ 65B9
 792+ 65B9              Emit_Selector_Start:
 793+ 65B9 06                           db      $06                 // comma
 794+ 65BA 07                           db      $07                 // bel
 795+ 65BB 08                           db      $08                 // bs
 796+ 65BC 09                           db      $09                 // tab
 797+ 65BD 0D                           db      $0D                 // cr
 798+ 65BE 0A                           db      $0A                 // lf (unix newline)
 799+ 65BF 20                           db      $20
 800+ 65C0              Emit_Selector_End:
 801+ 65C0 20                           db      $20
 802+ 65C1
 803+ 65C1              //  ______________________________________________________________________
 804+ 65C1              //
 805+ 65C1              // (?emit)      c1 -- c2 | c1
 806+ 65C1              // decode a character to be sent via EMIT
 807+ 65C1              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 808+ 65C1              // the routine should resolve anything and convert the character anyway.
 809+ 65C1                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 809+ 65C1             >
 809+ 65C1             >Dict_Ptr        defl    $
 809+ 65C1             >
 809+ 65C1             >//              ______________________________________________________________________
 809+ 65C1             >//              Heap part
 809+ 65C1             >
 809+ 65C1             >
 809+ 65C1             >                org     (Heap_Ptr & $1FFF) + $E000
 809+ E14B             >
 809+ E14B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 809+ E14B             >Latest_Definition defl  Heap_Ptr
 809+ E14B             >
 809+ E14B             >                // dummy db directives used to calculate length of namec
 809+ E14B 28 3F 45 4D >                db      "(?EMIT)"
 809+ E14F 49 54 29    >
 809+ E152             >len_NFA         defl    $ - temp_NFA
 809+ E152             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 809+ E14B             >
 809+ E14B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 809+ E14C 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 809+ E150 49 54 29    >
 809+ E153             >                org     $-1                 // alter last byte of Name just above to set
 809+ E152 A9          >                db      {b $} | END_BIT     // msb as name end
 809+ E153             >
 809+ E153 44 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 809+ E155             >Prev_Ptr        defl    Heap_Ptr
 809+ E155             >
 809+ E155             >mirror_Ptr      defl    $
 809+ E155             >
 809+ E155 C3 65       >                dw      Dict_Ptr + 2        // xt
 809+ E157             >Heap_Ptr        defl    $ - $E000           // save current HP
 809+ E157             >
 809+ E157             >Current_HP      defl  $ - $E000             // used to set HP once!
 809+ E157             >
 809+ E157             >//              ______________________________________________________________________
 809+ E157             >//              Dictionary part
 809+ E157             >
 809+ E157             >                org     Dict_Ptr
 809+ 65C1             >
 809+ 65C1 55 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 809+ 65C3             >
 809+ 65C3             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 809+ 65C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 809+ 65C3 ~           >
 809+ 65C3 ~           >
 809+ 65C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 809+ 65C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 809+ 65C3             >
 809+ 65C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 810+ 65C3 D9                           exx
 811+ 65C4 D1                           pop     de
 812+ 65C5 7B                           ld      a, e                //  de has c1
 813+ 65C6 E6 7F                        and     $7F                 // 7-bit ascii only
 814+ 65C8                              // push    bc                  // save Instruction Pointer
 815+ 65C8 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 816+ 65CB 21 C0 65                     ld      hl, Emit_Selector_End
 817+ 65CE ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 818+ 65D0 20 0A                        jr      nz, C_Emit_Not_Found
 819+ 65D2                                  // Found then decode it
 820+ 65D2 21 A9 65                         ld      hl, Emitc_Vec
 821+ 65D5 09                               add     hl, bc
 822+ 65D6 09                               add     hl, bc
 823+ 65D7 5E                               ld      e, (hl)
 824+ 65D8 23                               inc     hl
 825+ 65D9 56                               ld      d, (hl)
 826+ 65DA EB                               ex      de, hl
 827+ 65DB                                  // pop     bc                  // restore Instruction Pointer
 828+ 65DB E9                               jp      (hl)                // one of the following labels
 829+ 65DC              C_Emit_Not_Found:
 830+ 65DC                              // pop     bc                  // restore Instruction Pointer
 831+ 65DC FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 832+ 65DE 30 02                        jr      nc, C_Emit_Printable
 833+ 65E0 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 834+ 65E2              C_Emit_Printable:
 835+ 65E2 6F                           ld      l, a
 836+ 65E3 26 00                        ld      h, 0
 837+ 65E5 E5                           push    hl
 838+ 65E6 D9                           exx
 839+ 65E7                              next
 839+ 65E7 DD E9       >                jp      (ix)
 840+ 65E9
 841+ 65E9              C_Emit_Bel:
 842+ 65E9 D9                            exx
 843+ 65EA C5                           push    bc                  // save Instruction Pointer
 844+ 65EB D5                           push    de
 845+ 65EC 11 00 01                     ld      de, $0100
 846+ 65EF 21 00 02                     ld      hl, $0200
 847+ 65F2 DD E5                        push    ix                  // save Next Pointer
 848+ 65F4 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 849+ 65F7
 850+ 65F7
 851+ 65F7
 852+ 65F7
 853+ 65F7 DD E1                        pop     ix                  // restore Next Pointer
 854+ 65F9 D1                           pop     de
 855+ 65FA C1                           pop     bc                  // restore Instruction Pointer
 856+ 65FB 21 00 00                     ld      hl, NUL_CHAR
 857+ 65FE E5                           push    hl
 858+ 65FF                              next
 858+ 65FF DD E9       >                jp      (ix)
 859+ 6601
 860+ 6601 3E 06        C_Emit_Tab:     ld      a, COMMA_CHAR
 861+ 6603 18 DD                        jr      C_Emit_Printable
 862+ 6605                          //  push    hl
 863+ 6605                          //  exx
 864+ 6605                          //  next
 865+ 6605
 866+ 6605 3E 0D        C_Emit_NL       ld      a, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 867+ 6607 18 D9                        jr      C_Emit_Printable
 868+ 6609                          //  push    hl
 869+ 6609                          //  exx
 870+ 6609                          //  next
 871+ 6609
 872+ 6609              //  ______________________________________________________________________
 873+ 6609
 874+ 6609              Key_Table:
 875+ 6609 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 876+ 660A C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 877+ 660B CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 878+ 660C CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 879+ 660D CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 880+ 660E C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 881+ 660F C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 882+ 6610 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 883+ 6611 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 884+ 6612 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 885+ 6613 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 886+ 6614              Key_MapTo:
 887+ 6614 18                           db      $18                 // 10: ^X
 888+ 6615 03                           db      $03                 //  9: ^C
 889+ 6616 1A                           db      $1A                 //  8: ^Z
 890+ 6617 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 891+ 6618 5D                           db      $5D                 //  6: SYMBOL+U : ]
 892+ 6619 5B                           db      $5B                 //  5: SYMBOL+Y : [
 893+ 661A 7D                           db      $7D                 //  4: SYMBOL+G : }
 894+ 661B 7B                           db      $7B                 //  3: SYMBOL+F : {
 895+ 661C 5C                           db      $5C                 //  2: SYMBOl+D : //
 896+ 661D 7C                           db      $7C                 //  1: SYMBOL+S : |
 897+ 661E 7E                           db      $7E                 //  0: SYMBOL+A : ~
 898+ 661F
 899+ 661F              //  ______________________________________________________________________
 900+ 661F              //
 901+ 661F              // curs         -- c
 902+ 661F              // wait for a keypress
 903+ 661F              // This definition need Standard ROM Interrupt to be served
 904+ 661F
 905+ 661F                              New_Def CUR, "CURS", is_code, is_normal
 905+ 661F             >
 905+ 661F             >Dict_Ptr        defl    $
 905+ 661F             >
 905+ 661F             >//              ______________________________________________________________________
 905+ 661F             >//              Heap part
 905+ 661F             >
 905+ 661F             >
 905+ 661F             >                org     (Heap_Ptr & $1FFF) + $E000
 905+ E157             >
 905+ E157             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 905+ E157             >Latest_Definition defl  Heap_Ptr
 905+ E157             >
 905+ E157             >                // dummy db directives used to calculate length of namec
 905+ E157 43 55 52 53 >                db      "CURS"
 905+ E15B             >len_NFA         defl    $ - temp_NFA
 905+ E15B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 905+ E157             >
 905+ E157 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 905+ E158 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 905+ E15C             >                org     $-1                 // alter last byte of Name just above to set
 905+ E15B D3          >                db      {b $} | END_BIT     // msb as name end
 905+ E15C             >
 905+ E15C 4B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 905+ E15E             >Prev_Ptr        defl    Heap_Ptr
 905+ E15E             >
 905+ E15E             >mirror_Ptr      defl    $
 905+ E15E             >
 905+ E15E 21 66       >                dw      Dict_Ptr + 2        // xt
 905+ E160             >Heap_Ptr        defl    $ - $E000           // save current HP
 905+ E160             >
 905+ E160             >Current_HP      defl  $ - $E000             // used to set HP once!
 905+ E160             >
 905+ E160             >//              ______________________________________________________________________
 905+ E160             >//              Dictionary part
 905+ E160             >
 905+ E160             >                org     Dict_Ptr
 905+ 661F             >
 905+ 661F 5E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 905+ 6621             >
 905+ 6621             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 905+ 6621 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 905+ 6621 ~           >
 905+ 6621 ~           >
 905+ 6621             >                endif           ; ok        // for other definitions it "points" the correct handler
 905+ 6621             >                // Use of "; ok" to suppress "warning[fwdref]"
 905+ 6621             >
 905+ 6621             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 906+ 6621
 907+ 6621 C5                           push    bc                  // save Instruction Pointer
 908+ 6622 D5                           push    de                  // save Return Stack Pointer
 909+ 6623 DD E5                        push    ix
 910+ 6625 ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 911+ 6629
 912+ 6629 31 61 63                     ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 913+ 662C FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 914+ 6630
 915+ 6630              Cur_Wait:
 916+ 6630 76                               halt
 917+ 6631 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 918+ 6633 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 919+ 6636
 920+ 6636
 921+ 6636
 922+ 6636                                  // software-flash: flips face every 320 ms
 923+ 6636 3E 20                            ld      a, $20              // Timing based
 924+ 6638 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 925+ 663B
 926+ 663B 3A 8E 63                         ld      a, (Block_Face)     // see origin.asm
 927+ 663E 20 0C                            jr      nz, Cur_Cursor
 928+ 6640 3A 8F 63                             ld      a, (Half_Face)      // see origin.asm
 929+ 6643 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 930+ 6647 28 03                                jr      z, Cur_Cursor
 931+ 6649 3A 90 63                                 ld      a, (Underscore_Face) // see origin
 932+ 664C              Cur_Cursor:
 933+ 664C D7                               rst     $10
 934+ 664D 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 935+ 664F D7                               rst     $10
 936+ 6650 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 937+ 6654 28 DA                        jr      z, Cur_Wait
 938+ 6656
 939+ 6656 76                           halt    // this is to sync flashing cursor.
 940+ 6657
 941+ 6657 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 942+ 6659 D7                           rst     $10
 943+ 665A 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 944+ 665C D7                           rst     $10
 945+ 665D
 946+ 665D ED 7B 92 63                  ld      sp, (SP_Saved)
 947+ 6661
 948+ 6661 DD E1                        pop     ix
 949+ 6663 D1                           pop     de                  // Restore Return Stack Pointer
 950+ 6664 C1                           pop     bc                  // Restore Instruction Pointer
 951+ 6665                              next
 951+ 6665 DD E9       >                jp      (ix)
 952+ 6667
 953+ 6667
 954+ 6667              //  ______________________________________________________________________
 955+ 6667              //
 956+ 6667              // key          -- c
 957+ 6667              // This definition need Standard ROM Interrupt to be served
 958+ 6667
 959+ 6667                              New_Def KEY, "KEY", is_code, is_normal
 959+ 6667             >
 959+ 6667             >Dict_Ptr        defl    $
 959+ 6667             >
 959+ 6667             >//              ______________________________________________________________________
 959+ 6667             >//              Heap part
 959+ 6667             >
 959+ 6667             >
 959+ 6667             >                org     (Heap_Ptr & $1FFF) + $E000
 959+ E160             >
 959+ E160             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 959+ E160             >Latest_Definition defl  Heap_Ptr
 959+ E160             >
 959+ E160             >                // dummy db directives used to calculate length of namec
 959+ E160 4B 45 59    >                db      "KEY"
 959+ E163             >len_NFA         defl    $ - temp_NFA
 959+ E163             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 959+ E160             >
 959+ E160 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 959+ E161 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 959+ E164             >                org     $-1                 // alter last byte of Name just above to set
 959+ E163 D9          >                db      {b $} | END_BIT     // msb as name end
 959+ E164             >
 959+ E164 57 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 959+ E166             >Prev_Ptr        defl    Heap_Ptr
 959+ E166             >
 959+ E166             >mirror_Ptr      defl    $
 959+ E166             >
 959+ E166 69 66       >                dw      Dict_Ptr + 2        // xt
 959+ E168             >Heap_Ptr        defl    $ - $E000           // save current HP
 959+ E168             >
 959+ E168             >Current_HP      defl  $ - $E000             // used to set HP once!
 959+ E168             >
 959+ E168             >//              ______________________________________________________________________
 959+ E168             >//              Dictionary part
 959+ E168             >
 959+ E168             >                org     Dict_Ptr
 959+ 6667             >
 959+ 6667 66 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 959+ 6669             >
 959+ 6669             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 959+ 6669 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 959+ 6669 ~           >
 959+ 6669 ~           >
 959+ 6669             >                endif           ; ok        // for other definitions it "points" the correct handler
 959+ 6669             >                // Use of "; ok" to suppress "warning[fwdref]"
 959+ 6669             >
 959+ 6669             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 960+ 6669
 961+ 6669 C5                           push    bc                  // Save Instruction Pointer
 962+ 666A
 963+ 666A              Key_Wait:
 964+ 666A FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 965+ 666E 28 FA                        jr      z, Key_Wait
 966+ 6670
 967+ 6670 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 968+ 6673
 969+ 6673                              // decode character from above table
 970+ 6673 21 09 66                     ld      hl, Key_Table
 971+ 6676 01 0B 00                     ld      bc, $000B
 972+ 6679 ED B1                        cpir
 973+ 667B 20 05                        jr      nz, Key_DontMap
 974+ 667D 21 14 66                         ld      hl, Key_MapTo
 975+ 6680 09                               add     hl, bc
 976+ 6681 7E                               ld      a, (hl)
 977+ 6682 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 978+ 6684 20 09                        jr      nz, Key_NoCapsLock
 979+ 6686 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 980+ 6689 7E                               ld      a, (hl)
 981+ 668A EE 08                            xor     $08
 982+ 668C 77                               ld      (hl), a
 983+ 668D 3E 00                            ld      a, NUL_CHAR
 984+ 668F 6F           Key_NoCapsLock: ld      l, a
 985+ 6690 26 00                        ld      h, 0                // Prepare TOS
 986+ 6692
 987+ 6692 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 988+ 6696
 989+ 6696 C1                           pop     bc                  // Restore Instruction Pointer
 990+ 6697
 991+ 6697                              psh1
 991+ 6697 E5          >                push    hl
 991+ 6698 DD E9       >                jp      (ix)
 992+ 669A
 993+ 669A
 994+ 669A              //  ______________________________________________________________________
 995+ 669A              //
 996+ 669A              // click        --
 997+ 669A              // This definition need Standard ROM Interrupt to be served
 998+ 669A              //
 999+ 669A              //              New_Def CLICK, "CLICK", is_code, is_normal
1000+ 669A              //
1001+ 669A              //                push    bc
1002+ 669A              //              ld      a, ($5C48)          // BORDCR system variable
1003+ 669A              //              rra
1004+ 669A              //              rra
1005+ 669A              //              rra
1006+ 669A              //              or      $18                 // quick'n'dirty click
1007+ 669A              //              out     ($fe), a
1008+ 669A              //              ld      b, 0
1009+ 669A              //              djnz    $                   // wait loop
1010+ 669A              //              xor     $18
1011+ 669A              //              out     ($fe), a
1012+ 669A              //                pop     bc
1013+ 669A
1014+ 669A              //              next
1015+ 669A
1016+ 669A              //  ______________________________________________________________________
1017+ 669A              //
1018+ 669A              // key?         -- f
1019+ 669A              // key available
1020+ 669A              //
1021+ 669A              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1022+ 669A              //
1023+ 669A              //              ld      hl, 0000
1024+ 669A              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1025+ 669A              //              jr      z, Key_Q
1026+ 669A              //                  dec     hl
1027+ 669A              // Key_Q:
1028+ 669A              //                psh1
1029+ 669A              //              next
1030+ 669A
1031+ 669A              //  ______________________________________________________________________
1032+ 669A              //
1033+ 669A              // ?terminal    -- FALSE | TRUE
1034+ 669A              // test for BREAK keypress
1035+ 669A                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1035+ 669A             >
1035+ 669A             >Dict_Ptr        defl    $
1035+ 669A             >
1035+ 669A             >//              ______________________________________________________________________
1035+ 669A             >//              Heap part
1035+ 669A             >
1035+ 669A             >
1035+ 669A             >                org     (Heap_Ptr & $1FFF) + $E000
1035+ E168             >
1035+ E168             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1035+ E168             >Latest_Definition defl  Heap_Ptr
1035+ E168             >
1035+ E168             >                // dummy db directives used to calculate length of namec
1035+ E168 3F 54 45 52 >                db      "?TERMINAL"
1035+ E16C 4D 49 4E 41 >
1035+ E170 4C          >
1035+ E171             >len_NFA         defl    $ - temp_NFA
1035+ E171             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1035+ E168             >
1035+ E168 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1035+ E169 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1035+ E16D 4D 49 4E 41 >
1035+ E171 4C          >
1035+ E172             >                org     $-1                 // alter last byte of Name just above to set
1035+ E171 CC          >                db      {b $} | END_BIT     // msb as name end
1035+ E172             >
1035+ E172 60 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1035+ E174             >Prev_Ptr        defl    Heap_Ptr
1035+ E174             >
1035+ E174             >mirror_Ptr      defl    $
1035+ E174             >
1035+ E174 9C 66       >                dw      Dict_Ptr + 2        // xt
1035+ E176             >Heap_Ptr        defl    $ - $E000           // save current HP
1035+ E176             >
1035+ E176             >Current_HP      defl  $ - $E000             // used to set HP once!
1035+ E176             >
1035+ E176             >//              ______________________________________________________________________
1035+ E176             >//              Dictionary part
1035+ E176             >
1035+ E176             >                org     Dict_Ptr
1035+ 669A             >
1035+ 669A 74 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1035+ 669C             >
1035+ 669C             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1035+ 669C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1035+ 669C ~           >
1035+ 669C ~           >
1035+ 669C             >                endif           ; ok        // for other definitions it "points" the correct handler
1035+ 669C             >                // Use of "; ok" to suppress "warning[fwdref]"
1035+ 669C             >
1035+ 669C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1036+ 669C D9                           exx
1037+ 669D 01 FE 7F                     ld      bc, $7ffe
1038+ 66A0 ED 50                        in      d, (c)
1039+ 66A2 41                           ld      b, c
1040+ 66A3 ED 78                        in      a, (c)
1041+ 66A5 B2                           or       d
1042+ 66A6 1F                           rra
1043+ 66A7 3F                           ccf
1044+ 66A8 ED 62                        sbc     hl, hl
1045+ 66AA E5                           push    hl
1046+ 66AB D9                           exx
1047+ 66AC                              next
1047+ 66AC DD E9       >                jp      (ix)
1048+ 66AE
1049+ 66AE
1050+ 66AE              //  ______________________________________________________________________
1051+ 66AE              //
1052+ 66AE              // inkey        -- c | 0
1053+ 66AE              // call ROM inkey$ routine, returns c or "zero".
1054+ 66AE              //
1055+ 66AE              //              New_Def INKEY, "INKEY", is_code, is_normal
1056+ 66AE              //              push    bc
1057+ 66AE              //              push    de
1058+ 66AE              //              ld      (SP_Saved), sp
1059+ 66AE              //              ld      sp, Cold_origin - 5
1060+ 66AE              //              push    ix
1061+ 66AE              //              call    $15E6                   // instead of 15E9
1062+ 66AE              //              pop     ix
1063+ 66AE              //              ld      sp, (SP_Saved)
1064+ 66AE              //              ld      l, a
1065+ 66AE              //              ld      h, 0
1066+ 66AE              //              pop     de
1067+ 66AE              //              pop     bc
1068+ 66AE              //              psh1
1069+ 66AE
1070+ 66AE              //  ______________________________________________________________________
1071+ 66AE              //
1072+ 66AE              // select      n --
1073+ 66AE              // selects the given channel number
1074+ 66AE
1075+ 66AE                              New_Def SELECT, "SELECT", is_code, is_normal
1075+ 66AE             >
1075+ 66AE             >Dict_Ptr        defl    $
1075+ 66AE             >
1075+ 66AE             >//              ______________________________________________________________________
1075+ 66AE             >//              Heap part
1075+ 66AE             >
1075+ 66AE             >
1075+ 66AE             >                org     (Heap_Ptr & $1FFF) + $E000
1075+ E176             >
1075+ E176             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1075+ E176             >Latest_Definition defl  Heap_Ptr
1075+ E176             >
1075+ E176             >                // dummy db directives used to calculate length of namec
1075+ E176 53 45 4C 45 >                db      "SELECT"
1075+ E17A 43 54       >
1075+ E17C             >len_NFA         defl    $ - temp_NFA
1075+ E17C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1075+ E176             >
1075+ E176 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1075+ E177 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1075+ E17B 43 54       >
1075+ E17D             >                org     $-1                 // alter last byte of Name just above to set
1075+ E17C D4          >                db      {b $} | END_BIT     // msb as name end
1075+ E17D             >
1075+ E17D 68 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1075+ E17F             >Prev_Ptr        defl    Heap_Ptr
1075+ E17F             >
1075+ E17F             >mirror_Ptr      defl    $
1075+ E17F             >
1075+ E17F B0 66       >                dw      Dict_Ptr + 2        // xt
1075+ E181             >Heap_Ptr        defl    $ - $E000           // save current HP
1075+ E181             >
1075+ E181             >Current_HP      defl  $ - $E000             // used to set HP once!
1075+ E181             >
1075+ E181             >//              ______________________________________________________________________
1075+ E181             >//              Dictionary part
1075+ E181             >
1075+ E181             >                org     Dict_Ptr
1075+ 66AE             >
1075+ 66AE 7F 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1075+ 66B0             >
1075+ 66B0             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1075+ 66B0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1075+ 66B0 ~           >
1075+ 66B0 ~           >
1075+ 66B0             >                endif           ; ok        // for other definitions it "points" the correct handler
1075+ 66B0             >                // Use of "; ok" to suppress "warning[fwdref]"
1075+ 66B0             >
1075+ 66B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1076+ 66B0 E1                           pop     hl
1077+ 66B1 C5                           push    bc
1078+ 66B2 D5                           push    de
1079+ 66B3 7D                           ld      a, l
1080+ 66B4 ED 73 92 63                  ld      (SP_Saved), sp
1081+ 66B8 31 61 63                     ld      sp, Cold_origin - 5
1082+ 66BB
1083+ 66BB DD E5                        push    ix
1084+ 66BD CD 01 16                     call    $1601
1085+ 66C0
1086+ 66C0
1087+ 66C0
1088+ 66C0
1089+ 66C0 DD E1                        pop     ix
1090+ 66C2 ED 7B 92 63                  ld      sp, (SP_Saved)
1091+ 66C6 D1                           pop     de
1092+ 66C7 C1                           pop     bc
1093+ 66C8                              next
1093+ 66C8 DD E9       >                jp      (ix)
1094+ 66CA
1095+ 66CA              //  ______________________________________________________________________
1096+ 66CA              //
1097+ 66CA              // ZX Spectrum Next - Low Level disk primitives.
1098+ 66CA              // this include is "here" for backward compatibility
1099+ 66CA
1100+ 66CA                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/next-opt0.asm
   1++66CA              //  ______________________________________________________________________
   2++66CA              //
   3++66CA              //  next-opt.asm
   4++66CA              //
   5++66CA              //  ZX Spectrum Next - peculiar definitions
   6++66CA              //  ______________________________________________________________________
   7++66CA
   8++66CA              //  ______________________________________________________________________
   9++66CA              //
  10++66CA              // f_seek       d u -- f
  11++66CA              // Seek to position d in file-handle u.
  12++66CA              // Return a false-flag 0 on success, True flag on error
  13++66CA                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++66CA             >
  13++66CA             >Dict_Ptr        defl    $
  13++66CA             >
  13++66CA             >//              ______________________________________________________________________
  13++66CA             >//              Heap part
  13++66CA             >
  13++66CA             >
  13++66CA             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E181             >
  13++E181             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E181             >Latest_Definition defl  Heap_Ptr
  13++E181             >
  13++E181             >                // dummy db directives used to calculate length of namec
  13++E181 46 5F 53 45 >                db      "F_SEEK"
  13++E185 45 4B       >
  13++E187             >len_NFA         defl    $ - temp_NFA
  13++E187             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E181             >
  13++E181 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E182 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E186 45 4B       >
  13++E188             >                org     $-1                 // alter last byte of Name just above to set
  13++E187 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E188             >
  13++E188 76 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E18A             >Prev_Ptr        defl    Heap_Ptr
  13++E18A             >
  13++E18A             >mirror_Ptr      defl    $
  13++E18A             >
  13++E18A CC 66       >                dw      Dict_Ptr + 2        // xt
  13++E18C             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E18C             >
  13++E18C             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E18C             >
  13++E18C             >//              ______________________________________________________________________
  13++E18C             >//              Dictionary part
  13++E18C             >
  13++E18C             >                org     Dict_Ptr
  13++66CA             >
  13++66CA 8A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++66CC             >
  13++66CC             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++66CC ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++66CC ~           >
  13++66CC ~           >
  13++66CC             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++66CC             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++66CC             >
  13++66CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++66CC D9                            exx
  15++66CD E1                            pop     hl                  // file-handle
  16++66CE 7D                            ld      a, l
  17++66CF C1                            pop     bc                  // bc has high-word of d
  18++66D0 D1                            pop     de
  19++66D1 D9                           exx
  20++66D2 DD E5                        push    ix
  21++66D4 D5                           push    de
  22++66D5 C5                           push    bc                  // save Instruction Pointer
  23++66D6 D9                            exx
  24++66D7 DD 21 00 00                   ld      ix, 0
  25++66DB F3                            di
  26++66DC CF                            rst     $08
  27++66DD 9F                            db      $9F
  28++66DE              F_Seek_Exit:
  29++66DE FB                           ei
  30++66DF C1                           pop     bc                  // restore Instruction Pointer
  31++66E0 D1                           pop     de
  32++66E1 DD E1                        pop     ix
  33++66E3 ED 62                        sbc     hl, hl              // to get 0 or -1
  34++66E5                              psh1
  34++66E5 E5          >                push    hl
  34++66E6 DD E9       >                jp      (ix)
  35++66E8
  36++66E8              //  ______________________________________________________________________
  37++66E8              //
  38++66E8              // f_close      u -- f
  39++66E8              // Close file-handle u.
  40++66E8              // Return 0 on success, True flag on error
  41++66E8
  42++66E8                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  42++66E8             >
  42++66E8             >Dict_Ptr        defl    $
  42++66E8             >
  42++66E8             >//              ______________________________________________________________________
  42++66E8             >//              Heap part
  42++66E8             >
  42++66E8             >
  42++66E8             >                org     (Heap_Ptr & $1FFF) + $E000
  42++E18C             >
  42++E18C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42++E18C             >Latest_Definition defl  Heap_Ptr
  42++E18C             >
  42++E18C             >                // dummy db directives used to calculate length of namec
  42++E18C 46 5F 43 4C >                db      "F_CLOSE"
  42++E190 4F 53 45    >
  42++E193             >len_NFA         defl    $ - temp_NFA
  42++E193             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42++E18C             >
  42++E18C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42++E18D 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  42++E191 4F 53 45    >
  42++E194             >                org     $-1                 // alter last byte of Name just above to set
  42++E193 C5          >                db      {b $} | END_BIT     // msb as name end
  42++E194             >
  42++E194 81 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42++E196             >Prev_Ptr        defl    Heap_Ptr
  42++E196             >
  42++E196             >mirror_Ptr      defl    $
  42++E196             >
  42++E196 EA 66       >                dw      Dict_Ptr + 2        // xt
  42++E198             >Heap_Ptr        defl    $ - $E000           // save current HP
  42++E198             >
  42++E198             >Current_HP      defl  $ - $E000             // used to set HP once!
  42++E198             >
  42++E198             >//              ______________________________________________________________________
  42++E198             >//              Dictionary part
  42++E198             >
  42++E198             >                org     Dict_Ptr
  42++66E8             >
  42++66E8 96 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  42++66EA             >
  42++66EA             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42++66EA ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42++66EA ~           >
  42++66EA ~           >
  42++66EA             >                endif           ; ok        // for other definitions it "points" the correct handler
  42++66EA             >                // Use of "; ok" to suppress "warning[fwdref]"
  42++66EA             >
  42++66EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43++66EA
  44++66EA E1                           pop     hl
  45++66EB 7D                           ld      a, l                // file-handle
  46++66EC DD E5                        push    ix
  47++66EE D5                           push    de
  48++66EF C5                           push    bc                  // Save Instruction pointer
  49++66F0 F3                           di
  50++66F1 CF                           rst     $08
  51++66F2 9B                           db      $9B
  52++66F3 18 E9                        jr      F_Seek_Exit
  53++66F5              //              ei
  54++66F5              //              pop     de
  55++66F5              //              pop     bc
  56++66F5              //              pop     ix
  57++66F5              //              sbc     hl, hl
  58++66F5              //              psh1
  59++66F5
  60++66F5              //  ______________________________________________________________________
  61++66F5              //
  62++66F5              // f_sync      u -- f
  63++66F5              // Close file-handle u.
  64++66F5              // Return 0 on success, True flag on error
  65++66F5
  66++66F5                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  66++66F5             >
  66++66F5             >Dict_Ptr        defl    $
  66++66F5             >
  66++66F5             >//              ______________________________________________________________________
  66++66F5             >//              Heap part
  66++66F5             >
  66++66F5             >
  66++66F5             >                org     (Heap_Ptr & $1FFF) + $E000
  66++E198             >
  66++E198             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  66++E198             >Latest_Definition defl  Heap_Ptr
  66++E198             >
  66++E198             >                // dummy db directives used to calculate length of namec
  66++E198 46 5F 53 59 >                db      "F_SYNC"
  66++E19C 4E 43       >
  66++E19E             >len_NFA         defl    $ - temp_NFA
  66++E19E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  66++E198             >
  66++E198 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  66++E199 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  66++E19D 4E 43       >
  66++E19F             >                org     $-1                 // alter last byte of Name just above to set
  66++E19E C3          >                db      {b $} | END_BIT     // msb as name end
  66++E19F             >
  66++E19F 8C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  66++E1A1             >Prev_Ptr        defl    Heap_Ptr
  66++E1A1             >
  66++E1A1             >mirror_Ptr      defl    $
  66++E1A1             >
  66++E1A1 F7 66       >                dw      Dict_Ptr + 2        // xt
  66++E1A3             >Heap_Ptr        defl    $ - $E000           // save current HP
  66++E1A3             >
  66++E1A3             >Current_HP      defl  $ - $E000             // used to set HP once!
  66++E1A3             >
  66++E1A3             >//              ______________________________________________________________________
  66++E1A3             >//              Dictionary part
  66++E1A3             >
  66++E1A3             >                org     Dict_Ptr
  66++66F5             >
  66++66F5 A1 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  66++66F7             >
  66++66F7             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  66++66F7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  66++66F7 ~           >
  66++66F7 ~           >
  66++66F7             >                endif           ; ok        // for other definitions it "points" the correct handler
  66++66F7             >                // Use of "; ok" to suppress "warning[fwdref]"
  66++66F7             >
  66++66F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  67++66F7 E1                           pop     hl
  68++66F8 7D                           ld      a, l                // file-handle
  69++66F9 DD E5                        push    ix
  70++66FB D5                           push    de
  71++66FC C5                           push    bc
  72++66FD F3                           di
  73++66FE CF                           rst     $08
  74++66FF 9C                           db      $9C
  75++6700 18 DC                        jr      F_Seek_Exit
  76++6702              //              ei
  77++6702              //              pop     de
  78++6702              //              pop     bc
  79++6702              //              pop     ix
  80++6702              //              sbc     hl, hl
  81++6702              //              psh1
  82++6702
  83++6702              //  ______________________________________________________________________
  84++6702              //
  85++6702              // f_fgetpos    u -- d f
  86++6702              // Seek to position d in file-handle u.
  87++6702              // Return a false-flag 0 on success, True flag on error
  88++6702                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  88++6702             >
  88++6702             >Dict_Ptr        defl    $
  88++6702             >
  88++6702             >//              ______________________________________________________________________
  88++6702             >//              Heap part
  88++6702             >
  88++6702             >
  88++6702             >                org     (Heap_Ptr & $1FFF) + $E000
  88++E1A3             >
  88++E1A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  88++E1A3             >Latest_Definition defl  Heap_Ptr
  88++E1A3             >
  88++E1A3             >                // dummy db directives used to calculate length of namec
  88++E1A3 46 5F 46 47 >                db      "F_FGETPOS"
  88++E1A7 45 54 50 4F >
  88++E1AB 53          >
  88++E1AC             >len_NFA         defl    $ - temp_NFA
  88++E1AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  88++E1A3             >
  88++E1A3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  88++E1A4 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  88++E1A8 45 54 50 4F >
  88++E1AC 53          >
  88++E1AD             >                org     $-1                 // alter last byte of Name just above to set
  88++E1AC D3          >                db      {b $} | END_BIT     // msb as name end
  88++E1AD             >
  88++E1AD 98 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  88++E1AF             >Prev_Ptr        defl    Heap_Ptr
  88++E1AF             >
  88++E1AF             >mirror_Ptr      defl    $
  88++E1AF             >
  88++E1AF 04 67       >                dw      Dict_Ptr + 2        // xt
  88++E1B1             >Heap_Ptr        defl    $ - $E000           // save current HP
  88++E1B1             >
  88++E1B1             >Current_HP      defl  $ - $E000             // used to set HP once!
  88++E1B1             >
  88++E1B1             >//              ______________________________________________________________________
  88++E1B1             >//              Dictionary part
  88++E1B1             >
  88++E1B1             >                org     Dict_Ptr
  88++6702             >
  88++6702 AF 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  88++6704             >
  88++6704             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  88++6704 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  88++6704 ~           >
  88++6704 ~           >
  88++6704             >                endif           ; ok        // for other definitions it "points" the correct handler
  88++6704             >                // Use of "; ok" to suppress "warning[fwdref]"
  88++6704             >
  88++6704             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  89++6704 E1                            pop     hl
  90++6705 7D                            ld      a, l                // file-handle
  91++6706 DD E5                         push    ix
  92++6708 D5                            push    de
  93++6709 C5                            push    bc
  94++670A F3                            di
  95++670B CF                            rst     $08
  96++670C A0                            db      $A0
  97++670D FB                            ei
  98++670E D9                           exx
  99++670F C1                           pop     bc                  // IP
 100++6710 D1                           pop     de                  // Return Stack Pointer
 101++6711 DD E1                        pop     ix
 102++6713 D9                            exx
 103++6714 D5                            push    de
 104++6715 C5                            push    bc
 105++6716 ED 62                         sbc     hl, hl
 106++6718 E5                            push    hl
 107++6719 D9                           exx
 108++671A                              next
 108++671A DD E9       >                jp      (ix)
 109++671C
 110++671C              //  ______________________________________________________________________
 111++671C              //
 112++671C              // f_read       a b u -- n f
 113++671C              // Read b bytes from file-handle u to address a
 114++671C              // Return the actual number n of bytes read
 115++671C              // Return 0 on success, True flag on error
 116++671C                              New_Def F_READ, "F_READ", is_code, is_normal
 116++671C             >
 116++671C             >Dict_Ptr        defl    $
 116++671C             >
 116++671C             >//              ______________________________________________________________________
 116++671C             >//              Heap part
 116++671C             >
 116++671C             >
 116++671C             >                org     (Heap_Ptr & $1FFF) + $E000
 116++E1B1             >
 116++E1B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116++E1B1             >Latest_Definition defl  Heap_Ptr
 116++E1B1             >
 116++E1B1             >                // dummy db directives used to calculate length of namec
 116++E1B1 46 5F 52 45 >                db      "F_READ"
 116++E1B5 41 44       >
 116++E1B7             >len_NFA         defl    $ - temp_NFA
 116++E1B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116++E1B1             >
 116++E1B1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116++E1B2 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 116++E1B6 41 44       >
 116++E1B8             >                org     $-1                 // alter last byte of Name just above to set
 116++E1B7 C4          >                db      {b $} | END_BIT     // msb as name end
 116++E1B8             >
 116++E1B8 A3 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116++E1BA             >Prev_Ptr        defl    Heap_Ptr
 116++E1BA             >
 116++E1BA             >mirror_Ptr      defl    $
 116++E1BA             >
 116++E1BA 1E 67       >                dw      Dict_Ptr + 2        // xt
 116++E1BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 116++E1BC             >
 116++E1BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 116++E1BC             >
 116++E1BC             >//              ______________________________________________________________________
 116++E1BC             >//              Dictionary part
 116++E1BC             >
 116++E1BC             >                org     Dict_Ptr
 116++671C             >
 116++671C BA 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 116++671E             >
 116++671E             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 116++671E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 116++671E ~           >
 116++671E ~           >
 116++671E             >                endif           ; ok        // for other definitions it "points" the correct handler
 116++671E             >                // Use of "; ok" to suppress "warning[fwdref]"
 116++671E             >
 116++671E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117++671E D9                            exx
 118++671F E1                            pop     hl
 119++6720 7D                            ld      a, l                // file-handle
 120++6721 C1                            pop     bc                  // bc has bytes to read
 121++6722 DD E3                         ex      (sp), ix            // ix has address
 122++6724 D9                           exx
 123++6725 D5                           push    de                  // Save Return Stack pointer
 124++6726 C5                           push    bc                  // Save Instruction pointer
 125++6727 D9                            exx
 126++6728 F3                            di
 127++6729 CF                            rst     $08
 128++672A 9D                            db      $9D
 129++672B              F_Read_Exit:
 130++672B FB                           ei
 131++672C D9                           exx
 132++672D C1                           pop     bc                  // Restore Instruction pointer
 133++672E D1                           pop     de                  // Restore Return Stack pointer
 134++672F DD E1                        pop     ix                  // Restore ix
 135++6731 D9                            exx
 136++6732 D5                            push    de                  // bytes involved in i/o operation
 137++6733 ED 62                         sbc     hl, hl
 138++6735 E5                            push    hl
 139++6736 D9                           exx
 140++6737                              next
 140++6737 DD E9       >                jp      (ix)
 141++6739
 142++6739              //  ______________________________________________________________________
 143++6739              //
 144++6739              // f_write      a n u -- n f
 145++6739              // Write bytes currently stored at address a to file-handle u.
 146++6739              // Return the actual n bytes written and 0 on success, True flag on error.
 147++6739                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 147++6739             >
 147++6739             >Dict_Ptr        defl    $
 147++6739             >
 147++6739             >//              ______________________________________________________________________
 147++6739             >//              Heap part
 147++6739             >
 147++6739             >
 147++6739             >                org     (Heap_Ptr & $1FFF) + $E000
 147++E1BC             >
 147++E1BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147++E1BC             >Latest_Definition defl  Heap_Ptr
 147++E1BC             >
 147++E1BC             >                // dummy db directives used to calculate length of namec
 147++E1BC 46 5F 57 52 >                db      "F_WRITE"
 147++E1C0 49 54 45    >
 147++E1C3             >len_NFA         defl    $ - temp_NFA
 147++E1C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147++E1BC             >
 147++E1BC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147++E1BD 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 147++E1C1 49 54 45    >
 147++E1C4             >                org     $-1                 // alter last byte of Name just above to set
 147++E1C3 C5          >                db      {b $} | END_BIT     // msb as name end
 147++E1C4             >
 147++E1C4 B1 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147++E1C6             >Prev_Ptr        defl    Heap_Ptr
 147++E1C6             >
 147++E1C6             >mirror_Ptr      defl    $
 147++E1C6             >
 147++E1C6 3B 67       >                dw      Dict_Ptr + 2        // xt
 147++E1C8             >Heap_Ptr        defl    $ - $E000           // save current HP
 147++E1C8             >
 147++E1C8             >Current_HP      defl  $ - $E000             // used to set HP once!
 147++E1C8             >
 147++E1C8             >//              ______________________________________________________________________
 147++E1C8             >//              Dictionary part
 147++E1C8             >
 147++E1C8             >                org     Dict_Ptr
 147++6739             >
 147++6739 C6 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 147++673B             >
 147++673B             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 147++673B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 147++673B ~           >
 147++673B ~           >
 147++673B             >                endif           ; ok        // for other definitions it "points" the correct handler
 147++673B             >                // Use of "; ok" to suppress "warning[fwdref]"
 147++673B             >
 147++673B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148++673B D9                            exx
 149++673C E1                            pop     hl
 150++673D 7D                            ld      a, l                // file-handle
 151++673E C1                            pop     bc                  // bc has bytes to read
 152++673F DD E3                         ex      (sp), ix            // ix has address
 153++6741 D9                           exx
 154++6742 D5                           push    de                  // Save Return Stack pointer
 155++6743 C5                           push    bc                  // Save Instruction pointer
 156++6744 D9                            exx
 157++6745 F3                            di
 158++6746 CF                            rst     $08
 159++6747 9E                            db      $9E
 160++6748 18 E1                         jr F_Read_Exit
 161++674A              //                ei
 162++674A              //                exx
 163++674A              //                pop     de                  // Restore Return Stack pointer
 164++674A              //                pop     bc                  // Restore Instruction pointer
 165++674A              //                pop     ix                  // Restore ix
 166++674A              //                 exx
 167++674A              //                 push    de                  // bytes involved in i/o operation
 168++674A              //                 sbc     hl, hl
 169++674A              //                 push    hl
 170++674A              //                exx
 171++674A              //                next
 172++674A
 173++674A              //  ______________________________________________________________________
 174++674A              //
 175++674A              // f_open       a1 a2 b -- u f
 176++674A              // open a file
 177++674A              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 178++674A              // a2 is address to an 8-byte header data used in some cases.
 179++674A              // b is access mode-byte, that is a combination of:
 180++674A              // any/all of:
 181++674A              //   esx_mode_read          $01 request read access
 182++674A              //   esx_mode_write         $02 request write access
 183++674A              //   esx_mode_use_header    $40 read/write +3DOS header
 184++674A              // plus one of:
 185++674A              //   esx_mode_open_exist    $00 only open existing file
 186++674A              //   esx_mode_open_creat    $08 open existing or create file
 187++674A              //   esx_mode_creat_noexist $04 create new file, error if exists
 188++674A              //   esx_mode_creat_trunc   $0c create new file, delete existing
 189++674A              // Return file-handle u and 0 on success, True flag on error
 190++674A                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 190++674A             >
 190++674A             >Dict_Ptr        defl    $
 190++674A             >
 190++674A             >//              ______________________________________________________________________
 190++674A             >//              Heap part
 190++674A             >
 190++674A             >
 190++674A             >                org     (Heap_Ptr & $1FFF) + $E000
 190++E1C8             >
 190++E1C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++E1C8             >Latest_Definition defl  Heap_Ptr
 190++E1C8             >
 190++E1C8             >                // dummy db directives used to calculate length of namec
 190++E1C8 46 5F 4F 50 >                db      "F_OPEN"
 190++E1CC 45 4E       >
 190++E1CE             >len_NFA         defl    $ - temp_NFA
 190++E1CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++E1C8             >
 190++E1C8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++E1C9 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 190++E1CD 45 4E       >
 190++E1CF             >                org     $-1                 // alter last byte of Name just above to set
 190++E1CE CE          >                db      {b $} | END_BIT     // msb as name end
 190++E1CF             >
 190++E1CF BC 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 190++E1D1             >Prev_Ptr        defl    Heap_Ptr
 190++E1D1             >
 190++E1D1             >mirror_Ptr      defl    $
 190++E1D1             >
 190++E1D1 4C 67       >                dw      Dict_Ptr + 2        // xt
 190++E1D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 190++E1D3             >
 190++E1D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 190++E1D3             >
 190++E1D3             >//              ______________________________________________________________________
 190++E1D3             >//              Dictionary part
 190++E1D3             >
 190++E1D3             >                org     Dict_Ptr
 190++674A             >
 190++674A D1 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 190++674C             >
 190++674C             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++674C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190++674C ~           >
 190++674C ~           >
 190++674C             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++674C             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++674C             >
 190++674C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++674C D9                            exx
 192++674D C1                            pop     bc                  // file-mode
 193++674E 41                            ld      b, c                // file-mode
 194++674F D1                            pop     de                  // 8-bytes buffer if any
 195++6750 DD E3                         ex      (sp), ix            // filespec nul-terminated
 196++6752 D9                           exx
 197++6753 D5                           push    de                  // Save Return Stack pointer
 198++6754 C5                           push    bc                  // Save Instruction pointer
 199++6755 D9                            exx
 200++6756 3E 2A                         ld      a, "*"
 201++6758 F3                            di
 202++6759 CF                            rst     $08
 203++675A 9A                            db      $9A
 204++675B              F_Open_Exit:
 205++675B              //               ei                         // removed because is repeated in f_read_exit
 206++675B 5F                            ld      e, a                // return the handle-number
 207++675C 16 00                         ld      d, 0
 208++675E 18 CB                        jr F_Read_Exit
 209++6760
 210++6760              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 211++6760              //   \ FILENAME 1+ PAD 1 F_OPEN
 212++6760              //   \ DROP
 213++6760              //   \ F_CLOSE
 214++6760
 215++6760
 216++6760              //  ______________________________________________________________________
 217++6760              //
 218++6760              // f_opendir    a1 -- u f
 219++6760              // open a file
 220++6760                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 220++6760             >
 220++6760             >Dict_Ptr        defl    $
 220++6760             >
 220++6760             >//              ______________________________________________________________________
 220++6760             >//              Heap part
 220++6760             >
 220++6760             >
 220++6760             >                org     (Heap_Ptr & $1FFF) + $E000
 220++E1D3             >
 220++E1D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220++E1D3             >Latest_Definition defl  Heap_Ptr
 220++E1D3             >
 220++E1D3             >                // dummy db directives used to calculate length of namec
 220++E1D3 46 5F 4F 50 >                db      "F_OPENDIR"
 220++E1D7 45 4E 44 49 >
 220++E1DB 52          >
 220++E1DC             >len_NFA         defl    $ - temp_NFA
 220++E1DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220++E1D3             >
 220++E1D3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220++E1D4 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 220++E1D8 45 4E 44 49 >
 220++E1DC 52          >
 220++E1DD             >                org     $-1                 // alter last byte of Name just above to set
 220++E1DC D2          >                db      {b $} | END_BIT     // msb as name end
 220++E1DD             >
 220++E1DD C8 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 220++E1DF             >Prev_Ptr        defl    Heap_Ptr
 220++E1DF             >
 220++E1DF             >mirror_Ptr      defl    $
 220++E1DF             >
 220++E1DF 62 67       >                dw      Dict_Ptr + 2        // xt
 220++E1E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 220++E1E1             >
 220++E1E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 220++E1E1             >
 220++E1E1             >//              ______________________________________________________________________
 220++E1E1             >//              Dictionary part
 220++E1E1             >
 220++E1E1             >                org     Dict_Ptr
 220++6760             >
 220++6760 DF 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 220++6762             >
 220++6762             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220++6762 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220++6762 ~           >
 220++6762 ~           >
 220++6762             >                endif           ; ok        // for other definitions it "points" the correct handler
 220++6762             >                // Use of "; ok" to suppress "warning[fwdref]"
 220++6762             >
 220++6762             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221++6762 DD E3                        ex      (sp), ix            // filespec nul-terminated
 222++6764 D5                           push    de                  // Save Return Stack pointer
 223++6765 C5                           push    bc                  // Save Instruction pointer
 224++6766 06 10                        ld      b, $10              // file-mode
 225++6768 3E 43                        ld      a, "C"
 226++676A F3                           di
 227++676B CF                           rst     $08
 228++676C A3                           db      $A3
 229++676D 18 EC                        jr      F_Open_Exit
 230++676F
 231++676F
 232++676F              //  ______________________________________________________________________
 233++676F              //
 234++676F              // f_readdir    a1 a2 b -- u f
 235++676F              // open a file
 236++676F                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 236++676F             >
 236++676F             >Dict_Ptr        defl    $
 236++676F             >
 236++676F             >//              ______________________________________________________________________
 236++676F             >//              Heap part
 236++676F             >
 236++676F             >
 236++676F             >                org     (Heap_Ptr & $1FFF) + $E000
 236++E1E1             >
 236++E1E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236++E1E1             >Latest_Definition defl  Heap_Ptr
 236++E1E1             >
 236++E1E1             >                // dummy db directives used to calculate length of namec
 236++E1E1 46 5F 52 45 >                db      "F_READDIR"
 236++E1E5 41 44 44 49 >
 236++E1E9 52          >
 236++E1EA             >len_NFA         defl    $ - temp_NFA
 236++E1EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236++E1E1             >
 236++E1E1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236++E1E2 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 236++E1E6 41 44 44 49 >
 236++E1EA 52          >
 236++E1EB             >                org     $-1                 // alter last byte of Name just above to set
 236++E1EA D2          >                db      {b $} | END_BIT     // msb as name end
 236++E1EB             >
 236++E1EB D3 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 236++E1ED             >Prev_Ptr        defl    Heap_Ptr
 236++E1ED             >
 236++E1ED             >mirror_Ptr      defl    $
 236++E1ED             >
 236++E1ED 71 67       >                dw      Dict_Ptr + 2        // xt
 236++E1EF             >Heap_Ptr        defl    $ - $E000           // save current HP
 236++E1EF             >
 236++E1EF             >Current_HP      defl  $ - $E000             // used to set HP once!
 236++E1EF             >
 236++E1EF             >//              ______________________________________________________________________
 236++E1EF             >//              Dictionary part
 236++E1EF             >
 236++E1EF             >                org     Dict_Ptr
 236++676F             >
 236++676F ED 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 236++6771             >
 236++6771             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236++6771 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 236++6771 ~           >
 236++6771 ~           >
 236++6771             >                endif           ; ok        // for other definitions it "points" the correct handler
 236++6771             >                // Use of "; ok" to suppress "warning[fwdref]"
 236++6771             >
 236++6771             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237++6771 D9                            exx
 238++6772 E1                            pop     hl
 239++6773 7D                            ld      a, l
 240++6774 D1                            pop     de
 241++6775 DD E3                         ex      (sp), ix            // filespec nul-terminated
 242++6777 D9                           exx
 243++6778 D5                           push    de                  // Save Return Stack pointer
 244++6779 C5                           push    bc                  // Save Instruction pointer
 245++677A D9                            exx
 246++677B F3                            di
 247++677C CF                            rst     $08
 248++677D A4                            db      $A4
 249++677E 18 DB                         jr      F_Open_Exit
 250++6780
 251++6780
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/next-opt0.asm
1101+ 6780
1102+ 6780
1103+ 6780              //  ______________________________________________________________________
1104+ 6780              //
1105+ 6780              // cmove    a1 a2 u --
1106+ 6780              // If u > 0, moves memory content starting at address a1 for n bytes long
1107+ 6780              // storing then starting at address addr2.
1108+ 6780              // The content of a1 is moved first. See CMOVE> also.
1109+ 6780                              New_Def CMOVE, "CMOVE", is_code, is_normal
1109+ 6780             >
1109+ 6780             >Dict_Ptr        defl    $
1109+ 6780             >
1109+ 6780             >//              ______________________________________________________________________
1109+ 6780             >//              Heap part
1109+ 6780             >
1109+ 6780             >
1109+ 6780             >                org     (Heap_Ptr & $1FFF) + $E000
1109+ E1EF             >
1109+ E1EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1109+ E1EF             >Latest_Definition defl  Heap_Ptr
1109+ E1EF             >
1109+ E1EF             >                // dummy db directives used to calculate length of namec
1109+ E1EF 43 4D 4F 56 >                db      "CMOVE"
1109+ E1F3 45          >
1109+ E1F4             >len_NFA         defl    $ - temp_NFA
1109+ E1F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1109+ E1EF             >
1109+ E1EF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1109+ E1F0 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1109+ E1F4 45          >
1109+ E1F5             >                org     $-1                 // alter last byte of Name just above to set
1109+ E1F4 C5          >                db      {b $} | END_BIT     // msb as name end
1109+ E1F5             >
1109+ E1F5 E1 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1109+ E1F7             >Prev_Ptr        defl    Heap_Ptr
1109+ E1F7             >
1109+ E1F7             >mirror_Ptr      defl    $
1109+ E1F7             >
1109+ E1F7 82 67       >                dw      Dict_Ptr + 2        // xt
1109+ E1F9             >Heap_Ptr        defl    $ - $E000           // save current HP
1109+ E1F9             >
1109+ E1F9             >Current_HP      defl  $ - $E000             // used to set HP once!
1109+ E1F9             >
1109+ E1F9             >//              ______________________________________________________________________
1109+ E1F9             >//              Dictionary part
1109+ E1F9             >
1109+ E1F9             >                org     Dict_Ptr
1109+ 6780             >
1109+ 6780 F7 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1109+ 6782             >
1109+ 6782             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1109+ 6782 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1109+ 6782 ~           >
1109+ 6782 ~           >
1109+ 6782             >                endif           ; ok        // for other definitions it "points" the correct handler
1109+ 6782             >                // Use of "; ok" to suppress "warning[fwdref]"
1109+ 6782             >
1109+ 6782             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1110+ 6782 D9                           exx
1111+ 6783
1112+ 6783 C1                           pop     bc                  // bc has counter
1113+ 6784 D1                           pop     de                  // de now has dest
1114+ 6785 E1                           pop     hl                 // hl has source, save Instruction Pointer
1115+ 6786 78                           ld      a, b
1116+ 6787 B1                           or      c
1117+ 6788 28 02                        jr      z, Cmove_NoMove
1118+ 678A ED B0                            ldir
1119+ 678C              Cmove_NoMove:
1120+ 678C D9                           exx
1121+ 678D
1122+ 678D                              next
1122+ 678D DD E9       >                jp      (ix)
1123+ 678F
1124+ 678F              //  ______________________________________________________________________
1125+ 678F              //
1126+ 678F              // cmove>    a1 a2 u --
1127+ 678F              // If u > 0, moves memory content starting at address a1 for n bytes long
1128+ 678F              // storing then starting at address addr2.
1129+ 678F              // The content of a1 is moved last. See cmove.
1130+ 678F                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1130+ 678F             >
1130+ 678F             >Dict_Ptr        defl    $
1130+ 678F             >
1130+ 678F             >//              ______________________________________________________________________
1130+ 678F             >//              Heap part
1130+ 678F             >
1130+ 678F             >
1130+ 678F             >                org     (Heap_Ptr & $1FFF) + $E000
1130+ E1F9             >
1130+ E1F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1130+ E1F9             >Latest_Definition defl  Heap_Ptr
1130+ E1F9             >
1130+ E1F9             >                // dummy db directives used to calculate length of namec
1130+ E1F9 43 4D 4F 56 >                db      "CMOVE>"
1130+ E1FD 45 3E       >
1130+ E1FF             >len_NFA         defl    $ - temp_NFA
1130+ E1FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1130+ E1F9             >
1130+ E1F9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1130+ E1FA 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1130+ E1FE 45 3E       >
1130+ E200             >                org     $-1                 // alter last byte of Name just above to set
1130+ E1FF BE          >                db      {b $} | END_BIT     // msb as name end
1130+ E200             >
1130+ E200 EF 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1130+ E202             >Prev_Ptr        defl    Heap_Ptr
1130+ E202             >
1130+ E202             >mirror_Ptr      defl    $
1130+ E202             >
1130+ E202 91 67       >                dw      Dict_Ptr + 2        // xt
1130+ E204             >Heap_Ptr        defl    $ - $E000           // save current HP
1130+ E204             >
1130+ E204             >Current_HP      defl  $ - $E000             // used to set HP once!
1130+ E204             >
1130+ E204             >//              ______________________________________________________________________
1130+ E204             >//              Dictionary part
1130+ E204             >
1130+ E204             >                org     Dict_Ptr
1130+ 678F             >
1130+ 678F 02 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1130+ 6791             >
1130+ 6791             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1130+ 6791 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1130+ 6791 ~           >
1130+ 6791 ~           >
1130+ 6791             >                endif           ; ok        // for other definitions it "points" the correct handler
1130+ 6791             >                // Use of "; ok" to suppress "warning[fwdref]"
1130+ 6791             >
1130+ 6791             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1131+ 6791 D9                           exx
1132+ 6792
1133+ 6792 C1                           pop     bc                  // bc has counter
1134+ 6793 D1                           pop     de                  // de has dest
1135+ 6794 E1                           pop     hl                  // hl has source, save Instruction Pointer
1136+ 6795 78                           ld      a, b
1137+ 6796 B1                           or      c
1138+ 6797 28 F3                        jr      z, Cmove_NoMove  // CmoveV_NoMove
1139+ 6799 EB                               ex      de, hl              // compute address to
1140+ 679A 09                               add     hl, bc              // operate backward
1141+ 679B 2B                               dec     hl
1142+ 679C EB                               ex      de, hl
1143+ 679D 09                               add     hl, bc
1144+ 679E 2B                               dec     hl
1145+ 679F ED B8                            lddr                        // backward
1146+ 67A1 18 E9                            jr      Cmove_NoMove
1147+ 67A3              // CmoveV_NoMove:
1148+ 67A3                          //  exx
1149+ 67A3
1150+ 67A3                          //  next
1151+ 67A3
1152+ 67A3              //  ______________________________________________________________________
1153+ 67A3              //
1154+ 67A3              // um*      u1 u2 -- ud
1155+ 67A3              // Unsigned multiplication
1156+ 67A3              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1157+ 67A3              // On the stack a double number is treated as two single numbers
1158+ 67A3              // where DE is on the top of the stack and HL is the second from top,
1159+ 67A3              // Instead, in 2VARIABLE a double number is stored as EDLH.
1160+ 67A3              // this definition could use "MUL" Z80N new op-code.
1161+ 67A3                              New_Def UM_MUL, "UM*", is_code, is_normal
1161+ 67A3             >
1161+ 67A3             >Dict_Ptr        defl    $
1161+ 67A3             >
1161+ 67A3             >//              ______________________________________________________________________
1161+ 67A3             >//              Heap part
1161+ 67A3             >
1161+ 67A3             >
1161+ 67A3             >                org     (Heap_Ptr & $1FFF) + $E000
1161+ E204             >
1161+ E204             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1161+ E204             >Latest_Definition defl  Heap_Ptr
1161+ E204             >
1161+ E204             >                // dummy db directives used to calculate length of namec
1161+ E204 55 4D 2A    >                db      "UM*"
1161+ E207             >len_NFA         defl    $ - temp_NFA
1161+ E207             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1161+ E204             >
1161+ E204 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1161+ E205 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1161+ E208             >                org     $-1                 // alter last byte of Name just above to set
1161+ E207 AA          >                db      {b $} | END_BIT     // msb as name end
1161+ E208             >
1161+ E208 F9 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1161+ E20A             >Prev_Ptr        defl    Heap_Ptr
1161+ E20A             >
1161+ E20A             >mirror_Ptr      defl    $
1161+ E20A             >
1161+ E20A A5 67       >                dw      Dict_Ptr + 2        // xt
1161+ E20C             >Heap_Ptr        defl    $ - $E000           // save current HP
1161+ E20C             >
1161+ E20C             >Current_HP      defl  $ - $E000             // used to set HP once!
1161+ E20C             >
1161+ E20C             >//              ______________________________________________________________________
1161+ E20C             >//              Dictionary part
1161+ E20C             >
1161+ E20C             >                org     Dict_Ptr
1161+ 67A3             >
1161+ 67A3 0A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1161+ 67A5             >
1161+ 67A5             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1161+ 67A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1161+ 67A5 ~           >
1161+ 67A5 ~           >
1161+ 67A5             >                endif           ; ok        // for other definitions it "points" the correct handler
1161+ 67A5             >                // Use of "; ok" to suppress "warning[fwdref]"
1161+ 67A5             >
1161+ 67A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1162+ 67A5 D9                           exx
1163+ 67A6 D1                           pop     de                    // de has u2 operand
1164+ 67A7 E1                           pop     hl                    // hl has u1 operand
1165+ 67A8 45                           ld      b, l
1166+ 67A9 4B                           ld      c, e
1167+ 67AA 5D                           ld      e, l
1168+ 67AB 6A                           ld      l, d
1169+ 67AC E5                           push    hl
1170+ 67AD 69                           ld      l, c
1171+ 67AE ED 30                        mul
1172+ 67B0 EB                           ex      de, hl
1173+ 67B1 ED 30                        mul
1174+ 67B3 AF                           xor     a
1175+ 67B4 19                           add     hl, de
1176+ 67B5 8F                           adc     a
1177+ 67B6 59                           ld      e, c
1178+ 67B7 50                           ld      d, b
1179+ 67B8 ED 30                        mul
1180+ 67BA 47                           ld      b, a
1181+ 67BB 4C                           ld      c, h
1182+ 67BC 7A                           ld      a, d
1183+ 67BD 85                           add     l
1184+ 67BE 67                           ld      h, a
1185+ 67BF 6B                           ld      l, e
1186+ 67C0 D1                           pop     de
1187+ 67C1 ED 30                        mul
1188+ 67C3 EB                           ex      de, hl
1189+ 67C4 ED 4A                        adc     hl, bc
1190+ 67C6              Mul_Bailout:
1191+ 67C6 D5                           push    de
1192+ 67C7 E5                           push    hl
1193+ 67C8 D9                           exx
1194+ 67C9                              next
1194+ 67C9 DD E9       >                jp      (ix)
1195+ 67CB
1196+ 67CB              //  ______________________________________________________________________
1197+ 67CB              //
1198+ 67CB              // um/mod      ud u1 -- q r
1199+ 67CB              // divides ud into u1 giving quotient q and remainder r
1200+ 67CB              // algorithm takes 16 bit at a time starting from msb
1201+ 67CB              // DE grows from lsb upward with quotient result
1202+ 67CB              // HL keeps the remainder at each stage of division
1203+ 67CB              // each loop 'lowers' the next binary digit to form the current dividend
1204+ 67CB                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1204+ 67CB             >
1204+ 67CB             >Dict_Ptr        defl    $
1204+ 67CB             >
1204+ 67CB             >//              ______________________________________________________________________
1204+ 67CB             >//              Heap part
1204+ 67CB             >
1204+ 67CB             >
1204+ 67CB             >                org     (Heap_Ptr & $1FFF) + $E000
1204+ E20C             >
1204+ E20C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1204+ E20C             >Latest_Definition defl  Heap_Ptr
1204+ E20C             >
1204+ E20C             >                // dummy db directives used to calculate length of namec
1204+ E20C 55 4D 2F 4D >                db      "UM/MOD"
1204+ E210 4F 44       >
1204+ E212             >len_NFA         defl    $ - temp_NFA
1204+ E212             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1204+ E20C             >
1204+ E20C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1204+ E20D 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1204+ E211 4F 44       >
1204+ E213             >                org     $-1                 // alter last byte of Name just above to set
1204+ E212 C4          >                db      {b $} | END_BIT     // msb as name end
1204+ E213             >
1204+ E213 04 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1204+ E215             >Prev_Ptr        defl    Heap_Ptr
1204+ E215             >
1204+ E215             >mirror_Ptr      defl    $
1204+ E215             >
1204+ E215 CD 67       >                dw      Dict_Ptr + 2        // xt
1204+ E217             >Heap_Ptr        defl    $ - $E000           // save current HP
1204+ E217             >
1204+ E217             >Current_HP      defl  $ - $E000             // used to set HP once!
1204+ E217             >
1204+ E217             >//              ______________________________________________________________________
1204+ E217             >//              Dictionary part
1204+ E217             >
1204+ E217             >                org     Dict_Ptr
1204+ 67CB             >
1204+ 67CB 15 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1204+ 67CD             >
1204+ 67CD             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1204+ 67CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1204+ 67CD ~           >
1204+ 67CD ~           >
1204+ 67CD             >                endif           ; ok        // for other definitions it "points" the correct handler
1204+ 67CD             >                // Use of "; ok" to suppress "warning[fwdref]"
1204+ 67CD             >
1204+ 67CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1205+ 67CD D9                           exx
1206+ 67CE C1                           pop     bc                      // divisor
1207+ 67CF
1208+ 67CF E1                           pop     hl                      // < high part
1209+ 67D0 D1                           pop     de                      // < low part and
1210+ 67D1
1211+ 67D1 7D                           ld      a, l                    // check without changing arguments
1212+ 67D2 91                           sub     c                       // if divisor is greater than high part
1213+ 67D3 7C                           ld      a, h                    // so quotient will be in range
1214+ 67D4 98                           sbc     a, b
1215+ 67D5 30 1D                        jr      nc, Um_DivMod_OutOfRange
1216+ 67D7 3E 10                            ld      a, 16
1217+ 67D9              Um_DivMod_Loop:
1218+ 67D9 CB 23                                sla     e
1219+ 67DB CB 12                                rl      d
1220+ 67DD ED 6A                                adc     hl, hl
1221+ 67DF 30 05                                jr      nc, Um_DivMod_Carry
1222+ 67E1 A7                                       and     a
1223+ 67E2 ED 42                                    sbc     hl, bc
1224+ 67E4 18 07                                jr      Um_DivMod_Endif    // else
1225+ 67E6              Um_DivMod_Carry:
1226+ 67E6 A7                                       and     a
1227+ 67E7 ED 42                                    sbc     hl, bc
1228+ 67E9 30 02                                    jr      nc, Um_DivMod_Endif
1229+ 67EB 09                                           add     hl, bc
1230+ 67EC 1B                                           dec     de
1231+ 67ED              Um_DivMod_Endif:                                   // endif
1232+ 67ED 13                                   inc     de
1233+ 67EE 3D                                   dec     a
1234+ 67EF 20 E8                            jr      nz, Um_DivMod_Loop
1235+ 67F1 EB                               ex      de, hl
1236+ 67F2 18 D2                            jr      Mul_Bailout
1237+ 67F4              // Um_DivMod_Bailout:
1238+ 67F4                              //  push    de                  // de := remanider
1239+ 67F4                              //  push    hl                  // hl := quotient
1240+ 67F4                              //  exx
1241+ 67F4                              //  next
1242+ 67F4
1243+ 67F4              Um_DivMod_OutOfRange:
1244+ 67F4 21 FF FF                     ld      hl, -1
1245+ 67F7 54                           ld      d, h
1246+ 67F8 5D                           ld      e, l
1247+ 67F9 18 CB                        jr      Mul_Bailout
1248+ 67FB
1249+ 67FB              //  ______________________________________________________________________
1250+ 67FB              //
1251+ 67FB              // and          n1 n2 -- n3
1252+ 67FB              // bit logical AND. Returns n3 as n1 & n2
1253+ 67FB                              New_Def AND_OP, "AND", is_code, is_normal
1253+ 67FB             >
1253+ 67FB             >Dict_Ptr        defl    $
1253+ 67FB             >
1253+ 67FB             >//              ______________________________________________________________________
1253+ 67FB             >//              Heap part
1253+ 67FB             >
1253+ 67FB             >
1253+ 67FB             >                org     (Heap_Ptr & $1FFF) + $E000
1253+ E217             >
1253+ E217             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1253+ E217             >Latest_Definition defl  Heap_Ptr
1253+ E217             >
1253+ E217             >                // dummy db directives used to calculate length of namec
1253+ E217 41 4E 44    >                db      "AND"
1253+ E21A             >len_NFA         defl    $ - temp_NFA
1253+ E21A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1253+ E217             >
1253+ E217 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1253+ E218 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1253+ E21B             >                org     $-1                 // alter last byte of Name just above to set
1253+ E21A C4          >                db      {b $} | END_BIT     // msb as name end
1253+ E21B             >
1253+ E21B 0C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1253+ E21D             >Prev_Ptr        defl    Heap_Ptr
1253+ E21D             >
1253+ E21D             >mirror_Ptr      defl    $
1253+ E21D             >
1253+ E21D FD 67       >                dw      Dict_Ptr + 2        // xt
1253+ E21F             >Heap_Ptr        defl    $ - $E000           // save current HP
1253+ E21F             >
1253+ E21F             >Current_HP      defl  $ - $E000             // used to set HP once!
1253+ E21F             >
1253+ E21F             >//              ______________________________________________________________________
1253+ E21F             >//              Dictionary part
1253+ E21F             >
1253+ E21F             >                org     Dict_Ptr
1253+ 67FB             >
1253+ 67FB 1D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1253+ 67FD             >
1253+ 67FD             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1253+ 67FD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1253+ 67FD ~           >
1253+ 67FD ~           >
1253+ 67FD             >                endif           ; ok        // for other definitions it "points" the correct handler
1253+ 67FD             >                // Use of "; ok" to suppress "warning[fwdref]"
1253+ 67FD             >
1253+ 67FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1254+ 67FD D9                           exx
1255+ 67FE D1                           pop     de
1256+ 67FF E1                           pop     hl
1257+ 6800 7B                           ld      a, e
1258+ 6801 A5                           and     l
1259+ 6802 6F                           ld      l, a
1260+ 6803 7A                           ld      a, d
1261+ 6804 A4                           and     h
1262+ 6805              Boolean_exit:
1263+ 6805 67                           ld      h, a
1264+ 6806 E5                           push    hl
1265+ 6807 D9                           exx
1266+ 6808                              next
1266+ 6808 DD E9       >                jp      (ix)
1267+ 680A
1268+ 680A              //  ______________________________________________________________________
1269+ 680A              //
1270+ 680A              // or           n1 n2 -- n3
1271+ 680A              // bit logical OR. Returns n3 as n1 | n2
1272+ 680A                              New_Def OR_OP, "OR", is_code, is_normal
1272+ 680A             >
1272+ 680A             >Dict_Ptr        defl    $
1272+ 680A             >
1272+ 680A             >//              ______________________________________________________________________
1272+ 680A             >//              Heap part
1272+ 680A             >
1272+ 680A             >
1272+ 680A             >                org     (Heap_Ptr & $1FFF) + $E000
1272+ E21F             >
1272+ E21F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1272+ E21F             >Latest_Definition defl  Heap_Ptr
1272+ E21F             >
1272+ E21F             >                // dummy db directives used to calculate length of namec
1272+ E21F 4F 52       >                db      "OR"
1272+ E221             >len_NFA         defl    $ - temp_NFA
1272+ E221             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1272+ E21F             >
1272+ E21F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1272+ E220 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1272+ E222             >                org     $-1                 // alter last byte of Name just above to set
1272+ E221 D2          >                db      {b $} | END_BIT     // msb as name end
1272+ E222             >
1272+ E222 17 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1272+ E224             >Prev_Ptr        defl    Heap_Ptr
1272+ E224             >
1272+ E224             >mirror_Ptr      defl    $
1272+ E224             >
1272+ E224 0C 68       >                dw      Dict_Ptr + 2        // xt
1272+ E226             >Heap_Ptr        defl    $ - $E000           // save current HP
1272+ E226             >
1272+ E226             >Current_HP      defl  $ - $E000             // used to set HP once!
1272+ E226             >
1272+ E226             >//              ______________________________________________________________________
1272+ E226             >//              Dictionary part
1272+ E226             >
1272+ E226             >                org     Dict_Ptr
1272+ 680A             >
1272+ 680A 24 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1272+ 680C             >
1272+ 680C             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1272+ 680C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1272+ 680C ~           >
1272+ 680C ~           >
1272+ 680C             >                endif           ; ok        // for other definitions it "points" the correct handler
1272+ 680C             >                // Use of "; ok" to suppress "warning[fwdref]"
1272+ 680C             >
1272+ 680C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1273+ 680C D9                           exx
1274+ 680D D1                           pop     de
1275+ 680E E1                           pop     hl
1276+ 680F 7B                           ld      a, e
1277+ 6810 B5                           or      l
1278+ 6811 6F                           ld      l, a
1279+ 6812 7A                           ld      a, d
1280+ 6813 B4                           or      h
1281+ 6814 18 EF                        jr      Boolean_exit
1282+ 6816                          //  ld      h, a
1283+ 6816                          //  push    hl
1284+ 6816                          //  exx
1285+ 6816                          //  next
1286+ 6816
1287+ 6816              //  ______________________________________________________________________
1288+ 6816              //
1289+ 6816              // xor          n1 n2 -- n3
1290+ 6816              // bit logical OR. Returns n3 as n1 ^ n2
1291+ 6816                              New_Def XOR_OP, "XOR", is_code, is_normal
1291+ 6816             >
1291+ 6816             >Dict_Ptr        defl    $
1291+ 6816             >
1291+ 6816             >//              ______________________________________________________________________
1291+ 6816             >//              Heap part
1291+ 6816             >
1291+ 6816             >
1291+ 6816             >                org     (Heap_Ptr & $1FFF) + $E000
1291+ E226             >
1291+ E226             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1291+ E226             >Latest_Definition defl  Heap_Ptr
1291+ E226             >
1291+ E226             >                // dummy db directives used to calculate length of namec
1291+ E226 58 4F 52    >                db      "XOR"
1291+ E229             >len_NFA         defl    $ - temp_NFA
1291+ E229             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1291+ E226             >
1291+ E226 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1291+ E227 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1291+ E22A             >                org     $-1                 // alter last byte of Name just above to set
1291+ E229 D2          >                db      {b $} | END_BIT     // msb as name end
1291+ E22A             >
1291+ E22A 1F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1291+ E22C             >Prev_Ptr        defl    Heap_Ptr
1291+ E22C             >
1291+ E22C             >mirror_Ptr      defl    $
1291+ E22C             >
1291+ E22C 18 68       >                dw      Dict_Ptr + 2        // xt
1291+ E22E             >Heap_Ptr        defl    $ - $E000           // save current HP
1291+ E22E             >
1291+ E22E             >Current_HP      defl  $ - $E000             // used to set HP once!
1291+ E22E             >
1291+ E22E             >//              ______________________________________________________________________
1291+ E22E             >//              Dictionary part
1291+ E22E             >
1291+ E22E             >                org     Dict_Ptr
1291+ 6816             >
1291+ 6816 2C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1291+ 6818             >
1291+ 6818             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1291+ 6818 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1291+ 6818 ~           >
1291+ 6818 ~           >
1291+ 6818             >                endif           ; ok        // for other definitions it "points" the correct handler
1291+ 6818             >                // Use of "; ok" to suppress "warning[fwdref]"
1291+ 6818             >
1291+ 6818             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1292+ 6818 D9                           exx
1293+ 6819 D1                           pop     de
1294+ 681A E1                           pop     hl
1295+ 681B 7B                           ld      a, e
1296+ 681C AD                           xor     l
1297+ 681D 6F                           ld      l, a
1298+ 681E 7A                           ld      a, d
1299+ 681F AC                           xor     h
1300+ 6820 18 E3                        jr      Boolean_exit
1301+ 6822                          //  ld      h, a
1302+ 6822                          //  push    hl
1303+ 6822                          //  exx
1304+ 6822                          //  next
1305+ 6822
1306+ 6822              //  ______________________________________________________________________
1307+ 6822              //
1308+ 6822              // sp@      -- a
1309+ 6822              // returns on top of stack the value of SP before execution
1310+ 6822                              New_Def SPFETCH, "SP@", is_code, is_normal
1310+ 6822             >
1310+ 6822             >Dict_Ptr        defl    $
1310+ 6822             >
1310+ 6822             >//              ______________________________________________________________________
1310+ 6822             >//              Heap part
1310+ 6822             >
1310+ 6822             >
1310+ 6822             >                org     (Heap_Ptr & $1FFF) + $E000
1310+ E22E             >
1310+ E22E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1310+ E22E             >Latest_Definition defl  Heap_Ptr
1310+ E22E             >
1310+ E22E             >                // dummy db directives used to calculate length of namec
1310+ E22E 53 50 40    >                db      "SP@"
1310+ E231             >len_NFA         defl    $ - temp_NFA
1310+ E231             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1310+ E22E             >
1310+ E22E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1310+ E22F 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1310+ E232             >                org     $-1                 // alter last byte of Name just above to set
1310+ E231 C0          >                db      {b $} | END_BIT     // msb as name end
1310+ E232             >
1310+ E232 26 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1310+ E234             >Prev_Ptr        defl    Heap_Ptr
1310+ E234             >
1310+ E234             >mirror_Ptr      defl    $
1310+ E234             >
1310+ E234 24 68       >                dw      Dict_Ptr + 2        // xt
1310+ E236             >Heap_Ptr        defl    $ - $E000           // save current HP
1310+ E236             >
1310+ E236             >Current_HP      defl  $ - $E000             // used to set HP once!
1310+ E236             >
1310+ E236             >//              ______________________________________________________________________
1310+ E236             >//              Dictionary part
1310+ E236             >
1310+ E236             >                org     Dict_Ptr
1310+ 6822             >
1310+ 6822 34 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1310+ 6824             >
1310+ 6824             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1310+ 6824 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1310+ 6824 ~           >
1310+ 6824 ~           >
1310+ 6824             >                endif           ; ok        // for other definitions it "points" the correct handler
1310+ 6824             >                // Use of "; ok" to suppress "warning[fwdref]"
1310+ 6824             >
1310+ 6824             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1311+ 6824
1312+ 6824 21 00 00                     ld      hl, 0
1313+ 6827 39                           add     hl, sp
1314+ 6828
1315+ 6828                              psh1
1315+ 6828 E5          >                push    hl
1315+ 6829 DD E9       >                jp      (ix)
1316+ 682B
1317+ 682B              //  ______________________________________________________________________
1318+ 682B              //
1319+ 682B              // sp!      a --
1320+ 682B              // restore SP to the initial value passed
1321+ 682B              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1322+ 682B                              New_Def SPSTORE, "SP!", is_code, is_normal
1322+ 682B             >
1322+ 682B             >Dict_Ptr        defl    $
1322+ 682B             >
1322+ 682B             >//              ______________________________________________________________________
1322+ 682B             >//              Heap part
1322+ 682B             >
1322+ 682B             >
1322+ 682B             >                org     (Heap_Ptr & $1FFF) + $E000
1322+ E236             >
1322+ E236             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1322+ E236             >Latest_Definition defl  Heap_Ptr
1322+ E236             >
1322+ E236             >                // dummy db directives used to calculate length of namec
1322+ E236 53 50 21    >                db      "SP!"
1322+ E239             >len_NFA         defl    $ - temp_NFA
1322+ E239             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1322+ E236             >
1322+ E236 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1322+ E237 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1322+ E23A             >                org     $-1                 // alter last byte of Name just above to set
1322+ E239 A1          >                db      {b $} | END_BIT     // msb as name end
1322+ E23A             >
1322+ E23A 2E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1322+ E23C             >Prev_Ptr        defl    Heap_Ptr
1322+ E23C             >
1322+ E23C             >mirror_Ptr      defl    $
1322+ E23C             >
1322+ E23C 2D 68       >                dw      Dict_Ptr + 2        // xt
1322+ E23E             >Heap_Ptr        defl    $ - $E000           // save current HP
1322+ E23E             >
1322+ E23E             >Current_HP      defl  $ - $E000             // used to set HP once!
1322+ E23E             >
1322+ E23E             >//              ______________________________________________________________________
1322+ E23E             >//              Dictionary part
1322+ E23E             >
1322+ E23E             >                org     Dict_Ptr
1322+ 682B             >
1322+ 682B 3C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1322+ 682D             >
1322+ 682D             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1322+ 682D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1322+ 682D ~           >
1322+ 682D ~           >
1322+ 682D             >                endif           ; ok        // for other definitions it "points" the correct handler
1322+ 682D             >                // Use of "; ok" to suppress "warning[fwdref]"
1322+ 682D             >
1322+ 682D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1323+ 682D E1                           pop     hl
1324+ 682E F9                           ld      sp, hl
1325+ 682F
1326+ 682F                              next
1326+ 682F DD E9       >                jp      (ix)
1327+ 6831
1328+ 6831              //  ______________________________________________________________________
1329+ 6831              //
1330+ 6831              // rp@      -- a
1331+ 6831              // returns on top of stack the value of Return-Pointer
1332+ 6831                              New_Def RPFETCH, "RP@", is_code, is_normal
1332+ 6831             >
1332+ 6831             >Dict_Ptr        defl    $
1332+ 6831             >
1332+ 6831             >//              ______________________________________________________________________
1332+ 6831             >//              Heap part
1332+ 6831             >
1332+ 6831             >
1332+ 6831             >                org     (Heap_Ptr & $1FFF) + $E000
1332+ E23E             >
1332+ E23E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1332+ E23E             >Latest_Definition defl  Heap_Ptr
1332+ E23E             >
1332+ E23E             >                // dummy db directives used to calculate length of namec
1332+ E23E 52 50 40    >                db      "RP@"
1332+ E241             >len_NFA         defl    $ - temp_NFA
1332+ E241             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1332+ E23E             >
1332+ E23E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1332+ E23F 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1332+ E242             >                org     $-1                 // alter last byte of Name just above to set
1332+ E241 C0          >                db      {b $} | END_BIT     // msb as name end
1332+ E242             >
1332+ E242 36 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1332+ E244             >Prev_Ptr        defl    Heap_Ptr
1332+ E244             >
1332+ E244             >mirror_Ptr      defl    $
1332+ E244             >
1332+ E244 33 68       >                dw      Dict_Ptr + 2        // xt
1332+ E246             >Heap_Ptr        defl    $ - $E000           // save current HP
1332+ E246             >
1332+ E246             >Current_HP      defl  $ - $E000             // used to set HP once!
1332+ E246             >
1332+ E246             >//              ______________________________________________________________________
1332+ E246             >//              Dictionary part
1332+ E246             >
1332+ E246             >                org     Dict_Ptr
1332+ 6831             >
1332+ 6831 44 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1332+ 6833             >
1332+ 6833             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1332+ 6833 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1332+ 6833 ~           >
1332+ 6833 ~           >
1332+ 6833             >                endif           ; ok        // for other definitions it "points" the correct handler
1332+ 6833             >                // Use of "; ok" to suppress "warning[fwdref]"
1332+ 6833             >
1332+ 6833             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1333+ 6833
1334+ 6833                              // *** ldhlrp
1335+ 6833                              // *** ex      de, hl
1336+ 6833 D5                           push de
1337+ 6834
1338+ 6834                              next
1338+ 6834 DD E9       >                jp      (ix)
1339+ 6836
1340+ 6836              //  ______________________________________________________________________
1341+ 6836              //
1342+ 6836              // rp!      a --
1343+ 6836              // restore RP to the initial value passed
1344+ 6836              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1345+ 6836                              New_Def RPSTORE, "RP!", is_code, is_normal
1345+ 6836             >
1345+ 6836             >Dict_Ptr        defl    $
1345+ 6836             >
1345+ 6836             >//              ______________________________________________________________________
1345+ 6836             >//              Heap part
1345+ 6836             >
1345+ 6836             >
1345+ 6836             >                org     (Heap_Ptr & $1FFF) + $E000
1345+ E246             >
1345+ E246             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1345+ E246             >Latest_Definition defl  Heap_Ptr
1345+ E246             >
1345+ E246             >                // dummy db directives used to calculate length of namec
1345+ E246 52 50 21    >                db      "RP!"
1345+ E249             >len_NFA         defl    $ - temp_NFA
1345+ E249             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1345+ E246             >
1345+ E246 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1345+ E247 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1345+ E24A             >                org     $-1                 // alter last byte of Name just above to set
1345+ E249 A1          >                db      {b $} | END_BIT     // msb as name end
1345+ E24A             >
1345+ E24A 3E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1345+ E24C             >Prev_Ptr        defl    Heap_Ptr
1345+ E24C             >
1345+ E24C             >mirror_Ptr      defl    $
1345+ E24C             >
1345+ E24C 38 68       >                dw      Dict_Ptr + 2        // xt
1345+ E24E             >Heap_Ptr        defl    $ - $E000           // save current HP
1345+ E24E             >
1345+ E24E             >Current_HP      defl  $ - $E000             // used to set HP once!
1345+ E24E             >
1345+ E24E             >//              ______________________________________________________________________
1345+ E24E             >//              Dictionary part
1345+ E24E             >
1345+ E24E             >                org     Dict_Ptr
1345+ 6836             >
1345+ 6836 4C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1345+ 6838             >
1345+ 6838             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1345+ 6838 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1345+ 6838 ~           >
1345+ 6838 ~           >
1345+ 6838             >                endif           ; ok        // for other definitions it "points" the correct handler
1345+ 6838             >                // Use of "; ok" to suppress "warning[fwdref]"
1345+ 6838             >
1345+ 6838             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1346+ 6838 D1                           pop     de
1347+ 6839                              // *** ex      de, hl
1348+ 6839                              // *** ldrphl
1349+ 6839
1350+ 6839                              next
1350+ 6839 DD E9       >                jp      (ix)
1351+ 683B
1352+ 683B              //  ______________________________________________________________________
1353+ 683B              //
1354+ 683B              // exit       --
1355+ 683B              // exits back to the caller word
1356+ 683B                              New_Def EXIT, "EXIT", is_code, is_normal
1356+ 683B             >
1356+ 683B             >Dict_Ptr        defl    $
1356+ 683B             >
1356+ 683B             >//              ______________________________________________________________________
1356+ 683B             >//              Heap part
1356+ 683B             >
1356+ 683B             >
1356+ 683B             >                org     (Heap_Ptr & $1FFF) + $E000
1356+ E24E             >
1356+ E24E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1356+ E24E             >Latest_Definition defl  Heap_Ptr
1356+ E24E             >
1356+ E24E             >                // dummy db directives used to calculate length of namec
1356+ E24E 45 58 49 54 >                db      "EXIT"
1356+ E252             >len_NFA         defl    $ - temp_NFA
1356+ E252             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1356+ E24E             >
1356+ E24E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1356+ E24F 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1356+ E253             >                org     $-1                 // alter last byte of Name just above to set
1356+ E252 D4          >                db      {b $} | END_BIT     // msb as name end
1356+ E253             >
1356+ E253 46 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1356+ E255             >Prev_Ptr        defl    Heap_Ptr
1356+ E255             >
1356+ E255             >mirror_Ptr      defl    $
1356+ E255             >
1356+ E255 3D 68       >                dw      Dict_Ptr + 2        // xt
1356+ E257             >Heap_Ptr        defl    $ - $E000           // save current HP
1356+ E257             >
1356+ E257             >Current_HP      defl  $ - $E000             // used to set HP once!
1356+ E257             >
1356+ E257             >//              ______________________________________________________________________
1356+ E257             >//              Dictionary part
1356+ E257             >
1356+ E257             >                org     Dict_Ptr
1356+ 683B             >
1356+ 683B 55 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1356+ 683D             >
1356+ 683D             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1356+ 683D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1356+ 683D ~           >
1356+ 683D ~           >
1356+ 683D             >                endif           ; ok        // for other definitions it "points" the correct handler
1356+ 683D             >                // Use of "; ok" to suppress "warning[fwdref]"
1356+ 683D             >
1356+ 683D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1357+ 683D EB                           ex      de, hl
1358+ 683E                              // *** ldhlrp                      // Get Return Stack Pointer
1359+ 683E 4E                           ld      c, (hl)             // pop Instruction Pointer
1360+ 683F 23                           inc     hl                  // from Return Stack
1361+ 6840 46                           ld      b, (hl)
1362+ 6841 23                           inc     hl
1363+ 6842                              // *** ldrphl                      // Set Return Stack Pointer
1364+ 6842 EB                           ex      de, hl
1365+ 6843                              next
1365+ 6843 DD E9       >                jp      (ix)
1366+ 6845
1367+ 6845              //  ______________________________________________________________________
1368+ 6845              //
1369+ 6845              // lastl      --
1370+ 6845              // exits back to the caller word
1371+ 6845              //              New_Def EXIT, "LASTL", is_code, is_normal
1372+ 6845              //              push    de
1373+ 6845              //              ex      de, hl //**
1374+ 6845              //              // *** ldhlrp                      // Get Return Stack Pointer
1375+ 6845              //              ld      e, (hl)             // pop Instruction Pointer
1376+ 6845              //              inc     hl                  // from Return Stack
1377+ 6845              //              ld      d, (hl)
1378+ 6845              //              inc     hl
1379+ 6845              //              ld      (hl), e
1380+ 6845              //              inc     hl
1381+ 6845              //              ld      (hl), d
1382+ 6845              //              add     hl, -3
1383+ 6845              //              pop     de
1384+ 6845              //              next
1385+ 6845
1386+ 6845              //  ______________________________________________________________________
1387+ 6845              //
1388+ 6845              // >r      n --
1389+ 6845              // pop from calculator-stack and push into return-stack
1390+ 6845                              New_Def TO_R, ">R", is_code, is_normal
1390+ 6845             >
1390+ 6845             >Dict_Ptr        defl    $
1390+ 6845             >
1390+ 6845             >//              ______________________________________________________________________
1390+ 6845             >//              Heap part
1390+ 6845             >
1390+ 6845             >
1390+ 6845             >                org     (Heap_Ptr & $1FFF) + $E000
1390+ E257             >
1390+ E257             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1390+ E257             >Latest_Definition defl  Heap_Ptr
1390+ E257             >
1390+ E257             >                // dummy db directives used to calculate length of namec
1390+ E257 3E 52       >                db      ">R"
1390+ E259             >len_NFA         defl    $ - temp_NFA
1390+ E259             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1390+ E257             >
1390+ E257 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1390+ E258 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1390+ E25A             >                org     $-1                 // alter last byte of Name just above to set
1390+ E259 D2          >                db      {b $} | END_BIT     // msb as name end
1390+ E25A             >
1390+ E25A 4E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1390+ E25C             >Prev_Ptr        defl    Heap_Ptr
1390+ E25C             >
1390+ E25C             >mirror_Ptr      defl    $
1390+ E25C             >
1390+ E25C 47 68       >                dw      Dict_Ptr + 2        // xt
1390+ E25E             >Heap_Ptr        defl    $ - $E000           // save current HP
1390+ E25E             >
1390+ E25E             >Current_HP      defl  $ - $E000             // used to set HP once!
1390+ E25E             >
1390+ E25E             >//              ______________________________________________________________________
1390+ E25E             >//              Dictionary part
1390+ E25E             >
1390+ E25E             >                org     Dict_Ptr
1390+ 6845             >
1390+ 6845 5C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1390+ 6847             >
1390+ 6847             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1390+ 6847 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1390+ 6847 ~           >
1390+ 6847 ~           >
1390+ 6847             >                endif           ; ok        // for other definitions it "points" the correct handler
1390+ 6847             >                // Use of "; ok" to suppress "warning[fwdref]"
1390+ 6847             >
1390+ 6847             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1391+ 6847 E1                           pop     hl
1392+ 6848 EB                           ex      de, hl //**
1393+ 6849                              // *** ldhlrp
1394+ 6849 2B                           dec     hl
1395+ 684A 72                           ld      (hl), d             // store current TOS
1396+ 684B 2B                           dec     hl                  // to Return Stack
1397+ 684C 73                           ld      (hl), e
1398+ 684D                              // *** ldrphl
1399+ 684D EB                           ex      de, hl //**
1400+ 684E                              next
1400+ 684E DD E9       >                jp      (ix)
1401+ 6850
1402+ 6850              //  ______________________________________________________________________
1403+ 6850              //
1404+ 6850              // r>      -- n
1405+ 6850              // pop from return-stack and push into calculator-stack
1406+ 6850                              New_Def R_TO, "R>", is_code, is_normal
1406+ 6850             >
1406+ 6850             >Dict_Ptr        defl    $
1406+ 6850             >
1406+ 6850             >//              ______________________________________________________________________
1406+ 6850             >//              Heap part
1406+ 6850             >
1406+ 6850             >
1406+ 6850             >                org     (Heap_Ptr & $1FFF) + $E000
1406+ E25E             >
1406+ E25E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1406+ E25E             >Latest_Definition defl  Heap_Ptr
1406+ E25E             >
1406+ E25E             >                // dummy db directives used to calculate length of namec
1406+ E25E 52 3E       >                db      "R>"
1406+ E260             >len_NFA         defl    $ - temp_NFA
1406+ E260             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1406+ E25E             >
1406+ E25E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1406+ E25F 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1406+ E261             >                org     $-1                 // alter last byte of Name just above to set
1406+ E260 BE          >                db      {b $} | END_BIT     // msb as name end
1406+ E261             >
1406+ E261 57 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1406+ E263             >Prev_Ptr        defl    Heap_Ptr
1406+ E263             >
1406+ E263             >mirror_Ptr      defl    $
1406+ E263             >
1406+ E263 52 68       >                dw      Dict_Ptr + 2        // xt
1406+ E265             >Heap_Ptr        defl    $ - $E000           // save current HP
1406+ E265             >
1406+ E265             >Current_HP      defl  $ - $E000             // used to set HP once!
1406+ E265             >
1406+ E265             >//              ______________________________________________________________________
1406+ E265             >//              Dictionary part
1406+ E265             >
1406+ E265             >                org     Dict_Ptr
1406+ 6850             >
1406+ 6850 63 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1406+ 6852             >
1406+ 6852             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1406+ 6852 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1406+ 6852 ~           >
1406+ 6852 ~           >
1406+ 6852             >                endif           ; ok        // for other definitions it "points" the correct handler
1406+ 6852             >                // Use of "; ok" to suppress "warning[fwdref]"
1406+ 6852             >
1406+ 6852             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1407+ 6852
1408+ 6852 EB                           ex      de, hl //**
1409+ 6853                              // *** ldhlrp
1410+ 6853 5E                           ld      e, (hl)             // retrieve from Return Stack
1411+ 6854 23                           inc     hl
1412+ 6855 56                           ld      d, (hl)
1413+ 6856 23                           inc     hl
1414+ 6857                              // *** ldrphl
1415+ 6857 EB                           ex      de, hl //**
1416+ 6858 E5                           push    hl
1417+ 6859                              next
1417+ 6859 DD E9       >                jp      (ix)
1418+ 685B
1419+ 685B              //  ______________________________________________________________________
1420+ 685B              //
1421+ 685B              // r@           -- n
1422+ 685B              // return on top of stack the value of top of return-stack
1423+ 685B              // Since this is the same as I, we alter R's CFA to jump there
1424+ 685B                              New_Def R_OP, "R@", is_code, is_normal
1424+ 685B             >
1424+ 685B             >Dict_Ptr        defl    $
1424+ 685B             >
1424+ 685B             >//              ______________________________________________________________________
1424+ 685B             >//              Heap part
1424+ 685B             >
1424+ 685B             >
1424+ 685B             >                org     (Heap_Ptr & $1FFF) + $E000
1424+ E265             >
1424+ E265             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1424+ E265             >Latest_Definition defl  Heap_Ptr
1424+ E265             >
1424+ E265             >                // dummy db directives used to calculate length of namec
1424+ E265 52 40       >                db      "R@"
1424+ E267             >len_NFA         defl    $ - temp_NFA
1424+ E267             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1424+ E265             >
1424+ E265 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1424+ E266 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1424+ E268             >                org     $-1                 // alter last byte of Name just above to set
1424+ E267 C0          >                db      {b $} | END_BIT     // msb as name end
1424+ E268             >
1424+ E268 5E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1424+ E26A             >Prev_Ptr        defl    Heap_Ptr
1424+ E26A             >
1424+ E26A             >mirror_Ptr      defl    $
1424+ E26A             >
1424+ E26A 5D 68       >                dw      Dict_Ptr + 2        // xt
1424+ E26C             >Heap_Ptr        defl    $ - $E000           // save current HP
1424+ E26C             >
1424+ E26C             >Current_HP      defl  $ - $E000             // used to set HP once!
1424+ E26C             >
1424+ E26C             >//              ______________________________________________________________________
1424+ E26C             >//              Dictionary part
1424+ E26C             >
1424+ E26C             >                org     Dict_Ptr
1424+ 685B             >
1424+ 685B 6A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1424+ 685D             >
1424+ 685D             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1424+ 685D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1424+ 685D ~           >
1424+ 685D ~           >
1424+ 685D             >                endif           ; ok        // for other definitions it "points" the correct handler
1424+ 685D             >                // Use of "; ok" to suppress "warning[fwdref]"
1424+ 685D             >
1424+ 685D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1425+ 685D                          //  Behave  I_Ptr
1426+ 685D C3 32 64                     jp      I_Ptr
1427+ 6860
1428+ 6860              //  ______________________________________________________________________
1429+ 6860              //
1430+ 6860              // r            -- n
1431+ 6860              // return on top of stack the value of top of return-stack
1432+ 6860              // Since this is the same as I, we alter R's CFA to jump there
1433+ 6860              //              New_Def R_OLD, "R", is_code, is_normal
1434+ 6860              //              jp      I_Ptr
1435+ 6860
1436+ 6860              //  ______________________________________________________________________
1437+ 6860              //
1438+ 6860              // 0=           n -- f
1439+ 6860              // true (non zero) if n is zero, false (0) elsewere
1440+ 6860                              New_Def ZEQUAL, "0=", is_code, is_normal
1440+ 6860             >
1440+ 6860             >Dict_Ptr        defl    $
1440+ 6860             >
1440+ 6860             >//              ______________________________________________________________________
1440+ 6860             >//              Heap part
1440+ 6860             >
1440+ 6860             >
1440+ 6860             >                org     (Heap_Ptr & $1FFF) + $E000
1440+ E26C             >
1440+ E26C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1440+ E26C             >Latest_Definition defl  Heap_Ptr
1440+ E26C             >
1440+ E26C             >                // dummy db directives used to calculate length of namec
1440+ E26C 30 3D       >                db      "0="
1440+ E26E             >len_NFA         defl    $ - temp_NFA
1440+ E26E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1440+ E26C             >
1440+ E26C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1440+ E26D 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1440+ E26F             >                org     $-1                 // alter last byte of Name just above to set
1440+ E26E BD          >                db      {b $} | END_BIT     // msb as name end
1440+ E26F             >
1440+ E26F 65 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1440+ E271             >Prev_Ptr        defl    Heap_Ptr
1440+ E271             >
1440+ E271             >mirror_Ptr      defl    $
1440+ E271             >
1440+ E271 62 68       >                dw      Dict_Ptr + 2        // xt
1440+ E273             >Heap_Ptr        defl    $ - $E000           // save current HP
1440+ E273             >
1440+ E273             >Current_HP      defl  $ - $E000             // used to set HP once!
1440+ E273             >
1440+ E273             >//              ______________________________________________________________________
1440+ E273             >//              Dictionary part
1440+ E273             >
1440+ E273             >                org     Dict_Ptr
1440+ 6860             >
1440+ 6860 71 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1440+ 6862             >
1440+ 6862             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1440+ 6862 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1440+ 6862 ~           >
1440+ 6862 ~           >
1440+ 6862             >                endif           ; ok        // for other definitions it "points" the correct handler
1440+ 6862             >                // Use of "; ok" to suppress "warning[fwdref]"
1440+ 6862             >
1440+ 6862             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1441+ 6862              Zero_Equal:
1442+ 6862 E1                           pop     hl
1443+ 6863 7D                           ld      a, l
1444+ 6864 B4                           or      h
1445+ 6865 20 01                        jr      nz, ZEqual_Skip
1446+ 6867 3F                               ccf
1447+ 6868              ZEqual_Skip:
1448+ 6868 ED 62                        sbc     hl, hl
1449+ 686A                              psh1
1449+ 686A E5          >                push    hl
1449+ 686B DD E9       >                jp      (ix)
1450+ 686D
1451+ 686D              //  ______________________________________________________________________
1452+ 686D              //
1453+ 686D              // not         a1 -- a2
1454+ 686D              // increment by 2 top of stack
1455+ 686D                              New_Def NOT_OP, "NOT", is_code, is_normal
1455+ 686D             >
1455+ 686D             >Dict_Ptr        defl    $
1455+ 686D             >
1455+ 686D             >//              ______________________________________________________________________
1455+ 686D             >//              Heap part
1455+ 686D             >
1455+ 686D             >
1455+ 686D             >                org     (Heap_Ptr & $1FFF) + $E000
1455+ E273             >
1455+ E273             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1455+ E273             >Latest_Definition defl  Heap_Ptr
1455+ E273             >
1455+ E273             >                // dummy db directives used to calculate length of namec
1455+ E273 4E 4F 54    >                db      "NOT"
1455+ E276             >len_NFA         defl    $ - temp_NFA
1455+ E276             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1455+ E273             >
1455+ E273 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1455+ E274 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1455+ E277             >                org     $-1                 // alter last byte of Name just above to set
1455+ E276 D4          >                db      {b $} | END_BIT     // msb as name end
1455+ E277             >
1455+ E277 6C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1455+ E279             >Prev_Ptr        defl    Heap_Ptr
1455+ E279             >
1455+ E279             >mirror_Ptr      defl    $
1455+ E279             >
1455+ E279 6F 68       >                dw      Dict_Ptr + 2        // xt
1455+ E27B             >Heap_Ptr        defl    $ - $E000           // save current HP
1455+ E27B             >
1455+ E27B             >Current_HP      defl  $ - $E000             // used to set HP once!
1455+ E27B             >
1455+ E27B             >//              ______________________________________________________________________
1455+ E27B             >//              Dictionary part
1455+ E27B             >
1455+ E27B             >                org     Dict_Ptr
1455+ 686D             >
1455+ 686D 79 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1455+ 686F             >
1455+ 686F             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1455+ 686F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1455+ 686F ~           >
1455+ 686F ~           >
1455+ 686F             >                endif           ; ok        // for other definitions it "points" the correct handler
1455+ 686F             >                // Use of "; ok" to suppress "warning[fwdref]"
1455+ 686F             >
1455+ 686F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1456+ 686F                          //  Behave  Zero_Equal
1457+ 686F 18 F1                        jr      Zero_Equal
1458+ 6871
1459+ 6871              //  ______________________________________________________________________
1460+ 6871              //
1461+ 6871              // 0<           n -- f
1462+ 6871              // true (non zero) if n is less than zero, false (0) elsewere
1463+ 6871                              New_Def ZLESS, "0<", is_code, is_normal
1463+ 6871             >
1463+ 6871             >Dict_Ptr        defl    $
1463+ 6871             >
1463+ 6871             >//              ______________________________________________________________________
1463+ 6871             >//              Heap part
1463+ 6871             >
1463+ 6871             >
1463+ 6871             >                org     (Heap_Ptr & $1FFF) + $E000
1463+ E27B             >
1463+ E27B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1463+ E27B             >Latest_Definition defl  Heap_Ptr
1463+ E27B             >
1463+ E27B             >                // dummy db directives used to calculate length of namec
1463+ E27B 30 3C       >                db      "0<"
1463+ E27D             >len_NFA         defl    $ - temp_NFA
1463+ E27D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1463+ E27B             >
1463+ E27B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1463+ E27C 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1463+ E27E             >                org     $-1                 // alter last byte of Name just above to set
1463+ E27D BC          >                db      {b $} | END_BIT     // msb as name end
1463+ E27E             >
1463+ E27E 73 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1463+ E280             >Prev_Ptr        defl    Heap_Ptr
1463+ E280             >
1463+ E280             >mirror_Ptr      defl    $
1463+ E280             >
1463+ E280 73 68       >                dw      Dict_Ptr + 2        // xt
1463+ E282             >Heap_Ptr        defl    $ - $E000           // save current HP
1463+ E282             >
1463+ E282             >Current_HP      defl  $ - $E000             // used to set HP once!
1463+ E282             >
1463+ E282             >//              ______________________________________________________________________
1463+ E282             >//              Dictionary part
1463+ E282             >
1463+ E282             >                org     Dict_Ptr
1463+ 6871             >
1463+ 6871 80 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1463+ 6873             >
1463+ 6873             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1463+ 6873 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1463+ 6873 ~           >
1463+ 6873 ~           >
1463+ 6873             >                endif           ; ok        // for other definitions it "points" the correct handler
1463+ 6873             >                // Use of "; ok" to suppress "warning[fwdref]"
1463+ 6873             >
1463+ 6873             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1464+ 6873 E1                           pop     hl
1465+ 6874 29                           add     hl, hl
1466+ 6875 ED 62                        sbc     hl, hl
1467+ 6877                              psh1
1467+ 6877 E5          >                push    hl
1467+ 6878 DD E9       >                jp      (ix)
1468+ 687A
1469+ 687A              //  ______________________________________________________________________
1470+ 687A              //
1471+ 687A              // 0>           n -- f
1472+ 687A              // true (non zero) if n is less than zero, false (0) elsewere
1473+ 687A                              New_Def ZGREATER, "0>", is_code, is_normal
1473+ 687A             >
1473+ 687A             >Dict_Ptr        defl    $
1473+ 687A             >
1473+ 687A             >//              ______________________________________________________________________
1473+ 687A             >//              Heap part
1473+ 687A             >
1473+ 687A             >
1473+ 687A             >                org     (Heap_Ptr & $1FFF) + $E000
1473+ E282             >
1473+ E282             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1473+ E282             >Latest_Definition defl  Heap_Ptr
1473+ E282             >
1473+ E282             >                // dummy db directives used to calculate length of namec
1473+ E282 30 3E       >                db      "0>"
1473+ E284             >len_NFA         defl    $ - temp_NFA
1473+ E284             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1473+ E282             >
1473+ E282 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1473+ E283 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1473+ E285             >                org     $-1                 // alter last byte of Name just above to set
1473+ E284 BE          >                db      {b $} | END_BIT     // msb as name end
1473+ E285             >
1473+ E285 7B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1473+ E287             >Prev_Ptr        defl    Heap_Ptr
1473+ E287             >
1473+ E287             >mirror_Ptr      defl    $
1473+ E287             >
1473+ E287 7C 68       >                dw      Dict_Ptr + 2        // xt
1473+ E289             >Heap_Ptr        defl    $ - $E000           // save current HP
1473+ E289             >
1473+ E289             >Current_HP      defl  $ - $E000             // used to set HP once!
1473+ E289             >
1473+ E289             >//              ______________________________________________________________________
1473+ E289             >//              Dictionary part
1473+ E289             >
1473+ E289             >                org     Dict_Ptr
1473+ 687A             >
1473+ 687A 87 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1473+ 687C             >
1473+ 687C             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1473+ 687C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1473+ 687C ~           >
1473+ 687C ~           >
1473+ 687C             >                endif           ; ok        // for other definitions it "points" the correct handler
1473+ 687C             >                // Use of "; ok" to suppress "warning[fwdref]"
1473+ 687C             >
1473+ 687C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1474+ 687C E1                           pop     hl
1475+ 687D 7D                           ld      a, l
1476+ 687E B4                           or      h
1477+ 687F 28 04                        jr      z, ZGreater_Skip
1478+ 6881 29                           add     hl, hl
1479+ 6882 3F                           ccf
1480+ 6883 ED 62                        sbc     hl, hl
1481+ 6885              ZGreater_Skip:
1482+ 6885                              psh1
1482+ 6885 E5          >                push    hl
1482+ 6886 DD E9       >                jp      (ix)
1483+ 6888
1484+ 6888              //  ______________________________________________________________________
1485+ 6888              //
1486+ 6888              // +            n1 n2 -- n3
1487+ 6888              // returns the unsigned sum of two top values
1488+ 6888                              New_Def PLUS, "+", is_code, is_normal
1488+ 6888             >
1488+ 6888             >Dict_Ptr        defl    $
1488+ 6888             >
1488+ 6888             >//              ______________________________________________________________________
1488+ 6888             >//              Heap part
1488+ 6888             >
1488+ 6888             >
1488+ 6888             >                org     (Heap_Ptr & $1FFF) + $E000
1488+ E289             >
1488+ E289             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1488+ E289             >Latest_Definition defl  Heap_Ptr
1488+ E289             >
1488+ E289             >                // dummy db directives used to calculate length of namec
1488+ E289 2B          >                db      "+"
1488+ E28A             >len_NFA         defl    $ - temp_NFA
1488+ E28A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1488+ E289             >
1488+ E289 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1488+ E28A 2B          >                db      "+"               // name string in 7-bit ascii, but
1488+ E28B             >                org     $-1                 // alter last byte of Name just above to set
1488+ E28A AB          >                db      {b $} | END_BIT     // msb as name end
1488+ E28B             >
1488+ E28B 82 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1488+ E28D             >Prev_Ptr        defl    Heap_Ptr
1488+ E28D             >
1488+ E28D             >mirror_Ptr      defl    $
1488+ E28D             >
1488+ E28D 8A 68       >                dw      Dict_Ptr + 2        // xt
1488+ E28F             >Heap_Ptr        defl    $ - $E000           // save current HP
1488+ E28F             >
1488+ E28F             >Current_HP      defl  $ - $E000             // used to set HP once!
1488+ E28F             >
1488+ E28F             >//              ______________________________________________________________________
1488+ E28F             >//              Dictionary part
1488+ E28F             >
1488+ E28F             >                org     Dict_Ptr
1488+ 6888             >
1488+ 6888 8D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1488+ 688A             >
1488+ 688A             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1488+ 688A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1488+ 688A ~           >
1488+ 688A ~           >
1488+ 688A             >                endif           ; ok        // for other definitions it "points" the correct handler
1488+ 688A             >                // Use of "; ok" to suppress "warning[fwdref]"
1488+ 688A             >
1488+ 688A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1489+ 688A D9                           exx
1490+ 688B E1                           pop     hl
1491+ 688C D1                           pop     de
1492+ 688D 19                           add     hl, de
1493+ 688E E5                           push    hl
1494+ 688F D9                           exx
1495+ 6890                              next
1495+ 6890 DD E9       >                jp      (ix)
1496+ 6892
1497+ 6892
1498+ 6892              //  ______________________________________________________________________
1499+ 6892              //
1500+ 6892              // d+           d1 d2 -- d3
1501+ 6892              // returns the unsigned sum of two top double-numbers
1502+ 6892              //      d2  d1
1503+ 6892              //      h l h l
1504+ 6892              // SP   LHEDLHED
1505+ 6892              // SP  +01234567
1506+ 6892                              New_Def DPLUS, "D+", is_code, is_normal
1506+ 6892             >
1506+ 6892             >Dict_Ptr        defl    $
1506+ 6892             >
1506+ 6892             >//              ______________________________________________________________________
1506+ 6892             >//              Heap part
1506+ 6892             >
1506+ 6892             >
1506+ 6892             >                org     (Heap_Ptr & $1FFF) + $E000
1506+ E28F             >
1506+ E28F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1506+ E28F             >Latest_Definition defl  Heap_Ptr
1506+ E28F             >
1506+ E28F             >                // dummy db directives used to calculate length of namec
1506+ E28F 44 2B       >                db      "D+"
1506+ E291             >len_NFA         defl    $ - temp_NFA
1506+ E291             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1506+ E28F             >
1506+ E28F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1506+ E290 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1506+ E292             >                org     $-1                 // alter last byte of Name just above to set
1506+ E291 AB          >                db      {b $} | END_BIT     // msb as name end
1506+ E292             >
1506+ E292 89 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1506+ E294             >Prev_Ptr        defl    Heap_Ptr
1506+ E294             >
1506+ E294             >mirror_Ptr      defl    $
1506+ E294             >
1506+ E294 94 68       >                dw      Dict_Ptr + 2        // xt
1506+ E296             >Heap_Ptr        defl    $ - $E000           // save current HP
1506+ E296             >
1506+ E296             >Current_HP      defl  $ - $E000             // used to set HP once!
1506+ E296             >
1506+ E296             >//              ______________________________________________________________________
1506+ E296             >//              Dictionary part
1506+ E296             >
1506+ E296             >                org     Dict_Ptr
1506+ 6892             >
1506+ 6892 94 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1506+ 6894             >
1506+ 6894             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1506+ 6894 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1506+ 6894 ~           >
1506+ 6894 ~           >
1506+ 6894             >                endif           ; ok        // for other definitions it "points" the correct handler
1506+ 6894             >                // Use of "; ok" to suppress "warning[fwdref]"
1506+ 6894             >
1506+ 6894             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1507+ 6894
1508+ 6894 D9                           exx
1509+ 6895 C1                           pop     bc                  // bc := d2.H
1510+ 6896 D1                           pop     de                  // hl := d2.L
1511+ 6897 E1                           pop     hl                  // d1.H
1512+ 6898 E3                           ex      (sp), hl            // d1.L
1513+ 6899 19                           add     hl, de              // hl := d2.L + d1.L
1514+ 689A E3                           ex      (sp), hl            // d1.H
1515+ 689B ED 4A                        adc     hl, bc              // d1.H + d2.H
1516+ 689D E5                           push    hl
1517+ 689E D9                           exx
1518+ 689F                              next
1518+ 689F DD E9       >                jp      (ix)
1519+ 68A1
1520+ 68A1              //  ______________________________________________________________________
1521+ 68A1              //
1522+ 68A1              // 1+           n1 -- n2
1523+ 68A1              // increment by 1 top of stack
1524+ 68A1                              New_Def ONE_PLUS, "1+", is_code, is_normal
1524+ 68A1             >
1524+ 68A1             >Dict_Ptr        defl    $
1524+ 68A1             >
1524+ 68A1             >//              ______________________________________________________________________
1524+ 68A1             >//              Heap part
1524+ 68A1             >
1524+ 68A1             >
1524+ 68A1             >                org     (Heap_Ptr & $1FFF) + $E000
1524+ E296             >
1524+ E296             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1524+ E296             >Latest_Definition defl  Heap_Ptr
1524+ E296             >
1524+ E296             >                // dummy db directives used to calculate length of namec
1524+ E296 31 2B       >                db      "1+"
1524+ E298             >len_NFA         defl    $ - temp_NFA
1524+ E298             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1524+ E296             >
1524+ E296 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1524+ E297 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1524+ E299             >                org     $-1                 // alter last byte of Name just above to set
1524+ E298 AB          >                db      {b $} | END_BIT     // msb as name end
1524+ E299             >
1524+ E299 8F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1524+ E29B             >Prev_Ptr        defl    Heap_Ptr
1524+ E29B             >
1524+ E29B             >mirror_Ptr      defl    $
1524+ E29B             >
1524+ E29B A3 68       >                dw      Dict_Ptr + 2        // xt
1524+ E29D             >Heap_Ptr        defl    $ - $E000           // save current HP
1524+ E29D             >
1524+ E29D             >Current_HP      defl  $ - $E000             // used to set HP once!
1524+ E29D             >
1524+ E29D             >//              ______________________________________________________________________
1524+ E29D             >//              Dictionary part
1524+ E29D             >
1524+ E29D             >                org     Dict_Ptr
1524+ 68A1             >
1524+ 68A1 9B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1524+ 68A3             >
1524+ 68A3             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1524+ 68A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1524+ 68A3 ~           >
1524+ 68A3 ~           >
1524+ 68A3             >                endif           ; ok        // for other definitions it "points" the correct handler
1524+ 68A3             >                // Use of "; ok" to suppress "warning[fwdref]"
1524+ 68A3             >
1524+ 68A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1525+ 68A3 E1                           pop     hl
1526+ 68A4 23                           inc     hl
1527+ 68A5
1528+ 68A5                              psh1
1528+ 68A5 E5          >                push    hl
1528+ 68A6 DD E9       >                jp      (ix)
1529+ 68A8
1530+ 68A8              //  ______________________________________________________________________
1531+ 68A8              //
1532+ 68A8              // 1-           n1 -- n2
1533+ 68A8              // decrement by 1 top of stack
1534+ 68A8                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1534+ 68A8             >
1534+ 68A8             >Dict_Ptr        defl    $
1534+ 68A8             >
1534+ 68A8             >//              ______________________________________________________________________
1534+ 68A8             >//              Heap part
1534+ 68A8             >
1534+ 68A8             >
1534+ 68A8             >                org     (Heap_Ptr & $1FFF) + $E000
1534+ E29D             >
1534+ E29D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1534+ E29D             >Latest_Definition defl  Heap_Ptr
1534+ E29D             >
1534+ E29D             >                // dummy db directives used to calculate length of namec
1534+ E29D 31 2D       >                db      "1-"
1534+ E29F             >len_NFA         defl    $ - temp_NFA
1534+ E29F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1534+ E29D             >
1534+ E29D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1534+ E29E 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1534+ E2A0             >                org     $-1                 // alter last byte of Name just above to set
1534+ E29F AD          >                db      {b $} | END_BIT     // msb as name end
1534+ E2A0             >
1534+ E2A0 96 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1534+ E2A2             >Prev_Ptr        defl    Heap_Ptr
1534+ E2A2             >
1534+ E2A2             >mirror_Ptr      defl    $
1534+ E2A2             >
1534+ E2A2 AA 68       >                dw      Dict_Ptr + 2        // xt
1534+ E2A4             >Heap_Ptr        defl    $ - $E000           // save current HP
1534+ E2A4             >
1534+ E2A4             >Current_HP      defl  $ - $E000             // used to set HP once!
1534+ E2A4             >
1534+ E2A4             >//              ______________________________________________________________________
1534+ E2A4             >//              Dictionary part
1534+ E2A4             >
1534+ E2A4             >                org     Dict_Ptr
1534+ 68A8             >
1534+ 68A8 A2 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1534+ 68AA             >
1534+ 68AA             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1534+ 68AA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1534+ 68AA ~           >
1534+ 68AA ~           >
1534+ 68AA             >                endif           ; ok        // for other definitions it "points" the correct handler
1534+ 68AA             >                // Use of "; ok" to suppress "warning[fwdref]"
1534+ 68AA             >
1534+ 68AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1535+ 68AA E1                           pop     hl
1536+ 68AB 2B                           dec     hl
1537+ 68AC
1538+ 68AC                              psh1
1538+ 68AC E5          >                push    hl
1538+ 68AD DD E9       >                jp      (ix)
1539+ 68AF
1540+ 68AF              //  ______________________________________________________________________
1541+ 68AF              //
1542+ 68AF              // 2+           n1 -- n2
1543+ 68AF              // increment by 2 top of stack
1544+ 68AF                              New_Def TWO_PLUS, "2+", is_code, is_normal
1544+ 68AF             >
1544+ 68AF             >Dict_Ptr        defl    $
1544+ 68AF             >
1544+ 68AF             >//              ______________________________________________________________________
1544+ 68AF             >//              Heap part
1544+ 68AF             >
1544+ 68AF             >
1544+ 68AF             >                org     (Heap_Ptr & $1FFF) + $E000
1544+ E2A4             >
1544+ E2A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1544+ E2A4             >Latest_Definition defl  Heap_Ptr
1544+ E2A4             >
1544+ E2A4             >                // dummy db directives used to calculate length of namec
1544+ E2A4 32 2B       >                db      "2+"
1544+ E2A6             >len_NFA         defl    $ - temp_NFA
1544+ E2A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1544+ E2A4             >
1544+ E2A4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1544+ E2A5 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1544+ E2A7             >                org     $-1                 // alter last byte of Name just above to set
1544+ E2A6 AB          >                db      {b $} | END_BIT     // msb as name end
1544+ E2A7             >
1544+ E2A7 9D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1544+ E2A9             >Prev_Ptr        defl    Heap_Ptr
1544+ E2A9             >
1544+ E2A9             >mirror_Ptr      defl    $
1544+ E2A9             >
1544+ E2A9 B1 68       >                dw      Dict_Ptr + 2        // xt
1544+ E2AB             >Heap_Ptr        defl    $ - $E000           // save current HP
1544+ E2AB             >
1544+ E2AB             >Current_HP      defl  $ - $E000             // used to set HP once!
1544+ E2AB             >
1544+ E2AB             >//              ______________________________________________________________________
1544+ E2AB             >//              Dictionary part
1544+ E2AB             >
1544+ E2AB             >                org     Dict_Ptr
1544+ 68AF             >
1544+ 68AF A9 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1544+ 68B1             >
1544+ 68B1             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1544+ 68B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1544+ 68B1 ~           >
1544+ 68B1 ~           >
1544+ 68B1             >                endif           ; ok        // for other definitions it "points" the correct handler
1544+ 68B1             >                // Use of "; ok" to suppress "warning[fwdref]"
1544+ 68B1             >
1544+ 68B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1545+ 68B1              Two_Plus:
1546+ 68B1 E1                           pop     hl
1547+ 68B2 23                           inc     hl
1548+ 68B3 23                           inc     hl
1549+ 68B4
1550+ 68B4                              psh1
1550+ 68B4 E5          >                push    hl
1550+ 68B5 DD E9       >                jp      (ix)
1551+ 68B7
1552+ 68B7              //  ______________________________________________________________________
1553+ 68B7              //
1554+ 68B7              // cell+        a1 -- a2
1555+ 68B7              // increment by 2 top of stack
1556+ 68B7                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1556+ 68B7             >
1556+ 68B7             >Dict_Ptr        defl    $
1556+ 68B7             >
1556+ 68B7             >//              ______________________________________________________________________
1556+ 68B7             >//              Heap part
1556+ 68B7             >
1556+ 68B7             >
1556+ 68B7             >                org     (Heap_Ptr & $1FFF) + $E000
1556+ E2AB             >
1556+ E2AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1556+ E2AB             >Latest_Definition defl  Heap_Ptr
1556+ E2AB             >
1556+ E2AB             >                // dummy db directives used to calculate length of namec
1556+ E2AB 43 45 4C 4C >                db      "CELL+"
1556+ E2AF 2B          >
1556+ E2B0             >len_NFA         defl    $ - temp_NFA
1556+ E2B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1556+ E2AB             >
1556+ E2AB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1556+ E2AC 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1556+ E2B0 2B          >
1556+ E2B1             >                org     $-1                 // alter last byte of Name just above to set
1556+ E2B0 AB          >                db      {b $} | END_BIT     // msb as name end
1556+ E2B1             >
1556+ E2B1 A4 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1556+ E2B3             >Prev_Ptr        defl    Heap_Ptr
1556+ E2B3             >
1556+ E2B3             >mirror_Ptr      defl    $
1556+ E2B3             >
1556+ E2B3 B9 68       >                dw      Dict_Ptr + 2        // xt
1556+ E2B5             >Heap_Ptr        defl    $ - $E000           // save current HP
1556+ E2B5             >
1556+ E2B5             >Current_HP      defl  $ - $E000             // used to set HP once!
1556+ E2B5             >
1556+ E2B5             >//              ______________________________________________________________________
1556+ E2B5             >//              Dictionary part
1556+ E2B5             >
1556+ E2B5             >                org     Dict_Ptr
1556+ 68B7             >
1556+ 68B7 B3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1556+ 68B9             >
1556+ 68B9             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1556+ 68B9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1556+ 68B9 ~           >
1556+ 68B9 ~           >
1556+ 68B9             >                endif           ; ok        // for other definitions it "points" the correct handler
1556+ 68B9             >                // Use of "; ok" to suppress "warning[fwdref]"
1556+ 68B9             >
1556+ 68B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1557+ 68B9 18 F6                        jr      Two_Plus
1558+ 68BB
1559+ 68BB              //  ______________________________________________________________________
1560+ 68BB              //
1561+ 68BB              // align        a1 -- a2
1562+ 68BB              // align memory : not used
1563+ 68BB              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1564+ 68BB              //            next
1565+ 68BB
1566+ 68BB              //  ______________________________________________________________________
1567+ 68BB              //
1568+ 68BB              // cell-        a1 -- a2
1569+ 68BB              // decrement by 2 top of stack
1570+ 68BB                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1570+ 68BB             >
1570+ 68BB             >Dict_Ptr        defl    $
1570+ 68BB             >
1570+ 68BB             >//              ______________________________________________________________________
1570+ 68BB             >//              Heap part
1570+ 68BB             >
1570+ 68BB             >
1570+ 68BB             >                org     (Heap_Ptr & $1FFF) + $E000
1570+ E2B5             >
1570+ E2B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1570+ E2B5             >Latest_Definition defl  Heap_Ptr
1570+ E2B5             >
1570+ E2B5             >                // dummy db directives used to calculate length of namec
1570+ E2B5 43 45 4C 4C >                db      "CELL-"
1570+ E2B9 2D          >
1570+ E2BA             >len_NFA         defl    $ - temp_NFA
1570+ E2BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1570+ E2B5             >
1570+ E2B5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1570+ E2B6 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1570+ E2BA 2D          >
1570+ E2BB             >                org     $-1                 // alter last byte of Name just above to set
1570+ E2BA AD          >                db      {b $} | END_BIT     // msb as name end
1570+ E2BB             >
1570+ E2BB AB 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1570+ E2BD             >Prev_Ptr        defl    Heap_Ptr
1570+ E2BD             >
1570+ E2BD             >mirror_Ptr      defl    $
1570+ E2BD             >
1570+ E2BD BD 68       >                dw      Dict_Ptr + 2        // xt
1570+ E2BF             >Heap_Ptr        defl    $ - $E000           // save current HP
1570+ E2BF             >
1570+ E2BF             >Current_HP      defl  $ - $E000             // used to set HP once!
1570+ E2BF             >
1570+ E2BF             >//              ______________________________________________________________________
1570+ E2BF             >//              Dictionary part
1570+ E2BF             >
1570+ E2BF             >                org     Dict_Ptr
1570+ 68BB             >
1570+ 68BB BD 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1570+ 68BD             >
1570+ 68BD             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1570+ 68BD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1570+ 68BD ~           >
1570+ 68BD ~           >
1570+ 68BD             >                endif           ; ok        // for other definitions it "points" the correct handler
1570+ 68BD             >                // Use of "; ok" to suppress "warning[fwdref]"
1570+ 68BD             >
1570+ 68BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1571+ 68BD              CellMinus:
1572+ 68BD E1                           pop     hl
1573+ 68BE 2B                           dec     hl
1574+ 68BF 2B                           dec     hl
1575+ 68C0
1576+ 68C0                              psh1
1576+ 68C0 E5          >                push    hl
1576+ 68C1 DD E9       >                jp      (ix)
1577+ 68C3
1578+ 68C3              //  ______________________________________________________________________
1579+ 68C3              //
1580+ 68C3              // 2-           a1 -- a2
1581+ 68C3              // decrement by 2 top of stack
1582+ 68C3                              New_Def TWO_MINUS, "2-", is_code, is_normal
1582+ 68C3             >
1582+ 68C3             >Dict_Ptr        defl    $
1582+ 68C3             >
1582+ 68C3             >//              ______________________________________________________________________
1582+ 68C3             >//              Heap part
1582+ 68C3             >
1582+ 68C3             >
1582+ 68C3             >                org     (Heap_Ptr & $1FFF) + $E000
1582+ E2BF             >
1582+ E2BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1582+ E2BF             >Latest_Definition defl  Heap_Ptr
1582+ E2BF             >
1582+ E2BF             >                // dummy db directives used to calculate length of namec
1582+ E2BF 32 2D       >                db      "2-"
1582+ E2C1             >len_NFA         defl    $ - temp_NFA
1582+ E2C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1582+ E2BF             >
1582+ E2BF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1582+ E2C0 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1582+ E2C2             >                org     $-1                 // alter last byte of Name just above to set
1582+ E2C1 AD          >                db      {b $} | END_BIT     // msb as name end
1582+ E2C2             >
1582+ E2C2 B5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1582+ E2C4             >Prev_Ptr        defl    Heap_Ptr
1582+ E2C4             >
1582+ E2C4             >mirror_Ptr      defl    $
1582+ E2C4             >
1582+ E2C4 C5 68       >                dw      Dict_Ptr + 2        // xt
1582+ E2C6             >Heap_Ptr        defl    $ - $E000           // save current HP
1582+ E2C6             >
1582+ E2C6             >Current_HP      defl  $ - $E000             // used to set HP once!
1582+ E2C6             >
1582+ E2C6             >//              ______________________________________________________________________
1582+ E2C6             >//              Dictionary part
1582+ E2C6             >
1582+ E2C6             >                org     Dict_Ptr
1582+ 68C3             >
1582+ 68C3 C4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1582+ 68C5             >
1582+ 68C5             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1582+ 68C5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1582+ 68C5 ~           >
1582+ 68C5 ~           >
1582+ 68C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1582+ 68C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1582+ 68C5             >
1582+ 68C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1583+ 68C5 C3 BD 68                     jp      CellMinus
1584+ 68C8
1585+ 68C8              //  ______________________________________________________________________
1586+ 68C8              //
1587+ 68C8              // negate       n1 -- n2
1588+ 68C8              // change the sign of number
1589+ 68C8                              New_Def MINUS, "NEGATE", is_code, is_normal
1589+ 68C8             >
1589+ 68C8             >Dict_Ptr        defl    $
1589+ 68C8             >
1589+ 68C8             >//              ______________________________________________________________________
1589+ 68C8             >//              Heap part
1589+ 68C8             >
1589+ 68C8             >
1589+ 68C8             >                org     (Heap_Ptr & $1FFF) + $E000
1589+ E2C6             >
1589+ E2C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1589+ E2C6             >Latest_Definition defl  Heap_Ptr
1589+ E2C6             >
1589+ E2C6             >                // dummy db directives used to calculate length of namec
1589+ E2C6 4E 45 47 41 >                db      "NEGATE"
1589+ E2CA 54 45       >
1589+ E2CC             >len_NFA         defl    $ - temp_NFA
1589+ E2CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1589+ E2C6             >
1589+ E2C6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1589+ E2C7 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1589+ E2CB 54 45       >
1589+ E2CD             >                org     $-1                 // alter last byte of Name just above to set
1589+ E2CC C5          >                db      {b $} | END_BIT     // msb as name end
1589+ E2CD             >
1589+ E2CD BF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1589+ E2CF             >Prev_Ptr        defl    Heap_Ptr
1589+ E2CF             >
1589+ E2CF             >mirror_Ptr      defl    $
1589+ E2CF             >
1589+ E2CF CA 68       >                dw      Dict_Ptr + 2        // xt
1589+ E2D1             >Heap_Ptr        defl    $ - $E000           // save current HP
1589+ E2D1             >
1589+ E2D1             >Current_HP      defl  $ - $E000             // used to set HP once!
1589+ E2D1             >
1589+ E2D1             >//              ______________________________________________________________________
1589+ E2D1             >//              Dictionary part
1589+ E2D1             >
1589+ E2D1             >                org     Dict_Ptr
1589+ 68C8             >
1589+ 68C8 CF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1589+ 68CA             >
1589+ 68CA             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1589+ 68CA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1589+ 68CA ~           >
1589+ 68CA ~           >
1589+ 68CA             >                endif           ; ok        // for other definitions it "points" the correct handler
1589+ 68CA             >                // Use of "; ok" to suppress "warning[fwdref]"
1589+ 68CA             >
1589+ 68CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1590+ 68CA D9                           exx
1591+ 68CB D1                           pop     de
1592+ 68CC AF                           xor     a
1593+ 68CD              Negate_Ptr:
1594+ 68CD 67                           ld      h, a
1595+ 68CE 6F                           ld      l, a
1596+ 68CF ED 52                        sbc     hl, de
1597+ 68D1 E5                           push    hl
1598+ 68D2 D9                           exx
1599+ 68D3                              next
1599+ 68D3 DD E9       >                jp      (ix)
1600+ 68D5
1601+ 68D5              //  ______________________________________________________________________
1602+ 68D5              //
1603+ 68D5              // dnegate      d1 -- d2
1604+ 68D5              // change the sign of a double number
1605+ 68D5                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1605+ 68D5             >
1605+ 68D5             >Dict_Ptr        defl    $
1605+ 68D5             >
1605+ 68D5             >//              ______________________________________________________________________
1605+ 68D5             >//              Heap part
1605+ 68D5             >
1605+ 68D5             >
1605+ 68D5             >                org     (Heap_Ptr & $1FFF) + $E000
1605+ E2D1             >
1605+ E2D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1605+ E2D1             >Latest_Definition defl  Heap_Ptr
1605+ E2D1             >
1605+ E2D1             >                // dummy db directives used to calculate length of namec
1605+ E2D1 44 4E 45 47 >                db      "DNEGATE"
1605+ E2D5 41 54 45    >
1605+ E2D8             >len_NFA         defl    $ - temp_NFA
1605+ E2D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1605+ E2D1             >
1605+ E2D1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1605+ E2D2 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1605+ E2D6 41 54 45    >
1605+ E2D9             >                org     $-1                 // alter last byte of Name just above to set
1605+ E2D8 C5          >                db      {b $} | END_BIT     // msb as name end
1605+ E2D9             >
1605+ E2D9 C6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1605+ E2DB             >Prev_Ptr        defl    Heap_Ptr
1605+ E2DB             >
1605+ E2DB             >mirror_Ptr      defl    $
1605+ E2DB             >
1605+ E2DB D7 68       >                dw      Dict_Ptr + 2        // xt
1605+ E2DD             >Heap_Ptr        defl    $ - $E000           // save current HP
1605+ E2DD             >
1605+ E2DD             >Current_HP      defl  $ - $E000             // used to set HP once!
1605+ E2DD             >
1605+ E2DD             >//              ______________________________________________________________________
1605+ E2DD             >//              Dictionary part
1605+ E2DD             >
1605+ E2DD             >                org     Dict_Ptr
1605+ 68D5             >
1605+ 68D5 DB 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1605+ 68D7             >
1605+ 68D7             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1605+ 68D7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1605+ 68D7 ~           >
1605+ 68D7 ~           >
1605+ 68D7             >                endif           ; ok        // for other definitions it "points" the correct handler
1605+ 68D7             >                // Use of "; ok" to suppress "warning[fwdref]"
1605+ 68D7             >
1605+ 68D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1606+ 68D7 D9                           exx
1607+ 68D8 D1                           pop     de                  // d1.H
1608+ 68D9 C1                           pop     bc                  // d1.L
1609+ 68DA AF                           xor     a
1610+ 68DB 67                           ld      h, a
1611+ 68DC 6F                           ld      l, a
1612+ 68DD ED 42                        sbc     hl, bc              // subtact from zero
1613+ 68DF E5                           push    hl                  // > d2-L
1614+ 68E0
1615+ 68E0 18 EB                        jr      Negate_Ptr
1616+ 68E2              //              ld      h, a
1617+ 68E2              //              ld      l, a
1618+ 68E2              //              sbc     hl, de              // subtract from zero with carry
1619+ 68E2                                                          // > d2-H
1620+ 68E2              //              push    hl
1621+ 68E2              //              exx
1622+ 68E2              //              next
1623+ 68E2
1624+ 68E2              //  ______________________________________________________________________
1625+ 68E2              //
1626+ 68E2              // over         n1 n2 -- n1 n2 n1
1627+ 68E2              // copy the second value of stack and put it on top.
1628+ 68E2                              New_Def OVER, "OVER", is_code, is_normal
1628+ 68E2             >
1628+ 68E2             >Dict_Ptr        defl    $
1628+ 68E2             >
1628+ 68E2             >//              ______________________________________________________________________
1628+ 68E2             >//              Heap part
1628+ 68E2             >
1628+ 68E2             >
1628+ 68E2             >                org     (Heap_Ptr & $1FFF) + $E000
1628+ E2DD             >
1628+ E2DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1628+ E2DD             >Latest_Definition defl  Heap_Ptr
1628+ E2DD             >
1628+ E2DD             >                // dummy db directives used to calculate length of namec
1628+ E2DD 4F 56 45 52 >                db      "OVER"
1628+ E2E1             >len_NFA         defl    $ - temp_NFA
1628+ E2E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1628+ E2DD             >
1628+ E2DD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1628+ E2DE 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1628+ E2E2             >                org     $-1                 // alter last byte of Name just above to set
1628+ E2E1 D2          >                db      {b $} | END_BIT     // msb as name end
1628+ E2E2             >
1628+ E2E2 D1 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1628+ E2E4             >Prev_Ptr        defl    Heap_Ptr
1628+ E2E4             >
1628+ E2E4             >mirror_Ptr      defl    $
1628+ E2E4             >
1628+ E2E4 E4 68       >                dw      Dict_Ptr + 2        // xt
1628+ E2E6             >Heap_Ptr        defl    $ - $E000           // save current HP
1628+ E2E6             >
1628+ E2E6             >Current_HP      defl  $ - $E000             // used to set HP once!
1628+ E2E6             >
1628+ E2E6             >//              ______________________________________________________________________
1628+ E2E6             >//              Dictionary part
1628+ E2E6             >
1628+ E2E6             >                org     Dict_Ptr
1628+ 68E2             >
1628+ 68E2 E4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1628+ 68E4             >
1628+ 68E4             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1628+ 68E4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1628+ 68E4 ~           >
1628+ 68E4 ~           >
1628+ 68E4             >                endif           ; ok        // for other definitions it "points" the correct handler
1628+ 68E4             >                // Use of "; ok" to suppress "warning[fwdref]"
1628+ 68E4             >
1628+ 68E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1629+ 68E4                              // exx     // we can use af instead OPTIMIZATION possible
1630+ 68E4 F1                           pop     af                  //   n2
1631+ 68E5 E1                           pop     hl                  // < n1
1632+ 68E6 E5                           push    hl                  // > n1
1633+ 68E7 F5                           push    af                  // > n2
1634+ 68E8 E5                           push    hl                  // > n1
1635+ 68E9                              // exx
1636+ 68E9                              next
1636+ 68E9 DD E9       >                jp      (ix)
1637+ 68EB
1638+ 68EB              //  ______________________________________________________________________
1639+ 68EB              //
1640+ 68EB              // drop         n1 --
1641+ 68EB              // drops the top of stack
1642+ 68EB                              New_Def DROP, "DROP", is_code, is_normal
1642+ 68EB             >
1642+ 68EB             >Dict_Ptr        defl    $
1642+ 68EB             >
1642+ 68EB             >//              ______________________________________________________________________
1642+ 68EB             >//              Heap part
1642+ 68EB             >
1642+ 68EB             >
1642+ 68EB             >                org     (Heap_Ptr & $1FFF) + $E000
1642+ E2E6             >
1642+ E2E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1642+ E2E6             >Latest_Definition defl  Heap_Ptr
1642+ E2E6             >
1642+ E2E6             >                // dummy db directives used to calculate length of namec
1642+ E2E6 44 52 4F 50 >                db      "DROP"
1642+ E2EA             >len_NFA         defl    $ - temp_NFA
1642+ E2EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1642+ E2E6             >
1642+ E2E6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1642+ E2E7 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1642+ E2EB             >                org     $-1                 // alter last byte of Name just above to set
1642+ E2EA D0          >                db      {b $} | END_BIT     // msb as name end
1642+ E2EB             >
1642+ E2EB DD 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1642+ E2ED             >Prev_Ptr        defl    Heap_Ptr
1642+ E2ED             >
1642+ E2ED             >mirror_Ptr      defl    $
1642+ E2ED             >
1642+ E2ED ED 68       >                dw      Dict_Ptr + 2        // xt
1642+ E2EF             >Heap_Ptr        defl    $ - $E000           // save current HP
1642+ E2EF             >
1642+ E2EF             >Current_HP      defl  $ - $E000             // used to set HP once!
1642+ E2EF             >
1642+ E2EF             >//              ______________________________________________________________________
1642+ E2EF             >//              Dictionary part
1642+ E2EF             >
1642+ E2EF             >                org     Dict_Ptr
1642+ 68EB             >
1642+ 68EB ED 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1642+ 68ED             >
1642+ 68ED             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1642+ 68ED ~           >                call    runcode ; ok        // for primitive definitions  actual code
1642+ 68ED ~           >
1642+ 68ED ~           >
1642+ 68ED             >                endif           ; ok        // for other definitions it "points" the correct handler
1642+ 68ED             >                // Use of "; ok" to suppress "warning[fwdref]"
1642+ 68ED             >
1642+ 68ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1643+ 68ED E1                           pop     hl                  // < n1 and discard previous TOS
1644+ 68EE                              next
1644+ 68EE DD E9       >                jp      (ix)
1645+ 68F0
1646+ 68F0              //  ______________________________________________________________________
1647+ 68F0              //
1648+ 68F0              // nip          n1 n2 -- n2
1649+ 68F0              // drops the second elemento on the stack
1650+ 68F0                              New_Def NIP, "NIP", is_code, is_normal
1650+ 68F0             >
1650+ 68F0             >Dict_Ptr        defl    $
1650+ 68F0             >
1650+ 68F0             >//              ______________________________________________________________________
1650+ 68F0             >//              Heap part
1650+ 68F0             >
1650+ 68F0             >
1650+ 68F0             >                org     (Heap_Ptr & $1FFF) + $E000
1650+ E2EF             >
1650+ E2EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1650+ E2EF             >Latest_Definition defl  Heap_Ptr
1650+ E2EF             >
1650+ E2EF             >                // dummy db directives used to calculate length of namec
1650+ E2EF 4E 49 50    >                db      "NIP"
1650+ E2F2             >len_NFA         defl    $ - temp_NFA
1650+ E2F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1650+ E2EF             >
1650+ E2EF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1650+ E2F0 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1650+ E2F3             >                org     $-1                 // alter last byte of Name just above to set
1650+ E2F2 D0          >                db      {b $} | END_BIT     // msb as name end
1650+ E2F3             >
1650+ E2F3 E6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1650+ E2F5             >Prev_Ptr        defl    Heap_Ptr
1650+ E2F5             >
1650+ E2F5             >mirror_Ptr      defl    $
1650+ E2F5             >
1650+ E2F5 F2 68       >                dw      Dict_Ptr + 2        // xt
1650+ E2F7             >Heap_Ptr        defl    $ - $E000           // save current HP
1650+ E2F7             >
1650+ E2F7             >Current_HP      defl  $ - $E000             // used to set HP once!
1650+ E2F7             >
1650+ E2F7             >//              ______________________________________________________________________
1650+ E2F7             >//              Dictionary part
1650+ E2F7             >
1650+ E2F7             >                org     Dict_Ptr
1650+ 68F0             >
1650+ 68F0 F5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1650+ 68F2             >
1650+ 68F2             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1650+ 68F2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1650+ 68F2 ~           >
1650+ 68F2 ~           >
1650+ 68F2             >                endif           ; ok        // for other definitions it "points" the correct handler
1650+ 68F2             >                // Use of "; ok" to suppress "warning[fwdref]"
1650+ 68F2             >
1650+ 68F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1651+ 68F2
1652+ 68F2 E1                           pop     hl                  // < n1 discarded
1653+ 68F3 E3                           ex      (sp), hl
1654+ 68F4                              next
1654+ 68F4 DD E9       >                jp      (ix)
1655+ 68F6
1656+ 68F6              //  ______________________________________________________________________
1657+ 68F6              //
1658+ 68F6              // tuck         n1 n2 -- n2 n1 n2
1659+ 68F6              // copy the top element after the second.
1660+ 68F6                              New_Def TUCK, "TUCK", is_code, is_normal
1660+ 68F6             >
1660+ 68F6             >Dict_Ptr        defl    $
1660+ 68F6             >
1660+ 68F6             >//              ______________________________________________________________________
1660+ 68F6             >//              Heap part
1660+ 68F6             >
1660+ 68F6             >
1660+ 68F6             >                org     (Heap_Ptr & $1FFF) + $E000
1660+ E2F7             >
1660+ E2F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1660+ E2F7             >Latest_Definition defl  Heap_Ptr
1660+ E2F7             >
1660+ E2F7             >                // dummy db directives used to calculate length of namec
1660+ E2F7 54 55 43 4B >                db      "TUCK"
1660+ E2FB             >len_NFA         defl    $ - temp_NFA
1660+ E2FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1660+ E2F7             >
1660+ E2F7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1660+ E2F8 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1660+ E2FC             >                org     $-1                 // alter last byte of Name just above to set
1660+ E2FB CB          >                db      {b $} | END_BIT     // msb as name end
1660+ E2FC             >
1660+ E2FC EF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1660+ E2FE             >Prev_Ptr        defl    Heap_Ptr
1660+ E2FE             >
1660+ E2FE             >mirror_Ptr      defl    $
1660+ E2FE             >
1660+ E2FE F8 68       >                dw      Dict_Ptr + 2        // xt
1660+ E300             >Heap_Ptr        defl    $ - $E000           // save current HP
1660+ E300             >
1660+ E300             >Current_HP      defl  $ - $E000             // used to set HP once!
1660+ E300             >
1660+ E300             >//              ______________________________________________________________________
1660+ E300             >//              Dictionary part
1660+ E300             >
1660+ E300             >                org     Dict_Ptr
1660+ 68F6             >
1660+ 68F6 FE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1660+ 68F8             >
1660+ 68F8             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1660+ 68F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1660+ 68F8 ~           >
1660+ 68F8 ~           >
1660+ 68F8             >                endif           ; ok        // for other definitions it "points" the correct handler
1660+ 68F8             >                // Use of "; ok" to suppress "warning[fwdref]"
1660+ 68F8             >
1660+ 68F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1661+ 68F8 E1                           pop     hl
1662+ 68F9 F1                           pop     af                  // < n1
1663+ 68FA E5                           push    hl                  // > n2  and TOS
1664+ 68FB F5                           push    af                  // > n1
1665+ 68FC E5                           push    hl
1666+ 68FD                              next
1666+ 68FD DD E9       >                jp      (ix)
1667+ 68FF
1668+ 68FF              //  ______________________________________________________________________
1669+ 68FF              //
1670+ 68FF              // swap         n1 n2 -- n2 n1
1671+ 68FF              // swaps the two values on top of stack
1672+ 68FF                              New_Def SWAP, "SWAP", is_code, is_normal
1672+ 68FF             >
1672+ 68FF             >Dict_Ptr        defl    $
1672+ 68FF             >
1672+ 68FF             >//              ______________________________________________________________________
1672+ 68FF             >//              Heap part
1672+ 68FF             >
1672+ 68FF             >
1672+ 68FF             >                org     (Heap_Ptr & $1FFF) + $E000
1672+ E300             >
1672+ E300             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1672+ E300             >Latest_Definition defl  Heap_Ptr
1672+ E300             >
1672+ E300             >                // dummy db directives used to calculate length of namec
1672+ E300 53 57 41 50 >                db      "SWAP"
1672+ E304             >len_NFA         defl    $ - temp_NFA
1672+ E304             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1672+ E300             >
1672+ E300 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1672+ E301 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1672+ E305             >                org     $-1                 // alter last byte of Name just above to set
1672+ E304 D0          >                db      {b $} | END_BIT     // msb as name end
1672+ E305             >
1672+ E305 F7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1672+ E307             >Prev_Ptr        defl    Heap_Ptr
1672+ E307             >
1672+ E307             >mirror_Ptr      defl    $
1672+ E307             >
1672+ E307 01 69       >                dw      Dict_Ptr + 2        // xt
1672+ E309             >Heap_Ptr        defl    $ - $E000           // save current HP
1672+ E309             >
1672+ E309             >Current_HP      defl  $ - $E000             // used to set HP once!
1672+ E309             >
1672+ E309             >//              ______________________________________________________________________
1672+ E309             >//              Dictionary part
1672+ E309             >
1672+ E309             >                org     Dict_Ptr
1672+ 68FF             >
1672+ 68FF 07 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1672+ 6901             >
1672+ 6901             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1672+ 6901 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1672+ 6901 ~           >
1672+ 6901 ~           >
1672+ 6901             >                endif           ; ok        // for other definitions it "points" the correct handler
1672+ 6901             >                // Use of "; ok" to suppress "warning[fwdref]"
1672+ 6901             >
1672+ 6901             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1673+ 6901 E1                           pop     hl                  // < n1
1674+ 6902 E3                           ex      (sp),hl             // > n2
1675+ 6903 E5                           push    hl                  // copy n1 to TOS
1676+ 6904                              next
1676+ 6904 DD E9       >                jp      (ix)
1677+ 6906
1678+ 6906              //  ______________________________________________________________________
1679+ 6906              //
1680+ 6906              // dup         n -- n n
1681+ 6906              // duplicates the top value of stack
1682+ 6906                              New_Def DUP, "DUP", is_code, is_normal
1682+ 6906             >
1682+ 6906             >Dict_Ptr        defl    $
1682+ 6906             >
1682+ 6906             >//              ______________________________________________________________________
1682+ 6906             >//              Heap part
1682+ 6906             >
1682+ 6906             >
1682+ 6906             >                org     (Heap_Ptr & $1FFF) + $E000
1682+ E309             >
1682+ E309             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1682+ E309             >Latest_Definition defl  Heap_Ptr
1682+ E309             >
1682+ E309             >                // dummy db directives used to calculate length of namec
1682+ E309 44 55 50    >                db      "DUP"
1682+ E30C             >len_NFA         defl    $ - temp_NFA
1682+ E30C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1682+ E309             >
1682+ E309 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1682+ E30A 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1682+ E30D             >                org     $-1                 // alter last byte of Name just above to set
1682+ E30C D0          >                db      {b $} | END_BIT     // msb as name end
1682+ E30D             >
1682+ E30D 00 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1682+ E30F             >Prev_Ptr        defl    Heap_Ptr
1682+ E30F             >
1682+ E30F             >mirror_Ptr      defl    $
1682+ E30F             >
1682+ E30F 08 69       >                dw      Dict_Ptr + 2        // xt
1682+ E311             >Heap_Ptr        defl    $ - $E000           // save current HP
1682+ E311             >
1682+ E311             >Current_HP      defl  $ - $E000             // used to set HP once!
1682+ E311             >
1682+ E311             >//              ______________________________________________________________________
1682+ E311             >//              Dictionary part
1682+ E311             >
1682+ E311             >                org     Dict_Ptr
1682+ 6906             >
1682+ 6906 0F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1682+ 6908             >
1682+ 6908             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1682+ 6908 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1682+ 6908 ~           >
1682+ 6908 ~           >
1682+ 6908             >                endif           ; ok        // for other definitions it "points" the correct handler
1682+ 6908             >                // Use of "; ok" to suppress "warning[fwdref]"
1682+ 6908             >
1682+ 6908             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1683+ 6908 E1                           pop     hl
1684+ 6909 E5                           push    hl                  // > n duplicate TOS
1685+ 690A E5                           push    hl
1686+ 690B                              next
1686+ 690B DD E9       >                jp      (ix)
1687+ 690D
1688+ 690D              //  ______________________________________________________________________
1689+ 690D              //
1690+ 690D              // rot         n1 n2 n3 -- n2 n3 n1
1691+ 690D              // Rotates the 3 top values of stack by picking the 3rd in access-order
1692+ 690D              // and putting it on top. The other two are shifted down one place.
1693+ 690D                              New_Def ROT, "ROT", is_code, is_normal
1693+ 690D             >
1693+ 690D             >Dict_Ptr        defl    $
1693+ 690D             >
1693+ 690D             >//              ______________________________________________________________________
1693+ 690D             >//              Heap part
1693+ 690D             >
1693+ 690D             >
1693+ 690D             >                org     (Heap_Ptr & $1FFF) + $E000
1693+ E311             >
1693+ E311             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1693+ E311             >Latest_Definition defl  Heap_Ptr
1693+ E311             >
1693+ E311             >                // dummy db directives used to calculate length of namec
1693+ E311 52 4F 54    >                db      "ROT"
1693+ E314             >len_NFA         defl    $ - temp_NFA
1693+ E314             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1693+ E311             >
1693+ E311 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1693+ E312 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1693+ E315             >                org     $-1                 // alter last byte of Name just above to set
1693+ E314 D4          >                db      {b $} | END_BIT     // msb as name end
1693+ E315             >
1693+ E315 09 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1693+ E317             >Prev_Ptr        defl    Heap_Ptr
1693+ E317             >
1693+ E317             >mirror_Ptr      defl    $
1693+ E317             >
1693+ E317 0F 69       >                dw      Dict_Ptr + 2        // xt
1693+ E319             >Heap_Ptr        defl    $ - $E000           // save current HP
1693+ E319             >
1693+ E319             >Current_HP      defl  $ - $E000             // used to set HP once!
1693+ E319             >
1693+ E319             >//              ______________________________________________________________________
1693+ E319             >//              Dictionary part
1693+ E319             >
1693+ E319             >                org     Dict_Ptr
1693+ 690D             >
1693+ 690D 17 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1693+ 690F             >
1693+ 690F             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1693+ 690F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1693+ 690F ~           >
1693+ 690F ~           >
1693+ 690F             >                endif           ; ok        // for other definitions it "points" the correct handler
1693+ 690F             >                // Use of "; ok" to suppress "warning[fwdref]"
1693+ 690F             >
1693+ 690F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1694+ 690F                          //  exx
1695+ 690F F1                           pop     af                  // < n3
1696+ 6910 E1                           pop     hl                  // < n2
1697+ 6911 E3                           ex      (sp),hl             // > n2 < n1
1698+ 6912 F5                           push    af                  // > n3
1699+ 6913 E5                           push    hl                  // copy n1 to TOS
1700+ 6914                          //  exx
1701+ 6914                              next
1701+ 6914 DD E9       >                jp      (ix)
1702+ 6916
1703+ 6916              //  ______________________________________________________________________
1704+ 6916              //
1705+ 6916              // -rot         n1 n2 n3 -- n3 n1 n2
1706+ 6916              // Rotates the 3 top values of stack by picking the 1st in access-order
1707+ 6916              // and putting back to 3rd place. The other two are shifted down one place.
1708+ 6916                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1708+ 6916             >
1708+ 6916             >Dict_Ptr        defl    $
1708+ 6916             >
1708+ 6916             >//              ______________________________________________________________________
1708+ 6916             >//              Heap part
1708+ 6916             >
1708+ 6916             >
1708+ 6916             >                org     (Heap_Ptr & $1FFF) + $E000
1708+ E319             >
1708+ E319             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1708+ E319             >Latest_Definition defl  Heap_Ptr
1708+ E319             >
1708+ E319             >                // dummy db directives used to calculate length of namec
1708+ E319 2D 52 4F 54 >                db      "-ROT"
1708+ E31D             >len_NFA         defl    $ - temp_NFA
1708+ E31D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1708+ E319             >
1708+ E319 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1708+ E31A 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1708+ E31E             >                org     $-1                 // alter last byte of Name just above to set
1708+ E31D D4          >                db      {b $} | END_BIT     // msb as name end
1708+ E31E             >
1708+ E31E 11 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1708+ E320             >Prev_Ptr        defl    Heap_Ptr
1708+ E320             >
1708+ E320             >mirror_Ptr      defl    $
1708+ E320             >
1708+ E320 18 69       >                dw      Dict_Ptr + 2        // xt
1708+ E322             >Heap_Ptr        defl    $ - $E000           // save current HP
1708+ E322             >
1708+ E322             >Current_HP      defl  $ - $E000             // used to set HP once!
1708+ E322             >
1708+ E322             >//              ______________________________________________________________________
1708+ E322             >//              Dictionary part
1708+ E322             >
1708+ E322             >                org     Dict_Ptr
1708+ 6916             >
1708+ 6916 20 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1708+ 6918             >
1708+ 6918             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1708+ 6918 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1708+ 6918 ~           >
1708+ 6918 ~           >
1708+ 6918             >                endif           ; ok        // for other definitions it "points" the correct handler
1708+ 6918             >                // Use of "; ok" to suppress "warning[fwdref]"
1708+ 6918             >
1708+ 6918             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1709+ 6918                          //  exx
1710+ 6918 E1                           pop     hl                  // < n3
1711+ 6919 F1                           pop     af                  // < n2
1712+ 691A E3                           ex      (sp),hl             // > n3 < n1
1713+ 691B E5                           push    hl                  // > n1
1714+ 691C F5                           push    af                  // copy n3 to TOS
1715+ 691D                          //  exx
1716+ 691D                              next
1716+ 691D DD E9       >                jp      (ix)
1717+ 691F
1718+ 691F              //  ______________________________________________________________________
1719+ 691F              //
1720+ 691F              // pick        n1 -- nx
1721+ 691F              // picks the nth element from TOS
1722+ 691F                              New_Def PICK, "PICK", is_code, is_normal
1722+ 691F             >
1722+ 691F             >Dict_Ptr        defl    $
1722+ 691F             >
1722+ 691F             >//              ______________________________________________________________________
1722+ 691F             >//              Heap part
1722+ 691F             >
1722+ 691F             >
1722+ 691F             >                org     (Heap_Ptr & $1FFF) + $E000
1722+ E322             >
1722+ E322             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1722+ E322             >Latest_Definition defl  Heap_Ptr
1722+ E322             >
1722+ E322             >                // dummy db directives used to calculate length of namec
1722+ E322 50 49 43 4B >                db      "PICK"
1722+ E326             >len_NFA         defl    $ - temp_NFA
1722+ E326             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1722+ E322             >
1722+ E322 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1722+ E323 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1722+ E327             >                org     $-1                 // alter last byte of Name just above to set
1722+ E326 CB          >                db      {b $} | END_BIT     // msb as name end
1722+ E327             >
1722+ E327 19 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1722+ E329             >Prev_Ptr        defl    Heap_Ptr
1722+ E329             >
1722+ E329             >mirror_Ptr      defl    $
1722+ E329             >
1722+ E329 21 69       >                dw      Dict_Ptr + 2        // xt
1722+ E32B             >Heap_Ptr        defl    $ - $E000           // save current HP
1722+ E32B             >
1722+ E32B             >Current_HP      defl  $ - $E000             // used to set HP once!
1722+ E32B             >
1722+ E32B             >//              ______________________________________________________________________
1722+ E32B             >//              Dictionary part
1722+ E32B             >
1722+ E32B             >                org     Dict_Ptr
1722+ 691F             >
1722+ 691F 29 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1722+ 6921             >
1722+ 6921             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1722+ 6921 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1722+ 6921 ~           >
1722+ 6921 ~           >
1722+ 6921             >                endif           ; ok        // for other definitions it "points" the correct handler
1722+ 6921             >                // Use of "; ok" to suppress "warning[fwdref]"
1722+ 6921             >
1722+ 6921             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1723+ 6921 E1                           pop     hl                  // take TOS as index
1724+ 6922 29                           add     hl, hl              // as cells
1725+ 6923 39                           add     hl, sp              // from Stack Pointer
1726+ 6924 7E                           ld      a, (hl)             // replace TOS
1727+ 6925 23                           inc     hl
1728+ 6926 66                           ld      h, (hl)
1729+ 6927 6F                           ld      l, a
1730+ 6928 E5                           push    hl
1731+ 6929                              next
1731+ 6929 DD E9       >                jp      (ix)
1732+ 692B
1733+ 692B
1734+ 692B              //  ______________________________________________________________________
1735+ 692B              //
1736+ 692B              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1737+ 692B              // picks the nth element from TOS
1738+ 692B              //              New_Def ROLL, "ROLL", is_code, is_normal
1739+ 692B              //              exx                     // we need all registers free
1740+ 692B              //              pop     hl              // number of cells to roll
1741+ 692B              //              ld      a, h
1742+ 692B              //              or       l
1743+ 692B              //              jr      z, Roll_Zero
1744+ 692B              //                  add     hl, hl              // number of bytes to move
1745+ 692B              //                  ld      b, h
1746+ 692B              //                  ld      c, l
1747+ 692B              //                  add     hl, sp          // address of n1
1748+ 692B              //                  ld      a, (hl)         // take n1 into a and a,
1749+ 692B              //                  inc     hl
1750+ 692B              //                  ex      af, af'
1751+ 692B              //                  ld      a, (hl)         // take n1 into a and a,
1752+ 692B              //                  ld      d, h
1753+ 692B              //                  ld      e, l
1754+ 692B              //                  dec     hl
1755+ 692B              //                  dec     hl
1756+ 692B              //                  lddr
1757+ 692B              //                  ex      de, hl
1758+ 692B              //                  ld      (hl), a
1759+ 692B              //                  dec     hl
1760+ 692B              //                  ex      af, af'
1761+ 692B              //                  ld      (hl), a
1762+ 692B              //Roll_Zero:
1763+ 692B              //              exx
1764+ 692B              //              next
1765+ 692B
1766+ 692B
1767+ 692B              //  ______________________________________________________________________
1768+ 692B              //
1769+ 692B              // 2over        d1 d2 -- d1 d2 d1
1770+ 692B              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1771+ 692B              // copy the second double of stack and put on top.
1772+ 692B                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1772+ 692B             >
1772+ 692B             >Dict_Ptr        defl    $
1772+ 692B             >
1772+ 692B             >//              ______________________________________________________________________
1772+ 692B             >//              Heap part
1772+ 692B             >
1772+ 692B             >
1772+ 692B             >                org     (Heap_Ptr & $1FFF) + $E000
1772+ E32B             >
1772+ E32B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1772+ E32B             >Latest_Definition defl  Heap_Ptr
1772+ E32B             >
1772+ E32B             >                // dummy db directives used to calculate length of namec
1772+ E32B 32 4F 56 45 >                db      "2OVER"
1772+ E32F 52          >
1772+ E330             >len_NFA         defl    $ - temp_NFA
1772+ E330             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1772+ E32B             >
1772+ E32B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1772+ E32C 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1772+ E330 52          >
1772+ E331             >                org     $-1                 // alter last byte of Name just above to set
1772+ E330 D2          >                db      {b $} | END_BIT     // msb as name end
1772+ E331             >
1772+ E331 22 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1772+ E333             >Prev_Ptr        defl    Heap_Ptr
1772+ E333             >
1772+ E333             >mirror_Ptr      defl    $
1772+ E333             >
1772+ E333 2D 69       >                dw      Dict_Ptr + 2        // xt
1772+ E335             >Heap_Ptr        defl    $ - $E000           // save current HP
1772+ E335             >
1772+ E335             >Current_HP      defl  $ - $E000             // used to set HP once!
1772+ E335             >
1772+ E335             >//              ______________________________________________________________________
1772+ E335             >//              Dictionary part
1772+ E335             >
1772+ E335             >                org     Dict_Ptr
1772+ 692B             >
1772+ 692B 33 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1772+ 692D             >
1772+ 692D             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1772+ 692D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1772+ 692D ~           >
1772+ 692D ~           >
1772+ 692D             >                endif           ; ok        // for other definitions it "points" the correct handler
1772+ 692D             >                // Use of "; ok" to suppress "warning[fwdref]"
1772+ 692D             >
1772+ 692D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1773+ 692D D9                           exx
1774+ 692E E1                           pop     hl      // n4
1775+ 692F D1                           pop     de      // n3 : d2
1776+ 6930 C1                           pop     bc      // n2
1777+ 6931 F1                           pop     af      // n1 : d1
1778+ 6932 F5                           push    af      // n1
1779+ 6933 C5                           push    bc      // n2 : d1
1780+ 6934 D5                           push    de      // n3
1781+ 6935 E5                           push    hl      // n4 : d2
1782+ 6936 F5                           push    af      // n1
1783+ 6937 C5                           push    bc      // n2 : d1
1784+ 6938 D9                           exx
1785+ 6939                              next
1785+ 6939 DD E9       >                jp      (ix)
1786+ 693B
1787+ 693B              //  ______________________________________________________________________
1788+ 693B              //
1789+ 693B              // 2drop        d --
1790+ 693B              //              n1 n2 --
1791+ 693B              // drops the top double from stack
1792+ 693B                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1792+ 693B             >
1792+ 693B             >Dict_Ptr        defl    $
1792+ 693B             >
1792+ 693B             >//              ______________________________________________________________________
1792+ 693B             >//              Heap part
1792+ 693B             >
1792+ 693B             >
1792+ 693B             >                org     (Heap_Ptr & $1FFF) + $E000
1792+ E335             >
1792+ E335             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1792+ E335             >Latest_Definition defl  Heap_Ptr
1792+ E335             >
1792+ E335             >                // dummy db directives used to calculate length of namec
1792+ E335 32 44 52 4F >                db      "2DROP"
1792+ E339 50          >
1792+ E33A             >len_NFA         defl    $ - temp_NFA
1792+ E33A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1792+ E335             >
1792+ E335 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1792+ E336 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1792+ E33A 50          >
1792+ E33B             >                org     $-1                 // alter last byte of Name just above to set
1792+ E33A D0          >                db      {b $} | END_BIT     // msb as name end
1792+ E33B             >
1792+ E33B 2B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1792+ E33D             >Prev_Ptr        defl    Heap_Ptr
1792+ E33D             >
1792+ E33D             >mirror_Ptr      defl    $
1792+ E33D             >
1792+ E33D 3D 69       >                dw      Dict_Ptr + 2        // xt
1792+ E33F             >Heap_Ptr        defl    $ - $E000           // save current HP
1792+ E33F             >
1792+ E33F             >Current_HP      defl  $ - $E000             // used to set HP once!
1792+ E33F             >
1792+ E33F             >//              ______________________________________________________________________
1792+ E33F             >//              Dictionary part
1792+ E33F             >
1792+ E33F             >                org     Dict_Ptr
1792+ 693B             >
1792+ 693B 3D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1792+ 693D             >
1792+ 693D             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1792+ 693D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1792+ 693D ~           >
1792+ 693D ~           >
1792+ 693D             >                endif           ; ok        // for other definitions it "points" the correct handler
1792+ 693D             >                // Use of "; ok" to suppress "warning[fwdref]"
1792+ 693D             >
1792+ 693D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1793+ 693D E1                           pop     hl
1794+ 693E E1                           pop     hl
1795+ 693F                              next
1795+ 693F DD E9       >                jp      (ix)
1796+ 6941
1797+ 6941              //  ______________________________________________________________________
1798+ 6941              //
1799+ 6941              // 2nip         d1 d2 -- d2
1800+ 6941              //              n1 n2 n3 n4 -- n3 n4
1801+ 6941              // drops the second double on the stack
1802+ 6941              //              New_Def TWO_NIP, 4, "2nip"
1803+ 6941              //              ...
1804+ 6941
1805+ 6941              //  ______________________________________________________________________
1806+ 6941              //
1807+ 6941              // 2tuck         d1 d2 -- d2 d1 d2
1808+ 6941              // copy the top element after the second.
1809+ 6941              //              New_Def TWO_TUCK, 5, "2tuck"
1810+ 6941              //              ...
1811+ 6941
1812+ 6941              //  ______________________________________________________________________
1813+ 6941              //
1814+ 6941              // 2swap         d1 d2 -- d2 d1
1815+ 6941              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1816+ 6941              // swaps the two doubles on top of stack
1817+ 6941                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1817+ 6941             >
1817+ 6941             >Dict_Ptr        defl    $
1817+ 6941             >
1817+ 6941             >//              ______________________________________________________________________
1817+ 6941             >//              Heap part
1817+ 6941             >
1817+ 6941             >
1817+ 6941             >                org     (Heap_Ptr & $1FFF) + $E000
1817+ E33F             >
1817+ E33F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1817+ E33F             >Latest_Definition defl  Heap_Ptr
1817+ E33F             >
1817+ E33F             >                // dummy db directives used to calculate length of namec
1817+ E33F 32 53 57 41 >                db      "2SWAP"
1817+ E343 50          >
1817+ E344             >len_NFA         defl    $ - temp_NFA
1817+ E344             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1817+ E33F             >
1817+ E33F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1817+ E340 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1817+ E344 50          >
1817+ E345             >                org     $-1                 // alter last byte of Name just above to set
1817+ E344 D0          >                db      {b $} | END_BIT     // msb as name end
1817+ E345             >
1817+ E345 35 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1817+ E347             >Prev_Ptr        defl    Heap_Ptr
1817+ E347             >
1817+ E347             >mirror_Ptr      defl    $
1817+ E347             >
1817+ E347 43 69       >                dw      Dict_Ptr + 2        // xt
1817+ E349             >Heap_Ptr        defl    $ - $E000           // save current HP
1817+ E349             >
1817+ E349             >Current_HP      defl  $ - $E000             // used to set HP once!
1817+ E349             >
1817+ E349             >//              ______________________________________________________________________
1817+ E349             >//              Dictionary part
1817+ E349             >
1817+ E349             >                org     Dict_Ptr
1817+ 6941             >
1817+ 6941 47 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1817+ 6943             >
1817+ 6943             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1817+ 6943 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1817+ 6943 ~           >
1817+ 6943 ~           >
1817+ 6943             >                endif           ; ok        // for other definitions it "points" the correct handler
1817+ 6943             >                // Use of "; ok" to suppress "warning[fwdref]"
1817+ 6943             >
1817+ 6943             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1818+ 6943 D9                           exx
1819+ 6944 F1                           pop     af                  // < d2-H
1820+ 6945 E1                           pop     hl                  // < d2-L
1821+ 6946 D1                           pop     de                  // < d1-H
1822+ 6947 E3                           ex      (sp), hl            // < d1-L > d2-L
1823+ 6948 F5                           push    af                  //        > d2-H
1824+ 6949 E5                           push    hl                  //        > d1-L
1825+ 694A D5                           push    de                  //        > d1-H
1826+ 694B D9                           exx
1827+ 694C                              next
1827+ 694C DD E9       >                jp      (ix)
1828+ 694E
1829+ 694E              //  ______________________________________________________________________
1830+ 694E              //
1831+ 694E              // 2dup         d -- d d
1832+ 694E              //              n1 n2 -- n1 n2 n1 n2
1833+ 694E              // duplicates the top double of stack
1834+ 694E                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1834+ 694E             >
1834+ 694E             >Dict_Ptr        defl    $
1834+ 694E             >
1834+ 694E             >//              ______________________________________________________________________
1834+ 694E             >//              Heap part
1834+ 694E             >
1834+ 694E             >
1834+ 694E             >                org     (Heap_Ptr & $1FFF) + $E000
1834+ E349             >
1834+ E349             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1834+ E349             >Latest_Definition defl  Heap_Ptr
1834+ E349             >
1834+ E349             >                // dummy db directives used to calculate length of namec
1834+ E349 32 44 55 50 >                db      "2DUP"
1834+ E34D             >len_NFA         defl    $ - temp_NFA
1834+ E34D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1834+ E349             >
1834+ E349 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1834+ E34A 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1834+ E34E             >                org     $-1                 // alter last byte of Name just above to set
1834+ E34D D0          >                db      {b $} | END_BIT     // msb as name end
1834+ E34E             >
1834+ E34E 3F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1834+ E350             >Prev_Ptr        defl    Heap_Ptr
1834+ E350             >
1834+ E350             >mirror_Ptr      defl    $
1834+ E350             >
1834+ E350 50 69       >                dw      Dict_Ptr + 2        // xt
1834+ E352             >Heap_Ptr        defl    $ - $E000           // save current HP
1834+ E352             >
1834+ E352             >Current_HP      defl  $ - $E000             // used to set HP once!
1834+ E352             >
1834+ E352             >//              ______________________________________________________________________
1834+ E352             >//              Dictionary part
1834+ E352             >
1834+ E352             >                org     Dict_Ptr
1834+ 694E             >
1834+ 694E 50 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1834+ 6950             >
1834+ 6950             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1834+ 6950 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1834+ 6950 ~           >
1834+ 6950 ~           >
1834+ 6950             >                endif           ; ok        // for other definitions it "points" the correct handler
1834+ 6950             >                // Use of "; ok" to suppress "warning[fwdref]"
1834+ 6950             >
1834+ 6950             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1835+ 6950 E1                           pop     hl                  // < d-H
1836+ 6951 F1                           pop     af                  // < d-L
1837+ 6952 F5                           push    af                  // < d-L
1838+ 6953 E5                           push    hl                  //       > d-H
1839+ 6954 F5                           push    af                  //       > d-L
1840+ 6955 E5                           push    hl                  //       > d-H
1841+ 6956                              next
1841+ 6956 DD E9       >                jp      (ix)
1842+ 6958
1843+ 6958              //  ______________________________________________________________________
1844+ 6958              //
1845+ 6958              // 2rot         d1 d2 d3 -- d2 d3 d1
1846+ 6958              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1847+ 6958              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1848+ 6958              // and putting it on top. The other two are shifted down one place.
1849+ 6958              //              New_Def TWO?ROT, 4, "2rot"
1850+ 6958              //              ...
1851+ 6958              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1852+ 6958              //
1853+ 6958              //      d3  |d2  |d1  |
1854+ 6958              //      h l |h l |h l |
1855+ 6958              // SP   LHED|LHED|LHED|
1856+ 6958              // SP  +0123|4567|89ab|
1857+ 6958              //              ld      hl, $000B
1858+ 6958              //              add     hl, sp
1859+ 6958              //              ld      d, (hl)
1860+ 6958              //              dec     hl
1861+ 6958              //              ld      e, (hl)
1862+ 6958              //              dec     hl
1863+ 6958              //              push    de
1864+ 6958              //              ld      d, (hl)
1865+ 6958              //              dec     hl
1866+ 6958              //              ld      e, (hl)
1867+ 6958              //              dec     hl
1868+ 6958              //              push    de
1869+ 6958
1870+ 6958              //      d1  |d3  |d2  |d1  |
1871+ 6958              //      h l |h l |h l |h l |
1872+ 6958              // SP   LHED|LHED|LHED|LHED|
1873+ 6958              // SP       +0123|4567|89ab|
1874+ 6958
1875+ 6958              //              ld      d, h
1876+ 6958              //              ld      e, l
1877+ 6958              //              inc     de
1878+ 6958              //              inc     de
1879+ 6958              //              inc     de
1880+ 6958              //              inc     de
1881+ 6958              //              push    bc
1882+ 6958              //              ld      bc, $000C
1883+ 6958              //              lddr
1884+ 6958              //              pop     bc
1885+ 6958              //              pop     de
1886+ 6958              //              pop     de
1887+ 6958              //
1888+ 6958              //              next
1889+ 6958
1890+ 6958
1891+ 6958              //  ______________________________________________________________________
1892+ 6958              //
1893+ 6958              // +!           n a --
1894+ 6958              // Sums to the content of address a the number n.
1895+ 6958              // It is the same of  a @ n + a !
1896+ 6958                              New_Def PLUSSTORE, "+!", is_code, is_normal
1896+ 6958             >
1896+ 6958             >Dict_Ptr        defl    $
1896+ 6958             >
1896+ 6958             >//              ______________________________________________________________________
1896+ 6958             >//              Heap part
1896+ 6958             >
1896+ 6958             >
1896+ 6958             >                org     (Heap_Ptr & $1FFF) + $E000
1896+ E352             >
1896+ E352             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1896+ E352             >Latest_Definition defl  Heap_Ptr
1896+ E352             >
1896+ E352             >                // dummy db directives used to calculate length of namec
1896+ E352 2B 21       >                db      "+!"
1896+ E354             >len_NFA         defl    $ - temp_NFA
1896+ E354             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1896+ E352             >
1896+ E352 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1896+ E353 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1896+ E355             >                org     $-1                 // alter last byte of Name just above to set
1896+ E354 A1          >                db      {b $} | END_BIT     // msb as name end
1896+ E355             >
1896+ E355 49 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1896+ E357             >Prev_Ptr        defl    Heap_Ptr
1896+ E357             >
1896+ E357             >mirror_Ptr      defl    $
1896+ E357             >
1896+ E357 5A 69       >                dw      Dict_Ptr + 2        // xt
1896+ E359             >Heap_Ptr        defl    $ - $E000           // save current HP
1896+ E359             >
1896+ E359             >Current_HP      defl  $ - $E000             // used to set HP once!
1896+ E359             >
1896+ E359             >//              ______________________________________________________________________
1896+ E359             >//              Dictionary part
1896+ E359             >
1896+ E359             >                org     Dict_Ptr
1896+ 6958             >
1896+ 6958 57 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1896+ 695A             >
1896+ 695A             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1896+ 695A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1896+ 695A ~           >
1896+ 695A ~           >
1896+ 695A             >                endif           ; ok        // for other definitions it "points" the correct handler
1896+ 695A             >                // Use of "; ok" to suppress "warning[fwdref]"
1896+ 695A             >
1896+ 695A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1897+ 695A D9                           exx
1898+ 695B E1                           pop     hl                  // hl is the address
1899+ 695C D1                           pop     de                  // de is the number
1900+ 695D 7E                           ld      a, (hl)
1901+ 695E 83                           add     e
1902+ 695F 77                           ld      (hl), a
1903+ 6960 23                           inc     hl
1904+ 6961 7E                           ld      a, (hl)
1905+ 6962 8A                           adc     d
1906+ 6963 77                           ld      (hl), a
1907+ 6964 D9                           exx
1908+ 6965                              next
1908+ 6965 DD E9       >                jp      (ix)
1909+ 6967
1910+ 6967              //  ______________________________________________________________________
1911+ 6967              //
1912+ 6967              // toggle       a n --
1913+ 6967              // Complements (xor) the byte at addrress  a  with the model n.
1914+ 6967                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1914+ 6967             >
1914+ 6967             >Dict_Ptr        defl    $
1914+ 6967             >
1914+ 6967             >//              ______________________________________________________________________
1914+ 6967             >//              Heap part
1914+ 6967             >
1914+ 6967             >
1914+ 6967             >                org     (Heap_Ptr & $1FFF) + $E000
1914+ E359             >
1914+ E359             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1914+ E359             >Latest_Definition defl  Heap_Ptr
1914+ E359             >
1914+ E359             >                // dummy db directives used to calculate length of namec
1914+ E359 54 4F 47 47 >                db      "TOGGLE"
1914+ E35D 4C 45       >
1914+ E35F             >len_NFA         defl    $ - temp_NFA
1914+ E35F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1914+ E359             >
1914+ E359 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1914+ E35A 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1914+ E35E 4C 45       >
1914+ E360             >                org     $-1                 // alter last byte of Name just above to set
1914+ E35F C5          >                db      {b $} | END_BIT     // msb as name end
1914+ E360             >
1914+ E360 52 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1914+ E362             >Prev_Ptr        defl    Heap_Ptr
1914+ E362             >
1914+ E362             >mirror_Ptr      defl    $
1914+ E362             >
1914+ E362 69 69       >                dw      Dict_Ptr + 2        // xt
1914+ E364             >Heap_Ptr        defl    $ - $E000           // save current HP
1914+ E364             >
1914+ E364             >Current_HP      defl  $ - $E000             // used to set HP once!
1914+ E364             >
1914+ E364             >//              ______________________________________________________________________
1914+ E364             >//              Dictionary part
1914+ E364             >
1914+ E364             >                org     Dict_Ptr
1914+ 6967             >
1914+ 6967 62 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1914+ 6969             >
1914+ 6969             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1914+ 6969 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1914+ 6969 ~           >
1914+ 6969 ~           >
1914+ 6969             >                endif           ; ok        // for other definitions it "points" the correct handler
1914+ 6969             >                // Use of "; ok" to suppress "warning[fwdref]"
1914+ 6969             >
1914+ 6969             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1915+ 6969 E1                           pop     hl
1916+ 696A 7D                           ld      a, l
1917+ 696B E1                           pop     hl
1918+ 696C AE                           xor     (hl)
1919+ 696D 77                           ld      (hl), a
1920+ 696E
1921+ 696E                              next
1921+ 696E DD E9       >                jp      (ix)
1922+ 6970
1923+ 6970              //  ______________________________________________________________________
1924+ 6970              //
1925+ 6970              // @            a -- n
1926+ 6970              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1927+ 6970                              New_Def FETCH, "@", is_code, is_normal
1927+ 6970             >
1927+ 6970             >Dict_Ptr        defl    $
1927+ 6970             >
1927+ 6970             >//              ______________________________________________________________________
1927+ 6970             >//              Heap part
1927+ 6970             >
1927+ 6970             >
1927+ 6970             >                org     (Heap_Ptr & $1FFF) + $E000
1927+ E364             >
1927+ E364             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1927+ E364             >Latest_Definition defl  Heap_Ptr
1927+ E364             >
1927+ E364             >                // dummy db directives used to calculate length of namec
1927+ E364 40          >                db      "@"
1927+ E365             >len_NFA         defl    $ - temp_NFA
1927+ E365             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1927+ E364             >
1927+ E364 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1927+ E365 40          >                db      "@"               // name string in 7-bit ascii, but
1927+ E366             >                org     $-1                 // alter last byte of Name just above to set
1927+ E365 C0          >                db      {b $} | END_BIT     // msb as name end
1927+ E366             >
1927+ E366 59 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1927+ E368             >Prev_Ptr        defl    Heap_Ptr
1927+ E368             >
1927+ E368             >mirror_Ptr      defl    $
1927+ E368             >
1927+ E368 72 69       >                dw      Dict_Ptr + 2        // xt
1927+ E36A             >Heap_Ptr        defl    $ - $E000           // save current HP
1927+ E36A             >
1927+ E36A             >Current_HP      defl  $ - $E000             // used to set HP once!
1927+ E36A             >
1927+ E36A             >//              ______________________________________________________________________
1927+ E36A             >//              Dictionary part
1927+ E36A             >
1927+ E36A             >                org     Dict_Ptr
1927+ 6970             >
1927+ 6970 68 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1927+ 6972             >
1927+ 6972             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1927+ 6972 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1927+ 6972 ~           >
1927+ 6972 ~           >
1927+ 6972             >                endif           ; ok        // for other definitions it "points" the correct handler
1927+ 6972             >                // Use of "; ok" to suppress "warning[fwdref]"
1927+ 6972             >
1927+ 6972             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1928+ 6972 E1                           pop     hl
1929+ 6973 7E                           ld      a, (hl)             // low-byte
1930+ 6974 23                           inc     hl
1931+ 6975 66                           ld      h, (hl)             // high-byte
1932+ 6976 6F                           ld      l, a
1933+ 6977 E5                           push    hl
1934+ 6978                              next
1934+ 6978 DD E9       >                jp      (ix)
1935+ 697A
1936+ 697A              //  ______________________________________________________________________
1937+ 697A              //
1938+ 697A              // !            n a --
1939+ 697A              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1940+ 697A                              New_Def STORE, "!", is_code, is_normal
1940+ 697A             >
1940+ 697A             >Dict_Ptr        defl    $
1940+ 697A             >
1940+ 697A             >//              ______________________________________________________________________
1940+ 697A             >//              Heap part
1940+ 697A             >
1940+ 697A             >
1940+ 697A             >                org     (Heap_Ptr & $1FFF) + $E000
1940+ E36A             >
1940+ E36A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1940+ E36A             >Latest_Definition defl  Heap_Ptr
1940+ E36A             >
1940+ E36A             >                // dummy db directives used to calculate length of namec
1940+ E36A 21          >                db      "!"
1940+ E36B             >len_NFA         defl    $ - temp_NFA
1940+ E36B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1940+ E36A             >
1940+ E36A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1940+ E36B 21          >                db      "!"               // name string in 7-bit ascii, but
1940+ E36C             >                org     $-1                 // alter last byte of Name just above to set
1940+ E36B A1          >                db      {b $} | END_BIT     // msb as name end
1940+ E36C             >
1940+ E36C 64 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1940+ E36E             >Prev_Ptr        defl    Heap_Ptr
1940+ E36E             >
1940+ E36E             >mirror_Ptr      defl    $
1940+ E36E             >
1940+ E36E 7C 69       >                dw      Dict_Ptr + 2        // xt
1940+ E370             >Heap_Ptr        defl    $ - $E000           // save current HP
1940+ E370             >
1940+ E370             >Current_HP      defl  $ - $E000             // used to set HP once!
1940+ E370             >
1940+ E370             >//              ______________________________________________________________________
1940+ E370             >//              Dictionary part
1940+ E370             >
1940+ E370             >                org     Dict_Ptr
1940+ 697A             >
1940+ 697A 6E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1940+ 697C             >
1940+ 697C             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1940+ 697C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1940+ 697C ~           >
1940+ 697C ~           >
1940+ 697C             >                endif           ; ok        // for other definitions it "points" the correct handler
1940+ 697C             >                // Use of "; ok" to suppress "warning[fwdref]"
1940+ 697C             >
1940+ 697C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1941+ 697C D9                           exx
1942+ 697D E1                           pop     hl                  // address
1943+ 697E D1                           pop     de                  // < n
1944+ 697F              Store_end:
1945+ 697F 73                           ld      (hl), e             // low-byte
1946+ 6980 23                           inc     hl
1947+ 6981 72                           ld      (hl), d             // high-byte
1948+ 6982 D9                           exx
1949+ 6983                              next
1949+ 6983 DD E9       >                jp      (ix)
1950+ 6985
1951+ 6985              //  ______________________________________________________________________
1952+ 6985              //
1953+ 6985              // c@           a -- c
1954+ 6985              // fetch a character n from address a
1955+ 6985                              New_Def CFETCH, "C@", is_code, is_normal
1955+ 6985             >
1955+ 6985             >Dict_Ptr        defl    $
1955+ 6985             >
1955+ 6985             >//              ______________________________________________________________________
1955+ 6985             >//              Heap part
1955+ 6985             >
1955+ 6985             >
1955+ 6985             >                org     (Heap_Ptr & $1FFF) + $E000
1955+ E370             >
1955+ E370             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1955+ E370             >Latest_Definition defl  Heap_Ptr
1955+ E370             >
1955+ E370             >                // dummy db directives used to calculate length of namec
1955+ E370 43 40       >                db      "C@"
1955+ E372             >len_NFA         defl    $ - temp_NFA
1955+ E372             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1955+ E370             >
1955+ E370 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1955+ E371 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1955+ E373             >                org     $-1                 // alter last byte of Name just above to set
1955+ E372 C0          >                db      {b $} | END_BIT     // msb as name end
1955+ E373             >
1955+ E373 6A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1955+ E375             >Prev_Ptr        defl    Heap_Ptr
1955+ E375             >
1955+ E375             >mirror_Ptr      defl    $
1955+ E375             >
1955+ E375 87 69       >                dw      Dict_Ptr + 2        // xt
1955+ E377             >Heap_Ptr        defl    $ - $E000           // save current HP
1955+ E377             >
1955+ E377             >Current_HP      defl  $ - $E000             // used to set HP once!
1955+ E377             >
1955+ E377             >//              ______________________________________________________________________
1955+ E377             >//              Dictionary part
1955+ E377             >
1955+ E377             >                org     Dict_Ptr
1955+ 6985             >
1955+ 6985 75 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1955+ 6987             >
1955+ 6987             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1955+ 6987 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1955+ 6987 ~           >
1955+ 6987 ~           >
1955+ 6987             >                endif           ; ok        // for other definitions it "points" the correct handler
1955+ 6987             >                // Use of "; ok" to suppress "warning[fwdref]"
1955+ 6987             >
1955+ 6987             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1956+ 6987 E1                           pop     hl
1957+ 6988 6E                           ld      l, (hl)             // low-byte
1958+ 6989 26 00                        ld      h, 0
1959+ 698B
1960+ 698B                              psh1
1960+ 698B E5          >                push    hl
1960+ 698C DD E9       >                jp      (ix)
1961+ 698E
1962+ 698E              //  ______________________________________________________________________
1963+ 698E              //
1964+ 698E              // c!           c a --
1965+ 698E              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1966+ 698E                              New_Def CSTORE, "C!", is_code, is_normal
1966+ 698E             >
1966+ 698E             >Dict_Ptr        defl    $
1966+ 698E             >
1966+ 698E             >//              ______________________________________________________________________
1966+ 698E             >//              Heap part
1966+ 698E             >
1966+ 698E             >
1966+ 698E             >                org     (Heap_Ptr & $1FFF) + $E000
1966+ E377             >
1966+ E377             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1966+ E377             >Latest_Definition defl  Heap_Ptr
1966+ E377             >
1966+ E377             >                // dummy db directives used to calculate length of namec
1966+ E377 43 21       >                db      "C!"
1966+ E379             >len_NFA         defl    $ - temp_NFA
1966+ E379             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1966+ E377             >
1966+ E377 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1966+ E378 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1966+ E37A             >                org     $-1                 // alter last byte of Name just above to set
1966+ E379 A1          >                db      {b $} | END_BIT     // msb as name end
1966+ E37A             >
1966+ E37A 70 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1966+ E37C             >Prev_Ptr        defl    Heap_Ptr
1966+ E37C             >
1966+ E37C             >mirror_Ptr      defl    $
1966+ E37C             >
1966+ E37C 90 69       >                dw      Dict_Ptr + 2        // xt
1966+ E37E             >Heap_Ptr        defl    $ - $E000           // save current HP
1966+ E37E             >
1966+ E37E             >Current_HP      defl  $ - $E000             // used to set HP once!
1966+ E37E             >
1966+ E37E             >//              ______________________________________________________________________
1966+ E37E             >//              Dictionary part
1966+ E37E             >
1966+ E37E             >                org     Dict_Ptr
1966+ 698E             >
1966+ 698E 7C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1966+ 6990             >
1966+ 6990             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1966+ 6990 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1966+ 6990 ~           >
1966+ 6990 ~           >
1966+ 6990             >                endif           ; ok        // for other definitions it "points" the correct handler
1966+ 6990             >                // Use of "; ok" to suppress "warning[fwdref]"
1966+ 6990             >
1966+ 6990             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1967+ 6990 D9                           exx
1968+ 6991 E1                           pop     hl                  // < address
1969+ 6992 D1                           pop     de
1970+ 6993 73                           ld      (hl), e             // low-byte
1971+ 6994 D9                           exx
1972+ 6995                              next
1972+ 6995 DD E9       >                jp      (ix)
1973+ 6997
1974+ 6997              //  ______________________________________________________________________
1975+ 6997              //
1976+ 6997              // 2@           a -- d
1977+ 6997              // fetch a 32 bits number d from address a and leaves it on top of the
1978+ 6997              // stack as two single numbers, high part as top of the stack.
1979+ 6997              // A double number is normally kept in CPU registers as HLDE.
1980+ 6997              // On stack a double number is treated as two single numbers
1981+ 6997              // where BC is on the top of the stack and HL is the second from top,
1982+ 6997              // so the sign of the number can be checked on top of stack
1983+ 6997              // and in the stack memory it appears as LHED.
1984+ 6997                              New_Def TWO_FETCH, "2@", is_code, is_normal
1984+ 6997             >
1984+ 6997             >Dict_Ptr        defl    $
1984+ 6997             >
1984+ 6997             >//              ______________________________________________________________________
1984+ 6997             >//              Heap part
1984+ 6997             >
1984+ 6997             >
1984+ 6997             >                org     (Heap_Ptr & $1FFF) + $E000
1984+ E37E             >
1984+ E37E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1984+ E37E             >Latest_Definition defl  Heap_Ptr
1984+ E37E             >
1984+ E37E             >                // dummy db directives used to calculate length of namec
1984+ E37E 32 40       >                db      "2@"
1984+ E380             >len_NFA         defl    $ - temp_NFA
1984+ E380             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1984+ E37E             >
1984+ E37E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1984+ E37F 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1984+ E381             >                org     $-1                 // alter last byte of Name just above to set
1984+ E380 C0          >                db      {b $} | END_BIT     // msb as name end
1984+ E381             >
1984+ E381 77 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1984+ E383             >Prev_Ptr        defl    Heap_Ptr
1984+ E383             >
1984+ E383             >mirror_Ptr      defl    $
1984+ E383             >
1984+ E383 99 69       >                dw      Dict_Ptr + 2        // xt
1984+ E385             >Heap_Ptr        defl    $ - $E000           // save current HP
1984+ E385             >
1984+ E385             >Current_HP      defl  $ - $E000             // used to set HP once!
1984+ E385             >
1984+ E385             >//              ______________________________________________________________________
1984+ E385             >//              Dictionary part
1984+ E385             >
1984+ E385             >                org     Dict_Ptr
1984+ 6997             >
1984+ 6997 83 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1984+ 6999             >
1984+ 6999             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1984+ 6999 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1984+ 6999 ~           >
1984+ 6999 ~           >
1984+ 6999             >                endif           ; ok        // for other definitions it "points" the correct handler
1984+ 6999             >                // Use of "; ok" to suppress "warning[fwdref]"
1984+ 6999             >
1984+ 6999             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1985+ 6999 D9                           exx
1986+ 699A E1                           pop     hl                  // address
1987+ 699B 5E                           ld      e, (hl)             // low-byte
1988+ 699C 23                           inc     hl
1989+ 699D 56                           ld      d, (hl)             // high-byte
1990+ 699E 23                           inc     hl
1991+ 699F 4E                           ld      c, (hl)             // low-byte
1992+ 69A0 23                           inc     hl
1993+ 69A1 46                           ld      b, (hl)             // high-byte
1994+ 69A2 C5                           push    bc
1995+ 69A3 D5                           push    de
1996+ 69A4 D9                           exx
1997+ 69A5                              next
1997+ 69A5 DD E9       >                jp      (ix)
1998+ 69A7
1999+ 69A7              //  ______________________________________________________________________
2000+ 69A7              //
2001+ 69A7              // 2!           d a --
2002+ 69A7              // stores a 32 bits number d from address a and leaves it on top of the
2003+ 69A7              // stack as two single numbers, high part as top of the stack.
2004+ 69A7              // A double number is normally kept in CPU registers as HLDE.
2005+ 69A7              // On stack a double number is treated as two single numbers
2006+ 69A7              // where BC is on the top of the stack and HL is the second from top,
2007+ 69A7              // so the sign of the number can be checked on top of stack
2008+ 69A7              // and in the stack memory it appears as LHED.
2009+ 69A7                              New_Def TWO_STORE, "2!", is_code, is_normal
2009+ 69A7             >
2009+ 69A7             >Dict_Ptr        defl    $
2009+ 69A7             >
2009+ 69A7             >//              ______________________________________________________________________
2009+ 69A7             >//              Heap part
2009+ 69A7             >
2009+ 69A7             >
2009+ 69A7             >                org     (Heap_Ptr & $1FFF) + $E000
2009+ E385             >
2009+ E385             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2009+ E385             >Latest_Definition defl  Heap_Ptr
2009+ E385             >
2009+ E385             >                // dummy db directives used to calculate length of namec
2009+ E385 32 21       >                db      "2!"
2009+ E387             >len_NFA         defl    $ - temp_NFA
2009+ E387             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2009+ E385             >
2009+ E385 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2009+ E386 32 21       >                db      "2!"               // name string in 7-bit ascii, but
2009+ E388             >                org     $-1                 // alter last byte of Name just above to set
2009+ E387 A1          >                db      {b $} | END_BIT     // msb as name end
2009+ E388             >
2009+ E388 7E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2009+ E38A             >Prev_Ptr        defl    Heap_Ptr
2009+ E38A             >
2009+ E38A             >mirror_Ptr      defl    $
2009+ E38A             >
2009+ E38A A9 69       >                dw      Dict_Ptr + 2        // xt
2009+ E38C             >Heap_Ptr        defl    $ - $E000           // save current HP
2009+ E38C             >
2009+ E38C             >Current_HP      defl  $ - $E000             // used to set HP once!
2009+ E38C             >
2009+ E38C             >//              ______________________________________________________________________
2009+ E38C             >//              Dictionary part
2009+ E38C             >
2009+ E38C             >                org     Dict_Ptr
2009+ 69A7             >
2009+ 69A7 8A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2009+ 69A9             >
2009+ 69A9             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2009+ 69A9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2009+ 69A9 ~           >
2009+ 69A9 ~           >
2009+ 69A9             >                endif           ; ok        // for other definitions it "points" the correct handler
2009+ 69A9             >                // Use of "; ok" to suppress "warning[fwdref]"
2009+ 69A9             >
2009+ 69A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2010+ 69A9 D9                           exx
2011+ 69AA E1                           pop     hl                  // address
2012+ 69AB C1                           pop     bc                  // < high-part
2013+ 69AC D1                           pop     de                  // < low-part
2014+ 69AD 71                           ld      (hl), c
2015+ 69AE 23                           inc     hl
2016+ 69AF 70                           ld      (hl), b
2017+ 69B0 23                           inc     hl
2018+ 69B1 18 CC                        jr      Store_end
2019+ 69B3                          //  ld      (hl), e
2020+ 69B3                          //  inc     hl
2021+ 69B3                          //  ld      (hl), d
2022+ 69B3                          //  exx
2023+ 69B3                          //  next
2024+ 69B3
2025+ 69B3              //  ______________________________________________________________________
2026+ 69B3              //
2027+ 69B3              // p@           a -- c
2028+ 69B3              // Read one byte from port a and leave the result on top of stack
2029+ 69B3                              New_Def PFETCH, "P@", is_code, is_normal
2029+ 69B3             >
2029+ 69B3             >Dict_Ptr        defl    $
2029+ 69B3             >
2029+ 69B3             >//              ______________________________________________________________________
2029+ 69B3             >//              Heap part
2029+ 69B3             >
2029+ 69B3             >
2029+ 69B3             >                org     (Heap_Ptr & $1FFF) + $E000
2029+ E38C             >
2029+ E38C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2029+ E38C             >Latest_Definition defl  Heap_Ptr
2029+ E38C             >
2029+ E38C             >                // dummy db directives used to calculate length of namec
2029+ E38C 50 40       >                db      "P@"
2029+ E38E             >len_NFA         defl    $ - temp_NFA
2029+ E38E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2029+ E38C             >
2029+ E38C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2029+ E38D 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2029+ E38F             >                org     $-1                 // alter last byte of Name just above to set
2029+ E38E C0          >                db      {b $} | END_BIT     // msb as name end
2029+ E38F             >
2029+ E38F 85 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2029+ E391             >Prev_Ptr        defl    Heap_Ptr
2029+ E391             >
2029+ E391             >mirror_Ptr      defl    $
2029+ E391             >
2029+ E391 B5 69       >                dw      Dict_Ptr + 2        // xt
2029+ E393             >Heap_Ptr        defl    $ - $E000           // save current HP
2029+ E393             >
2029+ E393             >Current_HP      defl  $ - $E000             // used to set HP once!
2029+ E393             >
2029+ E393             >//              ______________________________________________________________________
2029+ E393             >//              Dictionary part
2029+ E393             >
2029+ E393             >                org     Dict_Ptr
2029+ 69B3             >
2029+ 69B3 91 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2029+ 69B5             >
2029+ 69B5             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2029+ 69B5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2029+ 69B5 ~           >
2029+ 69B5 ~           >
2029+ 69B5             >                endif           ; ok        // for other definitions it "points" the correct handler
2029+ 69B5             >                // Use of "; ok" to suppress "warning[fwdref]"
2029+ 69B5             >
2029+ 69B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2030+ 69B5 D9                           exx
2031+ 69B6 C1                           pop     bc
2032+ 69B7 26 00                        ld      h, 0
2033+ 69B9 ED 68                        in      l, (c)
2034+ 69BB E5                           push    hl
2035+ 69BC D9                           exx
2036+ 69BD                              next
2036+ 69BD DD E9       >                jp      (ix)
2037+ 69BF
2038+ 69BF              //  ______________________________________________________________________
2039+ 69BF              //
2040+ 69BF              // p!           c a --
2041+ 69BF              // Send one byte (top of stack) to port a
2042+ 69BF                              New_Def PSTORE, "P!", is_code, is_normal
2042+ 69BF             >
2042+ 69BF             >Dict_Ptr        defl    $
2042+ 69BF             >
2042+ 69BF             >//              ______________________________________________________________________
2042+ 69BF             >//              Heap part
2042+ 69BF             >
2042+ 69BF             >
2042+ 69BF             >                org     (Heap_Ptr & $1FFF) + $E000
2042+ E393             >
2042+ E393             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2042+ E393             >Latest_Definition defl  Heap_Ptr
2042+ E393             >
2042+ E393             >                // dummy db directives used to calculate length of namec
2042+ E393 50 21       >                db      "P!"
2042+ E395             >len_NFA         defl    $ - temp_NFA
2042+ E395             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2042+ E393             >
2042+ E393 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2042+ E394 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2042+ E396             >                org     $-1                 // alter last byte of Name just above to set
2042+ E395 A1          >                db      {b $} | END_BIT     // msb as name end
2042+ E396             >
2042+ E396 8C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2042+ E398             >Prev_Ptr        defl    Heap_Ptr
2042+ E398             >
2042+ E398             >mirror_Ptr      defl    $
2042+ E398             >
2042+ E398 C1 69       >                dw      Dict_Ptr + 2        // xt
2042+ E39A             >Heap_Ptr        defl    $ - $E000           // save current HP
2042+ E39A             >
2042+ E39A             >Current_HP      defl  $ - $E000             // used to set HP once!
2042+ E39A             >
2042+ E39A             >//              ______________________________________________________________________
2042+ E39A             >//              Dictionary part
2042+ E39A             >
2042+ E39A             >                org     Dict_Ptr
2042+ 69BF             >
2042+ 69BF 98 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2042+ 69C1             >
2042+ 69C1             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2042+ 69C1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2042+ 69C1 ~           >
2042+ 69C1 ~           >
2042+ 69C1             >                endif           ; ok        // for other definitions it "points" the correct handler
2042+ 69C1             >                // Use of "; ok" to suppress "warning[fwdref]"
2042+ 69C1             >
2042+ 69C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2043+ 69C1 D9                           exx
2044+ 69C2 C1                           pop     bc
2045+ 69C3 E1                           pop     hl                  // < c
2046+ 69C4 ED 69                        out     (c), l              // low-byte
2047+ 69C6 D9                           exx
2048+ 69C7                              next
2048+ 69C7 DD E9       >                jp      (ix)
2049+ 69C9
2050+ 69C9
2051+ 69C9              //  ______________________________________________________________________
2052+ 69C9              //
2053+ 69C9              // 2*           n1 -- n2
2054+ 69C9              // doubles the number at top of stack
2055+ 69C9                              New_Def TWO_MUL, "2*", is_code, is_normal
2055+ 69C9             >
2055+ 69C9             >Dict_Ptr        defl    $
2055+ 69C9             >
2055+ 69C9             >//              ______________________________________________________________________
2055+ 69C9             >//              Heap part
2055+ 69C9             >
2055+ 69C9             >
2055+ 69C9             >                org     (Heap_Ptr & $1FFF) + $E000
2055+ E39A             >
2055+ E39A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2055+ E39A             >Latest_Definition defl  Heap_Ptr
2055+ E39A             >
2055+ E39A             >                // dummy db directives used to calculate length of namec
2055+ E39A 32 2A       >                db      "2*"
2055+ E39C             >len_NFA         defl    $ - temp_NFA
2055+ E39C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2055+ E39A             >
2055+ E39A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2055+ E39B 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2055+ E39D             >                org     $-1                 // alter last byte of Name just above to set
2055+ E39C AA          >                db      {b $} | END_BIT     // msb as name end
2055+ E39D             >
2055+ E39D 93 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2055+ E39F             >Prev_Ptr        defl    Heap_Ptr
2055+ E39F             >
2055+ E39F             >mirror_Ptr      defl    $
2055+ E39F             >
2055+ E39F CB 69       >                dw      Dict_Ptr + 2        // xt
2055+ E3A1             >Heap_Ptr        defl    $ - $E000           // save current HP
2055+ E3A1             >
2055+ E3A1             >Current_HP      defl  $ - $E000             // used to set HP once!
2055+ E3A1             >
2055+ E3A1             >//              ______________________________________________________________________
2055+ E3A1             >//              Dictionary part
2055+ E3A1             >
2055+ E3A1             >                org     Dict_Ptr
2055+ 69C9             >
2055+ 69C9 9F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2055+ 69CB             >
2055+ 69CB             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2055+ 69CB ~           >                call    runcode ; ok        // for primitive definitions  actual code
2055+ 69CB ~           >
2055+ 69CB ~           >
2055+ 69CB             >                endif           ; ok        // for other definitions it "points" the correct handler
2055+ 69CB             >                // Use of "; ok" to suppress "warning[fwdref]"
2055+ 69CB             >
2055+ 69CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2056+ 69CB              Two_Mul_Ptr:
2057+ 69CB E1                           pop     hl
2058+ 69CC 29                           add     hl, hl
2059+ 69CD
2060+ 69CD                              psh1
2060+ 69CD E5          >                push    hl
2060+ 69CE DD E9       >                jp      (ix)
2061+ 69D0
2062+ 69D0              //  ______________________________________________________________________
2063+ 69D0              //
2064+ 69D0              // 2/           n1 -- n2
2065+ 69D0              // halves the top of stack, sign is unchanged
2066+ 69D0                              New_Def TWO_DIV, "2/", is_code, is_normal
2066+ 69D0             >
2066+ 69D0             >Dict_Ptr        defl    $
2066+ 69D0             >
2066+ 69D0             >//              ______________________________________________________________________
2066+ 69D0             >//              Heap part
2066+ 69D0             >
2066+ 69D0             >
2066+ 69D0             >                org     (Heap_Ptr & $1FFF) + $E000
2066+ E3A1             >
2066+ E3A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2066+ E3A1             >Latest_Definition defl  Heap_Ptr
2066+ E3A1             >
2066+ E3A1             >                // dummy db directives used to calculate length of namec
2066+ E3A1 32 2F       >                db      "2/"
2066+ E3A3             >len_NFA         defl    $ - temp_NFA
2066+ E3A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2066+ E3A1             >
2066+ E3A1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2066+ E3A2 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2066+ E3A4             >                org     $-1                 // alter last byte of Name just above to set
2066+ E3A3 AF          >                db      {b $} | END_BIT     // msb as name end
2066+ E3A4             >
2066+ E3A4 9A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2066+ E3A6             >Prev_Ptr        defl    Heap_Ptr
2066+ E3A6             >
2066+ E3A6             >mirror_Ptr      defl    $
2066+ E3A6             >
2066+ E3A6 D2 69       >                dw      Dict_Ptr + 2        // xt
2066+ E3A8             >Heap_Ptr        defl    $ - $E000           // save current HP
2066+ E3A8             >
2066+ E3A8             >Current_HP      defl  $ - $E000             // used to set HP once!
2066+ E3A8             >
2066+ E3A8             >//              ______________________________________________________________________
2066+ E3A8             >//              Dictionary part
2066+ E3A8             >
2066+ E3A8             >                org     Dict_Ptr
2066+ 69D0             >
2066+ 69D0 A6 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2066+ 69D2             >
2066+ 69D2             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2066+ 69D2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2066+ 69D2 ~           >
2066+ 69D2 ~           >
2066+ 69D2             >                endif           ; ok        // for other definitions it "points" the correct handler
2066+ 69D2             >                // Use of "; ok" to suppress "warning[fwdref]"
2066+ 69D2             >
2066+ 69D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2067+ 69D2 E1                           pop     hl
2068+ 69D3 CB 2C                        sra     h
2069+ 69D5 CB 1D                        rr      l
2070+ 69D7
2071+ 69D7                              psh1
2071+ 69D7 E5          >                push    hl
2071+ 69D8 DD E9       >                jp      (ix)
2072+ 69DA
2073+ 69DA              //  ______________________________________________________________________
2074+ 69DA              //
2075+ 69DA              // lshift       n1 u -- n2
2076+ 69DA              // bit left shift of u bits
2077+ 69DA                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2077+ 69DA             >
2077+ 69DA             >Dict_Ptr        defl    $
2077+ 69DA             >
2077+ 69DA             >//              ______________________________________________________________________
2077+ 69DA             >//              Heap part
2077+ 69DA             >
2077+ 69DA             >
2077+ 69DA             >                org     (Heap_Ptr & $1FFF) + $E000
2077+ E3A8             >
2077+ E3A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2077+ E3A8             >Latest_Definition defl  Heap_Ptr
2077+ E3A8             >
2077+ E3A8             >                // dummy db directives used to calculate length of namec
2077+ E3A8 4C 53 48 49 >                db      "LSHIFT"
2077+ E3AC 46 54       >
2077+ E3AE             >len_NFA         defl    $ - temp_NFA
2077+ E3AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2077+ E3A8             >
2077+ E3A8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2077+ E3A9 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2077+ E3AD 46 54       >
2077+ E3AF             >                org     $-1                 // alter last byte of Name just above to set
2077+ E3AE D4          >                db      {b $} | END_BIT     // msb as name end
2077+ E3AF             >
2077+ E3AF A1 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2077+ E3B1             >Prev_Ptr        defl    Heap_Ptr
2077+ E3B1             >
2077+ E3B1             >mirror_Ptr      defl    $
2077+ E3B1             >
2077+ E3B1 DC 69       >                dw      Dict_Ptr + 2        // xt
2077+ E3B3             >Heap_Ptr        defl    $ - $E000           // save current HP
2077+ E3B3             >
2077+ E3B3             >Current_HP      defl  $ - $E000             // used to set HP once!
2077+ E3B3             >
2077+ E3B3             >//              ______________________________________________________________________
2077+ E3B3             >//              Dictionary part
2077+ E3B3             >
2077+ E3B3             >                org     Dict_Ptr
2077+ 69DA             >
2077+ 69DA B1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2077+ 69DC             >
2077+ 69DC             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2077+ 69DC ~           >                call    runcode ; ok        // for primitive definitions  actual code
2077+ 69DC ~           >
2077+ 69DC ~           >
2077+ 69DC             >                endif           ; ok        // for other definitions it "points" the correct handler
2077+ 69DC             >                // Use of "; ok" to suppress "warning[fwdref]"
2077+ 69DC             >
2077+ 69DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2078+ 69DC D9                           exx
2079+ 69DD C1                           pop     bc
2080+ 69DE 41                           ld      b, c
2081+ 69DF D1                           pop     de
2082+ 69E0 ED 28                        bsla    de, b
2083+ 69E2 D5                           push    de
2084+ 69E3 D9                           exx
2085+ 69E4                              next
2085+ 69E4 DD E9       >                jp      (ix)
2086+ 69E6
2087+ 69E6              //  ______________________________________________________________________
2088+ 69E6              //
2089+ 69E6              // rshift       n1 u -- n2
2090+ 69E6              // bit right shift of u bits
2091+ 69E6                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2091+ 69E6             >
2091+ 69E6             >Dict_Ptr        defl    $
2091+ 69E6             >
2091+ 69E6             >//              ______________________________________________________________________
2091+ 69E6             >//              Heap part
2091+ 69E6             >
2091+ 69E6             >
2091+ 69E6             >                org     (Heap_Ptr & $1FFF) + $E000
2091+ E3B3             >
2091+ E3B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2091+ E3B3             >Latest_Definition defl  Heap_Ptr
2091+ E3B3             >
2091+ E3B3             >                // dummy db directives used to calculate length of namec
2091+ E3B3 52 53 48 49 >                db      "RSHIFT"
2091+ E3B7 46 54       >
2091+ E3B9             >len_NFA         defl    $ - temp_NFA
2091+ E3B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2091+ E3B3             >
2091+ E3B3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2091+ E3B4 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2091+ E3B8 46 54       >
2091+ E3BA             >                org     $-1                 // alter last byte of Name just above to set
2091+ E3B9 D4          >                db      {b $} | END_BIT     // msb as name end
2091+ E3BA             >
2091+ E3BA A8 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2091+ E3BC             >Prev_Ptr        defl    Heap_Ptr
2091+ E3BC             >
2091+ E3BC             >mirror_Ptr      defl    $
2091+ E3BC             >
2091+ E3BC E8 69       >                dw      Dict_Ptr + 2        // xt
2091+ E3BE             >Heap_Ptr        defl    $ - $E000           // save current HP
2091+ E3BE             >
2091+ E3BE             >Current_HP      defl  $ - $E000             // used to set HP once!
2091+ E3BE             >
2091+ E3BE             >//              ______________________________________________________________________
2091+ E3BE             >//              Dictionary part
2091+ E3BE             >
2091+ E3BE             >                org     Dict_Ptr
2091+ 69E6             >
2091+ 69E6 BC 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2091+ 69E8             >
2091+ 69E8             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2091+ 69E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2091+ 69E8 ~           >
2091+ 69E8 ~           >
2091+ 69E8             >                endif           ; ok        // for other definitions it "points" the correct handler
2091+ 69E8             >                // Use of "; ok" to suppress "warning[fwdref]"
2091+ 69E8             >
2091+ 69E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2092+ 69E8 D9                           exx
2093+ 69E9 C1                           pop     bc
2094+ 69EA 41                           ld      b, c
2095+ 69EB D1                           pop     de
2096+ 69EC ED 2A                        bsrl    de, b
2097+ 69EE D5                           push    de
2098+ 69EF D9                           exx
2099+ 69F0                              next
2099+ 69F0 DD E9       >                jp      (ix)
2100+ 69F2
2101+ 69F2              //  ______________________________________________________________________
2102+ 69F2              //
2103+ 69F2              // cells        n1 -- n2
2104+ 69F2              // decrement by 2 top of stack
2105+ 69F2                              New_Def CELLS, "CELLS", is_code, is_normal
2105+ 69F2             >
2105+ 69F2             >Dict_Ptr        defl    $
2105+ 69F2             >
2105+ 69F2             >//              ______________________________________________________________________
2105+ 69F2             >//              Heap part
2105+ 69F2             >
2105+ 69F2             >
2105+ 69F2             >                org     (Heap_Ptr & $1FFF) + $E000
2105+ E3BE             >
2105+ E3BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2105+ E3BE             >Latest_Definition defl  Heap_Ptr
2105+ E3BE             >
2105+ E3BE             >                // dummy db directives used to calculate length of namec
2105+ E3BE 43 45 4C 4C >                db      "CELLS"
2105+ E3C2 53          >
2105+ E3C3             >len_NFA         defl    $ - temp_NFA
2105+ E3C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2105+ E3BE             >
2105+ E3BE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2105+ E3BF 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2105+ E3C3 53          >
2105+ E3C4             >                org     $-1                 // alter last byte of Name just above to set
2105+ E3C3 D3          >                db      {b $} | END_BIT     // msb as name end
2105+ E3C4             >
2105+ E3C4 B3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2105+ E3C6             >Prev_Ptr        defl    Heap_Ptr
2105+ E3C6             >
2105+ E3C6             >mirror_Ptr      defl    $
2105+ E3C6             >
2105+ E3C6 F4 69       >                dw      Dict_Ptr + 2        // xt
2105+ E3C8             >Heap_Ptr        defl    $ - $E000           // save current HP
2105+ E3C8             >
2105+ E3C8             >Current_HP      defl  $ - $E000             // used to set HP once!
2105+ E3C8             >
2105+ E3C8             >//              ______________________________________________________________________
2105+ E3C8             >//              Dictionary part
2105+ E3C8             >
2105+ E3C8             >                org     Dict_Ptr
2105+ 69F2             >
2105+ 69F2 C6 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2105+ 69F4             >
2105+ 69F4             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2105+ 69F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2105+ 69F4 ~           >
2105+ 69F4 ~           >
2105+ 69F4             >                endif           ; ok        // for other definitions it "points" the correct handler
2105+ 69F4             >                // Use of "; ok" to suppress "warning[fwdref]"
2105+ 69F4             >
2105+ 69F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2106+ 69F4 18 D5                        jr      Two_Mul_Ptr
2107+ 69F6
2108+ 69F6
2109+ 69F6              //  ______________________________________________________________________
2110+ 69F6
2111+ 69F6
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/L0.asm
 149  69F6                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/L1.asm
   1+ 69F6              //  ______________________________________________________________________
   2+ 69F6              //
   3+ 69F6              //  L1.asm
   4+ 69F6              //
   5+ 69F6              //  Level-1 definitions and derivate
   6+ 69F6              //  ______________________________________________________________________
   7+ 69F6
   8+ 69F6              //  ______________________________________________________________________
   9+ 69F6              //
  10+ 69F6              // :            -- cccc     ( compile time )
  11+ 69F6              //              i*x -- j*x  ( run time )
  12+ 69F6              // Colon Definition
  13+ 69F6                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 69F6             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 69F6             >
  13+ 69F6             >Dict_Ptr        defl    $
  13+ 69F6             >
  13+ 69F6             >//              ______________________________________________________________________
  13+ 69F6             >//              Heap part
  13+ 69F6             >
  13+ 69F6             >
  13+ 69F6             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3C8             >
  13+ E3C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3C8             >Latest_Definition defl  Heap_Ptr
  13+ E3C8             >
  13+ E3C8             >                // dummy db directives used to calculate length of namec
  13+ E3C8 3A          >                db      ":"
  13+ E3C9             >len_NFA         defl    $ - temp_NFA
  13+ E3C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3C8             >
  13+ E3C8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3C9 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3CA             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3C9 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3CA             >
  13+ E3CA BE 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CC             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CC             >
  13+ E3CC             >mirror_Ptr      defl    $
  13+ E3CC             >
  13+ E3CC F8 69       >                dw      Dict_Ptr + 2        // xt
  13+ E3CE             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3CE             >
  13+ E3CE             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3CE             >
  13+ E3CE             >//              ______________________________________________________________________
  13+ E3CE             >//              Dictionary part
  13+ E3CE             >
  13+ E3CE             >                org     Dict_Ptr
  13+ 69F6             >
  13+ 69F6 CC 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 69F8             >
  13+ 69F8             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 69F8 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 69FB             >
  13+ 69FB             >
  13+ 69FB             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 69FB             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 69FB             >
  13+ 69FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 69FB
  15+ 69FB E5 6D                        dw      QEXEC                   // ?exec
  16+ 69FD B0 6D                        dw      STORE_CSP               // !csp
  17+ 69FF 29 6B 72 69                  dw      CURRENT, FETCH          // current @
  18+ 6A03 23 6B 7C 69                  dw      CONTEXT, STORE          // context !
  19+ 6A07 DC 73                        dw      CREATE                  // create  ( forward )
  20+ 6A09 67 6E                        dw      SMUDGE                  // dmudge
  21+ 6A0B 58 6E                        dw      SQUARED_CLOSE           // ]
  22+ 6A0D A3 6E                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6A0F                                                              // ... immediate
  24+ 6A0F              Enter_Ptr:
  25+ 6A0F                              // via call coded in CFA
  26+ 6A0F EB                           ex      de, hl //**
  27+ 6A10                              // *** ldhlrp
  28+ 6A10 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 6A11 70                           ld      (hl), b
  30+ 6A12 2B                           dec     hl
  31+ 6A13 71                           ld      (hl), c
  32+ 6A14                              // *** ldrphl
  33+ 6A14 EB                           ex      de, hl //**
  34+ 6A15
  35+ 6A15
  36+ 6A15 C1                           pop     bc                  // points to PFA of "this" word
  37+ 6A16                              next
  37+ 6A16 DD E9       >                jp      (ix)
  38+ 6A18
  39+ 6A18              //  ______________________________________________________________________
  40+ 6A18              //
  41+ 6A18              // ;            --
  42+ 6A18              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 6A18                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 6A18             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 6A18             >
  43+ 6A18             >Dict_Ptr        defl    $
  43+ 6A18             >
  43+ 6A18             >//              ______________________________________________________________________
  43+ 6A18             >//              Heap part
  43+ 6A18             >
  43+ 6A18             >
  43+ 6A18             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3CE             >
  43+ E3CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3CE             >Latest_Definition defl  Heap_Ptr
  43+ E3CE             >
  43+ E3CE             >                // dummy db directives used to calculate length of namec
  43+ E3CE 3B          >                db      ";"
  43+ E3CF             >len_NFA         defl    $ - temp_NFA
  43+ E3CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3CE             >
  43+ E3CE C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3CF 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3D0             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3CF BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3D0             >
  43+ E3D0 C8 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D2             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D2             >
  43+ E3D2             >mirror_Ptr      defl    $
  43+ E3D2             >
  43+ E3D2 1A 6A       >                dw      Dict_Ptr + 2        // xt
  43+ E3D4             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D4             >
  43+ E3D4             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D4             >
  43+ E3D4             >//              ______________________________________________________________________
  43+ E3D4             >//              Dictionary part
  43+ E3D4             >
  43+ E3D4             >                org     Dict_Ptr
  43+ 6A18             >
  43+ 6A18 D2 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 6A1A             >
  43+ 6A1A             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 6A1A CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 6A1D             >
  43+ 6A1D             >
  43+ 6A1D             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 6A1D             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 6A1D             >
  43+ 6A1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 6A1D
  45+ 6A1D 05 6E                        dw      QCSP                    // ?csp
  46+ 6A1F 2D 6E 3D 68                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 6A23 67 6E                        dw      SMUDGE                  // smudge
  48+ 6A25 4B 6E                        dw      SQUARED_OPEN            // [
  49+ 6A27 3D 68                        dw      EXIT                    // ; immediate
  50+ 6A29
  51+ 6A29              //  ______________________________________________________________________
  52+ 6A29              //
  53+ 6A29              // noop         --
  54+ 6A29
  55+ 6A29                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 6A29             >
  55+ 6A29             >Dict_Ptr        defl    $
  55+ 6A29             >
  55+ 6A29             >//              ______________________________________________________________________
  55+ 6A29             >//              Heap part
  55+ 6A29             >
  55+ 6A29             >
  55+ 6A29             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D4             >
  55+ E3D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D4             >Latest_Definition defl  Heap_Ptr
  55+ E3D4             >
  55+ E3D4             >                // dummy db directives used to calculate length of namec
  55+ E3D4 4E 4F 4F 50 >                db      "NOOP"
  55+ E3D8             >len_NFA         defl    $ - temp_NFA
  55+ E3D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D4             >
  55+ E3D4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D5 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3D9             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3D8 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3D9             >
  55+ E3D9 CE 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DB             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DB             >
  55+ E3DB             >mirror_Ptr      defl    $
  55+ E3DB             >
  55+ E3DB 2B 6A       >                dw      Dict_Ptr + 2        // xt
  55+ E3DD             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DD             >
  55+ E3DD             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DD             >
  55+ E3DD             >//              ______________________________________________________________________
  55+ E3DD             >//              Dictionary part
  55+ E3DD             >
  55+ E3DD             >                org     Dict_Ptr
  55+ 6A29             >
  55+ 6A29 DB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 6A2B             >
  55+ 6A2B             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 6A2B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 6A2B ~           >
  55+ 6A2B ~           >
  55+ 6A2B             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 6A2B             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 6A2B             >
  55+ 6A2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 6A2B                              next
  56+ 6A2B DD E9       >                jp      (ix)
  57+ 6A2D
  58+ 6A2D              //  ______________________________________________________________________
  59+ 6A2D              //
  60+ 6A2D              // constant     n -- cccc     ( compile time )
  61+ 6A2D              //              -- n          ( run time )
  62+ 6A2D              // Constant definition.
  63+ 6A2D                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 6A2D             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 6A2D             >
  63+ 6A2D             >Dict_Ptr        defl    $
  63+ 6A2D             >
  63+ 6A2D             >//              ______________________________________________________________________
  63+ 6A2D             >//              Heap part
  63+ 6A2D             >
  63+ 6A2D             >
  63+ 6A2D             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DD             >
  63+ E3DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DD             >Latest_Definition defl  Heap_Ptr
  63+ E3DD             >
  63+ E3DD             >                // dummy db directives used to calculate length of namec
  63+ E3DD 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E1 54 41 4E 54 >
  63+ E3E5             >len_NFA         defl    $ - temp_NFA
  63+ E3E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DD             >
  63+ E3DD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3DE 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E2 54 41 4E 54 >
  63+ E3E6             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E5 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E6             >
  63+ E3E6 D4 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3E8             >Prev_Ptr        defl    Heap_Ptr
  63+ E3E8             >
  63+ E3E8             >mirror_Ptr      defl    $
  63+ E3E8             >
  63+ E3E8 2F 6A       >                dw      Dict_Ptr + 2        // xt
  63+ E3EA             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3EA             >
  63+ E3EA             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3EA             >
  63+ E3EA             >//              ______________________________________________________________________
  63+ E3EA             >//              Dictionary part
  63+ E3EA             >
  63+ E3EA             >                org     Dict_Ptr
  63+ 6A2D             >
  63+ 6A2D E8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 6A2F             >
  63+ 6A2F             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 6A2F CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 6A32             >
  63+ 6A32             >
  63+ 6A32             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 6A32             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 6A32             >
  63+ 6A32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 6A32 DC 73                        dw      CREATE                  // create
  65+ 6A34 9F 6B                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 6A36 A3 6E                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 6A38              Constant_Ptr:
  68+ 6A38
  69+ 6A38
  70+ 6A38 E1                           pop     hl
  71+ 6A39
  72+ 6A39 7E                           ld      a, (hl)
  73+ 6A3A 23                           inc     hl
  74+ 6A3B 66                           ld      h, (hl)
  75+ 6A3C 6F                           ld      l, a
  76+ 6A3D E5                           push    hl
  77+ 6A3E                              next
  77+ 6A3E DD E9       >                jp      (ix)
  78+ 6A40
  79+ 6A40              //  ______________________________________________________________________
  80+ 6A40              //
  81+ 6A40              // variable     n -- cccc     ( compile time )
  82+ 6A40              //              -- a          ( run time )
  83+ 6A40              // Variable definition, n is the initial value.
  84+ 6A40                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 6A40             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 6A40             >
  84+ 6A40             >Dict_Ptr        defl    $
  84+ 6A40             >
  84+ 6A40             >//              ______________________________________________________________________
  84+ 6A40             >//              Heap part
  84+ 6A40             >
  84+ 6A40             >
  84+ 6A40             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3EA             >
  84+ E3EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3EA             >Latest_Definition defl  Heap_Ptr
  84+ E3EA             >
  84+ E3EA             >                // dummy db directives used to calculate length of namec
  84+ E3EA 56 41 52 49 >                db      "VARIABLE"
  84+ E3EE 41 42 4C 45 >
  84+ E3F2             >len_NFA         defl    $ - temp_NFA
  84+ E3F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3EA             >
  84+ E3EA 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3EB 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3EF 41 42 4C 45 >
  84+ E3F3             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F2 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F3             >
  84+ E3F3 DD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F5             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F5             >
  84+ E3F5             >mirror_Ptr      defl    $
  84+ E3F5             >
  84+ E3F5 42 6A       >                dw      Dict_Ptr + 2        // xt
  84+ E3F7             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F7             >
  84+ E3F7             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F7             >
  84+ E3F7             >//              ______________________________________________________________________
  84+ E3F7             >//              Dictionary part
  84+ E3F7             >
  84+ E3F7             >                org     Dict_Ptr
  84+ 6A40             >
  84+ 6A40 F5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 6A42             >
  84+ 6A42             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 6A42 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 6A45             >
  84+ 6A45             >
  84+ 6A45             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 6A45             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 6A45             >
  84+ 6A45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 6A45
  86+ 6A45 64 6A                        dw      ZERO
  87+ 6A47 2F 6A                        dw      CONSTANT                // constant
  88+ 6A49 A3 6E                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 6A4B              Variable_Ptr:
  90+ 6A4B
  91+ 6A4B
  92+ 6A4B
  93+ 6A4B
  94+ 6A4B                              next
  94+ 6A4B DD E9       >                jp      (ix)
  95+ 6A4D
  96+ 6A4D              //  ______________________________________________________________________
  97+ 6A4D              //
  98+ 6A4D              // user         b -- cccc     ( compile time )
  99+ 6A4D              //              -- a          ( run time )
 100+ 6A4D              // User variable definition
 101+ 6A4D                              Colon_Def USER, "USER", is_normal
 101+ 6A4D             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 6A4D             >
 101+ 6A4D             >Dict_Ptr        defl    $
 101+ 6A4D             >
 101+ 6A4D             >//              ______________________________________________________________________
 101+ 6A4D             >//              Heap part
 101+ 6A4D             >
 101+ 6A4D             >
 101+ 6A4D             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F7             >
 101+ E3F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F7             >Latest_Definition defl  Heap_Ptr
 101+ E3F7             >
 101+ E3F7             >                // dummy db directives used to calculate length of namec
 101+ E3F7 55 53 45 52 >                db      "USER"
 101+ E3FB             >len_NFA         defl    $ - temp_NFA
 101+ E3FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F7             >
 101+ E3F7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3F8 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FC             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FB D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FC             >
 101+ E3FC EA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E3FE             >Prev_Ptr        defl    Heap_Ptr
 101+ E3FE             >
 101+ E3FE             >mirror_Ptr      defl    $
 101+ E3FE             >
 101+ E3FE 4F 6A       >                dw      Dict_Ptr + 2        // xt
 101+ E400             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E400             >
 101+ E400             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E400             >
 101+ E400             >//              ______________________________________________________________________
 101+ E400             >//              Dictionary part
 101+ E400             >
 101+ E400             >                org     Dict_Ptr
 101+ 6A4D             >
 101+ 6A4D FE 03       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 6A4F             >
 101+ 6A4F             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 6A4F CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 6A52             >
 101+ 6A52             >
 101+ 6A52             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 6A52             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 6A52             >
 101+ 6A52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 6A52
 103+ 6A52 DC 73                        dw      CREATE                  // create
 104+ 6A54 AE 6B                        dw      CCOMMA                  // c,
 105+ 6A56 A3 6E                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 6A58
 107+ 6A58
 108+ 6A58              User_Ptr:
 109+ 6A58                              // via call coded in CFA
 110+ 6A58 E1                           pop     hl
 111+ 6A59
 112+ 6A59 7E                           ld      a, (hl)
 113+ 6A5A 2A 94 63                     ld      hl, (USER_Pointer)
 114+ 6A5D ED 31                        add     hl, a
 115+ 6A5F E5                           push    hl
 116+ 6A60                              next
 116+ 6A60 DD E9       >                jp      (ix)
 117+ 6A62
 118+ 6A62              //  ______________________________________________________________________
 119+ 6A62              //
 120+ 6A62                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 6A62             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 6A62             >
 120+ 6A62             >Dict_Ptr        defl    $
 120+ 6A62             >
 120+ 6A62             >//              ______________________________________________________________________
 120+ 6A62             >//              Heap part
 120+ 6A62             >
 120+ 6A62             >
 120+ 6A62             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E400             >
 120+ E400             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E400             >Latest_Definition defl  Heap_Ptr
 120+ E400             >
 120+ E400             >                // dummy db directives used to calculate length of namec
 120+ E400 30          >                db      "0"
 120+ E401             >len_NFA         defl    $ - temp_NFA
 120+ E401             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E400             >
 120+ E400 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E401 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E402             >                org     $-1                 // alter last byte of Name just above to set
 120+ E401 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E402             >
 120+ E402 F7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E404             >Prev_Ptr        defl    Heap_Ptr
 120+ E404             >
 120+ E404             >mirror_Ptr      defl    $
 120+ E404             >
 120+ E404 64 6A       >                dw      Dict_Ptr + 2        // xt
 120+ E406             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E406             >
 120+ E406             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E406             >
 120+ E406             >//              ______________________________________________________________________
 120+ E406             >//              Dictionary part
 120+ E406             >
 120+ E406             >                org     Dict_Ptr
 120+ 6A62             >
 120+ 6A62 04 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 6A64             >
 120+ 6A64             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6A64 CD 38 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6A67             >
 120+ 6A67             >
 120+ 6A67             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6A67             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6A67             >
 120+ 6A67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6A67 00 00       >                dw      0
 121+ 6A69                              Constant_Def ONE        ,   "1"     ,   1
 121+ 6A69             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 6A69             >
 121+ 6A69             >Dict_Ptr        defl    $
 121+ 6A69             >
 121+ 6A69             >//              ______________________________________________________________________
 121+ 6A69             >//              Heap part
 121+ 6A69             >
 121+ 6A69             >
 121+ 6A69             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E406             >
 121+ E406             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E406             >Latest_Definition defl  Heap_Ptr
 121+ E406             >
 121+ E406             >                // dummy db directives used to calculate length of namec
 121+ E406 31          >                db      "1"
 121+ E407             >len_NFA         defl    $ - temp_NFA
 121+ E407             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E406             >
 121+ E406 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E407 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E408             >                org     $-1                 // alter last byte of Name just above to set
 121+ E407 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E408             >
 121+ E408 00 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E40A             >Prev_Ptr        defl    Heap_Ptr
 121+ E40A             >
 121+ E40A             >mirror_Ptr      defl    $
 121+ E40A             >
 121+ E40A 6B 6A       >                dw      Dict_Ptr + 2        // xt
 121+ E40C             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40C             >
 121+ E40C             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40C             >
 121+ E40C             >//              ______________________________________________________________________
 121+ E40C             >//              Dictionary part
 121+ E40C             >
 121+ E40C             >                org     Dict_Ptr
 121+ 6A69             >
 121+ 6A69 0A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 6A6B             >
 121+ 6A6B             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6A6B CD 38 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6A6E             >
 121+ 6A6E             >
 121+ 6A6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6A6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6A6E             >
 121+ 6A6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6A6E 01 00       >                dw      1
 122+ 6A70                              Constant_Def TWO        ,   "2"     ,   2
 122+ 6A70             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 6A70             >
 122+ 6A70             >Dict_Ptr        defl    $
 122+ 6A70             >
 122+ 6A70             >//              ______________________________________________________________________
 122+ 6A70             >//              Heap part
 122+ 6A70             >
 122+ 6A70             >
 122+ 6A70             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40C             >
 122+ E40C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40C             >Latest_Definition defl  Heap_Ptr
 122+ E40C             >
 122+ E40C             >                // dummy db directives used to calculate length of namec
 122+ E40C 32          >                db      "2"
 122+ E40D             >len_NFA         defl    $ - temp_NFA
 122+ E40D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40C             >
 122+ E40C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40D 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E40E             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40D B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E40E             >
 122+ E40E 06 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E410             >Prev_Ptr        defl    Heap_Ptr
 122+ E410             >
 122+ E410             >mirror_Ptr      defl    $
 122+ E410             >
 122+ E410 72 6A       >                dw      Dict_Ptr + 2        // xt
 122+ E412             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E412             >
 122+ E412             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E412             >
 122+ E412             >//              ______________________________________________________________________
 122+ E412             >//              Dictionary part
 122+ E412             >
 122+ E412             >                org     Dict_Ptr
 122+ 6A70             >
 122+ 6A70 10 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 6A72             >
 122+ 6A72             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6A72 CD 38 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6A75             >
 122+ 6A75             >
 122+ 6A75             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6A75             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6A75             >
 122+ 6A75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6A75 02 00       >                dw      2
 123+ 6A77                              Constant_Def THREE      ,   "3"     ,   3
 123+ 6A77             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 6A77             >
 123+ 6A77             >Dict_Ptr        defl    $
 123+ 6A77             >
 123+ 6A77             >//              ______________________________________________________________________
 123+ 6A77             >//              Heap part
 123+ 6A77             >
 123+ 6A77             >
 123+ 6A77             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E412             >
 123+ E412             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E412             >Latest_Definition defl  Heap_Ptr
 123+ E412             >
 123+ E412             >                // dummy db directives used to calculate length of namec
 123+ E412 33          >                db      "3"
 123+ E413             >len_NFA         defl    $ - temp_NFA
 123+ E413             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E412             >
 123+ E412 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E413 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E414             >                org     $-1                 // alter last byte of Name just above to set
 123+ E413 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E414             >
 123+ E414 0C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E416             >Prev_Ptr        defl    Heap_Ptr
 123+ E416             >
 123+ E416             >mirror_Ptr      defl    $
 123+ E416             >
 123+ E416 79 6A       >                dw      Dict_Ptr + 2        // xt
 123+ E418             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E418             >
 123+ E418             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E418             >
 123+ E418             >//              ______________________________________________________________________
 123+ E418             >//              Dictionary part
 123+ E418             >
 123+ E418             >                org     Dict_Ptr
 123+ 6A77             >
 123+ 6A77 16 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 6A79             >
 123+ 6A79             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6A79 CD 38 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6A7C             >
 123+ 6A7C             >
 123+ 6A7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6A7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6A7C             >
 123+ 6A7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6A7C 03 00       >                dw      3
 124+ 6A7E                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 6A7E             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 6A7E             >
 124+ 6A7E             >Dict_Ptr        defl    $
 124+ 6A7E             >
 124+ 6A7E             >//              ______________________________________________________________________
 124+ 6A7E             >//              Heap part
 124+ 6A7E             >
 124+ 6A7E             >
 124+ 6A7E             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E418             >
 124+ E418             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E418             >Latest_Definition defl  Heap_Ptr
 124+ E418             >
 124+ E418             >                // dummy db directives used to calculate length of namec
 124+ E418 2D 31       >                db      "-1"
 124+ E41A             >len_NFA         defl    $ - temp_NFA
 124+ E41A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E418             >
 124+ E418 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E419 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41B             >                org     $-1                 // alter last byte of Name just above to set
 124+ E41A B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41B             >
 124+ E41B 12 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41D             >Prev_Ptr        defl    Heap_Ptr
 124+ E41D             >
 124+ E41D             >mirror_Ptr      defl    $
 124+ E41D             >
 124+ E41D 80 6A       >                dw      Dict_Ptr + 2        // xt
 124+ E41F             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E41F             >
 124+ E41F             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E41F             >
 124+ E41F             >//              ______________________________________________________________________
 124+ E41F             >//              Dictionary part
 124+ E41F             >
 124+ E41F             >                org     Dict_Ptr
 124+ 6A7E             >
 124+ 6A7E 1D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 6A80             >
 124+ 6A80             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6A80 CD 38 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6A83             >
 124+ 6A83             >
 124+ 6A83             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6A83             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6A83             >
 124+ 6A83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6A83 FF FF       >                dw      -1
 125+ 6A85                              Constant_Def BL         ,   "BL"    , $20
 125+ 6A85             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 6A85             >
 125+ 6A85             >Dict_Ptr        defl    $
 125+ 6A85             >
 125+ 6A85             >//              ______________________________________________________________________
 125+ 6A85             >//              Heap part
 125+ 6A85             >
 125+ 6A85             >
 125+ 6A85             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E41F             >
 125+ E41F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E41F             >Latest_Definition defl  Heap_Ptr
 125+ E41F             >
 125+ E41F             >                // dummy db directives used to calculate length of namec
 125+ E41F 42 4C       >                db      "BL"
 125+ E421             >len_NFA         defl    $ - temp_NFA
 125+ E421             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E41F             >
 125+ E41F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E420 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E422             >                org     $-1                 // alter last byte of Name just above to set
 125+ E421 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E422             >
 125+ E422 18 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E424             >Prev_Ptr        defl    Heap_Ptr
 125+ E424             >
 125+ E424             >mirror_Ptr      defl    $
 125+ E424             >
 125+ E424 87 6A       >                dw      Dict_Ptr + 2        // xt
 125+ E426             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E426             >
 125+ E426             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E426             >
 125+ E426             >//              ______________________________________________________________________
 125+ E426             >//              Dictionary part
 125+ E426             >
 125+ E426             >                org     Dict_Ptr
 125+ 6A85             >
 125+ 6A85 24 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 6A87             >
 125+ 6A87             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6A87 CD 38 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6A8A             >
 125+ 6A8A             >
 125+ 6A8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6A8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6A8A             >
 125+ 6A8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6A8A 20 00       >                dw      $20
 126+ 6A8C                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 6A8C             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 6A8C             >
 126+ 6A8C             >Dict_Ptr        defl    $
 126+ 6A8C             >
 126+ 6A8C             >//              ______________________________________________________________________
 126+ 6A8C             >//              Heap part
 126+ 6A8C             >
 126+ 6A8C             >
 126+ 6A8C             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E426             >
 126+ E426             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E426             >Latest_Definition defl  Heap_Ptr
 126+ E426             >
 126+ E426             >                // dummy db directives used to calculate length of namec
 126+ E426 43 2F 4C    >                db      "C/L"
 126+ E429             >len_NFA         defl    $ - temp_NFA
 126+ E429             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E426             >
 126+ E426 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E427 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E42A             >                org     $-1                 // alter last byte of Name just above to set
 126+ E429 CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E42A             >
 126+ E42A 1F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42C             >Prev_Ptr        defl    Heap_Ptr
 126+ E42C             >
 126+ E42C             >mirror_Ptr      defl    $
 126+ E42C             >
 126+ E42C 8E 6A       >                dw      Dict_Ptr + 2        // xt
 126+ E42E             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E42E             >
 126+ E42E             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E42E             >
 126+ E42E             >//              ______________________________________________________________________
 126+ E42E             >//              Dictionary part
 126+ E42E             >
 126+ E42E             >                org     Dict_Ptr
 126+ 6A8C             >
 126+ 6A8C 2C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 6A8E             >
 126+ 6A8E             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6A8E CD 38 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6A91             >
 126+ 6A91             >
 126+ 6A91             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6A91             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6A91             >
 126+ 6A91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6A91 40 00       >                dw      64
 127+ 6A93                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 6A93             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 6A93             >
 127+ 6A93             >Dict_Ptr        defl    $
 127+ 6A93             >
 127+ 6A93             >//              ______________________________________________________________________
 127+ 6A93             >//              Heap part
 127+ 6A93             >
 127+ 6A93             >
 127+ 6A93             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E42E             >
 127+ E42E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E42E             >Latest_Definition defl  Heap_Ptr
 127+ E42E             >
 127+ E42E             >                // dummy db directives used to calculate length of namec
 127+ E42E 42 2F 42 55 >                db      "B/BUF"
 127+ E432 46          >
 127+ E433             >len_NFA         defl    $ - temp_NFA
 127+ E433             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E42E             >
 127+ E42E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E42F 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E433 46          >
 127+ E434             >                org     $-1                 // alter last byte of Name just above to set
 127+ E433 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E434             >
 127+ E434 26 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E436             >Prev_Ptr        defl    Heap_Ptr
 127+ E436             >
 127+ E436             >mirror_Ptr      defl    $
 127+ E436             >
 127+ E436 95 6A       >                dw      Dict_Ptr + 2        // xt
 127+ E438             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E438             >
 127+ E438             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E438             >
 127+ E438             >//              ______________________________________________________________________
 127+ E438             >//              Dictionary part
 127+ E438             >
 127+ E438             >                org     Dict_Ptr
 127+ 6A93             >
 127+ 6A93 36 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 6A95             >
 127+ 6A95             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6A95 CD 38 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6A98             >
 127+ 6A98             >
 127+ 6A98             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6A98             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6A98             >
 127+ 6A98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6A98 00 02       >                dw      512
 128+ 6A9A                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 6A9A             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 6A9A             >
 128+ 6A9A             >Dict_Ptr        defl    $
 128+ 6A9A             >
 128+ 6A9A             >//              ______________________________________________________________________
 128+ 6A9A             >//              Heap part
 128+ 6A9A             >
 128+ 6A9A             >
 128+ 6A9A             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E438             >
 128+ E438             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E438             >Latest_Definition defl  Heap_Ptr
 128+ E438             >
 128+ E438             >                // dummy db directives used to calculate length of namec
 128+ E438 42 2F 53 43 >                db      "B/SCR"
 128+ E43C 52          >
 128+ E43D             >len_NFA         defl    $ - temp_NFA
 128+ E43D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E438             >
 128+ E438 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E439 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43D 52          >
 128+ E43E             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43D D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E43E             >
 128+ E43E 2E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E440             >Prev_Ptr        defl    Heap_Ptr
 128+ E440             >
 128+ E440             >mirror_Ptr      defl    $
 128+ E440             >
 128+ E440 9C 6A       >                dw      Dict_Ptr + 2        // xt
 128+ E442             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E442             >
 128+ E442             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E442             >
 128+ E442             >//              ______________________________________________________________________
 128+ E442             >//              Dictionary part
 128+ E442             >
 128+ E442             >                org     Dict_Ptr
 128+ 6A9A             >
 128+ 6A9A 40 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 6A9C             >
 128+ 6A9C             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6A9C CD 38 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6A9F             >
 128+ 6A9F             >
 128+ 6A9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6A9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6A9F             >
 128+ 6A9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6A9F 02 00       >                dw      2
 129+ 6AA1                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 6AA1             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 6AA1             >
 129+ 6AA1             >Dict_Ptr        defl    $
 129+ 6AA1             >
 129+ 6AA1             >//              ______________________________________________________________________
 129+ 6AA1             >//              Heap part
 129+ 6AA1             >
 129+ 6AA1             >
 129+ 6AA1             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E442             >
 129+ E442             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E442             >Latest_Definition defl  Heap_Ptr
 129+ E442             >
 129+ E442             >                // dummy db directives used to calculate length of namec
 129+ E442 4C 2F 53 43 >                db      "L/SCR"
 129+ E446 52          >
 129+ E447             >len_NFA         defl    $ - temp_NFA
 129+ E447             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E442             >
 129+ E442 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E443 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E447 52          >
 129+ E448             >                org     $-1                 // alter last byte of Name just above to set
 129+ E447 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E448             >
 129+ E448 38 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E44A             >Prev_Ptr        defl    Heap_Ptr
 129+ E44A             >
 129+ E44A             >mirror_Ptr      defl    $
 129+ E44A             >
 129+ E44A A3 6A       >                dw      Dict_Ptr + 2        // xt
 129+ E44C             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44C             >
 129+ E44C             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44C             >
 129+ E44C             >//              ______________________________________________________________________
 129+ E44C             >//              Dictionary part
 129+ E44C             >
 129+ E44C             >                org     Dict_Ptr
 129+ 6AA1             >
 129+ 6AA1 4A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 6AA3             >
 129+ 6AA3             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 6AA3 CD 38 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 6AA6             >
 129+ 6AA6             >
 129+ 6AA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 6AA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 6AA6             >
 129+ 6AA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 6AA6 10 00       >                dw      16
 130+ 6AA8
 131+ 6AA8              //  ______________________________________________________________________
 132+ 6AA8              //
 133+ 6AA8              // +origin         --
 134+ 6AA8              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 6AA8              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 6AA8              //              dw      PLUS                    // +
 137+ 6AA8              //              dw      EXIT                    // ;
 138+ 6AA8                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 6AA8             >
 138+ 6AA8             >Dict_Ptr        defl    $
 138+ 6AA8             >
 138+ 6AA8             >//              ______________________________________________________________________
 138+ 6AA8             >//              Heap part
 138+ 6AA8             >
 138+ 6AA8             >
 138+ 6AA8             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44C             >
 138+ E44C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44C             >Latest_Definition defl  Heap_Ptr
 138+ E44C             >
 138+ E44C             >                // dummy db directives used to calculate length of namec
 138+ E44C 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E450 47 49 4E    >
 138+ E453             >len_NFA         defl    $ - temp_NFA
 138+ E453             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44C             >
 138+ E44C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44D 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E451 47 49 4E    >
 138+ E454             >                org     $-1                 // alter last byte of Name just above to set
 138+ E453 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E454             >
 138+ E454 42 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E456             >Prev_Ptr        defl    Heap_Ptr
 138+ E456             >
 138+ E456             >mirror_Ptr      defl    $
 138+ E456             >
 138+ E456 AA 6A       >                dw      Dict_Ptr + 2        // xt
 138+ E458             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E458             >
 138+ E458             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E458             >
 138+ E458             >//              ______________________________________________________________________
 138+ E458             >//              Dictionary part
 138+ E458             >
 138+ E458             >                org     Dict_Ptr
 138+ 6AA8             >
 138+ 6AA8 56 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 6AAA             >
 138+ 6AAA             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6AAA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 6AAA ~           >
 138+ 6AAA ~           >
 138+ 6AAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 6AAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 6AAA             >
 138+ 6AAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6AAA D9                           exx
 140+ 6AAB E1                           pop     hl
 141+ 6AAC 11 66 63                     ld      de, Cold_origin
 142+ 6AAF 19                           add     hl, de
 143+ 6AB0 E5                           push    hl
 144+ 6AB1 D9                           exx
 145+ 6AB2                              next
 145+ 6AB2 DD E9       >                jp      (ix)
 146+ 6AB4
 147+ 6AB4
 148+ 6AB4              //  ______________________________________________________________________
 149+ 6AB4              //
 150+ 6AB4                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 6AB4             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 6AB4             >
 150+ 6AB4             >Dict_Ptr        defl    $
 150+ 6AB4             >
 150+ 6AB4             >//              ______________________________________________________________________
 150+ 6AB4             >//              Heap part
 150+ 6AB4             >
 150+ 6AB4             >
 150+ 6AB4             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E458             >
 150+ E458             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E458             >Latest_Definition defl  Heap_Ptr
 150+ E458             >
 150+ E458             >                // dummy db directives used to calculate length of namec
 150+ E458 28 4E 45 58 >                db      "(NEXT)"
 150+ E45C 54 29       >
 150+ E45E             >len_NFA         defl    $ - temp_NFA
 150+ E45E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E458             >
 150+ E458 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E459 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45D 54 29       >
 150+ E45F             >                org     $-1                 // alter last byte of Name just above to set
 150+ E45E A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E45F             >
 150+ E45F 4C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E461             >Prev_Ptr        defl    Heap_Ptr
 150+ E461             >
 150+ E461             >mirror_Ptr      defl    $
 150+ E461             >
 150+ E461 B6 6A       >                dw      Dict_Ptr + 2        // xt
 150+ E463             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E463             >
 150+ E463             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E463             >
 150+ E463             >//              ______________________________________________________________________
 150+ E463             >//              Dictionary part
 150+ E463             >
 150+ E463             >                org     Dict_Ptr
 150+ 6AB4             >
 150+ 6AB4 61 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 6AB6             >
 150+ 6AB6             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6AB6 CD 38 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 6AB9             >
 150+ 6AB9             >
 150+ 6AB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6AB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6AB9             >
 150+ 6AB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6AB9 9A 63       >                dw      Next_Ptr
 151+ 6ABB
 152+ 6ABB              //  ______________________________________________________________________
 153+ 6ABB              //
 154+ 6ABB
 155+ 6ABB                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 6ABB             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 6ABB             >
 155+ 6ABB             >Dict_Ptr        defl    $
 155+ 6ABB             >
 155+ 6ABB             >//              ______________________________________________________________________
 155+ 6ABB             >//              Heap part
 155+ 6ABB             >
 155+ 6ABB             >
 155+ 6ABB             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E463             >
 155+ E463             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E463             >Latest_Definition defl  Heap_Ptr
 155+ E463             >
 155+ E463             >                // dummy db directives used to calculate length of namec
 155+ E463 53 30       >                db      "S0"
 155+ E465             >len_NFA         defl    $ - temp_NFA
 155+ E465             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E463             >
 155+ E463 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E464 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E466             >                org     $-1                 // alter last byte of Name just above to set
 155+ E465 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E466             >
 155+ E466 58 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E468             >Prev_Ptr        defl    Heap_Ptr
 155+ E468             >
 155+ E468             >mirror_Ptr      defl    $
 155+ E468             >
 155+ E468 BD 6A       >                dw      Dict_Ptr + 2        // xt
 155+ E46A             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E46A             >
 155+ E46A             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E46A             >
 155+ E46A             >//              ______________________________________________________________________
 155+ E46A             >//              Dictionary part
 155+ E46A             >
 155+ E46A             >                org     Dict_Ptr
 155+ 6ABB             >
 155+ 6ABB 68 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 6ABD             >
 155+ 6ABD             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6ABD CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6AC0             >
 155+ 6AC0             >
 155+ 6AC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6AC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6AC0             >
 155+ 6AC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6AC0 06          >                db      06
 156+ 6AC1                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 6AC1             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 6AC1             >
 156+ 6AC1             >Dict_Ptr        defl    $
 156+ 6AC1             >
 156+ 6AC1             >//              ______________________________________________________________________
 156+ 6AC1             >//              Heap part
 156+ 6AC1             >
 156+ 6AC1             >
 156+ 6AC1             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E46A             >
 156+ E46A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E46A             >Latest_Definition defl  Heap_Ptr
 156+ E46A             >
 156+ E46A             >                // dummy db directives used to calculate length of namec
 156+ E46A 52 30       >                db      "R0"
 156+ E46C             >len_NFA         defl    $ - temp_NFA
 156+ E46C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E46A             >
 156+ E46A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46B 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46D             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46C B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46D             >
 156+ E46D 63 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E46F             >Prev_Ptr        defl    Heap_Ptr
 156+ E46F             >
 156+ E46F             >mirror_Ptr      defl    $
 156+ E46F             >
 156+ E46F C3 6A       >                dw      Dict_Ptr + 2        // xt
 156+ E471             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E471             >
 156+ E471             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E471             >
 156+ E471             >//              ______________________________________________________________________
 156+ E471             >//              Dictionary part
 156+ E471             >
 156+ E471             >                org     Dict_Ptr
 156+ 6AC1             >
 156+ 6AC1 6F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 6AC3             >
 156+ 6AC3             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6AC3 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6AC6             >
 156+ 6AC6             >
 156+ 6AC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6AC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6AC6             >
 156+ 6AC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6AC6 08          >                db      08
 157+ 6AC7                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 6AC7             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 6AC7             >
 157+ 6AC7             >Dict_Ptr        defl    $
 157+ 6AC7             >
 157+ 6AC7             >//              ______________________________________________________________________
 157+ 6AC7             >//              Heap part
 157+ 6AC7             >
 157+ 6AC7             >
 157+ 6AC7             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E471             >
 157+ E471             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E471             >Latest_Definition defl  Heap_Ptr
 157+ E471             >
 157+ E471             >                // dummy db directives used to calculate length of namec
 157+ E471 54 49 42    >                db      "TIB"
 157+ E474             >len_NFA         defl    $ - temp_NFA
 157+ E474             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E471             >
 157+ E471 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E472 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E475             >                org     $-1                 // alter last byte of Name just above to set
 157+ E474 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E475             >
 157+ E475 6A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E477             >Prev_Ptr        defl    Heap_Ptr
 157+ E477             >
 157+ E477             >mirror_Ptr      defl    $
 157+ E477             >
 157+ E477 C9 6A       >                dw      Dict_Ptr + 2        // xt
 157+ E479             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E479             >
 157+ E479             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E479             >
 157+ E479             >//              ______________________________________________________________________
 157+ E479             >//              Dictionary part
 157+ E479             >
 157+ E479             >                org     Dict_Ptr
 157+ 6AC7             >
 157+ 6AC7 77 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 6AC9             >
 157+ 6AC9             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6AC9 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6ACC             >
 157+ 6ACC             >
 157+ 6ACC             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6ACC             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6ACC             >
 157+ 6ACC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6ACC 0A          >                db      10
 158+ 6ACD                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 6ACD             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 6ACD             >
 158+ 6ACD             >Dict_Ptr        defl    $
 158+ 6ACD             >
 158+ 6ACD             >//              ______________________________________________________________________
 158+ 6ACD             >//              Heap part
 158+ 6ACD             >
 158+ 6ACD             >
 158+ 6ACD             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E479             >
 158+ E479             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E479             >Latest_Definition defl  Heap_Ptr
 158+ E479             >
 158+ E479             >                // dummy db directives used to calculate length of namec
 158+ E479 57 49 44 54 >                db      "WIDTH"
 158+ E47D 48          >
 158+ E47E             >len_NFA         defl    $ - temp_NFA
 158+ E47E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E479             >
 158+ E479 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E47A 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E47E 48          >
 158+ E47F             >                org     $-1                 // alter last byte of Name just above to set
 158+ E47E C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E47F             >
 158+ E47F 71 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E481             >Prev_Ptr        defl    Heap_Ptr
 158+ E481             >
 158+ E481             >mirror_Ptr      defl    $
 158+ E481             >
 158+ E481 CF 6A       >                dw      Dict_Ptr + 2        // xt
 158+ E483             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E483             >
 158+ E483             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E483             >
 158+ E483             >//              ______________________________________________________________________
 158+ E483             >//              Dictionary part
 158+ E483             >
 158+ E483             >                org     Dict_Ptr
 158+ 6ACD             >
 158+ 6ACD 81 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 6ACF             >
 158+ 6ACF             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6ACF CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6AD2             >
 158+ 6AD2             >
 158+ 6AD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6AD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6AD2             >
 158+ 6AD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6AD2 0C          >                db      12
 159+ 6AD3                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 6AD3             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 6AD3             >
 159+ 6AD3             >Dict_Ptr        defl    $
 159+ 6AD3             >
 159+ 6AD3             >//              ______________________________________________________________________
 159+ 6AD3             >//              Heap part
 159+ 6AD3             >
 159+ 6AD3             >
 159+ 6AD3             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E483             >
 159+ E483             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E483             >Latest_Definition defl  Heap_Ptr
 159+ E483             >
 159+ E483             >                // dummy db directives used to calculate length of namec
 159+ E483 57 41 52 4E >                db      "WARNING"
 159+ E487 49 4E 47    >
 159+ E48A             >len_NFA         defl    $ - temp_NFA
 159+ E48A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E483             >
 159+ E483 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E484 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E488 49 4E 47    >
 159+ E48B             >                org     $-1                 // alter last byte of Name just above to set
 159+ E48A C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48B             >
 159+ E48B 79 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48D             >Prev_Ptr        defl    Heap_Ptr
 159+ E48D             >
 159+ E48D             >mirror_Ptr      defl    $
 159+ E48D             >
 159+ E48D D5 6A       >                dw      Dict_Ptr + 2        // xt
 159+ E48F             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E48F             >
 159+ E48F             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E48F             >
 159+ E48F             >//              ______________________________________________________________________
 159+ E48F             >//              Dictionary part
 159+ E48F             >
 159+ E48F             >                org     Dict_Ptr
 159+ 6AD3             >
 159+ 6AD3 8D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 6AD5             >
 159+ 6AD5             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6AD5 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6AD8             >
 159+ 6AD8             >
 159+ 6AD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6AD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6AD8             >
 159+ 6AD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6AD8 0E          >                db      14
 160+ 6AD9                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 6AD9             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 6AD9             >
 160+ 6AD9             >Dict_Ptr        defl    $
 160+ 6AD9             >
 160+ 6AD9             >//              ______________________________________________________________________
 160+ 6AD9             >//              Heap part
 160+ 6AD9             >
 160+ 6AD9             >
 160+ 6AD9             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E48F             >
 160+ E48F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E48F             >Latest_Definition defl  Heap_Ptr
 160+ E48F             >
 160+ E48F             >                // dummy db directives used to calculate length of namec
 160+ E48F 46 45 4E 43 >                db      "FENCE"
 160+ E493 45          >
 160+ E494             >len_NFA         defl    $ - temp_NFA
 160+ E494             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E48F             >
 160+ E48F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E490 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E494 45          >
 160+ E495             >                org     $-1                 // alter last byte of Name just above to set
 160+ E494 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E495             >
 160+ E495 83 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E497             >Prev_Ptr        defl    Heap_Ptr
 160+ E497             >
 160+ E497             >mirror_Ptr      defl    $
 160+ E497             >
 160+ E497 DB 6A       >                dw      Dict_Ptr + 2        // xt
 160+ E499             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E499             >
 160+ E499             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E499             >
 160+ E499             >//              ______________________________________________________________________
 160+ E499             >//              Dictionary part
 160+ E499             >
 160+ E499             >                org     Dict_Ptr
 160+ 6AD9             >
 160+ 6AD9 97 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 6ADB             >
 160+ 6ADB             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6ADB CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6ADE             >
 160+ 6ADE             >
 160+ 6ADE             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6ADE             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6ADE             >
 160+ 6ADE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6ADE 10          >                db      16
 161+ 6ADF                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 6ADF             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 6ADF             >
 161+ 6ADF             >Dict_Ptr        defl    $
 161+ 6ADF             >
 161+ 6ADF             >//              ______________________________________________________________________
 161+ 6ADF             >//              Heap part
 161+ 6ADF             >
 161+ 6ADF             >
 161+ 6ADF             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E499             >
 161+ E499             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E499             >Latest_Definition defl  Heap_Ptr
 161+ E499             >
 161+ E499             >                // dummy db directives used to calculate length of namec
 161+ E499 44 50       >                db      "DP"
 161+ E49B             >len_NFA         defl    $ - temp_NFA
 161+ E49B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E499             >
 161+ E499 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E49A 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49C             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49B D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49C             >
 161+ E49C 8F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E49E             >Prev_Ptr        defl    Heap_Ptr
 161+ E49E             >
 161+ E49E             >mirror_Ptr      defl    $
 161+ E49E             >
 161+ E49E E1 6A       >                dw      Dict_Ptr + 2        // xt
 161+ E4A0             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E4A0             >
 161+ E4A0             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E4A0             >
 161+ E4A0             >//              ______________________________________________________________________
 161+ E4A0             >//              Dictionary part
 161+ E4A0             >
 161+ E4A0             >                org     Dict_Ptr
 161+ 6ADF             >
 161+ 6ADF 9E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 6AE1             >
 161+ 6AE1             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6AE1 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6AE4             >
 161+ 6AE4             >
 161+ 6AE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6AE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6AE4             >
 161+ 6AE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6AE4 12          >                db      18
 162+ 6AE5                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 6AE5             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 6AE5             >
 162+ 6AE5             >Dict_Ptr        defl    $
 162+ 6AE5             >
 162+ 6AE5             >//              ______________________________________________________________________
 162+ 6AE5             >//              Heap part
 162+ 6AE5             >
 162+ 6AE5             >
 162+ 6AE5             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E4A0             >
 162+ E4A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E4A0             >Latest_Definition defl  Heap_Ptr
 162+ E4A0             >
 162+ E4A0             >                // dummy db directives used to calculate length of namec
 162+ E4A0 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A4 4C 49 4E 4B >
 162+ E4A8             >len_NFA         defl    $ - temp_NFA
 162+ E4A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E4A0             >
 162+ E4A0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A1 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A5 4C 49 4E 4B >
 162+ E4A9             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4A8 CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4A9             >
 162+ E4A9 99 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AB             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AB             >
 162+ E4AB             >mirror_Ptr      defl    $
 162+ E4AB             >
 162+ E4AB E7 6A       >                dw      Dict_Ptr + 2        // xt
 162+ E4AD             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AD             >
 162+ E4AD             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AD             >
 162+ E4AD             >//              ______________________________________________________________________
 162+ E4AD             >//              Dictionary part
 162+ E4AD             >
 162+ E4AD             >                org     Dict_Ptr
 162+ 6AE5             >
 162+ 6AE5 AB 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6AE7             >
 162+ 6AE7             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6AE7 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6AEA             >
 162+ 6AEA             >
 162+ 6AEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6AEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6AEA             >
 162+ 6AEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6AEA 14          >                db      20
 163+ 6AEB                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 6AEB             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 6AEB             >
 163+ 6AEB             >Dict_Ptr        defl    $
 163+ 6AEB             >
 163+ 6AEB             >//              ______________________________________________________________________
 163+ 6AEB             >//              Heap part
 163+ 6AEB             >
 163+ 6AEB             >
 163+ 6AEB             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AD             >
 163+ E4AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AD             >Latest_Definition defl  Heap_Ptr
 163+ E4AD             >
 163+ E4AD             >                // dummy db directives used to calculate length of namec
 163+ E4AD 46 49 52 53 >                db      "FIRST"
 163+ E4B1 54          >
 163+ E4B2             >len_NFA         defl    $ - temp_NFA
 163+ E4B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AD             >
 163+ E4AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4AE 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B2 54          >
 163+ E4B3             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B2 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B3             >
 163+ E4B3 A0 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B5             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B5             >
 163+ E4B5             >mirror_Ptr      defl    $
 163+ E4B5             >
 163+ E4B5 ED 6A       >                dw      Dict_Ptr + 2        // xt
 163+ E4B7             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B7             >
 163+ E4B7             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B7             >
 163+ E4B7             >//              ______________________________________________________________________
 163+ E4B7             >//              Dictionary part
 163+ E4B7             >
 163+ E4B7             >                org     Dict_Ptr
 163+ 6AEB             >
 163+ 6AEB B5 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 6AED             >
 163+ 6AED             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6AED CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6AF0             >
 163+ 6AF0             >
 163+ 6AF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6AF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6AF0             >
 163+ 6AF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6AF0 16          >                db      22
 164+ 6AF1                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 6AF1             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 6AF1             >
 164+ 6AF1             >Dict_Ptr        defl    $
 164+ 6AF1             >
 164+ 6AF1             >//              ______________________________________________________________________
 164+ 6AF1             >//              Heap part
 164+ 6AF1             >
 164+ 6AF1             >
 164+ 6AF1             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B7             >
 164+ E4B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B7             >Latest_Definition defl  Heap_Ptr
 164+ E4B7             >
 164+ E4B7             >                // dummy db directives used to calculate length of namec
 164+ E4B7 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BB 54          >
 164+ E4BC             >len_NFA         defl    $ - temp_NFA
 164+ E4BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B7             >
 164+ E4B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4B8 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BC 54          >
 164+ E4BD             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BC D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BD             >
 164+ E4BD AD 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4BF             >Prev_Ptr        defl    Heap_Ptr
 164+ E4BF             >
 164+ E4BF             >mirror_Ptr      defl    $
 164+ E4BF             >
 164+ E4BF F3 6A       >                dw      Dict_Ptr + 2        // xt
 164+ E4C1             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C1             >
 164+ E4C1             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C1             >
 164+ E4C1             >//              ______________________________________________________________________
 164+ E4C1             >//              Dictionary part
 164+ E4C1             >
 164+ E4C1             >                org     Dict_Ptr
 164+ 6AF1             >
 164+ 6AF1 BF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 6AF3             >
 164+ 6AF3             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6AF3 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6AF6             >
 164+ 6AF6             >
 164+ 6AF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6AF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6AF6             >
 164+ 6AF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6AF6 18          >                db      24
 165+ 6AF7                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 6AF7             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 6AF7             >
 165+ 6AF7             >Dict_Ptr        defl    $
 165+ 6AF7             >
 165+ 6AF7             >//              ______________________________________________________________________
 165+ 6AF7             >//              Heap part
 165+ 6AF7             >
 165+ 6AF7             >
 165+ 6AF7             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C1             >
 165+ E4C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C1             >Latest_Definition defl  Heap_Ptr
 165+ E4C1             >
 165+ E4C1             >                // dummy db directives used to calculate length of namec
 165+ E4C1 48 50       >                db      "HP"
 165+ E4C3             >len_NFA         defl    $ - temp_NFA
 165+ E4C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C1             >
 165+ E4C1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C2 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C4             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C3 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C4             >
 165+ E4C4 B7 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C6             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C6             >
 165+ E4C6             >mirror_Ptr      defl    $
 165+ E4C6             >
 165+ E4C6 F9 6A       >                dw      Dict_Ptr + 2        // xt
 165+ E4C8             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4C8             >
 165+ E4C8             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4C8             >
 165+ E4C8             >//              ______________________________________________________________________
 165+ E4C8             >//              Dictionary part
 165+ E4C8             >
 165+ E4C8             >                org     Dict_Ptr
 165+ 6AF7             >
 165+ 6AF7 C6 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 6AF9             >
 165+ 6AF9             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6AF9 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6AFC             >
 165+ 6AFC             >
 165+ 6AFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6AFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6AFC             >
 165+ 6AFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6AFC 1A          >                db      26
 166+ 6AFD                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 6AFD             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 6AFD             >
 166+ 6AFD             >Dict_Ptr        defl    $
 166+ 6AFD             >
 166+ 6AFD             >//              ______________________________________________________________________
 166+ 6AFD             >//              Heap part
 166+ 6AFD             >
 166+ 6AFD             >
 166+ 6AFD             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4C8             >
 166+ E4C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4C8             >Latest_Definition defl  Heap_Ptr
 166+ E4C8             >
 166+ E4C8             >                // dummy db directives used to calculate length of namec
 166+ E4C8 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CC 45          >
 166+ E4CD             >len_NFA         defl    $ - temp_NFA
 166+ E4CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4C8             >
 166+ E4C8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4C9 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CD 45          >
 166+ E4CE             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CD C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4CE             >
 166+ E4CE C1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4D0             >Prev_Ptr        defl    Heap_Ptr
 166+ E4D0             >
 166+ E4D0             >mirror_Ptr      defl    $
 166+ E4D0             >
 166+ E4D0 FF 6A       >                dw      Dict_Ptr + 2        // xt
 166+ E4D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D2             >
 166+ E4D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D2             >
 166+ E4D2             >//              ______________________________________________________________________
 166+ E4D2             >//              Dictionary part
 166+ E4D2             >
 166+ E4D2             >                org     Dict_Ptr
 166+ 6AFD             >
 166+ 6AFD D0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 6AFF             >
 166+ 6AFF             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6AFF CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6B02             >
 166+ 6B02             >
 166+ 6B02             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6B02             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6B02             >
 166+ 6B02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6B02 1C          >                db      28
 167+ 6B03                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 6B03             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 6B03             >
 167+ 6B03             >Dict_Ptr        defl    $
 167+ 6B03             >
 167+ 6B03             >//              ______________________________________________________________________
 167+ 6B03             >//              Heap part
 167+ 6B03             >
 167+ 6B03             >
 167+ 6B03             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D2             >
 167+ E4D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D2             >Latest_Definition defl  Heap_Ptr
 167+ E4D2             >
 167+ E4D2             >                // dummy db directives used to calculate length of namec
 167+ E4D2 42 4C 4B    >                db      "BLK"
 167+ E4D5             >len_NFA         defl    $ - temp_NFA
 167+ E4D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D2             >
 167+ E4D2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D3 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D6             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D5 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D6             >
 167+ E4D6 C8 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4D8             >Prev_Ptr        defl    Heap_Ptr
 167+ E4D8             >
 167+ E4D8             >mirror_Ptr      defl    $
 167+ E4D8             >
 167+ E4D8 05 6B       >                dw      Dict_Ptr + 2        // xt
 167+ E4DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4DA             >
 167+ E4DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4DA             >
 167+ E4DA             >//              ______________________________________________________________________
 167+ E4DA             >//              Dictionary part
 167+ E4DA             >
 167+ E4DA             >                org     Dict_Ptr
 167+ 6B03             >
 167+ 6B03 D8 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 6B05             >
 167+ 6B05             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6B05 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6B08             >
 167+ 6B08             >
 167+ 6B08             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6B08             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6B08             >
 167+ 6B08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6B08 1E          >                db      30
 168+ 6B09                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 6B09             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 6B09             >
 168+ 6B09             >Dict_Ptr        defl    $
 168+ 6B09             >
 168+ 6B09             >//              ______________________________________________________________________
 168+ 6B09             >//              Heap part
 168+ 6B09             >
 168+ 6B09             >
 168+ 6B09             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4DA             >
 168+ E4DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4DA             >Latest_Definition defl  Heap_Ptr
 168+ E4DA             >
 168+ E4DA             >                // dummy db directives used to calculate length of namec
 168+ E4DA 3E 49 4E    >                db      ">IN"
 168+ E4DD             >len_NFA         defl    $ - temp_NFA
 168+ E4DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4DA             >
 168+ E4DA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DB 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4DE             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DD CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4DE             >
 168+ E4DE D2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4E0             >Prev_Ptr        defl    Heap_Ptr
 168+ E4E0             >
 168+ E4E0             >mirror_Ptr      defl    $
 168+ E4E0             >
 168+ E4E0 0B 6B       >                dw      Dict_Ptr + 2        // xt
 168+ E4E2             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E2             >
 168+ E4E2             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E2             >
 168+ E4E2             >//              ______________________________________________________________________
 168+ E4E2             >//              Dictionary part
 168+ E4E2             >
 168+ E4E2             >                org     Dict_Ptr
 168+ 6B09             >
 168+ 6B09 E0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 6B0B             >
 168+ 6B0B             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6B0B CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6B0E             >
 168+ 6B0E             >
 168+ 6B0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6B0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6B0E             >
 168+ 6B0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6B0E 20          >                db      32
 169+ 6B0F                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 6B0F             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 6B0F             >
 169+ 6B0F             >Dict_Ptr        defl    $
 169+ 6B0F             >
 169+ 6B0F             >//              ______________________________________________________________________
 169+ 6B0F             >//              Heap part
 169+ 6B0F             >
 169+ 6B0F             >
 169+ 6B0F             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E2             >
 169+ E4E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E2             >Latest_Definition defl  Heap_Ptr
 169+ E4E2             >
 169+ E4E2             >                // dummy db directives used to calculate length of namec
 169+ E4E2 4F 55 54    >                db      "OUT"
 169+ E4E5             >len_NFA         defl    $ - temp_NFA
 169+ E4E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E2             >
 169+ E4E2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E3 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E6             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E5 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E6             >
 169+ E4E6 DA 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4E8             >Prev_Ptr        defl    Heap_Ptr
 169+ E4E8             >
 169+ E4E8             >mirror_Ptr      defl    $
 169+ E4E8             >
 169+ E4E8 11 6B       >                dw      Dict_Ptr + 2        // xt
 169+ E4EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4EA             >
 169+ E4EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4EA             >
 169+ E4EA             >//              ______________________________________________________________________
 169+ E4EA             >//              Dictionary part
 169+ E4EA             >
 169+ E4EA             >                org     Dict_Ptr
 169+ 6B0F             >
 169+ 6B0F E8 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 6B11             >
 169+ 6B11             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6B11 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6B14             >
 169+ 6B14             >
 169+ 6B14             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6B14             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6B14             >
 169+ 6B14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6B14 22          >                db      34
 170+ 6B15                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 6B15             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 6B15             >
 170+ 6B15             >Dict_Ptr        defl    $
 170+ 6B15             >
 170+ 6B15             >//              ______________________________________________________________________
 170+ 6B15             >//              Heap part
 170+ 6B15             >
 170+ 6B15             >
 170+ 6B15             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4EA             >
 170+ E4EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4EA             >Latest_Definition defl  Heap_Ptr
 170+ E4EA             >
 170+ E4EA             >                // dummy db directives used to calculate length of namec
 170+ E4EA 53 43 52    >                db      "SCR"
 170+ E4ED             >len_NFA         defl    $ - temp_NFA
 170+ E4ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4EA             >
 170+ E4EA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4EB 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4EE             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4ED D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4EE             >
 170+ E4EE E2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4F0             >Prev_Ptr        defl    Heap_Ptr
 170+ E4F0             >
 170+ E4F0             >mirror_Ptr      defl    $
 170+ E4F0             >
 170+ E4F0 17 6B       >                dw      Dict_Ptr + 2        // xt
 170+ E4F2             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F2             >
 170+ E4F2             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F2             >
 170+ E4F2             >//              ______________________________________________________________________
 170+ E4F2             >//              Dictionary part
 170+ E4F2             >
 170+ E4F2             >                org     Dict_Ptr
 170+ 6B15             >
 170+ 6B15 F0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 6B17             >
 170+ 6B17             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6B17 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6B1A             >
 170+ 6B1A             >
 170+ 6B1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6B1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6B1A             >
 170+ 6B1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6B1A 24          >                db      36
 171+ 6B1B                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 6B1B             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 6B1B             >
 171+ 6B1B             >Dict_Ptr        defl    $
 171+ 6B1B             >
 171+ 6B1B             >//              ______________________________________________________________________
 171+ 6B1B             >//              Heap part
 171+ 6B1B             >
 171+ 6B1B             >
 171+ 6B1B             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F2             >
 171+ E4F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F2             >Latest_Definition defl  Heap_Ptr
 171+ E4F2             >
 171+ E4F2             >                // dummy db directives used to calculate length of namec
 171+ E4F2 4F 46 46 53 >                db      "OFFSET"
 171+ E4F6 45 54       >
 171+ E4F8             >len_NFA         defl    $ - temp_NFA
 171+ E4F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F2             >
 171+ E4F2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F3 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F7 45 54       >
 171+ E4F9             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4F8 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4F9             >
 171+ E4F9 EA 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FB             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FB             >
 171+ E4FB             >mirror_Ptr      defl    $
 171+ E4FB             >
 171+ E4FB 1D 6B       >                dw      Dict_Ptr + 2        // xt
 171+ E4FD             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FD             >
 171+ E4FD             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FD             >
 171+ E4FD             >//              ______________________________________________________________________
 171+ E4FD             >//              Dictionary part
 171+ E4FD             >
 171+ E4FD             >                org     Dict_Ptr
 171+ 6B1B             >
 171+ 6B1B FB 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 6B1D             >
 171+ 6B1D             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6B1D CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6B20             >
 171+ 6B20             >
 171+ 6B20             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6B20             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6B20             >
 171+ 6B20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6B20 26          >                db      38
 172+ 6B21                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 6B21             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 6B21             >
 172+ 6B21             >Dict_Ptr        defl    $
 172+ 6B21             >
 172+ 6B21             >//              ______________________________________________________________________
 172+ 6B21             >//              Heap part
 172+ 6B21             >
 172+ 6B21             >
 172+ 6B21             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FD             >
 172+ E4FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FD             >Latest_Definition defl  Heap_Ptr
 172+ E4FD             >
 172+ E4FD             >                // dummy db directives used to calculate length of namec
 172+ E4FD 43 4F 4E 54 >                db      "CONTEXT"
 172+ E501 45 58 54    >
 172+ E504             >len_NFA         defl    $ - temp_NFA
 172+ E504             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FD             >
 172+ E4FD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E4FE 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E502 45 58 54    >
 172+ E505             >                org     $-1                 // alter last byte of Name just above to set
 172+ E504 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E505             >
 172+ E505 F2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E507             >Prev_Ptr        defl    Heap_Ptr
 172+ E507             >
 172+ E507             >mirror_Ptr      defl    $
 172+ E507             >
 172+ E507 23 6B       >                dw      Dict_Ptr + 2        // xt
 172+ E509             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E509             >
 172+ E509             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E509             >
 172+ E509             >//              ______________________________________________________________________
 172+ E509             >//              Dictionary part
 172+ E509             >
 172+ E509             >                org     Dict_Ptr
 172+ 6B21             >
 172+ 6B21 07 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 6B23             >
 172+ 6B23             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6B23 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6B26             >
 172+ 6B26             >
 172+ 6B26             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6B26             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6B26             >
 172+ 6B26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6B26 28          >                db      40
 173+ 6B27                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 6B27             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 6B27             >
 173+ 6B27             >Dict_Ptr        defl    $
 173+ 6B27             >
 173+ 6B27             >//              ______________________________________________________________________
 173+ 6B27             >//              Heap part
 173+ 6B27             >
 173+ 6B27             >
 173+ 6B27             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E509             >
 173+ E509             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E509             >Latest_Definition defl  Heap_Ptr
 173+ E509             >
 173+ E509             >                // dummy db directives used to calculate length of namec
 173+ E509 43 55 52 52 >                db      "CURRENT"
 173+ E50D 45 4E 54    >
 173+ E510             >len_NFA         defl    $ - temp_NFA
 173+ E510             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E509             >
 173+ E509 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E50A 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E50E 45 4E 54    >
 173+ E511             >                org     $-1                 // alter last byte of Name just above to set
 173+ E510 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E511             >
 173+ E511 FD 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E513             >Prev_Ptr        defl    Heap_Ptr
 173+ E513             >
 173+ E513             >mirror_Ptr      defl    $
 173+ E513             >
 173+ E513 29 6B       >                dw      Dict_Ptr + 2        // xt
 173+ E515             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E515             >
 173+ E515             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E515             >
 173+ E515             >//              ______________________________________________________________________
 173+ E515             >//              Dictionary part
 173+ E515             >
 173+ E515             >                org     Dict_Ptr
 173+ 6B27             >
 173+ 6B27 13 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 6B29             >
 173+ 6B29             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6B29 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6B2C             >
 173+ 6B2C             >
 173+ 6B2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6B2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6B2C             >
 173+ 6B2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6B2C 2A          >                db      42
 174+ 6B2D                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 6B2D             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 6B2D             >
 174+ 6B2D             >Dict_Ptr        defl    $
 174+ 6B2D             >
 174+ 6B2D             >//              ______________________________________________________________________
 174+ 6B2D             >//              Heap part
 174+ 6B2D             >
 174+ 6B2D             >
 174+ 6B2D             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E515             >
 174+ E515             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E515             >Latest_Definition defl  Heap_Ptr
 174+ E515             >
 174+ E515             >                // dummy db directives used to calculate length of namec
 174+ E515 53 54 41 54 >                db      "STATE"
 174+ E519 45          >
 174+ E51A             >len_NFA         defl    $ - temp_NFA
 174+ E51A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E515             >
 174+ E515 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E516 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E51A 45          >
 174+ E51B             >                org     $-1                 // alter last byte of Name just above to set
 174+ E51A C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51B             >
 174+ E51B 09 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51D             >Prev_Ptr        defl    Heap_Ptr
 174+ E51D             >
 174+ E51D             >mirror_Ptr      defl    $
 174+ E51D             >
 174+ E51D 2F 6B       >                dw      Dict_Ptr + 2        // xt
 174+ E51F             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E51F             >
 174+ E51F             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E51F             >
 174+ E51F             >//              ______________________________________________________________________
 174+ E51F             >//              Dictionary part
 174+ E51F             >
 174+ E51F             >                org     Dict_Ptr
 174+ 6B2D             >
 174+ 6B2D 1D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 6B2F             >
 174+ 6B2F             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6B2F CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6B32             >
 174+ 6B32             >
 174+ 6B32             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6B32             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6B32             >
 174+ 6B32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6B32 2C          >                db      44
 175+ 6B33                              User_Def BASE       , "BASE"      , 46 //
 175+ 6B33             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 6B33             >
 175+ 6B33             >Dict_Ptr        defl    $
 175+ 6B33             >
 175+ 6B33             >//              ______________________________________________________________________
 175+ 6B33             >//              Heap part
 175+ 6B33             >
 175+ 6B33             >
 175+ 6B33             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E51F             >
 175+ E51F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E51F             >Latest_Definition defl  Heap_Ptr
 175+ E51F             >
 175+ E51F             >                // dummy db directives used to calculate length of namec
 175+ E51F 42 41 53 45 >                db      "BASE"
 175+ E523             >len_NFA         defl    $ - temp_NFA
 175+ E523             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E51F             >
 175+ E51F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E520 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E524             >                org     $-1                 // alter last byte of Name just above to set
 175+ E523 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E524             >
 175+ E524 15 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E526             >Prev_Ptr        defl    Heap_Ptr
 175+ E526             >
 175+ E526             >mirror_Ptr      defl    $
 175+ E526             >
 175+ E526 35 6B       >                dw      Dict_Ptr + 2        // xt
 175+ E528             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E528             >
 175+ E528             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E528             >
 175+ E528             >//              ______________________________________________________________________
 175+ E528             >//              Dictionary part
 175+ E528             >
 175+ E528             >                org     Dict_Ptr
 175+ 6B33             >
 175+ 6B33 26 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 6B35             >
 175+ 6B35             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6B35 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6B38             >
 175+ 6B38             >
 175+ 6B38             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6B38             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6B38             >
 175+ 6B38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6B38 2E          >                db      46
 176+ 6B39                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 6B39             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 6B39             >
 176+ 6B39             >Dict_Ptr        defl    $
 176+ 6B39             >
 176+ 6B39             >//              ______________________________________________________________________
 176+ 6B39             >//              Heap part
 176+ 6B39             >
 176+ 6B39             >
 176+ 6B39             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E528             >
 176+ E528             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E528             >Latest_Definition defl  Heap_Ptr
 176+ E528             >
 176+ E528             >                // dummy db directives used to calculate length of namec
 176+ E528 44 50 4C    >                db      "DPL"
 176+ E52B             >len_NFA         defl    $ - temp_NFA
 176+ E52B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E528             >
 176+ E528 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E529 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52C             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52B CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52C             >
 176+ E52C 1F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E52E             >Prev_Ptr        defl    Heap_Ptr
 176+ E52E             >
 176+ E52E             >mirror_Ptr      defl    $
 176+ E52E             >
 176+ E52E 3B 6B       >                dw      Dict_Ptr + 2        // xt
 176+ E530             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E530             >
 176+ E530             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E530             >
 176+ E530             >//              ______________________________________________________________________
 176+ E530             >//              Dictionary part
 176+ E530             >
 176+ E530             >                org     Dict_Ptr
 176+ 6B39             >
 176+ 6B39 2E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 6B3B             >
 176+ 6B3B             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6B3B CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6B3E             >
 176+ 6B3E             >
 176+ 6B3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6B3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6B3E             >
 176+ 6B3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6B3E 30          >                db      48
 177+ 6B3F                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 6B3F             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 6B3F             >
 177+ 6B3F             >Dict_Ptr        defl    $
 177+ 6B3F             >
 177+ 6B3F             >//              ______________________________________________________________________
 177+ 6B3F             >//              Heap part
 177+ 6B3F             >
 177+ 6B3F             >
 177+ 6B3F             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E530             >
 177+ E530             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E530             >Latest_Definition defl  Heap_Ptr
 177+ E530             >
 177+ E530             >                // dummy db directives used to calculate length of namec
 177+ E530 46 4C 44    >                db      "FLD"
 177+ E533             >len_NFA         defl    $ - temp_NFA
 177+ E533             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E530             >
 177+ E530 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E531 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E534             >                org     $-1                 // alter last byte of Name just above to set
 177+ E533 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E534             >
 177+ E534 28 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E536             >Prev_Ptr        defl    Heap_Ptr
 177+ E536             >
 177+ E536             >mirror_Ptr      defl    $
 177+ E536             >
 177+ E536 41 6B       >                dw      Dict_Ptr + 2        // xt
 177+ E538             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E538             >
 177+ E538             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E538             >
 177+ E538             >//              ______________________________________________________________________
 177+ E538             >//              Dictionary part
 177+ E538             >
 177+ E538             >                org     Dict_Ptr
 177+ 6B3F             >
 177+ 6B3F 36 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 6B41             >
 177+ 6B41             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6B41 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6B44             >
 177+ 6B44             >
 177+ 6B44             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6B44             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6B44             >
 177+ 6B44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6B44 32          >                db      50
 178+ 6B45                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 6B45             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 6B45             >
 178+ 6B45             >Dict_Ptr        defl    $
 178+ 6B45             >
 178+ 6B45             >//              ______________________________________________________________________
 178+ 6B45             >//              Heap part
 178+ 6B45             >
 178+ 6B45             >
 178+ 6B45             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E538             >
 178+ E538             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E538             >Latest_Definition defl  Heap_Ptr
 178+ E538             >
 178+ E538             >                // dummy db directives used to calculate length of namec
 178+ E538 43 53 50    >                db      "CSP"
 178+ E53B             >len_NFA         defl    $ - temp_NFA
 178+ E53B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E538             >
 178+ E538 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E539 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53C             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53B D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53C             >
 178+ E53C 30 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E53E             >Prev_Ptr        defl    Heap_Ptr
 178+ E53E             >
 178+ E53E             >mirror_Ptr      defl    $
 178+ E53E             >
 178+ E53E 47 6B       >                dw      Dict_Ptr + 2        // xt
 178+ E540             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E540             >
 178+ E540             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E540             >
 178+ E540             >//              ______________________________________________________________________
 178+ E540             >//              Dictionary part
 178+ E540             >
 178+ E540             >                org     Dict_Ptr
 178+ 6B45             >
 178+ 6B45 3E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 6B47             >
 178+ 6B47             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6B47 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6B4A             >
 178+ 6B4A             >
 178+ 6B4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6B4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6B4A             >
 178+ 6B4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6B4A 34          >                db      52
 179+ 6B4B                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 6B4B             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 6B4B             >
 179+ 6B4B             >Dict_Ptr        defl    $
 179+ 6B4B             >
 179+ 6B4B             >//              ______________________________________________________________________
 179+ 6B4B             >//              Heap part
 179+ 6B4B             >
 179+ 6B4B             >
 179+ 6B4B             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E540             >
 179+ E540             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E540             >Latest_Definition defl  Heap_Ptr
 179+ E540             >
 179+ E540             >                // dummy db directives used to calculate length of namec
 179+ E540 52 23       >                db      "R#"
 179+ E542             >len_NFA         defl    $ - temp_NFA
 179+ E542             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E540             >
 179+ E540 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E541 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E543             >                org     $-1                 // alter last byte of Name just above to set
 179+ E542 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E543             >
 179+ E543 38 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E545             >Prev_Ptr        defl    Heap_Ptr
 179+ E545             >
 179+ E545             >mirror_Ptr      defl    $
 179+ E545             >
 179+ E545 4D 6B       >                dw      Dict_Ptr + 2        // xt
 179+ E547             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E547             >
 179+ E547             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E547             >
 179+ E547             >//              ______________________________________________________________________
 179+ E547             >//              Dictionary part
 179+ E547             >
 179+ E547             >                org     Dict_Ptr
 179+ 6B4B             >
 179+ 6B4B 45 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 6B4D             >
 179+ 6B4D             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6B4D CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6B50             >
 179+ 6B50             >
 179+ 6B50             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6B50             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6B50             >
 179+ 6B50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6B50 36          >                db      54
 180+ 6B51                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 6B51             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 6B51             >
 180+ 6B51             >Dict_Ptr        defl    $
 180+ 6B51             >
 180+ 6B51             >//              ______________________________________________________________________
 180+ 6B51             >//              Heap part
 180+ 6B51             >
 180+ 6B51             >
 180+ 6B51             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E547             >
 180+ E547             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E547             >Latest_Definition defl  Heap_Ptr
 180+ E547             >
 180+ E547             >                // dummy db directives used to calculate length of namec
 180+ E547 48 4C 44    >                db      "HLD"
 180+ E54A             >len_NFA         defl    $ - temp_NFA
 180+ E54A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E547             >
 180+ E547 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E548 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54B             >                org     $-1                 // alter last byte of Name just above to set
 180+ E54A C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54B             >
 180+ E54B 40 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54D             >Prev_Ptr        defl    Heap_Ptr
 180+ E54D             >
 180+ E54D             >mirror_Ptr      defl    $
 180+ E54D             >
 180+ E54D 53 6B       >                dw      Dict_Ptr + 2        // xt
 180+ E54F             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E54F             >
 180+ E54F             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E54F             >
 180+ E54F             >//              ______________________________________________________________________
 180+ E54F             >//              Dictionary part
 180+ E54F             >
 180+ E54F             >                org     Dict_Ptr
 180+ 6B51             >
 180+ 6B51 4D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 6B53             >
 180+ 6B53             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6B53 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6B56             >
 180+ 6B56             >
 180+ 6B56             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6B56             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6B56             >
 180+ 6B56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6B56 38          >                db      56
 181+ 6B57                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 6B57             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 6B57             >
 181+ 6B57             >Dict_Ptr        defl    $
 181+ 6B57             >
 181+ 6B57             >//              ______________________________________________________________________
 181+ 6B57             >//              Heap part
 181+ 6B57             >
 181+ 6B57             >
 181+ 6B57             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E54F             >
 181+ E54F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E54F             >Latest_Definition defl  Heap_Ptr
 181+ E54F             >
 181+ E54F             >                // dummy db directives used to calculate length of namec
 181+ E54F 55 53 45 44 >                db      "USED"
 181+ E553             >len_NFA         defl    $ - temp_NFA
 181+ E553             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E54F             >
 181+ E54F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E550 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E554             >                org     $-1                 // alter last byte of Name just above to set
 181+ E553 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E554             >
 181+ E554 47 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E556             >Prev_Ptr        defl    Heap_Ptr
 181+ E556             >
 181+ E556             >mirror_Ptr      defl    $
 181+ E556             >
 181+ E556 59 6B       >                dw      Dict_Ptr + 2        // xt
 181+ E558             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E558             >
 181+ E558             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E558             >
 181+ E558             >//              ______________________________________________________________________
 181+ E558             >//              Dictionary part
 181+ E558             >
 181+ E558             >                org     Dict_Ptr
 181+ 6B57             >
 181+ 6B57 56 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 6B59             >
 181+ 6B59             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6B59 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6B5C             >
 181+ 6B5C             >
 181+ 6B5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6B5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6B5C             >
 181+ 6B5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6B5C 3A          >                db      58
 182+ 6B5D                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 6B5D             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 6B5D             >
 182+ 6B5D             >Dict_Ptr        defl    $
 182+ 6B5D             >
 182+ 6B5D             >//              ______________________________________________________________________
 182+ 6B5D             >//              Heap part
 182+ 6B5D             >
 182+ 6B5D             >
 182+ 6B5D             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E558             >
 182+ E558             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E558             >Latest_Definition defl  Heap_Ptr
 182+ E558             >
 182+ E558             >                // dummy db directives used to calculate length of namec
 182+ E558 50 52 45 56 >                db      "PREV"
 182+ E55C             >len_NFA         defl    $ - temp_NFA
 182+ E55C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E558             >
 182+ E558 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E559 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55D             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55C D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55D             >
 182+ E55D 4F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E55F             >Prev_Ptr        defl    Heap_Ptr
 182+ E55F             >
 182+ E55F             >mirror_Ptr      defl    $
 182+ E55F             >
 182+ E55F 5F 6B       >                dw      Dict_Ptr + 2        // xt
 182+ E561             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E561             >
 182+ E561             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E561             >
 182+ E561             >//              ______________________________________________________________________
 182+ E561             >//              Dictionary part
 182+ E561             >
 182+ E561             >                org     Dict_Ptr
 182+ 6B5D             >
 182+ 6B5D 5F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 6B5F             >
 182+ 6B5F             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6B5F CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6B62             >
 182+ 6B62             >
 182+ 6B62             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6B62             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6B62             >
 182+ 6B62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6B62 3C          >                db      60
 183+ 6B63                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 6B63             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 6B63             >
 183+ 6B63             >Dict_Ptr        defl    $
 183+ 6B63             >
 183+ 6B63             >//              ______________________________________________________________________
 183+ 6B63             >//              Heap part
 183+ 6B63             >
 183+ 6B63             >
 183+ 6B63             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E561             >
 183+ E561             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E561             >Latest_Definition defl  Heap_Ptr
 183+ E561             >
 183+ E561             >                // dummy db directives used to calculate length of namec
 183+ E561 4C 50       >                db      "LP"
 183+ E563             >len_NFA         defl    $ - temp_NFA
 183+ E563             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E561             >
 183+ E561 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E562 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E564             >                org     $-1                 // alter last byte of Name just above to set
 183+ E563 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E564             >
 183+ E564 58 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E566             >Prev_Ptr        defl    Heap_Ptr
 183+ E566             >
 183+ E566             >mirror_Ptr      defl    $
 183+ E566             >
 183+ E566 65 6B       >                dw      Dict_Ptr + 2        // xt
 183+ E568             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E568             >
 183+ E568             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E568             >
 183+ E568             >//              ______________________________________________________________________
 183+ E568             >//              Dictionary part
 183+ E568             >
 183+ E568             >                org     Dict_Ptr
 183+ 6B63             >
 183+ 6B63 66 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 6B65             >
 183+ 6B65             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6B65 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6B68             >
 183+ 6B68             >
 183+ 6B68             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6B68             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6B68             >
 183+ 6B68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6B68 3E          >                db      62
 184+ 6B69                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 6B69             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 6B69             >
 184+ 6B69             >Dict_Ptr        defl    $
 184+ 6B69             >
 184+ 6B69             >//              ______________________________________________________________________
 184+ 6B69             >//              Heap part
 184+ 6B69             >
 184+ 6B69             >
 184+ 6B69             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E568             >
 184+ E568             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E568             >Latest_Definition defl  Heap_Ptr
 184+ E568             >
 184+ E568             >                // dummy db directives used to calculate length of namec
 184+ E568 50 4C 41 43 >                db      "PLACE"
 184+ E56C 45          >
 184+ E56D             >len_NFA         defl    $ - temp_NFA
 184+ E56D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E568             >
 184+ E568 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E569 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56D 45          >
 184+ E56E             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56D C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E56E             >
 184+ E56E 61 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E570             >Prev_Ptr        defl    Heap_Ptr
 184+ E570             >
 184+ E570             >mirror_Ptr      defl    $
 184+ E570             >
 184+ E570 6B 6B       >                dw      Dict_Ptr + 2        // xt
 184+ E572             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E572             >
 184+ E572             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E572             >
 184+ E572             >//              ______________________________________________________________________
 184+ E572             >//              Dictionary part
 184+ E572             >
 184+ E572             >                org     Dict_Ptr
 184+ 6B69             >
 184+ 6B69 70 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 6B6B             >
 184+ 6B6B             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6B6B CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6B6E             >
 184+ 6B6E             >
 184+ 6B6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6B6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6B6E             >
 184+ 6B6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6B6E 40          >                db      64
 185+ 6B6F                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 6B6F             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 6B6F             >
 185+ 6B6F             >Dict_Ptr        defl    $
 185+ 6B6F             >
 185+ 6B6F             >//              ______________________________________________________________________
 185+ 6B6F             >//              Heap part
 185+ 6B6F             >
 185+ 6B6F             >
 185+ 6B6F             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E572             >
 185+ E572             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E572             >Latest_Definition defl  Heap_Ptr
 185+ E572             >
 185+ E572             >                // dummy db directives used to calculate length of namec
 185+ E572 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E576 43 45 2D 49 >
 185+ E57A 44          >
 185+ E57B             >len_NFA         defl    $ - temp_NFA
 185+ E57B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E572             >
 185+ E572 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E573 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E577 43 45 2D 49 >
 185+ E57B 44          >
 185+ E57C             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57B C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57C             >
 185+ E57C 68 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E57E             >Prev_Ptr        defl    Heap_Ptr
 185+ E57E             >
 185+ E57E             >mirror_Ptr      defl    $
 185+ E57E             >
 185+ E57E 71 6B       >                dw      Dict_Ptr + 2        // xt
 185+ E580             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E580             >
 185+ E580             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E580             >
 185+ E580             >//              ______________________________________________________________________
 185+ E580             >//              Dictionary part
 185+ E580             >
 185+ E580             >                org     Dict_Ptr
 185+ 6B6F             >
 185+ 6B6F 7E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 6B71             >
 185+ 6B71             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6B71 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6B74             >
 185+ 6B74             >
 185+ 6B74             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6B74             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6B74             >
 185+ 6B74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6B74 42          >                db      66
 186+ 6B75                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 6B75             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 6B75             >
 186+ 6B75             >Dict_Ptr        defl    $
 186+ 6B75             >
 186+ 6B75             >//              ______________________________________________________________________
 186+ 6B75             >//              Heap part
 186+ 6B75             >
 186+ 6B75             >
 186+ 6B75             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E580             >
 186+ E580             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E580             >Latest_Definition defl  Heap_Ptr
 186+ E580             >
 186+ E580             >                // dummy db directives used to calculate length of namec
 186+ E580 53 50 41 4E >                db      "SPAN"
 186+ E584             >len_NFA         defl    $ - temp_NFA
 186+ E584             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E580             >
 186+ E580 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E581 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E585             >                org     $-1                 // alter last byte of Name just above to set
 186+ E584 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E585             >
 186+ E585 72 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E587             >Prev_Ptr        defl    Heap_Ptr
 186+ E587             >
 186+ E587             >mirror_Ptr      defl    $
 186+ E587             >
 186+ E587 77 6B       >                dw      Dict_Ptr + 2        // xt
 186+ E589             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E589             >
 186+ E589             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E589             >
 186+ E589             >//              ______________________________________________________________________
 186+ E589             >//              Dictionary part
 186+ E589             >
 186+ E589             >                org     Dict_Ptr
 186+ 6B75             >
 186+ 6B75 87 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 6B77             >
 186+ 6B77             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 6B77 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 6B7A             >
 186+ 6B7A             >
 186+ 6B7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 6B7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 6B7A             >
 186+ 6B7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 6B7A 44          >                db      68
 187+ 6B7B                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 6B7B             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 6B7B             >
 187+ 6B7B             >Dict_Ptr        defl    $
 187+ 6B7B             >
 187+ 6B7B             >//              ______________________________________________________________________
 187+ 6B7B             >//              Heap part
 187+ 6B7B             >
 187+ 6B7B             >
 187+ 6B7B             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E589             >
 187+ E589             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E589             >Latest_Definition defl  Heap_Ptr
 187+ E589             >
 187+ E589             >                // dummy db directives used to calculate length of namec
 187+ E589 48 41 4E 44 >                db      "HANDLER"
 187+ E58D 4C 45 52    >
 187+ E590             >len_NFA         defl    $ - temp_NFA
 187+ E590             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E589             >
 187+ E589 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E58A 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E58E 4C 45 52    >
 187+ E591             >                org     $-1                 // alter last byte of Name just above to set
 187+ E590 D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E591             >
 187+ E591 80 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E593             >Prev_Ptr        defl    Heap_Ptr
 187+ E593             >
 187+ E593             >mirror_Ptr      defl    $
 187+ E593             >
 187+ E593 7D 6B       >                dw      Dict_Ptr + 2        // xt
 187+ E595             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E595             >
 187+ E595             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E595             >
 187+ E595             >//              ______________________________________________________________________
 187+ E595             >//              Dictionary part
 187+ E595             >
 187+ E595             >                org     Dict_Ptr
 187+ 6B7B             >
 187+ 6B7B 93 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 6B7D             >
 187+ 6B7D             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6B7D CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 6B80             >
 187+ 6B80             >
 187+ 6B80             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6B80             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6B80             >
 187+ 6B80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 6B80 46          >                db      70
 188+ 6B81                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 6B81             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 6B81             >
 188+ 6B81             >Dict_Ptr        defl    $
 188+ 6B81             >
 188+ 6B81             >//              ______________________________________________________________________
 188+ 6B81             >//              Heap part
 188+ 6B81             >
 188+ 6B81             >
 188+ 6B81             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E595             >
 188+ E595             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E595             >Latest_Definition defl  Heap_Ptr
 188+ E595             >
 188+ E595             >                // dummy db directives used to calculate length of namec
 188+ E595 45 58 50    >                db      "EXP"
 188+ E598             >len_NFA         defl    $ - temp_NFA
 188+ E598             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E595             >
 188+ E595 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E596 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E599             >                org     $-1                 // alter last byte of Name just above to set
 188+ E598 D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E599             >
 188+ E599 89 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59B             >Prev_Ptr        defl    Heap_Ptr
 188+ E59B             >
 188+ E59B             >mirror_Ptr      defl    $
 188+ E59B             >
 188+ E59B 83 6B       >                dw      Dict_Ptr + 2        // xt
 188+ E59D             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59D             >
 188+ E59D             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59D             >
 188+ E59D             >//              ______________________________________________________________________
 188+ E59D             >//              Dictionary part
 188+ E59D             >
 188+ E59D             >                org     Dict_Ptr
 188+ 6B81             >
 188+ 6B81 9B 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 6B83             >
 188+ 6B83             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6B83 CD 58 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 6B86             >
 188+ 6B86             >
 188+ 6B86             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6B86             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6B86             >
 188+ 6B86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 6B86 48          >                db      72
 189+ 6B87
 190+ 6B87              //  ______________________________________________________________________
 191+ 6B87              //
 192+ 6B87              // here         -- a
 193+ 6B87                              Colon_Def HERE, "HERE", is_normal
 193+ 6B87             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 6B87             >
 193+ 6B87             >Dict_Ptr        defl    $
 193+ 6B87             >
 193+ 6B87             >//              ______________________________________________________________________
 193+ 6B87             >//              Heap part
 193+ 6B87             >
 193+ 6B87             >
 193+ 6B87             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59D             >
 193+ E59D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59D             >Latest_Definition defl  Heap_Ptr
 193+ E59D             >
 193+ E59D             >                // dummy db directives used to calculate length of namec
 193+ E59D 48 45 52 45 >                db      "HERE"
 193+ E5A1             >len_NFA         defl    $ - temp_NFA
 193+ E5A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59D             >
 193+ E59D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E59E 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A2             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A1 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A2             >
 193+ E5A2 95 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A4             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A4             >
 193+ E5A4             >mirror_Ptr      defl    $
 193+ E5A4             >
 193+ E5A4 89 6B       >                dw      Dict_Ptr + 2        // xt
 193+ E5A6             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A6             >
 193+ E5A6             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A6             >
 193+ E5A6             >//              ______________________________________________________________________
 193+ E5A6             >//              Dictionary part
 193+ E5A6             >
 193+ E5A6             >                org     Dict_Ptr
 193+ 6B87             >
 193+ 6B87 A4 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 6B89             >
 193+ 6B89             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 6B89 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 6B8C             >
 193+ 6B8C             >
 193+ 6B8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 6B8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 6B8C             >
 193+ 6B8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 6B8C E1 6A 72 69                  dw      DP, FETCH               // dp @
 195+ 6B90 3D 68                        dw      EXIT                    // ;
 196+ 6B92
 197+ 6B92              //  ______________________________________________________________________
 198+ 6B92              //
 199+ 6B92              // allot        n --
 200+ 6B92                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 6B92             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 6B92             >
 200+ 6B92             >Dict_Ptr        defl    $
 200+ 6B92             >
 200+ 6B92             >//              ______________________________________________________________________
 200+ 6B92             >//              Heap part
 200+ 6B92             >
 200+ 6B92             >
 200+ 6B92             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A6             >
 200+ E5A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A6             >Latest_Definition defl  Heap_Ptr
 200+ E5A6             >
 200+ E5A6             >                // dummy db directives used to calculate length of namec
 200+ E5A6 41 4C 4C 4F >                db      "ALLOT"
 200+ E5AA 54          >
 200+ E5AB             >len_NFA         defl    $ - temp_NFA
 200+ E5AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A6             >
 200+ E5A6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A7 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AB 54          >
 200+ E5AC             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AB D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AC             >
 200+ E5AC 9D 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5AE             >Prev_Ptr        defl    Heap_Ptr
 200+ E5AE             >
 200+ E5AE             >mirror_Ptr      defl    $
 200+ E5AE             >
 200+ E5AE 94 6B       >                dw      Dict_Ptr + 2        // xt
 200+ E5B0             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5B0             >
 200+ E5B0             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5B0             >
 200+ E5B0             >//              ______________________________________________________________________
 200+ E5B0             >//              Dictionary part
 200+ E5B0             >
 200+ E5B0             >                org     Dict_Ptr
 200+ 6B92             >
 200+ 6B92 AE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 6B94             >
 200+ 6B94             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6B94 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 6B97             >
 200+ 6B97             >
 200+ 6B97             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6B97             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6B97             >
 200+ 6B97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6B97 E1 6A 5A 69                  dw      DP,  PLUSSTORE          // dp +!
 202+ 6B9B 3D 68                        dw      EXIT                    // ;
 203+ 6B9D
 204+ 6B9D              //  ______________________________________________________________________
 205+ 6B9D              //
 206+ 6B9D              // comma        n --
 207+ 6B9D                              Colon_Def COMMA, ",", is_normal
 207+ 6B9D             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 6B9D             >
 207+ 6B9D             >Dict_Ptr        defl    $
 207+ 6B9D             >
 207+ 6B9D             >//              ______________________________________________________________________
 207+ 6B9D             >//              Heap part
 207+ 6B9D             >
 207+ 6B9D             >
 207+ 6B9D             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5B0             >
 207+ E5B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5B0             >Latest_Definition defl  Heap_Ptr
 207+ E5B0             >
 207+ E5B0             >                // dummy db directives used to calculate length of namec
 207+ E5B0 2C          >                db      ","
 207+ E5B1             >len_NFA         defl    $ - temp_NFA
 207+ E5B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5B0             >
 207+ E5B0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B1 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B2             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B1 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B2             >
 207+ E5B2 A6 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B4             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B4             >
 207+ E5B4             >mirror_Ptr      defl    $
 207+ E5B4             >
 207+ E5B4 9F 6B       >                dw      Dict_Ptr + 2        // xt
 207+ E5B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B6             >
 207+ E5B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B6             >
 207+ E5B6             >//              ______________________________________________________________________
 207+ E5B6             >//              Dictionary part
 207+ E5B6             >
 207+ E5B6             >                org     Dict_Ptr
 207+ 6B9D             >
 207+ 6B9D B4 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 6B9F             >
 207+ 6B9F             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 6B9F CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 6BA2             >
 207+ 6BA2             >
 207+ 6BA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 6BA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 6BA2             >
 207+ 6BA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 6BA2 89 6B 7C 69                  dw      HERE, STORE             // here !
 209+ 6BA6 72 6A 94 6B                  dw      TWO, ALLOT              // 2 allot
 210+ 6BAA 3D 68                        dw      EXIT                    // ;
 211+ 6BAC
 212+ 6BAC              //  ______________________________________________________________________
 213+ 6BAC              //
 214+ 6BAC              // ccomma       c --
 215+ 6BAC                              Colon_Def CCOMMA, "C,", is_normal
 215+ 6BAC             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 6BAC             >
 215+ 6BAC             >Dict_Ptr        defl    $
 215+ 6BAC             >
 215+ 6BAC             >//              ______________________________________________________________________
 215+ 6BAC             >//              Heap part
 215+ 6BAC             >
 215+ 6BAC             >
 215+ 6BAC             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B6             >
 215+ E5B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B6             >Latest_Definition defl  Heap_Ptr
 215+ E5B6             >
 215+ E5B6             >                // dummy db directives used to calculate length of namec
 215+ E5B6 43 2C       >                db      "C,"
 215+ E5B8             >len_NFA         defl    $ - temp_NFA
 215+ E5B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B6             >
 215+ E5B6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B7 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5B9             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5B8 AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5B9             >
 215+ E5B9 B0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BB             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BB             >
 215+ E5BB             >mirror_Ptr      defl    $
 215+ E5BB             >
 215+ E5BB AE 6B       >                dw      Dict_Ptr + 2        // xt
 215+ E5BD             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BD             >
 215+ E5BD             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BD             >
 215+ E5BD             >//              ______________________________________________________________________
 215+ E5BD             >//              Dictionary part
 215+ E5BD             >
 215+ E5BD             >                org     Dict_Ptr
 215+ 6BAC             >
 215+ 6BAC BB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 6BAE             >
 215+ 6BAE             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 6BAE CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 6BB1             >
 215+ 6BB1             >
 215+ 6BB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 6BB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 6BB1             >
 215+ 6BB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 6BB1 89 6B 90 69                  dw      HERE, CSTORE            // here c!
 217+ 6BB5 6B 6A 94 6B                  dw      ONE, ALLOT              // 1 allot
 218+ 6BB9 3D 68                        dw      EXIT                    // ;
 219+ 6BBB
 220+ 6BBB              //  ______________________________________________________________________
 221+ 6BBB              //
 222+ 6BBB              // hpcomma      n --
 223+ 6BBB              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 6BBB              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 6BBB              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 6BBB              //              dw      EXIT                    // ;
 227+ 6BBB
 228+ 6BBB              //  ______________________________________________________________________
 229+ 6BBB              //
 230+ 6BBB              // s>d          n -- d
 231+ 6BBB              // converts a single precision integer in a double precision
 232+ 6BBB                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 6BBB             >
 232+ 6BBB             >Dict_Ptr        defl    $
 232+ 6BBB             >
 232+ 6BBB             >//              ______________________________________________________________________
 232+ 6BBB             >//              Heap part
 232+ 6BBB             >
 232+ 6BBB             >
 232+ 6BBB             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5BD             >
 232+ E5BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5BD             >Latest_Definition defl  Heap_Ptr
 232+ E5BD             >
 232+ E5BD             >                // dummy db directives used to calculate length of namec
 232+ E5BD 53 3E 44    >                db      "S>D"
 232+ E5C0             >len_NFA         defl    $ - temp_NFA
 232+ E5C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5BD             >
 232+ E5BD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5BE 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C1             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5C0 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C1             >
 232+ E5C1 B6 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5C3             >Prev_Ptr        defl    Heap_Ptr
 232+ E5C3             >
 232+ E5C3             >mirror_Ptr      defl    $
 232+ E5C3             >
 232+ E5C3 BD 6B       >                dw      Dict_Ptr + 2        // xt
 232+ E5C5             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C5             >
 232+ E5C5             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C5             >
 232+ E5C5             >//              ______________________________________________________________________
 232+ E5C5             >//              Dictionary part
 232+ E5C5             >
 232+ E5C5             >                org     Dict_Ptr
 232+ 6BBB             >
 232+ 6BBB C3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 6BBD             >
 232+ 6BBD             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 6BBD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 6BBD ~           >
 232+ 6BBD ~           >
 232+ 6BBD             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 6BBD             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 6BBD             >
 232+ 6BBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 6BBD E1                           pop     hl
 234+ 6BBE 7C                           ld      a, h
 235+ 6BBF E5                           push    hl
 236+ 6BC0 17                           rla
 237+ 6BC1 ED 62                        sbc     hl, hl
 238+ 6BC3 E5                           push    hl
 239+ 6BC4                              next
 239+ 6BC4 DD E9       >                jp      (ix)
 240+ 6BC6
 241+ 6BC6              //  ______________________________________________________________________
 242+ 6BC6              //
 243+ 6BC6              // -            n1 n2 -- n3
 244+ 6BC6              // subtraction
 245+ 6BC6                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 6BC6             >
 245+ 6BC6             >Dict_Ptr        defl    $
 245+ 6BC6             >
 245+ 6BC6             >//              ______________________________________________________________________
 245+ 6BC6             >//              Heap part
 245+ 6BC6             >
 245+ 6BC6             >
 245+ 6BC6             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C5             >
 245+ E5C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C5             >Latest_Definition defl  Heap_Ptr
 245+ E5C5             >
 245+ E5C5             >                // dummy db directives used to calculate length of namec
 245+ E5C5 2D          >                db      "-"
 245+ E5C6             >len_NFA         defl    $ - temp_NFA
 245+ E5C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C5             >
 245+ E5C5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C6 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C7             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C6 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C7             >
 245+ E5C7 BD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5C9             >Prev_Ptr        defl    Heap_Ptr
 245+ E5C9             >
 245+ E5C9             >mirror_Ptr      defl    $
 245+ E5C9             >
 245+ E5C9 C8 6B       >                dw      Dict_Ptr + 2        // xt
 245+ E5CB             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5CB             >
 245+ E5CB             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5CB             >
 245+ E5CB             >//              ______________________________________________________________________
 245+ E5CB             >//              Dictionary part
 245+ E5CB             >
 245+ E5CB             >                org     Dict_Ptr
 245+ 6BC6             >
 245+ 6BC6 C9 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 6BC8             >
 245+ 6BC8             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 6BC8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 6BC8 ~           >
 245+ 6BC8 ~           >
 245+ 6BC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 6BC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 6BC8             >
 245+ 6BC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 6BC8 D9                           exx
 247+ 6BC9 D1                           pop     de
 248+ 6BCA E1                           pop     hl
 249+ 6BCB A7                           and     a
 250+ 6BCC ED 52                        sbc     hl, de
 251+ 6BCE E5                           push    hl
 252+ 6BCF D9                           exx
 253+ 6BD0                              next
 253+ 6BD0 DD E9       >                jp      (ix)
 254+ 6BD2
 255+ 6BD2
 256+ 6BD2              //  ______________________________________________________________________
 257+ 6BD2              //
 258+ 6BD2              // =            n1 n2 -- n3
 259+ 6BD2              // equals
 260+ 6BD2                              Colon_Def EQUALS, "=", is_normal
 260+ 6BD2             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 6BD2             >
 260+ 6BD2             >Dict_Ptr        defl    $
 260+ 6BD2             >
 260+ 6BD2             >//              ______________________________________________________________________
 260+ 6BD2             >//              Heap part
 260+ 6BD2             >
 260+ 6BD2             >
 260+ 6BD2             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5CB             >
 260+ E5CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5CB             >Latest_Definition defl  Heap_Ptr
 260+ E5CB             >
 260+ E5CB             >                // dummy db directives used to calculate length of namec
 260+ E5CB 3D          >                db      "="
 260+ E5CC             >len_NFA         defl    $ - temp_NFA
 260+ E5CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5CB             >
 260+ E5CB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5CC 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5CD             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5CC BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5CD             >
 260+ E5CD C5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5CF             >Prev_Ptr        defl    Heap_Ptr
 260+ E5CF             >
 260+ E5CF             >mirror_Ptr      defl    $
 260+ E5CF             >
 260+ E5CF D4 6B       >                dw      Dict_Ptr + 2        // xt
 260+ E5D1             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D1             >
 260+ E5D1             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D1             >
 260+ E5D1             >//              ______________________________________________________________________
 260+ E5D1             >//              Dictionary part
 260+ E5D1             >
 260+ E5D1             >                org     Dict_Ptr
 260+ 6BD2             >
 260+ 6BD2 CF 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6BD4             >
 260+ 6BD4             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6BD4 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 6BD7             >
 260+ 6BD7             >
 260+ 6BD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6BD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6BD7             >
 260+ 6BD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6BD7 C8 6B 62 68                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 6BDB 3D 68                        dw      EXIT                    // ;
 263+ 6BDD
 264+ 6BDD              //  ______________________________________________________________________
 265+ 6BDD              //
 266+ 6BDD              // u<           u1 u2 -- u3
 267+ 6BDD              // unsigned less-than
 268+ 6BDD                              New_Def ULESS, "U<", is_code, is_normal
 268+ 6BDD             >
 268+ 6BDD             >Dict_Ptr        defl    $
 268+ 6BDD             >
 268+ 6BDD             >//              ______________________________________________________________________
 268+ 6BDD             >//              Heap part
 268+ 6BDD             >
 268+ 6BDD             >
 268+ 6BDD             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D1             >
 268+ E5D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D1             >Latest_Definition defl  Heap_Ptr
 268+ E5D1             >
 268+ E5D1             >                // dummy db directives used to calculate length of namec
 268+ E5D1 55 3C       >                db      "U<"
 268+ E5D3             >len_NFA         defl    $ - temp_NFA
 268+ E5D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D1             >
 268+ E5D1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D2 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D4             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5D3 BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D4             >
 268+ E5D4 CB 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D6             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D6             >
 268+ E5D6             >mirror_Ptr      defl    $
 268+ E5D6             >
 268+ E5D6 DF 6B       >                dw      Dict_Ptr + 2        // xt
 268+ E5D8             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5D8             >
 268+ E5D8             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5D8             >
 268+ E5D8             >//              ______________________________________________________________________
 268+ E5D8             >//              Dictionary part
 268+ E5D8             >
 268+ E5D8             >                org     Dict_Ptr
 268+ 6BDD             >
 268+ 6BDD D6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 6BDF             >
 268+ 6BDF             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 6BDF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 6BDF ~           >
 268+ 6BDF ~           >
 268+ 6BDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 6BDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 6BDF             >
 268+ 6BDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 6BDF D9                           exx
 270+ 6BE0 D1                           pop     de
 271+ 6BE1 E1                           pop     hl
 272+ 6BE2              Unsigned_Less_Exit:
 273+ 6BE2 A7                           and     a
 274+ 6BE3 ED 52                        sbc     hl, de
 275+ 6BE5 ED 62                        sbc     hl, hl
 276+ 6BE7 E5                           push    hl
 277+ 6BE8 D9                           exx
 278+ 6BE9                              next
 278+ 6BE9 DD E9       >                jp      (ix)
 279+ 6BEB
 280+ 6BEB              //  ______________________________________________________________________
 281+ 6BEB              //
 282+ 6BEB              // <           n1 n2 -- n3
 283+ 6BEB              // less-than
 284+ 6BEB                              New_Def LESS, "<", is_code, is_normal
 284+ 6BEB             >
 284+ 6BEB             >Dict_Ptr        defl    $
 284+ 6BEB             >
 284+ 6BEB             >//              ______________________________________________________________________
 284+ 6BEB             >//              Heap part
 284+ 6BEB             >
 284+ 6BEB             >
 284+ 6BEB             >                org     (Heap_Ptr & $1FFF) + $E000
 284+ E5D8             >
 284+ E5D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ E5D8             >Latest_Definition defl  Heap_Ptr
 284+ E5D8             >
 284+ E5D8             >                // dummy db directives used to calculate length of namec
 284+ E5D8 3C          >                db      "<"
 284+ E5D9             >len_NFA         defl    $ - temp_NFA
 284+ E5D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ E5D8             >
 284+ E5D8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ E5D9 3C          >                db      "<"               // name string in 7-bit ascii, but
 284+ E5DA             >                org     $-1                 // alter last byte of Name just above to set
 284+ E5D9 BC          >                db      {b $} | END_BIT     // msb as name end
 284+ E5DA             >
 284+ E5DA D1 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 284+ E5DC             >Prev_Ptr        defl    Heap_Ptr
 284+ E5DC             >
 284+ E5DC             >mirror_Ptr      defl    $
 284+ E5DC             >
 284+ E5DC ED 6B       >                dw      Dict_Ptr + 2        // xt
 284+ E5DE             >Heap_Ptr        defl    $ - $E000           // save current HP
 284+ E5DE             >
 284+ E5DE             >Current_HP      defl  $ - $E000             // used to set HP once!
 284+ E5DE             >
 284+ E5DE             >//              ______________________________________________________________________
 284+ E5DE             >//              Dictionary part
 284+ E5DE             >
 284+ E5DE             >                org     Dict_Ptr
 284+ 6BEB             >
 284+ 6BEB DC 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 284+ 6BED             >
 284+ 6BED             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 6BED ~           >                call    runcode ; ok        // for primitive definitions  actual code
 284+ 6BED ~           >
 284+ 6BED ~           >
 284+ 6BED             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 6BED             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 6BED             >
 284+ 6BED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 6BED D9                           exx
 286+ 6BEE E1                           pop     hl
 287+ 6BEF D1                           pop     de
 288+ 6BF0 01 00 80                     ld      bc, $8000
 289+ 6BF3 09                           add     hl, bc
 290+ 6BF4 EB                           ex      de, hl
 291+ 6BF5 09                           add     hl, bc
 292+ 6BF6 18 EA                        jr      Unsigned_Less_Exit
 293+ 6BF8              //              and     a
 294+ 6BF8              //              sbc     hl, de
 295+ 6BF8              //              sbc     hl, hl
 296+ 6BF8              //              push    hl
 297+ 6BF8              //              exx
 298+ 6BF8              //              next
 299+ 6BF8
 300+ 6BF8              //  ______________________________________________________________________
 301+ 6BF8              //
 302+ 6BF8              // >            n1 n2 -- n3
 303+ 6BF8              // greater than
 304+ 6BF8                              Colon_Def GREATER, ">", is_normal
 304+ 6BF8             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 6BF8             >
 304+ 6BF8             >Dict_Ptr        defl    $
 304+ 6BF8             >
 304+ 6BF8             >//              ______________________________________________________________________
 304+ 6BF8             >//              Heap part
 304+ 6BF8             >
 304+ 6BF8             >
 304+ 6BF8             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5DE             >
 304+ E5DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5DE             >Latest_Definition defl  Heap_Ptr
 304+ E5DE             >
 304+ E5DE             >                // dummy db directives used to calculate length of namec
 304+ E5DE 3E          >                db      ">"
 304+ E5DF             >len_NFA         defl    $ - temp_NFA
 304+ E5DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5DE             >
 304+ E5DE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5DF 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5E0             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5DF BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5E0             >
 304+ E5E0 D8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E2             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E2             >
 304+ E5E2             >mirror_Ptr      defl    $
 304+ E5E2             >
 304+ E5E2 FA 6B       >                dw      Dict_Ptr + 2        // xt
 304+ E5E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E4             >
 304+ E5E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E4             >
 304+ E5E4             >//              ______________________________________________________________________
 304+ E5E4             >//              Dictionary part
 304+ E5E4             >
 304+ E5E4             >                org     Dict_Ptr
 304+ 6BF8             >
 304+ 6BF8 E2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 6BFA             >
 304+ 6BFA             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 6BFA CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 6BFD             >
 304+ 6BFD             >
 304+ 6BFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 6BFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 6BFD             >
 304+ 6BFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 6BFD 01 69 ED 6B                  dw      SWAP, LESS              // swap <
 306+ 6C01 3D 68                        dw      EXIT                    // ;
 307+ 6C03              //  ______________________________________________________________________
 308+ 6C03              //
 309+ 6C03              // min          n1 n2 -- n3
 310+ 6C03              // minimum between n1 and n2
 311+ 6C03                              Colon_Def MIN, "MIN" , is_normal
 311+ 6C03             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 6C03             >
 311+ 6C03             >Dict_Ptr        defl    $
 311+ 6C03             >
 311+ 6C03             >//              ______________________________________________________________________
 311+ 6C03             >//              Heap part
 311+ 6C03             >
 311+ 6C03             >
 311+ 6C03             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E4             >
 311+ E5E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E4             >Latest_Definition defl  Heap_Ptr
 311+ E5E4             >
 311+ E5E4             >                // dummy db directives used to calculate length of namec
 311+ E5E4 4D 49 4E    >                db      "MIN"
 311+ E5E7             >len_NFA         defl    $ - temp_NFA
 311+ E5E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E4             >
 311+ E5E4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E5 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5E8             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E7 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5E8             >
 311+ E5E8 DE 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5EA             >Prev_Ptr        defl    Heap_Ptr
 311+ E5EA             >
 311+ E5EA             >mirror_Ptr      defl    $
 311+ E5EA             >
 311+ E5EA 05 6C       >                dw      Dict_Ptr + 2        // xt
 311+ E5EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5EC             >
 311+ E5EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5EC             >
 311+ E5EC             >//              ______________________________________________________________________
 311+ E5EC             >//              Dictionary part
 311+ E5EC             >
 311+ E5EC             >                org     Dict_Ptr
 311+ 6C03             >
 311+ 6C03 EA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 6C05             >
 311+ 6C05             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 6C05 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 6C08             >
 311+ 6C08             >
 311+ 6C08             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 6C08             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 6C08             >
 311+ 6C08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 6C08 50 69                        dw      TWO_DUP                 // 2dup
 313+ 6C0A FA 6B                        dw      GREATER                 // >
 314+ 6C0C F3 63                        dw      ZBRANCH
 315+ 6C0E 04 00                        dw      Min_Skip - $   // if
 316+ 6C10 01 69                        dw          SWAP                //      swap
 317+ 6C12              Min_Skip:                                       // endif
 318+ 6C12 ED 68                        dw      DROP                    // drop
 319+ 6C14 3D 68                        dw      EXIT                    // ;
 320+ 6C16
 321+ 6C16              //  ______________________________________________________________________
 322+ 6C16              //
 323+ 6C16              // max          n1 n2 -- n3
 324+ 6C16              // maximum between n1 and n2
 325+ 6C16                              Colon_Def MAX, "MAX", is_normal
 325+ 6C16             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 6C16             >
 325+ 6C16             >Dict_Ptr        defl    $
 325+ 6C16             >
 325+ 6C16             >//              ______________________________________________________________________
 325+ 6C16             >//              Heap part
 325+ 6C16             >
 325+ 6C16             >
 325+ 6C16             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5EC             >
 325+ E5EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5EC             >Latest_Definition defl  Heap_Ptr
 325+ E5EC             >
 325+ E5EC             >                // dummy db directives used to calculate length of namec
 325+ E5EC 4D 41 58    >                db      "MAX"
 325+ E5EF             >len_NFA         defl    $ - temp_NFA
 325+ E5EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5EC             >
 325+ E5EC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5ED 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5F0             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5EF D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5F0             >
 325+ E5F0 E4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F2             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F2             >
 325+ E5F2             >mirror_Ptr      defl    $
 325+ E5F2             >
 325+ E5F2 18 6C       >                dw      Dict_Ptr + 2        // xt
 325+ E5F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F4             >
 325+ E5F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F4             >
 325+ E5F4             >//              ______________________________________________________________________
 325+ E5F4             >//              Dictionary part
 325+ E5F4             >
 325+ E5F4             >                org     Dict_Ptr
 325+ 6C16             >
 325+ 6C16 F2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 6C18             >
 325+ 6C18             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 6C18 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 6C1B             >
 325+ 6C1B             >
 325+ 6C1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 6C1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 6C1B             >
 325+ 6C1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 6C1B 50 69                        dw      TWO_DUP                 // 2dup
 327+ 6C1D ED 6B                        dw      LESS                    // <
 328+ 6C1F F3 63                        dw      ZBRANCH
 329+ 6C21 04 00                        dw      Max_Skip - $   // if
 330+ 6C23 01 69                        dw          SWAP                //      swap
 331+ 6C25              Max_Skip:                                       // endif
 332+ 6C25 ED 68                        dw      DROP                    // drop
 333+ 6C27 3D 68                        dw      EXIT                    // ;
 334+ 6C29
 335+ 6C29              //  ______________________________________________________________________
 336+ 6C29              //
 337+ 6C29              // ?dup         n -- 0 | n n
 338+ 6C29              // duplicate if not zero
 339+ 6C29                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 6C29             >
 339+ 6C29             >Dict_Ptr        defl    $
 339+ 6C29             >
 339+ 6C29             >//              ______________________________________________________________________
 339+ 6C29             >//              Heap part
 339+ 6C29             >
 339+ 6C29             >
 339+ 6C29             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F4             >
 339+ E5F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F4             >Latest_Definition defl  Heap_Ptr
 339+ E5F4             >
 339+ E5F4             >                // dummy db directives used to calculate length of namec
 339+ E5F4 3F 44 55 50 >                db      "?DUP"
 339+ E5F8             >len_NFA         defl    $ - temp_NFA
 339+ E5F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F4             >
 339+ E5F4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F5 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5F9             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5F8 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5F9             >
 339+ E5F9 EC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5FB             >Prev_Ptr        defl    Heap_Ptr
 339+ E5FB             >
 339+ E5FB             >mirror_Ptr      defl    $
 339+ E5FB             >
 339+ E5FB 2B 6C       >                dw      Dict_Ptr + 2        // xt
 339+ E5FD             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5FD             >
 339+ E5FD             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5FD             >
 339+ E5FD             >//              ______________________________________________________________________
 339+ E5FD             >//              Dictionary part
 339+ E5FD             >
 339+ E5FD             >                org     Dict_Ptr
 339+ 6C29             >
 339+ 6C29 FB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 6C2B             >
 339+ 6C2B             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 6C2B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 6C2B ~           >
 339+ 6C2B ~           >
 339+ 6C2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 6C2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 6C2B             >
 339+ 6C2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 6C2B              QDup_Ptr:
 341+ 6C2B E1                           pop     hl
 342+ 6C2C 7C                           ld      a, h
 343+ 6C2D B5                           or      l
 344+ 6C2E 28 01                        jr      z, QDup_Skip
 345+ 6C30 E5                               push    hl
 346+ 6C31              QDup_Skip:
 347+ 6C31                              psh1
 347+ 6C31 E5          >                push    hl
 347+ 6C32 DD E9       >                jp      (ix)
 348+ 6C34
 349+ 6C34              //  ______________________________________________________________________
 350+ 6C34              //
 351+ 6C34              // -dup         n -- 0 | n n
 352+ 6C34              // duplicate if not zero
 353+ 6C34                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 6C34             >
 353+ 6C34             >Dict_Ptr        defl    $
 353+ 6C34             >
 353+ 6C34             >//              ______________________________________________________________________
 353+ 6C34             >//              Heap part
 353+ 6C34             >
 353+ 6C34             >
 353+ 6C34             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5FD             >
 353+ E5FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5FD             >Latest_Definition defl  Heap_Ptr
 353+ E5FD             >
 353+ E5FD             >                // dummy db directives used to calculate length of namec
 353+ E5FD 2D 44 55 50 >                db      "-DUP"
 353+ E601             >len_NFA         defl    $ - temp_NFA
 353+ E601             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5FD             >
 353+ E5FD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E5FE 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E602             >                org     $-1                 // alter last byte of Name just above to set
 353+ E601 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E602             >
 353+ E602 F4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E604             >Prev_Ptr        defl    Heap_Ptr
 353+ E604             >
 353+ E604             >mirror_Ptr      defl    $
 353+ E604             >
 353+ E604 36 6C       >                dw      Dict_Ptr + 2        // xt
 353+ E606             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E606             >
 353+ E606             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E606             >
 353+ E606             >//              ______________________________________________________________________
 353+ E606             >//              Dictionary part
 353+ E606             >
 353+ E606             >                org     Dict_Ptr
 353+ 6C34             >
 353+ 6C34 04 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 6C36             >
 353+ 6C36             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 6C36 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 6C36 ~           >
 353+ 6C36 ~           >
 353+ 6C36             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 6C36             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 6C36             >
 353+ 6C36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 6C36 C3 2B 6C                     jp      QDup_Ptr
 355+ 6C39
 356+ 6C39              //  ______________________________________________________________________
 357+ 6C39              //
 358+ 6C39              // emit         c --
 359+ 6C39                              Colon_Def EMIT, "EMIT", is_normal
 359+ 6C39             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 6C39             >
 359+ 6C39             >Dict_Ptr        defl    $
 359+ 6C39             >
 359+ 6C39             >//              ______________________________________________________________________
 359+ 6C39             >//              Heap part
 359+ 6C39             >
 359+ 6C39             >
 359+ 6C39             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E606             >
 359+ E606             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E606             >Latest_Definition defl  Heap_Ptr
 359+ E606             >
 359+ E606             >                // dummy db directives used to calculate length of namec
 359+ E606 45 4D 49 54 >                db      "EMIT"
 359+ E60A             >len_NFA         defl    $ - temp_NFA
 359+ E60A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E606             >
 359+ E606 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E607 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E60B             >                org     $-1                 // alter last byte of Name just above to set
 359+ E60A D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E60B             >
 359+ E60B FD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E60D             >Prev_Ptr        defl    Heap_Ptr
 359+ E60D             >
 359+ E60D             >mirror_Ptr      defl    $
 359+ E60D             >
 359+ E60D 3B 6C       >                dw      Dict_Ptr + 2        // xt
 359+ E60F             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E60F             >
 359+ E60F             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E60F             >
 359+ E60F             >//              ______________________________________________________________________
 359+ E60F             >//              Dictionary part
 359+ E60F             >
 359+ E60F             >                org     Dict_Ptr
 359+ 6C39             >
 359+ 6C39 0D 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 6C3B             >
 359+ 6C3B             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 6C3B CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 6C3E             >
 359+ 6C3E             >
 359+ 6C3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 6C3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 6C3E             >
 359+ 6C3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 6C3E C3 65                        dw      C_EMIT                      // (?emit)
 361+ 6C40 2B 6C                        dw      QDUP                        // ?dup
 362+ 6C42                                                                  // if
 363+ 6C42 F3 63                        dw      ZBRANCH
 364+ 6C44 0A 00                        dw      Emit_Skip - $
 365+ 6C46 91 65                        dw          EMITC                   //      emitc
 366+ 6C48 6B 6A                        dw          ONE                     //      1
 367+ 6C4A 11 6B 5A 69                  dw          OUT, PLUSSTORE        //      out +!
 368+ 6C4E              Emit_Skip:                                          // endif
 369+ 6C4E 3D 68                        dw      EXIT                        // ;
 370+ 6C50
 371+ 6C50              //  ______________________________________________________________________
 372+ 6C50              //
 373+ 6C50              // space        --
 374+ 6C50                              Colon_Def SPACE, "SPACE", is_normal
 374+ 6C50             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 6C50             >
 374+ 6C50             >Dict_Ptr        defl    $
 374+ 6C50             >
 374+ 6C50             >//              ______________________________________________________________________
 374+ 6C50             >//              Heap part
 374+ 6C50             >
 374+ 6C50             >
 374+ 6C50             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E60F             >
 374+ E60F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E60F             >Latest_Definition defl  Heap_Ptr
 374+ E60F             >
 374+ E60F             >                // dummy db directives used to calculate length of namec
 374+ E60F 53 50 41 43 >                db      "SPACE"
 374+ E613 45          >
 374+ E614             >len_NFA         defl    $ - temp_NFA
 374+ E614             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E60F             >
 374+ E60F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E610 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E614 45          >
 374+ E615             >                org     $-1                 // alter last byte of Name just above to set
 374+ E614 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E615             >
 374+ E615 06 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E617             >Prev_Ptr        defl    Heap_Ptr
 374+ E617             >
 374+ E617             >mirror_Ptr      defl    $
 374+ E617             >
 374+ E617 52 6C       >                dw      Dict_Ptr + 2        // xt
 374+ E619             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E619             >
 374+ E619             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E619             >
 374+ E619             >//              ______________________________________________________________________
 374+ E619             >//              Dictionary part
 374+ E619             >
 374+ E619             >                org     Dict_Ptr
 374+ 6C50             >
 374+ 6C50 17 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 6C52             >
 374+ 6C52             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 6C52 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 6C55             >
 374+ 6C55             >
 374+ 6C55             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 6C55             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 6C55             >
 374+ 6C55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 6C55 87 6A 3B 6C                  dw      BL, EMIT                // bl emit
 376+ 6C59 3D 68                        dw      EXIT                    // ;
 377+ 6C5B
 378+ 6C5B              //  ______________________________________________________________________
 379+ 6C5B              //
 380+ 6C5B              // traverse     a n -- a
 381+ 6C5B              // A dictionary entry is structured as follows
 382+ 6C5B              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 6C5B              //      +1   word name, last character is toggled with $80
 384+ 6C5B              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 6C5B              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 6C5B              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 6C5B              //
 388+ 6C5B                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 6C5B             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 6C5B             >
 388+ 6C5B             >Dict_Ptr        defl    $
 388+ 6C5B             >
 388+ 6C5B             >//              ______________________________________________________________________
 388+ 6C5B             >//              Heap part
 388+ 6C5B             >
 388+ 6C5B             >
 388+ 6C5B             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E619             >
 388+ E619             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E619             >Latest_Definition defl  Heap_Ptr
 388+ E619             >
 388+ E619             >                // dummy db directives used to calculate length of namec
 388+ E619 54 52 41 56 >                db      "TRAVERSE"
 388+ E61D 45 52 53 45 >
 388+ E621             >len_NFA         defl    $ - temp_NFA
 388+ E621             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E619             >
 388+ E619 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E61A 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E61E 45 52 53 45 >
 388+ E622             >                org     $-1                 // alter last byte of Name just above to set
 388+ E621 C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E622             >
 388+ E622 0F 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E624             >Prev_Ptr        defl    Heap_Ptr
 388+ E624             >
 388+ E624             >mirror_Ptr      defl    $
 388+ E624             >
 388+ E624 5D 6C       >                dw      Dict_Ptr + 2        // xt
 388+ E626             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E626             >
 388+ E626             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E626             >
 388+ E626             >//              ______________________________________________________________________
 388+ E626             >//              Dictionary part
 388+ E626             >
 388+ E626             >                org     Dict_Ptr
 388+ 6C5B             >
 388+ 6C5B 24 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 6C5D             >
 388+ 6C5D             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 6C5D CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 6C60             >
 388+ 6C60             >
 388+ 6C60             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 6C60             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 6C60             >
 388+ 6C60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 6C60 01 69                        dw      SWAP                    // swap
 390+ 6C62              Traverse_Begin:                                 // begin
 391+ 6C62 E4 68 8A 68                  dw          OVER, PLUS          //      over +
 392+ 6C66 A3 63 7F 00                  dw          LIT, 127            //      127
 393+ 6C6A E4 68 87 69                  dw          OVER, CFETCH        //      over @
 394+ 6C6E ED 6B                        dw          LESS                //      <
 395+ 6C70                                                              // until
 396+ 6C70 F3 63                        dw      ZBRANCH
 397+ 6C72 F0 FF                        dw      Traverse_Begin - $
 398+ 6C74 F2 68                        dw      NIP                     //  nip
 399+ 6C76 3D 68                        dw      EXIT                    //  ;
 400+ 6C78
 401+ 6C78              //  ______________________________________________________________________
 402+ 6C78              //
 403+ 6C78              // mmu7@        -- n
 404+ 6C78              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 6C78
 406+ 6C78                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 6C78             >
 406+ 6C78             >Dict_Ptr        defl    $
 406+ 6C78             >
 406+ 6C78             >//              ______________________________________________________________________
 406+ 6C78             >//              Heap part
 406+ 6C78             >
 406+ 6C78             >
 406+ 6C78             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E626             >
 406+ E626             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E626             >Latest_Definition defl  Heap_Ptr
 406+ E626             >
 406+ E626             >                // dummy db directives used to calculate length of namec
 406+ E626 4D 4D 55 37 >                db      "MMU7@"
 406+ E62A 40          >
 406+ E62B             >len_NFA         defl    $ - temp_NFA
 406+ E62B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E626             >
 406+ E626 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E627 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E62B 40          >
 406+ E62C             >                org     $-1                 // alter last byte of Name just above to set
 406+ E62B C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E62C             >
 406+ E62C 19 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E62E             >Prev_Ptr        defl    Heap_Ptr
 406+ E62E             >
 406+ E62E             >mirror_Ptr      defl    $
 406+ E62E             >
 406+ E62E 7A 6C       >                dw      Dict_Ptr + 2        // xt
 406+ E630             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E630             >
 406+ E630             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E630             >
 406+ E630             >//              ______________________________________________________________________
 406+ E630             >//              Dictionary part
 406+ E630             >
 406+ E630             >                org     Dict_Ptr
 406+ 6C78             >
 406+ 6C78 2E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 6C7A             >
 406+ 6C7A             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 6C7A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 6C7A ~           >
 406+ 6C7A ~           >
 406+ 6C7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 6C7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 6C7A             >
 406+ 6C7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 6C7A D9                           exx
 408+ 6C7B CD 96 64                     call    MMU7_read
 409+ 6C7E D9                           exx
 410+ 6C7F 6F                           ld      l, a
 411+ 6C80 26 00                        ld      h, 0
 412+ 6C82 E5                           push    hl
 413+ 6C83                              next
 413+ 6C83 DD E9       >                jp      (ix)
 414+ 6C85
 415+ 6C85              //  ______________________________________________________________________
 416+ 6C85              //
 417+ 6C85              // mmu7!        n --
 418+ 6C85              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 6C85              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 6C85
 421+ 6C85                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 6C85             >
 421+ 6C85             >Dict_Ptr        defl    $
 421+ 6C85             >
 421+ 6C85             >//              ______________________________________________________________________
 421+ 6C85             >//              Heap part
 421+ 6C85             >
 421+ 6C85             >
 421+ 6C85             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E630             >
 421+ E630             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E630             >Latest_Definition defl  Heap_Ptr
 421+ E630             >
 421+ E630             >                // dummy db directives used to calculate length of namec
 421+ E630 4D 4D 55 37 >                db      "MMU7!"
 421+ E634 21          >
 421+ E635             >len_NFA         defl    $ - temp_NFA
 421+ E635             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E630             >
 421+ E630 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E631 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E635 21          >
 421+ E636             >                org     $-1                 // alter last byte of Name just above to set
 421+ E635 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E636             >
 421+ E636 26 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E638             >Prev_Ptr        defl    Heap_Ptr
 421+ E638             >
 421+ E638             >mirror_Ptr      defl    $
 421+ E638             >
 421+ E638 87 6C       >                dw      Dict_Ptr + 2        // xt
 421+ E63A             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E63A             >
 421+ E63A             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E63A             >
 421+ E63A             >//              ______________________________________________________________________
 421+ E63A             >//              Dictionary part
 421+ E63A             >
 421+ E63A             >                org     Dict_Ptr
 421+ 6C85             >
 421+ 6C85 38 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 6C87             >
 421+ 6C87             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6C87 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6C87 ~           >
 421+ 6C87 ~           >
 421+ 6C87             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6C87             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6C87             >
 421+ 6C87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6C87 E1                           pop     hl
 423+ 6C88 7D                           ld      a, l
 424+ 6C89 ED 92 57                     nextreg 87, a
 425+ 6C8C
 426+ 6C8C                              next
 426+ 6C8C DD E9       >                jp      (ix)
 427+ 6C8E
 428+ 6C8E              //  ______________________________________________________________________
 429+ 6C8E              //
 430+ 6C8E              // >far         ha -- a n
 431+ 6C8E              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 6C8E              // take lower bits of H and L as an offset from E000h
 433+ 6C8E              // then return address  a  between E000h-FFFFh
 434+ 6C8E              // and page number n  between 64-71 (40h-47h)
 435+ 6C8E              // For example, in hex:
 436+ 6C8E              //   0000 >FAR  gives  40.E000
 437+ 6C8E              //   1FFF >FAR  gives  40.FFFF
 438+ 6C8E              //   2000 >FAR  gives  41.E000
 439+ 6C8E              //   3FFF >FAR  gives  41.FFFF
 440+ 6C8E              //   EFFF >FAR  gives  47.EFFF
 441+ 6C8E              //   FFFF >FAR  gives  47.FFFF
 442+ 6C8E                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 6C8E             >
 442+ 6C8E             >Dict_Ptr        defl    $
 442+ 6C8E             >
 442+ 6C8E             >//              ______________________________________________________________________
 442+ 6C8E             >//              Heap part
 442+ 6C8E             >
 442+ 6C8E             >
 442+ 6C8E             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E63A             >
 442+ E63A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E63A             >Latest_Definition defl  Heap_Ptr
 442+ E63A             >
 442+ E63A             >                // dummy db directives used to calculate length of namec
 442+ E63A 3E 46 41 52 >                db      ">FAR"
 442+ E63E             >len_NFA         defl    $ - temp_NFA
 442+ E63E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E63A             >
 442+ E63A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E63B 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E63F             >                org     $-1                 // alter last byte of Name just above to set
 442+ E63E D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E63F             >
 442+ E63F 30 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E641             >Prev_Ptr        defl    Heap_Ptr
 442+ E641             >
 442+ E641             >mirror_Ptr      defl    $
 442+ E641             >
 442+ E641 90 6C       >                dw      Dict_Ptr + 2        // xt
 442+ E643             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E643             >
 442+ E643             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E643             >
 442+ E643             >//              ______________________________________________________________________
 442+ E643             >//              Dictionary part
 442+ E643             >
 442+ E643             >                org     Dict_Ptr
 442+ 6C8E             >
 442+ 6C8E 41 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 6C90             >
 442+ 6C90             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 6C90 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 6C90 ~           >
 442+ 6C90 ~           >
 442+ 6C90             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 6C90             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 6C90             >
 442+ 6C90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 6C90 E1                           pop     hl
 444+ 6C91 CD A1 64                     call    TO_FAR_rout
 445+ 6C94 E5                           push    hl
 446+ 6C95 6F                           ld      l, a
 447+ 6C96 26 00                        ld      h, 0
 448+ 6C98 E5                           push    hl
 449+ 6C99                              next
 449+ 6C99 DD E9       >                jp      (ix)
 450+ 6C9B
 451+ 6C9B              //  ______________________________________________________________________
 452+ 6C9B              //
 453+ 6C9B              // <far         a n  -- ha
 454+ 6C9B              // given an address E000-FFFF and a page number n (32-39 or 20h-27h)
 455+ 6C9B              // reverse of >FAR: encodes a FAR address compressing
 456+ 6C9B              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 6C9B                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 6C9B             >
 457+ 6C9B             >Dict_Ptr        defl    $
 457+ 6C9B             >
 457+ 6C9B             >//              ______________________________________________________________________
 457+ 6C9B             >//              Heap part
 457+ 6C9B             >
 457+ 6C9B             >
 457+ 6C9B             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E643             >
 457+ E643             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E643             >Latest_Definition defl  Heap_Ptr
 457+ E643             >
 457+ E643             >                // dummy db directives used to calculate length of namec
 457+ E643 3C 46 41 52 >                db      "<FAR"
 457+ E647             >len_NFA         defl    $ - temp_NFA
 457+ E647             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E643             >
 457+ E643 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E644 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E648             >                org     $-1                 // alter last byte of Name just above to set
 457+ E647 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E648             >
 457+ E648 3A 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E64A             >Prev_Ptr        defl    Heap_Ptr
 457+ E64A             >
 457+ E64A             >mirror_Ptr      defl    $
 457+ E64A             >
 457+ E64A 9D 6C       >                dw      Dict_Ptr + 2        // xt
 457+ E64C             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E64C             >
 457+ E64C             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E64C             >
 457+ E64C             >//              ______________________________________________________________________
 457+ E64C             >//              Dictionary part
 457+ E64C             >
 457+ E64C             >                org     Dict_Ptr
 457+ 6C9B             >
 457+ 6C9B 4A 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 6C9D             >
 457+ 6C9D             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 6C9D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 6C9D ~           >
 457+ 6C9D ~           >
 457+ 6C9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 6C9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 6C9D             >
 457+ 6C9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 6C9D E1                           pop     hl                  // page number in l
 459+ 6C9E 7D                           ld      a, l
 460+ 6C9F E6 07                        and     07
 461+ 6CA1 0F                           rrca
 462+ 6CA2 0F                           rrca
 463+ 6CA3 0F                           rrca
 464+ 6CA4 08                           ex      af, af
 465+ 6CA5 E1                           pop     hl                  // address in hl
 466+ 6CA6 7C                           ld      a, h
 467+ 6CA7 E6 1F                        and     $1F
 468+ 6CA9 67                           ld      h, a
 469+ 6CAA 08                           ex      af, af
 470+ 6CAB B4                           or      h
 471+ 6CAC 67                           ld      h, a
 472+ 6CAD                              psh1
 472+ 6CAD E5          >                push    hl
 472+ 6CAE DD E9       >                jp      (ix)
 473+ 6CB0
 474+ 6CB0              //  ______________________________________________________________________
 475+ 6CB0              //
 476+ 6CB0              // ?IN_MMU7        a -- f
 477+ 6CB0              // check if address lies on MMU7
 478+ 6CB0              // tf is passed address is on MMU7
 479+ 6CB0                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 479+ 6CB0             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 479+ 6CB0             >
 479+ 6CB0             >Dict_Ptr        defl    $
 479+ 6CB0             >
 479+ 6CB0             >//              ______________________________________________________________________
 479+ 6CB0             >//              Heap part
 479+ 6CB0             >
 479+ 6CB0             >
 479+ 6CB0             >                org     (Heap_Ptr & $1FFF) + $E000
 479+ E64C             >
 479+ E64C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 479+ E64C             >Latest_Definition defl  Heap_Ptr
 479+ E64C             >
 479+ E64C             >                // dummy db directives used to calculate length of namec
 479+ E64C 3F 49 4E 5F >                db      "?IN_MMU7"
 479+ E650 4D 4D 55 37 >
 479+ E654             >len_NFA         defl    $ - temp_NFA
 479+ E654             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 479+ E64C             >
 479+ E64C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 479+ E64D 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 479+ E651 4D 4D 55 37 >
 479+ E655             >                org     $-1                 // alter last byte of Name just above to set
 479+ E654 B7          >                db      {b $} | END_BIT     // msb as name end
 479+ E655             >
 479+ E655 43 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 479+ E657             >Prev_Ptr        defl    Heap_Ptr
 479+ E657             >
 479+ E657             >mirror_Ptr      defl    $
 479+ E657             >
 479+ E657 B2 6C       >                dw      Dict_Ptr + 2        // xt
 479+ E659             >Heap_Ptr        defl    $ - $E000           // save current HP
 479+ E659             >
 479+ E659             >Current_HP      defl  $ - $E000             // used to set HP once!
 479+ E659             >
 479+ E659             >//              ______________________________________________________________________
 479+ E659             >//              Dictionary part
 479+ E659             >
 479+ E659             >                org     Dict_Ptr
 479+ 6CB0             >
 479+ 6CB0 57 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 479+ 6CB2             >
 479+ 6CB2             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 479+ 6CB2 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 479+ 6CB5             >
 479+ 6CB5             >
 479+ 6CB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 479+ 6CB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 479+ 6CB5             >
 479+ 6CB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 480+ 6CB5 08 69                        dw      DUP
 481+ 6CB7 A3 63 00 E0                  dw      LIT, $E000
 482+ 6CBB DF 6B                        dw      ULESS
 483+ 6CBD 6F 68                        dw      NOT_OP
 484+ 6CBF 3D 68                        dw      EXIT
 485+ 6CC1
 486+ 6CC1              //  ______________________________________________________________________
 487+ 6CC1              //
 488+ 6CC1              // far          hp -- ha
 489+ 6CC1              // Convert an "heap-pointer address" (ha) into a real address (a)
 490+ 6CC1              // between E000h and FFFFh and fit the correct 8K page on MMU7
 491+ 6CC1              // An "ha" uses the 3 msb as page-number and the lower bits as offset at E000.
 492+ 6CC1                              Colon_Def FAR, "FAR", is_normal
 492+ 6CC1             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 492+ 6CC1             >
 492+ 6CC1             >Dict_Ptr        defl    $
 492+ 6CC1             >
 492+ 6CC1             >//              ______________________________________________________________________
 492+ 6CC1             >//              Heap part
 492+ 6CC1             >
 492+ 6CC1             >
 492+ 6CC1             >                org     (Heap_Ptr & $1FFF) + $E000
 492+ E659             >
 492+ E659             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ E659             >Latest_Definition defl  Heap_Ptr
 492+ E659             >
 492+ E659             >                // dummy db directives used to calculate length of namec
 492+ E659 46 41 52    >                db      "FAR"
 492+ E65C             >len_NFA         defl    $ - temp_NFA
 492+ E65C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ E659             >
 492+ E659 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ E65A 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 492+ E65D             >                org     $-1                 // alter last byte of Name just above to set
 492+ E65C D2          >                db      {b $} | END_BIT     // msb as name end
 492+ E65D             >
 492+ E65D 4C 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 492+ E65F             >Prev_Ptr        defl    Heap_Ptr
 492+ E65F             >
 492+ E65F             >mirror_Ptr      defl    $
 492+ E65F             >
 492+ E65F C3 6C       >                dw      Dict_Ptr + 2        // xt
 492+ E661             >Heap_Ptr        defl    $ - $E000           // save current HP
 492+ E661             >
 492+ E661             >Current_HP      defl  $ - $E000             // used to set HP once!
 492+ E661             >
 492+ E661             >//              ______________________________________________________________________
 492+ E661             >//              Dictionary part
 492+ E661             >
 492+ E661             >                org     Dict_Ptr
 492+ 6CC1             >
 492+ 6CC1 5F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 492+ 6CC3             >
 492+ 6CC3             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 6CC3 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 6CC6             >
 492+ 6CC6             >
 492+ 6CC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 6CC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 6CC6             >
 492+ 6CC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 6CC6 90 6C                        dw      TO_FAR
 494+ 6CC8 87 6C                        dw      MMU7_STORE
 495+ 6CCA 3D 68                        dw      EXIT
 496+ 6CCC
 497+ 6CCC              //  ______________________________________________________________________
 498+ 6CCC              //
 499+ 6CCC              // ?HEAP_PTR       n -- n f
 500+ 6CCC              // check if it's a non-zero heap-pointer or less than $6300
 501+ 6CCC              // tf if passed argument is an hp
 502+ 6CCC              // ff if passed argument isn't hp
 503+ 6CCC                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 503+ 6CCC             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 503+ 6CCC             >
 503+ 6CCC             >Dict_Ptr        defl    $
 503+ 6CCC             >
 503+ 6CCC             >//              ______________________________________________________________________
 503+ 6CCC             >//              Heap part
 503+ 6CCC             >
 503+ 6CCC             >
 503+ 6CCC             >                org     (Heap_Ptr & $1FFF) + $E000
 503+ E661             >
 503+ E661             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ E661             >Latest_Definition defl  Heap_Ptr
 503+ E661             >
 503+ E661             >                // dummy db directives used to calculate length of namec
 503+ E661 3F 48 45 41 >                db      "?HEAP_PTR"
 503+ E665 50 5F 50 54 >
 503+ E669 52          >
 503+ E66A             >len_NFA         defl    $ - temp_NFA
 503+ E66A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ E661             >
 503+ E661 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ E662 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 503+ E666 50 5F 50 54 >
 503+ E66A 52          >
 503+ E66B             >                org     $-1                 // alter last byte of Name just above to set
 503+ E66A D2          >                db      {b $} | END_BIT     // msb as name end
 503+ E66B             >
 503+ E66B 59 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 503+ E66D             >Prev_Ptr        defl    Heap_Ptr
 503+ E66D             >
 503+ E66D             >mirror_Ptr      defl    $
 503+ E66D             >
 503+ E66D CE 6C       >                dw      Dict_Ptr + 2        // xt
 503+ E66F             >Heap_Ptr        defl    $ - $E000           // save current HP
 503+ E66F             >
 503+ E66F             >Current_HP      defl  $ - $E000             // used to set HP once!
 503+ E66F             >
 503+ E66F             >//              ______________________________________________________________________
 503+ E66F             >//              Dictionary part
 503+ E66F             >
 503+ E66F             >                org     Dict_Ptr
 503+ 6CCC             >
 503+ 6CCC 6D 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 503+ 6CCE             >
 503+ 6CCE             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 6CCE CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 6CD1             >
 503+ 6CD1             >
 503+ 6CD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 6CD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 6CD1             >
 503+ 6CD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 6CD1 08 69                        dw      DUP
 505+ 6CD3 F3 63                        dw      ZBRANCH
 506+ 6CD5 08 00                        dw      QHeap_Skip - $
 507+ 6CD7 A3 63 00 63                  dw          LIT, $6300
 508+ 6CDB DF 6B                        dw          ULESS
 509+ 6CDD              QHeap_Skip:                                          // endif
 510+ 6CDD 3D 68                        dw      EXIT                        // ;
 511+ 6CDF
 512+ 6CDF              //  ______________________________________________________________________
 513+ 6CDF              //
 514+ 6CDF              // ?>heap       n1 -- n2
 515+ 6CDF              // heap correction: given an LFA check if it's a real address or a heap-pointer
 516+ 6CDF              // address <= 6300h -- except 0000h -- are interpreted as heap-pointers
 517+ 6CDF              // and converted to heap address updating MMU7 via FAR
 518+ 6CDF                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 518+ 6CDF             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 518+ 6CDF             >
 518+ 6CDF             >Dict_Ptr        defl    $
 518+ 6CDF             >
 518+ 6CDF             >//              ______________________________________________________________________
 518+ 6CDF             >//              Heap part
 518+ 6CDF             >
 518+ 6CDF             >
 518+ 6CDF             >                org     (Heap_Ptr & $1FFF) + $E000
 518+ E66F             >
 518+ E66F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 518+ E66F             >Latest_Definition defl  Heap_Ptr
 518+ E66F             >
 518+ E66F             >                // dummy db directives used to calculate length of namec
 518+ E66F 3F 3E 48 45 >                db      "?>HEAP"
 518+ E673 41 50       >
 518+ E675             >len_NFA         defl    $ - temp_NFA
 518+ E675             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 518+ E66F             >
 518+ E66F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 518+ E670 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 518+ E674 41 50       >
 518+ E676             >                org     $-1                 // alter last byte of Name just above to set
 518+ E675 D0          >                db      {b $} | END_BIT     // msb as name end
 518+ E676             >
 518+ E676 61 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 518+ E678             >Prev_Ptr        defl    Heap_Ptr
 518+ E678             >
 518+ E678             >mirror_Ptr      defl    $
 518+ E678             >
 518+ E678 E1 6C       >                dw      Dict_Ptr + 2        // xt
 518+ E67A             >Heap_Ptr        defl    $ - $E000           // save current HP
 518+ E67A             >
 518+ E67A             >Current_HP      defl  $ - $E000             // used to set HP once!
 518+ E67A             >
 518+ E67A             >//              ______________________________________________________________________
 518+ E67A             >//              Dictionary part
 518+ E67A             >
 518+ E67A             >                org     Dict_Ptr
 518+ 6CDF             >
 518+ 6CDF 78 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 518+ 6CE1             >
 518+ 6CE1             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 518+ 6CE1 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 518+ 6CE4             >
 518+ 6CE4             >
 518+ 6CE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 518+ 6CE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 518+ 6CE4             >
 518+ 6CE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 519+ 6CE4 08 69                        dw      DUP
 520+ 6CE6 CE 6C                        dw      QHEAPP
 521+ 6CE8 F3 63                        dw      ZBRANCH
 522+ 6CEA 04 00                        dw      Q2Heap_Skip - $
 523+ 6CEC C3 6C                        dw          FAR
 524+ 6CEE              Q2Heap_Skip:                                          // endif
 525+ 6CEE 3D 68                        dw      EXIT                        // ;
 526+ 6CF0
 527+ 6CF0              //  ______________________________________________________________________
 528+ 6CF0              //
 529+ 6CF0              // hp_fetch     -- a
 530+ 6CF0                              Colon_Def HP_FETCH, "HP@", is_normal
 530+ 6CF0             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 530+ 6CF0             >
 530+ 6CF0             >Dict_Ptr        defl    $
 530+ 6CF0             >
 530+ 6CF0             >//              ______________________________________________________________________
 530+ 6CF0             >//              Heap part
 530+ 6CF0             >
 530+ 6CF0             >
 530+ 6CF0             >                org     (Heap_Ptr & $1FFF) + $E000
 530+ E67A             >
 530+ E67A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ E67A             >Latest_Definition defl  Heap_Ptr
 530+ E67A             >
 530+ E67A             >                // dummy db directives used to calculate length of namec
 530+ E67A 48 50 40    >                db      "HP@"
 530+ E67D             >len_NFA         defl    $ - temp_NFA
 530+ E67D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ E67A             >
 530+ E67A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ E67B 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 530+ E67E             >                org     $-1                 // alter last byte of Name just above to set
 530+ E67D C0          >                db      {b $} | END_BIT     // msb as name end
 530+ E67E             >
 530+ E67E 6F 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 530+ E680             >Prev_Ptr        defl    Heap_Ptr
 530+ E680             >
 530+ E680             >mirror_Ptr      defl    $
 530+ E680             >
 530+ E680 F2 6C       >                dw      Dict_Ptr + 2        // xt
 530+ E682             >Heap_Ptr        defl    $ - $E000           // save current HP
 530+ E682             >
 530+ E682             >Current_HP      defl  $ - $E000             // used to set HP once!
 530+ E682             >
 530+ E682             >//              ______________________________________________________________________
 530+ E682             >//              Dictionary part
 530+ E682             >
 530+ E682             >                org     Dict_Ptr
 530+ 6CF0             >
 530+ 6CF0 80 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 530+ 6CF2             >
 530+ 6CF2             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 6CF2 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 6CF5             >
 530+ 6CF5             >
 530+ 6CF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 6CF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 6CF5             >
 530+ 6CF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 6CF5 F9 6A 72 69                  dw      HP, FETCH               // hp @
 532+ 6CF9 3D 68                        dw      EXIT                    // ;
 533+ 6CFB
 534+ 6CFB              //  ______________________________________________________________________
 535+ 6CFB              //
 536+ 6CFB              // page-watermark   -- n
 537+ 6CFB              // how much a 8K page can be filled..
 538+ 6CFB                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 538+ 6CFB             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 538+ 6CFB             >
 538+ 6CFB             >Dict_Ptr        defl    $
 538+ 6CFB             >
 538+ 6CFB             >//              ______________________________________________________________________
 538+ 6CFB             >//              Heap part
 538+ 6CFB             >
 538+ 6CFB             >
 538+ 6CFB             >                org     (Heap_Ptr & $1FFF) + $E000
 538+ E682             >
 538+ E682             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ E682             >Latest_Definition defl  Heap_Ptr
 538+ E682             >
 538+ E682             >                // dummy db directives used to calculate length of namec
 538+ E682 50 41 47 45 >                db      "PAGE-WATERMARK"
 538+ E686 2D 57 41 54 >
 538+ E68A 45 52 4D 41 >
 538+ E68E 52 4B       >
 538+ E690             >len_NFA         defl    $ - temp_NFA
 538+ E690             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ E682             >
 538+ E682 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ E683 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 538+ E687 2D 57 41 54 >
 538+ E68B 45 52 4D 41 >
 538+ E68F 52 4B       >
 538+ E691             >                org     $-1                 // alter last byte of Name just above to set
 538+ E690 CB          >                db      {b $} | END_BIT     // msb as name end
 538+ E691             >
 538+ E691 7A 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 538+ E693             >Prev_Ptr        defl    Heap_Ptr
 538+ E693             >
 538+ E693             >mirror_Ptr      defl    $
 538+ E693             >
 538+ E693 FD 6C       >                dw      Dict_Ptr + 2        // xt
 538+ E695             >Heap_Ptr        defl    $ - $E000           // save current HP
 538+ E695             >
 538+ E695             >Current_HP      defl  $ - $E000             // used to set HP once!
 538+ E695             >
 538+ E695             >//              ______________________________________________________________________
 538+ E695             >//              Dictionary part
 538+ E695             >
 538+ E695             >                org     Dict_Ptr
 538+ 6CFB             >
 538+ 6CFB 93 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 538+ 6CFD             >
 538+ 6CFD             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 6CFD CD 38 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 538+ 6D00             >
 538+ 6D00             >
 538+ 6D00             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 6D00             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 6D00             >
 538+ 6D00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 6D00 80 1F       >                dw      $1F80
 539+ 6D02
 540+ 6D02              //  ______________________________________________________________________
 541+ 6D02              //
 542+ 6D02              // skip-hp-page ha -- a
 543+ 6D02                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 543+ 6D02             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 543+ 6D02             >
 543+ 6D02             >Dict_Ptr        defl    $
 543+ 6D02             >
 543+ 6D02             >//              ______________________________________________________________________
 543+ 6D02             >//              Heap part
 543+ 6D02             >
 543+ 6D02             >
 543+ 6D02             >                org     (Heap_Ptr & $1FFF) + $E000
 543+ E695             >
 543+ E695             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 543+ E695             >Latest_Definition defl  Heap_Ptr
 543+ E695             >
 543+ E695             >                // dummy db directives used to calculate length of namec
 543+ E695 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 543+ E699 2D 48 50 2D >
 543+ E69D 50 41 47 45 >
 543+ E6A1             >len_NFA         defl    $ - temp_NFA
 543+ E6A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 543+ E695             >
 543+ E695 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 543+ E696 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 543+ E69A 2D 48 50 2D >
 543+ E69E 50 41 47 45 >
 543+ E6A2             >                org     $-1                 // alter last byte of Name just above to set
 543+ E6A1 C5          >                db      {b $} | END_BIT     // msb as name end
 543+ E6A2             >
 543+ E6A2 82 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 543+ E6A4             >Prev_Ptr        defl    Heap_Ptr
 543+ E6A4             >
 543+ E6A4             >mirror_Ptr      defl    $
 543+ E6A4             >
 543+ E6A4 04 6D       >                dw      Dict_Ptr + 2        // xt
 543+ E6A6             >Heap_Ptr        defl    $ - $E000           // save current HP
 543+ E6A6             >
 543+ E6A6             >Current_HP      defl  $ - $E000             // used to set HP once!
 543+ E6A6             >
 543+ E6A6             >//              ______________________________________________________________________
 543+ E6A6             >//              Dictionary part
 543+ E6A6             >
 543+ E6A6             >                org     Dict_Ptr
 543+ 6D02             >
 543+ 6D02 A4 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 543+ 6D04             >
 543+ 6D04             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 543+ 6D04 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 543+ 6D07             >
 543+ 6D07             >
 543+ 6D07             >                endif           ; ok        // for other definitions it "points" the correct handler
 543+ 6D07             >                // Use of "; ok" to suppress "warning[fwdref]"
 543+ 6D07             >
 543+ 6D07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 544+ 6D07 F2 6C                        dw      HP_FETCH                // hp@
 545+ 6D09 A3 63 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 545+ 6D0D FD 67
 546+ 6D0F 8A 68                        dw      PLUS
 547+ 6D11 FD 6C                        dw      PAGE_WATERMARK
 548+ 6D13 FA 6B                        dw      GREATER
 549+ 6D15 F3 63                        dw      ZBRANCH
 550+ 6D17 12 00                        dw      Skip_Skip - $   // if
 551+ 6D19 F2 6C                        dw      HP_FETCH
 552+ 6D1B A3 63 FF 1F                  dw      LIT, $1FFF, OR_OP
 552+ 6D1F 0C 68
 553+ 6D21 A3 68 B1 68                  dw      ONE_PLUS, TWO_PLUS
 554+ 6D25 F9 6A 7C 69                  dw      HP, STORE
 555+ 6D29              Skip_Skip:
 556+ 6D29 3D 68                        dw      EXIT                    // ;
 557+ 6D2B              //  ______________________________________________________________________
 558+ 6D2B              //
 559+ 6D2B              // latest       -- nfa
 560+ 6D2B                              Colon_Def LATEST, "LATEST", is_normal
 560+ 6D2B             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 560+ 6D2B             >
 560+ 6D2B             >Dict_Ptr        defl    $
 560+ 6D2B             >
 560+ 6D2B             >//              ______________________________________________________________________
 560+ 6D2B             >//              Heap part
 560+ 6D2B             >
 560+ 6D2B             >
 560+ 6D2B             >                org     (Heap_Ptr & $1FFF) + $E000
 560+ E6A6             >
 560+ E6A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ E6A6             >Latest_Definition defl  Heap_Ptr
 560+ E6A6             >
 560+ E6A6             >                // dummy db directives used to calculate length of namec
 560+ E6A6 4C 41 54 45 >                db      "LATEST"
 560+ E6AA 53 54       >
 560+ E6AC             >len_NFA         defl    $ - temp_NFA
 560+ E6AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ E6A6             >
 560+ E6A6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ E6A7 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 560+ E6AB 53 54       >
 560+ E6AD             >                org     $-1                 // alter last byte of Name just above to set
 560+ E6AC D4          >                db      {b $} | END_BIT     // msb as name end
 560+ E6AD             >
 560+ E6AD 95 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 560+ E6AF             >Prev_Ptr        defl    Heap_Ptr
 560+ E6AF             >
 560+ E6AF             >mirror_Ptr      defl    $
 560+ E6AF             >
 560+ E6AF 2D 6D       >                dw      Dict_Ptr + 2        // xt
 560+ E6B1             >Heap_Ptr        defl    $ - $E000           // save current HP
 560+ E6B1             >
 560+ E6B1             >Current_HP      defl  $ - $E000             // used to set HP once!
 560+ E6B1             >
 560+ E6B1             >//              ______________________________________________________________________
 560+ E6B1             >//              Dictionary part
 560+ E6B1             >
 560+ E6B1             >                org     Dict_Ptr
 560+ 6D2B             >
 560+ 6D2B AF 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 560+ 6D2D             >
 560+ 6D2D             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 6D2D CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 6D30             >
 560+ 6D30             >
 560+ 6D30             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 6D30             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 6D30             >
 560+ 6D30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 6D30 29 6B                        dw      CURRENT                 // current
 562+ 6D32 72 69 72 69                  dw      FETCH, FETCH            // @ @
 563+ 6D36 C3 6C                        dw      FAR // Q TO HEAP
 564+ 6D38 3D 68                        dw      EXIT                    // ;
 565+ 6D3A
 566+ 6D3A              //  ______________________________________________________________________
 567+ 6D3A              //
 568+ 6D3A              // >body        cfa -- pfa
 569+ 6D3A                              Colon_Def TO_BODY, ">BODY", is_normal
 569+ 6D3A             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 569+ 6D3A             >
 569+ 6D3A             >Dict_Ptr        defl    $
 569+ 6D3A             >
 569+ 6D3A             >//              ______________________________________________________________________
 569+ 6D3A             >//              Heap part
 569+ 6D3A             >
 569+ 6D3A             >
 569+ 6D3A             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6B1             >
 569+ E6B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6B1             >Latest_Definition defl  Heap_Ptr
 569+ E6B1             >
 569+ E6B1             >                // dummy db directives used to calculate length of namec
 569+ E6B1 3E 42 4F 44 >                db      ">BODY"
 569+ E6B5 59          >
 569+ E6B6             >len_NFA         defl    $ - temp_NFA
 569+ E6B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6B1             >
 569+ E6B1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6B2 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 569+ E6B6 59          >
 569+ E6B7             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6B6 D9          >                db      {b $} | END_BIT     // msb as name end
 569+ E6B7             >
 569+ E6B7 A6 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6B9             >Prev_Ptr        defl    Heap_Ptr
 569+ E6B9             >
 569+ E6B9             >mirror_Ptr      defl    $
 569+ E6B9             >
 569+ E6B9 3C 6D       >                dw      Dict_Ptr + 2        // xt
 569+ E6BB             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6BB             >
 569+ E6BB             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6BB             >
 569+ E6BB             >//              ______________________________________________________________________
 569+ E6BB             >//              Dictionary part
 569+ E6BB             >
 569+ E6BB             >                org     Dict_Ptr
 569+ 6D3A             >
 569+ 6D3A B9 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 6D3C             >
 569+ 6D3C             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 6D3C CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 6D3F             >
 569+ 6D3F             >
 569+ 6D3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 6D3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 6D3F             >
 569+ 6D3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 6D3F 79 6A 8A 68                  dw      THREE, PLUS             // cell+ --> 3 +
 571+ 6D43 3D 68                        dw      EXIT                    // ;
 572+ 6D45
 573+ 6D45              //  ______________________________________________________________________
 574+ 6D45              //
 575+ 6D45              // <name        cfa -- nfa
 576+ 6D45                              Colon_Def TO_NAME, "<NAME", is_normal
 576+ 6D45             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 576+ 6D45             >
 576+ 6D45             >Dict_Ptr        defl    $
 576+ 6D45             >
 576+ 6D45             >//              ______________________________________________________________________
 576+ 6D45             >//              Heap part
 576+ 6D45             >
 576+ 6D45             >
 576+ 6D45             >                org     (Heap_Ptr & $1FFF) + $E000
 576+ E6BB             >
 576+ E6BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ E6BB             >Latest_Definition defl  Heap_Ptr
 576+ E6BB             >
 576+ E6BB             >                // dummy db directives used to calculate length of namec
 576+ E6BB 3C 4E 41 4D >                db      "<NAME"
 576+ E6BF 45          >
 576+ E6C0             >len_NFA         defl    $ - temp_NFA
 576+ E6C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ E6BB             >
 576+ E6BB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ E6BC 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 576+ E6C0 45          >
 576+ E6C1             >                org     $-1                 // alter last byte of Name just above to set
 576+ E6C0 C5          >                db      {b $} | END_BIT     // msb as name end
 576+ E6C1             >
 576+ E6C1 B1 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 576+ E6C3             >Prev_Ptr        defl    Heap_Ptr
 576+ E6C3             >
 576+ E6C3             >mirror_Ptr      defl    $
 576+ E6C3             >
 576+ E6C3 47 6D       >                dw      Dict_Ptr + 2        // xt
 576+ E6C5             >Heap_Ptr        defl    $ - $E000           // save current HP
 576+ E6C5             >
 576+ E6C5             >Current_HP      defl  $ - $E000             // used to set HP once!
 576+ E6C5             >
 576+ E6C5             >//              ______________________________________________________________________
 576+ E6C5             >//              Dictionary part
 576+ E6C5             >
 576+ E6C5             >                org     Dict_Ptr
 576+ 6D45             >
 576+ 6D45 C3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 576+ 6D47             >
 576+ 6D47             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 6D47 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 6D4A             >
 576+ 6D4A             >
 576+ 6D4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 6D4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 6D4A             >
 576+ 6D4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 6D4A BD 68                        dw      CELL_MINUS              // cell-
 578+ 6D4C 08 69 72 69                  dw      DUP, FETCH
 579+ 6D50 CE 6C                        dw      QHEAPP
 580+ 6D52 F3 63                        dw      ZBRANCH
 581+ 6D54 08 00                        dw      ToName_Skip - $
 582+ 6D56 72 69 C3 6C                  dw          FETCH, FAR
 583+ 6D5A BD 68                        dw          CELL_MINUS
 584+ 6D5C              ToName_Skip:                                    // endif
 585+ 6D5C
 586+ 6D5C AA 68                        dw      ONE_SUBTRACT            // 1-
 587+ 6D5E 80 6A                        dw      NEG_ONE                 // -1
 588+ 6D60 5D 6C                        dw      TRAVERSE                // traverse
 589+ 6D62 3D 68                        dw      EXIT                    // ;
 590+ 6D64
 591+ 6D64              //  ______________________________________________________________________
 592+ 6D64              //
 593+ 6D64              // cfa          pfa -- cfa
 594+ 6D64                              Colon_Def CFA, "CFA", is_normal
 594+ 6D64             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 594+ 6D64             >
 594+ 6D64             >Dict_Ptr        defl    $
 594+ 6D64             >
 594+ 6D64             >//              ______________________________________________________________________
 594+ 6D64             >//              Heap part
 594+ 6D64             >
 594+ 6D64             >
 594+ 6D64             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6C5             >
 594+ E6C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6C5             >Latest_Definition defl  Heap_Ptr
 594+ E6C5             >
 594+ E6C5             >                // dummy db directives used to calculate length of namec
 594+ E6C5 43 46 41    >                db      "CFA"
 594+ E6C8             >len_NFA         defl    $ - temp_NFA
 594+ E6C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6C5             >
 594+ E6C5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6C6 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 594+ E6C9             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6C8 C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6C9             >
 594+ E6C9 BB 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6CB             >Prev_Ptr        defl    Heap_Ptr
 594+ E6CB             >
 594+ E6CB             >mirror_Ptr      defl    $
 594+ E6CB             >
 594+ E6CB 66 6D       >                dw      Dict_Ptr + 2        // xt
 594+ E6CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6CD             >
 594+ E6CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6CD             >
 594+ E6CD             >//              ______________________________________________________________________
 594+ E6CD             >//              Dictionary part
 594+ E6CD             >
 594+ E6CD             >                org     Dict_Ptr
 594+ 6D64             >
 594+ 6D64 CB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 6D66             >
 594+ 6D66             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 6D66 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 6D69             >
 594+ 6D69             >
 594+ 6D69             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 6D69             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 6D69             >
 594+ 6D69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 6D69 79 6A C8 6B                  dw      THREE, SUBTRACT         // 3 -
 596+ 6D6D 3D 68                        dw      EXIT                    // ;
 597+ 6D6F
 598+ 6D6F              //  ______________________________________________________________________
 599+ 6D6F              //
 600+ 6D6F              // nfa          pfa -- nfa
 601+ 6D6F                              Colon_Def NFA, "NFA", is_normal
 601+ 6D6F             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 601+ 6D6F             >
 601+ 6D6F             >Dict_Ptr        defl    $
 601+ 6D6F             >
 601+ 6D6F             >//              ______________________________________________________________________
 601+ 6D6F             >//              Heap part
 601+ 6D6F             >
 601+ 6D6F             >
 601+ 6D6F             >                org     (Heap_Ptr & $1FFF) + $E000
 601+ E6CD             >
 601+ E6CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ E6CD             >Latest_Definition defl  Heap_Ptr
 601+ E6CD             >
 601+ E6CD             >                // dummy db directives used to calculate length of namec
 601+ E6CD 4E 46 41    >                db      "NFA"
 601+ E6D0             >len_NFA         defl    $ - temp_NFA
 601+ E6D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ E6CD             >
 601+ E6CD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ E6CE 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 601+ E6D1             >                org     $-1                 // alter last byte of Name just above to set
 601+ E6D0 C1          >                db      {b $} | END_BIT     // msb as name end
 601+ E6D1             >
 601+ E6D1 C5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 601+ E6D3             >Prev_Ptr        defl    Heap_Ptr
 601+ E6D3             >
 601+ E6D3             >mirror_Ptr      defl    $
 601+ E6D3             >
 601+ E6D3 71 6D       >                dw      Dict_Ptr + 2        // xt
 601+ E6D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 601+ E6D5             >
 601+ E6D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 601+ E6D5             >
 601+ E6D5             >//              ______________________________________________________________________
 601+ E6D5             >//              Dictionary part
 601+ E6D5             >
 601+ E6D5             >                org     Dict_Ptr
 601+ 6D6F             >
 601+ 6D6F D3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 601+ 6D71             >
 601+ 6D71             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 6D71 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 6D74             >
 601+ 6D74             >
 601+ 6D74             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 6D74             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 6D74             >
 601+ 6D74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 6D74 66 6D                        dw      CFA                     // cfa
 603+ 6D76 47 6D                        dw      TO_NAME                 // traverse
 604+ 6D78 3D 68                        dw      EXIT                    // ;
 605+ 6D7A
 606+ 6D7A              //  ______________________________________________________________________
 607+ 6D7A              //
 608+ 6D7A              // lfa          pfa -- lfa
 609+ 6D7A                              Colon_Def LFA, "LFA", is_normal
 609+ 6D7A             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 609+ 6D7A             >
 609+ 6D7A             >Dict_Ptr        defl    $
 609+ 6D7A             >
 609+ 6D7A             >//              ______________________________________________________________________
 609+ 6D7A             >//              Heap part
 609+ 6D7A             >
 609+ 6D7A             >
 609+ 6D7A             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ E6D5             >
 609+ E6D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ E6D5             >Latest_Definition defl  Heap_Ptr
 609+ E6D5             >
 609+ E6D5             >                // dummy db directives used to calculate length of namec
 609+ E6D5 4C 46 41    >                db      "LFA"
 609+ E6D8             >len_NFA         defl    $ - temp_NFA
 609+ E6D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ E6D5             >
 609+ E6D5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ E6D6 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 609+ E6D9             >                org     $-1                 // alter last byte of Name just above to set
 609+ E6D8 C1          >                db      {b $} | END_BIT     // msb as name end
 609+ E6D9             >
 609+ E6D9 CD 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ E6DB             >Prev_Ptr        defl    Heap_Ptr
 609+ E6DB             >
 609+ E6DB             >mirror_Ptr      defl    $
 609+ E6DB             >
 609+ E6DB 7C 6D       >                dw      Dict_Ptr + 2        // xt
 609+ E6DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ E6DD             >
 609+ E6DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ E6DD             >
 609+ E6DD             >//              ______________________________________________________________________
 609+ E6DD             >//              Dictionary part
 609+ E6DD             >
 609+ E6DD             >                org     Dict_Ptr
 609+ 6D7A             >
 609+ 6D7A DB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 6D7C             >
 609+ 6D7C             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 6D7C CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 6D7F             >
 609+ 6D7F             >
 609+ 6D7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 6D7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 6D7F             >
 609+ 6D7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 6D7F 71 6D                        dw      NFA                     // nfa
 611+ 6D81 6B 6A                        dw      ONE                     // 1
 612+ 6D83 5D 6C                        dw      TRAVERSE                // traverse
 613+ 6D85 A3 68                        dw      ONE_PLUS                // 1+
 614+ 6D87 3D 68                        dw      EXIT                    // ;
 615+ 6D89
 616+ 6D89              //  ______________________________________________________________________
 617+ 6D89              //
 618+ 6D89              // pfa          nfa -- pfa
 619+ 6D89                              Colon_Def PFA, "PFA", is_normal
 619+ 6D89             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 619+ 6D89             >
 619+ 6D89             >Dict_Ptr        defl    $
 619+ 6D89             >
 619+ 6D89             >//              ______________________________________________________________________
 619+ 6D89             >//              Heap part
 619+ 6D89             >
 619+ 6D89             >
 619+ 6D89             >                org     (Heap_Ptr & $1FFF) + $E000
 619+ E6DD             >
 619+ E6DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 619+ E6DD             >Latest_Definition defl  Heap_Ptr
 619+ E6DD             >
 619+ E6DD             >                // dummy db directives used to calculate length of namec
 619+ E6DD 50 46 41    >                db      "PFA"
 619+ E6E0             >len_NFA         defl    $ - temp_NFA
 619+ E6E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 619+ E6DD             >
 619+ E6DD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 619+ E6DE 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 619+ E6E1             >                org     $-1                 // alter last byte of Name just above to set
 619+ E6E0 C1          >                db      {b $} | END_BIT     // msb as name end
 619+ E6E1             >
 619+ E6E1 D5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 619+ E6E3             >Prev_Ptr        defl    Heap_Ptr
 619+ E6E3             >
 619+ E6E3             >mirror_Ptr      defl    $
 619+ E6E3             >
 619+ E6E3 8B 6D       >                dw      Dict_Ptr + 2        // xt
 619+ E6E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 619+ E6E5             >
 619+ E6E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 619+ E6E5             >
 619+ E6E5             >//              ______________________________________________________________________
 619+ E6E5             >//              Dictionary part
 619+ E6E5             >
 619+ E6E5             >                org     Dict_Ptr
 619+ 6D89             >
 619+ 6D89 E3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 619+ 6D8B             >
 619+ 6D8B             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 619+ 6D8B CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 619+ 6D8E             >
 619+ 6D8E             >
 619+ 6D8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 619+ 6D8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 619+ 6D8E             >
 619+ 6D8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 620+ 6D8E E1 6C                        dw      QTOHEAP
 621+ 6D90 6B 6A                        dw      ONE                     // 1
 622+ 6D92 5D 6C                        dw      TRAVERSE                // traverse
 623+ 6D94 A3 68                        dw      ONE_PLUS                // 1+
 624+ 6D96 B9 68                        dw      CELL_PLUS               // cell+
 625+ 6D98 B2 6C                        dw      QMMU7
 626+ 6D9A F3 63                        dw      ZBRANCH
 627+ 6D9C 0E 00                        dw      PFA_Skip - $
 628+ 6D9E 7A 6C                        dw          MMU7_FETCH
 629+ 6DA0 6B 6A C8 6B                  dw          ONE, SUBTRACT
 630+ 6DA4 F3 63                        dw          ZBRANCH
 631+ 6DA6 04 00                        dw          PFA_Skip - $
 632+ 6DA8 72 69                        dw              FETCH
 633+ 6DAA              PFA_Skip:                                    // endif
 634+ 6DAA 3C 6D                        dw      TO_BODY                 // >body
 635+ 6DAC 3D 68                        dw      EXIT                    // ;
 636+ 6DAE
 637+ 6DAE              //  ______________________________________________________________________
 638+ 6DAE              //
 639+ 6DAE              // !csp         --
 640+ 6DAE              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 641+ 6DAE                              Colon_Def STORE_CSP, "!CSP", is_normal
 641+ 6DAE             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 641+ 6DAE             >
 641+ 6DAE             >Dict_Ptr        defl    $
 641+ 6DAE             >
 641+ 6DAE             >//              ______________________________________________________________________
 641+ 6DAE             >//              Heap part
 641+ 6DAE             >
 641+ 6DAE             >
 641+ 6DAE             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ E6E5             >
 641+ E6E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ E6E5             >Latest_Definition defl  Heap_Ptr
 641+ E6E5             >
 641+ E6E5             >                // dummy db directives used to calculate length of namec
 641+ E6E5 21 43 53 50 >                db      "!CSP"
 641+ E6E9             >len_NFA         defl    $ - temp_NFA
 641+ E6E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ E6E5             >
 641+ E6E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ E6E6 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 641+ E6EA             >                org     $-1                 // alter last byte of Name just above to set
 641+ E6E9 D0          >                db      {b $} | END_BIT     // msb as name end
 641+ E6EA             >
 641+ E6EA DD 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ E6EC             >Prev_Ptr        defl    Heap_Ptr
 641+ E6EC             >
 641+ E6EC             >mirror_Ptr      defl    $
 641+ E6EC             >
 641+ E6EC B0 6D       >                dw      Dict_Ptr + 2        // xt
 641+ E6EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ E6EE             >
 641+ E6EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ E6EE             >
 641+ E6EE             >//              ______________________________________________________________________
 641+ E6EE             >//              Dictionary part
 641+ E6EE             >
 641+ E6EE             >                org     Dict_Ptr
 641+ 6DAE             >
 641+ 6DAE EC 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 6DB0             >
 641+ 6DB0             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 6DB0 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 6DB3             >
 641+ 6DB3             >
 641+ 6DB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 6DB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 6DB3             >
 641+ 6DB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 6DB3 24 68                        dw      SPFETCH                 // sp@
 643+ 6DB5 47 6B 7C 69                  dw      CSP, STORE              // csp !
 644+ 6DB9 3D 68                        dw      EXIT                    // ;
 645+ 6DBB
 646+ 6DBB              //  ______________________________________________________________________
 647+ 6DBB              //
 648+ 6DBB              // ?error       f n --
 649+ 6DBB              // raise error n if flag f it true
 650+ 6DBB                              Colon_Def QERROR, "?ERROR", is_normal
 650+ 6DBB             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 650+ 6DBB             >
 650+ 6DBB             >Dict_Ptr        defl    $
 650+ 6DBB             >
 650+ 6DBB             >//              ______________________________________________________________________
 650+ 6DBB             >//              Heap part
 650+ 6DBB             >
 650+ 6DBB             >
 650+ 6DBB             >                org     (Heap_Ptr & $1FFF) + $E000
 650+ E6EE             >
 650+ E6EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 650+ E6EE             >Latest_Definition defl  Heap_Ptr
 650+ E6EE             >
 650+ E6EE             >                // dummy db directives used to calculate length of namec
 650+ E6EE 3F 45 52 52 >                db      "?ERROR"
 650+ E6F2 4F 52       >
 650+ E6F4             >len_NFA         defl    $ - temp_NFA
 650+ E6F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 650+ E6EE             >
 650+ E6EE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 650+ E6EF 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 650+ E6F3 4F 52       >
 650+ E6F5             >                org     $-1                 // alter last byte of Name just above to set
 650+ E6F4 D2          >                db      {b $} | END_BIT     // msb as name end
 650+ E6F5             >
 650+ E6F5 E5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 650+ E6F7             >Prev_Ptr        defl    Heap_Ptr
 650+ E6F7             >
 650+ E6F7             >mirror_Ptr      defl    $
 650+ E6F7             >
 650+ E6F7 BD 6D       >                dw      Dict_Ptr + 2        // xt
 650+ E6F9             >Heap_Ptr        defl    $ - $E000           // save current HP
 650+ E6F9             >
 650+ E6F9             >Current_HP      defl  $ - $E000             // used to set HP once!
 650+ E6F9             >
 650+ E6F9             >//              ______________________________________________________________________
 650+ E6F9             >//              Dictionary part
 650+ E6F9             >
 650+ E6F9             >                org     Dict_Ptr
 650+ 6DBB             >
 650+ 6DBB F7 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 650+ 6DBD             >
 650+ 6DBD             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 650+ 6DBD CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 650+ 6DC0             >
 650+ 6DC0             >
 650+ 6DC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 650+ 6DC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 650+ 6DC0             >
 650+ 6DC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 651+ 6DC0 01 69                        dw      SWAP                    // swap
 652+ 6DC2                                                              // if
 653+ 6DC2 F3 63                        dw      ZBRANCH
 654+ 6DC4 08 00                        dw      QError_Else - $
 655+ 6DC6 00 73                        dw          ERROR               //      error  ( is a forward-ref )
 656+ 6DC8                                                              // else
 657+ 6DC8 EF 63                        dw      BRANCH
 658+ 6DCA 04 00                        dw      QError_Endif - $
 659+ 6DCC              QError_Else:
 660+ 6DCC ED 68                        dw          DROP                //      drop
 661+ 6DCE              QError_Endif:                                   // endif
 662+ 6DCE 3D 68                        dw      EXIT                    // ;
 663+ 6DD0
 664+ 6DD0              //  ______________________________________________________________________
 665+ 6DD0              //
 666+ 6DD0              // ?comp       --
 667+ 6DD0              // raise msg #17 if not compiling
 668+ 6DD0                              Colon_Def QCOMP, "?COMP", is_normal
 668+ 6DD0             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 668+ 6DD0             >
 668+ 6DD0             >Dict_Ptr        defl    $
 668+ 6DD0             >
 668+ 6DD0             >//              ______________________________________________________________________
 668+ 6DD0             >//              Heap part
 668+ 6DD0             >
 668+ 6DD0             >
 668+ 6DD0             >                org     (Heap_Ptr & $1FFF) + $E000
 668+ E6F9             >
 668+ E6F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 668+ E6F9             >Latest_Definition defl  Heap_Ptr
 668+ E6F9             >
 668+ E6F9             >                // dummy db directives used to calculate length of namec
 668+ E6F9 3F 43 4F 4D >                db      "?COMP"
 668+ E6FD 50          >
 668+ E6FE             >len_NFA         defl    $ - temp_NFA
 668+ E6FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 668+ E6F9             >
 668+ E6F9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 668+ E6FA 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 668+ E6FE 50          >
 668+ E6FF             >                org     $-1                 // alter last byte of Name just above to set
 668+ E6FE D0          >                db      {b $} | END_BIT     // msb as name end
 668+ E6FF             >
 668+ E6FF EE 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 668+ E701             >Prev_Ptr        defl    Heap_Ptr
 668+ E701             >
 668+ E701             >mirror_Ptr      defl    $
 668+ E701             >
 668+ E701 D2 6D       >                dw      Dict_Ptr + 2        // xt
 668+ E703             >Heap_Ptr        defl    $ - $E000           // save current HP
 668+ E703             >
 668+ E703             >Current_HP      defl  $ - $E000             // used to set HP once!
 668+ E703             >
 668+ E703             >//              ______________________________________________________________________
 668+ E703             >//              Dictionary part
 668+ E703             >
 668+ E703             >                org     Dict_Ptr
 668+ 6DD0             >
 668+ 6DD0 01 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 668+ 6DD2             >
 668+ 6DD2             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 668+ 6DD2 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 668+ 6DD5             >
 668+ 6DD5             >
 668+ 6DD5             >                endif           ; ok        // for other definitions it "points" the correct handler
 668+ 6DD5             >                // Use of "; ok" to suppress "warning[fwdref]"
 668+ 6DD5             >
 668+ 6DD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 669+ 6DD5 2F 6B 72 69                  dw      STATE, FETCH            // state @
 670+ 6DD9 62 68                        dw      ZEQUAL                  // 0=
 671+ 6DDB A3 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 672+ 6DDF BD 6D                        dw      QERROR                  // ?error
 673+ 6DE1 3D 68                        dw      EXIT                    // ;
 674+ 6DE3
 675+ 6DE3              //  ______________________________________________________________________
 676+ 6DE3              //
 677+ 6DE3              // ?exec       --
 678+ 6DE3              // raise msg #18 if compiling
 679+ 6DE3                              Colon_Def QEXEC, "?EXEC", is_normal
 679+ 6DE3             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 679+ 6DE3             >
 679+ 6DE3             >Dict_Ptr        defl    $
 679+ 6DE3             >
 679+ 6DE3             >//              ______________________________________________________________________
 679+ 6DE3             >//              Heap part
 679+ 6DE3             >
 679+ 6DE3             >
 679+ 6DE3             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E703             >
 679+ E703             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E703             >Latest_Definition defl  Heap_Ptr
 679+ E703             >
 679+ E703             >                // dummy db directives used to calculate length of namec
 679+ E703 3F 45 58 45 >                db      "?EXEC"
 679+ E707 43          >
 679+ E708             >len_NFA         defl    $ - temp_NFA
 679+ E708             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E703             >
 679+ E703 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E704 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 679+ E708 43          >
 679+ E709             >                org     $-1                 // alter last byte of Name just above to set
 679+ E708 C3          >                db      {b $} | END_BIT     // msb as name end
 679+ E709             >
 679+ E709 F9 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E70B             >Prev_Ptr        defl    Heap_Ptr
 679+ E70B             >
 679+ E70B             >mirror_Ptr      defl    $
 679+ E70B             >
 679+ E70B E5 6D       >                dw      Dict_Ptr + 2        // xt
 679+ E70D             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E70D             >
 679+ E70D             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E70D             >
 679+ E70D             >//              ______________________________________________________________________
 679+ E70D             >//              Dictionary part
 679+ E70D             >
 679+ E70D             >                org     Dict_Ptr
 679+ 6DE3             >
 679+ 6DE3 0B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 6DE5             >
 679+ 6DE5             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 6DE5 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 6DE8             >
 679+ 6DE8             >
 679+ 6DE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 6DE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 6DE8             >
 679+ 6DE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 6DE8 2F 6B 72 69                  dw      STATE, FETCH            // state @
 681+ 6DEC A3 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 682+ 6DF0 BD 6D                        dw      QERROR                  // ?error
 683+ 6DF2 3D 68                        dw      EXIT                    // ;
 684+ 6DF4
 685+ 6DF4              //  ______________________________________________________________________
 686+ 6DF4              //
 687+ 6DF4              // ?pairs       n1 n2 --
 688+ 6DF4              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 689+ 6DF4                              Colon_Def QPAIRS, "?PAIRS", is_normal
 689+ 6DF4             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 689+ 6DF4             >
 689+ 6DF4             >Dict_Ptr        defl    $
 689+ 6DF4             >
 689+ 6DF4             >//              ______________________________________________________________________
 689+ 6DF4             >//              Heap part
 689+ 6DF4             >
 689+ 6DF4             >
 689+ 6DF4             >                org     (Heap_Ptr & $1FFF) + $E000
 689+ E70D             >
 689+ E70D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 689+ E70D             >Latest_Definition defl  Heap_Ptr
 689+ E70D             >
 689+ E70D             >                // dummy db directives used to calculate length of namec
 689+ E70D 3F 50 41 49 >                db      "?PAIRS"
 689+ E711 52 53       >
 689+ E713             >len_NFA         defl    $ - temp_NFA
 689+ E713             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 689+ E70D             >
 689+ E70D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 689+ E70E 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 689+ E712 52 53       >
 689+ E714             >                org     $-1                 // alter last byte of Name just above to set
 689+ E713 D3          >                db      {b $} | END_BIT     // msb as name end
 689+ E714             >
 689+ E714 03 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 689+ E716             >Prev_Ptr        defl    Heap_Ptr
 689+ E716             >
 689+ E716             >mirror_Ptr      defl    $
 689+ E716             >
 689+ E716 F6 6D       >                dw      Dict_Ptr + 2        // xt
 689+ E718             >Heap_Ptr        defl    $ - $E000           // save current HP
 689+ E718             >
 689+ E718             >Current_HP      defl  $ - $E000             // used to set HP once!
 689+ E718             >
 689+ E718             >//              ______________________________________________________________________
 689+ E718             >//              Dictionary part
 689+ E718             >
 689+ E718             >                org     Dict_Ptr
 689+ 6DF4             >
 689+ 6DF4 16 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 689+ 6DF6             >
 689+ 6DF6             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 689+ 6DF6 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 689+ 6DF9             >
 689+ 6DF9             >
 689+ 6DF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 689+ 6DF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 689+ 6DF9             >
 689+ 6DF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 690+ 6DF9 C8 6B                        dw      SUBTRACT                // -
 691+ 6DFB A3 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 692+ 6DFF BD 6D                        dw      QERROR                  // ?error
 693+ 6E01 3D 68                        dw      EXIT                    // ;
 694+ 6E03
 695+ 6E03              //  ______________________________________________________________________
 696+ 6E03              //
 697+ 6E03              // ?csp       --
 698+ 6E03              // raise msg #20 if surrent SP in not what previously saved in CSP.
 699+ 6E03              // Compiler relies on that for  syntax checking of structures
 700+ 6E03                              Colon_Def QCSP, "?CSP", is_normal
 700+ 6E03             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 700+ 6E03             >
 700+ 6E03             >Dict_Ptr        defl    $
 700+ 6E03             >
 700+ 6E03             >//              ______________________________________________________________________
 700+ 6E03             >//              Heap part
 700+ 6E03             >
 700+ 6E03             >
 700+ 6E03             >                org     (Heap_Ptr & $1FFF) + $E000
 700+ E718             >
 700+ E718             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 700+ E718             >Latest_Definition defl  Heap_Ptr
 700+ E718             >
 700+ E718             >                // dummy db directives used to calculate length of namec
 700+ E718 3F 43 53 50 >                db      "?CSP"
 700+ E71C             >len_NFA         defl    $ - temp_NFA
 700+ E71C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 700+ E718             >
 700+ E718 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 700+ E719 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 700+ E71D             >                org     $-1                 // alter last byte of Name just above to set
 700+ E71C D0          >                db      {b $} | END_BIT     // msb as name end
 700+ E71D             >
 700+ E71D 0D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 700+ E71F             >Prev_Ptr        defl    Heap_Ptr
 700+ E71F             >
 700+ E71F             >mirror_Ptr      defl    $
 700+ E71F             >
 700+ E71F 05 6E       >                dw      Dict_Ptr + 2        // xt
 700+ E721             >Heap_Ptr        defl    $ - $E000           // save current HP
 700+ E721             >
 700+ E721             >Current_HP      defl  $ - $E000             // used to set HP once!
 700+ E721             >
 700+ E721             >//              ______________________________________________________________________
 700+ E721             >//              Dictionary part
 700+ E721             >
 700+ E721             >                org     Dict_Ptr
 700+ 6E03             >
 700+ 6E03 1F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 700+ 6E05             >
 700+ 6E05             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 700+ 6E05 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 700+ 6E08             >
 700+ 6E08             >
 700+ 6E08             >                endif           ; ok        // for other definitions it "points" the correct handler
 700+ 6E08             >                // Use of "; ok" to suppress "warning[fwdref]"
 700+ 6E08             >
 700+ 6E08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 701+ 6E08 24 68                        dw      SPFETCH                 // sp@
 702+ 6E0A 47 6B 72 69                  dw      CSP, FETCH              // csp @
 703+ 6E0E C8 6B                        dw      SUBTRACT                // -
 704+ 6E10 A3 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 705+ 6E14 BD 6D                        dw      QERROR                  // ?error
 706+ 6E16 3D 68                        dw      EXIT                    // ;
 707+ 6E18
 708+ 6E18              //  ______________________________________________________________________
 709+ 6E18              //
 710+ 6E18              // ?loading      --
 711+ 6E18              // raise msg #22 if not loading
 712+ 6E18                              Colon_Def QLOADING, "?LOADING", is_normal
 712+ 6E18             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 712+ 6E18             >
 712+ 6E18             >Dict_Ptr        defl    $
 712+ 6E18             >
 712+ 6E18             >//              ______________________________________________________________________
 712+ 6E18             >//              Heap part
 712+ 6E18             >
 712+ 6E18             >
 712+ 6E18             >                org     (Heap_Ptr & $1FFF) + $E000
 712+ E721             >
 712+ E721             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ E721             >Latest_Definition defl  Heap_Ptr
 712+ E721             >
 712+ E721             >                // dummy db directives used to calculate length of namec
 712+ E721 3F 4C 4F 41 >                db      "?LOADING"
 712+ E725 44 49 4E 47 >
 712+ E729             >len_NFA         defl    $ - temp_NFA
 712+ E729             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ E721             >
 712+ E721 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ E722 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 712+ E726 44 49 4E 47 >
 712+ E72A             >                org     $-1                 // alter last byte of Name just above to set
 712+ E729 C7          >                db      {b $} | END_BIT     // msb as name end
 712+ E72A             >
 712+ E72A 18 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 712+ E72C             >Prev_Ptr        defl    Heap_Ptr
 712+ E72C             >
 712+ E72C             >mirror_Ptr      defl    $
 712+ E72C             >
 712+ E72C 1A 6E       >                dw      Dict_Ptr + 2        // xt
 712+ E72E             >Heap_Ptr        defl    $ - $E000           // save current HP
 712+ E72E             >
 712+ E72E             >Current_HP      defl  $ - $E000             // used to set HP once!
 712+ E72E             >
 712+ E72E             >//              ______________________________________________________________________
 712+ E72E             >//              Dictionary part
 712+ E72E             >
 712+ E72E             >                org     Dict_Ptr
 712+ 6E18             >
 712+ 6E18 2C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 712+ 6E1A             >
 712+ 6E1A             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 6E1A CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 6E1D             >
 712+ 6E1D             >
 712+ 6E1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 6E1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 6E1D             >
 712+ 6E1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 6E1D 05 6B 72 69                  dw      BLK, FETCH              // blk @
 714+ 6E21 62 68                        dw      ZEQUAL                  // 0=
 715+ 6E23 A3 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 716+ 6E27 BD 6D                        dw      QERROR                  // ?error
 717+ 6E29 3D 68                        dw      EXIT                    // ;
 718+ 6E2B
 719+ 6E2B              //  ______________________________________________________________________
 720+ 6E2B              //
 721+ 6E2B              // compile      --
 722+ 6E2B              // compiles the following word
 723+ 6E2B                              Colon_Def COMPILE, "COMPILE", is_normal
 723+ 6E2B             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 723+ 6E2B             >
 723+ 6E2B             >Dict_Ptr        defl    $
 723+ 6E2B             >
 723+ 6E2B             >//              ______________________________________________________________________
 723+ 6E2B             >//              Heap part
 723+ 6E2B             >
 723+ 6E2B             >
 723+ 6E2B             >                org     (Heap_Ptr & $1FFF) + $E000
 723+ E72E             >
 723+ E72E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 723+ E72E             >Latest_Definition defl  Heap_Ptr
 723+ E72E             >
 723+ E72E             >                // dummy db directives used to calculate length of namec
 723+ E72E 43 4F 4D 50 >                db      "COMPILE"
 723+ E732 49 4C 45    >
 723+ E735             >len_NFA         defl    $ - temp_NFA
 723+ E735             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 723+ E72E             >
 723+ E72E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 723+ E72F 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 723+ E733 49 4C 45    >
 723+ E736             >                org     $-1                 // alter last byte of Name just above to set
 723+ E735 C5          >                db      {b $} | END_BIT     // msb as name end
 723+ E736             >
 723+ E736 21 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 723+ E738             >Prev_Ptr        defl    Heap_Ptr
 723+ E738             >
 723+ E738             >mirror_Ptr      defl    $
 723+ E738             >
 723+ E738 2D 6E       >                dw      Dict_Ptr + 2        // xt
 723+ E73A             >Heap_Ptr        defl    $ - $E000           // save current HP
 723+ E73A             >
 723+ E73A             >Current_HP      defl  $ - $E000             // used to set HP once!
 723+ E73A             >
 723+ E73A             >//              ______________________________________________________________________
 723+ E73A             >//              Dictionary part
 723+ E73A             >
 723+ E73A             >                org     Dict_Ptr
 723+ 6E2B             >
 723+ 6E2B 38 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 723+ 6E2D             >
 723+ 6E2D             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 723+ 6E2D CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 723+ 6E30             >
 723+ 6E30             >
 723+ 6E30             >                endif           ; ok        // for other definitions it "points" the correct handler
 723+ 6E30             >                // Use of "; ok" to suppress "warning[fwdref]"
 723+ 6E30             >
 723+ 6E30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 724+ 6E30 D2 6D                        dw      QCOMP                   // ?comp
 725+ 6E32 52 68                        dw      R_TO                    // r>
 726+ 6E34 08 69 B9 68                  dw      DUP, CELL_PLUS          // dup, cell+
 727+ 6E38 47 68                        dw      TO_R                    // >r
 728+ 6E3A 72 69 9F 6B                  dw      FETCH, COMMA            // @ ,
 729+ 6E3E 3D 68                        dw      EXIT                    // ;
 730+ 6E40
 731+ 6E40              //  ______________________________________________________________________
 732+ 6E40              //
 733+ 6E40              // compile,     --
 734+ 6E40              // compiles the following word
 735+ 6E40                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 735+ 6E40             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 735+ 6E40             >
 735+ 6E40             >Dict_Ptr        defl    $
 735+ 6E40             >
 735+ 6E40             >//              ______________________________________________________________________
 735+ 6E40             >//              Heap part
 735+ 6E40             >
 735+ 6E40             >
 735+ 6E40             >                org     (Heap_Ptr & $1FFF) + $E000
 735+ E73A             >
 735+ E73A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 735+ E73A             >Latest_Definition defl  Heap_Ptr
 735+ E73A             >
 735+ E73A             >                // dummy db directives used to calculate length of namec
 735+ E73A 43 4F 4D 50 >                db      "COMPILE,"
 735+ E73E 49 4C 45 2C >
 735+ E742             >len_NFA         defl    $ - temp_NFA
 735+ E742             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 735+ E73A             >
 735+ E73A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 735+ E73B 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 735+ E73F 49 4C 45 2C >
 735+ E743             >                org     $-1                 // alter last byte of Name just above to set
 735+ E742 AC          >                db      {b $} | END_BIT     // msb as name end
 735+ E743             >
 735+ E743 2E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 735+ E745             >Prev_Ptr        defl    Heap_Ptr
 735+ E745             >
 735+ E745             >mirror_Ptr      defl    $
 735+ E745             >
 735+ E745 42 6E       >                dw      Dict_Ptr + 2        // xt
 735+ E747             >Heap_Ptr        defl    $ - $E000           // save current HP
 735+ E747             >
 735+ E747             >Current_HP      defl  $ - $E000             // used to set HP once!
 735+ E747             >
 735+ E747             >//              ______________________________________________________________________
 735+ E747             >//              Dictionary part
 735+ E747             >
 735+ E747             >                org     Dict_Ptr
 735+ 6E40             >
 735+ 6E40 45 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 735+ 6E42             >
 735+ 6E42             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 735+ 6E42 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 735+ 6E45             >
 735+ 6E45             >
 735+ 6E45             >                endif           ; ok        // for other definitions it "points" the correct handler
 735+ 6E45             >                // Use of "; ok" to suppress "warning[fwdref]"
 735+ 6E45             >
 735+ 6E45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 736+ 6E45              //              dw      QCOMP                   // ?comp
 737+ 6E45 9F 6B                        dw      COMMA                   // ,
 738+ 6E47 3D 68                        dw      EXIT                    // ;
 739+ 6E49
 740+ 6E49              //  ______________________________________________________________________
 741+ 6E49              //
 742+ 6E49              // [            --
 743+ 6E49              // stop compilation
 744+ 6E49                              Colon_Def SQUARED_OPEN, "[", is_immediate
 744+ 6E49             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 744+ 6E49             >
 744+ 6E49             >Dict_Ptr        defl    $
 744+ 6E49             >
 744+ 6E49             >//              ______________________________________________________________________
 744+ 6E49             >//              Heap part
 744+ 6E49             >
 744+ 6E49             >
 744+ 6E49             >                org     (Heap_Ptr & $1FFF) + $E000
 744+ E747             >
 744+ E747             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 744+ E747             >Latest_Definition defl  Heap_Ptr
 744+ E747             >
 744+ E747             >                // dummy db directives used to calculate length of namec
 744+ E747 5B          >                db      "["
 744+ E748             >len_NFA         defl    $ - temp_NFA
 744+ E748             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 744+ E747             >
 744+ E747 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 744+ E748 5B          >                db      "["               // name string in 7-bit ascii, but
 744+ E749             >                org     $-1                 // alter last byte of Name just above to set
 744+ E748 DB          >                db      {b $} | END_BIT     // msb as name end
 744+ E749             >
 744+ E749 3A 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 744+ E74B             >Prev_Ptr        defl    Heap_Ptr
 744+ E74B             >
 744+ E74B             >mirror_Ptr      defl    $
 744+ E74B             >
 744+ E74B 4B 6E       >                dw      Dict_Ptr + 2        // xt
 744+ E74D             >Heap_Ptr        defl    $ - $E000           // save current HP
 744+ E74D             >
 744+ E74D             >Current_HP      defl  $ - $E000             // used to set HP once!
 744+ E74D             >
 744+ E74D             >//              ______________________________________________________________________
 744+ E74D             >//              Dictionary part
 744+ E74D             >
 744+ E74D             >                org     Dict_Ptr
 744+ 6E49             >
 744+ 6E49 4B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 744+ 6E4B             >
 744+ 6E4B             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 744+ 6E4B CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 744+ 6E4E             >
 744+ 6E4E             >
 744+ 6E4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 744+ 6E4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 744+ 6E4E             >
 744+ 6E4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 745+ 6E4E 64 6A                        dw      ZERO                    // 0
 746+ 6E50 2F 6B 7C 69                  dw      STATE, STORE            // state !
 747+ 6E54 3D 68                        dw      EXIT                    // ; immediate
 748+ 6E56
 749+ 6E56              //  ______________________________________________________________________
 750+ 6E56              //
 751+ 6E56              // ]            --
 752+ 6E56              // start compilation
 753+ 6E56                              Colon_Def SQUARED_CLOSE, "]", is_normal
 753+ 6E56             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 753+ 6E56             >
 753+ 6E56             >Dict_Ptr        defl    $
 753+ 6E56             >
 753+ 6E56             >//              ______________________________________________________________________
 753+ 6E56             >//              Heap part
 753+ 6E56             >
 753+ 6E56             >
 753+ 6E56             >                org     (Heap_Ptr & $1FFF) + $E000
 753+ E74D             >
 753+ E74D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 753+ E74D             >Latest_Definition defl  Heap_Ptr
 753+ E74D             >
 753+ E74D             >                // dummy db directives used to calculate length of namec
 753+ E74D 5D          >                db      "]"
 753+ E74E             >len_NFA         defl    $ - temp_NFA
 753+ E74E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 753+ E74D             >
 753+ E74D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 753+ E74E 5D          >                db      "]"               // name string in 7-bit ascii, but
 753+ E74F             >                org     $-1                 // alter last byte of Name just above to set
 753+ E74E DD          >                db      {b $} | END_BIT     // msb as name end
 753+ E74F             >
 753+ E74F 47 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 753+ E751             >Prev_Ptr        defl    Heap_Ptr
 753+ E751             >
 753+ E751             >mirror_Ptr      defl    $
 753+ E751             >
 753+ E751 58 6E       >                dw      Dict_Ptr + 2        // xt
 753+ E753             >Heap_Ptr        defl    $ - $E000           // save current HP
 753+ E753             >
 753+ E753             >Current_HP      defl  $ - $E000             // used to set HP once!
 753+ E753             >
 753+ E753             >//              ______________________________________________________________________
 753+ E753             >//              Dictionary part
 753+ E753             >
 753+ E753             >                org     Dict_Ptr
 753+ 6E56             >
 753+ 6E56 51 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 753+ 6E58             >
 753+ 6E58             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 753+ 6E58 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 753+ 6E5B             >
 753+ 6E5B             >
 753+ 6E5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 753+ 6E5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 753+ 6E5B             >
 753+ 6E5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 754+ 6E5B A3 63 C0 00                  dw      LIT, $C0                // 192
 755+ 6E5F 2F 6B 7C 69                  dw      STATE, STORE            // state !
 756+ 6E63 3D 68                        dw      EXIT                    // ;
 757+ 6E65
 758+ 6E65              //  ______________________________________________________________________
 759+ 6E65              //
 760+ 6E65              // smudge       --
 761+ 6E65              // toggle smudge bit of latest definition
 762+ 6E65                              Colon_Def SMUDGE, "SMUDGE", is_normal
 762+ 6E65             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 762+ 6E65             >
 762+ 6E65             >Dict_Ptr        defl    $
 762+ 6E65             >
 762+ 6E65             >//              ______________________________________________________________________
 762+ 6E65             >//              Heap part
 762+ 6E65             >
 762+ 6E65             >
 762+ 6E65             >                org     (Heap_Ptr & $1FFF) + $E000
 762+ E753             >
 762+ E753             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 762+ E753             >Latest_Definition defl  Heap_Ptr
 762+ E753             >
 762+ E753             >                // dummy db directives used to calculate length of namec
 762+ E753 53 4D 55 44 >                db      "SMUDGE"
 762+ E757 47 45       >
 762+ E759             >len_NFA         defl    $ - temp_NFA
 762+ E759             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 762+ E753             >
 762+ E753 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 762+ E754 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 762+ E758 47 45       >
 762+ E75A             >                org     $-1                 // alter last byte of Name just above to set
 762+ E759 C5          >                db      {b $} | END_BIT     // msb as name end
 762+ E75A             >
 762+ E75A 4D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 762+ E75C             >Prev_Ptr        defl    Heap_Ptr
 762+ E75C             >
 762+ E75C             >mirror_Ptr      defl    $
 762+ E75C             >
 762+ E75C 67 6E       >                dw      Dict_Ptr + 2        // xt
 762+ E75E             >Heap_Ptr        defl    $ - $E000           // save current HP
 762+ E75E             >
 762+ E75E             >Current_HP      defl  $ - $E000             // used to set HP once!
 762+ E75E             >
 762+ E75E             >//              ______________________________________________________________________
 762+ E75E             >//              Dictionary part
 762+ E75E             >
 762+ E75E             >                org     Dict_Ptr
 762+ 6E65             >
 762+ 6E65 5C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 762+ 6E67             >
 762+ 6E67             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 762+ 6E67 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 762+ 6E6A             >
 762+ 6E6A             >
 762+ 6E6A             >                endif           ; ok        // for other definitions it "points" the correct handler
 762+ 6E6A             >                // Use of "; ok" to suppress "warning[fwdref]"
 762+ 6E6A             >
 762+ 6E6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 763+ 6E6A 2D 6D                        dw      LATEST                  // latest
 764+ 6E6C A3 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 765+ 6E70 69 69                        dw      TOGGLE                  // toggle
 766+ 6E72 3D 68                        dw      EXIT                    // ;
 767+ 6E74
 768+ 6E74              //  ______________________________________________________________________
 769+ 6E74              //
 770+ 6E74              // immediate    --
 771+ 6E74              // make immediate the latest definition
 772+ 6E74                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 772+ 6E74             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 772+ 6E74             >
 772+ 6E74             >Dict_Ptr        defl    $
 772+ 6E74             >
 772+ 6E74             >//              ______________________________________________________________________
 772+ 6E74             >//              Heap part
 772+ 6E74             >
 772+ 6E74             >
 772+ 6E74             >                org     (Heap_Ptr & $1FFF) + $E000
 772+ E75E             >
 772+ E75E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ E75E             >Latest_Definition defl  Heap_Ptr
 772+ E75E             >
 772+ E75E             >                // dummy db directives used to calculate length of namec
 772+ E75E 49 4D 4D 45 >                db      "IMMEDIATE"
 772+ E762 44 49 41 54 >
 772+ E766 45          >
 772+ E767             >len_NFA         defl    $ - temp_NFA
 772+ E767             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ E75E             >
 772+ E75E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ E75F 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 772+ E763 44 49 41 54 >
 772+ E767 45          >
 772+ E768             >                org     $-1                 // alter last byte of Name just above to set
 772+ E767 C5          >                db      {b $} | END_BIT     // msb as name end
 772+ E768             >
 772+ E768 53 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 772+ E76A             >Prev_Ptr        defl    Heap_Ptr
 772+ E76A             >
 772+ E76A             >mirror_Ptr      defl    $
 772+ E76A             >
 772+ E76A 76 6E       >                dw      Dict_Ptr + 2        // xt
 772+ E76C             >Heap_Ptr        defl    $ - $E000           // save current HP
 772+ E76C             >
 772+ E76C             >Current_HP      defl  $ - $E000             // used to set HP once!
 772+ E76C             >
 772+ E76C             >//              ______________________________________________________________________
 772+ E76C             >//              Dictionary part
 772+ E76C             >
 772+ E76C             >                org     Dict_Ptr
 772+ 6E74             >
 772+ 6E74 6A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 772+ 6E76             >
 772+ 6E76             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 6E76 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 6E79             >
 772+ 6E79             >
 772+ 6E79             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 6E79             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 6E79             >
 772+ 6E79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 6E79 2D 6D                        dw      LATEST                  // latest
 774+ 6E7B A3 63 40 00                  dw      LIT, IMMEDIATE_BIT      // 64
 775+ 6E7F 69 69                        dw      TOGGLE                  // toggle
 776+ 6E81 3D 68                        dw      EXIT                    // ;
 777+ 6E83
 778+ 6E83              //  ______________________________________________________________________
 779+ 6E83              //
 780+ 6E83              // hex          --
 781+ 6E83              // change numeration base
 782+ 6E83                              Colon_Def HEX, "HEX", is_normal
 782+ 6E83             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 782+ 6E83             >
 782+ 6E83             >Dict_Ptr        defl    $
 782+ 6E83             >
 782+ 6E83             >//              ______________________________________________________________________
 782+ 6E83             >//              Heap part
 782+ 6E83             >
 782+ 6E83             >
 782+ 6E83             >                org     (Heap_Ptr & $1FFF) + $E000
 782+ E76C             >
 782+ E76C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 782+ E76C             >Latest_Definition defl  Heap_Ptr
 782+ E76C             >
 782+ E76C             >                // dummy db directives used to calculate length of namec
 782+ E76C 48 45 58    >                db      "HEX"
 782+ E76F             >len_NFA         defl    $ - temp_NFA
 782+ E76F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 782+ E76C             >
 782+ E76C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 782+ E76D 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 782+ E770             >                org     $-1                 // alter last byte of Name just above to set
 782+ E76F D8          >                db      {b $} | END_BIT     // msb as name end
 782+ E770             >
 782+ E770 5E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 782+ E772             >Prev_Ptr        defl    Heap_Ptr
 782+ E772             >
 782+ E772             >mirror_Ptr      defl    $
 782+ E772             >
 782+ E772 85 6E       >                dw      Dict_Ptr + 2        // xt
 782+ E774             >Heap_Ptr        defl    $ - $E000           // save current HP
 782+ E774             >
 782+ E774             >Current_HP      defl  $ - $E000             // used to set HP once!
 782+ E774             >
 782+ E774             >//              ______________________________________________________________________
 782+ E774             >//              Dictionary part
 782+ E774             >
 782+ E774             >                org     Dict_Ptr
 782+ 6E83             >
 782+ 6E83 72 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 782+ 6E85             >
 782+ 6E85             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 782+ 6E85 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 782+ 6E88             >
 782+ 6E88             >
 782+ 6E88             >                endif           ; ok        // for other definitions it "points" the correct handler
 782+ 6E88             >                // Use of "; ok" to suppress "warning[fwdref]"
 782+ 6E88             >
 782+ 6E88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 783+ 6E88 A3 63 10 00                  dw      LIT, 16                 // 16
 784+ 6E8C 35 6B 7C 69                  dw      BASE, STORE             // base !
 785+ 6E90 3D 68                        dw      EXIT                    // ;
 786+ 6E92
 787+ 6E92              //  ______________________________________________________________________
 788+ 6E92              //
 789+ 6E92              // decimal      --
 790+ 6E92              // change numeration base
 791+ 6E92                              Colon_Def DECIMAL, "DECIMAL", is_normal
 791+ 6E92             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 791+ 6E92             >
 791+ 6E92             >Dict_Ptr        defl    $
 791+ 6E92             >
 791+ 6E92             >//              ______________________________________________________________________
 791+ 6E92             >//              Heap part
 791+ 6E92             >
 791+ 6E92             >
 791+ 6E92             >                org     (Heap_Ptr & $1FFF) + $E000
 791+ E774             >
 791+ E774             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 791+ E774             >Latest_Definition defl  Heap_Ptr
 791+ E774             >
 791+ E774             >                // dummy db directives used to calculate length of namec
 791+ E774 44 45 43 49 >                db      "DECIMAL"
 791+ E778 4D 41 4C    >
 791+ E77B             >len_NFA         defl    $ - temp_NFA
 791+ E77B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 791+ E774             >
 791+ E774 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 791+ E775 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 791+ E779 4D 41 4C    >
 791+ E77C             >                org     $-1                 // alter last byte of Name just above to set
 791+ E77B CC          >                db      {b $} | END_BIT     // msb as name end
 791+ E77C             >
 791+ E77C 6C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 791+ E77E             >Prev_Ptr        defl    Heap_Ptr
 791+ E77E             >
 791+ E77E             >mirror_Ptr      defl    $
 791+ E77E             >
 791+ E77E 94 6E       >                dw      Dict_Ptr + 2        // xt
 791+ E780             >Heap_Ptr        defl    $ - $E000           // save current HP
 791+ E780             >
 791+ E780             >Current_HP      defl  $ - $E000             // used to set HP once!
 791+ E780             >
 791+ E780             >//              ______________________________________________________________________
 791+ E780             >//              Dictionary part
 791+ E780             >
 791+ E780             >                org     Dict_Ptr
 791+ 6E92             >
 791+ 6E92 7E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 791+ 6E94             >
 791+ 6E94             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 791+ 6E94 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 791+ 6E97             >
 791+ 6E97             >
 791+ 6E97             >                endif           ; ok        // for other definitions it "points" the correct handler
 791+ 6E97             >                // Use of "; ok" to suppress "warning[fwdref]"
 791+ 6E97             >
 791+ 6E97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 792+ 6E97 A3 63 0A 00                  dw      LIT, 10                 // 10
 793+ 6E9B 35 6B 7C 69                  dw      BASE, STORE             // base !
 794+ 6E9F 3D 68                        dw      EXIT                    // ;
 795+ 6EA1
 796+ 6EA1              //  ______________________________________________________________________
 797+ 6EA1              //
 798+ 6EA1              // (;code)       --
 799+ 6EA1              // patch to CFA to call/jump to the "following code"
 800+ 6EA1                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 800+ 6EA1             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 800+ 6EA1             >
 800+ 6EA1             >Dict_Ptr        defl    $
 800+ 6EA1             >
 800+ 6EA1             >//              ______________________________________________________________________
 800+ 6EA1             >//              Heap part
 800+ 6EA1             >
 800+ 6EA1             >
 800+ 6EA1             >                org     (Heap_Ptr & $1FFF) + $E000
 800+ E780             >
 800+ E780             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 800+ E780             >Latest_Definition defl  Heap_Ptr
 800+ E780             >
 800+ E780             >                // dummy db directives used to calculate length of namec
 800+ E780 28 3B 43 4F >                db      "(;CODE)"
 800+ E784 44 45 29    >
 800+ E787             >len_NFA         defl    $ - temp_NFA
 800+ E787             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 800+ E780             >
 800+ E780 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 800+ E781 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 800+ E785 44 45 29    >
 800+ E788             >                org     $-1                 // alter last byte of Name just above to set
 800+ E787 A9          >                db      {b $} | END_BIT     // msb as name end
 800+ E788             >
 800+ E788 74 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 800+ E78A             >Prev_Ptr        defl    Heap_Ptr
 800+ E78A             >
 800+ E78A             >mirror_Ptr      defl    $
 800+ E78A             >
 800+ E78A A3 6E       >                dw      Dict_Ptr + 2        // xt
 800+ E78C             >Heap_Ptr        defl    $ - $E000           // save current HP
 800+ E78C             >
 800+ E78C             >Current_HP      defl  $ - $E000             // used to set HP once!
 800+ E78C             >
 800+ E78C             >//              ______________________________________________________________________
 800+ E78C             >//              Dictionary part
 800+ E78C             >
 800+ E78C             >                org     Dict_Ptr
 800+ 6EA1             >
 800+ 6EA1 8A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 800+ 6EA3             >
 800+ 6EA3             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 800+ 6EA3 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 800+ 6EA6             >
 800+ 6EA6             >
 800+ 6EA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 800+ 6EA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 800+ 6EA6             >
 800+ 6EA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 801+ 6EA6 52 68                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 802+ 6EA8 2D 6D                        dw      LATEST                  // latest   ( Word being defined in this moment )
 803+ 6EAA 8B 6D 66 6D                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 804+ 6EAE
 805+ 6EAE A3 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 806+ 6EB2 E4 68 90 69                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 807+ 6EB6 A3 68                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 808+ 6EB8
 809+ 6EB8 7C 69                        dw      STORE                   // !
 810+ 6EBA 3D 68                        dw      EXIT                    // ;
 811+ 6EBC
 812+ 6EBC              //  ______________________________________________________________________
 813+ 6EBC              //
 814+ 6EBC              // ;code        --
 815+ 6EBC                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 815+ 6EBC             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 815+ 6EBC             >
 815+ 6EBC             >Dict_Ptr        defl    $
 815+ 6EBC             >
 815+ 6EBC             >//              ______________________________________________________________________
 815+ 6EBC             >//              Heap part
 815+ 6EBC             >
 815+ 6EBC             >
 815+ 6EBC             >                org     (Heap_Ptr & $1FFF) + $E000
 815+ E78C             >
 815+ E78C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ E78C             >Latest_Definition defl  Heap_Ptr
 815+ E78C             >
 815+ E78C             >                // dummy db directives used to calculate length of namec
 815+ E78C 3B 43 4F 44 >                db      ";CODE"
 815+ E790 45          >
 815+ E791             >len_NFA         defl    $ - temp_NFA
 815+ E791             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ E78C             >
 815+ E78C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ E78D 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 815+ E791 45          >
 815+ E792             >                org     $-1                 // alter last byte of Name just above to set
 815+ E791 C5          >                db      {b $} | END_BIT     // msb as name end
 815+ E792             >
 815+ E792 80 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 815+ E794             >Prev_Ptr        defl    Heap_Ptr
 815+ E794             >
 815+ E794             >mirror_Ptr      defl    $
 815+ E794             >
 815+ E794 BE 6E       >                dw      Dict_Ptr + 2        // xt
 815+ E796             >Heap_Ptr        defl    $ - $E000           // save current HP
 815+ E796             >
 815+ E796             >Current_HP      defl  $ - $E000             // used to set HP once!
 815+ E796             >
 815+ E796             >//              ______________________________________________________________________
 815+ E796             >//              Dictionary part
 815+ E796             >
 815+ E796             >                org     Dict_Ptr
 815+ 6EBC             >
 815+ 6EBC 94 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 815+ 6EBE             >
 815+ 6EBE             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 6EBE CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 815+ 6EC1             >
 815+ 6EC1             >
 815+ 6EC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 6EC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 6EC1             >
 815+ 6EC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 6EC1 05 6E                        dw      QCSP                    // ?csp
 817+ 6EC3 2D 6E                        dw      COMPILE                 // compile
 818+ 6EC5 A3 6E                        dw      C_SEMICOLON_CODE        // (;code)
 819+ 6EC7 4B 6E                        dw      SQUARED_OPEN            // [
 820+ 6EC9 2B 6A                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 821+ 6ECB 3D 68                        dw      EXIT                    // ; immediate
 822+ 6ECD
 823+ 6ECD              //  ______________________________________________________________________
 824+ 6ECD              //
 825+ 6ECD              // recurse      --
 826+ 6ECD              //              Colon_Def RECURSE, "RECURSE", is_immediate
 827+ 6ECD              //              dw      QCOMP                   // ?comp
 828+ 6ECD              //              dw      LATEST                  // latest
 829+ 6ECD              //              dw      PFA, CFA                // pfa cfa
 830+ 6ECD              //              dw      COMMA                   // ,
 831+ 6ECD              //              dw      EXIT                    // ; immediate
 832+ 6ECD
 833+ 6ECD              //  ______________________________________________________________________
 834+ 6ECD              //
 835+ 6ECD              // <builds     --
 836+ 6ECD                              Colon_Def CBUILDS, "<BUILDS", is_normal
 836+ 6ECD             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 836+ 6ECD             >
 836+ 6ECD             >Dict_Ptr        defl    $
 836+ 6ECD             >
 836+ 6ECD             >//              ______________________________________________________________________
 836+ 6ECD             >//              Heap part
 836+ 6ECD             >
 836+ 6ECD             >
 836+ 6ECD             >                org     (Heap_Ptr & $1FFF) + $E000
 836+ E796             >
 836+ E796             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 836+ E796             >Latest_Definition defl  Heap_Ptr
 836+ E796             >
 836+ E796             >                // dummy db directives used to calculate length of namec
 836+ E796 3C 42 55 49 >                db      "<BUILDS"
 836+ E79A 4C 44 53    >
 836+ E79D             >len_NFA         defl    $ - temp_NFA
 836+ E79D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 836+ E796             >
 836+ E796 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 836+ E797 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 836+ E79B 4C 44 53    >
 836+ E79E             >                org     $-1                 // alter last byte of Name just above to set
 836+ E79D D3          >                db      {b $} | END_BIT     // msb as name end
 836+ E79E             >
 836+ E79E 8C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 836+ E7A0             >Prev_Ptr        defl    Heap_Ptr
 836+ E7A0             >
 836+ E7A0             >mirror_Ptr      defl    $
 836+ E7A0             >
 836+ E7A0 CF 6E       >                dw      Dict_Ptr + 2        // xt
 836+ E7A2             >Heap_Ptr        defl    $ - $E000           // save current HP
 836+ E7A2             >
 836+ E7A2             >Current_HP      defl  $ - $E000             // used to set HP once!
 836+ E7A2             >
 836+ E7A2             >//              ______________________________________________________________________
 836+ E7A2             >//              Dictionary part
 836+ E7A2             >
 836+ E7A2             >                org     Dict_Ptr
 836+ 6ECD             >
 836+ 6ECD A0 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 836+ 6ECF             >
 836+ 6ECF             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 836+ 6ECF CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 836+ 6ED2             >
 836+ 6ED2             >
 836+ 6ED2             >                endif           ; ok        // for other definitions it "points" the correct handler
 836+ 6ED2             >                // Use of "; ok" to suppress "warning[fwdref]"
 836+ 6ED2             >
 836+ 6ED2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 837+ 6ED2 DC 73                        dw      CREATE                  // CREATE
 838+ 6ED4 3D 68                        dw      EXIT                    // ;
 839+ 6ED6
 840+ 6ED6              //  ______________________________________________________________________
 841+ 6ED6              //
 842+ 6ED6              // _does>_     --
 843+ 6ED6                              Colon_Def C_DOES, "_DOES>_", is_normal
 843+ 6ED6             >                New_Def  C_DOES, "_DOES>_", Enter_Ptr, is_normal ; ok
 843+ 6ED6             >
 843+ 6ED6             >Dict_Ptr        defl    $
 843+ 6ED6             >
 843+ 6ED6             >//              ______________________________________________________________________
 843+ 6ED6             >//              Heap part
 843+ 6ED6             >
 843+ 6ED6             >
 843+ 6ED6             >                org     (Heap_Ptr & $1FFF) + $E000
 843+ E7A2             >
 843+ E7A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 843+ E7A2             >Latest_Definition defl  Heap_Ptr
 843+ E7A2             >
 843+ E7A2             >                // dummy db directives used to calculate length of namec
 843+ E7A2 5F 44 4F 45 >                db      "_DOES>_"
 843+ E7A6 53 3E 5F    >
 843+ E7A9             >len_NFA         defl    $ - temp_NFA
 843+ E7A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 843+ E7A2             >
 843+ E7A2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 843+ E7A3 5F 44 4F 45 >                db      "_DOES>_"               // name string in 7-bit ascii, but
 843+ E7A7 53 3E 5F    >
 843+ E7AA             >                org     $-1                 // alter last byte of Name just above to set
 843+ E7A9 DF          >                db      {b $} | END_BIT     // msb as name end
 843+ E7AA             >
 843+ E7AA 96 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 843+ E7AC             >Prev_Ptr        defl    Heap_Ptr
 843+ E7AC             >
 843+ E7AC             >mirror_Ptr      defl    $
 843+ E7AC             >
 843+ E7AC D8 6E       >                dw      Dict_Ptr + 2        // xt
 843+ E7AE             >Heap_Ptr        defl    $ - $E000           // save current HP
 843+ E7AE             >
 843+ E7AE             >Current_HP      defl  $ - $E000             // used to set HP once!
 843+ E7AE             >
 843+ E7AE             >//              ______________________________________________________________________
 843+ E7AE             >//              Dictionary part
 843+ E7AE             >
 843+ E7AE             >                org     Dict_Ptr
 843+ 6ED6             >
 843+ 6ED6 AC 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 843+ 6ED8             >
 843+ 6ED8             >C_DOES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 843+ 6ED8 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 843+ 6EDB             >
 843+ 6EDB             >
 843+ 6EDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 843+ 6EDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 843+ 6EDB             >
 843+ 6EDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 844+ 6EDB 52 68                        dw      R_TO                    // r>
 845+ 6EDD 2D 6D                        dw      LATEST                  // latest
 846+ 6EDF 8B 6D                        dw      PFA                     // pfa
 847+ 6EE1 66 6D A3 68                  dw      CFA, ONE_PLUS           // cfa 1+
 848+ 6EE5 7C 69                        dw      STORE                   // !
 849+ 6EE7 3D 68                        dw      EXIT                    // ;
 850+ 6EE9
 851+ 6EE9              //  ______________________________________________________________________
 852+ 6EE9              //
 853+ 6EE9              // does>     --
 854+ 6EE9                              Colon_Def DOES_TO, "DOES>", is_immediate
 854+ 6EE9             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_immediate ; ok
 854+ 6EE9             >
 854+ 6EE9             >Dict_Ptr        defl    $
 854+ 6EE9             >
 854+ 6EE9             >//              ______________________________________________________________________
 854+ 6EE9             >//              Heap part
 854+ 6EE9             >
 854+ 6EE9             >
 854+ 6EE9             >                org     (Heap_Ptr & $1FFF) + $E000
 854+ E7AE             >
 854+ E7AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 854+ E7AE             >Latest_Definition defl  Heap_Ptr
 854+ E7AE             >
 854+ E7AE             >                // dummy db directives used to calculate length of namec
 854+ E7AE 44 4F 45 53 >                db      "DOES>"
 854+ E7B2 3E          >
 854+ E7B3             >len_NFA         defl    $ - temp_NFA
 854+ E7B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 854+ E7AE             >
 854+ E7AE C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 854+ E7AF 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 854+ E7B3 3E          >
 854+ E7B4             >                org     $-1                 // alter last byte of Name just above to set
 854+ E7B3 BE          >                db      {b $} | END_BIT     // msb as name end
 854+ E7B4             >
 854+ E7B4 A2 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 854+ E7B6             >Prev_Ptr        defl    Heap_Ptr
 854+ E7B6             >
 854+ E7B6             >mirror_Ptr      defl    $
 854+ E7B6             >
 854+ E7B6 EB 6E       >                dw      Dict_Ptr + 2        // xt
 854+ E7B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 854+ E7B8             >
 854+ E7B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 854+ E7B8             >
 854+ E7B8             >//              ______________________________________________________________________
 854+ E7B8             >//              Dictionary part
 854+ E7B8             >
 854+ E7B8             >                org     Dict_Ptr
 854+ 6EE9             >
 854+ 6EE9 B6 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 854+ 6EEB             >
 854+ 6EEB             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 854+ 6EEB CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 854+ 6EEE             >
 854+ 6EEE             >
 854+ 6EEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 854+ 6EEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 854+ 6EEE             >
 854+ 6EEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 855+ 6EEE 2D 6E D8 6E                  dw      COMPILE,  C_DOES
 856+ 6EF2 A3 63 CD 00                  dw      LIT, $CD, CCOMMA
 856+ 6EF6 AE 6B
 857+ 6EF8 A3 63 0F 6A                  dw      LIT, Enter_Ptr, COMMA
 857+ 6EFC 9F 6B
 858+ 6EFE 3D 68                        dw      EXIT
 859+ 6F00
 860+ 6F00              //  ______________________________________________________________________
 861+ 6F00              //
 862+ 6F00              // count        a -- a2 n
 863+ 6F00              // expects a counted string at address a, returns string address and counter
 864+ 6F00                              New_Def COUNT, "COUNT", is_code, is_normal
 864+ 6F00             >
 864+ 6F00             >Dict_Ptr        defl    $
 864+ 6F00             >
 864+ 6F00             >//              ______________________________________________________________________
 864+ 6F00             >//              Heap part
 864+ 6F00             >
 864+ 6F00             >
 864+ 6F00             >                org     (Heap_Ptr & $1FFF) + $E000
 864+ E7B8             >
 864+ E7B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 864+ E7B8             >Latest_Definition defl  Heap_Ptr
 864+ E7B8             >
 864+ E7B8             >                // dummy db directives used to calculate length of namec
 864+ E7B8 43 4F 55 4E >                db      "COUNT"
 864+ E7BC 54          >
 864+ E7BD             >len_NFA         defl    $ - temp_NFA
 864+ E7BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 864+ E7B8             >
 864+ E7B8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 864+ E7B9 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 864+ E7BD 54          >
 864+ E7BE             >                org     $-1                 // alter last byte of Name just above to set
 864+ E7BD D4          >                db      {b $} | END_BIT     // msb as name end
 864+ E7BE             >
 864+ E7BE AE 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 864+ E7C0             >Prev_Ptr        defl    Heap_Ptr
 864+ E7C0             >
 864+ E7C0             >mirror_Ptr      defl    $
 864+ E7C0             >
 864+ E7C0 02 6F       >                dw      Dict_Ptr + 2        // xt
 864+ E7C2             >Heap_Ptr        defl    $ - $E000           // save current HP
 864+ E7C2             >
 864+ E7C2             >Current_HP      defl  $ - $E000             // used to set HP once!
 864+ E7C2             >
 864+ E7C2             >//              ______________________________________________________________________
 864+ E7C2             >//              Dictionary part
 864+ E7C2             >
 864+ E7C2             >                org     Dict_Ptr
 864+ 6F00             >
 864+ 6F00 C0 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 864+ 6F02             >
 864+ 6F02             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 864+ 6F02 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 864+ 6F02 ~           >
 864+ 6F02 ~           >
 864+ 6F02             >                endif           ; ok        // for other definitions it "points" the correct handler
 864+ 6F02             >                // Use of "; ok" to suppress "warning[fwdref]"
 864+ 6F02             >
 864+ 6F02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 865+ 6F02 D9                           exx
 866+ 6F03 E1                           pop     hl
 867+ 6F04 5E                           ld      e, (hl)
 868+ 6F05 16 00                        ld      d, 0
 869+ 6F07 23                           inc     hl
 870+ 6F08              Count_Here:
 871+ 6F08 E5                           push    hl
 872+ 6F09 D5                           push    de
 873+ 6F0A D9                           exx
 874+ 6F0B                              next
 874+ 6F0B DD E9       >                jp      (ix)
 875+ 6F0D              //                pop     hl
 876+ 6F0D              //                ld      a, (hl)
 877+ 6F0D              //                inc     hl
 878+ 6F0D              //                push    hl
 879+ 6F0D              //                ld      h, 0
 880+ 6F0D              //                ld      l, a
 881+ 6F0D              //                push    hl
 882+ 6F0D              //                next
 883+ 6F0D
 884+ 6F0D              //  ______________________________________________________________________
 885+ 6F0D              //
 886+ 6F0D              // bounds       a n -- a+n n
 887+ 6F0D              // given an address and a length ( a n ) calculate the bound addresses
 888+ 6F0D              // suitable for DO-LOOP
 889+ 6F0D                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 889+ 6F0D             >
 889+ 6F0D             >Dict_Ptr        defl    $
 889+ 6F0D             >
 889+ 6F0D             >//              ______________________________________________________________________
 889+ 6F0D             >//              Heap part
 889+ 6F0D             >
 889+ 6F0D             >
 889+ 6F0D             >                org     (Heap_Ptr & $1FFF) + $E000
 889+ E7C2             >
 889+ E7C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 889+ E7C2             >Latest_Definition defl  Heap_Ptr
 889+ E7C2             >
 889+ E7C2             >                // dummy db directives used to calculate length of namec
 889+ E7C2 42 4F 55 4E >                db      "BOUNDS"
 889+ E7C6 44 53       >
 889+ E7C8             >len_NFA         defl    $ - temp_NFA
 889+ E7C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 889+ E7C2             >
 889+ E7C2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 889+ E7C3 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 889+ E7C7 44 53       >
 889+ E7C9             >                org     $-1                 // alter last byte of Name just above to set
 889+ E7C8 D3          >                db      {b $} | END_BIT     // msb as name end
 889+ E7C9             >
 889+ E7C9 B8 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 889+ E7CB             >Prev_Ptr        defl    Heap_Ptr
 889+ E7CB             >
 889+ E7CB             >mirror_Ptr      defl    $
 889+ E7CB             >
 889+ E7CB 0F 6F       >                dw      Dict_Ptr + 2        // xt
 889+ E7CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 889+ E7CD             >
 889+ E7CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 889+ E7CD             >
 889+ E7CD             >//              ______________________________________________________________________
 889+ E7CD             >//              Dictionary part
 889+ E7CD             >
 889+ E7CD             >                org     Dict_Ptr
 889+ 6F0D             >
 889+ 6F0D CB 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 889+ 6F0F             >
 889+ 6F0F             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 889+ 6F0F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 889+ 6F0F ~           >
 889+ 6F0F ~           >
 889+ 6F0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 889+ 6F0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 889+ 6F0F             >
 889+ 6F0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 890+ 6F0F D9                           exx
 891+ 6F10 E1                           pop     hl
 892+ 6F11 D1                           pop     de
 893+ 6F12 19                           add     hl, de
 894+ 6F13 18 F3                        jr      Count_Here
 895+ 6F15                              // push    hl
 896+ 6F15                              // push    de
 897+ 6F15                              // exx
 898+ 6F15                              // next
 899+ 6F15
 900+ 6F15              //  ______________________________________________________________________
 901+ 6F15              //
 902+ 6F15              // leave        --
 903+ 6F15              // Compile (leave) to leave current LOOP and jump just after it
 904+ 6F15                              Colon_Def LEAVE, "LEAVE", is_immediate
 904+ 6F15             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 904+ 6F15             >
 904+ 6F15             >Dict_Ptr        defl    $
 904+ 6F15             >
 904+ 6F15             >//              ______________________________________________________________________
 904+ 6F15             >//              Heap part
 904+ 6F15             >
 904+ 6F15             >
 904+ 6F15             >                org     (Heap_Ptr & $1FFF) + $E000
 904+ E7CD             >
 904+ E7CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 904+ E7CD             >Latest_Definition defl  Heap_Ptr
 904+ E7CD             >
 904+ E7CD             >                // dummy db directives used to calculate length of namec
 904+ E7CD 4C 45 41 56 >                db      "LEAVE"
 904+ E7D1 45          >
 904+ E7D2             >len_NFA         defl    $ - temp_NFA
 904+ E7D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 904+ E7CD             >
 904+ E7CD C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 904+ E7CE 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 904+ E7D2 45          >
 904+ E7D3             >                org     $-1                 // alter last byte of Name just above to set
 904+ E7D2 C5          >                db      {b $} | END_BIT     // msb as name end
 904+ E7D3             >
 904+ E7D3 C2 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 904+ E7D5             >Prev_Ptr        defl    Heap_Ptr
 904+ E7D5             >
 904+ E7D5             >mirror_Ptr      defl    $
 904+ E7D5             >
 904+ E7D5 17 6F       >                dw      Dict_Ptr + 2        // xt
 904+ E7D7             >Heap_Ptr        defl    $ - $E000           // save current HP
 904+ E7D7             >
 904+ E7D7             >Current_HP      defl  $ - $E000             // used to set HP once!
 904+ E7D7             >
 904+ E7D7             >//              ______________________________________________________________________
 904+ E7D7             >//              Dictionary part
 904+ E7D7             >
 904+ E7D7             >                org     Dict_Ptr
 904+ 6F15             >
 904+ 6F15 D5 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 904+ 6F17             >
 904+ 6F17             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 904+ 6F17 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 904+ 6F1A             >
 904+ 6F1A             >
 904+ 6F1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 904+ 6F1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 904+ 6F1A             >
 904+ 6F1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 905+ 6F1A 2D 6E FC 63                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 906+ 6F1E 89 6B 47 68                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 906+ 6F22 64 6A 9F 6B
 907+ 6F26 64 6A 64 6A                  dw      ZERO, ZERO
 908+ 6F2A 24 68 08 69                  dw      SPFETCH, DUP
 909+ 6F2E B9 68 B9 68                  dw      CELL_PLUS, CELL_PLUS
 910+ 6F32 F8 68                        dw      TUCK
 911+ 6F34 47 6B 72 69                  dw      CSP, FETCH
 912+ 6F38 01 69 C8 6B                  dw      SWAP, SUBTRACT
 913+ 6F3C 82 67                        dw      CMOVE
 914+ 6F3E 47 6B 72 69                  dw      CSP, FETCH, CELL_MINUS
 914+ 6F42 BD 68
 915+ 6F44 52 68 E4 68                  dw      R_TO, OVER, STORE
 915+ 6F48 7C 69
 916+ 6F4A BD 68 64 6A                  dw      CELL_MINUS, ZERO
 917+ 6F4E 01 69 7C 69                  dw      SWAP, STORE
 918+ 6F52 3D 68                        dw      EXIT                    // ;
 919+ 6F54
 920+ 6F54              //  ______________________________________________________________________
 921+ 6F54              //
 922+ 6F54              // type         a n --
 923+ 6F54              // Sends to current output channel n characters starting at address a.
 924+ 6F54                              Colon_Def TYPE, "TYPE", is_normal
 924+ 6F54             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 924+ 6F54             >
 924+ 6F54             >Dict_Ptr        defl    $
 924+ 6F54             >
 924+ 6F54             >//              ______________________________________________________________________
 924+ 6F54             >//              Heap part
 924+ 6F54             >
 924+ 6F54             >
 924+ 6F54             >                org     (Heap_Ptr & $1FFF) + $E000
 924+ E7D7             >
 924+ E7D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 924+ E7D7             >Latest_Definition defl  Heap_Ptr
 924+ E7D7             >
 924+ E7D7             >                // dummy db directives used to calculate length of namec
 924+ E7D7 54 59 50 45 >                db      "TYPE"
 924+ E7DB             >len_NFA         defl    $ - temp_NFA
 924+ E7DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 924+ E7D7             >
 924+ E7D7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 924+ E7D8 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 924+ E7DC             >                org     $-1                 // alter last byte of Name just above to set
 924+ E7DB C5          >                db      {b $} | END_BIT     // msb as name end
 924+ E7DC             >
 924+ E7DC CD 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 924+ E7DE             >Prev_Ptr        defl    Heap_Ptr
 924+ E7DE             >
 924+ E7DE             >mirror_Ptr      defl    $
 924+ E7DE             >
 924+ E7DE 56 6F       >                dw      Dict_Ptr + 2        // xt
 924+ E7E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 924+ E7E0             >
 924+ E7E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 924+ E7E0             >
 924+ E7E0             >//              ______________________________________________________________________
 924+ E7E0             >//              Dictionary part
 924+ E7E0             >
 924+ E7E0             >                org     Dict_Ptr
 924+ 6F54             >
 924+ 6F54 DE 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 924+ 6F56             >
 924+ 6F56             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 924+ 6F56 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 924+ 6F59             >
 924+ 6F59             >
 924+ 6F59             >                endif           ; ok        // for other definitions it "points" the correct handler
 924+ 6F59             >                // Use of "; ok" to suppress "warning[fwdref]"
 924+ 6F59             >
 924+ 6F59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 925+ 6F59 0F 6F                        dw      BOUNDS                  // bounds
 926+ 6F5B 06 64                        dw      C_Q_DO                  // ?do
 927+ 6F5D 0C 00                        dw      Type_Skip - $
 928+ 6F5F              Type_Loop:
 929+ 6F5F 32 64 87 69                  dw          I, CFETCH           //      i c@
 930+ 6F63 3B 6C                        dw          EMIT                //      emit
 931+ 6F65 E7 63                        dw      C_LOOP                  // loop
 932+ 6F67 F8 FF                        dw      Type_Loop - $
 933+ 6F69              Type_Skip:
 934+ 6F69 3D 68                        dw      EXIT                    // ;
 935+ 6F6B
 936+ 6F6B              //  ______________________________________________________________________
 937+ 6F6B              //
 938+ 6F6B              // -trailing    a n1 -- a n2
 939+ 6F6B              // Assumes that an n1 bytes-long string is stored at address a
 940+ 6F6B              // and the string contains a space delimited word,
 941+ 6F6B              // Finds n2 as the position of the first character after the word.
 942+ 6F6B                              Colon_Def LTRAILING, "-TRAILING", is_normal
 942+ 6F6B             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 942+ 6F6B             >
 942+ 6F6B             >Dict_Ptr        defl    $
 942+ 6F6B             >
 942+ 6F6B             >//              ______________________________________________________________________
 942+ 6F6B             >//              Heap part
 942+ 6F6B             >
 942+ 6F6B             >
 942+ 6F6B             >                org     (Heap_Ptr & $1FFF) + $E000
 942+ E7E0             >
 942+ E7E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ E7E0             >Latest_Definition defl  Heap_Ptr
 942+ E7E0             >
 942+ E7E0             >                // dummy db directives used to calculate length of namec
 942+ E7E0 2D 54 52 41 >                db      "-TRAILING"
 942+ E7E4 49 4C 49 4E >
 942+ E7E8 47          >
 942+ E7E9             >len_NFA         defl    $ - temp_NFA
 942+ E7E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ E7E0             >
 942+ E7E0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ E7E1 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 942+ E7E5 49 4C 49 4E >
 942+ E7E9 47          >
 942+ E7EA             >                org     $-1                 // alter last byte of Name just above to set
 942+ E7E9 C7          >                db      {b $} | END_BIT     // msb as name end
 942+ E7EA             >
 942+ E7EA D7 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 942+ E7EC             >Prev_Ptr        defl    Heap_Ptr
 942+ E7EC             >
 942+ E7EC             >mirror_Ptr      defl    $
 942+ E7EC             >
 942+ E7EC 6D 6F       >                dw      Dict_Ptr + 2        // xt
 942+ E7EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 942+ E7EE             >
 942+ E7EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 942+ E7EE             >
 942+ E7EE             >//              ______________________________________________________________________
 942+ E7EE             >//              Dictionary part
 942+ E7EE             >
 942+ E7EE             >                org     Dict_Ptr
 942+ 6F6B             >
 942+ 6F6B EC 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 942+ 6F6D             >
 942+ 6F6D             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 6F6D CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 6F70             >
 942+ 6F70             >
 942+ 6F70             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 6F70             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 6F70             >
 942+ 6F70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 6F70 08 69 64 6A                  dw      DUP, ZERO               // dup 0
 944+ 6F74                                                              // do
 945+ 6F74 06 64                        dw      C_Q_DO
 946+ 6F76 20 00                        dw      LTrailing_Leave - $
 947+ 6F78              LTrailing_Loop:
 948+ 6F78 50 69 8A 68                  dw          TWO_DUP, PLUS       //      2dup +
 949+ 6F7C AA 68                        dw          ONE_SUBTRACT        //      1-
 950+ 6F7E 87 69                        dw          CFETCH              //      c@
 951+ 6F80 87 6A C8 6B                  dw          BL, SUBTRACT        //      bl -
 952+ 6F84                                                              //      if
 953+ 6F84 F3 63                        dw          ZBRANCH
 954+ 6F86 0A 00                        dw          LTrailing_Else - $
 955+ 6F88 FC 63                        dw              C_LEAVE         //          leave
 956+ 6F8A 0C 00                        dw              LTrailing_Leave - $
 957+ 6F8C EF 63                        dw          BRANCH              //      else
 958+ 6F8E 04 00                        dw          LTrailing_Endif - $
 959+ 6F90              LTrailing_Else:
 960+ 6F90 AA 68                        dw              ONE_SUBTRACT    //          1-
 961+ 6F92              LTrailing_Endif:                                //      endif
 962+ 6F92                                                              // loop
 963+ 6F92 E7 63                        dw      C_LOOP
 964+ 6F94 E4 FF                        dw      LTrailing_Loop - $
 965+ 6F96              LTrailing_Leave:
 966+ 6F96 3D 68                        dw      EXIT                    // ;
 967+ 6F98
 968+ 6F98              //  ______________________________________________________________________
 969+ 6F98              //
 970+ 6F98              // accept       a n1 -- n2
 971+ 6F98              // Accepts at most n1 characters from terminal and stores them at address a
 972+ 6F98              // CR stops input. A 'nul' is added as trailer.
 973+ 6F98              // n2 is the string length. n2 is kept in span user variable also.
 974+ 6F98                              Colon_Def ACCEPT, "ACCEPT", is_normal
 974+ 6F98             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 974+ 6F98             >
 974+ 6F98             >Dict_Ptr        defl    $
 974+ 6F98             >
 974+ 6F98             >//              ______________________________________________________________________
 974+ 6F98             >//              Heap part
 974+ 6F98             >
 974+ 6F98             >
 974+ 6F98             >                org     (Heap_Ptr & $1FFF) + $E000
 974+ E7EE             >
 974+ E7EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 974+ E7EE             >Latest_Definition defl  Heap_Ptr
 974+ E7EE             >
 974+ E7EE             >                // dummy db directives used to calculate length of namec
 974+ E7EE 41 43 43 45 >                db      "ACCEPT"
 974+ E7F2 50 54       >
 974+ E7F4             >len_NFA         defl    $ - temp_NFA
 974+ E7F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 974+ E7EE             >
 974+ E7EE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 974+ E7EF 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 974+ E7F3 50 54       >
 974+ E7F5             >                org     $-1                 // alter last byte of Name just above to set
 974+ E7F4 D4          >                db      {b $} | END_BIT     // msb as name end
 974+ E7F5             >
 974+ E7F5 E0 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 974+ E7F7             >Prev_Ptr        defl    Heap_Ptr
 974+ E7F7             >
 974+ E7F7             >mirror_Ptr      defl    $
 974+ E7F7             >
 974+ E7F7 9A 6F       >                dw      Dict_Ptr + 2        // xt
 974+ E7F9             >Heap_Ptr        defl    $ - $E000           // save current HP
 974+ E7F9             >
 974+ E7F9             >Current_HP      defl  $ - $E000             // used to set HP once!
 974+ E7F9             >
 974+ E7F9             >//              ______________________________________________________________________
 974+ E7F9             >//              Dictionary part
 974+ E7F9             >
 974+ E7F9             >                org     Dict_Ptr
 974+ 6F98             >
 974+ 6F98 F7 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 974+ 6F9A             >
 974+ 6F9A             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 974+ 6F9A CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 974+ 6F9D             >
 974+ 6F9D             >
 974+ 6F9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 974+ 6F9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 974+ 6F9D             >
 974+ 6F9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 975+ 6F9D E4 68 8A 68                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 975+ 6FA1 E4 68
 976+ 6FA3 64 6A 18 69                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 977+ 6FA7                                                              // do
 978+ 6FA7 06 64                        dw      C_Q_DO
 979+ 6FA9 8C 00                        dw      Accept_Leave - $
 980+ 6FAB              Accept_Loop:
 981+ 6FAB 21 66                        dw          CUR                 //      cur             ( a  0 )
 982+ 6FAD ED 68 69 66                  dw          DROP, KEY           //      drop key        ( a  c )
 983+ 6FB1 08 69                        dw          DUP                 //      dup             ( a  c  c )
 984+ 6FB3 A3 63 0E 00                  dw          LIT, $0E            //      0E
 985+ 6FB7 AA 6A                        dw          PLUS_ORIGIN         //      +origin
 986+ 6FB9 72 69                        dw          FETCH               //      @               ( a  c  c  del )
 987+ 6FBB D4 6B                        dw          EQUALS              //      =               ( a  c  c==del )
 988+ 6FBD                                                              //      if
 989+ 6FBD F3 63                        dw          ZBRANCH
 990+ 6FBF 2C 00                        dw          Accept_Else_0 - $
 991+ 6FC1 ED 68                        dw              DROP            //          drop        ( a  )
 992+ 6FC3 08 69 32 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 992+ 6FC7 D4 6B
 993+ 6FC9 6B 6A FD 67                  dw              ONE, AND_OP     //          1 and
 994+ 6FCD 08 69                        dw              DUP             //          dup         ( a  a==i  a==i )
 995+ 6FCF 52 68                        dw              R_TO            //          r> 2 - + r>
 996+ 6FD1 C5 68 8A 68                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 997+ 6FD5 47 68                        dw              TO_R            //
 998+ 6FD7                                                              //          if
 999+ 6FD7 F3 63                        dw              ZBRANCH
1000+ 6FD9 0A 00                        dw              Accept_Else_1 - $
1001+ 6FDB A3 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1002+ 6FDF                                                              //          else
1003+ 6FDF EF 63                        dw              BRANCH
1004+ 6FE1 06 00                        dw              Accept_Endif_1 - $
1005+ 6FE3              Accept_Else_1:
1006+ 6FE3 A3 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1007+ 6FE7              Accept_Endif_1:                                 //          endif
1008+ 6FE7 EF 63                        dw          BRANCH
1009+ 6FE9 2E 00                        dw          Accept_Endif_0 - $
1010+ 6FEB              Accept_Else_0:                                  //      else
1011+ 6FEB 08 69                        dw              DUP             //          dup         ( a  c  c )
1012+ 6FED A3 63 0D 00                  dw              LIT, 13         //          13
1013+ 6FF1 D4 6B                        dw              EQUALS          //          =           ( a  c  c==CR )
1014+ 6FF3                                                              //          if
1015+ 6FF3 F3 63                        dw              ZBRANCH
1016+ 6FF5 0C 00                        dw              Accept_Else_2 - $
1017+ 6FF7 ED 68 87 6A                  dw                  DROP, BL    //              drop bl ( a  bl )
1018+ 6FFB 64 6A                        dw                  ZERO        //              0       ( a  c  0 )
1019+ 6FFD                                                              //          else
1020+ 6FFD EF 63                        dw              BRANCH
1021+ 6FFF 04 00                        dw              Accept_Endif_2 - $
1022+ 7001              Accept_Else_2:
1023+ 7001 08 69                        dw                  DUP         //              dup     ( a  c  c )
1024+ 7003                                                              //          endif
1025+ 7003              Accept_Endif_2:
1026+ 7003 32 64 90 69                  dw              I, CSTORE       //          i           ( a  c )
1027+ 7007 08 69 87 6A                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1027+ 700B ED 6B
1028+ 700D                                                              //          if
1029+ 700D F3 63                        dw              ZBRANCH
1030+ 700F 08 00                        dw              Accept_Endif_3 - $
1031+ 7011 52 68                        dw                  R_TO        //              r>
1032+ 7013 AA 68                        dw                  ONE_SUBTRACT//              1-
1033+ 7015 47 68                        dw                  TO_R        //              >r
1034+ 7017                                                              //          endif
1035+ 7017              Accept_Endif_3:
1036+ 7017              Accept_Endif_0:                                 //      endif
1037+ 7017 3B 6C                        dw          EMIT                //      emit            ( a )
1038+ 7019
1039+ 7019 64 6A 32 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1039+ 701D A3 68
1040+ 701F 7C 69                        dw          STORE               //          ( zero pad )
1041+ 7021 32 64                        dw          I                   //      i
1042+ 7023 32 64 87 69                  dw          I, CFETCH, ZEQUAL   //      i c@ 0= if
1042+ 7027 62 68
1043+ 7029 F3 63                        dw          ZBRANCH             //
1044+ 702B 06 00                        dw              Accept_Endif_4 - $
1045+ 702D FC 63                        dw                  C_LEAVE     //              leave
1046+ 702F 06 00                        dw                  Accept_Leave - $
1047+ 7031              Accept_Endif_4:                                 //      endif
1048+ 7031                                                              // loop
1049+ 7031 E7 63                        dw      C_LOOP
1050+ 7033 78 FF                        dw      Accept_Loop - $
1051+ 7035              Accept_Leave:
1052+ 7035 01 69 C8 6B                  dw      SWAP, SUBTRACT          // swap -
1053+ 7039 A3 68                        dw      ONE_PLUS                // 1+
1054+ 703B 08 69 77 6B                  dw      DUP, SPAN, STORE        // dup span !
1054+ 703F 7C 69
1055+ 7041 3D 68                        dw      EXIT                    // ;
1056+ 7043
1057+ 7043              //  ______________________________________________________________________
1058+ 7043              //
1059+ 7043              // expect      a n --
1060+ 7043              // Accepts at most n1 characters from terminal and stores them at address a
1061+ 7043              // CR stops input. A 'nul' is added as trailer.
1062+ 7043              // n2 is the string length. n2 is kept in span user variable also.
1063+ 7043              //              Colon_Def EXPECT, "EXPECT", is_normal
1064+ 7043              //              dw      ACCEPT, DROP            // accept drop
1065+ 7043              //              dw      EXIT                    // ;
1066+ 7043
1067+ 7043              //  ______________________________________________________________________
1068+ 7043              //
1069+ 7043              // query        --
1070+ 7043              // Accept at most 80 character from console. CR stops.
1071+ 7043              // Text is stored in TIB. Variable IN is zeroed.
1072+ 7043                              Colon_Def QUERY, "QUERY", is_normal
1072+ 7043             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1072+ 7043             >
1072+ 7043             >Dict_Ptr        defl    $
1072+ 7043             >
1072+ 7043             >//              ______________________________________________________________________
1072+ 7043             >//              Heap part
1072+ 7043             >
1072+ 7043             >
1072+ 7043             >                org     (Heap_Ptr & $1FFF) + $E000
1072+ E7F9             >
1072+ E7F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1072+ E7F9             >Latest_Definition defl  Heap_Ptr
1072+ E7F9             >
1072+ E7F9             >                // dummy db directives used to calculate length of namec
1072+ E7F9 51 55 45 52 >                db      "QUERY"
1072+ E7FD 59          >
1072+ E7FE             >len_NFA         defl    $ - temp_NFA
1072+ E7FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1072+ E7F9             >
1072+ E7F9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1072+ E7FA 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1072+ E7FE 59          >
1072+ E7FF             >                org     $-1                 // alter last byte of Name just above to set
1072+ E7FE D9          >                db      {b $} | END_BIT     // msb as name end
1072+ E7FF             >
1072+ E7FF EE 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1072+ E801             >Prev_Ptr        defl    Heap_Ptr
1072+ E801             >
1072+ E801             >mirror_Ptr      defl    $
1072+ E801             >
1072+ E801 45 70       >                dw      Dict_Ptr + 2        // xt
1072+ E803             >Heap_Ptr        defl    $ - $E000           // save current HP
1072+ E803             >
1072+ E803             >Current_HP      defl  $ - $E000             // used to set HP once!
1072+ E803             >
1072+ E803             >//              ______________________________________________________________________
1072+ E803             >//              Dictionary part
1072+ E803             >
1072+ E803             >                org     Dict_Ptr
1072+ 7043             >
1072+ 7043 01 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1072+ 7045             >
1072+ 7045             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1072+ 7045 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1072+ 7048             >
1072+ 7048             >
1072+ 7048             >                endif           ; ok        // for other definitions it "points" the correct handler
1072+ 7048             >                // Use of "; ok" to suppress "warning[fwdref]"
1072+ 7048             >
1072+ 7048             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1073+ 7048 C9 6A 72 69                  dw      TIB, FETCH              // tib @
1074+ 704C A3 63 50 00                  dw      LIT, 80                 // 80
1075+ 7050 9A 6F ED 68                  dw      ACCEPT, DROP            // accept drop
1076+ 7054 64 6A 0B 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
1076+ 7058 7C 69
1077+ 705A 3D 68                        dw      EXIT                    // ;
1078+ 705C
1079+ 705C              //  ______________________________________________________________________
1080+ 705C              //
1081+ 705C              // fill        a n c --
1082+ 705C              // If n > 0, fills n locations starting from address a with the value c.
1083+ 705C                              New_Def FILL, "FILL", is_code, is_normal
1083+ 705C             >
1083+ 705C             >Dict_Ptr        defl    $
1083+ 705C             >
1083+ 705C             >//              ______________________________________________________________________
1083+ 705C             >//              Heap part
1083+ 705C             >
1083+ 705C             >
1083+ 705C             >                org     (Heap_Ptr & $1FFF) + $E000
1083+ E803             >
1083+ E803             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ E803             >Latest_Definition defl  Heap_Ptr
1083+ E803             >
1083+ E803             >                // dummy db directives used to calculate length of namec
1083+ E803 46 49 4C 4C >                db      "FILL"
1083+ E807             >len_NFA         defl    $ - temp_NFA
1083+ E807             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ E803             >
1083+ E803 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ E804 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1083+ E808             >                org     $-1                 // alter last byte of Name just above to set
1083+ E807 CC          >                db      {b $} | END_BIT     // msb as name end
1083+ E808             >
1083+ E808 F9 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1083+ E80A             >Prev_Ptr        defl    Heap_Ptr
1083+ E80A             >
1083+ E80A             >mirror_Ptr      defl    $
1083+ E80A             >
1083+ E80A 5E 70       >                dw      Dict_Ptr + 2        // xt
1083+ E80C             >Heap_Ptr        defl    $ - $E000           // save current HP
1083+ E80C             >
1083+ E80C             >Current_HP      defl  $ - $E000             // used to set HP once!
1083+ E80C             >
1083+ E80C             >//              ______________________________________________________________________
1083+ E80C             >//              Dictionary part
1083+ E80C             >
1083+ E80C             >                org     Dict_Ptr
1083+ 705C             >
1083+ 705C 0A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1083+ 705E             >
1083+ 705E             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 705E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1083+ 705E ~           >
1083+ 705E ~           >
1083+ 705E             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 705E             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 705E             >
1083+ 705E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 705E D9                           exx
1085+ 705F D1                           pop     de                  // de has character
1086+ 7060 C1                           pop     bc                  // bc has counter
1087+ 7061 E1                           pop     hl                  // hl has address, save Instruction Pointer
1088+ 7062              Fill_Loop:
1089+ 7062 78                               ld      a, b
1090+ 7063 B1                               or      c
1091+ 7064 28 05                        jr      z, Fill_While_End
1092+ 7066 73                               ld      (hl), e
1093+ 7067 0B                               dec     bc
1094+ 7068 23                               inc     hl
1095+ 7069 18 F7                        jr      Fill_Loop
1096+ 706B              Fill_While_End:
1097+ 706B D9                           exx
1098+ 706C                              next
1098+ 706C DD E9       >                jp      (ix)
1099+ 706E
1100+ 706E              //  ______________________________________________________________________
1101+ 706E              //
1102+ 706E              // erase        a n --
1103+ 706E              // If n > 0, fills n locations starting from address a with 'nul' characters.
1104+ 706E                              Colon_Def ERASE, "ERASE", is_normal
1104+ 706E             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1104+ 706E             >
1104+ 706E             >Dict_Ptr        defl    $
1104+ 706E             >
1104+ 706E             >//              ______________________________________________________________________
1104+ 706E             >//              Heap part
1104+ 706E             >
1104+ 706E             >
1104+ 706E             >                org     (Heap_Ptr & $1FFF) + $E000
1104+ E80C             >
1104+ E80C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1104+ E80C             >Latest_Definition defl  Heap_Ptr
1104+ E80C             >
1104+ E80C             >                // dummy db directives used to calculate length of namec
1104+ E80C 45 52 41 53 >                db      "ERASE"
1104+ E810 45          >
1104+ E811             >len_NFA         defl    $ - temp_NFA
1104+ E811             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1104+ E80C             >
1104+ E80C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1104+ E80D 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1104+ E811 45          >
1104+ E812             >                org     $-1                 // alter last byte of Name just above to set
1104+ E811 C5          >                db      {b $} | END_BIT     // msb as name end
1104+ E812             >
1104+ E812 03 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1104+ E814             >Prev_Ptr        defl    Heap_Ptr
1104+ E814             >
1104+ E814             >mirror_Ptr      defl    $
1104+ E814             >
1104+ E814 70 70       >                dw      Dict_Ptr + 2        // xt
1104+ E816             >Heap_Ptr        defl    $ - $E000           // save current HP
1104+ E816             >
1104+ E816             >Current_HP      defl  $ - $E000             // used to set HP once!
1104+ E816             >
1104+ E816             >//              ______________________________________________________________________
1104+ E816             >//              Dictionary part
1104+ E816             >
1104+ E816             >                org     Dict_Ptr
1104+ 706E             >
1104+ 706E 14 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1104+ 7070             >
1104+ 7070             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1104+ 7070 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1104+ 7073             >
1104+ 7073             >
1104+ 7073             >                endif           ; ok        // for other definitions it "points" the correct handler
1104+ 7073             >                // Use of "; ok" to suppress "warning[fwdref]"
1104+ 7073             >
1104+ 7073             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1105+ 7073 64 6A 5E 70                  dw      ZERO, FILL              // 0 fill
1106+ 7077 3D 68                        dw      EXIT                    // ;
1107+ 7079
1108+ 7079              //  ______________________________________________________________________
1109+ 7079              //
1110+ 7079              // blank        a n --
1111+ 7079              // If n > 0, fills n locations starting from address a with 'nul' characters.
1112+ 7079                              Colon_Def BLANK, "BLANK", is_normal
1112+ 7079             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1112+ 7079             >
1112+ 7079             >Dict_Ptr        defl    $
1112+ 7079             >
1112+ 7079             >//              ______________________________________________________________________
1112+ 7079             >//              Heap part
1112+ 7079             >
1112+ 7079             >
1112+ 7079             >                org     (Heap_Ptr & $1FFF) + $E000
1112+ E816             >
1112+ E816             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1112+ E816             >Latest_Definition defl  Heap_Ptr
1112+ E816             >
1112+ E816             >                // dummy db directives used to calculate length of namec
1112+ E816 42 4C 41 4E >                db      "BLANK"
1112+ E81A 4B          >
1112+ E81B             >len_NFA         defl    $ - temp_NFA
1112+ E81B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1112+ E816             >
1112+ E816 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1112+ E817 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1112+ E81B 4B          >
1112+ E81C             >                org     $-1                 // alter last byte of Name just above to set
1112+ E81B CB          >                db      {b $} | END_BIT     // msb as name end
1112+ E81C             >
1112+ E81C 0C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1112+ E81E             >Prev_Ptr        defl    Heap_Ptr
1112+ E81E             >
1112+ E81E             >mirror_Ptr      defl    $
1112+ E81E             >
1112+ E81E 7B 70       >                dw      Dict_Ptr + 2        // xt
1112+ E820             >Heap_Ptr        defl    $ - $E000           // save current HP
1112+ E820             >
1112+ E820             >Current_HP      defl  $ - $E000             // used to set HP once!
1112+ E820             >
1112+ E820             >//              ______________________________________________________________________
1112+ E820             >//              Dictionary part
1112+ E820             >
1112+ E820             >                org     Dict_Ptr
1112+ 7079             >
1112+ 7079 1E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1112+ 707B             >
1112+ 707B             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1112+ 707B CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1112+ 707E             >
1112+ 707E             >
1112+ 707E             >                endif           ; ok        // for other definitions it "points" the correct handler
1112+ 707E             >                // Use of "; ok" to suppress "warning[fwdref]"
1112+ 707E             >
1112+ 707E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1113+ 707E 87 6A 5E 70                  dw      BL, FILL                // bl fill
1114+ 7082 3D 68                        dw      EXIT                    // ;
1115+ 7084
1116+ 7084              //  ______________________________________________________________________
1117+ 7084              //
1118+ 7084              // hold         c --
1119+ 7084              // Used between <# and #> to insert a character c in numeric formatting.
1120+ 7084                              Colon_Def HOLD, "HOLD", is_normal
1120+ 7084             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1120+ 7084             >
1120+ 7084             >Dict_Ptr        defl    $
1120+ 7084             >
1120+ 7084             >//              ______________________________________________________________________
1120+ 7084             >//              Heap part
1120+ 7084             >
1120+ 7084             >
1120+ 7084             >                org     (Heap_Ptr & $1FFF) + $E000
1120+ E820             >
1120+ E820             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1120+ E820             >Latest_Definition defl  Heap_Ptr
1120+ E820             >
1120+ E820             >                // dummy db directives used to calculate length of namec
1120+ E820 48 4F 4C 44 >                db      "HOLD"
1120+ E824             >len_NFA         defl    $ - temp_NFA
1120+ E824             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1120+ E820             >
1120+ E820 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1120+ E821 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1120+ E825             >                org     $-1                 // alter last byte of Name just above to set
1120+ E824 C4          >                db      {b $} | END_BIT     // msb as name end
1120+ E825             >
1120+ E825 16 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1120+ E827             >Prev_Ptr        defl    Heap_Ptr
1120+ E827             >
1120+ E827             >mirror_Ptr      defl    $
1120+ E827             >
1120+ E827 86 70       >                dw      Dict_Ptr + 2        // xt
1120+ E829             >Heap_Ptr        defl    $ - $E000           // save current HP
1120+ E829             >
1120+ E829             >Current_HP      defl  $ - $E000             // used to set HP once!
1120+ E829             >
1120+ E829             >//              ______________________________________________________________________
1120+ E829             >//              Dictionary part
1120+ E829             >
1120+ E829             >                org     Dict_Ptr
1120+ 7084             >
1120+ 7084 27 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1120+ 7086             >
1120+ 7086             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1120+ 7086 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1120+ 7089             >
1120+ 7089             >
1120+ 7089             >                endif           ; ok        // for other definitions it "points" the correct handler
1120+ 7089             >                // Use of "; ok" to suppress "warning[fwdref]"
1120+ 7089             >
1120+ 7089             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1121+ 7089 80 6A                        dw      NEG_ONE                 // -1
1122+ 708B 53 6B 5A 69                  dw      HLD, PLUSSTORE          // hld +!
1123+ 708F 53 6B 72 69                  dw      HLD, FETCH, CSTORE      // hld @ c!
1123+ 7093 90 69
1124+ 7095 3D 68                        dw      EXIT                    // ;
1125+ 7097
1126+ 7097              //  ______________________________________________________________________
1127+ 7097              //
1128+ 7097              // pad         -- a
1129+ 7097              // leaves the buffer text address. This is at a fixed distance over HERE.
1130+ 7097                              Colon_Def PAD, "PAD", is_normal
1130+ 7097             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1130+ 7097             >
1130+ 7097             >Dict_Ptr        defl    $
1130+ 7097             >
1130+ 7097             >//              ______________________________________________________________________
1130+ 7097             >//              Heap part
1130+ 7097             >
1130+ 7097             >
1130+ 7097             >                org     (Heap_Ptr & $1FFF) + $E000
1130+ E829             >
1130+ E829             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1130+ E829             >Latest_Definition defl  Heap_Ptr
1130+ E829             >
1130+ E829             >                // dummy db directives used to calculate length of namec
1130+ E829 50 41 44    >                db      "PAD"
1130+ E82C             >len_NFA         defl    $ - temp_NFA
1130+ E82C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1130+ E829             >
1130+ E829 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1130+ E82A 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1130+ E82D             >                org     $-1                 // alter last byte of Name just above to set
1130+ E82C C4          >                db      {b $} | END_BIT     // msb as name end
1130+ E82D             >
1130+ E82D 20 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1130+ E82F             >Prev_Ptr        defl    Heap_Ptr
1130+ E82F             >
1130+ E82F             >mirror_Ptr      defl    $
1130+ E82F             >
1130+ E82F 99 70       >                dw      Dict_Ptr + 2        // xt
1130+ E831             >Heap_Ptr        defl    $ - $E000           // save current HP
1130+ E831             >
1130+ E831             >Current_HP      defl  $ - $E000             // used to set HP once!
1130+ E831             >
1130+ E831             >//              ______________________________________________________________________
1130+ E831             >//              Dictionary part
1130+ E831             >
1130+ E831             >                org     Dict_Ptr
1130+ 7097             >
1130+ 7097 2F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1130+ 7099             >
1130+ 7099             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1130+ 7099 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1130+ 709C             >
1130+ 709C             >
1130+ 709C             >                endif           ; ok        // for other definitions it "points" the correct handler
1130+ 709C             >                // Use of "; ok" to suppress "warning[fwdref]"
1130+ 709C             >
1130+ 709C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1131+ 709C 89 6B                        dw      HERE                    // here
1132+ 709E A3 63 44 00                  dw      LIT, 68                 // 68
1133+ 70A2 8A 68                        dw      PLUS                    // +
1134+ 70A4 3D 68                        dw      EXIT                    // ;
1135+ 70A6
1136+ 70A6              //  ______________________________________________________________________
1137+ 70A6              //
1138+ 70A6              // word         c -- a
1139+ 70A6              // reads characters from input streams until it encouners a c delimiter.
1140+ 70A6              // Stores that packet so it starts from HERE
1141+ 70A6              // WORD leaves a counter as first byte and ends the packet with two spaces.
1142+ 70A6              // Other occurrences of c are ignored.
1143+ 70A6              // If BLK is zero, text is taken from terminal buffer TIB.
1144+ 70A6              // Otherwise text is taken from the disk-block given by BLK.
1145+ 70A6              // "in" variable is incremented of the number of character read.
1146+ 70A6              // The number of characters read is given by ENCLOSE.
1147+ 70A6                              Colon_Def WORD, "WORD", is_normal
1147+ 70A6             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1147+ 70A6             >
1147+ 70A6             >Dict_Ptr        defl    $
1147+ 70A6             >
1147+ 70A6             >//              ______________________________________________________________________
1147+ 70A6             >//              Heap part
1147+ 70A6             >
1147+ 70A6             >
1147+ 70A6             >                org     (Heap_Ptr & $1FFF) + $E000
1147+ E831             >
1147+ E831             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1147+ E831             >Latest_Definition defl  Heap_Ptr
1147+ E831             >
1147+ E831             >                // dummy db directives used to calculate length of namec
1147+ E831 57 4F 52 44 >                db      "WORD"
1147+ E835             >len_NFA         defl    $ - temp_NFA
1147+ E835             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1147+ E831             >
1147+ E831 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1147+ E832 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1147+ E836             >                org     $-1                 // alter last byte of Name just above to set
1147+ E835 C4          >                db      {b $} | END_BIT     // msb as name end
1147+ E836             >
1147+ E836 29 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1147+ E838             >Prev_Ptr        defl    Heap_Ptr
1147+ E838             >
1147+ E838             >mirror_Ptr      defl    $
1147+ E838             >
1147+ E838 A8 70       >                dw      Dict_Ptr + 2        // xt
1147+ E83A             >Heap_Ptr        defl    $ - $E000           // save current HP
1147+ E83A             >
1147+ E83A             >Current_HP      defl  $ - $E000             // used to set HP once!
1147+ E83A             >
1147+ E83A             >//              ______________________________________________________________________
1147+ E83A             >//              Dictionary part
1147+ E83A             >
1147+ E83A             >                org     Dict_Ptr
1147+ 70A6             >
1147+ 70A6 38 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1147+ 70A8             >
1147+ 70A8             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1147+ 70A8 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1147+ 70AB             >
1147+ 70AB             >
1147+ 70AB             >                endif           ; ok        // for other definitions it "points" the correct handler
1147+ 70AB             >                // Use of "; ok" to suppress "warning[fwdref]"
1147+ 70AB             >
1147+ 70AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1148+ 70AB 05 6B 72 69                  dw      BLK, FETCH              // blk @
1149+ 70AF                                                              // if
1150+ 70AF F3 63                        dw      ZBRANCH
1151+ 70B1 0C 00                        dw      Word_Else - $
1152+ 70B3 05 6B 72 69                  dw          BLK, FETCH          //      blk @
1153+ 70B7 62 79                        dw          BLOCK               //      block ( forward )
1154+ 70B9                                                              // else
1155+ 70B9 EF 63                        dw      BRANCH
1156+ 70BB 06 00                        dw      Word_Endif - $
1157+ 70BD              Word_Else:
1158+ 70BD C9 6A 72 69                  dw         TIB, FETCH           //      tib @
1159+ 70C1              Word_Endif:                                     // endif
1160+ 70C1 0B 6B 72 69                  dw      TO_IN, FETCH, PLUS      // >in @ +
1160+ 70C5 8A 68
1161+ 70C7 01 69 20 65                  dw      SWAP, ENCLOSE           // swap enclose
1162+ 70CB 89 6B A3 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1162+ 70CF 22 00 7B 70
1163+ 70D3 0B 6B 5A 69                  dw      TO_IN, PLUSSTORE        // >in @ +
1164+ 70D7 E4 68 C8 6B                  dw      OVER, SUBTRACT, TO_R    // over - >r
1164+ 70DB 47 68
1165+ 70DD 5D 68 89 6B                  dw      R_OP, HERE, CSTORE      // r here c!
1165+ 70E1 90 69
1166+ 70E3 8A 68                        dw      PLUS                    // +
1167+ 70E5 89 6B A3 68                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1167+ 70E9 52 68
1168+ 70EB 82 67                        dw      CMOVE                   // cmove
1169+ 70ED 89 6B                        dw      HERE                    // here
1170+ 70EF 3D 68                        dw      EXIT                    // ;
1171+ 70F1
1172+ 70F1              //  ______________________________________________________________________
1173+ 70F1              //
1174+ 70F1              // (.")         --
1175+ 70F1              // Direct procedure compiled by ." and  .(  It executes TYPE.
1176+ 70F1                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1176+ 70F1             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1176+ 70F1             >
1176+ 70F1             >Dict_Ptr        defl    $
1176+ 70F1             >
1176+ 70F1             >//              ______________________________________________________________________
1176+ 70F1             >//              Heap part
1176+ 70F1             >
1176+ 70F1             >
1176+ 70F1             >                org     (Heap_Ptr & $1FFF) + $E000
1176+ E83A             >
1176+ E83A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1176+ E83A             >Latest_Definition defl  Heap_Ptr
1176+ E83A             >
1176+ E83A             >                // dummy db directives used to calculate length of namec
1176+ E83A 28 2E 22 29 >                db      '(.")'
1176+ E83E             >len_NFA         defl    $ - temp_NFA
1176+ E83E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1176+ E83A             >
1176+ E83A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1176+ E83B 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1176+ E83F             >                org     $-1                 // alter last byte of Name just above to set
1176+ E83E A9          >                db      {b $} | END_BIT     // msb as name end
1176+ E83F             >
1176+ E83F 31 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1176+ E841             >Prev_Ptr        defl    Heap_Ptr
1176+ E841             >
1176+ E841             >mirror_Ptr      defl    $
1176+ E841             >
1176+ E841 F3 70       >                dw      Dict_Ptr + 2        // xt
1176+ E843             >Heap_Ptr        defl    $ - $E000           // save current HP
1176+ E843             >
1176+ E843             >Current_HP      defl  $ - $E000             // used to set HP once!
1176+ E843             >
1176+ E843             >//              ______________________________________________________________________
1176+ E843             >//              Dictionary part
1176+ E843             >
1176+ E843             >                org     Dict_Ptr
1176+ 70F1             >
1176+ 70F1 41 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1176+ 70F3             >
1176+ 70F3             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1176+ 70F3 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1176+ 70F6             >
1176+ 70F6             >
1176+ 70F6             >                endif           ; ok        // for other definitions it "points" the correct handler
1176+ 70F6             >                // Use of "; ok" to suppress "warning[fwdref]"
1176+ 70F6             >
1176+ 70F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1177+ 70F6 5D 68 02 6F                  dw      R_OP, COUNT             // r count
1178+ 70FA 08 69 A3 68                  dw      DUP, ONE_PLUS           // dup 1+
1179+ 70FE 52 68 8A 68                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1179+ 7102 47 68
1180+ 7104 56 6F                        dw      TYPE                    // type
1181+ 7106 3D 68                        dw      EXIT                    // ;
1182+ 7108
1183+ 7108              //  ______________________________________________________________________
1184+ 7108              //
1185+ 7108              // char         -- c
1186+ 7108              // get first character from next input word
1187+ 7108                              Colon_Def CHAR,  "CHAR", is_normal
1187+ 7108             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1187+ 7108             >
1187+ 7108             >Dict_Ptr        defl    $
1187+ 7108             >
1187+ 7108             >//              ______________________________________________________________________
1187+ 7108             >//              Heap part
1187+ 7108             >
1187+ 7108             >
1187+ 7108             >                org     (Heap_Ptr & $1FFF) + $E000
1187+ E843             >
1187+ E843             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1187+ E843             >Latest_Definition defl  Heap_Ptr
1187+ E843             >
1187+ E843             >                // dummy db directives used to calculate length of namec
1187+ E843 43 48 41 52 >                db      "CHAR"
1187+ E847             >len_NFA         defl    $ - temp_NFA
1187+ E847             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1187+ E843             >
1187+ E843 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1187+ E844 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1187+ E848             >                org     $-1                 // alter last byte of Name just above to set
1187+ E847 D2          >                db      {b $} | END_BIT     // msb as name end
1187+ E848             >
1187+ E848 3A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1187+ E84A             >Prev_Ptr        defl    Heap_Ptr
1187+ E84A             >
1187+ E84A             >mirror_Ptr      defl    $
1187+ E84A             >
1187+ E84A 0A 71       >                dw      Dict_Ptr + 2        // xt
1187+ E84C             >Heap_Ptr        defl    $ - $E000           // save current HP
1187+ E84C             >
1187+ E84C             >Current_HP      defl  $ - $E000             // used to set HP once!
1187+ E84C             >
1187+ E84C             >//              ______________________________________________________________________
1187+ E84C             >//              Dictionary part
1187+ E84C             >
1187+ E84C             >                org     Dict_Ptr
1187+ 7108             >
1187+ 7108 4A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1187+ 710A             >
1187+ 710A             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1187+ 710A CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1187+ 710D             >
1187+ 710D             >
1187+ 710D             >                endif           ; ok        // for other definitions it "points" the correct handler
1187+ 710D             >                // Use of "; ok" to suppress "warning[fwdref]"
1187+ 710D             >
1187+ 710D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1188+ 710D 87 6A A8 70                  dw      BL, WORD                // bl word
1189+ 7111 A3 68 87 69                  dw      ONE_PLUS, CFETCH        // 1+ c@
1190+ 7115 3D 68                        dw      EXIT                    // ;
1191+ 7117
1192+ 7117              //  ______________________________________________________________________
1193+ 7117              //
1194+ 7117              // ,"           --
1195+ 7117              // compiles a string terminated by " as a counted string from next input stream
1196+ 7117                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1196+ 7117             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1196+ 7117             >
1196+ 7117             >Dict_Ptr        defl    $
1196+ 7117             >
1196+ 7117             >//              ______________________________________________________________________
1196+ 7117             >//              Heap part
1196+ 7117             >
1196+ 7117             >
1196+ 7117             >                org     (Heap_Ptr & $1FFF) + $E000
1196+ E84C             >
1196+ E84C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1196+ E84C             >Latest_Definition defl  Heap_Ptr
1196+ E84C             >
1196+ E84C             >                // dummy db directives used to calculate length of namec
1196+ E84C 2C 22       >                db      ',"'
1196+ E84E             >len_NFA         defl    $ - temp_NFA
1196+ E84E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1196+ E84C             >
1196+ E84C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1196+ E84D 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1196+ E84F             >                org     $-1                 // alter last byte of Name just above to set
1196+ E84E A2          >                db      {b $} | END_BIT     // msb as name end
1196+ E84F             >
1196+ E84F 43 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1196+ E851             >Prev_Ptr        defl    Heap_Ptr
1196+ E851             >
1196+ E851             >mirror_Ptr      defl    $
1196+ E851             >
1196+ E851 19 71       >                dw      Dict_Ptr + 2        // xt
1196+ E853             >Heap_Ptr        defl    $ - $E000           // save current HP
1196+ E853             >
1196+ E853             >Current_HP      defl  $ - $E000             // used to set HP once!
1196+ E853             >
1196+ E853             >//              ______________________________________________________________________
1196+ E853             >//              Dictionary part
1196+ E853             >
1196+ E853             >                org     Dict_Ptr
1196+ 7117             >
1196+ 7117 51 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1196+ 7119             >
1196+ 7119             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1196+ 7119 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1196+ 711C             >
1196+ 711C             >
1196+ 711C             >                endif           ; ok        // for other definitions it "points" the correct handler
1196+ 711C             >                // Use of "; ok" to suppress "warning[fwdref]"
1196+ 711C             >
1196+ 711C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1197+ 711C A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1198+ 7120 A8 70                        dw      WORD                    // word
1199+ 7122 87 69 A3 68                  dw      CFETCH, ONE_PLUS        // c@ 1+
1200+ 7126 94 6B                        dw      ALLOT                   // allot
1201+ 7128 64 6A AE 6B                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1202+ 712C 3D 68                        dw      EXIT
1203+ 712E
1204+ 712E              //  ______________________________________________________________________
1205+ 712E              //
1206+ 712E              // .c           c --
1207+ 712E              // intermediate general purpose string builder, used by ." and .(
1208+ 712E                              Colon_Def DOT_C,  ".C", is_immediate
1208+ 712E             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1208+ 712E             >
1208+ 712E             >Dict_Ptr        defl    $
1208+ 712E             >
1208+ 712E             >//              ______________________________________________________________________
1208+ 712E             >//              Heap part
1208+ 712E             >
1208+ 712E             >
1208+ 712E             >                org     (Heap_Ptr & $1FFF) + $E000
1208+ E853             >
1208+ E853             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1208+ E853             >Latest_Definition defl  Heap_Ptr
1208+ E853             >
1208+ E853             >                // dummy db directives used to calculate length of namec
1208+ E853 2E 43       >                db      ".C"
1208+ E855             >len_NFA         defl    $ - temp_NFA
1208+ E855             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1208+ E853             >
1208+ E853 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1208+ E854 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1208+ E856             >                org     $-1                 // alter last byte of Name just above to set
1208+ E855 C3          >                db      {b $} | END_BIT     // msb as name end
1208+ E856             >
1208+ E856 4C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1208+ E858             >Prev_Ptr        defl    Heap_Ptr
1208+ E858             >
1208+ E858             >mirror_Ptr      defl    $
1208+ E858             >
1208+ E858 30 71       >                dw      Dict_Ptr + 2        // xt
1208+ E85A             >Heap_Ptr        defl    $ - $E000           // save current HP
1208+ E85A             >
1208+ E85A             >Current_HP      defl  $ - $E000             // used to set HP once!
1208+ E85A             >
1208+ E85A             >//              ______________________________________________________________________
1208+ E85A             >//              Dictionary part
1208+ E85A             >
1208+ E85A             >                org     Dict_Ptr
1208+ 712E             >
1208+ 712E 58 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1208+ 7130             >
1208+ 7130             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1208+ 7130 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1208+ 7133             >
1208+ 7133             >
1208+ 7133             >                endif           ; ok        // for other definitions it "points" the correct handler
1208+ 7133             >                // Use of "; ok" to suppress "warning[fwdref]"
1208+ 7133             >
1208+ 7133             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1209+ 7133 2F 6B 72 69                  dw      STATE, FETCH            // state @
1210+ 7137                                                              // if
1211+ 7137 F3 63                        dw      ZBRANCH
1212+ 7139 12 00                        dw      Dot_C_Else - $
1213+ 713B 2D 6E F3 70                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1214+ 713F A8 70 87 69                  dw          WORD, CFETCH        //      word c@
1215+ 7143 A3 68 94 6B                  dw          ONE_PLUS, ALLOT     //      1+ allot
1216+ 7147                                                              // else
1217+ 7147 EF 63                        dw      BRANCH
1218+ 7149 08 00                        dw      Dot_C_Endif - $
1219+ 714B              Dot_C_Else:
1220+ 714B A8 70 02 6F                  dw          WORD, COUNT, TYPE   //      word count type
1220+ 714F 56 6F
1221+ 7151              Dot_C_Endif:                                    // endif
1222+ 7151 3D 68                        dw      EXIT                    ;
1223+ 7153
1224+ 7153              //  ______________________________________________________________________
1225+ 7153              //
1226+ 7153              // ."           c --
1227+ 7153                              Colon_Def DOT_QUOTE,  '."', is_immediate
1227+ 7153             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1227+ 7153             >
1227+ 7153             >Dict_Ptr        defl    $
1227+ 7153             >
1227+ 7153             >//              ______________________________________________________________________
1227+ 7153             >//              Heap part
1227+ 7153             >
1227+ 7153             >
1227+ 7153             >                org     (Heap_Ptr & $1FFF) + $E000
1227+ E85A             >
1227+ E85A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1227+ E85A             >Latest_Definition defl  Heap_Ptr
1227+ E85A             >
1227+ E85A             >                // dummy db directives used to calculate length of namec
1227+ E85A 2E 22       >                db      '."'
1227+ E85C             >len_NFA         defl    $ - temp_NFA
1227+ E85C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1227+ E85A             >
1227+ E85A C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1227+ E85B 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1227+ E85D             >                org     $-1                 // alter last byte of Name just above to set
1227+ E85C A2          >                db      {b $} | END_BIT     // msb as name end
1227+ E85D             >
1227+ E85D 53 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1227+ E85F             >Prev_Ptr        defl    Heap_Ptr
1227+ E85F             >
1227+ E85F             >mirror_Ptr      defl    $
1227+ E85F             >
1227+ E85F 55 71       >                dw      Dict_Ptr + 2        // xt
1227+ E861             >Heap_Ptr        defl    $ - $E000           // save current HP
1227+ E861             >
1227+ E861             >Current_HP      defl  $ - $E000             // used to set HP once!
1227+ E861             >
1227+ E861             >//              ______________________________________________________________________
1227+ E861             >//              Dictionary part
1227+ E861             >
1227+ E861             >                org     Dict_Ptr
1227+ 7153             >
1227+ 7153 5F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1227+ 7155             >
1227+ 7155             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1227+ 7155 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1227+ 7158             >
1227+ 7158             >
1227+ 7158             >                endif           ; ok        // for other definitions it "points" the correct handler
1227+ 7158             >                // Use of "; ok" to suppress "warning[fwdref]"
1227+ 7158             >
1227+ 7158             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1228+ 7158 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1229+ 715C 30 71                        dw      DOT_C                   // [compile] .c
1230+ 715E 3D 68                        dw      EXIT                    // ; immediate
1231+ 7160
1232+ 7160              //  ______________________________________________________________________
1233+ 7160              //
1234+ 7160              // .(           c --
1235+ 7160                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1235+ 7160             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1235+ 7160             >
1235+ 7160             >Dict_Ptr        defl    $
1235+ 7160             >
1235+ 7160             >//              ______________________________________________________________________
1235+ 7160             >//              Heap part
1235+ 7160             >
1235+ 7160             >
1235+ 7160             >                org     (Heap_Ptr & $1FFF) + $E000
1235+ E861             >
1235+ E861             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1235+ E861             >Latest_Definition defl  Heap_Ptr
1235+ E861             >
1235+ E861             >                // dummy db directives used to calculate length of namec
1235+ E861 2E 28       >                db      ".("
1235+ E863             >len_NFA         defl    $ - temp_NFA
1235+ E863             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1235+ E861             >
1235+ E861 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1235+ E862 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1235+ E864             >                org     $-1                 // alter last byte of Name just above to set
1235+ E863 A8          >                db      {b $} | END_BIT     // msb as name end
1235+ E864             >
1235+ E864 5A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1235+ E866             >Prev_Ptr        defl    Heap_Ptr
1235+ E866             >
1235+ E866             >mirror_Ptr      defl    $
1235+ E866             >
1235+ E866 62 71       >                dw      Dict_Ptr + 2        // xt
1235+ E868             >Heap_Ptr        defl    $ - $E000           // save current HP
1235+ E868             >
1235+ E868             >Current_HP      defl  $ - $E000             // used to set HP once!
1235+ E868             >
1235+ E868             >//              ______________________________________________________________________
1235+ E868             >//              Dictionary part
1235+ E868             >
1235+ E868             >                org     Dict_Ptr
1235+ 7160             >
1235+ 7160 66 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1235+ 7162             >
1235+ 7162             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1235+ 7162 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1235+ 7165             >
1235+ 7165             >
1235+ 7165             >                endif           ; ok        // for other definitions it "points" the correct handler
1235+ 7165             >                // Use of "; ok" to suppress "warning[fwdref]"
1235+ 7165             >
1235+ 7165             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1236+ 7165 A3 63 29 00                  dw      LIT, ")"                // [char] )
1237+ 7169 30 71                        dw      DOT_C                   // [compile] .c
1238+ 716B 3D 68                        dw      EXIT                    // ; immediate
1239+ 716D
1240+ 716D              //  ______________________________________________________________________
1241+ 716D              //
1242+ 716D              // (sgn)        a -- a f
1243+ 716D              // determines if char in addr a is a sign (+ or -), and in that case increments
1244+ 716D              // a flag. Returns f as the sign, true for negative, false for positive.
1245+ 716D              // called by NUMBER and (EXP)
1246+ 716D                              Colon_Def CSGN,  "(SGN)", is_normal
1246+ 716D             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1246+ 716D             >
1246+ 716D             >Dict_Ptr        defl    $
1246+ 716D             >
1246+ 716D             >//              ______________________________________________________________________
1246+ 716D             >//              Heap part
1246+ 716D             >
1246+ 716D             >
1246+ 716D             >                org     (Heap_Ptr & $1FFF) + $E000
1246+ E868             >
1246+ E868             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1246+ E868             >Latest_Definition defl  Heap_Ptr
1246+ E868             >
1246+ E868             >                // dummy db directives used to calculate length of namec
1246+ E868 28 53 47 4E >                db      "(SGN)"
1246+ E86C 29          >
1246+ E86D             >len_NFA         defl    $ - temp_NFA
1246+ E86D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1246+ E868             >
1246+ E868 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1246+ E869 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1246+ E86D 29          >
1246+ E86E             >                org     $-1                 // alter last byte of Name just above to set
1246+ E86D A9          >                db      {b $} | END_BIT     // msb as name end
1246+ E86E             >
1246+ E86E 61 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1246+ E870             >Prev_Ptr        defl    Heap_Ptr
1246+ E870             >
1246+ E870             >mirror_Ptr      defl    $
1246+ E870             >
1246+ E870 6F 71       >                dw      Dict_Ptr + 2        // xt
1246+ E872             >Heap_Ptr        defl    $ - $E000           // save current HP
1246+ E872             >
1246+ E872             >Current_HP      defl  $ - $E000             // used to set HP once!
1246+ E872             >
1246+ E872             >//              ______________________________________________________________________
1246+ E872             >//              Dictionary part
1246+ E872             >
1246+ E872             >                org     Dict_Ptr
1246+ 716D             >
1246+ 716D 70 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1246+ 716F             >
1246+ 716F             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1246+ 716F CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1246+ 7172             >
1246+ 7172             >
1246+ 7172             >                endif           ; ok        // for other definitions it "points" the correct handler
1246+ 7172             >                // Use of "; ok" to suppress "warning[fwdref]"
1246+ 7172             >
1246+ 7172             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1247+ 7172 08 69 A3 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1247+ 7176 87 69
1248+ 7178 08 69 A3 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1248+ 717C 2D 00 D4 6B
1249+ 7180                                                              // if
1250+ 7180 F3 63                        dw      ZBRANCH
1251+ 7182 12 00                        dw      CSgn_Else_0 - $
1252+ 7184 ED 68                        dw          DROP                //      drop
1253+ 7186 A3 68                        dw          ONE_PLUS            //      1+
1254+ 7188 6B 6A 3B 6B                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1254+ 718C 5A 69
1255+ 718E 6B 6A                        dw          ONE                 //      1
1256+ 7190                                                              // else
1257+ 7190 EF 63                        dw      BRANCH
1258+ 7192 16 00                        dw      CSgn_Endif_0 - $
1259+ 7194              CSgn_Else_0:
1260+ 7194 A3 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1260+ 7198 D4 6B
1261+ 719A                                                              //      if
1262+ 719A F3 63                        dw          ZBRANCH
1263+ 719C 0A 00                        dw          CSgn_Endif_1 - $
1264+ 719E A3 68                        dw              ONE_PLUS        //          1+
1265+ 71A0 6B 6A 3B 6B                  dw              ONE, DPL        //          1 dpl
1266+ 71A4 5A 69                        dw              PLUSSTORE       //          +!
1267+ 71A6              CSgn_Endif_1                                    //      endif
1268+ 71A6 64 6A                        dw          ZERO                //      0
1269+ 71A8              CSgn_Endif_0:                                   // endif
1270+ 71A8 3D 68                        dw      EXIT
1271+ 71AA
1272+ 71AA              //  ______________________________________________________________________
1273+ 71AA              //
1274+ 71AA              // (number)     d a -- d1 a1
1275+ 71AA              // using the current BASE parse characters stored in address a
1276+ 71AA              // accumulating a double precision integer d
1277+ 71AA              // the process stops at the first not-convertible character
1278+ 71AA              // A double-number is kept in CPU registers as HLDE.
1279+ 71AA              // On the stack a double number is treated as two single numbers
1280+ 71AA              // where HL is on the top of the stack and DE is the second from top,
1281+ 71AA              // so in the stack memory it appears as LHED.
1282+ 71AA              // Instead, in 2VARIABLE a double number is stored as EDLH.
1283+ 71AA                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1283+ 71AA             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1283+ 71AA             >
1283+ 71AA             >Dict_Ptr        defl    $
1283+ 71AA             >
1283+ 71AA             >//              ______________________________________________________________________
1283+ 71AA             >//              Heap part
1283+ 71AA             >
1283+ 71AA             >
1283+ 71AA             >                org     (Heap_Ptr & $1FFF) + $E000
1283+ E872             >
1283+ E872             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ E872             >Latest_Definition defl  Heap_Ptr
1283+ E872             >
1283+ E872             >                // dummy db directives used to calculate length of namec
1283+ E872 28 4E 55 4D >                db      "(NUMBER)"
1283+ E876 42 45 52 29 >
1283+ E87A             >len_NFA         defl    $ - temp_NFA
1283+ E87A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ E872             >
1283+ E872 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ E873 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1283+ E877 42 45 52 29 >
1283+ E87B             >                org     $-1                 // alter last byte of Name just above to set
1283+ E87A A9          >                db      {b $} | END_BIT     // msb as name end
1283+ E87B             >
1283+ E87B 68 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1283+ E87D             >Prev_Ptr        defl    Heap_Ptr
1283+ E87D             >
1283+ E87D             >mirror_Ptr      defl    $
1283+ E87D             >
1283+ E87D AC 71       >                dw      Dict_Ptr + 2        // xt
1283+ E87F             >Heap_Ptr        defl    $ - $E000           // save current HP
1283+ E87F             >
1283+ E87F             >Current_HP      defl  $ - $E000             // used to set HP once!
1283+ E87F             >
1283+ E87F             >//              ______________________________________________________________________
1283+ E87F             >//              Dictionary part
1283+ E87F             >
1283+ E87F             >                org     Dict_Ptr
1283+ 71AA             >
1283+ 71AA 7D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1283+ 71AC             >
1283+ 71AC             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 71AC CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1283+ 71AF             >
1283+ 71AF             >
1283+ 71AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 71AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 71AF             >
1283+ 71AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 71AF                                                              // begin
1285+ 71AF              CNumber_Begin:
1286+ 71AF A3 68                        dw          ONE_PLUS            //      1+
1287+ 71B1 08 69 47 68                  dw          DUP, TO_R           //      dup >r
1288+ 71B5 87 69                        dw          CFETCH              //      @
1289+ 71B7 35 6B 72 69                  dw          BASE, FETCH         //      base @
1290+ 71BB 45 64                        dw          DIGIT               //      digit
1291+ 71BD                                                              // while
1292+ 71BD F3 63                        dw      ZBRANCH
1293+ 71BF 2C 00                        dw      CNumber_While_end - $
1294+ 71C1 01 69                        dw          SWAP                //      swap
1295+ 71C3 35 6B 72 69                  dw          BASE, FETCH         //      base @
1296+ 71C7 A5 67                        dw          UM_MUL              //      um*
1297+ 71C9 ED 68 0F 69                  dw          DROP, ROT           //      drop rot
1298+ 71CD 35 6B 72 69                  dw          BASE, FETCH         //      base @
1299+ 71D1 A5 67                        dw          UM_MUL              //      um*
1300+ 71D3 94 68                        dw          DPLUS               //      d+
1301+ 71D5 3B 6B 72 69                  dw          DPL, FETCH          //      dpl @
1302+ 71D9 A3 68                        dw          ONE_PLUS            //      1+
1303+ 71DB                                                              //      if
1304+ 71DB F3 63                        dw          ZBRANCH
1305+ 71DD 08 00                        dw          CNumber_Endif - $
1306+ 71DF 6B 6A 3B 6B                  dw              ONE, DPL        //          1 dpl
1307+ 71E3 5A 69                        dw              PLUSSTORE       //          +!
1308+ 71E5              CNumber_Endif:                                  //      endif
1309+ 71E5 52 68                        dw             R_TO             //      r>  ( balance rp )
1310+ 71E7 EF 63                        dw      BRANCH
1311+ 71E9 C6 FF                        dw      CNumber_Begin - $
1312+ 71EB              CNumber_While_end:                              // repeat
1313+ 71EB 52 68                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1314+ 71ED 3D 68                        dw      EXIT                    // ;
1315+ 71EF
1316+ 71EF              //  ______________________________________________________________________
1317+ 71EF              //
1318+ 71EF              // (prefix)
1319+ 71EF                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1319+ 71EF             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1319+ 71EF             >
1319+ 71EF             >Dict_Ptr        defl    $
1319+ 71EF             >
1319+ 71EF             >//              ______________________________________________________________________
1319+ 71EF             >//              Heap part
1319+ 71EF             >
1319+ 71EF             >
1319+ 71EF             >                org     (Heap_Ptr & $1FFF) + $E000
1319+ E87F             >
1319+ E87F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1319+ E87F             >Latest_Definition defl  Heap_Ptr
1319+ E87F             >
1319+ E87F             >                // dummy db directives used to calculate length of namec
1319+ E87F 28 50 52 45 >                db      "(PREFIX)"
1319+ E883 46 49 58 29 >
1319+ E887             >len_NFA         defl    $ - temp_NFA
1319+ E887             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1319+ E87F             >
1319+ E87F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1319+ E880 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1319+ E884 46 49 58 29 >
1319+ E888             >                org     $-1                 // alter last byte of Name just above to set
1319+ E887 A9          >                db      {b $} | END_BIT     // msb as name end
1319+ E888             >
1319+ E888 72 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1319+ E88A             >Prev_Ptr        defl    Heap_Ptr
1319+ E88A             >
1319+ E88A             >mirror_Ptr      defl    $
1319+ E88A             >
1319+ E88A F1 71       >                dw      Dict_Ptr + 2        // xt
1319+ E88C             >Heap_Ptr        defl    $ - $E000           // save current HP
1319+ E88C             >
1319+ E88C             >Current_HP      defl  $ - $E000             // used to set HP once!
1319+ E88C             >
1319+ E88C             >//              ______________________________________________________________________
1319+ E88C             >//              Dictionary part
1319+ E88C             >
1319+ E88C             >                org     Dict_Ptr
1319+ 71EF             >
1319+ 71EF 8A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1319+ 71F1             >
1319+ 71F1             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1319+ 71F1 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1319+ 71F4             >
1319+ 71F4             >
1319+ 71F4             >                endif           ; ok        // for other definitions it "points" the correct handler
1319+ 71F4             >                // Use of "; ok" to suppress "warning[fwdref]"
1319+ 71F4             >
1319+ 71F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1320+ 71F4 08 69 A3 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1320+ 71F8 87 69
1321+ 71FA 08 69 47 68                  dw      DUP, TO_R               // dup >r
1322+ 71FE A3 63 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1322+ 7202 D4 6B
1323+ 7204                                                              // if
1324+ 7204 F3 63                        dw      ZBRANCH
1325+ 7206 06 00                        dw      CPrefix_Endif_0 - $
1326+ 7208 A3 68                        dw          ONE_PLUS            //      1+
1327+ 720A 85 6E                        dw          HEX
1328+ 720C              CPrefix_Endif_0:                                // endif
1329+ 720C 5D 68                        dw      R_OP                    // r@
1330+ 720E A3 63 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1330+ 7212 D4 6B
1331+ 7214                                                              // if
1332+ 7214 F3 63                        dw      ZBRANCH
1333+ 7216 0A 00                        dw      CPrefix_Endif_1 - $
1334+ 7218 A3 68                        dw          ONE_PLUS            //      1+
1335+ 721A 72 6A                        dw          TWO
1336+ 721C 35 6B 7C 69                  dw          BASE, STORE         //      2 base !
1337+ 7220              CPrefix_Endif_1:                                // endif
1338+ 7220 52 68                        dw      R_TO                    // r>
1339+ 7222 A3 63 23 00                  dw      LIT, "#", EQUALS        // [char] $ =
1339+ 7226 D4 6B
1340+ 7228                                                              // if
1341+ 7228 F3 63                        dw      ZBRANCH
1342+ 722A 06 00                        dw      CPrefix_Endif_2 - $
1343+ 722C A3 68                        dw          ONE_PLUS            //      1+
1344+ 722E 94 6E                        dw          DECIMAL
1345+ 7230              CPrefix_Endif_2:                                // endif
1346+ 7230 3D 68                        dw      EXIT
1347+ 7232
1348+ 7232              //  ______________________________________________________________________
1349+ 7232
1350+ 7232              PDOM_PTR:
1351+ 7232              //              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1352+ 7232 2C 2F 2D 3A                  db ',/-:'
1353+ 7236              PCDM_PTR:
1354+ 7236              //              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1355+ 7236 2E 2E 2E 2E                  db '....'
1356+ 723A
1357+ 723A              //  ______________________________________________________________________
1358+ 723A              //
1359+ 723A              // number       a -- d
1360+ 723A                              Colon_Def NUMBER,  "NUMBER", is_normal
1360+ 723A             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1360+ 723A             >
1360+ 723A             >Dict_Ptr        defl    $
1360+ 723A             >
1360+ 723A             >//              ______________________________________________________________________
1360+ 723A             >//              Heap part
1360+ 723A             >
1360+ 723A             >
1360+ 723A             >                org     (Heap_Ptr & $1FFF) + $E000
1360+ E88C             >
1360+ E88C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1360+ E88C             >Latest_Definition defl  Heap_Ptr
1360+ E88C             >
1360+ E88C             >                // dummy db directives used to calculate length of namec
1360+ E88C 4E 55 4D 42 >                db      "NUMBER"
1360+ E890 45 52       >
1360+ E892             >len_NFA         defl    $ - temp_NFA
1360+ E892             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1360+ E88C             >
1360+ E88C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1360+ E88D 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1360+ E891 45 52       >
1360+ E893             >                org     $-1                 // alter last byte of Name just above to set
1360+ E892 D2          >                db      {b $} | END_BIT     // msb as name end
1360+ E893             >
1360+ E893 7F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1360+ E895             >Prev_Ptr        defl    Heap_Ptr
1360+ E895             >
1360+ E895             >mirror_Ptr      defl    $
1360+ E895             >
1360+ E895 3C 72       >                dw      Dict_Ptr + 2        // xt
1360+ E897             >Heap_Ptr        defl    $ - $E000           // save current HP
1360+ E897             >
1360+ E897             >Current_HP      defl  $ - $E000             // used to set HP once!
1360+ E897             >
1360+ E897             >//              ______________________________________________________________________
1360+ E897             >//              Dictionary part
1360+ E897             >
1360+ E897             >                org     Dict_Ptr
1360+ 723A             >
1360+ 723A 95 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1360+ 723C             >
1360+ 723C             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1360+ 723C CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1360+ 723F             >
1360+ 723F             >
1360+ 723F             >                endif           ; ok        // for other definitions it "points" the correct handler
1360+ 723F             >                // Use of "; ok" to suppress "warning[fwdref]"
1360+ 723F             >
1360+ 723F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1361+ 723F 64 6A 64 6A                  dw      ZERO, ZERO              // 0 0
1362+ 7243 0F 69                        dw      ROT                     // rot
1363+ 7245
1364+ 7245 35 6B 72 69                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1364+ 7249 47 68
1365+ 724B F1 71                        dw      CPREFIX                 // (prefix)   // ***
1366+ 724D
1367+ 724D 6F 71 47 68                  dw      CSGN, TO_R              // (sgn) >r
1368+ 7251
1369+ 7251 80 6A 3B 6B                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1369+ 7255 7C 69
1370+ 7257 AC 71                        dw      CNUMBER                 // (number)
1371+ 7259              Number_Begin:                                   // begin
1372+ 7259 08 69 87 69                  dw        DUP, CFETCH             // dup c@
1373+ 725D 47 68                        dw        TO_R                    // >r
1374+ 725F                          //  dw        PCDM, PDOM              //  pcdm pdom
1375+ 725F A3 63 36 72                  dw        LIT, PCDM_PTR           //
1376+ 7263 A3 63 32 72                  dw        LIT, PDOM_PTR           //
1377+ 7267 A3 63 04 00                  dw        LIT, 4                  //  4
1378+ 726B 52 68                        dw        R_TO                    // r>
1379+ 726D 4E 65                        dw        C_MAP                   // (map)
1380+ 726F 64 6A 01 69                  dw        ZERO, SWAP              // 0 swap
1381+ 7273 A3 63 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1381+ 7277 D4 6B
1382+ 7279
1383+ 7279 F3 63                        dw        ZBRANCH                 // if
1384+ 727B 0A 00                        dw        Number_Endif_1 - $
1385+ 727D 64 6A 3B 6B                  dw          ZERO, DPL, STORE        //      0 dpl !
1385+ 7281 7C 69
1386+ 7283 A3 68                        dw          ONE_PLUS                //      1+
1387+ 7285              Number_Endif_1:                                   // endif
1388+ 7285
1389+ 7285 F3 63                        dw      ZBRANCH                // while
1390+ 7287 08 00                        dw      Number_While_end - $
1391+ 7289 AC 71                        dw        CNUMBER                 // (number)
1392+ 728B EF 63                        dw      BRANCH
1393+ 728D CC FF                        dw      Number_Begin - $
1394+ 728F              Number_While_end:                               // repeat
1395+ 728F
1396+ 728F 87 69 87 6A                  dw      CFETCH, BL              // c@ bl
1397+ 7293 C8 6B 64 6A                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1397+ 7297 BD 6D
1398+ 7299 52 68                        dw      R_TO                    // r>
1399+ 729B                                                              // if
1400+ 729B F3 63                        dw      ZBRANCH
1401+ 729D 04 00                        dw      Number_Endif_2 - $
1402+ 729F D7 68                        dw          DMINUS              //      dminus
1403+ 72A1              Number_Endif_2:                                 // endif
1404+ 72A1 52 68 35 6B                  dw      R_TO, BASE, STORE       // r> base !  // ***
1404+ 72A5 7C 69
1405+ 72A7 3D 68                        dw      EXIT                    // ;
1406+ 72A9
1407+ 72A9              //  ______________________________________________________________________
1408+ 72A9              //
1409+ 72A9              // twofind      a -- d
1410+ 72A9                              Colon_Def TWOFIND,  "2FIND", is_normal
1410+ 72A9             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1410+ 72A9             >
1410+ 72A9             >Dict_Ptr        defl    $
1410+ 72A9             >
1410+ 72A9             >//              ______________________________________________________________________
1410+ 72A9             >//              Heap part
1410+ 72A9             >
1410+ 72A9             >
1410+ 72A9             >                org     (Heap_Ptr & $1FFF) + $E000
1410+ E897             >
1410+ E897             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1410+ E897             >Latest_Definition defl  Heap_Ptr
1410+ E897             >
1410+ E897             >                // dummy db directives used to calculate length of namec
1410+ E897 32 46 49 4E >                db      "2FIND"
1410+ E89B 44          >
1410+ E89C             >len_NFA         defl    $ - temp_NFA
1410+ E89C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1410+ E897             >
1410+ E897 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1410+ E898 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1410+ E89C 44          >
1410+ E89D             >                org     $-1                 // alter last byte of Name just above to set
1410+ E89C C4          >                db      {b $} | END_BIT     // msb as name end
1410+ E89D             >
1410+ E89D 8C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1410+ E89F             >Prev_Ptr        defl    Heap_Ptr
1410+ E89F             >
1410+ E89F             >mirror_Ptr      defl    $
1410+ E89F             >
1410+ E89F AB 72       >                dw      Dict_Ptr + 2        // xt
1410+ E8A1             >Heap_Ptr        defl    $ - $E000           // save current HP
1410+ E8A1             >
1410+ E8A1             >Current_HP      defl  $ - $E000             // used to set HP once!
1410+ E8A1             >
1410+ E8A1             >//              ______________________________________________________________________
1410+ E8A1             >//              Dictionary part
1410+ E8A1             >
1410+ E8A1             >                org     Dict_Ptr
1410+ 72A9             >
1410+ 72A9 9F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1410+ 72AB             >
1410+ 72AB             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1410+ 72AB CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1410+ 72AE             >
1410+ 72AE             >
1410+ 72AE             >                endif           ; ok        // for other definitions it "points" the correct handler
1410+ 72AE             >                // Use of "; ok" to suppress "warning[fwdref]"
1410+ 72AE             >
1410+ 72AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1411+ 72AE 47 68 5D 68                  dw      TO_R, R_OP              // >r r@
1412+ 72B2 23 6B 72 69                  dw      CONTEXT, FETCH, FETCH   // context @ @
1412+ 72B6 72 69
1413+ 72B8 B2 64                        dw      C_FIND                  // (find)
1414+ 72BA 2B 6C                        dw      QDUP                    // ?dup
1415+ 72BC 62 68                        dw      ZEQUAL                  // 0=
1416+ 72BE                                                              // if
1417+ 72BE F3 63                        dw      ZBRANCH
1418+ 72C0 22 00                        dw      LFind_Endif - $
1419+ 72C2 5D 68                        dw          R_OP                //      r@
1420+ 72C4                              // dw          LATEST               //      latest
1421+ 72C4 29 6B 72 69                  dw          CURRENT, FETCH, FETCH   // context @ @
1421+ 72C8 72 69
1422+ 72CA B2 64                        dw          C_FIND              //      (find)
1423+ 72CC
1424+ 72CC 2B 6C                            dw      QDUP                    // ?dup
1425+ 72CE 62 68                            dw      ZEQUAL                  // 0=
1426+ 72D0                                                                  // if
1427+ 72D0 F3 63                            dw      ZBRANCH
1428+ 72D2 10 00                            dw      LFind_Endif2 - $
1429+ 72D4 5D 68                            dw          R_OP                //      r@
1430+ 72D6 A3 63 26 75                      dw          LIT, FORTH, TO_BODY
1430+ 72DA 3C 6D
1431+ 72DC B9 68                            dw          CELL_PLUS //, CELL_PLUS
1432+ 72DE 72 69                            dw          FETCH
1433+ 72E0 B2 64                            dw          C_FIND              //      (find)
1434+ 72E2              LFind_Endif2:                                    // endif
1435+ 72E2
1436+ 72E2
1437+ 72E2              LFind_Endif:                                    // endif
1438+ 72E2 52 68 ED 68                  dw      R_TO, DROP              // r> drop
1439+ 72E6 3D 68                        dw      EXIT                    // ;
1440+ 72E8
1441+ 72E8              //  ______________________________________________________________________
1442+ 72E8              //
1443+ 72E8              // -find        a -- d
1444+ 72E8                              Colon_Def LFIND,  "-FIND", is_normal
1444+ 72E8             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1444+ 72E8             >
1444+ 72E8             >Dict_Ptr        defl    $
1444+ 72E8             >
1444+ 72E8             >//              ______________________________________________________________________
1444+ 72E8             >//              Heap part
1444+ 72E8             >
1444+ 72E8             >
1444+ 72E8             >                org     (Heap_Ptr & $1FFF) + $E000
1444+ E8A1             >
1444+ E8A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1444+ E8A1             >Latest_Definition defl  Heap_Ptr
1444+ E8A1             >
1444+ E8A1             >                // dummy db directives used to calculate length of namec
1444+ E8A1 2D 46 49 4E >                db      "-FIND"
1444+ E8A5 44          >
1444+ E8A6             >len_NFA         defl    $ - temp_NFA
1444+ E8A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1444+ E8A1             >
1444+ E8A1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1444+ E8A2 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1444+ E8A6 44          >
1444+ E8A7             >                org     $-1                 // alter last byte of Name just above to set
1444+ E8A6 C4          >                db      {b $} | END_BIT     // msb as name end
1444+ E8A7             >
1444+ E8A7 97 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1444+ E8A9             >Prev_Ptr        defl    Heap_Ptr
1444+ E8A9             >
1444+ E8A9             >mirror_Ptr      defl    $
1444+ E8A9             >
1444+ E8A9 EA 72       >                dw      Dict_Ptr + 2        // xt
1444+ E8AB             >Heap_Ptr        defl    $ - $E000           // save current HP
1444+ E8AB             >
1444+ E8AB             >Current_HP      defl  $ - $E000             // used to set HP once!
1444+ E8AB             >
1444+ E8AB             >//              ______________________________________________________________________
1444+ E8AB             >//              Dictionary part
1444+ E8AB             >
1444+ E8AB             >                org     Dict_Ptr
1444+ 72E8             >
1444+ 72E8 A9 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1444+ 72EA             >
1444+ 72EA             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1444+ 72EA CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1444+ 72ED             >
1444+ 72ED             >
1444+ 72ED             >                endif           ; ok        // for other definitions it "points" the correct handler
1444+ 72ED             >                // Use of "; ok" to suppress "warning[fwdref]"
1444+ 72ED             >
1444+ 72ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1445+ 72ED 87 6A A8 70                  dw      BL, WORD                // bl word
1446+ 72F1 AB 72                        dw      TWOFIND                 // 2find
1447+ 72F3 3D 68                        dw      EXIT                    // ;
1448+ 72F5
1449+ 72F5              //  ______________________________________________________________________
1450+ 72F5              //
1451+ 72F5              // (abort)      --
1452+ 72F5                              Colon_Def CABORT,  "(ABORT)", is_normal
1452+ 72F5             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1452+ 72F5             >
1452+ 72F5             >Dict_Ptr        defl    $
1452+ 72F5             >
1452+ 72F5             >//              ______________________________________________________________________
1452+ 72F5             >//              Heap part
1452+ 72F5             >
1452+ 72F5             >
1452+ 72F5             >                org     (Heap_Ptr & $1FFF) + $E000
1452+ E8AB             >
1452+ E8AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1452+ E8AB             >Latest_Definition defl  Heap_Ptr
1452+ E8AB             >
1452+ E8AB             >                // dummy db directives used to calculate length of namec
1452+ E8AB 28 41 42 4F >                db      "(ABORT)"
1452+ E8AF 52 54 29    >
1452+ E8B2             >len_NFA         defl    $ - temp_NFA
1452+ E8B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1452+ E8AB             >
1452+ E8AB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1452+ E8AC 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1452+ E8B0 52 54 29    >
1452+ E8B3             >                org     $-1                 // alter last byte of Name just above to set
1452+ E8B2 A9          >                db      {b $} | END_BIT     // msb as name end
1452+ E8B3             >
1452+ E8B3 A1 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1452+ E8B5             >Prev_Ptr        defl    Heap_Ptr
1452+ E8B5             >
1452+ E8B5             >mirror_Ptr      defl    $
1452+ E8B5             >
1452+ E8B5 F7 72       >                dw      Dict_Ptr + 2        // xt
1452+ E8B7             >Heap_Ptr        defl    $ - $E000           // save current HP
1452+ E8B7             >
1452+ E8B7             >Current_HP      defl  $ - $E000             // used to set HP once!
1452+ E8B7             >
1452+ E8B7             >//              ______________________________________________________________________
1452+ E8B7             >//              Dictionary part
1452+ E8B7             >
1452+ E8B7             >                org     Dict_Ptr
1452+ 72F5             >
1452+ 72F5 B5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1452+ 72F7             >
1452+ 72F7             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1452+ 72F7 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1452+ 72FA             >
1452+ 72FA             >
1452+ 72FA             >                endif           ; ok        // for other definitions it "points" the correct handler
1452+ 72FA             >                // Use of "; ok" to suppress "warning[fwdref]"
1452+ 72FA             >
1452+ 72FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1453+ 72FA 8B 75                        dw      ABORT                   // abort
1454+ 72FC 3D 68                        dw      EXIT                    // ;
1455+ 72FE
1456+ 72FE              //  ______________________________________________________________________
1457+ 72FE              //
1458+ 72FE              // error        n --
1459+ 72FE              // raise an error
1460+ 72FE              // if WARNING is 0, prints "MSG#n".
1461+ 72FE              // if WARNING is 1, prints line n of screen 4.
1462+ 72FE              // if WARNING is -1 does (ABORT) that normally does ABORT
1463+ 72FE              // value can be negative or beyond block 4.
1464+ 72FE                              Colon_Def ERROR,  "ERROR", is_normal
1464+ 72FE             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1464+ 72FE             >
1464+ 72FE             >Dict_Ptr        defl    $
1464+ 72FE             >
1464+ 72FE             >//              ______________________________________________________________________
1464+ 72FE             >//              Heap part
1464+ 72FE             >
1464+ 72FE             >
1464+ 72FE             >                org     (Heap_Ptr & $1FFF) + $E000
1464+ E8B7             >
1464+ E8B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1464+ E8B7             >Latest_Definition defl  Heap_Ptr
1464+ E8B7             >
1464+ E8B7             >                // dummy db directives used to calculate length of namec
1464+ E8B7 45 52 52 4F >                db      "ERROR"
1464+ E8BB 52          >
1464+ E8BC             >len_NFA         defl    $ - temp_NFA
1464+ E8BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1464+ E8B7             >
1464+ E8B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1464+ E8B8 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1464+ E8BC 52          >
1464+ E8BD             >                org     $-1                 // alter last byte of Name just above to set
1464+ E8BC D2          >                db      {b $} | END_BIT     // msb as name end
1464+ E8BD             >
1464+ E8BD AB 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1464+ E8BF             >Prev_Ptr        defl    Heap_Ptr
1464+ E8BF             >
1464+ E8BF             >mirror_Ptr      defl    $
1464+ E8BF             >
1464+ E8BF 00 73       >                dw      Dict_Ptr + 2        // xt
1464+ E8C1             >Heap_Ptr        defl    $ - $E000           // save current HP
1464+ E8C1             >
1464+ E8C1             >Current_HP      defl  $ - $E000             // used to set HP once!
1464+ E8C1             >
1464+ E8C1             >//              ______________________________________________________________________
1464+ E8C1             >//              Dictionary part
1464+ E8C1             >
1464+ E8C1             >                org     Dict_Ptr
1464+ 72FE             >
1464+ 72FE BF 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1464+ 7300             >
1464+ 7300             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1464+ 7300 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1464+ 7303             >
1464+ 7303             >
1464+ 7303             >                endif           ; ok        // for other definitions it "points" the correct handler
1464+ 7303             >                // Use of "; ok" to suppress "warning[fwdref]"
1464+ 7303             >
1464+ 7303             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1465+ 7303 D5 6A 72 69                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1465+ 7307 73 68
1466+ 7309                                                              // if
1467+ 7309 F3 63                        dw      ZBRANCH
1468+ 730B 04 00                        dw      Error_Endif_1 - $
1469+ 730D F7 72                        dw          CABORT              //      (abort)
1470+ 730F              Error_Endif_1:                                  // endif
1471+ 730F 89 6B 02 6F                  dw      HERE, COUNT, TYPE       // here count type
1471+ 7313 56 6F
1472+ 7315 F3 70                        dw      C_DOT_QUOTE             // .( ? )
1473+ 7317 02 3F 20                     db      2, "? "
1474+ 731A 79 77                        dw      MESSAGE                 // message  ( forward )
1475+ 731C BD 6A 72 69                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1475+ 7320 2D 68
1476+ 7322 05 6B 72 69                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1476+ 7326 2B 6C
1477+ 7328                                                              // if
1478+ 7328 F3 63                        dw      ZBRANCH
1479+ 732A 08 00                        dw      Error_Endif_2 - $
1480+ 732C 0B 6B 72 69                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1480+ 7330 01 69
1481+ 7332              Error_Endif_2:                                  // endif
1482+ 7332 4F 75                        dw      QUIT                    // quit ( forward )
1483+ 7334 3D 68                        dw      EXIT                    // ;
1484+ 7336              //  ______________________________________________________________________
1485+ 7336              //
1486+ 7336              // id.          nfa --
1487+ 7336                              Colon_Def ID_DOT,  "ID.", is_normal
1487+ 7336             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1487+ 7336             >
1487+ 7336             >Dict_Ptr        defl    $
1487+ 7336             >
1487+ 7336             >//              ______________________________________________________________________
1487+ 7336             >//              Heap part
1487+ 7336             >
1487+ 7336             >
1487+ 7336             >                org     (Heap_Ptr & $1FFF) + $E000
1487+ E8C1             >
1487+ E8C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1487+ E8C1             >Latest_Definition defl  Heap_Ptr
1487+ E8C1             >
1487+ E8C1             >                // dummy db directives used to calculate length of namec
1487+ E8C1 49 44 2E    >                db      "ID."
1487+ E8C4             >len_NFA         defl    $ - temp_NFA
1487+ E8C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1487+ E8C1             >
1487+ E8C1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1487+ E8C2 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1487+ E8C5             >                org     $-1                 // alter last byte of Name just above to set
1487+ E8C4 AE          >                db      {b $} | END_BIT     // msb as name end
1487+ E8C5             >
1487+ E8C5 B7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1487+ E8C7             >Prev_Ptr        defl    Heap_Ptr
1487+ E8C7             >
1487+ E8C7             >mirror_Ptr      defl    $
1487+ E8C7             >
1487+ E8C7 38 73       >                dw      Dict_Ptr + 2        // xt
1487+ E8C9             >Heap_Ptr        defl    $ - $E000           // save current HP
1487+ E8C9             >
1487+ E8C9             >Current_HP      defl  $ - $E000             // used to set HP once!
1487+ E8C9             >
1487+ E8C9             >//              ______________________________________________________________________
1487+ E8C9             >//              Dictionary part
1487+ E8C9             >
1487+ E8C9             >                org     Dict_Ptr
1487+ 7336             >
1487+ 7336 C7 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1487+ 7338             >
1487+ 7338             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1487+ 7338 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1487+ 733B             >
1487+ 733B             >
1487+ 733B             >                endif           ; ok        // for other definitions it "points" the correct handler
1487+ 733B             >                // Use of "; ok" to suppress "warning[fwdref]"
1487+ 733B             >
1487+ 733B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1488+ 733B E1 6C                        dw      QTOHEAP
1489+ 733D 08 69 6B 6A                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1489+ 7341 5D 6C
1490+ 7343 A3 68                        dw      ONE_PLUS                // 1+
1491+ 7345 E4 68 C8 6B                  dw      OVER, SUBTRACT          // over -
1492+ 7349 08 69 47 68                  dw      DUP, TO_R               // >r
1493+ 734D 99 70 01 69                  dw      PAD, SWAP               // pad swap
1494+ 7351 82 67                        dw      CMOVE                   // cmove
1495+ 7353 99 70 A3 68                  dw      PAD, ONE_PLUS           // pad 1+
1496+ 7357 52 68 AA 68                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1497+ 735B 56 6F 52 6C                  dw      TYPE, SPACE             // type
1498+ 735F 3D 68                        dw      EXIT                    // ;
1499+ 7361
1500+ 7361              //  ______________________________________________________________________
1501+ 7361              //
1502+ 7361              // code         -- cccc
1503+ 7361                              Colon_Def CODE,  "CODE", is_normal
1503+ 7361             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1503+ 7361             >
1503+ 7361             >Dict_Ptr        defl    $
1503+ 7361             >
1503+ 7361             >//              ______________________________________________________________________
1503+ 7361             >//              Heap part
1503+ 7361             >
1503+ 7361             >
1503+ 7361             >                org     (Heap_Ptr & $1FFF) + $E000
1503+ E8C9             >
1503+ E8C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1503+ E8C9             >Latest_Definition defl  Heap_Ptr
1503+ E8C9             >
1503+ E8C9             >                // dummy db directives used to calculate length of namec
1503+ E8C9 43 4F 44 45 >                db      "CODE"
1503+ E8CD             >len_NFA         defl    $ - temp_NFA
1503+ E8CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1503+ E8C9             >
1503+ E8C9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1503+ E8CA 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1503+ E8CE             >                org     $-1                 // alter last byte of Name just above to set
1503+ E8CD C5          >                db      {b $} | END_BIT     // msb as name end
1503+ E8CE             >
1503+ E8CE C1 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1503+ E8D0             >Prev_Ptr        defl    Heap_Ptr
1503+ E8D0             >
1503+ E8D0             >mirror_Ptr      defl    $
1503+ E8D0             >
1503+ E8D0 63 73       >                dw      Dict_Ptr + 2        // xt
1503+ E8D2             >Heap_Ptr        defl    $ - $E000           // save current HP
1503+ E8D2             >
1503+ E8D2             >Current_HP      defl  $ - $E000             // used to set HP once!
1503+ E8D2             >
1503+ E8D2             >//              ______________________________________________________________________
1503+ E8D2             >//              Dictionary part
1503+ E8D2             >
1503+ E8D2             >                org     Dict_Ptr
1503+ 7361             >
1503+ 7361 D0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1503+ 7363             >
1503+ 7363             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1503+ 7363 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1503+ 7366             >
1503+ 7366             >
1503+ 7366             >                endif           ; ok        // for other definitions it "points" the correct handler
1503+ 7366             >                // Use of "; ok" to suppress "warning[fwdref]"
1503+ 7366             >
1503+ 7366             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1504+ 7366 EA 72                        dw      LFIND                   // -find
1505+ 7368                                                              // if
1506+ 7368 F3 63                        dw      ZBRANCH
1507+ 736A 10 00                        dw      Code_Endif - $
1508+ 736C ED 68                        dw          DROP                //      drop
1509+ 736E 47 6D 38 73                  dw          TO_NAME, ID_DOT     //      >name id.
1510+ 7372 A3 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1510+ 7376 79 77
1511+ 7378 52 6C                        dw          SPACE               //      space
1512+ 737A              Code_Endif:                                     // endif
1513+ 737A 89 6B                        dw      HERE                    // here
1514+ 737C                                                              // ( ---- here begins NFA ---- )
1515+ 737C 08 69 87 69                  dw      DUP, CFETCH             // dup c@
1516+ 7380 CF 6A 72 69                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1516+ 7384 05 6C
1517+ 7386 A3 68                        dw      ONE_PLUS                // 1+
1518+ 7388 08 69 94 6B                  dw      DUP, ALLOT              // dup allot
1519+ 738C B9 68 B9 68                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1520+ 7390 47 68                        dw      TO_R                    // >r
1521+ 7392 08 69                        dw      DUP                     // dup
1522+ 7394 A3 63                        dw      LIT
1523+ 7396 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1524+ 7398 69 69                        dw      TOGGLE                  // toggle
1525+ 739A 89 6B AA 68                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1526+ 739E A3 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1526+ 73A2 69 69
1527+ 73A4                                                              // ( ---- here is LFA ---- )
1528+ 73A4 29 6B 72 69                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1528+ 73A8 72 69
1529+ 73AA 9F 6B                        dw      COMMA
1530+ 73AC 08 69 B9 68                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1530+ 73B0 9F 6B
1531+ 73B2 F2 6C                        dw      HP_FETCH                // hp@
1532+ 73B4 29 6B 72 69                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1532+ 73B8 7C 69
1533+ 73BA F2 6C C3 6C                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1534+ 73BE 5D 68 82 67                  dw      R_OP, CMOVE
1535+ 73C2 5D 68 CA 68                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1535+ 73C6 94 6B
1536+ 73C8 52 68 F9 6A                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1536+ 73CC 5A 69
1537+ 73CE F2 6C BD 68                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1538+ 73D2 9F 6B                        dw      COMMA
1539+ 73D4 64 6A 04 6D                  dw      ZERO, SKIP_HP_PAGE
1540+ 73D8                                                              // ( ---- here is LFA ---- )
1541+ 73D8 3D 68                        dw      EXIT                    // ;
1542+ 73DA
1543+ 73DA              //  ______________________________________________________________________
1544+ 73DA              //
1545+ 73DA              // create       -- cccc     ( compile time )
1546+ 73DA              //              -- a        ( run time )
1547+ 73DA                              Colon_Def CREATE,  "CREATE", is_normal
1547+ 73DA             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1547+ 73DA             >
1547+ 73DA             >Dict_Ptr        defl    $
1547+ 73DA             >
1547+ 73DA             >//              ______________________________________________________________________
1547+ 73DA             >//              Heap part
1547+ 73DA             >
1547+ 73DA             >
1547+ 73DA             >                org     (Heap_Ptr & $1FFF) + $E000
1547+ E8D2             >
1547+ E8D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1547+ E8D2             >Latest_Definition defl  Heap_Ptr
1547+ E8D2             >
1547+ E8D2             >                // dummy db directives used to calculate length of namec
1547+ E8D2 43 52 45 41 >                db      "CREATE"
1547+ E8D6 54 45       >
1547+ E8D8             >len_NFA         defl    $ - temp_NFA
1547+ E8D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1547+ E8D2             >
1547+ E8D2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1547+ E8D3 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1547+ E8D7 54 45       >
1547+ E8D9             >                org     $-1                 // alter last byte of Name just above to set
1547+ E8D8 C5          >                db      {b $} | END_BIT     // msb as name end
1547+ E8D9             >
1547+ E8D9 C9 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1547+ E8DB             >Prev_Ptr        defl    Heap_Ptr
1547+ E8DB             >
1547+ E8DB             >mirror_Ptr      defl    $
1547+ E8DB             >
1547+ E8DB DC 73       >                dw      Dict_Ptr + 2        // xt
1547+ E8DD             >Heap_Ptr        defl    $ - $E000           // save current HP
1547+ E8DD             >
1547+ E8DD             >Current_HP      defl  $ - $E000             // used to set HP once!
1547+ E8DD             >
1547+ E8DD             >//              ______________________________________________________________________
1547+ E8DD             >//              Dictionary part
1547+ E8DD             >
1547+ E8DD             >                org     Dict_Ptr
1547+ 73DA             >
1547+ 73DA DB 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1547+ 73DC             >
1547+ 73DC             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1547+ 73DC CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1547+ 73DF             >
1547+ 73DF             >
1547+ 73DF             >                endif           ; ok        // for other definitions it "points" the correct handler
1547+ 73DF             >                // Use of "; ok" to suppress "warning[fwdref]"
1547+ 73DF             >
1547+ 73DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1548+ 73DF 63 73 67 6E                  dw      CODE, SMUDGE            // code smudge
1549+ 73E3 A3 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1549+ 73E7 AE 6B
1550+ 73E9 A3 63 4B 6A                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1550+ 73ED 9F 6B
1551+ 73EF A3 6E                        dw      C_SEMICOLON_CODE
1552+ 73F1                              // this routine is called from the call coded in CFA
1553+ 73F1              Create_Ptr:
1554+ 73F1
1555+ 73F1
1556+ 73F1
1557+ 73F1                              next
1557+ 73F1 DD E9       >                jp      (ix)
1558+ 73F3
1559+ 73F3              //  ______________________________________________________________________
1560+ 73F3              //
1561+ 73F3              // [compile]    -- cccc     ( compile time )
1562+ 73F3                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1562+ 73F3             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1562+ 73F3             >
1562+ 73F3             >Dict_Ptr        defl    $
1562+ 73F3             >
1562+ 73F3             >//              ______________________________________________________________________
1562+ 73F3             >//              Heap part
1562+ 73F3             >
1562+ 73F3             >
1562+ 73F3             >                org     (Heap_Ptr & $1FFF) + $E000
1562+ E8DD             >
1562+ E8DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1562+ E8DD             >Latest_Definition defl  Heap_Ptr
1562+ E8DD             >
1562+ E8DD             >                // dummy db directives used to calculate length of namec
1562+ E8DD 5B 43 4F 4D >                db      "[COMPILE]"
1562+ E8E1 50 49 4C 45 >
1562+ E8E5 5D          >
1562+ E8E6             >len_NFA         defl    $ - temp_NFA
1562+ E8E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1562+ E8DD             >
1562+ E8DD C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1562+ E8DE 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1562+ E8E2 50 49 4C 45 >
1562+ E8E6 5D          >
1562+ E8E7             >                org     $-1                 // alter last byte of Name just above to set
1562+ E8E6 DD          >                db      {b $} | END_BIT     // msb as name end
1562+ E8E7             >
1562+ E8E7 D2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1562+ E8E9             >Prev_Ptr        defl    Heap_Ptr
1562+ E8E9             >
1562+ E8E9             >mirror_Ptr      defl    $
1562+ E8E9             >
1562+ E8E9 F5 73       >                dw      Dict_Ptr + 2        // xt
1562+ E8EB             >Heap_Ptr        defl    $ - $E000           // save current HP
1562+ E8EB             >
1562+ E8EB             >Current_HP      defl  $ - $E000             // used to set HP once!
1562+ E8EB             >
1562+ E8EB             >//              ______________________________________________________________________
1562+ E8EB             >//              Dictionary part
1562+ E8EB             >
1562+ E8EB             >                org     Dict_Ptr
1562+ 73F3             >
1562+ 73F3 E9 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1562+ 73F5             >
1562+ 73F5             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1562+ 73F5 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1562+ 73F8             >
1562+ 73F8             >
1562+ 73F8             >                endif           ; ok        // for other definitions it "points" the correct handler
1562+ 73F8             >                // Use of "; ok" to suppress "warning[fwdref]"
1562+ 73F8             >
1562+ 73F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1563+ 73F8 EA 72                        dw      LFIND                   // -find      (  cfa  b  f  )
1564+ 73FA 62 68                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1565+ 73FC 64 6A BD 6D                  dw      ZERO, QERROR            // 0 ?error
1566+ 7400 ED 68                        dw      DROP                    // drop       (  cfa  )
1567+ 7402 9F 6B                        dw      COMMA                   // ,
1568+ 7404 3D 68                        dw      EXIT                    // ; immediate
1569+ 7406
1570+ 7406              //  ______________________________________________________________________
1571+ 7406              //
1572+ 7406              // literal      n --      ( compile time )
1573+ 7406                              Colon_Def LITERAL,  "LITERAL", is_immediate
1573+ 7406             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1573+ 7406             >
1573+ 7406             >Dict_Ptr        defl    $
1573+ 7406             >
1573+ 7406             >//              ______________________________________________________________________
1573+ 7406             >//              Heap part
1573+ 7406             >
1573+ 7406             >
1573+ 7406             >                org     (Heap_Ptr & $1FFF) + $E000
1573+ E8EB             >
1573+ E8EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1573+ E8EB             >Latest_Definition defl  Heap_Ptr
1573+ E8EB             >
1573+ E8EB             >                // dummy db directives used to calculate length of namec
1573+ E8EB 4C 49 54 45 >                db      "LITERAL"
1573+ E8EF 52 41 4C    >
1573+ E8F2             >len_NFA         defl    $ - temp_NFA
1573+ E8F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1573+ E8EB             >
1573+ E8EB C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1573+ E8EC 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1573+ E8F0 52 41 4C    >
1573+ E8F3             >                org     $-1                 // alter last byte of Name just above to set
1573+ E8F2 CC          >                db      {b $} | END_BIT     // msb as name end
1573+ E8F3             >
1573+ E8F3 DD 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1573+ E8F5             >Prev_Ptr        defl    Heap_Ptr
1573+ E8F5             >
1573+ E8F5             >mirror_Ptr      defl    $
1573+ E8F5             >
1573+ E8F5 08 74       >                dw      Dict_Ptr + 2        // xt
1573+ E8F7             >Heap_Ptr        defl    $ - $E000           // save current HP
1573+ E8F7             >
1573+ E8F7             >Current_HP      defl  $ - $E000             // used to set HP once!
1573+ E8F7             >
1573+ E8F7             >//              ______________________________________________________________________
1573+ E8F7             >//              Dictionary part
1573+ E8F7             >
1573+ E8F7             >                org     Dict_Ptr
1573+ 7406             >
1573+ 7406 F5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1573+ 7408             >
1573+ 7408             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1573+ 7408 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1573+ 740B             >
1573+ 740B             >
1573+ 740B             >                endif           ; ok        // for other definitions it "points" the correct handler
1573+ 740B             >                // Use of "; ok" to suppress "warning[fwdref]"
1573+ 740B             >
1573+ 740B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1574+ 740B 2F 6B 72 69                  dw      STATE, FETCH            // state @
1575+ 740F                                                              // if
1576+ 740F F3 63                        dw      ZBRANCH
1577+ 7411 08 00                        dw      Literal_Endif - $
1578+ 7413 2D 6E A3 63                  dw          COMPILE, LIT        //      compile lit
1579+ 7417 9F 6B                        dw          COMMA               //      ,
1580+ 7419              Literal_Endif:                                  // endif
1581+ 7419 3D 68                        dw      EXIT                    // ; immediate
1582+ 741B
1583+ 741B              //  ______________________________________________________________________
1584+ 741B              //
1585+ 741B              // dliteral     n --      ( compile time )
1586+ 741B                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1586+ 741B             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1586+ 741B             >
1586+ 741B             >Dict_Ptr        defl    $
1586+ 741B             >
1586+ 741B             >//              ______________________________________________________________________
1586+ 741B             >//              Heap part
1586+ 741B             >
1586+ 741B             >
1586+ 741B             >                org     (Heap_Ptr & $1FFF) + $E000
1586+ E8F7             >
1586+ E8F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1586+ E8F7             >Latest_Definition defl  Heap_Ptr
1586+ E8F7             >
1586+ E8F7             >                // dummy db directives used to calculate length of namec
1586+ E8F7 44 4C 49 54 >                db      "DLITERAL"
1586+ E8FB 45 52 41 4C >
1586+ E8FF             >len_NFA         defl    $ - temp_NFA
1586+ E8FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1586+ E8F7             >
1586+ E8F7 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1586+ E8F8 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1586+ E8FC 45 52 41 4C >
1586+ E900             >                org     $-1                 // alter last byte of Name just above to set
1586+ E8FF CC          >                db      {b $} | END_BIT     // msb as name end
1586+ E900             >
1586+ E900 EB 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1586+ E902             >Prev_Ptr        defl    Heap_Ptr
1586+ E902             >
1586+ E902             >mirror_Ptr      defl    $
1586+ E902             >
1586+ E902 1D 74       >                dw      Dict_Ptr + 2        // xt
1586+ E904             >Heap_Ptr        defl    $ - $E000           // save current HP
1586+ E904             >
1586+ E904             >Current_HP      defl  $ - $E000             // used to set HP once!
1586+ E904             >
1586+ E904             >//              ______________________________________________________________________
1586+ E904             >//              Dictionary part
1586+ E904             >
1586+ E904             >                org     Dict_Ptr
1586+ 741B             >
1586+ 741B 02 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1586+ 741D             >
1586+ 741D             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1586+ 741D CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1586+ 7420             >
1586+ 7420             >
1586+ 7420             >                endif           ; ok        // for other definitions it "points" the correct handler
1586+ 7420             >                // Use of "; ok" to suppress "warning[fwdref]"
1586+ 7420             >
1586+ 7420             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1587+ 7420 2F 6B 72 69                  dw      STATE, FETCH            // state @
1588+ 7424                                                              // if
1589+ 7424 F3 63                        dw      ZBRANCH
1590+ 7426 08 00                        dw      DLiteral_Endif - $
1591+ 7428 01 69                        dw          SWAP                //      swap
1592+ 742A 08 74 08 74                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1593+ 742E              DLiteral_Endif:                                 // endif
1594+ 742E 3D 68                        dw      EXIT                    // ; immediate
1595+ 7430
1596+ 7430              //  ______________________________________________________________________
1597+ 7430              //
1598+ 7430              // [char]       n --      ( compile time )
1599+ 7430              // inside colon definition, gets first character from next input word
1600+ 7430              // and compiles it as literal.
1601+ 7430                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1601+ 7430             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1601+ 7430             >
1601+ 7430             >Dict_Ptr        defl    $
1601+ 7430             >
1601+ 7430             >//              ______________________________________________________________________
1601+ 7430             >//              Heap part
1601+ 7430             >
1601+ 7430             >
1601+ 7430             >                org     (Heap_Ptr & $1FFF) + $E000
1601+ E904             >
1601+ E904             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1601+ E904             >Latest_Definition defl  Heap_Ptr
1601+ E904             >
1601+ E904             >                // dummy db directives used to calculate length of namec
1601+ E904 5B 43 48 41 >                db      "[CHAR]"
1601+ E908 52 5D       >
1601+ E90A             >len_NFA         defl    $ - temp_NFA
1601+ E90A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1601+ E904             >
1601+ E904 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1601+ E905 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1601+ E909 52 5D       >
1601+ E90B             >                org     $-1                 // alter last byte of Name just above to set
1601+ E90A DD          >                db      {b $} | END_BIT     // msb as name end
1601+ E90B             >
1601+ E90B F7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1601+ E90D             >Prev_Ptr        defl    Heap_Ptr
1601+ E90D             >
1601+ E90D             >mirror_Ptr      defl    $
1601+ E90D             >
1601+ E90D 32 74       >                dw      Dict_Ptr + 2        // xt
1601+ E90F             >Heap_Ptr        defl    $ - $E000           // save current HP
1601+ E90F             >
1601+ E90F             >Current_HP      defl  $ - $E000             // used to set HP once!
1601+ E90F             >
1601+ E90F             >//              ______________________________________________________________________
1601+ E90F             >//              Dictionary part
1601+ E90F             >
1601+ E90F             >                org     Dict_Ptr
1601+ 7430             >
1601+ 7430 0D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1601+ 7432             >
1601+ 7432             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1601+ 7432 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1601+ 7435             >
1601+ 7435             >
1601+ 7435             >                endif           ; ok        // for other definitions it "points" the correct handler
1601+ 7435             >                // Use of "; ok" to suppress "warning[fwdref]"
1601+ 7435             >
1601+ 7435             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1602+ 7435 0A 71 08 74                  dw      CHAR, LITERAL           // char [compile] literal
1603+ 7439 3D 68                        dw      EXIT                    // ; immediate
1604+ 743B
1605+ 743B              //  ______________________________________________________________________
1606+ 743B              //
1607+ 743B              // 0x00         n --      ( compile time )
1608+ 743B                              Colon_Def NUL_WORD,  $00, is_immediate
1608+ 743B             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1608+ 743B             >
1608+ 743B             >Dict_Ptr        defl    $
1608+ 743B             >
1608+ 743B             >//              ______________________________________________________________________
1608+ 743B             >//              Heap part
1608+ 743B             >
1608+ 743B             >
1608+ 743B             >                org     (Heap_Ptr & $1FFF) + $E000
1608+ E90F             >
1608+ E90F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1608+ E90F             >Latest_Definition defl  Heap_Ptr
1608+ E90F             >
1608+ E90F             >                // dummy db directives used to calculate length of namec
1608+ E90F 00          >                db      $00
1608+ E910             >len_NFA         defl    $ - temp_NFA
1608+ E910             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1608+ E90F             >
1608+ E90F C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1608+ E910 00          >                db      $00               // name string in 7-bit ascii, but
1608+ E911             >                org     $-1                 // alter last byte of Name just above to set
1608+ E910 80          >                db      {b $} | END_BIT     // msb as name end
1608+ E911             >
1608+ E911 04 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1608+ E913             >Prev_Ptr        defl    Heap_Ptr
1608+ E913             >
1608+ E913             >mirror_Ptr      defl    $
1608+ E913             >
1608+ E913 3D 74       >                dw      Dict_Ptr + 2        // xt
1608+ E915             >Heap_Ptr        defl    $ - $E000           // save current HP
1608+ E915             >
1608+ E915             >Current_HP      defl  $ - $E000             // used to set HP once!
1608+ E915             >
1608+ E915             >//              ______________________________________________________________________
1608+ E915             >//              Dictionary part
1608+ E915             >
1608+ E915             >                org     Dict_Ptr
1608+ 743B             >
1608+ 743B 13 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1608+ 743D             >
1608+ 743D             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1608+ 743D CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1608+ 7440             >
1608+ 7440             >
1608+ 7440             >                endif           ; ok        // for other definitions it "points" the correct handler
1608+ 7440             >                // Use of "; ok" to suppress "warning[fwdref]"
1608+ 7440             >
1608+ 7440             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1609+ 7440 05 6B 72 69                  dw      BLK, FETCH, ONE         // blk @ 1
1609+ 7444 6B 6A
1610+ 7446 FA 6B                        dw      GREATER                 // > if
1611+ 7448                                                              // if
1612+ 7448 F3 63                        dw      ZBRANCH
1613+ 744A 28 00                        dw      Nul_Else_1 - $
1614+ 744C 6B 6A 05 6B                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1614+ 7450 5A 69
1615+ 7452 64 6A 0B 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
1615+ 7456 7C 69
1616+ 7458 05 6B 72 69                  dw          BLK, FETCH          //      blk @
1617+ 745C 9C 6A                        dw          BSCR                //      b/scr
1618+ 745E AA 68                        dw          ONE_SUBTRACT        //      1 -
1619+ 7460 FD 67                        dw          AND_OP              //      and  ( this is tricky )
1620+ 7462 62 68                        dw          ZEQUAL              //      0=
1621+ 7464                                                              //      if
1622+ 7464 F3 63                        dw          ZBRANCH
1623+ 7466 08 00                        dw          Nul_Endif_2 - $
1624+ 7468 E5 6D                        dw              QEXEC           //          ?exec
1625+ 746A 52 68 ED 68                  dw              R_TO, DROP      //          r> drop
1626+ 746E              Nul_Endif_2:                                    //      endif
1627+ 746E EF 63                        dw      BRANCH
1628+ 7470 06 00                        dw      Nul_Endif_1 - $
1629+ 7472              Nul_Else_1:                                     // else
1630+ 7472 52 68 ED 68                  dw          R_TO, DROP          //      r> drop
1631+ 7476              Nul_Endif_1:                                    // endif
1632+ 7476 3D 68                        dw      EXIT                    // ;
1633+ 7478
1634+ 7478              //  ______________________________________________________________________
1635+ 7478              //
1636+ 7478              // ?stack       --
1637+ 7478              // Raise error #1 if stack is empty and you pop it
1638+ 7478              // Raise error #7 if stack is full.
1639+ 7478              // This means SP must always stay between HERE and FFFF
1640+ 7478              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1641+ 7478              // for Next 8K MMU paging this is $DOE8
1642+ 7478                              Colon_Def QSTACK, "?STACK", is_normal
1642+ 7478             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1642+ 7478             >
1642+ 7478             >Dict_Ptr        defl    $
1642+ 7478             >
1642+ 7478             >//              ______________________________________________________________________
1642+ 7478             >//              Heap part
1642+ 7478             >
1642+ 7478             >
1642+ 7478             >                org     (Heap_Ptr & $1FFF) + $E000
1642+ E915             >
1642+ E915             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1642+ E915             >Latest_Definition defl  Heap_Ptr
1642+ E915             >
1642+ E915             >                // dummy db directives used to calculate length of namec
1642+ E915 3F 53 54 41 >                db      "?STACK"
1642+ E919 43 4B       >
1642+ E91B             >len_NFA         defl    $ - temp_NFA
1642+ E91B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1642+ E915             >
1642+ E915 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1642+ E916 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1642+ E91A 43 4B       >
1642+ E91C             >                org     $-1                 // alter last byte of Name just above to set
1642+ E91B CB          >                db      {b $} | END_BIT     // msb as name end
1642+ E91C             >
1642+ E91C 0F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1642+ E91E             >Prev_Ptr        defl    Heap_Ptr
1642+ E91E             >
1642+ E91E             >mirror_Ptr      defl    $
1642+ E91E             >
1642+ E91E 7A 74       >                dw      Dict_Ptr + 2        // xt
1642+ E920             >Heap_Ptr        defl    $ - $E000           // save current HP
1642+ E920             >
1642+ E920             >Current_HP      defl  $ - $E000             // used to set HP once!
1642+ E920             >
1642+ E920             >//              ______________________________________________________________________
1642+ E920             >//              Dictionary part
1642+ E920             >
1642+ E920             >                org     Dict_Ptr
1642+ 7478             >
1642+ 7478 1E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1642+ 747A             >
1642+ 747A             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1642+ 747A CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1642+ 747D             >
1642+ 747D             >
1642+ 747D             >                endif           ; ok        // for other definitions it "points" the correct handler
1642+ 747D             >                // Use of "; ok" to suppress "warning[fwdref]"
1642+ 747D             >
1642+ 747D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1643+ 747D 24 68                        dw      SPFETCH                 // sp@
1644+ 747F BD 6A 72 69                  dw      S0, FETCH               // s0 @
1645+ 7483 01 69 DF 6B                  dw      SWAP, ULESS             // swap u<
1646+ 7487 6B 6A BD 6D                  dw      ONE, QERROR             // 1 ?error
1647+ 748B 89 6B                        dw      HERE                    // here
1648+ 748D BD 6A 72 69                  dw      S0, FETCH, LESS         // s0 @ <
1648+ 7491 ED 6B
1649+ 7493                                                              // if
1650+ 7493 F3 63                        dw      ZBRANCH
1651+ 7495 14 00                        dw      QStack_Endif - $
1652+ 7497 24 68                        dw          SPFETCH             //      sp@
1653+ 7499 89 6B A3 63                  dw          HERE, LIT, 128      //      here 128
1653+ 749D 80 00
1654+ 749F 8A 68 DF 6B                  dw          PLUS, ULESS         //      plus u<
1655+ 74A3 A3 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1655+ 74A7 BD 6D
1656+ 74A9              QStack_Endif:                                   // endif
1657+ 74A9 3D 68                        dw      EXIT                    // ;
1658+ 74AB
1659+ 74AB
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/L1.asm
 150  74AB                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/L2.asm
   1+ 74AB              //  ______________________________________________________________________
   2+ 74AB              //
   3+ 74AB              //  L2.asm
   4+ 74AB              //
   5+ 74AB              //  Level-2 3dos
   6+ 74AB              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 74AB              //  ______________________________________________________________________
   8+ 74AB
   9+ 74AB
  10+ 74AB              //  ______________________________________________________________________
  11+ 74AB              //
  12+ 74AB              // interpret    --
  13+ 74AB              // This is the text interpreter.
  14+ 74AB              // It executes or compiles, depending on STATE, the text coming from
  15+ 74AB              // current input stream.
  16+ 74AB              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 74AB              // the word is interpreted as numeric and converted, using current BASE,
  18+ 74AB              // leaving on top of stack a single or double precision number, depending
  19+ 74AB              // on the presence of a decimal point.
  20+ 74AB              // If the number conversion fails, the terminal is notified with ? followed
  21+ 74AB              // by the offending word.
  22+ 74AB                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 74AB             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 74AB             >
  22+ 74AB             >Dict_Ptr        defl    $
  22+ 74AB             >
  22+ 74AB             >//              ______________________________________________________________________
  22+ 74AB             >//              Heap part
  22+ 74AB             >
  22+ 74AB             >
  22+ 74AB             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E920             >
  22+ E920             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E920             >Latest_Definition defl  Heap_Ptr
  22+ E920             >
  22+ E920             >                // dummy db directives used to calculate length of namec
  22+ E920 49 4E 54 45 >                db      "INTERPRET"
  22+ E924 52 50 52 45 >
  22+ E928 54          >
  22+ E929             >len_NFA         defl    $ - temp_NFA
  22+ E929             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E920             >
  22+ E920 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E921 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E925 52 50 52 45 >
  22+ E929 54          >
  22+ E92A             >                org     $-1                 // alter last byte of Name just above to set
  22+ E929 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E92A             >
  22+ E92A 15 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E92C             >Prev_Ptr        defl    Heap_Ptr
  22+ E92C             >
  22+ E92C             >mirror_Ptr      defl    $
  22+ E92C             >
  22+ E92C AD 74       >                dw      Dict_Ptr + 2        // xt
  22+ E92E             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E92E             >
  22+ E92E             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E92E             >
  22+ E92E             >//              ______________________________________________________________________
  22+ E92E             >//              Dictionary part
  22+ E92E             >
  22+ E92E             >                org     Dict_Ptr
  22+ 74AB             >
  22+ 74AB 2C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 74AD             >
  22+ 74AD             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 74AD CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 74B0             >
  22+ 74B0             >
  22+ 74B0             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 74B0             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 74B0             >
  22+ 74B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 74B0
  24+ 74B0              Interpret_Begin:                                        // begin
  25+ 74B0 EA 72                        dw          LFIND                       //      -find
  26+ 74B2                                                                      //      if
  27+ 74B2 F3 63                        dw          ZBRANCH
  28+ 74B4 1A 00                        dw          Interpret_Else_1 - $
  29+ 74B6 2F 6B 72 69                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 74BA ED 6B
  30+ 74BC                                                                      //          if
  31+ 74BC F3 63                        dw              ZBRANCH
  32+ 74BE 08 00                        dw              Interpret_Else_2 - $
  33+ 74C0 42 6E                        dw                  COMPILE_XT          //              compile,
  34+ 74C2                                                                      //          else
  35+ 74C2 EF 63                        dw              BRANCH
  36+ 74C4 06 00                        dw              Interpret_Endif_2 - $
  37+ 74C6              Interpret_Else_2:
  38+ 74C6 AE 63 2B 6A                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 74CA              Interpret_Endif_2:                                      //          endif
  40+ 74CA                                                                      //      else
  41+ 74CA EF 63                        dw          BRANCH
  42+ 74CC 1A 00                        dw          Interpret_Endif_1 - $
  43+ 74CE              Interpret_Else_1:
  44+ 74CE 89 6B 3C 72                  dw              HERE, NUMBER            //          here number
  45+ 74D2 3B 6B 72 69                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 74D6 A3 68
  46+ 74D8                                                                      //          if
  47+ 74D8 F3 63                        dw              ZBRANCH
  48+ 74DA 08 00                        dw              Interpret_Else_3 - $
  49+ 74DC              //              dw                  NMODE, FETCH        //              nmode @
  50+ 74DC              //                                                      //              if
  51+ 74DC              //              dw                  ZBRANCH
  52+ 74DC              //              dw                  Interpret_Endif_4 - $
  53+ 74DC              //              dw                      ONE, ZERO       //                  1 0
  54+ 74DC              //              dw                      TWO_DROP        //                  2drop
  55+ 74DC              //Interpret_Endif_4:                                      //              endif
  56+ 74DC 1D 74                        dw                  DLITERAL            //              [compile] dliteral
  57+ 74DE                                                                      //          else
  58+ 74DE EF 63                        dw              BRANCH
  59+ 74E0 06 00                        dw              Interpret_Endif_3 - $
  60+ 74E2              Interpret_Else_3:
  61+ 74E2 ED 68                        dw                  DROP                //              drop
  62+ 74E4 08 74                        dw                  LITERAL             //              [compile]  literal
  63+ 74E6              Interpret_Endif_3:                                      //          endif
  64+ 74E6              Interpret_Endif_1:                                      //      endif
  65+ 74E6 7A 74                        dw          QSTACK                      //      ?stack
  66+ 74E8 9C 66                        dw          QTERMINAL                   //      ?terminal
  67+ 74EA                                                                      //      if
  68+ 74EA F3 63                        dw          ZBRANCH
  69+ 74EC 04 00                        dw          Interpret_Endif_5 - $
  70+ 74EE 4F 75                        dw              QUIT                    //          quit
  71+ 74F0              Interpret_Endif_5:                                      //      endif
  72+ 74F0 EF 63                        dw      BRANCH
  73+ 74F2 BE FF                        dw      Interpret_Begin - $
  74+ 74F4 3D 68                        dw      EXIT                            // ;
  75+ 74F6
  76+ 74F6              //  ______________________________________________________________________
  77+ 74F6              //
  78+ 74F6              // vocabulary   -- cccc     ( compile time )
  79+ 74F6              // Defining word used in the form   VOCABULARY cccc
  80+ 74F6              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 74F6              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 74F6              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 74F6              // so new definitions can be inserted in that vocabulary.
  84+ 74F6                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 74F6             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 74F6             >
  84+ 74F6             >Dict_Ptr        defl    $
  84+ 74F6             >
  84+ 74F6             >//              ______________________________________________________________________
  84+ 74F6             >//              Heap part
  84+ 74F6             >
  84+ 74F6             >
  84+ 74F6             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E92E             >
  84+ E92E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E92E             >Latest_Definition defl  Heap_Ptr
  84+ E92E             >
  84+ E92E             >                // dummy db directives used to calculate length of namec
  84+ E92E 56 4F 43 41 >                db      "VOCABULARY"
  84+ E932 42 55 4C 41 >
  84+ E936 52 59       >
  84+ E938             >len_NFA         defl    $ - temp_NFA
  84+ E938             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E92E             >
  84+ E92E 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E92F 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E933 42 55 4C 41 >
  84+ E937 52 59       >
  84+ E939             >                org     $-1                 // alter last byte of Name just above to set
  84+ E938 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E939             >
  84+ E939 20 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E93B             >Prev_Ptr        defl    Heap_Ptr
  84+ E93B             >
  84+ E93B             >mirror_Ptr      defl    $
  84+ E93B             >
  84+ E93B F8 74       >                dw      Dict_Ptr + 2        // xt
  84+ E93D             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E93D             >
  84+ E93D             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E93D             >
  84+ E93D             >//              ______________________________________________________________________
  84+ E93D             >//              Dictionary part
  84+ E93D             >
  84+ E93D             >                org     Dict_Ptr
  84+ 74F6             >
  84+ 74F6 3B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 74F8             >
  84+ 74F8             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 74F8 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 74FB             >
  84+ 74FB             >
  84+ 74FB             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 74FB             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 74FB             >
  84+ 74FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 74FB
  86+ 74FB DC 73                        dw      CREATE
  87+ 74FD
  88+ 74FD                              // dummy word + link part
  89+ 74FD A3 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 7501 9F 6B
  90+ 7503 29 6B 72 69                  dw      CURRENT, FETCH          // current @
  91+ 7507 72 69                        dw      FETCH                   // @
  92+ 7509                          //  dw      CELL_MINUS              // cell-
  93+ 7509 9F 6B                        dw      COMMA                   // ,
  94+ 750B
  95+ 750B                              // voc-link part
  96+ 750B 89 6B                        dw      HERE                    // here
  97+ 750D E7 6A 72 69                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 7511 9F 6B                        dw      COMMA                   // ,
  99+ 7513 E7 6A 7C 69                  dw      VOC_LINK, STORE         // voc-link !
 100+ 7517                              // DOES part
 101+ 7517 D8 6E                        dw      C_DOES                  // _does>_
 102+ 7519              Vocabulary_Does:
 103+ 7519                        //    nop
 104+ 7519 CD 0F 6A                     call    Enter_Ptr
 105+ 751C
 106+ 751C B9 68                        dw      CELL_PLUS               // cell+
 107+ 751E 23 6B 7C 69                  dw      CONTEXT, STORE          // context !
 108+ 7522 3D 68                        dw      EXIT                    // ;
 109+ 7524
 110+ 7524              //  ______________________________________________________________________
 111+ 7524              //
 112+ 7524              // forth        --
 113+ 7524              // Name of the first vocabulary.
 114+ 7524              // It makes FORTH the CONTEXT vocabulary.
 115+ 7524              // Until new user vocabulary are defined, new colon-definitions becomes
 116+ 7524              // part of FORTH. It is immediate, so it will executed during the creation
 117+ 7524              // of a colon definition to be able to select the vocabulary.
 118+ 7524
 119+ 7524                              New_Def FORTH, "FORTH", Vocabulary_Does, is_immediate
 119+ 7524             >
 119+ 7524             >Dict_Ptr        defl    $
 119+ 7524             >
 119+ 7524             >//              ______________________________________________________________________
 119+ 7524             >//              Heap part
 119+ 7524             >
 119+ 7524             >
 119+ 7524             >                org     (Heap_Ptr & $1FFF) + $E000
 119+ E93D             >
 119+ E93D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ E93D             >Latest_Definition defl  Heap_Ptr
 119+ E93D             >
 119+ E93D             >                // dummy db directives used to calculate length of namec
 119+ E93D 46 4F 52 54 >                db      "FORTH"
 119+ E941 48          >
 119+ E942             >len_NFA         defl    $ - temp_NFA
 119+ E942             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ E93D             >
 119+ E93D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ E93E 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 119+ E942 48          >
 119+ E943             >                org     $-1                 // alter last byte of Name just above to set
 119+ E942 C8          >                db      {b $} | END_BIT     // msb as name end
 119+ E943             >
 119+ E943 2E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 119+ E945             >Prev_Ptr        defl    Heap_Ptr
 119+ E945             >
 119+ E945             >mirror_Ptr      defl    $
 119+ E945             >
 119+ E945 26 75       >                dw      Dict_Ptr + 2        // xt
 119+ E947             >Heap_Ptr        defl    $ - $E000           // save current HP
 119+ E947             >
 119+ E947             >Current_HP      defl  $ - $E000             // used to set HP once!
 119+ E947             >
 119+ E947             >//              ______________________________________________________________________
 119+ E947             >//              Dictionary part
 119+ E947             >
 119+ E947             >                org     Dict_Ptr
 119+ 7524             >
 119+ 7524 45 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 119+ 7526             >
 119+ 7526             >FORTH:          if Vocabulary_Does != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 7526 CD 19 75    >                call    Vocabulary_Does ; ok        // for primitive definitions  actual code
 119+ 7529             >
 119+ 7529             >
 119+ 7529             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 7529             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 7529             >
 119+ 7529             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 7529
 121+ 7529 81 A0                        db      $81, $A0
 122+ 752B              Forth_Latest_Ptr:
 123+ 752B 3D 09                        dw      Latest_Definition
 124+ 752D              Voclink_Ptr:
 125+ 752D 00 00                        dw      0
 126+ 752F
 127+ 752F              // ____
 128+ 752F              // temp_VOC        defl    $                   // save this address
 129+ 752F              //              org     (Heap_Ptr & $1FFF) + $E000
 130+ 752F              //              db      $81, $A0
 131+ 752F              // Forth_Latest_Ptr_HEAP:
 132+ 752F              //                 dw      Latest_Definition
 133+ 752F              // Voclink_Ptr_HEAP:
 134+ 752F              //                 dw      0
 135+ 752F              // Heap_Ptr        defl    $ - $E000           // save current HP
 136+ 752F              //                 org     temp_VOC
 137+ 752F              // ____
 138+ 752F
 139+ 752F              // Any new vocabulary is structured as follow:
 140+ 752F              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 141+ 752F              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 142+ 752F              // PFA+4 always contains the LATEST word of this VOCABULARY.
 143+ 752F              //       at creations it points to the null-word of its parent vocabulary
 144+ 752F              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 145+ 752F              // PFA+6 is the pointer that builds up the vocabulary linked list.
 146+ 752F              //       FORTH has 0 here to signal the end of the list and user's variable
 147+ 752F              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 148+ 752F              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 149+ 752F              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 150+ 752F
 151+ 752F              //  ______________________________________________________________________
 152+ 752F              //
 153+ 752F              // definitions  --
 154+ 752F              // Used in the form  cccc DEFINITIONS
 155+ 752F              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 156+ 752F              // vocabulary cccc.
 157+ 752F                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 157+ 752F             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 157+ 752F             >
 157+ 752F             >Dict_Ptr        defl    $
 157+ 752F             >
 157+ 752F             >//              ______________________________________________________________________
 157+ 752F             >//              Heap part
 157+ 752F             >
 157+ 752F             >
 157+ 752F             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E947             >
 157+ E947             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E947             >Latest_Definition defl  Heap_Ptr
 157+ E947             >
 157+ E947             >                // dummy db directives used to calculate length of namec
 157+ E947 44 45 46 49 >                db      "DEFINITIONS"
 157+ E94B 4E 49 54 49 >
 157+ E94F 4F 4E 53    >
 157+ E952             >len_NFA         defl    $ - temp_NFA
 157+ E952             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E947             >
 157+ E947 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E948 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 157+ E94C 4E 49 54 49 >
 157+ E950 4F 4E 53    >
 157+ E953             >                org     $-1                 // alter last byte of Name just above to set
 157+ E952 D3          >                db      {b $} | END_BIT     // msb as name end
 157+ E953             >
 157+ E953 3D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E955             >Prev_Ptr        defl    Heap_Ptr
 157+ E955             >
 157+ E955             >mirror_Ptr      defl    $
 157+ E955             >
 157+ E955 31 75       >                dw      Dict_Ptr + 2        // xt
 157+ E957             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E957             >
 157+ E957             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E957             >
 157+ E957             >//              ______________________________________________________________________
 157+ E957             >//              Dictionary part
 157+ E957             >
 157+ E957             >                org     Dict_Ptr
 157+ 752F             >
 157+ 752F 55 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 7531             >
 157+ 7531             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 7531 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 7534             >
 157+ 7534             >
 157+ 7534             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 7534             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 7534             >
 157+ 7534             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 7534 23 6B 72 69                  dw      CONTEXT, FETCH          // context @
 159+ 7538 29 6B 7C 69                  dw      CURRENT, STORE          // current !
 160+ 753C 3D 68                        dw      EXIT                    // ;
 161+ 753E
 162+ 753E              //  ______________________________________________________________________
 163+ 753E              //
 164+ 753E              // (            -- cccc )
 165+ 753E              // the following text is interpreted as a comment until a closing )
 166+ 753E                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 166+ 753E             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 166+ 753E             >
 166+ 753E             >Dict_Ptr        defl    $
 166+ 753E             >
 166+ 753E             >//              ______________________________________________________________________
 166+ 753E             >//              Heap part
 166+ 753E             >
 166+ 753E             >
 166+ 753E             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E957             >
 166+ E957             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E957             >Latest_Definition defl  Heap_Ptr
 166+ E957             >
 166+ E957             >                // dummy db directives used to calculate length of namec
 166+ E957 28          >                db      "("
 166+ E958             >len_NFA         defl    $ - temp_NFA
 166+ E958             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E957             >
 166+ E957 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E958 28          >                db      "("               // name string in 7-bit ascii, but
 166+ E959             >                org     $-1                 // alter last byte of Name just above to set
 166+ E958 A8          >                db      {b $} | END_BIT     // msb as name end
 166+ E959             >
 166+ E959 47 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E95B             >Prev_Ptr        defl    Heap_Ptr
 166+ E95B             >
 166+ E95B             >mirror_Ptr      defl    $
 166+ E95B             >
 166+ E95B 40 75       >                dw      Dict_Ptr + 2        // xt
 166+ E95D             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E95D             >
 166+ E95D             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E95D             >
 166+ E95D             >//              ______________________________________________________________________
 166+ E95D             >//              Dictionary part
 166+ E95D             >
 166+ E95D             >                org     Dict_Ptr
 166+ 753E             >
 166+ 753E 5B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 7540             >
 166+ 7540             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 7540 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 166+ 7543             >
 166+ 7543             >
 166+ 7543             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 7543             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 7543             >
 166+ 7543             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 7543 A3 63 29 00                  dw      LIT, ")"                // [char] )
 168+ 7547 A8 70 ED 68                  dw      WORD, DROP              // word drop
 169+ 754B 3D 68                        dw      EXIT                    // ;
 170+ 754D
 171+ 754D              //  ______________________________________________________________________
 172+ 754D              //
 173+ 754D              // quit         --
 174+ 754D              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 175+ 754D                              Colon_Def QUIT, "QUIT", is_normal
 175+ 754D             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 175+ 754D             >
 175+ 754D             >Dict_Ptr        defl    $
 175+ 754D             >
 175+ 754D             >//              ______________________________________________________________________
 175+ 754D             >//              Heap part
 175+ 754D             >
 175+ 754D             >
 175+ 754D             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E95D             >
 175+ E95D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E95D             >Latest_Definition defl  Heap_Ptr
 175+ E95D             >
 175+ E95D             >                // dummy db directives used to calculate length of namec
 175+ E95D 51 55 49 54 >                db      "QUIT"
 175+ E961             >len_NFA         defl    $ - temp_NFA
 175+ E961             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E95D             >
 175+ E95D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E95E 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 175+ E962             >                org     $-1                 // alter last byte of Name just above to set
 175+ E961 D4          >                db      {b $} | END_BIT     // msb as name end
 175+ E962             >
 175+ E962 57 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E964             >Prev_Ptr        defl    Heap_Ptr
 175+ E964             >
 175+ E964             >mirror_Ptr      defl    $
 175+ E964             >
 175+ E964 4F 75       >                dw      Dict_Ptr + 2        // xt
 175+ E966             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E966             >
 175+ E966             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E966             >
 175+ E966             >//              ______________________________________________________________________
 175+ E966             >//              Dictionary part
 175+ E966             >
 175+ E966             >                org     Dict_Ptr
 175+ 754D             >
 175+ 754D 64 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 754F             >
 175+ 754F             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 754F CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 175+ 7552             >
 175+ 7552             >
 175+ 7552             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 7552             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 7552             >
 175+ 7552             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7552
 177+ 7552 71 6B 72 69                  dw      SOURCE_ID, FETCH        // source-id @
 178+ 7556 EA 66 ED 68                  dw      F_CLOSE, DROP           // f_close drop
 179+ 755A 64 6A 71 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 179+ 755E 7C 69
 180+ 7560 64 6A 05 6B                  dw      ZERO, BLK, STORE        // 0 blk !
 180+ 7564 7C 69
 181+ 7566 4B 6E                        dw      SQUARED_OPEN            // [compile] [
 182+ 7568                                                              // begin
 183+ 7568              Quit_Begin:
 184+ 7568 C3 6A 72 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 184+ 756C 38 68
 185+ 756E A5 65                        dw      CR                      //      cr
 186+ 7570 45 70                        dw      QUERY                   //      query
 187+ 7572              Next_Breakpoint_1:
 188+ 7572 AD 74                        dw      INTERPRET               //      interpret
 189+ 7574 2F 6B 72 69                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 189+ 7578 62 68
 190+ 757A                                                              //      if
 191+ 757A F3 63                        dw      ZBRANCH
 192+ 757C 07 00                        dw      Quit_Endif - $
 193+ 757E F3 70                        dw          C_DOT_QUOTE
 194+ 7580 02 6F 6B                     db          2, "ok"             //          .( ok)
 195+ 7583              Quit_Endif:                                     //      else
 196+ 7583                                                              // again
 197+ 7583 EF 63                        dw      BRANCH
 198+ 7585 E3 FF                        dw      Quit_Begin - $
 199+ 7587 3D 68                        dw      EXIT                    // ;
 200+ 7589
 201+ 7589              //  ______________________________________________________________________
 202+ 7589              //
 203+ 7589              // abort        --
 204+ 7589                              Colon_Def ABORT, "ABORT", is_normal
 204+ 7589             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 204+ 7589             >
 204+ 7589             >Dict_Ptr        defl    $
 204+ 7589             >
 204+ 7589             >//              ______________________________________________________________________
 204+ 7589             >//              Heap part
 204+ 7589             >
 204+ 7589             >
 204+ 7589             >                org     (Heap_Ptr & $1FFF) + $E000
 204+ E966             >
 204+ E966             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ E966             >Latest_Definition defl  Heap_Ptr
 204+ E966             >
 204+ E966             >                // dummy db directives used to calculate length of namec
 204+ E966 41 42 4F 52 >                db      "ABORT"
 204+ E96A 54          >
 204+ E96B             >len_NFA         defl    $ - temp_NFA
 204+ E96B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ E966             >
 204+ E966 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ E967 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 204+ E96B 54          >
 204+ E96C             >                org     $-1                 // alter last byte of Name just above to set
 204+ E96B D4          >                db      {b $} | END_BIT     // msb as name end
 204+ E96C             >
 204+ E96C 5D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 204+ E96E             >Prev_Ptr        defl    Heap_Ptr
 204+ E96E             >
 204+ E96E             >mirror_Ptr      defl    $
 204+ E96E             >
 204+ E96E 8B 75       >                dw      Dict_Ptr + 2        // xt
 204+ E970             >Heap_Ptr        defl    $ - $E000           // save current HP
 204+ E970             >
 204+ E970             >Current_HP      defl  $ - $E000             // used to set HP once!
 204+ E970             >
 204+ E970             >//              ______________________________________________________________________
 204+ E970             >//              Dictionary part
 204+ E970             >
 204+ E970             >                org     Dict_Ptr
 204+ 7589             >
 204+ 7589 6E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 204+ 758B             >
 204+ 758B             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 758B CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 758E             >
 204+ 758E             >
 204+ 758E             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 758E             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 758E             >
 204+ 758E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 758E BD 6A 72 69                  dw      S0, FETCH               // s0 @
 206+ 7592 87 6A                        dw      BL                      // bl
 207+ 7594 E4 68 7C 69                  dw      OVER, STORE             // over !
 208+ 7598 2D 68                        dw      SPSTORE                 // sp!
 209+ 759A 94 6E                        dw      DECIMAL                 // decimal
 210+ 759C 26 75                        dw      FORTH                   // [compile] forth
 211+ 759E 31 75                        dw      DEFINITIONS             // definitions
 212+ 75A0
 213+ 75A0 4B 6E                        dw      SQUARED_OPEN            // [compile] [
 214+ 75A2 C3 6A 72 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 214+ 75A6 38 68
 215+ 75A8
 216+ 75A8              Autoexec_Ptr:
 217+ 75A8 BA 7F                        dw      AUTOEXEC                // autoexec, patched to noop
 218+ 75AA 4F 75                        dw      QUIT                    // quit
 219+ 75AC              //              dw      EXIT                    // ;
 220+ 75AC
 221+ 75AC              //  ______________________________________________________________________
 222+ 75AC              //
 223+ 75AC              // warm         --
 224+ 75AC                              Colon_Def WARM, "WARM", is_normal
 224+ 75AC             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 224+ 75AC             >
 224+ 75AC             >Dict_Ptr        defl    $
 224+ 75AC             >
 224+ 75AC             >//              ______________________________________________________________________
 224+ 75AC             >//              Heap part
 224+ 75AC             >
 224+ 75AC             >
 224+ 75AC             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ E970             >
 224+ E970             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ E970             >Latest_Definition defl  Heap_Ptr
 224+ E970             >
 224+ E970             >                // dummy db directives used to calculate length of namec
 224+ E970 57 41 52 4D >                db      "WARM"
 224+ E974             >len_NFA         defl    $ - temp_NFA
 224+ E974             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ E970             >
 224+ E970 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ E971 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 224+ E975             >                org     $-1                 // alter last byte of Name just above to set
 224+ E974 CD          >                db      {b $} | END_BIT     // msb as name end
 224+ E975             >
 224+ E975 66 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ E977             >Prev_Ptr        defl    Heap_Ptr
 224+ E977             >
 224+ E977             >mirror_Ptr      defl    $
 224+ E977             >
 224+ E977 AE 75       >                dw      Dict_Ptr + 2        // xt
 224+ E979             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ E979             >
 224+ E979             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ E979             >
 224+ E979             >//              ______________________________________________________________________
 224+ E979             >//              Dictionary part
 224+ E979             >
 224+ E979             >                org     Dict_Ptr
 224+ 75AC             >
 224+ 75AC 77 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 75AE             >
 224+ 75AE             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 75AE CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 75B1             >
 224+ 75B1             >
 224+ 75B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 75B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 75B1             >
 224+ 75B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 75B1 73 78                        dw      BLK_INIT                // blk-init
 226+ 75B3                          //  dw      SPLASH                  // splash
 227+ 75B3                          //  dw      LIT, 7, EMIT            // 7 emit
 228+ 75B3 8B 75                        dw      ABORT                   // abort
 229+ 75B5                          //  dw      EXIT                    // exit
 230+ 75B5
 231+ 75B5              //  ______________________________________________________________________
 232+ 75B5              //
 233+ 75B5              // cold         --
 234+ 75B5                              Colon_Def COLD, "COLD", is_normal
 234+ 75B5             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 234+ 75B5             >
 234+ 75B5             >Dict_Ptr        defl    $
 234+ 75B5             >
 234+ 75B5             >//              ______________________________________________________________________
 234+ 75B5             >//              Heap part
 234+ 75B5             >
 234+ 75B5             >
 234+ 75B5             >                org     (Heap_Ptr & $1FFF) + $E000
 234+ E979             >
 234+ E979             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 234+ E979             >Latest_Definition defl  Heap_Ptr
 234+ E979             >
 234+ E979             >                // dummy db directives used to calculate length of namec
 234+ E979 43 4F 4C 44 >                db      "COLD"
 234+ E97D             >len_NFA         defl    $ - temp_NFA
 234+ E97D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 234+ E979             >
 234+ E979 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 234+ E97A 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 234+ E97E             >                org     $-1                 // alter last byte of Name just above to set
 234+ E97D C4          >                db      {b $} | END_BIT     // msb as name end
 234+ E97E             >
 234+ E97E 70 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 234+ E980             >Prev_Ptr        defl    Heap_Ptr
 234+ E980             >
 234+ E980             >mirror_Ptr      defl    $
 234+ E980             >
 234+ E980 B7 75       >                dw      Dict_Ptr + 2        // xt
 234+ E982             >Heap_Ptr        defl    $ - $E000           // save current HP
 234+ E982             >
 234+ E982             >Current_HP      defl  $ - $E000             // used to set HP once!
 234+ E982             >
 234+ E982             >//              ______________________________________________________________________
 234+ E982             >//              Dictionary part
 234+ E982             >
 234+ E982             >                org     Dict_Ptr
 234+ 75B5             >
 234+ 75B5 80 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 234+ 75B7             >
 234+ 75B7             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 234+ 75B7 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 234+ 75BA             >
 234+ 75BA             >
 234+ 75BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 234+ 75BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 234+ 75BA             >
 234+ 75BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 235+ 75BA 2B 6A 2B 6A                  dw      NOOP, NOOP
 236+ 75BE A3 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 237+ 75C2 A3 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 238+ 75C6 72 69                        dw      FETCH                   // @
 239+ 75C8 A3 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 239+ 75CC 8A 68
 240+ 75CE A3 63 16 00                  dw      LIT, 22                 // 22
 241+ 75D2 82 67                        dw      CMOVE
 242+ 75D4 A3 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 243+ 75D8 72 69                        dw      FETCH                   // @
 244+ 75DA A3 63 2B 75                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 245+ 75DE 7C 69                        dw      STORE                   // !
 246+ 75E0 64 6A FF 6A                  dw      ZERO, NMODE, STORE      // 0 nmode !
 246+ 75E4 7C 69
 247+ 75E6 ED 6A 72 69                  dw      FIRST, FETCH, DUP       // first @ dup
 247+ 75EA 08 69
 248+ 75EC 59 6B 7C 69                  dw      USED, STORE             // used !
 249+ 75F0 5F 6B 7C 69                  dw      PREV, STORE             // prev !
 250+ 75F4 A3 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 250+ 75F8 6B 6B 7C 69
 251+ 75FC              //              dw      LIT, 8
 252+ 75FC              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 253+ 75FC 0A 79                        dw      EMPTY_BUFFERS
 254+ 75FE 64 6A 05 6B                  dw      ZERO, BLK, STORE
 254+ 7602 7C 69
 255+ 7604 64 6A 71 6B                  dw      ZERO, SOURCE_ID, STORE
 255+ 7608 7C 69
 256+ 760A
 257+ 760A A3 63 1A 00                  dw      LIT, 26, EMITC    // unlimited scroll
 257+ 760E 91 65
 258+ 7610 64 6A 91 65                  dw      ZERO, EMITC
 259+ 7614
 260+ 7614 AE 75        Warm_Start:     dw      WARM
 261+ 7616 B7 75        Cold_Start:     dw      COLD
 262+ 7618              //              dw      EXIT
 263+ 7618
 264+ 7618              //  ______________________________________________________________________
 265+ 7618              WarmRoutine:
 266+ 7618              ColdRoutine:
 267+ 7618                              // First, save Basic's status: H'L' and SP
 268+ 7618 D9                           exx
 269+ 7619 E5                           push    hl                      // save Basic's return address
 270+ 761A D9                           exx
 271+ 761B ED 73 6E 63                  ld      (SP_Basic), sp
 272+ 761F
 273+ 761F                              // pre-set the four main 16-bit registers
 274+ 761F ED 7B 78 63                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 275+ 7623 ED 5B 7A 63                  ld      de, (R0_origin)         // Return Stack Pointer
 276+ 7627 01 14 76                     ld      bc, Warm_Start          // Instruction Pointer
 277+ 762A DD 21 9A 63                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 278+ 762E
 279+ 762E 38 02                        jr      c, Warm_Skip
 280+ 7630 03                           inc     bc
 281+ 7631 03                           inc     bc
 282+ 7632              Warm_Skip:
 283+ 7632                              next
 283+ 7632 DD E9       >                jp      (ix)
 284+ 7634
 285+ 7634              //  ______________________________________________________________________
 286+ 7634              //
 287+ 7634              // basic        --
 288+ 7634                              New_Def BASIC, "BASIC", is_code, is_normal
 288+ 7634             >
 288+ 7634             >Dict_Ptr        defl    $
 288+ 7634             >
 288+ 7634             >//              ______________________________________________________________________
 288+ 7634             >//              Heap part
 288+ 7634             >
 288+ 7634             >
 288+ 7634             >                org     (Heap_Ptr & $1FFF) + $E000
 288+ E982             >
 288+ E982             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 288+ E982             >Latest_Definition defl  Heap_Ptr
 288+ E982             >
 288+ E982             >                // dummy db directives used to calculate length of namec
 288+ E982 42 41 53 49 >                db      "BASIC"
 288+ E986 43          >
 288+ E987             >len_NFA         defl    $ - temp_NFA
 288+ E987             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 288+ E982             >
 288+ E982 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 288+ E983 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 288+ E987 43          >
 288+ E988             >                org     $-1                 // alter last byte of Name just above to set
 288+ E987 C3          >                db      {b $} | END_BIT     // msb as name end
 288+ E988             >
 288+ E988 79 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 288+ E98A             >Prev_Ptr        defl    Heap_Ptr
 288+ E98A             >
 288+ E98A             >mirror_Ptr      defl    $
 288+ E98A             >
 288+ E98A 36 76       >                dw      Dict_Ptr + 2        // xt
 288+ E98C             >Heap_Ptr        defl    $ - $E000           // save current HP
 288+ E98C             >
 288+ E98C             >Current_HP      defl  $ - $E000             // used to set HP once!
 288+ E98C             >
 288+ E98C             >//              ______________________________________________________________________
 288+ E98C             >//              Dictionary part
 288+ E98C             >
 288+ E98C             >                org     Dict_Ptr
 288+ 7634             >
 288+ 7634 8A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 288+ 7636             >
 288+ 7636             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 288+ 7636 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 288+ 7636 ~           >
 288+ 7636 ~           >
 288+ 7636             >                endif           ; ok        // for other definitions it "points" the correct handler
 288+ 7636             >                // Use of "; ok" to suppress "warning[fwdref]"
 288+ 7636             >
 288+ 7636             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 289+ 7636 C1                           pop     bc                      // return  TOS  value to Basic
 290+ 7637 21 00 00                     ld      hl, 0
 291+ 763A 39                           add     hl, sp
 292+ 763B ED 7B 6E 63                  ld      sp, (SP_Basic)          // restore Basic's SP
 293+ 763F              //              nop
 294+ 763F 22 6E 63                     ld      (SP_Basic),hl           // but also save Forth's
 295+ 7642 D9                           exx
 296+ 7643 E1                           pop     hl                      // restore h'l'
 297+ 7644 D9                           exx
 298+ 7645 C9                           ret                             // to where USR Basic was left
 299+ 7646
 300+ 7646              //  ______________________________________________________________________
 301+ 7646              //
 302+ 7646              // +-           n1 n2 -- n3
 303+ 7646              // leaves n1 with the sign of n2 as n3.
 304+ 7646                              Colon_Def PLUS_MINUS, "+-", is_normal
 304+ 7646             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 304+ 7646             >
 304+ 7646             >Dict_Ptr        defl    $
 304+ 7646             >
 304+ 7646             >//              ______________________________________________________________________
 304+ 7646             >//              Heap part
 304+ 7646             >
 304+ 7646             >
 304+ 7646             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E98C             >
 304+ E98C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E98C             >Latest_Definition defl  Heap_Ptr
 304+ E98C             >
 304+ E98C             >                // dummy db directives used to calculate length of namec
 304+ E98C 2B 2D       >                db      "+-"
 304+ E98E             >len_NFA         defl    $ - temp_NFA
 304+ E98E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E98C             >
 304+ E98C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E98D 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 304+ E98F             >                org     $-1                 // alter last byte of Name just above to set
 304+ E98E AD          >                db      {b $} | END_BIT     // msb as name end
 304+ E98F             >
 304+ E98F 82 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E991             >Prev_Ptr        defl    Heap_Ptr
 304+ E991             >
 304+ E991             >mirror_Ptr      defl    $
 304+ E991             >
 304+ E991 48 76       >                dw      Dict_Ptr + 2        // xt
 304+ E993             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E993             >
 304+ E993             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E993             >
 304+ E993             >//              ______________________________________________________________________
 304+ E993             >//              Dictionary part
 304+ E993             >
 304+ E993             >                org     Dict_Ptr
 304+ 7646             >
 304+ 7646 91 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 7648             >
 304+ 7648             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 7648 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 764B             >
 304+ 764B             >
 304+ 764B             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 764B             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 764B             >
 304+ 764B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 764B 73 68                        dw      ZLESS                   // 0<
 306+ 764D                                                              // if
 307+ 764D F3 63                        dw      ZBRANCH
 308+ 764F 04 00                        dw      Plus_Minus_Endif - $
 309+ 7651 CA 68                        dw          MINUS               //      minus
 310+ 7653              Plus_Minus_Endif:                               // endif
 311+ 7653 3D 68                        dw      EXIT                    // ;
 312+ 7655
 313+ 7655              //  ______________________________________________________________________
 314+ 7655              //
 315+ 7655              // d+-          d1 n -- d2
 316+ 7655              // leaves d1 with the sign of n as d2.
 317+ 7655                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 317+ 7655             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 317+ 7655             >
 317+ 7655             >Dict_Ptr        defl    $
 317+ 7655             >
 317+ 7655             >//              ______________________________________________________________________
 317+ 7655             >//              Heap part
 317+ 7655             >
 317+ 7655             >
 317+ 7655             >                org     (Heap_Ptr & $1FFF) + $E000
 317+ E993             >
 317+ E993             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 317+ E993             >Latest_Definition defl  Heap_Ptr
 317+ E993             >
 317+ E993             >                // dummy db directives used to calculate length of namec
 317+ E993 44 2B 2D    >                db      "D+-"
 317+ E996             >len_NFA         defl    $ - temp_NFA
 317+ E996             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 317+ E993             >
 317+ E993 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 317+ E994 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 317+ E997             >                org     $-1                 // alter last byte of Name just above to set
 317+ E996 AD          >                db      {b $} | END_BIT     // msb as name end
 317+ E997             >
 317+ E997 8C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 317+ E999             >Prev_Ptr        defl    Heap_Ptr
 317+ E999             >
 317+ E999             >mirror_Ptr      defl    $
 317+ E999             >
 317+ E999 57 76       >                dw      Dict_Ptr + 2        // xt
 317+ E99B             >Heap_Ptr        defl    $ - $E000           // save current HP
 317+ E99B             >
 317+ E99B             >Current_HP      defl  $ - $E000             // used to set HP once!
 317+ E99B             >
 317+ E99B             >//              ______________________________________________________________________
 317+ E99B             >//              Dictionary part
 317+ E99B             >
 317+ E99B             >                org     Dict_Ptr
 317+ 7655             >
 317+ 7655 99 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 317+ 7657             >
 317+ 7657             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 317+ 7657 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 317+ 765A             >
 317+ 765A             >
 317+ 765A             >                endif           ; ok        // for other definitions it "points" the correct handler
 317+ 765A             >                // Use of "; ok" to suppress "warning[fwdref]"
 317+ 765A             >
 317+ 765A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 318+ 765A 73 68                        dw      ZLESS                   // 0<
 319+ 765C                                                              // if
 320+ 765C F3 63                        dw      ZBRANCH
 321+ 765E 04 00                        dw      DPlus_Minus_Endif - $
 322+ 7660 D7 68                        dw          DMINUS              //      dminus
 323+ 7662              DPlus_Minus_Endif:                              // endif
 324+ 7662 3D 68                        dw      EXIT                    // ;
 325+ 7664
 326+ 7664              //  ______________________________________________________________________
 327+ 7664              //
 328+ 7664              // abs          n1 -- n2
 329+ 7664                              Colon_Def ABS_OP, "ABS", is_normal
 329+ 7664             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 329+ 7664             >
 329+ 7664             >Dict_Ptr        defl    $
 329+ 7664             >
 329+ 7664             >//              ______________________________________________________________________
 329+ 7664             >//              Heap part
 329+ 7664             >
 329+ 7664             >
 329+ 7664             >                org     (Heap_Ptr & $1FFF) + $E000
 329+ E99B             >
 329+ E99B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ E99B             >Latest_Definition defl  Heap_Ptr
 329+ E99B             >
 329+ E99B             >                // dummy db directives used to calculate length of namec
 329+ E99B 41 42 53    >                db      "ABS"
 329+ E99E             >len_NFA         defl    $ - temp_NFA
 329+ E99E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ E99B             >
 329+ E99B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ E99C 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 329+ E99F             >                org     $-1                 // alter last byte of Name just above to set
 329+ E99E D3          >                db      {b $} | END_BIT     // msb as name end
 329+ E99F             >
 329+ E99F 93 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 329+ E9A1             >Prev_Ptr        defl    Heap_Ptr
 329+ E9A1             >
 329+ E9A1             >mirror_Ptr      defl    $
 329+ E9A1             >
 329+ E9A1 66 76       >                dw      Dict_Ptr + 2        // xt
 329+ E9A3             >Heap_Ptr        defl    $ - $E000           // save current HP
 329+ E9A3             >
 329+ E9A3             >Current_HP      defl  $ - $E000             // used to set HP once!
 329+ E9A3             >
 329+ E9A3             >//              ______________________________________________________________________
 329+ E9A3             >//              Dictionary part
 329+ E9A3             >
 329+ E9A3             >                org     Dict_Ptr
 329+ 7664             >
 329+ 7664 A1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 329+ 7666             >
 329+ 7666             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 7666 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 7669             >
 329+ 7669             >
 329+ 7669             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 7669             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 7669             >
 329+ 7669             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 7669 08 69                        dw      DUP                     // dup
 331+ 766B 48 76                        dw      PLUS_MINUS              // +-
 332+ 766D 3D 68                        dw      EXIT                    // ;
 333+ 766F
 334+ 766F              //  ______________________________________________________________________
 335+ 766F              //
 336+ 766F              // dabs         d1 -- d2
 337+ 766F                              Colon_Def DABS, "DABS", is_normal
 337+ 766F             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 337+ 766F             >
 337+ 766F             >Dict_Ptr        defl    $
 337+ 766F             >
 337+ 766F             >//              ______________________________________________________________________
 337+ 766F             >//              Heap part
 337+ 766F             >
 337+ 766F             >
 337+ 766F             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E9A3             >
 337+ E9A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E9A3             >Latest_Definition defl  Heap_Ptr
 337+ E9A3             >
 337+ E9A3             >                // dummy db directives used to calculate length of namec
 337+ E9A3 44 41 42 53 >                db      "DABS"
 337+ E9A7             >len_NFA         defl    $ - temp_NFA
 337+ E9A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E9A3             >
 337+ E9A3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E9A4 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 337+ E9A8             >                org     $-1                 // alter last byte of Name just above to set
 337+ E9A7 D3          >                db      {b $} | END_BIT     // msb as name end
 337+ E9A8             >
 337+ E9A8 9B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E9AA             >Prev_Ptr        defl    Heap_Ptr
 337+ E9AA             >
 337+ E9AA             >mirror_Ptr      defl    $
 337+ E9AA             >
 337+ E9AA 71 76       >                dw      Dict_Ptr + 2        // xt
 337+ E9AC             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E9AC             >
 337+ E9AC             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E9AC             >
 337+ E9AC             >//              ______________________________________________________________________
 337+ E9AC             >//              Dictionary part
 337+ E9AC             >
 337+ E9AC             >                org     Dict_Ptr
 337+ 766F             >
 337+ 766F AA 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 7671             >
 337+ 7671             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 7671 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 337+ 7674             >
 337+ 7674             >
 337+ 7674             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 7674             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 7674             >
 337+ 7674             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 7674 08 69                        dw      DUP                     // dup
 339+ 7676 57 76                        dw      DPLUS_MINUS             // d+-
 340+ 7678 3D 68                        dw      EXIT                    // ;
 341+ 767A
 342+ 767A              //  ______________________________________________________________________
 343+ 767A              //
 344+ 767A              // m*           n1 n2 -- d
 345+ 767A              // multiply two integer giving a double
 346+ 767A                              Colon_Def MMUL, "M*", is_normal
 346+ 767A             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 346+ 767A             >
 346+ 767A             >Dict_Ptr        defl    $
 346+ 767A             >
 346+ 767A             >//              ______________________________________________________________________
 346+ 767A             >//              Heap part
 346+ 767A             >
 346+ 767A             >
 346+ 767A             >                org     (Heap_Ptr & $1FFF) + $E000
 346+ E9AC             >
 346+ E9AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 346+ E9AC             >Latest_Definition defl  Heap_Ptr
 346+ E9AC             >
 346+ E9AC             >                // dummy db directives used to calculate length of namec
 346+ E9AC 4D 2A       >                db      "M*"
 346+ E9AE             >len_NFA         defl    $ - temp_NFA
 346+ E9AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 346+ E9AC             >
 346+ E9AC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 346+ E9AD 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 346+ E9AF             >                org     $-1                 // alter last byte of Name just above to set
 346+ E9AE AA          >                db      {b $} | END_BIT     // msb as name end
 346+ E9AF             >
 346+ E9AF A3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 346+ E9B1             >Prev_Ptr        defl    Heap_Ptr
 346+ E9B1             >
 346+ E9B1             >mirror_Ptr      defl    $
 346+ E9B1             >
 346+ E9B1 7C 76       >                dw      Dict_Ptr + 2        // xt
 346+ E9B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 346+ E9B3             >
 346+ E9B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 346+ E9B3             >
 346+ E9B3             >//              ______________________________________________________________________
 346+ E9B3             >//              Dictionary part
 346+ E9B3             >
 346+ E9B3             >                org     Dict_Ptr
 346+ 767A             >
 346+ 767A B1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 346+ 767C             >
 346+ 767C             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 346+ 767C CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 346+ 767F             >
 346+ 767F             >
 346+ 767F             >                endif           ; ok        // for other definitions it "points" the correct handler
 346+ 767F             >                // Use of "; ok" to suppress "warning[fwdref]"
 346+ 767F             >
 346+ 767F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 347+ 767F 50 69 18 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 347+ 7683 47 68
 348+ 7685 66 76 01 69                  dw      ABS_OP, SWAP            // abs swap
 349+ 7689 66 76 A5 67                  dw      ABS_OP, UM_MUL          // abs um*
 350+ 768D 52 68 57 76                  dw      R_TO, DPLUS_MINUS       // r> d+-
 351+ 7691 3D 68                        dw      EXIT                    // ;
 352+ 7693
 353+ 7693              //  ______________________________________________________________________
 354+ 7693              //
 355+ 7693              // sm/rem       d n -- q r
 356+ 7693              // Symmetric division: divides a double into n giving quotient q and remainder r
 357+ 7693              // the remainder has the sign of d.
 358+ 7693                              Colon_Def SMDIVM, "SM/REM", is_normal
 358+ 7693             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 358+ 7693             >
 358+ 7693             >Dict_Ptr        defl    $
 358+ 7693             >
 358+ 7693             >//              ______________________________________________________________________
 358+ 7693             >//              Heap part
 358+ 7693             >
 358+ 7693             >
 358+ 7693             >                org     (Heap_Ptr & $1FFF) + $E000
 358+ E9B3             >
 358+ E9B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 358+ E9B3             >Latest_Definition defl  Heap_Ptr
 358+ E9B3             >
 358+ E9B3             >                // dummy db directives used to calculate length of namec
 358+ E9B3 53 4D 2F 52 >                db      "SM/REM"
 358+ E9B7 45 4D       >
 358+ E9B9             >len_NFA         defl    $ - temp_NFA
 358+ E9B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 358+ E9B3             >
 358+ E9B3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 358+ E9B4 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 358+ E9B8 45 4D       >
 358+ E9BA             >                org     $-1                 // alter last byte of Name just above to set
 358+ E9B9 CD          >                db      {b $} | END_BIT     // msb as name end
 358+ E9BA             >
 358+ E9BA AC 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 358+ E9BC             >Prev_Ptr        defl    Heap_Ptr
 358+ E9BC             >
 358+ E9BC             >mirror_Ptr      defl    $
 358+ E9BC             >
 358+ E9BC 95 76       >                dw      Dict_Ptr + 2        // xt
 358+ E9BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 358+ E9BE             >
 358+ E9BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 358+ E9BE             >
 358+ E9BE             >//              ______________________________________________________________________
 358+ E9BE             >//              Dictionary part
 358+ E9BE             >
 358+ E9BE             >                org     Dict_Ptr
 358+ 7693             >
 358+ 7693 BC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 358+ 7695             >
 358+ 7695             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 358+ 7695 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 358+ 7698             >
 358+ 7698             >
 358+ 7698             >                endif           ; ok        // for other definitions it "points" the correct handler
 358+ 7698             >                // Use of "; ok" to suppress "warning[fwdref]"
 358+ 7698             >
 358+ 7698             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 359+ 7698 E4 68 47 68                  dw      OVER, TO_R, TO_R        // over >r >r
 359+ 769C 47 68
 360+ 769E 71 76 5D 68                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 76A2 66 76
 361+ 76A4 CD 67                        dw      UMDIVMOD                // um/mod
 362+ 76A6 52 68                        dw      R_TO                    // r>
 363+ 76A8 5D 68 18 68                  dw      R_OP, XOR_OP            // r xor
 364+ 76AC 48 76 01 69                  dw      PLUS_MINUS, SWAP        // +- swap
 365+ 76B0 52 68                        dw      R_TO                    // r>
 366+ 76B2 48 76 01 69                  dw      PLUS_MINUS, SWAP        // +- swap
 367+ 76B6 3D 68                        dw      EXIT                    // ;
 368+ 76B8
 369+ 76B8              //  ______________________________________________________________________
 370+ 76B8              //
 371+ 76B8              // fm/mod       d n -- q r
 372+ 76B8              // Floored division: divides a double into n giving quotient q and remainder r
 373+ 76B8              // the remainder has the sign of d.
 374+ 76B8                              Colon_Def FMDIVM, "FM/MOD", is_normal
 374+ 76B8             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 374+ 76B8             >
 374+ 76B8             >Dict_Ptr        defl    $
 374+ 76B8             >
 374+ 76B8             >//              ______________________________________________________________________
 374+ 76B8             >//              Heap part
 374+ 76B8             >
 374+ 76B8             >
 374+ 76B8             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E9BE             >
 374+ E9BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E9BE             >Latest_Definition defl  Heap_Ptr
 374+ E9BE             >
 374+ E9BE             >                // dummy db directives used to calculate length of namec
 374+ E9BE 46 4D 2F 4D >                db      "FM/MOD"
 374+ E9C2 4F 44       >
 374+ E9C4             >len_NFA         defl    $ - temp_NFA
 374+ E9C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E9BE             >
 374+ E9BE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E9BF 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 374+ E9C3 4F 44       >
 374+ E9C5             >                org     $-1                 // alter last byte of Name just above to set
 374+ E9C4 C4          >                db      {b $} | END_BIT     // msb as name end
 374+ E9C5             >
 374+ E9C5 B3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E9C7             >Prev_Ptr        defl    Heap_Ptr
 374+ E9C7             >
 374+ E9C7             >mirror_Ptr      defl    $
 374+ E9C7             >
 374+ E9C7 BA 76       >                dw      Dict_Ptr + 2        // xt
 374+ E9C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E9C9             >
 374+ E9C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E9C9             >
 374+ E9C9             >//              ______________________________________________________________________
 374+ E9C9             >//              Dictionary part
 374+ E9C9             >
 374+ E9C9             >                org     Dict_Ptr
 374+ 76B8             >
 374+ 76B8 C7 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 76BA             >
 374+ 76BA             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 76BA CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 76BD             >
 374+ 76BD             >
 374+ 76BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 76BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 76BD             >
 374+ 76BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 76BD 08 69 47 68                  dw      DUP, TO_R               // dup >r
 376+ 76C1 95 76                        dw      SMDIVM
 377+ 76C3 E4 68 08 69                  dw      OVER, DUP
 378+ 76C7 62 68 62 68                  dw      ZEQUAL, ZEQUAL
 379+ 76CB 01 69 73 68                  dw      SWAP, ZLESS
 380+ 76CF 5D 68 73 68                  dw      R_OP, ZLESS
 381+ 76D3 18 68 FD 67                  dw      XOR_OP, AND_OP
 382+ 76D7 F3 63                        dw      ZBRANCH
 383+ 76D9 10 00                        dw      Fm_Mod_Else - $
 384+ 76DB AA 68                        dw          ONE_SUBTRACT
 385+ 76DD 01 69 52 68                  dw          SWAP, R_TO
 386+ 76E1 8A 68 01 69                  dw          PLUS, SWAP
 387+ 76E5 EF 63                        dw      BRANCH
 388+ 76E7 06 00                        dw      Fm_Mod_Endif - $
 389+ 76E9              Fm_Mod_Else:
 390+ 76E9 52 68 ED 68                  dw          R_TO, DROP
 391+ 76ED              Fm_Mod_Endif:
 392+ 76ED 3D 68                        dw      EXIT
 393+ 76EF              //              dw      TWO_DUP                 // 2dup
 394+ 76EF              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 395+ 76EF              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 396+ 76EF              //              dw      UMDIVMOD                // um/mod
 397+ 76EF              //              dw      SWAP                    // swap
 398+ 76EF              //              dw      II, ZLESS               // i'
 399+ 76EF              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 400+ 76EF              //              dw      R_TO                    // r>
 401+ 76EF              //              dw      PLUS_MINUS, SWAP        // +- swap
 402+ 76EF              //              dw      R_OP                    // r@
 403+ 76EF              //              dw      ZLESS                   // i'
 404+ 76EF              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 405+ 76EF              //              dw      R_TO                    // r>
 406+ 76EF              //              dw      PLUS_MINUS              // +- swap
 407+ 76EF              //              dw      EXIT                    // ;
 408+ 76EF
 409+ 76EF              //  ______________________________________________________________________
 410+ 76EF              //
 411+ 76EF              // m/mod        d n -- q r
 412+ 76EF              // multiply two integer giving a double
 413+ 76EF                              Colon_Def MDIVM, "M/MOD", is_normal
 413+ 76EF             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 413+ 76EF             >
 413+ 76EF             >Dict_Ptr        defl    $
 413+ 76EF             >
 413+ 76EF             >//              ______________________________________________________________________
 413+ 76EF             >//              Heap part
 413+ 76EF             >
 413+ 76EF             >
 413+ 76EF             >                org     (Heap_Ptr & $1FFF) + $E000
 413+ E9C9             >
 413+ E9C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 413+ E9C9             >Latest_Definition defl  Heap_Ptr
 413+ E9C9             >
 413+ E9C9             >                // dummy db directives used to calculate length of namec
 413+ E9C9 4D 2F 4D 4F >                db      "M/MOD"
 413+ E9CD 44          >
 413+ E9CE             >len_NFA         defl    $ - temp_NFA
 413+ E9CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 413+ E9C9             >
 413+ E9C9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 413+ E9CA 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 413+ E9CE 44          >
 413+ E9CF             >                org     $-1                 // alter last byte of Name just above to set
 413+ E9CE C4          >                db      {b $} | END_BIT     // msb as name end
 413+ E9CF             >
 413+ E9CF BE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 413+ E9D1             >Prev_Ptr        defl    Heap_Ptr
 413+ E9D1             >
 413+ E9D1             >mirror_Ptr      defl    $
 413+ E9D1             >
 413+ E9D1 F1 76       >                dw      Dict_Ptr + 2        // xt
 413+ E9D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 413+ E9D3             >
 413+ E9D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 413+ E9D3             >
 413+ E9D3             >//              ______________________________________________________________________
 413+ E9D3             >//              Dictionary part
 413+ E9D3             >
 413+ E9D3             >                org     Dict_Ptr
 413+ 76EF             >
 413+ 76EF D1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 413+ 76F1             >
 413+ 76F1             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 413+ 76F1 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 413+ 76F4             >
 413+ 76F4             >
 413+ 76F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 413+ 76F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 413+ 76F4             >
 413+ 76F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 414+ 76F4 95 76                        dw      SMDIVM
 415+ 76F6 3D 68                        dw      EXIT                    // ;
 416+ 76F8
 417+ 76F8              //  ______________________________________________________________________
 418+ 76F8              //
 419+ 76F8              // m/           d n -- q
 420+ 76F8              // multiply two integer giving a double
 421+ 76F8                              Colon_Def MDIV, "M/", is_normal
 421+ 76F8             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 421+ 76F8             >
 421+ 76F8             >Dict_Ptr        defl    $
 421+ 76F8             >
 421+ 76F8             >//              ______________________________________________________________________
 421+ 76F8             >//              Heap part
 421+ 76F8             >
 421+ 76F8             >
 421+ 76F8             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E9D3             >
 421+ E9D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E9D3             >Latest_Definition defl  Heap_Ptr
 421+ E9D3             >
 421+ E9D3             >                // dummy db directives used to calculate length of namec
 421+ E9D3 4D 2F       >                db      "M/"
 421+ E9D5             >len_NFA         defl    $ - temp_NFA
 421+ E9D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E9D3             >
 421+ E9D3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E9D4 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 421+ E9D6             >                org     $-1                 // alter last byte of Name just above to set
 421+ E9D5 AF          >                db      {b $} | END_BIT     // msb as name end
 421+ E9D6             >
 421+ E9D6 C9 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E9D8             >Prev_Ptr        defl    Heap_Ptr
 421+ E9D8             >
 421+ E9D8             >mirror_Ptr      defl    $
 421+ E9D8             >
 421+ E9D8 FA 76       >                dw      Dict_Ptr + 2        // xt
 421+ E9DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E9DA             >
 421+ E9DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E9DA             >
 421+ E9DA             >//              ______________________________________________________________________
 421+ E9DA             >//              Dictionary part
 421+ E9DA             >
 421+ E9DA             >                org     Dict_Ptr
 421+ 76F8             >
 421+ 76F8 D8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 76FA             >
 421+ 76FA             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 76FA CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 76FD             >
 421+ 76FD             >
 421+ 76FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 76FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 76FD             >
 421+ 76FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 76FD F1 76 F2 68                  dw      MDIVM, NIP
 423+ 7701 3D 68                        dw      EXIT                    // ;
 424+ 7703
 425+ 7703              //  ______________________________________________________________________
 426+ 7703              //
 427+ 7703              // *            n1 n2 -- n3
 428+ 7703              // multiply two integer
 429+ 7703                              Colon_Def MUL, "*", is_normal
 429+ 7703             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 429+ 7703             >
 429+ 7703             >Dict_Ptr        defl    $
 429+ 7703             >
 429+ 7703             >//              ______________________________________________________________________
 429+ 7703             >//              Heap part
 429+ 7703             >
 429+ 7703             >
 429+ 7703             >                org     (Heap_Ptr & $1FFF) + $E000
 429+ E9DA             >
 429+ E9DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ E9DA             >Latest_Definition defl  Heap_Ptr
 429+ E9DA             >
 429+ E9DA             >                // dummy db directives used to calculate length of namec
 429+ E9DA 2A          >                db      "*"
 429+ E9DB             >len_NFA         defl    $ - temp_NFA
 429+ E9DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ E9DA             >
 429+ E9DA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ E9DB 2A          >                db      "*"               // name string in 7-bit ascii, but
 429+ E9DC             >                org     $-1                 // alter last byte of Name just above to set
 429+ E9DB AA          >                db      {b $} | END_BIT     // msb as name end
 429+ E9DC             >
 429+ E9DC D3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 429+ E9DE             >Prev_Ptr        defl    Heap_Ptr
 429+ E9DE             >
 429+ E9DE             >mirror_Ptr      defl    $
 429+ E9DE             >
 429+ E9DE 05 77       >                dw      Dict_Ptr + 2        // xt
 429+ E9E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 429+ E9E0             >
 429+ E9E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 429+ E9E0             >
 429+ E9E0             >//              ______________________________________________________________________
 429+ E9E0             >//              Dictionary part
 429+ E9E0             >
 429+ E9E0             >                org     Dict_Ptr
 429+ 7703             >
 429+ 7703 DE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 429+ 7705             >
 429+ 7705             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 7705 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 7708             >
 429+ 7708             >
 429+ 7708             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 7708             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 7708             >
 429+ 7708             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 7708 7C 76 ED 68                  dw      MMUL, DROP              // m* drop
 431+ 770C 3D 68                        dw      EXIT                    // ;
 432+ 770E
 433+ 770E              //  ______________________________________________________________________
 434+ 770E              //
 435+ 770E              // /mod         n1 n2 -- n3 n4
 436+ 770E              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 437+ 770E              // The remainder has the sign of n1
 438+ 770E                              Colon_Def DIVMOD, "/MOD", is_normal
 438+ 770E             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 438+ 770E             >
 438+ 770E             >Dict_Ptr        defl    $
 438+ 770E             >
 438+ 770E             >//              ______________________________________________________________________
 438+ 770E             >//              Heap part
 438+ 770E             >
 438+ 770E             >
 438+ 770E             >                org     (Heap_Ptr & $1FFF) + $E000
 438+ E9E0             >
 438+ E9E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 438+ E9E0             >Latest_Definition defl  Heap_Ptr
 438+ E9E0             >
 438+ E9E0             >                // dummy db directives used to calculate length of namec
 438+ E9E0 2F 4D 4F 44 >                db      "/MOD"
 438+ E9E4             >len_NFA         defl    $ - temp_NFA
 438+ E9E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 438+ E9E0             >
 438+ E9E0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 438+ E9E1 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 438+ E9E5             >                org     $-1                 // alter last byte of Name just above to set
 438+ E9E4 C4          >                db      {b $} | END_BIT     // msb as name end
 438+ E9E5             >
 438+ E9E5 DA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 438+ E9E7             >Prev_Ptr        defl    Heap_Ptr
 438+ E9E7             >
 438+ E9E7             >mirror_Ptr      defl    $
 438+ E9E7             >
 438+ E9E7 10 77       >                dw      Dict_Ptr + 2        // xt
 438+ E9E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 438+ E9E9             >
 438+ E9E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 438+ E9E9             >
 438+ E9E9             >//              ______________________________________________________________________
 438+ E9E9             >//              Dictionary part
 438+ E9E9             >
 438+ E9E9             >                org     Dict_Ptr
 438+ 770E             >
 438+ 770E E7 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 438+ 7710             >
 438+ 7710             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 438+ 7710 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 438+ 7713             >
 438+ 7713             >
 438+ 7713             >                endif           ; ok        // for other definitions it "points" the correct handler
 438+ 7713             >                // Use of "; ok" to suppress "warning[fwdref]"
 438+ 7713             >
 438+ 7713             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 439+ 7713 47 68 BD 6B                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 439+ 7717 52 68
 440+ 7719 F1 76                        dw      MDIVM                   // m/mod
 441+ 771B 3D 68                        dw      EXIT                    // ;
 442+ 771D
 443+ 771D              //  ______________________________________________________________________
 444+ 771D              //
 445+ 771D              // /            n1 n2 -- n3
 446+ 771D              // division
 447+ 771D                              Colon_Def DIV, "/", is_normal
 447+ 771D             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 447+ 771D             >
 447+ 771D             >Dict_Ptr        defl    $
 447+ 771D             >
 447+ 771D             >//              ______________________________________________________________________
 447+ 771D             >//              Heap part
 447+ 771D             >
 447+ 771D             >
 447+ 771D             >                org     (Heap_Ptr & $1FFF) + $E000
 447+ E9E9             >
 447+ E9E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 447+ E9E9             >Latest_Definition defl  Heap_Ptr
 447+ E9E9             >
 447+ E9E9             >                // dummy db directives used to calculate length of namec
 447+ E9E9 2F          >                db      "/"
 447+ E9EA             >len_NFA         defl    $ - temp_NFA
 447+ E9EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 447+ E9E9             >
 447+ E9E9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 447+ E9EA 2F          >                db      "/"               // name string in 7-bit ascii, but
 447+ E9EB             >                org     $-1                 // alter last byte of Name just above to set
 447+ E9EA AF          >                db      {b $} | END_BIT     // msb as name end
 447+ E9EB             >
 447+ E9EB E0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 447+ E9ED             >Prev_Ptr        defl    Heap_Ptr
 447+ E9ED             >
 447+ E9ED             >mirror_Ptr      defl    $
 447+ E9ED             >
 447+ E9ED 1F 77       >                dw      Dict_Ptr + 2        // xt
 447+ E9EF             >Heap_Ptr        defl    $ - $E000           // save current HP
 447+ E9EF             >
 447+ E9EF             >Current_HP      defl  $ - $E000             // used to set HP once!
 447+ E9EF             >
 447+ E9EF             >//              ______________________________________________________________________
 447+ E9EF             >//              Dictionary part
 447+ E9EF             >
 447+ E9EF             >                org     Dict_Ptr
 447+ 771D             >
 447+ 771D ED 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 447+ 771F             >
 447+ 771F             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 447+ 771F CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 447+ 7722             >
 447+ 7722             >
 447+ 7722             >                endif           ; ok        // for other definitions it "points" the correct handler
 447+ 7722             >                // Use of "; ok" to suppress "warning[fwdref]"
 447+ 7722             >
 447+ 7722             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 448+ 7722 10 77 F2 68                  dw      DIVMOD, NIP             // /mod nip
 449+ 7726 3D 68                        dw      EXIT                    // ;
 450+ 7728
 451+ 7728              //  ______________________________________________________________________
 452+ 7728              //
 453+ 7728              // mod          n1 n2 -- n3
 454+ 7728                              Colon_Def MOD, "MOD", is_normal
 454+ 7728             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 454+ 7728             >
 454+ 7728             >Dict_Ptr        defl    $
 454+ 7728             >
 454+ 7728             >//              ______________________________________________________________________
 454+ 7728             >//              Heap part
 454+ 7728             >
 454+ 7728             >
 454+ 7728             >                org     (Heap_Ptr & $1FFF) + $E000
 454+ E9EF             >
 454+ E9EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 454+ E9EF             >Latest_Definition defl  Heap_Ptr
 454+ E9EF             >
 454+ E9EF             >                // dummy db directives used to calculate length of namec
 454+ E9EF 4D 4F 44    >                db      "MOD"
 454+ E9F2             >len_NFA         defl    $ - temp_NFA
 454+ E9F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 454+ E9EF             >
 454+ E9EF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 454+ E9F0 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 454+ E9F3             >                org     $-1                 // alter last byte of Name just above to set
 454+ E9F2 C4          >                db      {b $} | END_BIT     // msb as name end
 454+ E9F3             >
 454+ E9F3 E9 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 454+ E9F5             >Prev_Ptr        defl    Heap_Ptr
 454+ E9F5             >
 454+ E9F5             >mirror_Ptr      defl    $
 454+ E9F5             >
 454+ E9F5 2A 77       >                dw      Dict_Ptr + 2        // xt
 454+ E9F7             >Heap_Ptr        defl    $ - $E000           // save current HP
 454+ E9F7             >
 454+ E9F7             >Current_HP      defl  $ - $E000             // used to set HP once!
 454+ E9F7             >
 454+ E9F7             >//              ______________________________________________________________________
 454+ E9F7             >//              Dictionary part
 454+ E9F7             >
 454+ E9F7             >                org     Dict_Ptr
 454+ 7728             >
 454+ 7728 F5 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 454+ 772A             >
 454+ 772A             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 454+ 772A CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 454+ 772D             >
 454+ 772D             >
 454+ 772D             >                endif           ; ok        // for other definitions it "points" the correct handler
 454+ 772D             >                // Use of "; ok" to suppress "warning[fwdref]"
 454+ 772D             >
 454+ 772D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 455+ 772D 10 77 ED 68                  dw      DIVMOD, DROP            // /mod drop
 456+ 7731 3D 68                        dw      EXIT                    // ;
 457+ 7733
 458+ 7733              //  ______________________________________________________________________
 459+ 7733              //
 460+ 7733              // */mod        n1 n2 n3 -- n4 n5
 461+ 7733              // leaves the quotient n5 and the remainder n4 of the operation
 462+ 7733              // (n1 * n2) / n3. The intermediate passage through a double number
 463+ 7733              // avoids loss of precision
 464+ 7733                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 464+ 7733             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 464+ 7733             >
 464+ 7733             >Dict_Ptr        defl    $
 464+ 7733             >
 464+ 7733             >//              ______________________________________________________________________
 464+ 7733             >//              Heap part
 464+ 7733             >
 464+ 7733             >
 464+ 7733             >                org     (Heap_Ptr & $1FFF) + $E000
 464+ E9F7             >
 464+ E9F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 464+ E9F7             >Latest_Definition defl  Heap_Ptr
 464+ E9F7             >
 464+ E9F7             >                // dummy db directives used to calculate length of namec
 464+ E9F7 2A 2F 4D 4F >                db      "*/MOD"
 464+ E9FB 44          >
 464+ E9FC             >len_NFA         defl    $ - temp_NFA
 464+ E9FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 464+ E9F7             >
 464+ E9F7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 464+ E9F8 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 464+ E9FC 44          >
 464+ E9FD             >                org     $-1                 // alter last byte of Name just above to set
 464+ E9FC C4          >                db      {b $} | END_BIT     // msb as name end
 464+ E9FD             >
 464+ E9FD EF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 464+ E9FF             >Prev_Ptr        defl    Heap_Ptr
 464+ E9FF             >
 464+ E9FF             >mirror_Ptr      defl    $
 464+ E9FF             >
 464+ E9FF 35 77       >                dw      Dict_Ptr + 2        // xt
 464+ EA01             >Heap_Ptr        defl    $ - $E000           // save current HP
 464+ EA01             >
 464+ EA01             >Current_HP      defl  $ - $E000             // used to set HP once!
 464+ EA01             >
 464+ EA01             >//              ______________________________________________________________________
 464+ EA01             >//              Dictionary part
 464+ EA01             >
 464+ EA01             >                org     Dict_Ptr
 464+ 7733             >
 464+ 7733 FF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 464+ 7735             >
 464+ 7735             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 464+ 7735 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 464+ 7738             >
 464+ 7738             >
 464+ 7738             >                endif           ; ok        // for other definitions it "points" the correct handler
 464+ 7738             >                // Use of "; ok" to suppress "warning[fwdref]"
 464+ 7738             >
 464+ 7738             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 465+ 7738 47 68 7C 76                  dw      TO_R, MMUL              // >r  m*
 466+ 773C 52 68 F1 76                  dw      R_TO, MDIVM             // r>  m/mod
 467+ 7740 3D 68                        dw      EXIT                    // ;
 468+ 7742
 469+ 7742              //  ______________________________________________________________________
 470+ 7742              //
 471+ 7742              // */          n1 n2 n3 -- n4
 472+ 7742              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 473+ 7742                              Colon_Def MUL_DIV, "*/", is_normal
 473+ 7742             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 473+ 7742             >
 473+ 7742             >Dict_Ptr        defl    $
 473+ 7742             >
 473+ 7742             >//              ______________________________________________________________________
 473+ 7742             >//              Heap part
 473+ 7742             >
 473+ 7742             >
 473+ 7742             >                org     (Heap_Ptr & $1FFF) + $E000
 473+ EA01             >
 473+ EA01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 473+ EA01             >Latest_Definition defl  Heap_Ptr
 473+ EA01             >
 473+ EA01             >                // dummy db directives used to calculate length of namec
 473+ EA01 2A 2F       >                db      "*/"
 473+ EA03             >len_NFA         defl    $ - temp_NFA
 473+ EA03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 473+ EA01             >
 473+ EA01 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 473+ EA02 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 473+ EA04             >                org     $-1                 // alter last byte of Name just above to set
 473+ EA03 AF          >                db      {b $} | END_BIT     // msb as name end
 473+ EA04             >
 473+ EA04 F7 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 473+ EA06             >Prev_Ptr        defl    Heap_Ptr
 473+ EA06             >
 473+ EA06             >mirror_Ptr      defl    $
 473+ EA06             >
 473+ EA06 44 77       >                dw      Dict_Ptr + 2        // xt
 473+ EA08             >Heap_Ptr        defl    $ - $E000           // save current HP
 473+ EA08             >
 473+ EA08             >Current_HP      defl  $ - $E000             // used to set HP once!
 473+ EA08             >
 473+ EA08             >//              ______________________________________________________________________
 473+ EA08             >//              Dictionary part
 473+ EA08             >
 473+ EA08             >                org     Dict_Ptr
 473+ 7742             >
 473+ 7742 06 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 473+ 7744             >
 473+ 7744             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 473+ 7744 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 473+ 7747             >
 473+ 7747             >
 473+ 7747             >                endif           ; ok        // for other definitions it "points" the correct handler
 473+ 7747             >                // Use of "; ok" to suppress "warning[fwdref]"
 473+ 7747             >
 473+ 7747             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 474+ 7747 35 77                        dw     MUL_DIV_MOD              // */mod
 475+ 7749 F2 68                        dw     NIP                      // nip
 476+ 774B 3D 68                        dw     EXIT                     // ;
 477+ 774D
 478+ 774D
 479+ 774D              //  ______________________________________________________________________
 480+ 774D              //
 481+ 774D              // m/mod        ud1 u2 -- u3 ud4
 482+ 774D              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 483+ 774D              // All terms are unsigned.
 484+ 774D              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 485+ 774D              //              dw      TO_R                    // >r           ( ud1 )
 486+ 774D              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 487+ 774D              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 488+ 774D              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 489+ 774D              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 490+ 774D              //              dw      EXIT                    // ;
 491+ 774D
 492+ 774D              //  ______________________________________________________________________
 493+ 774D              //
 494+ 774D              // (line)       n1 n2 -- a b
 495+ 774D              // sends the line n1 of block n2 to the disk buffer.
 496+ 774D              // it returns the address a and ca counter b = C/L meaning a whole line.
 497+ 774D                              Colon_Def CLINE, "(LINE)", is_normal
 497+ 774D             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 497+ 774D             >
 497+ 774D             >Dict_Ptr        defl    $
 497+ 774D             >
 497+ 774D             >//              ______________________________________________________________________
 497+ 774D             >//              Heap part
 497+ 774D             >
 497+ 774D             >
 497+ 774D             >                org     (Heap_Ptr & $1FFF) + $E000
 497+ EA08             >
 497+ EA08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 497+ EA08             >Latest_Definition defl  Heap_Ptr
 497+ EA08             >
 497+ EA08             >                // dummy db directives used to calculate length of namec
 497+ EA08 28 4C 49 4E >                db      "(LINE)"
 497+ EA0C 45 29       >
 497+ EA0E             >len_NFA         defl    $ - temp_NFA
 497+ EA0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 497+ EA08             >
 497+ EA08 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 497+ EA09 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 497+ EA0D 45 29       >
 497+ EA0F             >                org     $-1                 // alter last byte of Name just above to set
 497+ EA0E A9          >                db      {b $} | END_BIT     // msb as name end
 497+ EA0F             >
 497+ EA0F 01 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 497+ EA11             >Prev_Ptr        defl    Heap_Ptr
 497+ EA11             >
 497+ EA11             >mirror_Ptr      defl    $
 497+ EA11             >
 497+ EA11 4F 77       >                dw      Dict_Ptr + 2        // xt
 497+ EA13             >Heap_Ptr        defl    $ - $E000           // save current HP
 497+ EA13             >
 497+ EA13             >Current_HP      defl  $ - $E000             // used to set HP once!
 497+ EA13             >
 497+ EA13             >//              ______________________________________________________________________
 497+ EA13             >//              Dictionary part
 497+ EA13             >
 497+ EA13             >                org     Dict_Ptr
 497+ 774D             >
 497+ 774D 11 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 497+ 774F             >
 497+ 774F             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 497+ 774F CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 497+ 7752             >
 497+ 7752             >
 497+ 7752             >                endif           ; ok        // for other definitions it "points" the correct handler
 497+ 7752             >                // Use of "; ok" to suppress "warning[fwdref]"
 497+ 7752             >
 497+ 7752             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 498+ 7752 47 68                        dw      TO_R                    // >r
 499+ 7754 8E 6A                        dw      CL                      // c/l
 500+ 7756 95 6A 35 77                  dw      BBUF, MUL_DIV_MOD       // */mod
 501+ 775A 52 68                        dw      R_TO                    // r>
 502+ 775C 9C 6A 05 77                  dw      BSCR, MUL, PLUS         // b/scr * +
 502+ 7760 8A 68
 503+ 7762 62 79                        dw      BLOCK                   // block   ( forward )
 504+ 7764 8A 68                        dw      PLUS                    // +
 505+ 7766 8E 6A                        dw      CL                      // c/l
 506+ 7768 3D 68                        dw      EXIT                    // ;
 507+ 776A
 508+ 776A              //  ______________________________________________________________________
 509+ 776A              //
 510+ 776A              // .line        n1 n2 --
 511+ 776A              // Sends to output line  n1  of screen n2.
 512+ 776A                              Colon_Def DOT_LINE, ".LINE", is_normal
 512+ 776A             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 512+ 776A             >
 512+ 776A             >Dict_Ptr        defl    $
 512+ 776A             >
 512+ 776A             >//              ______________________________________________________________________
 512+ 776A             >//              Heap part
 512+ 776A             >
 512+ 776A             >
 512+ 776A             >                org     (Heap_Ptr & $1FFF) + $E000
 512+ EA13             >
 512+ EA13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 512+ EA13             >Latest_Definition defl  Heap_Ptr
 512+ EA13             >
 512+ EA13             >                // dummy db directives used to calculate length of namec
 512+ EA13 2E 4C 49 4E >                db      ".LINE"
 512+ EA17 45          >
 512+ EA18             >len_NFA         defl    $ - temp_NFA
 512+ EA18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 512+ EA13             >
 512+ EA13 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 512+ EA14 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 512+ EA18 45          >
 512+ EA19             >                org     $-1                 // alter last byte of Name just above to set
 512+ EA18 C5          >                db      {b $} | END_BIT     // msb as name end
 512+ EA19             >
 512+ EA19 08 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 512+ EA1B             >Prev_Ptr        defl    Heap_Ptr
 512+ EA1B             >
 512+ EA1B             >mirror_Ptr      defl    $
 512+ EA1B             >
 512+ EA1B 6C 77       >                dw      Dict_Ptr + 2        // xt
 512+ EA1D             >Heap_Ptr        defl    $ - $E000           // save current HP
 512+ EA1D             >
 512+ EA1D             >Current_HP      defl  $ - $E000             // used to set HP once!
 512+ EA1D             >
 512+ EA1D             >//              ______________________________________________________________________
 512+ EA1D             >//              Dictionary part
 512+ EA1D             >
 512+ EA1D             >                org     Dict_Ptr
 512+ 776A             >
 512+ 776A 1B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 512+ 776C             >
 512+ 776C             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 512+ 776C CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 512+ 776F             >
 512+ 776F             >
 512+ 776F             >                endif           ; ok        // for other definitions it "points" the correct handler
 512+ 776F             >                // Use of "; ok" to suppress "warning[fwdref]"
 512+ 776F             >
 512+ 776F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 513+ 776F 4F 77 6D 6F                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 513+ 7773 56 6F
 514+ 7775 3D 68                        dw      EXIT                    // ;
 515+ 7777
 516+ 7777              //  ______________________________________________________________________
 517+ 7777              //
 518+ 7777              // message       n1 n2 --
 519+ 7777              // prints error message to current channel.
 520+ 7777              // if WARNING is 0, prints "MSG#n".
 521+ 7777              // if WARNING is 1, prints line n of screen 4.
 522+ 7777              // if WARNING is -1, see ERROR
 523+ 7777              // value can be negative or beyond block 4.
 524+ 7777                              Colon_Def MESSAGE, "MESSAGE", is_normal
 524+ 7777             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 524+ 7777             >
 524+ 7777             >Dict_Ptr        defl    $
 524+ 7777             >
 524+ 7777             >//              ______________________________________________________________________
 524+ 7777             >//              Heap part
 524+ 7777             >
 524+ 7777             >
 524+ 7777             >                org     (Heap_Ptr & $1FFF) + $E000
 524+ EA1D             >
 524+ EA1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 524+ EA1D             >Latest_Definition defl  Heap_Ptr
 524+ EA1D             >
 524+ EA1D             >                // dummy db directives used to calculate length of namec
 524+ EA1D 4D 45 53 53 >                db      "MESSAGE"
 524+ EA21 41 47 45    >
 524+ EA24             >len_NFA         defl    $ - temp_NFA
 524+ EA24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 524+ EA1D             >
 524+ EA1D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 524+ EA1E 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 524+ EA22 41 47 45    >
 524+ EA25             >                org     $-1                 // alter last byte of Name just above to set
 524+ EA24 C5          >                db      {b $} | END_BIT     // msb as name end
 524+ EA25             >
 524+ EA25 13 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 524+ EA27             >Prev_Ptr        defl    Heap_Ptr
 524+ EA27             >
 524+ EA27             >mirror_Ptr      defl    $
 524+ EA27             >
 524+ EA27 79 77       >                dw      Dict_Ptr + 2        // xt
 524+ EA29             >Heap_Ptr        defl    $ - $E000           // save current HP
 524+ EA29             >
 524+ EA29             >Current_HP      defl  $ - $E000             // used to set HP once!
 524+ EA29             >
 524+ EA29             >//              ______________________________________________________________________
 524+ EA29             >//              Dictionary part
 524+ EA29             >
 524+ EA29             >                org     Dict_Ptr
 524+ 7777             >
 524+ 7777 27 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 524+ 7779             >
 524+ 7779             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 524+ 7779 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 524+ 777C             >
 524+ 777C             >
 524+ 777C             >                endif           ; ok        // for other definitions it "points" the correct handler
 524+ 777C             >                // Use of "; ok" to suppress "warning[fwdref]"
 524+ 777C             >
 524+ 777C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 525+ 777C D5 6A 72 69                  dw      WARNING, FETCH          // warning @
 526+ 7780                                                              // if
 527+ 7780 F3 63                        dw      ZBRANCH
 528+ 7782 12 00                        dw      Message_Else - $
 529+ 7784 A3 63 20 00                  dw          LIT, 32, PLUS       //      32 +
 529+ 7788 8A 68
 530+ 778A 72 6A                        dw          TWO                 //      2
 531+ 778C 6C 77                        dw          DOT_LINE            //      .line
 532+ 778E 52 6C                        dw          SPACE               //      space
 533+ 7790                                                              // else
 534+ 7790
 535+ 7790 EF 63                        dw      BRANCH
 536+ 7792 0B 00                        dw      Message_ENdif - $
 537+ 7794              Message_Else:
 538+ 7794 F3 70                        dw          C_DOT_QUOTE         //      .( msg#)
 539+ 7796 04 6D 73 67                  db          4, "msg#"
 539+ 779A 23
 540+ 779B 93 7E                        dw          DOT                 //      .  ( forward )
 541+ 779D              Message_ENdif:                                  // endif
 542+ 779D 3D 68                        dw      EXIT                    // ;
 543+ 779F
 544+ 779F
 545+ 779F              //  ______________________________________________________________________
 546+ 779F              //
 547+ 779F              // device
 548+ 779F                              Variable_Def DEVICE,   "DEVICE",   2
 548+ 779F             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 548+ 779F             >
 548+ 779F             >Dict_Ptr        defl    $
 548+ 779F             >
 548+ 779F             >//              ______________________________________________________________________
 548+ 779F             >//              Heap part
 548+ 779F             >
 548+ 779F             >
 548+ 779F             >                org     (Heap_Ptr & $1FFF) + $E000
 548+ EA29             >
 548+ EA29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ EA29             >Latest_Definition defl  Heap_Ptr
 548+ EA29             >
 548+ EA29             >                // dummy db directives used to calculate length of namec
 548+ EA29 44 45 56 49 >                db      "DEVICE"
 548+ EA2D 43 45       >
 548+ EA2F             >len_NFA         defl    $ - temp_NFA
 548+ EA2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ EA29             >
 548+ EA29 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ EA2A 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 548+ EA2E 43 45       >
 548+ EA30             >                org     $-1                 // alter last byte of Name just above to set
 548+ EA2F C5          >                db      {b $} | END_BIT     // msb as name end
 548+ EA30             >
 548+ EA30 1D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 548+ EA32             >Prev_Ptr        defl    Heap_Ptr
 548+ EA32             >
 548+ EA32             >mirror_Ptr      defl    $
 548+ EA32             >
 548+ EA32 A1 77       >                dw      Dict_Ptr + 2        // xt
 548+ EA34             >Heap_Ptr        defl    $ - $E000           // save current HP
 548+ EA34             >
 548+ EA34             >Current_HP      defl  $ - $E000             // used to set HP once!
 548+ EA34             >
 548+ EA34             >//              ______________________________________________________________________
 548+ EA34             >//              Dictionary part
 548+ EA34             >
 548+ EA34             >                org     Dict_Ptr
 548+ 779F             >
 548+ 779F 32 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 548+ 77A1             >
 548+ 77A1             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 77A1 CD 4B 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 548+ 77A4             >
 548+ 77A4             >
 548+ 77A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 77A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 77A4             >
 548+ 77A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 548+ 77A4 02 00       >                dw      2
 549+ 77A6
 550+ 77A6              //  ______________________________________________________________________
 551+ 77A6
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/L2.asm
 151  77A6                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/next-opt1.asm
   1+ 77A6              //  ______________________________________________________________________
   2+ 77A6              //
   3+ 77A6              //  next-opt.asm
   4+ 77A6              //
   5+ 77A6              //  ZX Spectrum Next - peculiar definitions
   6+ 77A6              //  ______________________________________________________________________
   7+ 77A6
   8+ 77A6              //  ______________________________________________________________________
   9+ 77A6              //
  10+ 77A6              // reg@         n -- b
  11+ 77A6              // read Next REGister n giving byte b
  12+ 77A6              //
  13+ 77A6              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 77A6              //              dw      LIT, $243B
  15+ 77A6              //              dw      PSTORE
  16+ 77A6              //              dw      LIT, $253B
  17+ 77A6              //              dw      PFETCH
  18+ 77A6              //              dw      EXIT
  19+ 77A6                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 77A6             >
  19+ 77A6             >Dict_Ptr        defl    $
  19+ 77A6             >
  19+ 77A6             >//              ______________________________________________________________________
  19+ 77A6             >//              Heap part
  19+ 77A6             >
  19+ 77A6             >
  19+ 77A6             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA34             >
  19+ EA34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA34             >Latest_Definition defl  Heap_Ptr
  19+ EA34             >
  19+ EA34             >                // dummy db directives used to calculate length of namec
  19+ EA34 52 45 47 40 >                db      "REG@"
  19+ EA38             >len_NFA         defl    $ - temp_NFA
  19+ EA38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA34             >
  19+ EA34 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA35 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA39             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA38 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA39             >
  19+ EA39 29 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA3B             >Prev_Ptr        defl    Heap_Ptr
  19+ EA3B             >
  19+ EA3B             >mirror_Ptr      defl    $
  19+ EA3B             >
  19+ EA3B A8 77       >                dw      Dict_Ptr + 2        // xt
  19+ EA3D             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA3D             >
  19+ EA3D             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA3D             >
  19+ EA3D             >//              ______________________________________________________________________
  19+ EA3D             >//              Dictionary part
  19+ EA3D             >
  19+ EA3D             >                org     Dict_Ptr
  19+ 77A6             >
  19+ 77A6 3B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 77A8             >
  19+ 77A8             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 77A8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 77A8 ~           >
  19+ 77A8 ~           >
  19+ 77A8             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 77A8             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 77A8             >
  19+ 77A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 77A8 D9                           exx
  21+ 77A9 01 3B 24                     ld      bc, $243B
  22+ 77AC E1                           pop     hl
  23+ 77AD ED 69                        out     (c), l
  24+ 77AF 04                           inc     b
  25+ 77B0 ED 68                        in      l, (c)
  26+ 77B2 E5                           push    hl
  27+ 77B3 D9                           exx
  28+ 77B4                              next
  28+ 77B4 DD E9       >                jp      (ix)
  29+ 77B6
  30+ 77B6
  31+ 77B6              //  ______________________________________________________________________
  32+ 77B6              //
  33+ 77B6              // reg!         b n --
  34+ 77B6              // write value b to Next REGister n
  35+ 77B6              //
  36+ 77B6              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 77B6              //              dw      LIT, $243B
  38+ 77B6              //              dw      PSTORE
  39+ 77B6              //              dw      LIT, $253B
  40+ 77B6              //              dw      PSTORE
  41+ 77B6              //              dw      EXIT
  42+ 77B6                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 77B6             >
  42+ 77B6             >Dict_Ptr        defl    $
  42+ 77B6             >
  42+ 77B6             >//              ______________________________________________________________________
  42+ 77B6             >//              Heap part
  42+ 77B6             >
  42+ 77B6             >
  42+ 77B6             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA3D             >
  42+ EA3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA3D             >Latest_Definition defl  Heap_Ptr
  42+ EA3D             >
  42+ EA3D             >                // dummy db directives used to calculate length of namec
  42+ EA3D 52 45 47 21 >                db      "REG!"
  42+ EA41             >len_NFA         defl    $ - temp_NFA
  42+ EA41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA3D             >
  42+ EA3D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA3E 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA42             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA41 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA42             >
  42+ EA42 34 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA44             >Prev_Ptr        defl    Heap_Ptr
  42+ EA44             >
  42+ EA44             >mirror_Ptr      defl    $
  42+ EA44             >
  42+ EA44 B8 77       >                dw      Dict_Ptr + 2        // xt
  42+ EA46             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA46             >
  42+ EA46             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA46             >
  42+ EA46             >//              ______________________________________________________________________
  42+ EA46             >//              Dictionary part
  42+ EA46             >
  42+ EA46             >                org     Dict_Ptr
  42+ 77B6             >
  42+ 77B6 44 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 77B8             >
  42+ 77B8             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 77B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 77B8 ~           >
  42+ 77B8 ~           >
  42+ 77B8             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 77B8             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 77B8             >
  42+ 77B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 77B8 D9                           exx
  44+ 77B9 01 3B 24                     ld      bc, $243B
  45+ 77BC E1                           pop     hl
  46+ 77BD ED 69                        out     (c), l
  47+ 77BF 04                           inc     b
  48+ 77C0 E1                           pop     hl
  49+ 77C1 ED 69                        out     (c), l
  50+ 77C3 D9                           exx
  51+ 77C4                              next
  51+ 77C4 DD E9       >                jp      (ix)
  52+ 77C6
  53+ 77C6
  54+ 77C6              //  ______________________________________________________________________
  55+ 77C6              //
  56+ 77C6              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 77C6              // NextZXOS call wrapper.
  58+ 77C6              //  n1 = hl register parameter value
  59+ 77C6              //  n2 = de register parameter value
  60+ 77C6              //  n3 = bc register parameter value
  61+ 77C6              //  n4 =  a register parameter value
  62+ 77C6              //   a = routine address in ROM 3
  63+ 77C6              // ----
  64+ 77C6              //  n5 = hl returned value
  65+ 77C6              //  n6 = de returned value
  66+ 77C6              //  n7 = bc returned value
  67+ 77C6              //  n8 =  a returned value
  68+ 77C6              //   f
  69+ 77C6                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 77C6             >
  69+ 77C6             >Dict_Ptr        defl    $
  69+ 77C6             >
  69+ 77C6             >//              ______________________________________________________________________
  69+ 77C6             >//              Heap part
  69+ 77C6             >
  69+ 77C6             >
  69+ 77C6             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA46             >
  69+ EA46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA46             >Latest_Definition defl  Heap_Ptr
  69+ EA46             >
  69+ EA46             >                // dummy db directives used to calculate length of namec
  69+ EA46 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA4A 44 4F 53    >
  69+ EA4D             >len_NFA         defl    $ - temp_NFA
  69+ EA4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA46             >
  69+ EA46 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA47 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA4B 44 4F 53    >
  69+ EA4E             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA4D D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA4E             >
  69+ EA4E 3D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA50             >Prev_Ptr        defl    Heap_Ptr
  69+ EA50             >
  69+ EA50             >mirror_Ptr      defl    $
  69+ EA50             >
  69+ EA50 C8 77       >                dw      Dict_Ptr + 2        // xt
  69+ EA52             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA52             >
  69+ EA52             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA52             >
  69+ EA52             >//              ______________________________________________________________________
  69+ EA52             >//              Dictionary part
  69+ EA52             >
  69+ EA52             >                org     Dict_Ptr
  69+ 77C6             >
  69+ 77C6 50 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 77C8             >
  69+ 77C8             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 77C8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 77C8 ~           >
  69+ 77C8 ~           >
  69+ 77C8             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 77C8             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 77C8             >
  69+ 77C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 77C8 D9                            exx
  71+ 77C9 E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 77CA D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 77CB 7B                            ld      a, e
  74+ 77CC C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 77CD D1                            pop     de                  // de' argument              //  n1
  76+ 77CE E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 77CF D9                           exx
  78+ 77D0 E1                           pop     hl                  // entry address a
  79+ 77D1 DD E5                        push    ix
  80+ 77D3 D5                           push    de
  81+ 77D4 C5                           push    bc
  82+ 77D5 EB                           ex      de, hl              // de is entry address
  83+ 77D6              //              ld      (SP_Saved), sp
  84+ 77D6              //              ld      sp, Cold_origin - 5
  85+ 77D6
  86+ 77D6 0E 07                        ld      c, 7                // use 7 RAM Bank
  87+ 77D8 F3                           di
  88+ 77D9 CF                           rst     08
  89+ 77DA 94                           db      $94
  90+ 77DB FB                           ei
  91+ 77DC
  92+ 77DC
  93+ 77DC
  94+ 77DC              //              ld      sp, (SP_Saved)
  95+ 77DC              //              push    ix
  96+ 77DC              //              pop     hl
  97+ 77DC              //              ld      (IX_Echo), hl
  98+ 77DC DD 22 98 63                  ld      (IX_Echo), ix
  99+ 77E0
 100+ 77E0 D9                           exx
 101+ 77E1 C1                           pop     bc
 102+ 77E2 D1                           pop     de
 103+ 77E3 DD E1                        pop     ix
 104+ 77E5 D9                            exx
 105+ 77E6 E5                            push    hl
 106+ 77E7 D5                            push    de
 107+ 77E8 C5                            push    bc
 108+ 77E9 26 00                         ld      h, 0
 109+ 77EB 6F                            ld      l, a
 110+ 77EC E5                            push    hl
 111+ 77ED D9                           exx
 112+ 77EE ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 113+ 77F0 23                           inc     hl                  //  0 for OK ; 1 for ko
 114+ 77F1 E5                           push    hl
 115+ 77F2                              next
 115+ 77F2 DD E9       >                jp      (ix)
 116+ 77F4
 117+ 77F4              //  ______________________________________________________________________
 118+ 77F4              //
 119+ 77F4              // blk-fh
 120+ 77F4
 121+ 77F4                              Variable_Def BLK_FH,   "BLK-FH",   1
 121+ 77F4             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 121+ 77F4             >
 121+ 77F4             >Dict_Ptr        defl    $
 121+ 77F4             >
 121+ 77F4             >//              ______________________________________________________________________
 121+ 77F4             >//              Heap part
 121+ 77F4             >
 121+ 77F4             >
 121+ 77F4             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ EA52             >
 121+ EA52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ EA52             >Latest_Definition defl  Heap_Ptr
 121+ EA52             >
 121+ EA52             >                // dummy db directives used to calculate length of namec
 121+ EA52 42 4C 4B 2D >                db      "BLK-FH"
 121+ EA56 46 48       >
 121+ EA58             >len_NFA         defl    $ - temp_NFA
 121+ EA58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ EA52             >
 121+ EA52 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ EA53 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 121+ EA57 46 48       >
 121+ EA59             >                org     $-1                 // alter last byte of Name just above to set
 121+ EA58 C8          >                db      {b $} | END_BIT     // msb as name end
 121+ EA59             >
 121+ EA59 46 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ EA5B             >Prev_Ptr        defl    Heap_Ptr
 121+ EA5B             >
 121+ EA5B             >mirror_Ptr      defl    $
 121+ EA5B             >
 121+ EA5B F6 77       >                dw      Dict_Ptr + 2        // xt
 121+ EA5D             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ EA5D             >
 121+ EA5D             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ EA5D             >
 121+ EA5D             >//              ______________________________________________________________________
 121+ EA5D             >//              Dictionary part
 121+ EA5D             >
 121+ EA5D             >                org     Dict_Ptr
 121+ 77F4             >
 121+ 77F4 5B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 77F6             >
 121+ 77F6             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 77F6 CD 4B 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 121+ 77F9             >
 121+ 77F9             >
 121+ 77F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 77F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 77F9             >
 121+ 77F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 77F9 01 00       >                dw      1
 122+ 77FB
 123+ 77FB                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 123+ 77FB             >
 123+ 77FB             >Dict_Ptr        defl    $
 123+ 77FB             >
 123+ 77FB             >//              ______________________________________________________________________
 123+ 77FB             >//              Heap part
 123+ 77FB             >
 123+ 77FB             >
 123+ 77FB             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ EA5D             >
 123+ EA5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ EA5D             >Latest_Definition defl  Heap_Ptr
 123+ EA5D             >
 123+ EA5D             >                // dummy db directives used to calculate length of namec
 123+ EA5D 42 4C 4B 2D >                db      "BLK-FNAME"
 123+ EA61 46 4E 41 4D >
 123+ EA65 45          >
 123+ EA66             >len_NFA         defl    $ - temp_NFA
 123+ EA66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ EA5D             >
 123+ EA5D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ EA5E 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 123+ EA62 46 4E 41 4D >
 123+ EA66 45          >
 123+ EA67             >                org     $-1                 // alter last byte of Name just above to set
 123+ EA66 C5          >                db      {b $} | END_BIT     // msb as name end
 123+ EA67             >
 123+ EA67 52 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ EA69             >Prev_Ptr        defl    Heap_Ptr
 123+ EA69             >
 123+ EA69             >mirror_Ptr      defl    $
 123+ EA69             >
 123+ EA69 FD 77       >                dw      Dict_Ptr + 2        // xt
 123+ EA6B             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ EA6B             >
 123+ EA6B             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ EA6B             >
 123+ EA6B             >//              ______________________________________________________________________
 123+ EA6B             >//              Dictionary part
 123+ EA6B             >
 123+ EA6B             >                org     Dict_Ptr
 123+ 77FB             >
 123+ 77FB 69 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 77FD             >
 123+ 77FD             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 77FD CD F1 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 123+ 7800             >
 123+ 7800             >
 123+ 7800             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 7800             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 7800             >
 123+ 7800             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 7800
 125+ 7800 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 125+ 7804 6F 63 6B 73
 125+ 7808 2D 36 34 2E
 125+ 780C 62 69 6E 00
 126+ 7810 00 00 00...                  ds      24     // so this buffer is 24+14+1=39
 127+ 7828
 128+ 7828              //  ______________________________________________________________________
 129+ 7828              //
 130+ 7828              // blk-seek     n --
 131+ 7828              // seek block n  within blocks!.bin  file
 132+ 7828                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 132+ 7828             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 132+ 7828             >
 132+ 7828             >Dict_Ptr        defl    $
 132+ 7828             >
 132+ 7828             >//              ______________________________________________________________________
 132+ 7828             >//              Heap part
 132+ 7828             >
 132+ 7828             >
 132+ 7828             >                org     (Heap_Ptr & $1FFF) + $E000
 132+ EA6B             >
 132+ EA6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ EA6B             >Latest_Definition defl  Heap_Ptr
 132+ EA6B             >
 132+ EA6B             >                // dummy db directives used to calculate length of namec
 132+ EA6B 42 4C 4B 2D >                db      "BLK-SEEK"
 132+ EA6F 53 45 45 4B >
 132+ EA73             >len_NFA         defl    $ - temp_NFA
 132+ EA73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ EA6B             >
 132+ EA6B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ EA6C 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 132+ EA70 53 45 45 4B >
 132+ EA74             >                org     $-1                 // alter last byte of Name just above to set
 132+ EA73 CB          >                db      {b $} | END_BIT     // msb as name end
 132+ EA74             >
 132+ EA74 5D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 132+ EA76             >Prev_Ptr        defl    Heap_Ptr
 132+ EA76             >
 132+ EA76             >mirror_Ptr      defl    $
 132+ EA76             >
 132+ EA76 2A 78       >                dw      Dict_Ptr + 2        // xt
 132+ EA78             >Heap_Ptr        defl    $ - $E000           // save current HP
 132+ EA78             >
 132+ EA78             >Current_HP      defl  $ - $E000             // used to set HP once!
 132+ EA78             >
 132+ EA78             >//              ______________________________________________________________________
 132+ EA78             >//              Dictionary part
 132+ EA78             >
 132+ EA78             >                org     Dict_Ptr
 132+ 7828             >
 132+ 7828 76 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 132+ 782A             >
 132+ 782A             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 782A CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 782D             >
 132+ 782D             >
 132+ 782D             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 782D             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 782D             >
 132+ 782D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 782D 95 6A 7C 76                  dw  BBUF, MMUL
 134+ 7831 F6 77 72 69                  dw  BLK_FH, FETCH
 135+ 7835 CC 66                        dw  F_SEEK
 136+ 7837 A3 63 2D 00                  dw  LIT, $2D, QERROR
 136+ 783B BD 6D
 137+ 783D 3D 68                        dw  EXIT
 138+ 783F
 139+ 783F              //  ______________________________________________________________________
 140+ 783F              //
 141+ 783F              // blk-read     n --
 142+ 783F              // seek block n  within blocks!.bin  file
 143+ 783F                              Colon_Def BLK_READ, "BLK-READ", is_normal
 143+ 783F             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 143+ 783F             >
 143+ 783F             >Dict_Ptr        defl    $
 143+ 783F             >
 143+ 783F             >//              ______________________________________________________________________
 143+ 783F             >//              Heap part
 143+ 783F             >
 143+ 783F             >
 143+ 783F             >                org     (Heap_Ptr & $1FFF) + $E000
 143+ EA78             >
 143+ EA78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 143+ EA78             >Latest_Definition defl  Heap_Ptr
 143+ EA78             >
 143+ EA78             >                // dummy db directives used to calculate length of namec
 143+ EA78 42 4C 4B 2D >                db      "BLK-READ"
 143+ EA7C 52 45 41 44 >
 143+ EA80             >len_NFA         defl    $ - temp_NFA
 143+ EA80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 143+ EA78             >
 143+ EA78 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 143+ EA79 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 143+ EA7D 52 45 41 44 >
 143+ EA81             >                org     $-1                 // alter last byte of Name just above to set
 143+ EA80 C4          >                db      {b $} | END_BIT     // msb as name end
 143+ EA81             >
 143+ EA81 6B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 143+ EA83             >Prev_Ptr        defl    Heap_Ptr
 143+ EA83             >
 143+ EA83             >mirror_Ptr      defl    $
 143+ EA83             >
 143+ EA83 41 78       >                dw      Dict_Ptr + 2        // xt
 143+ EA85             >Heap_Ptr        defl    $ - $E000           // save current HP
 143+ EA85             >
 143+ EA85             >Current_HP      defl  $ - $E000             // used to set HP once!
 143+ EA85             >
 143+ EA85             >//              ______________________________________________________________________
 143+ EA85             >//              Dictionary part
 143+ EA85             >
 143+ EA85             >                org     Dict_Ptr
 143+ 783F             >
 143+ 783F 83 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 143+ 7841             >
 143+ 7841             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 143+ 7841 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 143+ 7844             >
 143+ 7844             >
 143+ 7844             >                endif           ; ok        // for other definitions it "points" the correct handler
 143+ 7844             >                // Use of "; ok" to suppress "warning[fwdref]"
 143+ 7844             >
 143+ 7844             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 7844 2A 78                        dw  BLK_SEEK
 145+ 7846 95 6A                        dw  BBUF
 146+ 7848 F6 77 72 69                  dw  BLK_FH, FETCH
 147+ 784C 1E 67                        dw  F_READ
 148+ 784E A3 63 2E 00                  dw  LIT, $2E, QERROR
 148+ 7852 BD 6D
 149+ 7854 ED 68                        dw  DROP
 150+ 7856 3D 68                        dw  EXIT
 151+ 7858
 152+ 7858              //  ______________________________________________________________________
 153+ 7858              //
 154+ 7858              // blk-write     n --
 155+ 7858              // seek block n  within blocks!.bin  file
 156+ 7858                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 156+ 7858             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 156+ 7858             >
 156+ 7858             >Dict_Ptr        defl    $
 156+ 7858             >
 156+ 7858             >//              ______________________________________________________________________
 156+ 7858             >//              Heap part
 156+ 7858             >
 156+ 7858             >
 156+ 7858             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ EA85             >
 156+ EA85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ EA85             >Latest_Definition defl  Heap_Ptr
 156+ EA85             >
 156+ EA85             >                // dummy db directives used to calculate length of namec
 156+ EA85 42 4C 4B 2D >                db      "BLK-WRITE"
 156+ EA89 57 52 49 54 >
 156+ EA8D 45          >
 156+ EA8E             >len_NFA         defl    $ - temp_NFA
 156+ EA8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ EA85             >
 156+ EA85 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ EA86 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 156+ EA8A 57 52 49 54 >
 156+ EA8E 45          >
 156+ EA8F             >                org     $-1                 // alter last byte of Name just above to set
 156+ EA8E C5          >                db      {b $} | END_BIT     // msb as name end
 156+ EA8F             >
 156+ EA8F 78 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ EA91             >Prev_Ptr        defl    Heap_Ptr
 156+ EA91             >
 156+ EA91             >mirror_Ptr      defl    $
 156+ EA91             >
 156+ EA91 5A 78       >                dw      Dict_Ptr + 2        // xt
 156+ EA93             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ EA93             >
 156+ EA93             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ EA93             >
 156+ EA93             >//              ______________________________________________________________________
 156+ EA93             >//              Dictionary part
 156+ EA93             >
 156+ EA93             >                org     Dict_Ptr
 156+ 7858             >
 156+ 7858 91 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 785A             >
 156+ 785A             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 785A CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 785D             >
 156+ 785D             >
 156+ 785D             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 785D             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 785D             >
 156+ 785D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 785D 2A 78                        dw  BLK_SEEK
 158+ 785F 95 6A                        dw  BBUF
 159+ 7861 F6 77 72 69                  dw  BLK_FH, FETCH
 160+ 7865 3B 67                        dw  F_WRITE
 161+ 7867 A3 63 2F 00                  dw  LIT, $2F, QERROR
 161+ 786B BD 6D
 162+ 786D ED 68                        dw  DROP
 163+ 786F 3D 68                        dw  EXIT
 164+ 7871
 165+ 7871              //  ______________________________________________________________________
 166+ 7871              //
 167+ 7871              // blk-init     n --
 168+ 7871              // seek block n  within blocks!.bin  file
 169+ 7871                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 169+ 7871             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 169+ 7871             >
 169+ 7871             >Dict_Ptr        defl    $
 169+ 7871             >
 169+ 7871             >//              ______________________________________________________________________
 169+ 7871             >//              Heap part
 169+ 7871             >
 169+ 7871             >
 169+ 7871             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ EA93             >
 169+ EA93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ EA93             >Latest_Definition defl  Heap_Ptr
 169+ EA93             >
 169+ EA93             >                // dummy db directives used to calculate length of namec
 169+ EA93 42 4C 4B 2D >                db      "BLK-INIT"
 169+ EA97 49 4E 49 54 >
 169+ EA9B             >len_NFA         defl    $ - temp_NFA
 169+ EA9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ EA93             >
 169+ EA93 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ EA94 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 169+ EA98 49 4E 49 54 >
 169+ EA9C             >                org     $-1                 // alter last byte of Name just above to set
 169+ EA9B D4          >                db      {b $} | END_BIT     // msb as name end
 169+ EA9C             >
 169+ EA9C 85 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ EA9E             >Prev_Ptr        defl    Heap_Ptr
 169+ EA9E             >
 169+ EA9E             >mirror_Ptr      defl    $
 169+ EA9E             >
 169+ EA9E 73 78       >                dw      Dict_Ptr + 2        // xt
 169+ EAA0             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ EAA0             >
 169+ EAA0             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ EAA0             >
 169+ EAA0             >//              ______________________________________________________________________
 169+ EAA0             >//              Dictionary part
 169+ EAA0             >
 169+ EAA0             >                org     Dict_Ptr
 169+ 7871             >
 169+ 7871 9E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 7873             >
 169+ 7873             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 7873 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 169+ 7876             >
 169+ 7876             >
 169+ 7876             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 7876             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 7876             >
 169+ 7876             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 7876 F6 77 72 69                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 170+ 787A EA 66 ED 68
 171+ 787E FD 77 A3 68                  dw  BLK_FNAME, ONE_PLUS
 172+ 7882 89 6B 79 6A                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 172+ 7886 4C 67
 173+ 7888 A3 63 2C 00                  dw  LIT, $2C, QERROR
 173+ 788C BD 6D
 174+ 788E F6 77 7C 69                  dw  BLK_FH, STORE
 175+ 7892 3D 68                        dw  EXIT
 176+ 7894
 177+ 7894              //  ______________________________________________________________________
 178+ 7894              //
 179+ 7894              // #sec
 180+ 7894              // number of 512-Byte "sectors" available on thie sysstem.
 181+ 7894              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 182+ 7894
 183+ 7894                              Constant_Def NSEC , "#SEC", 32767
 183+ 7894             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 183+ 7894             >
 183+ 7894             >Dict_Ptr        defl    $
 183+ 7894             >
 183+ 7894             >//              ______________________________________________________________________
 183+ 7894             >//              Heap part
 183+ 7894             >
 183+ 7894             >
 183+ 7894             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ EAA0             >
 183+ EAA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ EAA0             >Latest_Definition defl  Heap_Ptr
 183+ EAA0             >
 183+ EAA0             >                // dummy db directives used to calculate length of namec
 183+ EAA0 23 53 45 43 >                db      "#SEC"
 183+ EAA4             >len_NFA         defl    $ - temp_NFA
 183+ EAA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ EAA0             >
 183+ EAA0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ EAA1 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 183+ EAA5             >                org     $-1                 // alter last byte of Name just above to set
 183+ EAA4 C3          >                db      {b $} | END_BIT     // msb as name end
 183+ EAA5             >
 183+ EAA5 93 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ EAA7             >Prev_Ptr        defl    Heap_Ptr
 183+ EAA7             >
 183+ EAA7             >mirror_Ptr      defl    $
 183+ EAA7             >
 183+ EAA7 96 78       >                dw      Dict_Ptr + 2        // xt
 183+ EAA9             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ EAA9             >
 183+ EAA9             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ EAA9             >
 183+ EAA9             >//              ______________________________________________________________________
 183+ EAA9             >//              Dictionary part
 183+ EAA9             >
 183+ EAA9             >                org     Dict_Ptr
 183+ 7894             >
 183+ 7894 A7 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 7896             >
 183+ 7896             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 7896 CD 38 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 183+ 7899             >
 183+ 7899             >
 183+ 7899             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 7899             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 7899             >
 183+ 7899             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 7899 FF 7F       >                dw      32767
 184+ 789B
 185+ 789B              //  ______________________________________________________________________
 186+ 789B
 187+ 789B
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/next-opt1.asm
 152  789B                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/L3.asm
   1+ 789B              //  ______________________________________________________________________
   2+ 789B              //
   3+ 789B              //  L3.asm
   4+ 789B              //
   5+ 789B              //  Continuation of L2.asm
   6+ 789B              //  I/O Block definitions
   7+ 789B              //  ______________________________________________________________________
   8+ 789B
   9+ 789B
  10+ 789B              //  ______________________________________________________________________
  11+ 789B              //
  12+ 789B              // r/w          a n f --
  13+ 789B              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 789B                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 789B             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 789B             >
  14+ 789B             >Dict_Ptr        defl    $
  14+ 789B             >
  14+ 789B             >//              ______________________________________________________________________
  14+ 789B             >//              Heap part
  14+ 789B             >
  14+ 789B             >
  14+ 789B             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EAA9             >
  14+ EAA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EAA9             >Latest_Definition defl  Heap_Ptr
  14+ EAA9             >
  14+ EAA9             >                // dummy db directives used to calculate length of namec
  14+ EAA9 52 2F 57    >                db      "R/W"
  14+ EAAC             >len_NFA         defl    $ - temp_NFA
  14+ EAAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EAA9             >
  14+ EAA9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EAAA 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EAAD             >                org     $-1                 // alter last byte of Name just above to set
  14+ EAAC D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EAAD             >
  14+ EAAD A0 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EAAF             >Prev_Ptr        defl    Heap_Ptr
  14+ EAAF             >
  14+ EAAF             >mirror_Ptr      defl    $
  14+ EAAF             >
  14+ EAAF 9D 78       >                dw      Dict_Ptr + 2        // xt
  14+ EAB1             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EAB1             >
  14+ EAB1             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EAB1             >
  14+ EAB1             >//              ______________________________________________________________________
  14+ EAB1             >//              Dictionary part
  14+ EAB1             >
  14+ EAB1             >                org     Dict_Ptr
  14+ 789B             >
  14+ 789B AF 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 789D             >
  14+ 789D             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 789D CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 78A0             >
  14+ 78A0             >
  14+ 78A0             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 78A0             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 78A0             >
  14+ 78A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 78A0 47 68                        dw      TO_R                    // >r
  16+ 78A2 AA 68                        dw      ONE_SUBTRACT            // 1-
  17+ 78A4 08 69 73 68                  dw      DUP, ZLESS              // dup 0<
  18+ 78A8 E4 68 96 78                  dw      OVER, NSEC              // over #sec
  19+ 78AC AA 68 FA 6B                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 78B0 0C 68                        dw      OR_OP                   // or
  21+ 78B2 A3 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 78B6 BD 6D
  22+ 78B8 52 68                        dw      R_TO                    // r>
  23+ 78BA                                                              // if
  24+ 78BA F3 63                        dw      ZBRANCH
  25+ 78BC 08 00                        dw      Read_Write_Else - $
  26+ 78BE 41 78                        dw          BLK_READ            //      blk-read
  27+ 78C0 EF 63                        dw      BRANCH
  28+ 78C2 04 00                        dw      Read_Write_Endif - $
  29+ 78C4              Read_Write_Else:                                // else
  30+ 78C4 5A 78                        dw          BLK_WRITE           //      blk-write
  31+ 78C6              Read_Write_Endif:                               // endif
  32+ 78C6 3D 68                        dw      EXIT                    // ;
  33+ 78C8
  34+ 78C8
  35+ 78C8              //  ______________________________________________________________________
  36+ 78C8              //
  37+ 78C8              // +buf        a1 -- a2 f
  38+ 78C8              // advences to next buffer, cyclically rotating along them
  39+ 78C8                              Colon_Def PBUF, "+BUF", is_normal
  39+ 78C8             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 78C8             >
  39+ 78C8             >Dict_Ptr        defl    $
  39+ 78C8             >
  39+ 78C8             >//              ______________________________________________________________________
  39+ 78C8             >//              Heap part
  39+ 78C8             >
  39+ 78C8             >
  39+ 78C8             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EAB1             >
  39+ EAB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EAB1             >Latest_Definition defl  Heap_Ptr
  39+ EAB1             >
  39+ EAB1             >                // dummy db directives used to calculate length of namec
  39+ EAB1 2B 42 55 46 >                db      "+BUF"
  39+ EAB5             >len_NFA         defl    $ - temp_NFA
  39+ EAB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EAB1             >
  39+ EAB1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EAB2 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EAB6             >                org     $-1                 // alter last byte of Name just above to set
  39+ EAB5 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EAB6             >
  39+ EAB6 A9 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EAB8             >Prev_Ptr        defl    Heap_Ptr
  39+ EAB8             >
  39+ EAB8             >mirror_Ptr      defl    $
  39+ EAB8             >
  39+ EAB8 CA 78       >                dw      Dict_Ptr + 2        // xt
  39+ EABA             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EABA             >
  39+ EABA             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EABA             >
  39+ EABA             >//              ______________________________________________________________________
  39+ EABA             >//              Dictionary part
  39+ EABA             >
  39+ EABA             >                org     Dict_Ptr
  39+ 78C8             >
  39+ 78C8 B8 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 78CA             >
  39+ 78CA             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 78CA CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 78CD             >
  39+ 78CD             >
  39+ 78CD             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 78CD             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 78CD             >
  39+ 78CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 78CD A3 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 78D1 8A 68
  41+ 78D3 08 69 F3 6A                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 78D7 72 69
  42+ 78D9 D4 6B                        dw      EQUALS                  // =
  43+ 78DB                                                              // if
  44+ 78DB F3 63                        dw      ZBRANCH
  45+ 78DD 08 00                        dw      PBuf_Endif - $
  46+ 78DF ED 68                        dw          DROP                //      drop
  47+ 78E1 ED 6A 72 69                  dw          FIRST, FETCH        //      first @
  48+ 78E5              PBuf_Endif:                                     // endif
  49+ 78E5 08 69 5F 6B                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 78E9 72 69
  50+ 78EB C8 6B                        dw      SUBTRACT                // -
  51+ 78ED 3D 68                        dw      EXIT                    // ;
  52+ 78EF
  53+ 78EF              //  ______________________________________________________________________
  54+ 78EF              //
  55+ 78EF              // update       --
  56+ 78EF              // mark the last used block to be written to disk
  57+ 78EF                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 78EF             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 78EF             >
  57+ 78EF             >Dict_Ptr        defl    $
  57+ 78EF             >
  57+ 78EF             >//              ______________________________________________________________________
  57+ 78EF             >//              Heap part
  57+ 78EF             >
  57+ 78EF             >
  57+ 78EF             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EABA             >
  57+ EABA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EABA             >Latest_Definition defl  Heap_Ptr
  57+ EABA             >
  57+ EABA             >                // dummy db directives used to calculate length of namec
  57+ EABA 55 50 44 41 >                db      "UPDATE"
  57+ EABE 54 45       >
  57+ EAC0             >len_NFA         defl    $ - temp_NFA
  57+ EAC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EABA             >
  57+ EABA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EABB 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EABF 54 45       >
  57+ EAC1             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAC0 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAC1             >
  57+ EAC1 B1 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EAC3             >Prev_Ptr        defl    Heap_Ptr
  57+ EAC3             >
  57+ EAC3             >mirror_Ptr      defl    $
  57+ EAC3             >
  57+ EAC3 F1 78       >                dw      Dict_Ptr + 2        // xt
  57+ EAC5             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EAC5             >
  57+ EAC5             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EAC5             >
  57+ EAC5             >//              ______________________________________________________________________
  57+ EAC5             >//              Dictionary part
  57+ EAC5             >
  57+ EAC5             >                org     Dict_Ptr
  57+ 78EF             >
  57+ 78EF C3 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 78F1             >
  57+ 78F1             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 78F1 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 78F4             >
  57+ 78F4             >
  57+ 78F4             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 78F4             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 78F4             >
  57+ 78F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 78F4 5F 6B 72 69                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 78F8 72 69
  59+ 78FA A3 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 78FE 0C 68
  60+ 7900 5F 6B 72 69                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7904 7C 69
  61+ 7906 3D 68                        dw      EXIT                    // ;
  62+ 7908
  63+ 7908
  64+ 7908              //  ______________________________________________________________________
  65+ 7908              //
  66+ 7908              // empty-buffers --
  67+ 7908                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7908             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7908             >
  67+ 7908             >Dict_Ptr        defl    $
  67+ 7908             >
  67+ 7908             >//              ______________________________________________________________________
  67+ 7908             >//              Heap part
  67+ 7908             >
  67+ 7908             >
  67+ 7908             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EAC5             >
  67+ EAC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EAC5             >Latest_Definition defl  Heap_Ptr
  67+ EAC5             >
  67+ EAC5             >                // dummy db directives used to calculate length of namec
  67+ EAC5 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAC9 59 2D 42 55 >
  67+ EACD 46 46 45 52 >
  67+ EAD1 53          >
  67+ EAD2             >len_NFA         defl    $ - temp_NFA
  67+ EAD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EAC5             >
  67+ EAC5 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EAC6 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EACA 59 2D 42 55 >
  67+ EACE 46 46 45 52 >
  67+ EAD2 53          >
  67+ EAD3             >                org     $-1                 // alter last byte of Name just above to set
  67+ EAD2 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EAD3             >
  67+ EAD3 BA 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EAD5             >Prev_Ptr        defl    Heap_Ptr
  67+ EAD5             >
  67+ EAD5             >mirror_Ptr      defl    $
  67+ EAD5             >
  67+ EAD5 0A 79       >                dw      Dict_Ptr + 2        // xt
  67+ EAD7             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EAD7             >
  67+ EAD7             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EAD7             >
  67+ EAD7             >//              ______________________________________________________________________
  67+ EAD7             >//              Dictionary part
  67+ EAD7             >
  67+ EAD7             >                org     Dict_Ptr
  67+ 7908             >
  67+ 7908 D5 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 790A             >
  67+ 790A             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 790A CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 790D             >
  67+ 790D             >
  67+ 790D             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 790D             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 790D             >
  67+ 790D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 790D ED 6A 72 69                  dw      FIRST, FETCH            // first @
  69+ 7911 F3 6A 72 69                  dw      LIMIT, FETCH            // limit @
  70+ 7915 E4 68 C8 6B                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7919 70 70
  71+ 791B 3D 68                        dw      EXIT                    // ;
  72+ 791D
  73+ 791D              //  ______________________________________________________________________
  74+ 791D              //
  75+ 791D              // buffer       n -- a
  76+ 791D              // read block n and gives the address to a buffer
  77+ 791D              // any block previously inside the buffer, if modified, is rewritten to
  78+ 791D              // disk before reading the block n.
  79+ 791D
  80+ 791D                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 791D             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 791D             >
  80+ 791D             >Dict_Ptr        defl    $
  80+ 791D             >
  80+ 791D             >//              ______________________________________________________________________
  80+ 791D             >//              Heap part
  80+ 791D             >
  80+ 791D             >
  80+ 791D             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EAD7             >
  80+ EAD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EAD7             >Latest_Definition defl  Heap_Ptr
  80+ EAD7             >
  80+ EAD7             >                // dummy db directives used to calculate length of namec
  80+ EAD7 42 55 46 46 >                db      "BUFFER"
  80+ EADB 45 52       >
  80+ EADD             >len_NFA         defl    $ - temp_NFA
  80+ EADD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EAD7             >
  80+ EAD7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EAD8 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EADC 45 52       >
  80+ EADE             >                org     $-1                 // alter last byte of Name just above to set
  80+ EADD D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EADE             >
  80+ EADE C5 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EAE0             >Prev_Ptr        defl    Heap_Ptr
  80+ EAE0             >
  80+ EAE0             >mirror_Ptr      defl    $
  80+ EAE0             >
  80+ EAE0 1F 79       >                dw      Dict_Ptr + 2        // xt
  80+ EAE2             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EAE2             >
  80+ EAE2             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EAE2             >
  80+ EAE2             >//              ______________________________________________________________________
  80+ EAE2             >//              Dictionary part
  80+ EAE2             >
  80+ EAE2             >                org     Dict_Ptr
  80+ 791D             >
  80+ 791D E0 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 791F             >
  80+ 791F             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 791F CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7922             >
  80+ 7922             >
  80+ 7922             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7922             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7922             >
  80+ 7922             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7922 59 6B 72 69                  dw      USED, FETCH             // used @
  82+ 7926 08 69 47 68                  dw      DUP, TO_R               // dup >r
  83+ 792A                                                              // begin
  84+ 792A              Buffer_Begin:
  85+ 792A CA 78                        dw          PBUF                //      +buf
  86+ 792C                                                              // until
  87+ 792C F3 63                        dw      ZBRANCH
  88+ 792E FC FF                        dw      Buffer_Begin - $
  89+ 7930 59 6B 7C 69                  dw      USED, STORE             // used !
  90+ 7934 5D 68 72 69                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7938 73 68
  91+ 793A                                                              // if
  92+ 793A F3 63                        dw      ZBRANCH
  93+ 793C 14 00                        dw      Buffer_Endif - $
  94+ 793E 5D 68 B9 68                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7942 5D 68 72 69                  dw          R_OP, FETCH         //      r fetch
  96+ 7946 A3 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 794A FD 67                        dw          AND_OP              //      and
  98+ 794C 64 6A 9D 78                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7950              Buffer_Endif:                                   // endif
 100+ 7950 5D 68 7C 69                  dw      R_OP, STORE             // r !
 101+ 7954 5D 68 5F 6B                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7958 7C 69
 102+ 795A 52 68 B9 68                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 795E 3D 68                        dw      EXIT                    // ;
 104+ 7960
 105+ 7960              //  ______________________________________________________________________
 106+ 7960              //
 107+ 7960              // block        n -- a
 108+ 7960              // Leaves the buffer address that contains the block n.
 109+ 7960              // If the block is not already present, it will be loaded from disk
 110+ 7960              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7960              // disk before reading the block n.
 112+ 7960              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7960
 114+ 7960                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7960             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7960             >
 114+ 7960             >Dict_Ptr        defl    $
 114+ 7960             >
 114+ 7960             >//              ______________________________________________________________________
 114+ 7960             >//              Heap part
 114+ 7960             >
 114+ 7960             >
 114+ 7960             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EAE2             >
 114+ EAE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EAE2             >Latest_Definition defl  Heap_Ptr
 114+ EAE2             >
 114+ EAE2             >                // dummy db directives used to calculate length of namec
 114+ EAE2 42 4C 4F 43 >                db      "BLOCK"
 114+ EAE6 4B          >
 114+ EAE7             >len_NFA         defl    $ - temp_NFA
 114+ EAE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EAE2             >
 114+ EAE2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EAE3 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAE7 4B          >
 114+ EAE8             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAE7 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAE8             >
 114+ EAE8 D7 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAEA             >Prev_Ptr        defl    Heap_Ptr
 114+ EAEA             >
 114+ EAEA             >mirror_Ptr      defl    $
 114+ EAEA             >
 114+ EAEA 62 79       >                dw      Dict_Ptr + 2        // xt
 114+ EAEC             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAEC             >
 114+ EAEC             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAEC             >
 114+ EAEC             >//              ______________________________________________________________________
 114+ EAEC             >//              Dictionary part
 114+ EAEC             >
 114+ EAEC             >                org     Dict_Ptr
 114+ 7960             >
 114+ 7960 EA 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 7962             >
 114+ 7962             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7962 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7965             >
 114+ 7965             >
 114+ 7965             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7965             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7965             >
 114+ 7965             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7965                          //  dw      OFFSET, FETCH           // offset @
 116+ 7965                          //  dw      PLUS
 117+ 7965 47 68                        dw      TO_R                    // + >r
 118+ 7967 5F 6B 72 69                  dw      PREV, FETCH             // prev @
 119+ 796B 08 69 72 69                  dw      DUP, FETCH              // dup @
 120+ 796F 5D 68 C8 6B                  dw      R_OP, SUBTRACT          // r -
 121+ 7973 08 69 8A 68                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 7977                                                              // if
 123+ 7977 F3 63                        dw        ZBRANCH
 124+ 7979 32 00                        dw        Block_Endif_1 - $
 125+ 797B              Block_Begin:                                    //      begin
 126+ 797B CA 78 62 68                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 797F                                                              //          if
 128+ 797F F3 63                        dw          ZBRANCH
 129+ 7981 12 00                        dw          Block_Endif_2 - $
 130+ 7983 ED 68                        dw              DROP            //              drop
 131+ 7985 5D 68 1F 79                  dw              R_OP, BUFFER    //              r buffer
 132+ 7989 08 69                        dw              DUP             //              dup
 133+ 798B 5D 68 6B 6A                  dw              R_OP, ONE       //              r 1
 134+ 798F 9D 78                        dw              READ_WRITE      //              r/w
 135+ 7991 C5 68                        dw              TWO_MINUS       //              2-
 136+ 7993              Block_Endif_2:                                  //          endif
 137+ 7993 08 69 72 69                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 7997 5D 68
 138+ 7999 C8 6B 08 69                  dw          SUBTRACT, DUP       //          - dup
 139+ 799D 8A 68 62 68                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 79A1                                                              //      until
 141+ 79A1 F3 63                        dw        ZBRANCH
 142+ 79A3 D8 FF                        dw        Block_Begin - $
 143+ 79A5 08 69 5F 6B                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 79A9 7C 69
 144+ 79AB              Block_Endif_1:                                  // endif
 145+ 79AB 52 68 ED 68                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 79AF B9 68
 146+ 79B1 3D 68                        dw      EXIT                    // ;
 147+ 79B3
 148+ 79B3              //  ______________________________________________________________________
 149+ 79B3              //
 150+ 79B3              // #buff        -- n
 151+ 79B3              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 79B3                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 79B3             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 79B3             >
 152+ 79B3             >Dict_Ptr        defl    $
 152+ 79B3             >
 152+ 79B3             >//              ______________________________________________________________________
 152+ 79B3             >//              Heap part
 152+ 79B3             >
 152+ 79B3             >
 152+ 79B3             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAEC             >
 152+ EAEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAEC             >Latest_Definition defl  Heap_Ptr
 152+ EAEC             >
 152+ EAEC             >                // dummy db directives used to calculate length of namec
 152+ EAEC 23 42 55 46 >                db      "#BUFF"
 152+ EAF0 46          >
 152+ EAF1             >len_NFA         defl    $ - temp_NFA
 152+ EAF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAEC             >
 152+ EAEC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAED 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EAF1 46          >
 152+ EAF2             >                org     $-1                 // alter last byte of Name just above to set
 152+ EAF1 C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EAF2             >
 152+ EAF2 E2 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EAF4             >Prev_Ptr        defl    Heap_Ptr
 152+ EAF4             >
 152+ EAF4             >mirror_Ptr      defl    $
 152+ EAF4             >
 152+ EAF4 B5 79       >                dw      Dict_Ptr + 2        // xt
 152+ EAF6             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAF6             >
 152+ EAF6             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAF6             >
 152+ EAF6             >//              ______________________________________________________________________
 152+ EAF6             >//              Dictionary part
 152+ EAF6             >
 152+ EAF6             >                org     Dict_Ptr
 152+ 79B3             >
 152+ 79B3 F4 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 79B5             >
 152+ 79B5             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 79B5 CD 38 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 79B8             >
 152+ 79B8             >
 152+ 79B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 79B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 79B8             >
 152+ 79B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 79B8 07 00       >                dw      7
 153+ 79BA
 154+ 79BA              //  ______________________________________________________________________
 155+ 79BA              //
 156+ 79BA              // flush        --
 157+ 79BA                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 79BA             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 79BA             >
 157+ 79BA             >Dict_Ptr        defl    $
 157+ 79BA             >
 157+ 79BA             >//              ______________________________________________________________________
 157+ 79BA             >//              Heap part
 157+ 79BA             >
 157+ 79BA             >
 157+ 79BA             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAF6             >
 157+ EAF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAF6             >Latest_Definition defl  Heap_Ptr
 157+ EAF6             >
 157+ EAF6             >                // dummy db directives used to calculate length of namec
 157+ EAF6 46 4C 55 53 >                db      "FLUSH"
 157+ EAFA 48          >
 157+ EAFB             >len_NFA         defl    $ - temp_NFA
 157+ EAFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAF6             >
 157+ EAF6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAF7 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EAFB 48          >
 157+ EAFC             >                org     $-1                 // alter last byte of Name just above to set
 157+ EAFB C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EAFC             >
 157+ EAFC EC 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EAFE             >Prev_Ptr        defl    Heap_Ptr
 157+ EAFE             >
 157+ EAFE             >mirror_Ptr      defl    $
 157+ EAFE             >
 157+ EAFE BC 79       >                dw      Dict_Ptr + 2        // xt
 157+ EB00             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EB00             >
 157+ EB00             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EB00             >
 157+ EB00             >//              ______________________________________________________________________
 157+ EB00             >//              Dictionary part
 157+ EB00             >
 157+ EB00             >                org     Dict_Ptr
 157+ 79BA             >
 157+ 79BA FE 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 79BC             >
 157+ 79BC             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 79BC CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 79BF             >
 157+ 79BF             >
 157+ 79BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 79BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 79BF             >
 157+ 79BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 79BF B5 79 A3 68                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 79C3 64 6A
 159+ 79C5              Flush_Do:                                       // do
 160+ 79C5 2C 64                        dw      C_DO
 161+ 79C7 64 6A 1F 79                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 79CB ED 68
 162+ 79CD                                                              // loop
 163+ 79CD E7 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 79D1 F6 77 72 69                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 79D5 F7 66 ED 68                  dw      F_SYNC, DROP            // f_sync drop
 166+ 79D9 3D 68                        dw      EXIT                    // exit
 167+ 79DB
 168+ 79DB              //  ______________________________________________________________________
 169+ 79DB              //
 170+ 79DB              // f_getline    a m fh -- n
 171+ 79DB              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 79DB              // Address a is left for subsequent processing
 173+ 79DB              // and n as the actual number of byte read, that is the length of line
 174+ 79DB                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 79DB             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 79DB             >
 174+ 79DB             >Dict_Ptr        defl    $
 174+ 79DB             >
 174+ 79DB             >//              ______________________________________________________________________
 174+ 79DB             >//              Heap part
 174+ 79DB             >
 174+ 79DB             >
 174+ 79DB             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EB00             >
 174+ EB00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EB00             >Latest_Definition defl  Heap_Ptr
 174+ EB00             >
 174+ EB00             >                // dummy db directives used to calculate length of namec
 174+ EB00 46 5F 47 45 >                db      "F_GETLINE"
 174+ EB04 54 4C 49 4E >
 174+ EB08 45          >
 174+ EB09             >len_NFA         defl    $ - temp_NFA
 174+ EB09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EB00             >
 174+ EB00 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EB01 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EB05 54 4C 49 4E >
 174+ EB09 45          >
 174+ EB0A             >                org     $-1                 // alter last byte of Name just above to set
 174+ EB09 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EB0A             >
 174+ EB0A F6 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EB0C             >Prev_Ptr        defl    Heap_Ptr
 174+ EB0C             >
 174+ EB0C             >mirror_Ptr      defl    $
 174+ EB0C             >
 174+ EB0C DD 79       >                dw      Dict_Ptr + 2        // xt
 174+ EB0E             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EB0E             >
 174+ EB0E             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EB0E             >
 174+ EB0E             >//              ______________________________________________________________________
 174+ EB0E             >//              Dictionary part
 174+ EB0E             >
 174+ EB0E             >                org     Dict_Ptr
 174+ 79DB             >
 174+ 79DB 0C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 79DD             >
 174+ 79DD             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 79DD CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 79E0             >
 174+ 79E0             >
 174+ 79E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 79E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 79E0             >
 174+ 79E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 79E0 47 68                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 79E2 F8 68                        dw      TUCK                    // tuck             ( m a m )
 177+ 79E4 5D 68 04 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 79E8 A3 63 23 00                  dw      LIT, 35, QERROR         // 44 ?error        ( m a m d )
 178+ 79EC BD 6D
 179+ 79EE
 180+ 79EE 43 69 E4 68                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 79F2 A3 68 01 69                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 79F6
 183+ 79F6 5D 68 1E 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 79FA A3 63 23 00                  dw      LIT, 35, QERROR         // 46 ?error        ( m d a n )
 184+ 79FE BD 6D
 185+ 7A00                                                              // if ( at least 1 chr was read )  \  fh
 186+ 7A00 F3 63                        dw      ZBRANCH
 187+ 7A02 3C 00                        dw      FGetline_Else - $
 188+ 7A04 A3 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 7A08 20 65
 189+ 7A0A ED 68 F2 68                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 7A0E 01 69                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 7A10 A3 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 7A14 20 65
 192+ 7A16 ED 68 F2 68                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 7A1A 0F 69 05 6C                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 7A1E 08 69 77 6B                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 7A22 7C 69
 195+ 7A24 08 69 47 68                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 7A28 43 69 52 68                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 7A2C 64 6A 94 68                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 7A30 52 68 CC 66                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 7A34 A3 63 24 00                  dw          LIT, 36, QERROR     //      45 ?error        ( m a n )
 199+ 7A38 BD 6D
 200+ 7A3A                                                              // else
 201+ 7A3A EF 63                        dw      BRANCH
 202+ 7A3C 0C 00                        dw      FGetline_Endif - $
 203+ 7A3E              FGetline_Else:
 204+ 7A3E 52 68                        dw          R_TO                //      r>              ( m d a fh )
 205+ 7A40 43 69 3D 69                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 7A44 ED 68 64 6A                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 7A48              FGetline_Endif:                                 // endif
 208+ 7A48 47 68 08 69                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 7A4C 08 69
 209+ 7A4E A3 68 01 69                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 7A52 5D 68 82 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 7A56 50 69 8A 68                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 7A5A 64 6A 01 69                  dw      ZERO, SWAP              // 0 swap
 213+ 7A5E BD 68 7C 69                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 7A62 5D 68 8A 68                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 7A66 AA 68
 215+ 7A68 01 69 5D 68                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 7A6C C8 6B
 216+ 7A6E 7B 70                        dw      BLANK                   // blank
 217+ 7A70 52 68                        dw      R_TO                    // r>                   ( n )
 218+ 7A72 3D 68                        dw      EXIT                    // ;
 219+ 7A74
 220+ 7A74              //  ______________________________________________________________________
 221+ 7A74              //
 222+ 7A74              // f_include    fh --
 223+ 7A74              // Given a filehandle includes the source from file
 224+ 7A74                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 7A74             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 7A74             >
 224+ 7A74             >Dict_Ptr        defl    $
 224+ 7A74             >
 224+ 7A74             >//              ______________________________________________________________________
 224+ 7A74             >//              Heap part
 224+ 7A74             >
 224+ 7A74             >
 224+ 7A74             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EB0E             >
 224+ EB0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EB0E             >Latest_Definition defl  Heap_Ptr
 224+ EB0E             >
 224+ EB0E             >                // dummy db directives used to calculate length of namec
 224+ EB0E 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EB12 43 4C 55 44 >
 224+ EB16 45          >
 224+ EB17             >len_NFA         defl    $ - temp_NFA
 224+ EB17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EB0E             >
 224+ EB0E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EB0F 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EB13 43 4C 55 44 >
 224+ EB17 45          >
 224+ EB18             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB17 C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB18             >
 224+ EB18 00 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB1A             >Prev_Ptr        defl    Heap_Ptr
 224+ EB1A             >
 224+ EB1A             >mirror_Ptr      defl    $
 224+ EB1A             >
 224+ EB1A 76 7A       >                dw      Dict_Ptr + 2        // xt
 224+ EB1C             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB1C             >
 224+ EB1C             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB1C             >
 224+ EB1C             >//              ______________________________________________________________________
 224+ EB1C             >//              Dictionary part
 224+ EB1C             >
 224+ EB1C             >                org     Dict_Ptr
 224+ 7A74             >
 224+ 7A74 1A 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 7A76             >
 224+ 7A76             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 7A76 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 7A79             >
 224+ 7A79             >
 224+ 7A79             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 7A79             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 7A79             >
 224+ 7A79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 7A79 05 6B 72 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 7A7D 47 68
 226+ 7A7F 0B 6B 72 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 7A83 47 68
 227+ 7A85 71 6B 72 69                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 7A89 47 68
 228+ 7A8B 5D 68                        dw      R_OP                    // r
 229+ 7A8D 7C 68                        dw      ZGREATER                // 0>  (filehandle)
 230+ 7A8F                                                              // if
 231+ 7A8F F3 63                        dw      ZBRANCH
 232+ 7A91 20 00                        dw      FInclude_Else_1 - $
 233+ 7A93 5D 68 04 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 234+ 7A97 A3 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 234+ 7A9B BD 6D
 235+ 7A9D 0B 6B 72 69                  dw          TO_IN, FETCH        //      >in @ 2-
 236+ 7AA1 C5 68                        dw          TWO_MINUS
 237+ 7AA3 77 6B 72 69                  dw          SPAN, FETCH         //      span @ -
 238+ 7AA7 C8 6B                        dw          SUBTRACT
 239+ 7AA9 BD 6B 94 68                  dw          S_TO_D, DPLUS       //      s>d d+
 240+ 7AAD                                                              // else
 241+ 7AAD EF 63                        dw      BRANCH
 242+ 7AAF 06 00                        dw      FInclude_Endif_1 - $
 243+ 7AB1              FInclude_Else_1:
 244+ 7AB1 64 6A 64 6A                  dw          ZERO, ZERO          //      0 0
 245+ 7AB5                                                              // endif
 246+ 7AB5              FInclude_Endif_1:
 247+ 7AB5 47 68 47 68                  dw      TO_R, TO_R              // >r >r
 248+ 7AB9 71 6B 7C 69                  dw      SOURCE_ID, STORE        // source-id !
 249+ 7ABD              FInclude_Begin:                                 // begin
 250+ 7ABD 6B 6A 62 79                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 250+ 7AC1 95 6A
 251+ 7AC3 50 69 7B 70                  dw          TWO_DUP, BLANK      //      2dup blank
 252+ 7AC7 01 69 A3 68                  dw          SWAP, ONE_PLUS      //      swap 1+
 253+ 7ACB 01 69 BD 68                  dw          SWAP, CELL_MINUS    //      swap cell-
 254+ 7ACF 71 6B 72 69                  dw          SOURCE_ID, FETCH    //      source-id @
 255+ 7AD3 DD 79                        dw          F_GETLINE           //      f_getline
 256+ 7AD5                                                              // while
 257+ 7AD5 F3 63                        dw      ZBRANCH
 258+ 7AD7 14 00                        dw      FInclude_Repeat - $
 259+ 7AD9 6B 6A 05 6B                  dw          ONE, BLK, STORE     //      1 blk !
 259+ 7ADD 7C 69
 260+ 7ADF 64 6A 0B 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
 260+ 7AE3 7C 69
 261+ 7AE5 AD 74                        dw          INTERPRET           //      interpret
 262+ 7AE7 EF 63                        dw      BRANCH
 263+ 7AE9 D4 FF                        dw      FInclude_Begin - $
 264+ 7AEB              FInclude_Repeat:                                // repeat
 265+ 7AEB                              //  close current file
 266+ 7AEB 71 6B 72 69                  dw      SOURCE_ID, FETCH        // source-id @
 267+ 7AEF EA 66                        dw      F_CLOSE                 // f_close
 268+ 7AF1 A3 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 268+ 7AF5 BD 6D
 269+ 7AF7
 270+ 7AF7 52 68 52 68                  dw      R_TO, R_TO, R_TO        // r> r> r>
 270+ 7AFB 52 68
 271+ 7AFD 08 69 71 6B                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 271+ 7B01 7C 69
 272+ 7B03 7C 68                        dw      ZGREATER                // 0>
 273+ 7B05                                                              // if
 274+ 7B05 F3 63                        dw      ZBRANCH
 275+ 7B07 12 00                        dw      FInclude_Else_2 - $
 276+ 7B09 71 6B 72 69                  dw          SOURCE_ID, FETCH    //      source-id @
 277+ 7B0D CC 66                        dw          F_SEEK              //      f_seek
 278+ 7B0F A3 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 278+ 7B13 BD 6D
 279+ 7B15                                                              // else
 280+ 7B15 EF 63                        dw      BRANCH
 281+ 7B17 04 00                        dw      FInclude_Endif_2 - $
 282+ 7B19              FInclude_Else_2:
 283+ 7B19 3D 69                        dw          TWO_DROP            //      2drop
 284+ 7B1B              FInclude_Endif_2:                               // endif
 285+ 7B1B 52 68 0B 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 285+ 7B1F 7C 69
 286+ 7B21 52 68 05 6B                  dw      R_TO, BLK, STORE        // r> blk !
 286+ 7B25 7C 69
 287+ 7B27 3D 68                        dw      EXIT                    // ;
 288+ 7B29
 289+ 7B29              //  ______________________________________________________________________
 290+ 7B29              //
 291+ 7B29              // open<         -- fh
 292+ 7B29              // Open the following filename and return it file-handle
 293+ 7B29              // Used in the form OPEN CCCC
 294+ 7B29                              Colon_Def OPEN_FH, "OPEN<", is_normal
 294+ 7B29             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 294+ 7B29             >
 294+ 7B29             >Dict_Ptr        defl    $
 294+ 7B29             >
 294+ 7B29             >//              ______________________________________________________________________
 294+ 7B29             >//              Heap part
 294+ 7B29             >
 294+ 7B29             >
 294+ 7B29             >                org     (Heap_Ptr & $1FFF) + $E000
 294+ EB1C             >
 294+ EB1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ EB1C             >Latest_Definition defl  Heap_Ptr
 294+ EB1C             >
 294+ EB1C             >                // dummy db directives used to calculate length of namec
 294+ EB1C 4F 50 45 4E >                db      "OPEN<"
 294+ EB20 3C          >
 294+ EB21             >len_NFA         defl    $ - temp_NFA
 294+ EB21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ EB1C             >
 294+ EB1C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ EB1D 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 294+ EB21 3C          >
 294+ EB22             >                org     $-1                 // alter last byte of Name just above to set
 294+ EB21 BC          >                db      {b $} | END_BIT     // msb as name end
 294+ EB22             >
 294+ EB22 0E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 294+ EB24             >Prev_Ptr        defl    Heap_Ptr
 294+ EB24             >
 294+ EB24             >mirror_Ptr      defl    $
 294+ EB24             >
 294+ EB24 2B 7B       >                dw      Dict_Ptr + 2        // xt
 294+ EB26             >Heap_Ptr        defl    $ - $E000           // save current HP
 294+ EB26             >
 294+ EB26             >Current_HP      defl  $ - $E000             // used to set HP once!
 294+ EB26             >
 294+ EB26             >//              ______________________________________________________________________
 294+ EB26             >//              Dictionary part
 294+ EB26             >
 294+ EB26             >                org     Dict_Ptr
 294+ 7B29             >
 294+ 7B29 24 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 294+ 7B2B             >
 294+ 7B2B             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 7B2B CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 7B2E             >
 294+ 7B2E             >
 294+ 7B2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 7B2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 7B2E             >
 294+ 7B2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 7B2E 87 6A                        dw      BL
 296+ 7B30 A8 70 02 6F                  dw      WORD, COUNT, OVER       // bl word count over
 296+ 7B34 E4 68
 297+ 7B36 8A 68 64 6A                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 297+ 7B3A 01 69 7C 69
 298+ 7B3E 99 70 6B 6A                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 298+ 7B42 4C 67
 299+ 7B44 A3 63 2B 00                  dw      LIT, 43                 // 43
 300+ 7B48 BD 6D                        dw      QERROR                  // ?error
 301+ 7B4A 3D 68                        dw      EXIT                    // ;
 302+ 7B4C
 303+ 7B4C              //  ______________________________________________________________________
 304+ 7B4C              //
 305+ 7B4C              // use          -- cccc
 306+ 7B4C              // Include the following filename
 307+ 7B4C              //              Colon_Def USE, "USE", is_normal
 308+ 7B4C              //              dw      OPEN_FH                 // open<
 309+ 7B4C              //              dw      BLK_FH, FETCH           // blk-fh @
 310+ 7B4C              //              dw      F_CLOSE, DROP           // f_close drop
 311+ 7B4C              //              dw      BLK_FH, STORE           // blk-fh !
 312+ 7B4C              //              dw      EXIT                    // ;
 313+ 7B4C
 314+ 7B4C              //  ______________________________________________________________________
 315+ 7B4C              //
 316+ 7B4C              // include      -- cccc
 317+ 7B4C              // Include the following filename
 318+ 7B4C                              Colon_Def INCLUDE, "INCLUDE", is_normal
 318+ 7B4C             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 318+ 7B4C             >
 318+ 7B4C             >Dict_Ptr        defl    $
 318+ 7B4C             >
 318+ 7B4C             >//              ______________________________________________________________________
 318+ 7B4C             >//              Heap part
 318+ 7B4C             >
 318+ 7B4C             >
 318+ 7B4C             >                org     (Heap_Ptr & $1FFF) + $E000
 318+ EB26             >
 318+ EB26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ EB26             >Latest_Definition defl  Heap_Ptr
 318+ EB26             >
 318+ EB26             >                // dummy db directives used to calculate length of namec
 318+ EB26 49 4E 43 4C >                db      "INCLUDE"
 318+ EB2A 55 44 45    >
 318+ EB2D             >len_NFA         defl    $ - temp_NFA
 318+ EB2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ EB26             >
 318+ EB26 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ EB27 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 318+ EB2B 55 44 45    >
 318+ EB2E             >                org     $-1                 // alter last byte of Name just above to set
 318+ EB2D C5          >                db      {b $} | END_BIT     // msb as name end
 318+ EB2E             >
 318+ EB2E 1C 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 318+ EB30             >Prev_Ptr        defl    Heap_Ptr
 318+ EB30             >
 318+ EB30             >mirror_Ptr      defl    $
 318+ EB30             >
 318+ EB30 4E 7B       >                dw      Dict_Ptr + 2        // xt
 318+ EB32             >Heap_Ptr        defl    $ - $E000           // save current HP
 318+ EB32             >
 318+ EB32             >Current_HP      defl  $ - $E000             // used to set HP once!
 318+ EB32             >
 318+ EB32             >//              ______________________________________________________________________
 318+ EB32             >//              Dictionary part
 318+ EB32             >
 318+ EB32             >                org     Dict_Ptr
 318+ 7B4C             >
 318+ 7B4C 30 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 318+ 7B4E             >
 318+ 7B4E             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 7B4E CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 318+ 7B51             >
 318+ 7B51             >
 318+ 7B51             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 7B51             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 7B51             >
 318+ 7B51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 7B51 2B 7B                        dw      OPEN_FH                 // open<
 320+ 7B53 76 7A                        dw      F_INCLUDE               //  f_include
 321+ 7B55 3D 68                        dw      EXIT                    // ;
 322+ 7B57
 323+ 7B57              //  ______________________________________________________________________
 324+ 7B57              //
 325+ 7B57              // needs
 326+ 7B57              // check for cccc exists in vocabulary
 327+ 7B57              // if it doesn't then  INCLUDE  inc/cccc.F
 328+ 7B57
 329+ 7B57              // temp filename cccc.f as counted string zero-padded
 330+ 7B57                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 330+ 7B57             >
 330+ 7B57             >Dict_Ptr        defl    $
 330+ 7B57             >
 330+ 7B57             >//              ______________________________________________________________________
 330+ 7B57             >//              Heap part
 330+ 7B57             >
 330+ 7B57             >
 330+ 7B57             >                org     (Heap_Ptr & $1FFF) + $E000
 330+ EB32             >
 330+ EB32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ EB32             >Latest_Definition defl  Heap_Ptr
 330+ EB32             >
 330+ EB32             >                // dummy db directives used to calculate length of namec
 330+ EB32 4E 45 45 44 >                db      "NEEDS-W"
 330+ EB36 53 2D 57    >
 330+ EB39             >len_NFA         defl    $ - temp_NFA
 330+ EB39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ EB32             >
 330+ EB32 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ EB33 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 330+ EB37 53 2D 57    >
 330+ EB3A             >                org     $-1                 // alter last byte of Name just above to set
 330+ EB39 D7          >                db      {b $} | END_BIT     // msb as name end
 330+ EB3A             >
 330+ EB3A 26 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 330+ EB3C             >Prev_Ptr        defl    Heap_Ptr
 330+ EB3C             >
 330+ EB3C             >mirror_Ptr      defl    $
 330+ EB3C             >
 330+ EB3C 59 7B       >                dw      Dict_Ptr + 2        // xt
 330+ EB3E             >Heap_Ptr        defl    $ - $E000           // save current HP
 330+ EB3E             >
 330+ EB3E             >Current_HP      defl  $ - $E000             // used to set HP once!
 330+ EB3E             >
 330+ EB3E             >//              ______________________________________________________________________
 330+ EB3E             >//              Dictionary part
 330+ EB3E             >
 330+ EB3E             >                org     Dict_Ptr
 330+ 7B57             >
 330+ 7B57 3C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 330+ 7B59             >
 330+ 7B59             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 7B59 CD F1 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 330+ 7B5C             >
 330+ 7B5C             >
 330+ 7B5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 7B5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 7B5C             >
 330+ 7B5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 7B5C 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 332+ 7B7F              // temp complete path+filename
 333+ 7B7F                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 333+ 7B7F             >
 333+ 7B7F             >Dict_Ptr        defl    $
 333+ 7B7F             >
 333+ 7B7F             >//              ______________________________________________________________________
 333+ 7B7F             >//              Heap part
 333+ 7B7F             >
 333+ 7B7F             >
 333+ 7B7F             >                org     (Heap_Ptr & $1FFF) + $E000
 333+ EB3E             >
 333+ EB3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 333+ EB3E             >Latest_Definition defl  Heap_Ptr
 333+ EB3E             >
 333+ EB3E             >                // dummy db directives used to calculate length of namec
 333+ EB3E 4E 45 45 44 >                db      "NEEDS-FN"
 333+ EB42 53 2D 46 4E >
 333+ EB46             >len_NFA         defl    $ - temp_NFA
 333+ EB46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 333+ EB3E             >
 333+ EB3E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 333+ EB3F 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 333+ EB43 53 2D 46 4E >
 333+ EB47             >                org     $-1                 // alter last byte of Name just above to set
 333+ EB46 CE          >                db      {b $} | END_BIT     // msb as name end
 333+ EB47             >
 333+ EB47 32 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 333+ EB49             >Prev_Ptr        defl    Heap_Ptr
 333+ EB49             >
 333+ EB49             >mirror_Ptr      defl    $
 333+ EB49             >
 333+ EB49 81 7B       >                dw      Dict_Ptr + 2        // xt
 333+ EB4B             >Heap_Ptr        defl    $ - $E000           // save current HP
 333+ EB4B             >
 333+ EB4B             >Current_HP      defl  $ - $E000             // used to set HP once!
 333+ EB4B             >
 333+ EB4B             >//              ______________________________________________________________________
 333+ EB4B             >//              Dictionary part
 333+ EB4B             >
 333+ EB4B             >                org     Dict_Ptr
 333+ 7B7F             >
 333+ 7B7F 49 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 333+ 7B81             >
 333+ 7B81             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 333+ 7B81 CD F1 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 333+ 7B84             >
 333+ 7B84             >
 333+ 7B84             >                endif           ; ok        // for other definitions it "points" the correct handler
 333+ 7B84             >                // Use of "; ok" to suppress "warning[fwdref]"
 333+ 7B84             >
 333+ 7B84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 334+ 7B84
 335+ 7B84 00 00 00...                  ds      40
 336+ 7BAC              // constant path
 337+ 7BAC                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 337+ 7BAC             >
 337+ 7BAC             >Dict_Ptr        defl    $
 337+ 7BAC             >
 337+ 7BAC             >//              ______________________________________________________________________
 337+ 7BAC             >//              Heap part
 337+ 7BAC             >
 337+ 7BAC             >
 337+ 7BAC             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ EB4B             >
 337+ EB4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ EB4B             >Latest_Definition defl  Heap_Ptr
 337+ EB4B             >
 337+ EB4B             >                // dummy db directives used to calculate length of namec
 337+ EB4B 4E 45 45 44 >                db      "NEEDS-INC"
 337+ EB4F 53 2D 49 4E >
 337+ EB53 43          >
 337+ EB54             >len_NFA         defl    $ - temp_NFA
 337+ EB54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ EB4B             >
 337+ EB4B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ EB4C 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 337+ EB50 53 2D 49 4E >
 337+ EB54 43          >
 337+ EB55             >                org     $-1                 // alter last byte of Name just above to set
 337+ EB54 C3          >                db      {b $} | END_BIT     // msb as name end
 337+ EB55             >
 337+ EB55 3E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ EB57             >Prev_Ptr        defl    Heap_Ptr
 337+ EB57             >
 337+ EB57             >mirror_Ptr      defl    $
 337+ EB57             >
 337+ EB57 AE 7B       >                dw      Dict_Ptr + 2        // xt
 337+ EB59             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ EB59             >
 337+ EB59             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ EB59             >
 337+ EB59             >//              ______________________________________________________________________
 337+ EB59             >//              Dictionary part
 337+ EB59             >
 337+ EB59             >                org     Dict_Ptr
 337+ 7BAC             >
 337+ 7BAC 57 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 7BAE             >
 337+ 7BAE             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 7BAE CD F1 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 337+ 7BB1             >
 337+ 7BB1             >
 337+ 7BB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 7BB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 7BB1             >
 337+ 7BB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 7BB1 04 69 6E 63                  db      4, "inc/", 0
 338+ 7BB5 2F 00
 339+ 7BB7                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 339+ 7BB7             >
 339+ 7BB7             >Dict_Ptr        defl    $
 339+ 7BB7             >
 339+ 7BB7             >//              ______________________________________________________________________
 339+ 7BB7             >//              Heap part
 339+ 7BB7             >
 339+ 7BB7             >
 339+ 7BB7             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ EB59             >
 339+ EB59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ EB59             >Latest_Definition defl  Heap_Ptr
 339+ EB59             >
 339+ EB59             >                // dummy db directives used to calculate length of namec
 339+ EB59 4E 45 45 44 >                db      "NEEDS-LIB"
 339+ EB5D 53 2D 4C 49 >
 339+ EB61 42          >
 339+ EB62             >len_NFA         defl    $ - temp_NFA
 339+ EB62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ EB59             >
 339+ EB59 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ EB5A 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 339+ EB5E 53 2D 4C 49 >
 339+ EB62 42          >
 339+ EB63             >                org     $-1                 // alter last byte of Name just above to set
 339+ EB62 C2          >                db      {b $} | END_BIT     // msb as name end
 339+ EB63             >
 339+ EB63 4B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ EB65             >Prev_Ptr        defl    Heap_Ptr
 339+ EB65             >
 339+ EB65             >mirror_Ptr      defl    $
 339+ EB65             >
 339+ EB65 B9 7B       >                dw      Dict_Ptr + 2        // xt
 339+ EB67             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ EB67             >
 339+ EB67             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ EB67             >
 339+ EB67             >//              ______________________________________________________________________
 339+ EB67             >//              Dictionary part
 339+ EB67             >
 339+ EB67             >                org     Dict_Ptr
 339+ 7BB7             >
 339+ 7BB7 65 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 7BB9             >
 339+ 7BB9             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 7BB9 CD F1 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 339+ 7BBC             >
 339+ 7BBC             >
 339+ 7BBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 7BBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 7BBC             >
 339+ 7BBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 7BBC 04 6C 69 62                  db      4, "lib/", 0
 340+ 7BC0 2F 00
 341+ 7BC2
 342+ 7BC2              // Concatenate path at a and filename and include it
 343+ 7BC2              // No error is issued if filename doesn't exist.
 344+ 7BC2                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 344+ 7BC2             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 344+ 7BC2             >
 344+ 7BC2             >Dict_Ptr        defl    $
 344+ 7BC2             >
 344+ 7BC2             >//              ______________________________________________________________________
 344+ 7BC2             >//              Heap part
 344+ 7BC2             >
 344+ 7BC2             >
 344+ 7BC2             >                org     (Heap_Ptr & $1FFF) + $E000
 344+ EB67             >
 344+ EB67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ EB67             >Latest_Definition defl  Heap_Ptr
 344+ EB67             >
 344+ EB67             >                // dummy db directives used to calculate length of namec
 344+ EB67 4E 45 45 44 >                db      "NEEDS/"
 344+ EB6B 53 2F       >
 344+ EB6D             >len_NFA         defl    $ - temp_NFA
 344+ EB6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ EB67             >
 344+ EB67 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ EB68 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 344+ EB6C 53 2F       >
 344+ EB6E             >                org     $-1                 // alter last byte of Name just above to set
 344+ EB6D AF          >                db      {b $} | END_BIT     // msb as name end
 344+ EB6E             >
 344+ EB6E 59 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 344+ EB70             >Prev_Ptr        defl    Heap_Ptr
 344+ EB70             >
 344+ EB70             >mirror_Ptr      defl    $
 344+ EB70             >
 344+ EB70 C4 7B       >                dw      Dict_Ptr + 2        // xt
 344+ EB72             >Heap_Ptr        defl    $ - $E000           // save current HP
 344+ EB72             >
 344+ EB72             >Current_HP      defl  $ - $E000             // used to set HP once!
 344+ EB72             >
 344+ EB72             >//              ______________________________________________________________________
 344+ EB72             >//              Dictionary part
 344+ EB72             >
 344+ EB72             >                org     Dict_Ptr
 344+ 7BC2             >
 344+ 7BC2 70 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 344+ 7BC4             >
 344+ 7BC4             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 7BC4 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 7BC7             >
 344+ 7BC7             >
 344+ 7BC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 7BC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 7BC7             >
 344+ 7BC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 7BC7 02 6F F8 68                  dw      COUNT, TUCK             // n a n
 346+ 7BCB 81 7B 01 69                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 346+ 7BCF 82 67
 347+ 7BD1 81 7B 8A 68                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 348+ 7BD5 59 7B A3 68                  dw      NEEDS_W, ONE_PLUS, SWAP
 348+ 7BD9 01 69
 349+ 7BDB A3 63 23 00                  dw      LIT, 35
 350+ 7BDF 82 67                        dw      CMOVE
 351+ 7BE1 81 7B                        dw      NEEDS_FN
 352+ 7BE3 99 70 6B 6A                  dw      PAD, ONE, F_OPEN
 352+ 7BE7 4C 67
 353+ 7BE9 62 68                        dw      ZEQUAL
 354+ 7BEB F3 63                        dw      ZBRANCH
 355+ 7BED 08 00                        dw      Needs_1 - $
 356+ 7BEF 76 7A                        dw          F_INCLUDE
 357+ 7BF1 EF 63                        dw      BRANCH
 358+ 7BF3 04 00                        dw      Needs_2 - $
 359+ 7BF5              Needs_1:
 360+ 7BF5              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 361+ 7BF5              //              dw          LIT, 43, MESSAGE
 362+ 7BF5 ED 68                        dw          DROP
 363+ 7BF7              Needs_2:
 364+ 7BF7 3D 68                        dw      EXIT                    // ;
 365+ 7BF9
 366+ 7BF9              NDOM_PTR:
 367+ 7BF9              //              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 368+ 7BF9              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 369+ 7BF9 3A 3F 2F 2A                  db ':?/*|\<>"'
 369+ 7BFD 7C 5C 3C 3E
 369+ 7C01 22
 370+ 7C02              //              db 0
 371+ 7C02
 372+ 7C02              NCDM_PTR:
 373+ 7C02              //              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 374+ 7C02              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 375+ 7C02 5F 5E 25 26                  db '_^%&$_{}~'
 375+ 7C06 24 5F 7B 7D
 375+ 7C0A 7E
 376+ 7C0B              //              db 0
 377+ 7C0B
 378+ 7C0B              // Replace illegal character in filename using the map here above
 379+ 7C0B              // at the moment we need only  "
 380+ 7C0B                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 380+ 7C0B             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 380+ 7C0B             >
 380+ 7C0B             >Dict_Ptr        defl    $
 380+ 7C0B             >
 380+ 7C0B             >//              ______________________________________________________________________
 380+ 7C0B             >//              Heap part
 380+ 7C0B             >
 380+ 7C0B             >
 380+ 7C0B             >                org     (Heap_Ptr & $1FFF) + $E000
 380+ EB72             >
 380+ EB72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ EB72             >Latest_Definition defl  Heap_Ptr
 380+ EB72             >
 380+ EB72             >                // dummy db directives used to calculate length of namec
 380+ EB72 4D 41 50 2D >                db      "MAP-FN"
 380+ EB76 46 4E       >
 380+ EB78             >len_NFA         defl    $ - temp_NFA
 380+ EB78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ EB72             >
 380+ EB72 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ EB73 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 380+ EB77 46 4E       >
 380+ EB79             >                org     $-1                 // alter last byte of Name just above to set
 380+ EB78 CE          >                db      {b $} | END_BIT     // msb as name end
 380+ EB79             >
 380+ EB79 67 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 380+ EB7B             >Prev_Ptr        defl    Heap_Ptr
 380+ EB7B             >
 380+ EB7B             >mirror_Ptr      defl    $
 380+ EB7B             >
 380+ EB7B 0D 7C       >                dw      Dict_Ptr + 2        // xt
 380+ EB7D             >Heap_Ptr        defl    $ - $E000           // save current HP
 380+ EB7D             >
 380+ EB7D             >Current_HP      defl  $ - $E000             // used to set HP once!
 380+ EB7D             >
 380+ EB7D             >//              ______________________________________________________________________
 380+ EB7D             >//              Dictionary part
 380+ EB7D             >
 380+ EB7D             >                org     Dict_Ptr
 380+ 7C0B             >
 380+ 7C0B 7B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 380+ 7C0D             >
 380+ 7C0D             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 7C0D CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 7C10             >
 380+ 7C10             >
 380+ 7C10             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 7C10             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 7C10             >
 380+ 7C10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 7C10 02 6F 0F 6F                  dw      COUNT, BOUNDS
 382+ 7C14 2C 64                        dw      C_DO
 383+ 7C16              Needs_3:
 384+ 7C16              //              dw          NCDM, NDOM, LIT, 10
 385+ 7C16 A3 63 02 7C                  dw          LIT, NCDM_PTR           //
 386+ 7C1A A3 63 F9 7B                  dw          LIT, NDOM_PTR           //
 387+ 7C1E A3 63 09 00                  dw          LIT, 9
 388+ 7C22 32 64 87 69                  dw          I, CFETCH
 389+ 7C26 4E 65                        dw          C_MAP
 390+ 7C28 32 64 90 69                  dw          I, CSTORE
 391+ 7C2C              Needs_4:
 392+ 7C2C E7 63                        dw      C_LOOP
 393+ 7C2E E8 FF                        dw      Needs_3 - $
 394+ 7C30 3D 68                        dw      EXIT
 395+ 7C32
 396+ 7C32
 397+ 7C32              // include  "path/cccc.f" if cccc is not defined
 398+ 7C32              // filename cccc.f is temporary stored at NEEDS-W
 399+ 7C32                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 399+ 7C32             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 399+ 7C32             >
 399+ 7C32             >Dict_Ptr        defl    $
 399+ 7C32             >
 399+ 7C32             >//              ______________________________________________________________________
 399+ 7C32             >//              Heap part
 399+ 7C32             >
 399+ 7C32             >
 399+ 7C32             >                org     (Heap_Ptr & $1FFF) + $E000
 399+ EB7D             >
 399+ EB7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 399+ EB7D             >Latest_Definition defl  Heap_Ptr
 399+ EB7D             >
 399+ EB7D             >                // dummy db directives used to calculate length of namec
 399+ EB7D 4E 45 45 44 >                db      "NEEDS-F"
 399+ EB81 53 2D 46    >
 399+ EB84             >len_NFA         defl    $ - temp_NFA
 399+ EB84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 399+ EB7D             >
 399+ EB7D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 399+ EB7E 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 399+ EB82 53 2D 46    >
 399+ EB85             >                org     $-1                 // alter last byte of Name just above to set
 399+ EB84 C6          >                db      {b $} | END_BIT     // msb as name end
 399+ EB85             >
 399+ EB85 72 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 399+ EB87             >Prev_Ptr        defl    Heap_Ptr
 399+ EB87             >
 399+ EB87             >mirror_Ptr      defl    $
 399+ EB87             >
 399+ EB87 34 7C       >                dw      Dict_Ptr + 2        // xt
 399+ EB89             >Heap_Ptr        defl    $ - $E000           // save current HP
 399+ EB89             >
 399+ EB89             >Current_HP      defl  $ - $E000             // used to set HP once!
 399+ EB89             >
 399+ EB89             >//              ______________________________________________________________________
 399+ EB89             >//              Dictionary part
 399+ EB89             >
 399+ EB89             >                org     Dict_Ptr
 399+ 7C32             >
 399+ 7C32 87 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 399+ 7C34             >
 399+ 7C34             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 399+ 7C34 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 399+ 7C37             >
 399+ 7C37             >
 399+ 7C37             >                endif           ; ok        // for other definitions it "points" the correct handler
 399+ 7C37             >                // Use of "; ok" to suppress "warning[fwdref]"
 399+ 7C37             >
 399+ 7C37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 400+ 7C37 EA 72                        dw      LFIND
 401+ 7C39 F3 63                        dw      ZBRANCH
 402+ 7C3B 0A 00                        dw      Needs_5 - $
 403+ 7C3D
 404+ 7C3D ED 68 3D 69                  dw          DROP, TWO_DROP
 405+ 7C41 EF 63                        dw      BRANCH
 406+ 7C43 2C 00                        dw      Needs_6 - $
 407+ 7C45              Needs_5:
 408+ 7C45 59 7B                        dw          NEEDS_W
 409+ 7C47 A3 63 23 00                  dw          LIT, 35
 410+ 7C4B 70 70                        dw          ERASE                   // a
 411+ 7C4D 89 6B 87 69                  dw          HERE, CFETCH, ONE_PLUS  // a n
 411+ 7C51 A3 68
 412+ 7C53 89 6B E4 68                  dw          HERE, OVER              // a n here n
 413+ 7C57 59 7B 01 69                  dw          NEEDS_W, SWAP, CMOVE    // a n
 413+ 7C5B 82 67
 414+ 7C5D 59 7B 0D 7C                  dw          NEEDS_W, NEEDS_CHECK
 415+ 7C61 59 7B 8A 68                  dw          NEEDS_W, PLUS           // a a1+1
 416+ 7C65 A3 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 417+ 7C69 01 69 7C 69                  dw          SWAP, STORE             // a
 418+ 7C6D C4 7B                        dw          NEEDS_SLASH
 419+ 7C6F              Needs_6:
 420+ 7C6F 3D 68                        dw      EXIT
 421+ 7C71
 422+ 7C71
 423+ 7C71              // check for cccc exists in vocabulary
 424+ 7C71              // if it doesn't then  INCLUDE  inc/cccc.F
 425+ 7C71              // search in inc subdirectory
 426+ 7C71                              Colon_Def NEEDS, "NEEDS", is_normal
 426+ 7C71             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 426+ 7C71             >
 426+ 7C71             >Dict_Ptr        defl    $
 426+ 7C71             >
 426+ 7C71             >//              ______________________________________________________________________
 426+ 7C71             >//              Heap part
 426+ 7C71             >
 426+ 7C71             >
 426+ 7C71             >                org     (Heap_Ptr & $1FFF) + $E000
 426+ EB89             >
 426+ EB89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 426+ EB89             >Latest_Definition defl  Heap_Ptr
 426+ EB89             >
 426+ EB89             >                // dummy db directives used to calculate length of namec
 426+ EB89 4E 45 45 44 >                db      "NEEDS"
 426+ EB8D 53          >
 426+ EB8E             >len_NFA         defl    $ - temp_NFA
 426+ EB8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 426+ EB89             >
 426+ EB89 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 426+ EB8A 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 426+ EB8E 53          >
 426+ EB8F             >                org     $-1                 // alter last byte of Name just above to set
 426+ EB8E D3          >                db      {b $} | END_BIT     // msb as name end
 426+ EB8F             >
 426+ EB8F 7D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 426+ EB91             >Prev_Ptr        defl    Heap_Ptr
 426+ EB91             >
 426+ EB91             >mirror_Ptr      defl    $
 426+ EB91             >
 426+ EB91 73 7C       >                dw      Dict_Ptr + 2        // xt
 426+ EB93             >Heap_Ptr        defl    $ - $E000           // save current HP
 426+ EB93             >
 426+ EB93             >Current_HP      defl  $ - $E000             // used to set HP once!
 426+ EB93             >
 426+ EB93             >//              ______________________________________________________________________
 426+ EB93             >//              Dictionary part
 426+ EB93             >
 426+ EB93             >                org     Dict_Ptr
 426+ 7C71             >
 426+ 7C71 91 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 426+ 7C73             >
 426+ 7C73             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 426+ 7C73 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 426+ 7C76             >
 426+ 7C76             >
 426+ 7C76             >                endif           ; ok        // for other definitions it "points" the correct handler
 426+ 7C76             >                // Use of "; ok" to suppress "warning[fwdref]"
 426+ 7C76             >
 426+ 7C76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 427+ 7C76 0B 6B 72 69                  dw      TO_IN, FETCH
 428+ 7C7A 08 69                        dw      DUP
 429+ 7C7C AE 7B 34 7C                  dw      NEEDS_INC, NEEDS_PATH
 430+ 7C80 0B 6B 7C 69                  dw      TO_IN, STORE
 431+ 7C84 B9 7B 34 7C                  dw      NEEDS_LIB, NEEDS_PATH
 432+ 7C88 0B 6B 7C 69                  dw      TO_IN, STORE
 433+ 7C8C EA 72                        dw      LFIND
 434+ 7C8E F3 63                        dw      ZBRANCH
 435+ 7C90 08 00                        dw      Needs_10 - $
 436+ 7C92 3D 69                        dw          TWO_DROP
 437+ 7C94 EF 63                        dw      BRANCH
 438+ 7C96 10 00                        dw      Needs_11 - $
 439+ 7C98              Needs_10:
 440+ 7C98 59 7B 02 6F                  dw      NEEDS_W, COUNT, TYPE, SPACE
 440+ 7C9C 56 6F 52 6C
 441+ 7CA0 A3 63 2B 00                  dw      LIT, 43, MESSAGE
 441+ 7CA4 79 77
 442+ 7CA6              Needs_11:
 443+ 7CA6 3D 68                        dw      EXIT
 444+ 7CA8
 445+ 7CA8
 446+ 7CA8              //  ______________________________________________________________________
 447+ 7CA8              //
 448+ 7CA8              // load         n --
 449+ 7CA8                              Colon_Def LOAD, "LOAD", is_normal
 449+ 7CA8             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 449+ 7CA8             >
 449+ 7CA8             >Dict_Ptr        defl    $
 449+ 7CA8             >
 449+ 7CA8             >//              ______________________________________________________________________
 449+ 7CA8             >//              Heap part
 449+ 7CA8             >
 449+ 7CA8             >
 449+ 7CA8             >                org     (Heap_Ptr & $1FFF) + $E000
 449+ EB93             >
 449+ EB93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 449+ EB93             >Latest_Definition defl  Heap_Ptr
 449+ EB93             >
 449+ EB93             >                // dummy db directives used to calculate length of namec
 449+ EB93 4C 4F 41 44 >                db      "LOAD"
 449+ EB97             >len_NFA         defl    $ - temp_NFA
 449+ EB97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 449+ EB93             >
 449+ EB93 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 449+ EB94 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 449+ EB98             >                org     $-1                 // alter last byte of Name just above to set
 449+ EB97 C4          >                db      {b $} | END_BIT     // msb as name end
 449+ EB98             >
 449+ EB98 89 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 449+ EB9A             >Prev_Ptr        defl    Heap_Ptr
 449+ EB9A             >
 449+ EB9A             >mirror_Ptr      defl    $
 449+ EB9A             >
 449+ EB9A AA 7C       >                dw      Dict_Ptr + 2        // xt
 449+ EB9C             >Heap_Ptr        defl    $ - $E000           // save current HP
 449+ EB9C             >
 449+ EB9C             >Current_HP      defl  $ - $E000             // used to set HP once!
 449+ EB9C             >
 449+ EB9C             >//              ______________________________________________________________________
 449+ EB9C             >//              Dictionary part
 449+ EB9C             >
 449+ EB9C             >                org     Dict_Ptr
 449+ 7CA8             >
 449+ 7CA8 9A 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 449+ 7CAA             >
 449+ 7CAA             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 449+ 7CAA CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 449+ 7CAD             >
 449+ 7CAD             >
 449+ 7CAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 449+ 7CAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 449+ 7CAD             >
 449+ 7CAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 450+ 7CAD 05 6B 72 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 450+ 7CB1 47 68
 451+ 7CB3 0B 6B 72 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 451+ 7CB7 47 68
 452+ 7CB9
 453+ 7CB9 64 6A 0B 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 453+ 7CBD 7C 69
 454+ 7CBF 9C 6A 05 77                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 454+ 7CC3 05 6B 7C 69
 455+ 7CC7 AD 74                        dw      INTERPRET               // interpret
 456+ 7CC9
 457+ 7CC9 52 68 0B 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 457+ 7CCD 7C 69
 458+ 7CCF 52 68 05 6B                  dw      R_TO, BLK, STORE        // r> blk !
 458+ 7CD3 7C 69
 459+ 7CD5 3D 68                        dw      EXIT                    // ;
 460+ 7CD7
 461+ 7CD7              //  ______________________________________________________________________
 462+ 7CD7              //
 463+ 7CD7              // -->          --
 464+ 7CD7                              Colon_Def LOAD_NEXT, "-->", is_immediate
 464+ 7CD7             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 464+ 7CD7             >
 464+ 7CD7             >Dict_Ptr        defl    $
 464+ 7CD7             >
 464+ 7CD7             >//              ______________________________________________________________________
 464+ 7CD7             >//              Heap part
 464+ 7CD7             >
 464+ 7CD7             >
 464+ 7CD7             >                org     (Heap_Ptr & $1FFF) + $E000
 464+ EB9C             >
 464+ EB9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 464+ EB9C             >Latest_Definition defl  Heap_Ptr
 464+ EB9C             >
 464+ EB9C             >                // dummy db directives used to calculate length of namec
 464+ EB9C 2D 2D 3E    >                db      "-->"
 464+ EB9F             >len_NFA         defl    $ - temp_NFA
 464+ EB9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 464+ EB9C             >
 464+ EB9C C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 464+ EB9D 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 464+ EBA0             >                org     $-1                 // alter last byte of Name just above to set
 464+ EB9F BE          >                db      {b $} | END_BIT     // msb as name end
 464+ EBA0             >
 464+ EBA0 93 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 464+ EBA2             >Prev_Ptr        defl    Heap_Ptr
 464+ EBA2             >
 464+ EBA2             >mirror_Ptr      defl    $
 464+ EBA2             >
 464+ EBA2 D9 7C       >                dw      Dict_Ptr + 2        // xt
 464+ EBA4             >Heap_Ptr        defl    $ - $E000           // save current HP
 464+ EBA4             >
 464+ EBA4             >Current_HP      defl  $ - $E000             // used to set HP once!
 464+ EBA4             >
 464+ EBA4             >//              ______________________________________________________________________
 464+ EBA4             >//              Dictionary part
 464+ EBA4             >
 464+ EBA4             >                org     Dict_Ptr
 464+ 7CD7             >
 464+ 7CD7 A2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 464+ 7CD9             >
 464+ 7CD9             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 464+ 7CD9 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 464+ 7CDC             >
 464+ 7CDC             >
 464+ 7CDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 464+ 7CDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 464+ 7CDC             >
 464+ 7CDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 465+ 7CDC 1A 6E                        dw      QLOADING                // ?loading
 466+ 7CDE 64 6A 0B 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 466+ 7CE2 7C 69
 467+ 7CE4 9C 6A                        dw      BSCR                    // b/scr
 468+ 7CE6 05 6B 72 69                  dw      BLK, FETCH              // blk @
 469+ 7CEA E4 68                        dw      OVER                    // over
 470+ 7CEC 2A 77                        dw      MOD                     // mod
 471+ 7CEE C8 6B                        dw      SUBTRACT                // -
 472+ 7CF0 05 6B 5A 69                  dw      BLK, PLUSSTORE          // +!
 473+ 7CF4 3D 68                        dw      EXIT                    // ;
 474+ 7CF6
 475+ 7CF6              //  ______________________________________________________________________
 476+ 7CF6              //
 477+ 7CF6              // '            -- xt
 478+ 7CF6                              Colon_Def TICK, "'", is_normal
 478+ 7CF6             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 478+ 7CF6             >
 478+ 7CF6             >Dict_Ptr        defl    $
 478+ 7CF6             >
 478+ 7CF6             >//              ______________________________________________________________________
 478+ 7CF6             >//              Heap part
 478+ 7CF6             >
 478+ 7CF6             >
 478+ 7CF6             >                org     (Heap_Ptr & $1FFF) + $E000
 478+ EBA4             >
 478+ EBA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ EBA4             >Latest_Definition defl  Heap_Ptr
 478+ EBA4             >
 478+ EBA4             >                // dummy db directives used to calculate length of namec
 478+ EBA4 27          >                db      "'"
 478+ EBA5             >len_NFA         defl    $ - temp_NFA
 478+ EBA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ EBA4             >
 478+ EBA4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ EBA5 27          >                db      "'"               // name string in 7-bit ascii, but
 478+ EBA6             >                org     $-1                 // alter last byte of Name just above to set
 478+ EBA5 A7          >                db      {b $} | END_BIT     // msb as name end
 478+ EBA6             >
 478+ EBA6 9C 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 478+ EBA8             >Prev_Ptr        defl    Heap_Ptr
 478+ EBA8             >
 478+ EBA8             >mirror_Ptr      defl    $
 478+ EBA8             >
 478+ EBA8 F8 7C       >                dw      Dict_Ptr + 2        // xt
 478+ EBAA             >Heap_Ptr        defl    $ - $E000           // save current HP
 478+ EBAA             >
 478+ EBAA             >Current_HP      defl  $ - $E000             // used to set HP once!
 478+ EBAA             >
 478+ EBAA             >//              ______________________________________________________________________
 478+ EBAA             >//              Dictionary part
 478+ EBAA             >
 478+ EBAA             >                org     Dict_Ptr
 478+ 7CF6             >
 478+ 7CF6 A8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 478+ 7CF8             >
 478+ 7CF8             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7CF8 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7CFB             >
 478+ 7CFB             >
 478+ 7CFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7CFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7CFB             >
 478+ 7CFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7CFB EA 72                        dw      LFIND                   // -find
 480+ 7CFD 62 68                        dw      ZEQUAL                  // 0=
 481+ 7CFF 64 6A BD 6D                  dw      ZERO, QERROR            // 0 ?error
 482+ 7D03 ED 68                        dw      DROP                    // drop
 483+ 7D05 3D 68                        dw      EXIT                    // ;
 484+ 7D07
 485+ 7D07              //  ______________________________________________________________________
 486+ 7D07              //
 487+ 7D07              // forget       -- cccc
 488+ 7D07                              Colon_Def FORGET, "FORGET", is_normal
 488+ 7D07             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 488+ 7D07             >
 488+ 7D07             >Dict_Ptr        defl    $
 488+ 7D07             >
 488+ 7D07             >//              ______________________________________________________________________
 488+ 7D07             >//              Heap part
 488+ 7D07             >
 488+ 7D07             >
 488+ 7D07             >                org     (Heap_Ptr & $1FFF) + $E000
 488+ EBAA             >
 488+ EBAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 488+ EBAA             >Latest_Definition defl  Heap_Ptr
 488+ EBAA             >
 488+ EBAA             >                // dummy db directives used to calculate length of namec
 488+ EBAA 46 4F 52 47 >                db      "FORGET"
 488+ EBAE 45 54       >
 488+ EBB0             >len_NFA         defl    $ - temp_NFA
 488+ EBB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 488+ EBAA             >
 488+ EBAA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 488+ EBAB 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 488+ EBAF 45 54       >
 488+ EBB1             >                org     $-1                 // alter last byte of Name just above to set
 488+ EBB0 D4          >                db      {b $} | END_BIT     // msb as name end
 488+ EBB1             >
 488+ EBB1 A4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 488+ EBB3             >Prev_Ptr        defl    Heap_Ptr
 488+ EBB3             >
 488+ EBB3             >mirror_Ptr      defl    $
 488+ EBB3             >
 488+ EBB3 09 7D       >                dw      Dict_Ptr + 2        // xt
 488+ EBB5             >Heap_Ptr        defl    $ - $E000           // save current HP
 488+ EBB5             >
 488+ EBB5             >Current_HP      defl  $ - $E000             // used to set HP once!
 488+ EBB5             >
 488+ EBB5             >//              ______________________________________________________________________
 488+ EBB5             >//              Dictionary part
 488+ EBB5             >
 488+ EBB5             >                org     Dict_Ptr
 488+ 7D07             >
 488+ 7D07 B3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 488+ 7D09             >
 488+ 7D09             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 488+ 7D09 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 488+ 7D0C             >
 488+ 7D0C             >
 488+ 7D0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 488+ 7D0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 488+ 7D0C             >
 488+ 7D0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 489+ 7D0C 29 6B 72 69                  dw      CURRENT, FETCH          // current @
 490+ 7D10 23 6B 72 69                  dw      CONTEXT, FETCH          // context @
 491+ 7D14 C8 6B A3 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 491+ 7D18 17 00 BD 6D
 492+ 7D1C F8 7C 3C 6D                  dw      TICK, TO_BODY           // ' >body
 493+ 7D20 08 69 DB 6A                  dw      DUP, FENCE, FETCH       // dup fence @
 493+ 7D24 72 69
 494+ 7D26 DF 6B A3 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 494+ 7D2A 15 00 BD 6D
 495+ 7D2E 08 69 71 6D                  dw      DUP, NFA                // dup nfa
 496+ 7D32
 497+ 7D32                          //  dw      DUP
 498+ 7D32                          //  dw      LIT, $E000, LESS
 499+ 7D32                          //  dw      MMU7_FETCH, ONE, EQUALS
 500+ 7D32                          //  dw      OR_OP, NOT_OP
 501+ 7D32                          //  dw      ZBRANCH
 502+ 7D32                          //  dw      Forget_then - $
 503+ 7D32
 504+ 7D32 7A 6C 9D 6C                  dw      MMU7_FETCH, FROM_FAR
 505+ 7D36 F9 6A 7C 69                  dw      HP, STORE
 506+ 7D3A 08 69 66 6D                  dw      DUP, CFA, CELL_MINUS
 506+ 7D3E BD 68
 507+ 7D40              // Forget_then:
 508+ 7D40 E1 6A 7C 69                  dw      DP, STORE               // dp !
 509+ 7D44 7C 6D 72 69                  dw      LFA, FETCH              // lfa @
 510+ 7D48 23 6B 72 69                  dw      CONTEXT, FETCH, STORE   // context @ !
 510+ 7D4C 7C 69
 511+ 7D4E 3D 68                        dw      EXIT                    // ;
 512+ 7D50
 513+ 7D50              //  ______________________________________________________________________
 514+ 7D50              //
 515+ 7D50              // marker       -- cccc
 516+ 7D50                              Colon_Def MARKER, "MARKER", is_immediate
 516+ 7D50             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 516+ 7D50             >
 516+ 7D50             >Dict_Ptr        defl    $
 516+ 7D50             >
 516+ 7D50             >//              ______________________________________________________________________
 516+ 7D50             >//              Heap part
 516+ 7D50             >
 516+ 7D50             >
 516+ 7D50             >                org     (Heap_Ptr & $1FFF) + $E000
 516+ EBB5             >
 516+ EBB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ EBB5             >Latest_Definition defl  Heap_Ptr
 516+ EBB5             >
 516+ EBB5             >                // dummy db directives used to calculate length of namec
 516+ EBB5 4D 41 52 4B >                db      "MARKER"
 516+ EBB9 45 52       >
 516+ EBBB             >len_NFA         defl    $ - temp_NFA
 516+ EBBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ EBB5             >
 516+ EBB5 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ EBB6 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 516+ EBBA 45 52       >
 516+ EBBC             >                org     $-1                 // alter last byte of Name just above to set
 516+ EBBB D2          >                db      {b $} | END_BIT     // msb as name end
 516+ EBBC             >
 516+ EBBC AA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 516+ EBBE             >Prev_Ptr        defl    Heap_Ptr
 516+ EBBE             >
 516+ EBBE             >mirror_Ptr      defl    $
 516+ EBBE             >
 516+ EBBE 52 7D       >                dw      Dict_Ptr + 2        // xt
 516+ EBC0             >Heap_Ptr        defl    $ - $E000           // save current HP
 516+ EBC0             >
 516+ EBC0             >Current_HP      defl  $ - $E000             // used to set HP once!
 516+ EBC0             >
 516+ EBC0             >//              ______________________________________________________________________
 516+ EBC0             >//              Dictionary part
 516+ EBC0             >
 516+ EBC0             >                org     Dict_Ptr
 516+ 7D50             >
 516+ 7D50 BE 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 516+ 7D52             >
 516+ 7D52             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 7D52 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 516+ 7D55             >
 516+ 7D55             >
 516+ 7D55             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 7D55             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 7D55             >
 516+ 7D55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 7D55 DC 73                        dw      CREATE
 518+ 7D57
 519+ 7D57 E7 6A 72 69                  dw      VOC_LINK, FETCH, COMMA
 519+ 7D5B 9F 6B
 520+ 7D5D 29 6B 72 69                  dw      CURRENT, FETCH, COMMA
 520+ 7D61 9F 6B
 521+ 7D63 23 6B 72 69                  dw      CONTEXT, FETCH, COMMA
 521+ 7D67 9F 6B
 522+ 7D69 29 6B 72 69                  dw      CURRENT, FETCH, FETCH,  COMMA
 522+ 7D6D 72 69 9F 6B
 523+ 7D71 2D 6D 8B 6D                  dw      LATEST, PFA, LFA, FETCH, COMMA
 523+ 7D75 7C 6D 72 69
 523+ 7D79 9F 6B
 524+ 7D7B
 525+ 7D7B D8 6E                        dw      C_DOES
 526+ 7D7D
 527+ 7D7D                        //    nop
 528+ 7D7D CD 0F 6A                     call    Enter_Ptr
 529+ 7D80
 530+ 7D80 08 69 72 69                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 530+ 7D84 E7 6A 7C 69
 530+ 7D88 B9 68
 531+ 7D8A 08 69 72 69                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 531+ 7D8E 29 6B 7C 69
 531+ 7D92 B9 68
 532+ 7D94 08 69 72 69                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 532+ 7D98 23 6B 7C 69
 532+ 7D9C B9 68
 533+ 7D9E 08 69 72 69                  dw      DUP, FETCH
 534+ 7DA2                          //  dw      DUP, QHEAPP
 535+ 7DA2                          //  dw      ZBRANCH
 536+ 7DA2                          //  dw      Marker_then - $
 537+ 7DA2 08 69 F9 6A                  dw          DUP, HP, STORE
 537+ 7DA6 7C 69
 538+ 7DA8 8B 6D 66 6D                  dw          PFA, CFA, CELL_MINUS
 538+ 7DAC BD 68
 539+ 7DAE              // Marker_then:
 540+ 7DAE E1 6A 7C 69                  dw      DP, STORE, CELL_PLUS
 540+ 7DB2 B9 68
 541+ 7DB4 72 69 29 6B                  dw      FETCH, CURRENT, FETCH, STORE
 541+ 7DB8 72 69 7C 69
 542+ 7DBC 3D 68                        dw      EXIT
 543+ 7DBE
 544+ 7DBE              //  ______________________________________________________________________
 545+ 7DBE              //
 546+ 7DBE              // spaces       n --
 547+ 7DBE                              Colon_Def SPACES, "SPACES", is_normal
 547+ 7DBE             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 547+ 7DBE             >
 547+ 7DBE             >Dict_Ptr        defl    $
 547+ 7DBE             >
 547+ 7DBE             >//              ______________________________________________________________________
 547+ 7DBE             >//              Heap part
 547+ 7DBE             >
 547+ 7DBE             >
 547+ 7DBE             >                org     (Heap_Ptr & $1FFF) + $E000
 547+ EBC0             >
 547+ EBC0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 547+ EBC0             >Latest_Definition defl  Heap_Ptr
 547+ EBC0             >
 547+ EBC0             >                // dummy db directives used to calculate length of namec
 547+ EBC0 53 50 41 43 >                db      "SPACES"
 547+ EBC4 45 53       >
 547+ EBC6             >len_NFA         defl    $ - temp_NFA
 547+ EBC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 547+ EBC0             >
 547+ EBC0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 547+ EBC1 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 547+ EBC5 45 53       >
 547+ EBC7             >                org     $-1                 // alter last byte of Name just above to set
 547+ EBC6 D3          >                db      {b $} | END_BIT     // msb as name end
 547+ EBC7             >
 547+ EBC7 B5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 547+ EBC9             >Prev_Ptr        defl    Heap_Ptr
 547+ EBC9             >
 547+ EBC9             >mirror_Ptr      defl    $
 547+ EBC9             >
 547+ EBC9 C0 7D       >                dw      Dict_Ptr + 2        // xt
 547+ EBCB             >Heap_Ptr        defl    $ - $E000           // save current HP
 547+ EBCB             >
 547+ EBCB             >Current_HP      defl  $ - $E000             // used to set HP once!
 547+ EBCB             >
 547+ EBCB             >//              ______________________________________________________________________
 547+ EBCB             >//              Dictionary part
 547+ EBCB             >
 547+ EBCB             >                org     Dict_Ptr
 547+ 7DBE             >
 547+ 7DBE C9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 547+ 7DC0             >
 547+ 7DC0             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 547+ 7DC0 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 547+ 7DC3             >
 547+ 7DC3             >
 547+ 7DC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 547+ 7DC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 547+ 7DC3             >
 547+ 7DC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 548+ 7DC3 64 6A 18 6C                  dw      ZERO, MAX
 549+ 7DC7 64 6A 06 64                  dw      ZERO, C_Q_DO
 550+ 7DCB 08 00                        dw      Spaces_Leave - $
 551+ 7DCD              Spaces_Loop:
 552+ 7DCD 52 6C                        dw          SPACE
 553+ 7DCF E7 63                        dw      C_LOOP
 554+ 7DD1 FC FF                        dw      Spaces_Loop - $
 555+ 7DD3              Spaces_Leave:
 556+ 7DD3 3D 68                        dw      EXIT                    // ;
 557+ 7DD5
 558+ 7DD5              //  ______________________________________________________________________
 559+ 7DD5              //
 560+ 7DD5              // <#           --
 561+ 7DD5                              Colon_Def BEGIN_DASH, "<#", is_normal
 561+ 7DD5             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 561+ 7DD5             >
 561+ 7DD5             >Dict_Ptr        defl    $
 561+ 7DD5             >
 561+ 7DD5             >//              ______________________________________________________________________
 561+ 7DD5             >//              Heap part
 561+ 7DD5             >
 561+ 7DD5             >
 561+ 7DD5             >                org     (Heap_Ptr & $1FFF) + $E000
 561+ EBCB             >
 561+ EBCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ EBCB             >Latest_Definition defl  Heap_Ptr
 561+ EBCB             >
 561+ EBCB             >                // dummy db directives used to calculate length of namec
 561+ EBCB 3C 23       >                db      "<#"
 561+ EBCD             >len_NFA         defl    $ - temp_NFA
 561+ EBCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ EBCB             >
 561+ EBCB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ EBCC 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 561+ EBCE             >                org     $-1                 // alter last byte of Name just above to set
 561+ EBCD A3          >                db      {b $} | END_BIT     // msb as name end
 561+ EBCE             >
 561+ EBCE C0 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 561+ EBD0             >Prev_Ptr        defl    Heap_Ptr
 561+ EBD0             >
 561+ EBD0             >mirror_Ptr      defl    $
 561+ EBD0             >
 561+ EBD0 D7 7D       >                dw      Dict_Ptr + 2        // xt
 561+ EBD2             >Heap_Ptr        defl    $ - $E000           // save current HP
 561+ EBD2             >
 561+ EBD2             >Current_HP      defl  $ - $E000             // used to set HP once!
 561+ EBD2             >
 561+ EBD2             >//              ______________________________________________________________________
 561+ EBD2             >//              Dictionary part
 561+ EBD2             >
 561+ EBD2             >                org     Dict_Ptr
 561+ 7DD5             >
 561+ 7DD5 D0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 561+ 7DD7             >
 561+ 7DD7             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 7DD7 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 7DDA             >
 561+ 7DDA             >
 561+ 7DDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 7DDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 7DDA             >
 561+ 7DDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 7DDA 99 70 53 6B                  dw      PAD, HLD, STORE
 562+ 7DDE 7C 69
 563+ 7DE0 3D 68                        dw      EXIT
 564+ 7DE2
 565+ 7DE2              //  ______________________________________________________________________
 566+ 7DE2              //
 567+ 7DE2              // #>           --
 568+ 7DE2                              Colon_Def DASH_END, "#>", is_normal
 568+ 7DE2             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 568+ 7DE2             >
 568+ 7DE2             >Dict_Ptr        defl    $
 568+ 7DE2             >
 568+ 7DE2             >//              ______________________________________________________________________
 568+ 7DE2             >//              Heap part
 568+ 7DE2             >
 568+ 7DE2             >
 568+ 7DE2             >                org     (Heap_Ptr & $1FFF) + $E000
 568+ EBD2             >
 568+ EBD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 568+ EBD2             >Latest_Definition defl  Heap_Ptr
 568+ EBD2             >
 568+ EBD2             >                // dummy db directives used to calculate length of namec
 568+ EBD2 23 3E       >                db      "#>"
 568+ EBD4             >len_NFA         defl    $ - temp_NFA
 568+ EBD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 568+ EBD2             >
 568+ EBD2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 568+ EBD3 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 568+ EBD5             >                org     $-1                 // alter last byte of Name just above to set
 568+ EBD4 BE          >                db      {b $} | END_BIT     // msb as name end
 568+ EBD5             >
 568+ EBD5 CB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 568+ EBD7             >Prev_Ptr        defl    Heap_Ptr
 568+ EBD7             >
 568+ EBD7             >mirror_Ptr      defl    $
 568+ EBD7             >
 568+ EBD7 E4 7D       >                dw      Dict_Ptr + 2        // xt
 568+ EBD9             >Heap_Ptr        defl    $ - $E000           // save current HP
 568+ EBD9             >
 568+ EBD9             >Current_HP      defl  $ - $E000             // used to set HP once!
 568+ EBD9             >
 568+ EBD9             >//              ______________________________________________________________________
 568+ EBD9             >//              Dictionary part
 568+ EBD9             >
 568+ EBD9             >                org     Dict_Ptr
 568+ 7DE2             >
 568+ 7DE2 D7 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 568+ 7DE4             >
 568+ 7DE4             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 568+ 7DE4 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 568+ 7DE7             >
 568+ 7DE7             >
 568+ 7DE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 568+ 7DE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 568+ 7DE7             >
 568+ 7DE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 569+ 7DE7 3D 69                        dw      TWO_DROP
 570+ 7DE9 53 6B 72 69                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 570+ 7DED 99 70 E4 68
 570+ 7DF1 C8 6B
 571+ 7DF3 3D 68                        dw      EXIT
 572+ 7DF5
 573+ 7DF5              //  ______________________________________________________________________
 574+ 7DF5              //
 575+ 7DF5              // sign         n d -- d
 576+ 7DF5                              Colon_Def SIGN, "SIGN", is_normal
 576+ 7DF5             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 576+ 7DF5             >
 576+ 7DF5             >Dict_Ptr        defl    $
 576+ 7DF5             >
 576+ 7DF5             >//              ______________________________________________________________________
 576+ 7DF5             >//              Heap part
 576+ 7DF5             >
 576+ 7DF5             >
 576+ 7DF5             >                org     (Heap_Ptr & $1FFF) + $E000
 576+ EBD9             >
 576+ EBD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ EBD9             >Latest_Definition defl  Heap_Ptr
 576+ EBD9             >
 576+ EBD9             >                // dummy db directives used to calculate length of namec
 576+ EBD9 53 49 47 4E >                db      "SIGN"
 576+ EBDD             >len_NFA         defl    $ - temp_NFA
 576+ EBDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ EBD9             >
 576+ EBD9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ EBDA 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 576+ EBDE             >                org     $-1                 // alter last byte of Name just above to set
 576+ EBDD CE          >                db      {b $} | END_BIT     // msb as name end
 576+ EBDE             >
 576+ EBDE D2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 576+ EBE0             >Prev_Ptr        defl    Heap_Ptr
 576+ EBE0             >
 576+ EBE0             >mirror_Ptr      defl    $
 576+ EBE0             >
 576+ EBE0 F7 7D       >                dw      Dict_Ptr + 2        // xt
 576+ EBE2             >Heap_Ptr        defl    $ - $E000           // save current HP
 576+ EBE2             >
 576+ EBE2             >Current_HP      defl  $ - $E000             // used to set HP once!
 576+ EBE2             >
 576+ EBE2             >//              ______________________________________________________________________
 576+ EBE2             >//              Dictionary part
 576+ EBE2             >
 576+ EBE2             >                org     Dict_Ptr
 576+ 7DF5             >
 576+ 7DF5 E0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 576+ 7DF7             >
 576+ 7DF7             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 7DF7 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 7DFA             >
 576+ 7DFA             >
 576+ 7DFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 7DFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 7DFA             >
 576+ 7DFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 7DFA 73 68                        dw      ZLESS
 578+ 7DFC F3 63                        dw      ZBRANCH
 579+ 7DFE 08 00                        dw      Sign_Endif - $
 580+ 7E00 A3 63 2D 00                  dw          LIT, 45, HOLD
 580+ 7E04 86 70
 581+ 7E06              Sign_Endif:
 582+ 7E06 3D 68                        dw      EXIT
 583+ 7E08
 584+ 7E08              //  ______________________________________________________________________
 585+ 7E08              //
 586+ 7E08              // #           d1 -- d2
 587+ 7E08                              Colon_Def DASH, "#", is_normal
 587+ 7E08             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 587+ 7E08             >
 587+ 7E08             >Dict_Ptr        defl    $
 587+ 7E08             >
 587+ 7E08             >//              ______________________________________________________________________
 587+ 7E08             >//              Heap part
 587+ 7E08             >
 587+ 7E08             >
 587+ 7E08             >                org     (Heap_Ptr & $1FFF) + $E000
 587+ EBE2             >
 587+ EBE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ EBE2             >Latest_Definition defl  Heap_Ptr
 587+ EBE2             >
 587+ EBE2             >                // dummy db directives used to calculate length of namec
 587+ EBE2 23          >                db      "#"
 587+ EBE3             >len_NFA         defl    $ - temp_NFA
 587+ EBE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ EBE2             >
 587+ EBE2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ EBE3 23          >                db      "#"               // name string in 7-bit ascii, but
 587+ EBE4             >                org     $-1                 // alter last byte of Name just above to set
 587+ EBE3 A3          >                db      {b $} | END_BIT     // msb as name end
 587+ EBE4             >
 587+ EBE4 D9 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 587+ EBE6             >Prev_Ptr        defl    Heap_Ptr
 587+ EBE6             >
 587+ EBE6             >mirror_Ptr      defl    $
 587+ EBE6             >
 587+ EBE6 0A 7E       >                dw      Dict_Ptr + 2        // xt
 587+ EBE8             >Heap_Ptr        defl    $ - $E000           // save current HP
 587+ EBE8             >
 587+ EBE8             >Current_HP      defl  $ - $E000             // used to set HP once!
 587+ EBE8             >
 587+ EBE8             >//              ______________________________________________________________________
 587+ EBE8             >//              Dictionary part
 587+ EBE8             >
 587+ EBE8             >                org     Dict_Ptr
 587+ 7E08             >
 587+ 7E08 E6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 587+ 7E0A             >
 587+ 7E0A             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 7E0A CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 587+ 7E0D             >
 587+ 7E0D             >
 587+ 7E0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 7E0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 7E0D             >
 587+ 7E0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 7E0D 35 6B 72 69                  dw      BASE, FETCH
 589+ 7E11
 590+ 7E11 47 68                        dw      TO_R                    // >r           ( ud1 )
 591+ 7E13 64 6A 5D 68                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 591+ 7E17 CD 67
 592+ 7E19 52 68 01 69                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 592+ 7E1D 47 68
 593+ 7E1F CD 67                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 594+ 7E21 52 68                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 595+ 7E23
 596+ 7E23 0F 69                        dw      ROT
 597+ 7E25 A3 63 09 00                  dw      LIT, 9, OVER, LESS
 597+ 7E29 E4 68 ED 6B
 598+ 7E2D F3 63                        dw      ZBRANCH
 599+ 7E2F 08 00                        dw      Dash_Endif - $
 600+ 7E31 A3 63 07 00                  dw          LIT, 7, PLUS
 600+ 7E35 8A 68
 601+ 7E37              Dash_Endif:
 602+ 7E37
 603+ 7E37 A3 63 30 00                  dw      LIT, 48, PLUS, HOLD
 603+ 7E3B 8A 68 86 70
 604+ 7E3F 3D 68                        dw      EXIT
 605+ 7E41
 606+ 7E41              //  ______________________________________________________________________
 607+ 7E41              //
 608+ 7E41              // #s           d1 -- d2
 609+ 7E41                              Colon_Def DASHES, "#S", is_normal
 609+ 7E41             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 609+ 7E41             >
 609+ 7E41             >Dict_Ptr        defl    $
 609+ 7E41             >
 609+ 7E41             >//              ______________________________________________________________________
 609+ 7E41             >//              Heap part
 609+ 7E41             >
 609+ 7E41             >
 609+ 7E41             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ EBE8             >
 609+ EBE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ EBE8             >Latest_Definition defl  Heap_Ptr
 609+ EBE8             >
 609+ EBE8             >                // dummy db directives used to calculate length of namec
 609+ EBE8 23 53       >                db      "#S"
 609+ EBEA             >len_NFA         defl    $ - temp_NFA
 609+ EBEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ EBE8             >
 609+ EBE8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ EBE9 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 609+ EBEB             >                org     $-1                 // alter last byte of Name just above to set
 609+ EBEA D3          >                db      {b $} | END_BIT     // msb as name end
 609+ EBEB             >
 609+ EBEB E2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ EBED             >Prev_Ptr        defl    Heap_Ptr
 609+ EBED             >
 609+ EBED             >mirror_Ptr      defl    $
 609+ EBED             >
 609+ EBED 43 7E       >                dw      Dict_Ptr + 2        // xt
 609+ EBEF             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ EBEF             >
 609+ EBEF             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ EBEF             >
 609+ EBEF             >//              ______________________________________________________________________
 609+ EBEF             >//              Dictionary part
 609+ EBEF             >
 609+ EBEF             >                org     Dict_Ptr
 609+ 7E41             >
 609+ 7E41 ED 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 7E43             >
 609+ 7E43             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 7E43 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 7E46             >
 609+ 7E46             >
 609+ 7E46             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 7E46             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 7E46             >
 609+ 7E46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 7E46              Dashes_Begin:
 611+ 7E46 0A 7E 50 69                  dw      DASH, TWO_DUP
 612+ 7E4A 0C 68 62 68                  dw          OR_OP, ZEQUAL
 613+ 7E4E F3 63                        dw      ZBRANCH
 614+ 7E50 F6 FF                        dw      Dashes_Begin - $
 615+ 7E52 3D 68                        dw      EXIT
 616+ 7E54
 617+ 7E54              //  ______________________________________________________________________
 618+ 7E54              //
 619+ 7E54              // d.r          d n --
 620+ 7E54                              Colon_Def D_DOT_R, "D.R", is_normal
 620+ 7E54             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 620+ 7E54             >
 620+ 7E54             >Dict_Ptr        defl    $
 620+ 7E54             >
 620+ 7E54             >//              ______________________________________________________________________
 620+ 7E54             >//              Heap part
 620+ 7E54             >
 620+ 7E54             >
 620+ 7E54             >                org     (Heap_Ptr & $1FFF) + $E000
 620+ EBEF             >
 620+ EBEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ EBEF             >Latest_Definition defl  Heap_Ptr
 620+ EBEF             >
 620+ EBEF             >                // dummy db directives used to calculate length of namec
 620+ EBEF 44 2E 52    >                db      "D.R"
 620+ EBF2             >len_NFA         defl    $ - temp_NFA
 620+ EBF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ EBEF             >
 620+ EBEF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ EBF0 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 620+ EBF3             >                org     $-1                 // alter last byte of Name just above to set
 620+ EBF2 D2          >                db      {b $} | END_BIT     // msb as name end
 620+ EBF3             >
 620+ EBF3 E8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 620+ EBF5             >Prev_Ptr        defl    Heap_Ptr
 620+ EBF5             >
 620+ EBF5             >mirror_Ptr      defl    $
 620+ EBF5             >
 620+ EBF5 56 7E       >                dw      Dict_Ptr + 2        // xt
 620+ EBF7             >Heap_Ptr        defl    $ - $E000           // save current HP
 620+ EBF7             >
 620+ EBF7             >Current_HP      defl  $ - $E000             // used to set HP once!
 620+ EBF7             >
 620+ EBF7             >//              ______________________________________________________________________
 620+ EBF7             >//              Dictionary part
 620+ EBF7             >
 620+ EBF7             >                org     Dict_Ptr
 620+ 7E54             >
 620+ 7E54 F5 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 620+ 7E56             >
 620+ 7E56             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 7E56 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 7E59             >
 620+ 7E59             >
 620+ 7E59             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 7E59             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 7E59             >
 620+ 7E59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 7E59 47 68                        dw      TO_R
 622+ 7E5B F8 68 71 76                  dw      TUCK, DABS
 623+ 7E5F D7 7D 43 7E                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 623+ 7E63 0F 69 F7 7D
 623+ 7E67 E4 7D
 624+ 7E69 52 68                        dw      R_TO
 625+ 7E6B E4 68 C8 6B                  dw      OVER, SUBTRACT, SPACES, TYPE
 625+ 7E6F C0 7D 56 6F
 626+ 7E73 3D 68                        dw      EXIT
 627+ 7E75
 628+ 7E75              //  ______________________________________________________________________
 629+ 7E75              //
 630+ 7E75              // .r           n1 n2 --
 631+ 7E75                              Colon_Def DOT_R, ".R", is_normal
 631+ 7E75             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 631+ 7E75             >
 631+ 7E75             >Dict_Ptr        defl    $
 631+ 7E75             >
 631+ 7E75             >//              ______________________________________________________________________
 631+ 7E75             >//              Heap part
 631+ 7E75             >
 631+ 7E75             >
 631+ 7E75             >                org     (Heap_Ptr & $1FFF) + $E000
 631+ EBF7             >
 631+ EBF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 631+ EBF7             >Latest_Definition defl  Heap_Ptr
 631+ EBF7             >
 631+ EBF7             >                // dummy db directives used to calculate length of namec
 631+ EBF7 2E 52       >                db      ".R"
 631+ EBF9             >len_NFA         defl    $ - temp_NFA
 631+ EBF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 631+ EBF7             >
 631+ EBF7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 631+ EBF8 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 631+ EBFA             >                org     $-1                 // alter last byte of Name just above to set
 631+ EBF9 D2          >                db      {b $} | END_BIT     // msb as name end
 631+ EBFA             >
 631+ EBFA EF 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 631+ EBFC             >Prev_Ptr        defl    Heap_Ptr
 631+ EBFC             >
 631+ EBFC             >mirror_Ptr      defl    $
 631+ EBFC             >
 631+ EBFC 77 7E       >                dw      Dict_Ptr + 2        // xt
 631+ EBFE             >Heap_Ptr        defl    $ - $E000           // save current HP
 631+ EBFE             >
 631+ EBFE             >Current_HP      defl  $ - $E000             // used to set HP once!
 631+ EBFE             >
 631+ EBFE             >//              ______________________________________________________________________
 631+ EBFE             >//              Dictionary part
 631+ EBFE             >
 631+ EBFE             >                org     Dict_Ptr
 631+ 7E75             >
 631+ 7E75 FC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 631+ 7E77             >
 631+ 7E77             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 631+ 7E77 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 631+ 7E7A             >
 631+ 7E7A             >
 631+ 7E7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 631+ 7E7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 631+ 7E7A             >
 631+ 7E7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 632+ 7E7A 47 68                        dw      TO_R
 633+ 7E7C BD 6B 52 68                  dw      S_TO_D, R_TO
 634+ 7E80 56 7E                        dw      D_DOT_R
 635+ 7E82 3D 68                        dw      EXIT
 636+ 7E84
 637+ 7E84              //  ______________________________________________________________________
 638+ 7E84              //
 639+ 7E84              // d.           d --
 640+ 7E84                              Colon_Def D_DOT, "D.", is_normal
 640+ 7E84             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 640+ 7E84             >
 640+ 7E84             >Dict_Ptr        defl    $
 640+ 7E84             >
 640+ 7E84             >//              ______________________________________________________________________
 640+ 7E84             >//              Heap part
 640+ 7E84             >
 640+ 7E84             >
 640+ 7E84             >                org     (Heap_Ptr & $1FFF) + $E000
 640+ EBFE             >
 640+ EBFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 640+ EBFE             >Latest_Definition defl  Heap_Ptr
 640+ EBFE             >
 640+ EBFE             >                // dummy db directives used to calculate length of namec
 640+ EBFE 44 2E       >                db      "D."
 640+ EC00             >len_NFA         defl    $ - temp_NFA
 640+ EC00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 640+ EBFE             >
 640+ EBFE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 640+ EBFF 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 640+ EC01             >                org     $-1                 // alter last byte of Name just above to set
 640+ EC00 AE          >                db      {b $} | END_BIT     // msb as name end
 640+ EC01             >
 640+ EC01 F7 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 640+ EC03             >Prev_Ptr        defl    Heap_Ptr
 640+ EC03             >
 640+ EC03             >mirror_Ptr      defl    $
 640+ EC03             >
 640+ EC03 86 7E       >                dw      Dict_Ptr + 2        // xt
 640+ EC05             >Heap_Ptr        defl    $ - $E000           // save current HP
 640+ EC05             >
 640+ EC05             >Current_HP      defl  $ - $E000             // used to set HP once!
 640+ EC05             >
 640+ EC05             >//              ______________________________________________________________________
 640+ EC05             >//              Dictionary part
 640+ EC05             >
 640+ EC05             >                org     Dict_Ptr
 640+ 7E84             >
 640+ 7E84 03 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 640+ 7E86             >
 640+ 7E86             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 640+ 7E86 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 640+ 7E89             >
 640+ 7E89             >
 640+ 7E89             >                endif           ; ok        // for other definitions it "points" the correct handler
 640+ 7E89             >                // Use of "; ok" to suppress "warning[fwdref]"
 640+ 7E89             >
 640+ 7E89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 641+ 7E89 64 6A 56 7E                  dw      ZERO, D_DOT_R, SPACE
 641+ 7E8D 52 6C
 642+ 7E8F 3D 68                        dw      EXIT
 643+ 7E91
 644+ 7E91              //  ______________________________________________________________________
 645+ 7E91              //
 646+ 7E91              // .            n --
 647+ 7E91                              Colon_Def DOT, ".", is_normal
 647+ 7E91             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 647+ 7E91             >
 647+ 7E91             >Dict_Ptr        defl    $
 647+ 7E91             >
 647+ 7E91             >//              ______________________________________________________________________
 647+ 7E91             >//              Heap part
 647+ 7E91             >
 647+ 7E91             >
 647+ 7E91             >                org     (Heap_Ptr & $1FFF) + $E000
 647+ EC05             >
 647+ EC05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 647+ EC05             >Latest_Definition defl  Heap_Ptr
 647+ EC05             >
 647+ EC05             >                // dummy db directives used to calculate length of namec
 647+ EC05 2E          >                db      "."
 647+ EC06             >len_NFA         defl    $ - temp_NFA
 647+ EC06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 647+ EC05             >
 647+ EC05 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 647+ EC06 2E          >                db      "."               // name string in 7-bit ascii, but
 647+ EC07             >                org     $-1                 // alter last byte of Name just above to set
 647+ EC06 AE          >                db      {b $} | END_BIT     // msb as name end
 647+ EC07             >
 647+ EC07 FE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 647+ EC09             >Prev_Ptr        defl    Heap_Ptr
 647+ EC09             >
 647+ EC09             >mirror_Ptr      defl    $
 647+ EC09             >
 647+ EC09 93 7E       >                dw      Dict_Ptr + 2        // xt
 647+ EC0B             >Heap_Ptr        defl    $ - $E000           // save current HP
 647+ EC0B             >
 647+ EC0B             >Current_HP      defl  $ - $E000             // used to set HP once!
 647+ EC0B             >
 647+ EC0B             >//              ______________________________________________________________________
 647+ EC0B             >//              Dictionary part
 647+ EC0B             >
 647+ EC0B             >                org     Dict_Ptr
 647+ 7E91             >
 647+ 7E91 09 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 647+ 7E93             >
 647+ 7E93             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 647+ 7E93 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 647+ 7E96             >
 647+ 7E96             >
 647+ 7E96             >                endif           ; ok        // for other definitions it "points" the correct handler
 647+ 7E96             >                // Use of "; ok" to suppress "warning[fwdref]"
 647+ 7E96             >
 647+ 7E96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 648+ 7E96 BD 6B 86 7E                  dw      S_TO_D, D_DOT
 649+ 7E9A 3D 68                        dw      EXIT
 650+ 7E9C
 651+ 7E9C              //  ______________________________________________________________________
 652+ 7E9C              //
 653+ 7E9C              // ?            n --
 654+ 7E9C                              Colon_Def QUESTION, "?", is_normal
 654+ 7E9C             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 654+ 7E9C             >
 654+ 7E9C             >Dict_Ptr        defl    $
 654+ 7E9C             >
 654+ 7E9C             >//              ______________________________________________________________________
 654+ 7E9C             >//              Heap part
 654+ 7E9C             >
 654+ 7E9C             >
 654+ 7E9C             >                org     (Heap_Ptr & $1FFF) + $E000
 654+ EC0B             >
 654+ EC0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 654+ EC0B             >Latest_Definition defl  Heap_Ptr
 654+ EC0B             >
 654+ EC0B             >                // dummy db directives used to calculate length of namec
 654+ EC0B 3F          >                db      "?"
 654+ EC0C             >len_NFA         defl    $ - temp_NFA
 654+ EC0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 654+ EC0B             >
 654+ EC0B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 654+ EC0C 3F          >                db      "?"               // name string in 7-bit ascii, but
 654+ EC0D             >                org     $-1                 // alter last byte of Name just above to set
 654+ EC0C BF          >                db      {b $} | END_BIT     // msb as name end
 654+ EC0D             >
 654+ EC0D 05 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 654+ EC0F             >Prev_Ptr        defl    Heap_Ptr
 654+ EC0F             >
 654+ EC0F             >mirror_Ptr      defl    $
 654+ EC0F             >
 654+ EC0F 9E 7E       >                dw      Dict_Ptr + 2        // xt
 654+ EC11             >Heap_Ptr        defl    $ - $E000           // save current HP
 654+ EC11             >
 654+ EC11             >Current_HP      defl  $ - $E000             // used to set HP once!
 654+ EC11             >
 654+ EC11             >//              ______________________________________________________________________
 654+ EC11             >//              Dictionary part
 654+ EC11             >
 654+ EC11             >                org     Dict_Ptr
 654+ 7E9C             >
 654+ 7E9C 0F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 654+ 7E9E             >
 654+ 7E9E             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 654+ 7E9E CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 654+ 7EA1             >
 654+ 7EA1             >
 654+ 7EA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 654+ 7EA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 654+ 7EA1             >
 654+ 7EA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 655+ 7EA1 72 69 93 7E                  dw      FETCH, DOT
 656+ 7EA5 3D 68                        dw      EXIT
 657+ 7EA7
 658+ 7EA7              //  ______________________________________________________________________
 659+ 7EA7              //
 660+ 7EA7              // u.           u --
 661+ 7EA7                              Colon_Def U_DOT, "U.", is_normal
 661+ 7EA7             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 661+ 7EA7             >
 661+ 7EA7             >Dict_Ptr        defl    $
 661+ 7EA7             >
 661+ 7EA7             >//              ______________________________________________________________________
 661+ 7EA7             >//              Heap part
 661+ 7EA7             >
 661+ 7EA7             >
 661+ 7EA7             >                org     (Heap_Ptr & $1FFF) + $E000
 661+ EC11             >
 661+ EC11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 661+ EC11             >Latest_Definition defl  Heap_Ptr
 661+ EC11             >
 661+ EC11             >                // dummy db directives used to calculate length of namec
 661+ EC11 55 2E       >                db      "U."
 661+ EC13             >len_NFA         defl    $ - temp_NFA
 661+ EC13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 661+ EC11             >
 661+ EC11 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 661+ EC12 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 661+ EC14             >                org     $-1                 // alter last byte of Name just above to set
 661+ EC13 AE          >                db      {b $} | END_BIT     // msb as name end
 661+ EC14             >
 661+ EC14 0B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 661+ EC16             >Prev_Ptr        defl    Heap_Ptr
 661+ EC16             >
 661+ EC16             >mirror_Ptr      defl    $
 661+ EC16             >
 661+ EC16 A9 7E       >                dw      Dict_Ptr + 2        // xt
 661+ EC18             >Heap_Ptr        defl    $ - $E000           // save current HP
 661+ EC18             >
 661+ EC18             >Current_HP      defl  $ - $E000             // used to set HP once!
 661+ EC18             >
 661+ EC18             >//              ______________________________________________________________________
 661+ EC18             >//              Dictionary part
 661+ EC18             >
 661+ EC18             >                org     Dict_Ptr
 661+ 7EA7             >
 661+ 7EA7 16 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 661+ 7EA9             >
 661+ 7EA9             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 661+ 7EA9 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 661+ 7EAC             >
 661+ 7EAC             >
 661+ 7EAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 661+ 7EAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 661+ 7EAC             >
 661+ 7EAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 662+ 7EAC 64 6A 86 7E                  dw      ZERO, D_DOT
 663+ 7EB0 3D 68                        dw      EXIT
 664+ 7EB2
 665+ 7EB2              //  ______________________________________________________________________
 666+ 7EB2              //
 667+ 7EB2              // words        --
 668+ 7EB2                              Colon_Def WORDS, "WORDS", is_normal
 668+ 7EB2             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 668+ 7EB2             >
 668+ 7EB2             >Dict_Ptr        defl    $
 668+ 7EB2             >
 668+ 7EB2             >//              ______________________________________________________________________
 668+ 7EB2             >//              Heap part
 668+ 7EB2             >
 668+ 7EB2             >
 668+ 7EB2             >                org     (Heap_Ptr & $1FFF) + $E000
 668+ EC18             >
 668+ EC18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 668+ EC18             >Latest_Definition defl  Heap_Ptr
 668+ EC18             >
 668+ EC18             >                // dummy db directives used to calculate length of namec
 668+ EC18 57 4F 52 44 >                db      "WORDS"
 668+ EC1C 53          >
 668+ EC1D             >len_NFA         defl    $ - temp_NFA
 668+ EC1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 668+ EC18             >
 668+ EC18 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 668+ EC19 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 668+ EC1D 53          >
 668+ EC1E             >                org     $-1                 // alter last byte of Name just above to set
 668+ EC1D D3          >                db      {b $} | END_BIT     // msb as name end
 668+ EC1E             >
 668+ EC1E 11 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 668+ EC20             >Prev_Ptr        defl    Heap_Ptr
 668+ EC20             >
 668+ EC20             >mirror_Ptr      defl    $
 668+ EC20             >
 668+ EC20 B4 7E       >                dw      Dict_Ptr + 2        // xt
 668+ EC22             >Heap_Ptr        defl    $ - $E000           // save current HP
 668+ EC22             >
 668+ EC22             >Current_HP      defl  $ - $E000             // used to set HP once!
 668+ EC22             >
 668+ EC22             >//              ______________________________________________________________________
 668+ EC22             >//              Dictionary part
 668+ EC22             >
 668+ EC22             >                org     Dict_Ptr
 668+ 7EB2             >
 668+ 7EB2 20 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 668+ 7EB4             >
 668+ 7EB4             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 668+ 7EB4 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 668+ 7EB7             >
 668+ 7EB7             >
 668+ 7EB7             >                endif           ; ok        // for other definitions it "points" the correct handler
 668+ 7EB7             >                // Use of "; ok" to suppress "warning[fwdref]"
 668+ 7EB7             >
 668+ 7EB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 669+ 7EB7 A3 63 80 00                  dw      LIT, 128, OUT, STORE
 669+ 7EBB 11 6B 7C 69
 670+ 7EBF 23 6B 72 69                  dw      CONTEXT, FETCH, FETCH
 670+ 7EC3 72 69
 671+ 7EC5              Words_Begin:
 672+ 7EC5 C3 6C                        dw          FAR // Q TO HEAP
 673+ 7EC7 08 69 87 69                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 673+ 7ECB A3 63 1F 00
 673+ 7ECF FD 67
 674+ 7ED1 11 6B 72 69                  dw          OUT, FETCH, PLUS
 674+ 7ED5 8A 68
 675+ 7ED7 8E 6A ED 6B                  dw          CL, LESS, ZEQUAL
 675+ 7EDB 62 68
 676+ 7EDD F3 63                        dw          ZBRANCH
 677+ 7EDF 0A 00                        dw          Words_Endif - $
 678+ 7EE1 A5 65 64 6A                  dw              CR, ZERO, OUT, STORE
 678+ 7EE5 11 6B 7C 69
 679+ 7EE9              Words_Endif:
 680+ 7EE9 08 69 38 73                  dw          DUP, ID_DOT
 681+ 7EED 6B 6A 5D 6C                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 681+ 7EF1 A3 68 72 69
 682+ 7EF5 08 69 62 68                  dw          DUP, ZEQUAL
 683+ 7EF9 9C 66 0C 68                  dw          QTERMINAL, OR_OP
 684+ 7EFD F3 63                        dw      ZBRANCH
 685+ 7EFF C6 FF                        dw      Words_Begin - $
 686+ 7F01 ED 68                        dw      DROP
 687+ 7F03 3D 68                        dw      EXIT
 688+ 7F05
 689+ 7F05              //  ______________________________________________________________________
 690+ 7F05              //
 691+ 7F05              // list         n --
 692+ 7F05                              Colon_Def LIST, "LIST", is_normal
 692+ 7F05             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 692+ 7F05             >
 692+ 7F05             >Dict_Ptr        defl    $
 692+ 7F05             >
 692+ 7F05             >//              ______________________________________________________________________
 692+ 7F05             >//              Heap part
 692+ 7F05             >
 692+ 7F05             >
 692+ 7F05             >                org     (Heap_Ptr & $1FFF) + $E000
 692+ EC22             >
 692+ EC22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 692+ EC22             >Latest_Definition defl  Heap_Ptr
 692+ EC22             >
 692+ EC22             >                // dummy db directives used to calculate length of namec
 692+ EC22 4C 49 53 54 >                db      "LIST"
 692+ EC26             >len_NFA         defl    $ - temp_NFA
 692+ EC26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 692+ EC22             >
 692+ EC22 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 692+ EC23 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 692+ EC27             >                org     $-1                 // alter last byte of Name just above to set
 692+ EC26 D4          >                db      {b $} | END_BIT     // msb as name end
 692+ EC27             >
 692+ EC27 18 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 692+ EC29             >Prev_Ptr        defl    Heap_Ptr
 692+ EC29             >
 692+ EC29             >mirror_Ptr      defl    $
 692+ EC29             >
 692+ EC29 07 7F       >                dw      Dict_Ptr + 2        // xt
 692+ EC2B             >Heap_Ptr        defl    $ - $E000           // save current HP
 692+ EC2B             >
 692+ EC2B             >Current_HP      defl  $ - $E000             // used to set HP once!
 692+ EC2B             >
 692+ EC2B             >//              ______________________________________________________________________
 692+ EC2B             >//              Dictionary part
 692+ EC2B             >
 692+ EC2B             >                org     Dict_Ptr
 692+ 7F05             >
 692+ 7F05 29 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 692+ 7F07             >
 692+ 7F07             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 692+ 7F07 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 692+ 7F0A             >
 692+ 7F0A             >
 692+ 7F0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 692+ 7F0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 692+ 7F0A             >
 692+ 7F0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 693+ 7F0A 94 6E A5 65                  dw      DECIMAL, CR
 694+ 7F0E 08 69 17 6B                  dw      DUP, SCR, STORE
 694+ 7F12 7C 69
 695+ 7F14 F3 70                        dw      C_DOT_QUOTE
 696+ 7F16 05 53 63 72                  db      5, "Scr# "
 696+ 7F1A 23 20
 697+ 7F1C 93 7E                        dw      DOT
 698+ 7F1E A3 6A 64 6A                  dw      LSCR, ZERO, C_DO
 698+ 7F22 2C 64
 699+ 7F24              List_Loop:
 700+ 7F24 A5 65                        dw          CR
 701+ 7F26 32 64 79 6A                  dw          I, THREE
 702+ 7F2A 77 7E 52 6C                  dw          DOT_R, SPACE
 703+ 7F2E 32 64 17 6B                  dw          I, SCR, FETCH, DOT_LINE
 703+ 7F32 72 69 6C 77
 704+ 7F36 9C 66                        dw          QTERMINAL
 705+ 7F38 F3 63                        dw          ZBRANCH
 706+ 7F3A 06 00                        dw          List_Endif - $
 707+ 7F3C FC 63                        dw              C_LEAVE
 708+ 7F3E 06 00                        dw              List_Leave - $
 709+ 7F40              List_Endif:
 710+ 7F40 E7 63                        dw      C_LOOP
 711+ 7F42 E2 FF                        dw      List_Loop - $
 712+ 7F44              List_Leave:
 713+ 7F44 A5 65                        dw      CR
 714+ 7F46 3D 68                        dw      EXIT
 715+ 7F48
 716+ 7F48              //  ______________________________________________________________________
 717+ 7F48              //
 718+ 7F48              // index        n1 n2 --
 719+ 7F48                              Colon_Def INDEX, "INDEX", is_normal
 719+ 7F48             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 719+ 7F48             >
 719+ 7F48             >Dict_Ptr        defl    $
 719+ 7F48             >
 719+ 7F48             >//              ______________________________________________________________________
 719+ 7F48             >//              Heap part
 719+ 7F48             >
 719+ 7F48             >
 719+ 7F48             >                org     (Heap_Ptr & $1FFF) + $E000
 719+ EC2B             >
 719+ EC2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 719+ EC2B             >Latest_Definition defl  Heap_Ptr
 719+ EC2B             >
 719+ EC2B             >                // dummy db directives used to calculate length of namec
 719+ EC2B 49 4E 44 45 >                db      "INDEX"
 719+ EC2F 58          >
 719+ EC30             >len_NFA         defl    $ - temp_NFA
 719+ EC30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 719+ EC2B             >
 719+ EC2B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 719+ EC2C 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 719+ EC30 58          >
 719+ EC31             >                org     $-1                 // alter last byte of Name just above to set
 719+ EC30 D8          >                db      {b $} | END_BIT     // msb as name end
 719+ EC31             >
 719+ EC31 22 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 719+ EC33             >Prev_Ptr        defl    Heap_Ptr
 719+ EC33             >
 719+ EC33             >mirror_Ptr      defl    $
 719+ EC33             >
 719+ EC33 4A 7F       >                dw      Dict_Ptr + 2        // xt
 719+ EC35             >Heap_Ptr        defl    $ - $E000           // save current HP
 719+ EC35             >
 719+ EC35             >Current_HP      defl  $ - $E000             // used to set HP once!
 719+ EC35             >
 719+ EC35             >//              ______________________________________________________________________
 719+ EC35             >//              Dictionary part
 719+ EC35             >
 719+ EC35             >                org     Dict_Ptr
 719+ 7F48             >
 719+ 7F48 33 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 719+ 7F4A             >
 719+ 7F4A             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 719+ 7F4A CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 719+ 7F4D             >
 719+ 7F4D             >
 719+ 7F4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 719+ 7F4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 719+ 7F4D             >
 719+ 7F4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 720+ 7F4D A3 68 01 69                  dw      ONE_PLUS, SWAP, C_DO
 720+ 7F51 2C 64
 721+ 7F53              Index_Loop:
 722+ 7F53 A5 65 32 64                  dw          CR, I, THREE
 722+ 7F57 79 6A
 723+ 7F59 77 7E 52 6C                  dw          DOT_R, SPACE
 724+ 7F5D 64 6A 32 64                  dw          ZERO, I, DOT_LINE
 724+ 7F61 6C 77
 725+ 7F63 9C 66                        dw          QTERMINAL
 726+ 7F65 F3 63                        dw          ZBRANCH
 727+ 7F67 06 00                        dw          Index_Endif - $
 728+ 7F69 FC 63                        dw              C_LEAVE
 729+ 7F6B 06 00                        dw              Index_Leave - $
 730+ 7F6D              Index_Endif:
 731+ 7F6D E7 63                        dw      C_LOOP
 732+ 7F6F E4 FF                        dw      Index_Loop - $
 733+ 7F71              Index_Leave:
 734+ 7F71 A5 65                        dw      CR
 735+ 7F73 3D 68                        dw      EXIT
 736+ 7F75
 737+ 7F75              //  ______________________________________________________________________
 738+ 7F75              //
 739+ 7F75              // cls          --
 740+ 7F75
 741+ 7F75              //              Colon_Def CLS, "CLS", is_normal
 742+ 7F75              //              dw      LIT, $0E, EMITC
 743+ 7F75              //              dw      EXIT
 744+ 7F75
 745+ 7F75                              New_Def CLS, "CLS", is_code, is_normal
 745+ 7F75             >
 745+ 7F75             >Dict_Ptr        defl    $
 745+ 7F75             >
 745+ 7F75             >//              ______________________________________________________________________
 745+ 7F75             >//              Heap part
 745+ 7F75             >
 745+ 7F75             >
 745+ 7F75             >                org     (Heap_Ptr & $1FFF) + $E000
 745+ EC35             >
 745+ EC35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 745+ EC35             >Latest_Definition defl  Heap_Ptr
 745+ EC35             >
 745+ EC35             >                // dummy db directives used to calculate length of namec
 745+ EC35 43 4C 53    >                db      "CLS"
 745+ EC38             >len_NFA         defl    $ - temp_NFA
 745+ EC38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 745+ EC35             >
 745+ EC35 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 745+ EC36 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 745+ EC39             >                org     $-1                 // alter last byte of Name just above to set
 745+ EC38 D3          >                db      {b $} | END_BIT     // msb as name end
 745+ EC39             >
 745+ EC39 2B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 745+ EC3B             >Prev_Ptr        defl    Heap_Ptr
 745+ EC3B             >
 745+ EC3B             >mirror_Ptr      defl    $
 745+ EC3B             >
 745+ EC3B 77 7F       >                dw      Dict_Ptr + 2        // xt
 745+ EC3D             >Heap_Ptr        defl    $ - $E000           // save current HP
 745+ EC3D             >
 745+ EC3D             >Current_HP      defl  $ - $E000             // used to set HP once!
 745+ EC3D             >
 745+ EC3D             >//              ______________________________________________________________________
 745+ EC3D             >//              Dictionary part
 745+ EC3D             >
 745+ EC3D             >                org     Dict_Ptr
 745+ 7F75             >
 745+ 7F75 3B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 745+ 7F77             >
 745+ 7F77             >CLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 745+ 7F77 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 745+ 7F77 ~           >
 745+ 7F77 ~           >
 745+ 7F77             >                endif           ; ok        // for other definitions it "points" the correct handler
 745+ 7F77             >                // Use of "; ok" to suppress "warning[fwdref]"
 745+ 7F77             >
 745+ 7F77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 746+ 7F77 C5                           push    bc
 747+ 7F78 D5                           push    de
 748+ 7F79 DD E5                        push    ix
 749+ 7F7B 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 750+ 7F7E 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 751+ 7F80 AF                           xor     a           // query current status
 752+ 7F81 CF                           rst     8
 753+ 7F82 94                           db      $94         // carry flag set on success
 754+ 7F83 A7                           and     a
 755+ 7F84 20 05                        jr      nz, CLS_No_Layer_0
 756+ 7F86 CD AF 0D                       call    $0DAF
 757+ 7F89 18 03                        jr      CLS_Layer_0
 758+ 7F8B              CLS_No_Layer_0:
 759+ 7F8B 3E 0E                          ld      a, $0E
 760+ 7F8D D7                             rst     $10
 761+ 7F8E              CLS_Layer_0:
 762+ 7F8E DD E1                        pop     ix
 763+ 7F90 D1                           pop     de
 764+ 7F91 C1                           pop     bc
 765+ 7F92                              next
 765+ 7F92 DD E9       >                jp      (ix)
 766+ 7F94
 767+ 7F94              //  ______________________________________________________________________
 768+ 7F94              //
 769+ 7F94              // splash       --
 770+ 7F94              //              Colon_Def SPLASH, "SPLASH", is_normal
 771+ 7F94              //              dw      CLS
 772+ 7F94              //              dw      C_DOT_QUOTE
 773+ 7F94              //              db      87
 774+ 7F94              //              db      "v-Forth 1.8 NextZXOS version", 13    // 29
 775+ 7F94              //              db      "Heap Vocabulary - build 20250315", 13  // 33
 776+ 7F94              //              db      "1990-2025 Matteo Vitturi", 13        // 25
 777+ 7F94              //              dw      EXIT
 778+ 7F94
 779+ 7F94              //  ______________________________________________________________________
 780+ 7F94              //
 781+ 7F94              // splash       --
 782+ 7F94                              Colon_Def SPLASH, "SPLASH", is_normal
 782+ 7F94             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 782+ 7F94             >
 782+ 7F94             >Dict_Ptr        defl    $
 782+ 7F94             >
 782+ 7F94             >//              ______________________________________________________________________
 782+ 7F94             >//              Heap part
 782+ 7F94             >
 782+ 7F94             >
 782+ 7F94             >                org     (Heap_Ptr & $1FFF) + $E000
 782+ EC3D             >
 782+ EC3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 782+ EC3D             >Latest_Definition defl  Heap_Ptr
 782+ EC3D             >
 782+ EC3D             >                // dummy db directives used to calculate length of namec
 782+ EC3D 53 50 4C 41 >                db      "SPLASH"
 782+ EC41 53 48       >
 782+ EC43             >len_NFA         defl    $ - temp_NFA
 782+ EC43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 782+ EC3D             >
 782+ EC3D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 782+ EC3E 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 782+ EC42 53 48       >
 782+ EC44             >                org     $-1                 // alter last byte of Name just above to set
 782+ EC43 C8          >                db      {b $} | END_BIT     // msb as name end
 782+ EC44             >
 782+ EC44 35 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 782+ EC46             >Prev_Ptr        defl    Heap_Ptr
 782+ EC46             >
 782+ EC46             >mirror_Ptr      defl    $
 782+ EC46             >
 782+ EC46 96 7F       >                dw      Dict_Ptr + 2        // xt
 782+ EC48             >Heap_Ptr        defl    $ - $E000           // save current HP
 782+ EC48             >
 782+ EC48             >Current_HP      defl  $ - $E000             // used to set HP once!
 782+ EC48             >
 782+ EC48             >//              ______________________________________________________________________
 782+ EC48             >//              Dictionary part
 782+ EC48             >
 782+ EC48             >                org     Dict_Ptr
 782+ 7F94             >
 782+ 7F94 46 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 782+ 7F96             >
 782+ 7F96             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 782+ 7F96 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 782+ 7F99             >
 782+ 7F99             >
 782+ 7F99             >                endif           ; ok        // for other definitions it "points" the correct handler
 782+ 7F99             >                // Use of "; ok" to suppress "warning[fwdref]"
 782+ 7F99             >
 782+ 7F99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 783+ 7F99 77 7F                        dw      CLS
 784+ 7F9B A3 63 02 00                  dw      LIT, Splash_Ptr
 785+ 7F9F C3 6C                        dw      FAR
 786+ 7FA1 02 6F 56 6F                  dw      COUNT, TYPE
 787+ 7FA5 3D 68                        dw      EXIT
 788+ 7FA7
 789+ 7FA7              //  ______________________________________________________________________
 790+ 7FA7              //
 791+ 7FA7              // video        --
 792+ 7FA7                              Colon_Def VIDEO, "VIDEO", is_normal
 792+ 7FA7             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 792+ 7FA7             >
 792+ 7FA7             >Dict_Ptr        defl    $
 792+ 7FA7             >
 792+ 7FA7             >//              ______________________________________________________________________
 792+ 7FA7             >//              Heap part
 792+ 7FA7             >
 792+ 7FA7             >
 792+ 7FA7             >                org     (Heap_Ptr & $1FFF) + $E000
 792+ EC48             >
 792+ EC48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 792+ EC48             >Latest_Definition defl  Heap_Ptr
 792+ EC48             >
 792+ EC48             >                // dummy db directives used to calculate length of namec
 792+ EC48 56 49 44 45 >                db      "VIDEO"
 792+ EC4C 4F          >
 792+ EC4D             >len_NFA         defl    $ - temp_NFA
 792+ EC4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 792+ EC48             >
 792+ EC48 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 792+ EC49 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 792+ EC4D 4F          >
 792+ EC4E             >                org     $-1                 // alter last byte of Name just above to set
 792+ EC4D CF          >                db      {b $} | END_BIT     // msb as name end
 792+ EC4E             >
 792+ EC4E 3D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 792+ EC50             >Prev_Ptr        defl    Heap_Ptr
 792+ EC50             >
 792+ EC50             >mirror_Ptr      defl    $
 792+ EC50             >
 792+ EC50 A9 7F       >                dw      Dict_Ptr + 2        // xt
 792+ EC52             >Heap_Ptr        defl    $ - $E000           // save current HP
 792+ EC52             >
 792+ EC52             >Current_HP      defl  $ - $E000             // used to set HP once!
 792+ EC52             >
 792+ EC52             >//              ______________________________________________________________________
 792+ EC52             >//              Dictionary part
 792+ EC52             >
 792+ EC52             >                org     Dict_Ptr
 792+ 7FA7             >
 792+ 7FA7 50 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 792+ 7FA9             >
 792+ 7FA9             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 792+ 7FA9 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 792+ 7FAC             >
 792+ 7FAC             >
 792+ 7FAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 792+ 7FAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 792+ 7FAC             >
 792+ 7FAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 793+ 7FAC 72 6A 08 69                  dw      TWO, DUP, DEVICE, STORE
 793+ 7FB0 A1 77 7C 69
 794+ 7FB4 B0 66                        dw      SELECT
 795+ 7FB6 3D 68                        dw      EXIT
 796+ 7FB8
 797+ 7FB8              //  ______________________________________________________________________
 798+ 7FB8              //
 799+ 7FB8              // autoexec     --
 800+ 7FB8              // this word is called the first time the Forth system boot to
 801+ 7FB8              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 802+ 7FB8                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 802+ 7FB8             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 802+ 7FB8             >
 802+ 7FB8             >Dict_Ptr        defl    $
 802+ 7FB8             >
 802+ 7FB8             >//              ______________________________________________________________________
 802+ 7FB8             >//              Heap part
 802+ 7FB8             >
 802+ 7FB8             >
 802+ 7FB8             >                org     (Heap_Ptr & $1FFF) + $E000
 802+ EC52             >
 802+ EC52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 802+ EC52             >Latest_Definition defl  Heap_Ptr
 802+ EC52             >
 802+ EC52             >                // dummy db directives used to calculate length of namec
 802+ EC52 41 55 54 4F >                db      "AUTOEXEC"
 802+ EC56 45 58 45 43 >
 802+ EC5A             >len_NFA         defl    $ - temp_NFA
 802+ EC5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 802+ EC52             >
 802+ EC52 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 802+ EC53 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 802+ EC57 45 58 45 43 >
 802+ EC5B             >                org     $-1                 // alter last byte of Name just above to set
 802+ EC5A C3          >                db      {b $} | END_BIT     // msb as name end
 802+ EC5B             >
 802+ EC5B 48 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 802+ EC5D             >Prev_Ptr        defl    Heap_Ptr
 802+ EC5D             >
 802+ EC5D             >mirror_Ptr      defl    $
 802+ EC5D             >
 802+ EC5D BA 7F       >                dw      Dict_Ptr + 2        // xt
 802+ EC5F             >Heap_Ptr        defl    $ - $E000           // save current HP
 802+ EC5F             >
 802+ EC5F             >Current_HP      defl  $ - $E000             // used to set HP once!
 802+ EC5F             >
 802+ EC5F             >//              ______________________________________________________________________
 802+ EC5F             >//              Dictionary part
 802+ EC5F             >
 802+ EC5F             >                org     Dict_Ptr
 802+ 7FB8             >
 802+ 7FB8 5D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 802+ 7FBA             >
 802+ 7FBA             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 802+ 7FBA CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 802+ 7FBD             >
 802+ 7FBD             >
 802+ 7FBD             >                endif           ; ok        // for other definitions it "points" the correct handler
 802+ 7FBD             >                // Use of "; ok" to suppress "warning[fwdref]"
 802+ 7FBD             >
 802+ 7FBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 803+ 7FBD A3 63 0B 00                  dw      LIT, 11
 804+ 7FC1 A3 63 2B 6A                  dw      LIT, NOOP
 805+ 7FC5 A3 63 A8 75                  dw      LIT, Autoexec_Ptr
 806+ 7FC9 7C 69                        dw      STORE
 807+ 7FCB AA 7C                        dw      LOAD
 808+ 7FCD 4F 75                        dw      QUIT
 809+ 7FCF 3D 68                        dw      EXIT
 810+ 7FD1
 811+ 7FD1
 812+ 7FD1              //  ______________________________________________________________________
 813+ 7FD1              //
 814+ 7FD1              // bye     --
 815+ 7FD1              //
 816+ 7FD1                              Colon_Def BYE, "BYE", is_normal
 816+ 7FD1             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 816+ 7FD1             >
 816+ 7FD1             >Dict_Ptr        defl    $
 816+ 7FD1             >
 816+ 7FD1             >//              ______________________________________________________________________
 816+ 7FD1             >//              Heap part
 816+ 7FD1             >
 816+ 7FD1             >
 816+ 7FD1             >                org     (Heap_Ptr & $1FFF) + $E000
 816+ EC5F             >
 816+ EC5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 816+ EC5F             >Latest_Definition defl  Heap_Ptr
 816+ EC5F             >
 816+ EC5F             >                // dummy db directives used to calculate length of namec
 816+ EC5F 42 59 45    >                db      "BYE"
 816+ EC62             >len_NFA         defl    $ - temp_NFA
 816+ EC62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 816+ EC5F             >
 816+ EC5F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 816+ EC60 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 816+ EC63             >                org     $-1                 // alter last byte of Name just above to set
 816+ EC62 C5          >                db      {b $} | END_BIT     // msb as name end
 816+ EC63             >
 816+ EC63 52 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 816+ EC65             >Prev_Ptr        defl    Heap_Ptr
 816+ EC65             >
 816+ EC65             >mirror_Ptr      defl    $
 816+ EC65             >
 816+ EC65 D3 7F       >                dw      Dict_Ptr + 2        // xt
 816+ EC67             >Heap_Ptr        defl    $ - $E000           // save current HP
 816+ EC67             >
 816+ EC67             >Current_HP      defl  $ - $E000             // used to set HP once!
 816+ EC67             >
 816+ EC67             >//              ______________________________________________________________________
 816+ EC67             >//              Dictionary part
 816+ EC67             >
 816+ EC67             >                org     Dict_Ptr
 816+ 7FD1             >
 816+ 7FD1 65 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 816+ 7FD3             >
 816+ 7FD3             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 816+ 7FD3 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 816+ 7FD6             >
 816+ 7FD6             >
 816+ 7FD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 816+ 7FD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 816+ 7FD6             >
 816+ 7FD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 817+ 7FD6 BC 79                        dw      FLUSH
 818+ 7FD8 0A 79                        dw      EMPTY_BUFFERS
 819+ 7FDA F6 77 72 69                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 819+ 7FDE EA 66 ED 68
 820+ 7FE2 64 6A AA 6A                  dw      ZERO, PLUS_ORIGIN
 821+ 7FE6 36 76                        dw      BASIC
 822+ 7FE8
 823+ 7FE8              //  ______________________________________________________________________
 824+ 7FE8              //
 825+ 7FE8              // invv     --
 826+ 7FE8              //
 827+ 7FE8              //              Colon_Def INVV, "INVV", is_normal
 828+ 7FE8              //              dw      LIT, 20, EMITC, ONE, EMITC
 829+ 7FE8              //              dw      EXIT
 830+ 7FE8
 831+ 7FE8              //  ______________________________________________________________________
 832+ 7FE8              //
 833+ 7FE8              // truv     --
 834+ 7FE8              //
 835+ 7FE8              //              Colon_Def TRUV, "TRUV", is_normal
 836+ 7FE8              //              dw      LIT, 20, EMITC, ZERO, EMITC
 837+ 7FE8              //              dw      EXIT
 838+ 7FE8
 839+ 7FE8              //  ______________________________________________________________________
 840+ 7FE8              //
 841+ 7FE8              // mark     --
 842+ 7FE8              //
 843+ 7FE8              //              Colon_Def MARK, "MARK", is_normal
 844+ 7FE8              //              dw      INVV, TYPE, TRUV
 845+ 7FE8              //              dw      EXIT
 846+ 7FE8
 847+ 7FE8              //  ______________________________________________________________________
 848+ 7FE8              //
 849+ 7FE8              // back     --
 850+ 7FE8              //
 851+ 7FE8                              Colon_Def BACK, "BACK", is_normal
 851+ 7FE8             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 851+ 7FE8             >
 851+ 7FE8             >Dict_Ptr        defl    $
 851+ 7FE8             >
 851+ 7FE8             >//              ______________________________________________________________________
 851+ 7FE8             >//              Heap part
 851+ 7FE8             >
 851+ 7FE8             >
 851+ 7FE8             >                org     (Heap_Ptr & $1FFF) + $E000
 851+ EC67             >
 851+ EC67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 851+ EC67             >Latest_Definition defl  Heap_Ptr
 851+ EC67             >
 851+ EC67             >                // dummy db directives used to calculate length of namec
 851+ EC67 42 41 43 4B >                db      "BACK"
 851+ EC6B             >len_NFA         defl    $ - temp_NFA
 851+ EC6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 851+ EC67             >
 851+ EC67 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 851+ EC68 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 851+ EC6C             >                org     $-1                 // alter last byte of Name just above to set
 851+ EC6B CB          >                db      {b $} | END_BIT     // msb as name end
 851+ EC6C             >
 851+ EC6C 5F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 851+ EC6E             >Prev_Ptr        defl    Heap_Ptr
 851+ EC6E             >
 851+ EC6E             >mirror_Ptr      defl    $
 851+ EC6E             >
 851+ EC6E EA 7F       >                dw      Dict_Ptr + 2        // xt
 851+ EC70             >Heap_Ptr        defl    $ - $E000           // save current HP
 851+ EC70             >
 851+ EC70             >Current_HP      defl  $ - $E000             // used to set HP once!
 851+ EC70             >
 851+ EC70             >//              ______________________________________________________________________
 851+ EC70             >//              Dictionary part
 851+ EC70             >
 851+ EC70             >                org     Dict_Ptr
 851+ 7FE8             >
 851+ 7FE8 6E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 851+ 7FEA             >
 851+ 7FEA             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 851+ 7FEA CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 851+ 7FED             >
 851+ 7FED             >
 851+ 7FED             >                endif           ; ok        // for other definitions it "points" the correct handler
 851+ 7FED             >                // Use of "; ok" to suppress "warning[fwdref]"
 851+ 7FED             >
 851+ 7FED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 852+ 7FED 89 6B C8 6B                  dw      HERE, SUBTRACT, COMMA
 852+ 7FF1 9F 6B
 853+ 7FF3 3D 68                        dw      EXIT
 854+ 7FF5
 855+ 7FF5              //  ______________________________________________________________________
 856+ 7FF5              //
 857+ 7FF5              // if          ( -- a 2 ) \ compile-time
 858+ 7FF5              // IF ... THEN
 859+ 7FF5              // IF ... ELSE ... ENDIF
 860+ 7FF5                              Colon_Def IF, "IF", is_immediate
 860+ 7FF5             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 860+ 7FF5             >
 860+ 7FF5             >Dict_Ptr        defl    $
 860+ 7FF5             >
 860+ 7FF5             >//              ______________________________________________________________________
 860+ 7FF5             >//              Heap part
 860+ 7FF5             >
 860+ 7FF5             >
 860+ 7FF5             >                org     (Heap_Ptr & $1FFF) + $E000
 860+ EC70             >
 860+ EC70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ EC70             >Latest_Definition defl  Heap_Ptr
 860+ EC70             >
 860+ EC70             >                // dummy db directives used to calculate length of namec
 860+ EC70 49 46       >                db      "IF"
 860+ EC72             >len_NFA         defl    $ - temp_NFA
 860+ EC72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ EC70             >
 860+ EC70 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ EC71 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 860+ EC73             >                org     $-1                 // alter last byte of Name just above to set
 860+ EC72 C6          >                db      {b $} | END_BIT     // msb as name end
 860+ EC73             >
 860+ EC73 67 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 860+ EC75             >Prev_Ptr        defl    Heap_Ptr
 860+ EC75             >
 860+ EC75             >mirror_Ptr      defl    $
 860+ EC75             >
 860+ EC75 F7 7F       >                dw      Dict_Ptr + 2        // xt
 860+ EC77             >Heap_Ptr        defl    $ - $E000           // save current HP
 860+ EC77             >
 860+ EC77             >Current_HP      defl  $ - $E000             // used to set HP once!
 860+ EC77             >
 860+ EC77             >//              ______________________________________________________________________
 860+ EC77             >//              Dictionary part
 860+ EC77             >
 860+ EC77             >                org     Dict_Ptr
 860+ 7FF5             >
 860+ 7FF5 75 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 860+ 7FF7             >
 860+ 7FF7             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 7FF7 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 860+ 7FFA             >
 860+ 7FFA             >
 860+ 7FFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 7FFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 7FFA             >
 860+ 7FFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 7FFA 2D 6E F3 63                  dw      COMPILE, ZBRANCH
 862+ 7FFE 89 6B 64 6A                  dw      HERE, ZERO, COMMA
 862+ 8002 9F 6B
 863+ 8004 72 6A                        dw      TWO
 864+ 8006 3D 68                        dw      EXIT
 865+ 8008
 866+ 8008              //  ______________________________________________________________________
 867+ 8008              //
 868+ 8008              // then        ( a 2 -- ) \ compile-time
 869+ 8008              //
 870+ 8008                              Colon_Def THEN, "THEN", is_immediate
 870+ 8008             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 870+ 8008             >
 870+ 8008             >Dict_Ptr        defl    $
 870+ 8008             >
 870+ 8008             >//              ______________________________________________________________________
 870+ 8008             >//              Heap part
 870+ 8008             >
 870+ 8008             >
 870+ 8008             >                org     (Heap_Ptr & $1FFF) + $E000
 870+ EC77             >
 870+ EC77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 870+ EC77             >Latest_Definition defl  Heap_Ptr
 870+ EC77             >
 870+ EC77             >                // dummy db directives used to calculate length of namec
 870+ EC77 54 48 45 4E >                db      "THEN"
 870+ EC7B             >len_NFA         defl    $ - temp_NFA
 870+ EC7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 870+ EC77             >
 870+ EC77 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 870+ EC78 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 870+ EC7C             >                org     $-1                 // alter last byte of Name just above to set
 870+ EC7B CE          >                db      {b $} | END_BIT     // msb as name end
 870+ EC7C             >
 870+ EC7C 70 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 870+ EC7E             >Prev_Ptr        defl    Heap_Ptr
 870+ EC7E             >
 870+ EC7E             >mirror_Ptr      defl    $
 870+ EC7E             >
 870+ EC7E 0A 80       >                dw      Dict_Ptr + 2        // xt
 870+ EC80             >Heap_Ptr        defl    $ - $E000           // save current HP
 870+ EC80             >
 870+ EC80             >Current_HP      defl  $ - $E000             // used to set HP once!
 870+ EC80             >
 870+ EC80             >//              ______________________________________________________________________
 870+ EC80             >//              Dictionary part
 870+ EC80             >
 870+ EC80             >                org     Dict_Ptr
 870+ 8008             >
 870+ 8008 7E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 870+ 800A             >
 870+ 800A             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 870+ 800A CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 870+ 800D             >
 870+ 800D             >
 870+ 800D             >                endif           ; ok        // for other definitions it "points" the correct handler
 870+ 800D             >                // Use of "; ok" to suppress "warning[fwdref]"
 870+ 800D             >
 870+ 800D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 871+ 800D D2 6D                        dw      QCOMP
 872+ 800F 72 6A F6 6D                  dw      TWO, QPAIRS
 873+ 8013 89 6B E4 68                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 873+ 8017 C8 6B 01 69
 873+ 801B 7C 69
 874+ 801D 3D 68                        dw      EXIT
 875+ 801F
 876+ 801F              //  ______________________________________________________________________
 877+ 801F              //
 878+ 801F              // endif       ( a 2 -- ) \ compile-time
 879+ 801F              //
 880+ 801F                              Colon_Def ENDIF, "ENDIF", is_immediate
 880+ 801F             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 880+ 801F             >
 880+ 801F             >Dict_Ptr        defl    $
 880+ 801F             >
 880+ 801F             >//              ______________________________________________________________________
 880+ 801F             >//              Heap part
 880+ 801F             >
 880+ 801F             >
 880+ 801F             >                org     (Heap_Ptr & $1FFF) + $E000
 880+ EC80             >
 880+ EC80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 880+ EC80             >Latest_Definition defl  Heap_Ptr
 880+ EC80             >
 880+ EC80             >                // dummy db directives used to calculate length of namec
 880+ EC80 45 4E 44 49 >                db      "ENDIF"
 880+ EC84 46          >
 880+ EC85             >len_NFA         defl    $ - temp_NFA
 880+ EC85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 880+ EC80             >
 880+ EC80 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 880+ EC81 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 880+ EC85 46          >
 880+ EC86             >                org     $-1                 // alter last byte of Name just above to set
 880+ EC85 C6          >                db      {b $} | END_BIT     // msb as name end
 880+ EC86             >
 880+ EC86 77 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 880+ EC88             >Prev_Ptr        defl    Heap_Ptr
 880+ EC88             >
 880+ EC88             >mirror_Ptr      defl    $
 880+ EC88             >
 880+ EC88 21 80       >                dw      Dict_Ptr + 2        // xt
 880+ EC8A             >Heap_Ptr        defl    $ - $E000           // save current HP
 880+ EC8A             >
 880+ EC8A             >Current_HP      defl  $ - $E000             // used to set HP once!
 880+ EC8A             >
 880+ EC8A             >//              ______________________________________________________________________
 880+ EC8A             >//              Dictionary part
 880+ EC8A             >
 880+ EC8A             >                org     Dict_Ptr
 880+ 801F             >
 880+ 801F 88 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 880+ 8021             >
 880+ 8021             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 880+ 8021 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 880+ 8024             >
 880+ 8024             >
 880+ 8024             >                endif           ; ok        // for other definitions it "points" the correct handler
 880+ 8024             >                // Use of "; ok" to suppress "warning[fwdref]"
 880+ 8024             >
 880+ 8024             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 881+ 8024 0A 80                        dw      THEN
 882+ 8026 3D 68                        dw      EXIT
 883+ 8028
 884+ 8028              //  ______________________________________________________________________
 885+ 8028              //
 886+ 8028              // else        ( a1 2 -- a2 2 ) \ compile-time
 887+ 8028              //
 888+ 8028                              Colon_Def ELSE, "ELSE", is_immediate
 888+ 8028             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 888+ 8028             >
 888+ 8028             >Dict_Ptr        defl    $
 888+ 8028             >
 888+ 8028             >//              ______________________________________________________________________
 888+ 8028             >//              Heap part
 888+ 8028             >
 888+ 8028             >
 888+ 8028             >                org     (Heap_Ptr & $1FFF) + $E000
 888+ EC8A             >
 888+ EC8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 888+ EC8A             >Latest_Definition defl  Heap_Ptr
 888+ EC8A             >
 888+ EC8A             >                // dummy db directives used to calculate length of namec
 888+ EC8A 45 4C 53 45 >                db      "ELSE"
 888+ EC8E             >len_NFA         defl    $ - temp_NFA
 888+ EC8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 888+ EC8A             >
 888+ EC8A C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 888+ EC8B 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 888+ EC8F             >                org     $-1                 // alter last byte of Name just above to set
 888+ EC8E C5          >                db      {b $} | END_BIT     // msb as name end
 888+ EC8F             >
 888+ EC8F 80 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 888+ EC91             >Prev_Ptr        defl    Heap_Ptr
 888+ EC91             >
 888+ EC91             >mirror_Ptr      defl    $
 888+ EC91             >
 888+ EC91 2A 80       >                dw      Dict_Ptr + 2        // xt
 888+ EC93             >Heap_Ptr        defl    $ - $E000           // save current HP
 888+ EC93             >
 888+ EC93             >Current_HP      defl  $ - $E000             // used to set HP once!
 888+ EC93             >
 888+ EC93             >//              ______________________________________________________________________
 888+ EC93             >//              Dictionary part
 888+ EC93             >
 888+ EC93             >                org     Dict_Ptr
 888+ 8028             >
 888+ 8028 91 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 888+ 802A             >
 888+ 802A             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 888+ 802A CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 888+ 802D             >
 888+ 802D             >
 888+ 802D             >                endif           ; ok        // for other definitions it "points" the correct handler
 888+ 802D             >                // Use of "; ok" to suppress "warning[fwdref]"
 888+ 802D             >
 888+ 802D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 889+ 802D D2 6D                        dw      QCOMP
 890+ 802F 72 6A F6 6D                  dw      TWO, QPAIRS
 891+ 8033 2D 6E EF 63                  dw      COMPILE, BRANCH
 892+ 8037 89 6B 64 6A                  dw      HERE, ZERO, COMMA
 892+ 803B 9F 6B
 893+ 803D 01 69 72 6A                  dw      SWAP, TWO, THEN
 893+ 8041 0A 80
 894+ 8043 72 6A                        dw      TWO
 895+ 8045 3D 68                        dw      EXIT
 896+ 8047
 897+ 8047              //  ______________________________________________________________________
 898+ 8047              //
 899+ 8047              // begin        ( -- a 1 ) \ compile-time
 900+ 8047              // BEGIN ... AGAIN
 901+ 8047              // BEGIN ... f UNTIL
 902+ 8047              // BEGIN ... f WHILE ... REPEAT
 903+ 8047                              Colon_Def BEGIN, "BEGIN", is_immediate
 903+ 8047             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 903+ 8047             >
 903+ 8047             >Dict_Ptr        defl    $
 903+ 8047             >
 903+ 8047             >//              ______________________________________________________________________
 903+ 8047             >//              Heap part
 903+ 8047             >
 903+ 8047             >
 903+ 8047             >                org     (Heap_Ptr & $1FFF) + $E000
 903+ EC93             >
 903+ EC93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ EC93             >Latest_Definition defl  Heap_Ptr
 903+ EC93             >
 903+ EC93             >                // dummy db directives used to calculate length of namec
 903+ EC93 42 45 47 49 >                db      "BEGIN"
 903+ EC97 4E          >
 903+ EC98             >len_NFA         defl    $ - temp_NFA
 903+ EC98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ EC93             >
 903+ EC93 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ EC94 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 903+ EC98 4E          >
 903+ EC99             >                org     $-1                 // alter last byte of Name just above to set
 903+ EC98 CE          >                db      {b $} | END_BIT     // msb as name end
 903+ EC99             >
 903+ EC99 8A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 903+ EC9B             >Prev_Ptr        defl    Heap_Ptr
 903+ EC9B             >
 903+ EC9B             >mirror_Ptr      defl    $
 903+ EC9B             >
 903+ EC9B 49 80       >                dw      Dict_Ptr + 2        // xt
 903+ EC9D             >Heap_Ptr        defl    $ - $E000           // save current HP
 903+ EC9D             >
 903+ EC9D             >Current_HP      defl  $ - $E000             // used to set HP once!
 903+ EC9D             >
 903+ EC9D             >//              ______________________________________________________________________
 903+ EC9D             >//              Dictionary part
 903+ EC9D             >
 903+ EC9D             >                org     Dict_Ptr
 903+ 8047             >
 903+ 8047 9B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 903+ 8049             >
 903+ 8049             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 8049 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 804C             >
 903+ 804C             >
 903+ 804C             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 804C             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 804C             >
 903+ 804C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 804C D2 6D                        dw      QCOMP
 905+ 804E 89 6B                        dw      HERE
 906+ 8050 72 6A                        dw      TWO
 907+ 8052 3D 68                        dw      EXIT
 908+ 8054
 909+ 8054              //  ______________________________________________________________________
 910+ 8054              //
 911+ 8054              // again        ( a 1 -- ) \ compile-time
 912+ 8054                              Colon_Def AGAIN, "AGAIN", is_immediate
 912+ 8054             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 912+ 8054             >
 912+ 8054             >Dict_Ptr        defl    $
 912+ 8054             >
 912+ 8054             >//              ______________________________________________________________________
 912+ 8054             >//              Heap part
 912+ 8054             >
 912+ 8054             >
 912+ 8054             >                org     (Heap_Ptr & $1FFF) + $E000
 912+ EC9D             >
 912+ EC9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ EC9D             >Latest_Definition defl  Heap_Ptr
 912+ EC9D             >
 912+ EC9D             >                // dummy db directives used to calculate length of namec
 912+ EC9D 41 47 41 49 >                db      "AGAIN"
 912+ ECA1 4E          >
 912+ ECA2             >len_NFA         defl    $ - temp_NFA
 912+ ECA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ EC9D             >
 912+ EC9D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ EC9E 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 912+ ECA2 4E          >
 912+ ECA3             >                org     $-1                 // alter last byte of Name just above to set
 912+ ECA2 CE          >                db      {b $} | END_BIT     // msb as name end
 912+ ECA3             >
 912+ ECA3 93 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 912+ ECA5             >Prev_Ptr        defl    Heap_Ptr
 912+ ECA5             >
 912+ ECA5             >mirror_Ptr      defl    $
 912+ ECA5             >
 912+ ECA5 56 80       >                dw      Dict_Ptr + 2        // xt
 912+ ECA7             >Heap_Ptr        defl    $ - $E000           // save current HP
 912+ ECA7             >
 912+ ECA7             >Current_HP      defl  $ - $E000             // used to set HP once!
 912+ ECA7             >
 912+ ECA7             >//              ______________________________________________________________________
 912+ ECA7             >//              Dictionary part
 912+ ECA7             >
 912+ ECA7             >                org     Dict_Ptr
 912+ 8054             >
 912+ 8054 A5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 912+ 8056             >
 912+ 8056             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 8056 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 8059             >
 912+ 8059             >
 912+ 8059             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 8059             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 8059             >
 912+ 8059             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 8059 D2 6D                        dw      QCOMP
 914+ 805B 72 6A F6 6D                  dw      TWO, QPAIRS
 915+ 805F 2D 6E EF 63                  dw      COMPILE, BRANCH
 916+ 8063 EA 7F                        dw      BACK
 917+ 8065 3D 68                        dw      EXIT
 918+ 8067
 919+ 8067              //  ______________________________________________________________________
 920+ 8067              //
 921+ 8067              // until        ( a 1 -- ) \ compile-time
 922+ 8067                              Colon_Def UNTIL, "UNTIL", is_immediate
 922+ 8067             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 922+ 8067             >
 922+ 8067             >Dict_Ptr        defl    $
 922+ 8067             >
 922+ 8067             >//              ______________________________________________________________________
 922+ 8067             >//              Heap part
 922+ 8067             >
 922+ 8067             >
 922+ 8067             >                org     (Heap_Ptr & $1FFF) + $E000
 922+ ECA7             >
 922+ ECA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 922+ ECA7             >Latest_Definition defl  Heap_Ptr
 922+ ECA7             >
 922+ ECA7             >                // dummy db directives used to calculate length of namec
 922+ ECA7 55 4E 54 49 >                db      "UNTIL"
 922+ ECAB 4C          >
 922+ ECAC             >len_NFA         defl    $ - temp_NFA
 922+ ECAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 922+ ECA7             >
 922+ ECA7 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 922+ ECA8 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 922+ ECAC 4C          >
 922+ ECAD             >                org     $-1                 // alter last byte of Name just above to set
 922+ ECAC CC          >                db      {b $} | END_BIT     // msb as name end
 922+ ECAD             >
 922+ ECAD 9D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 922+ ECAF             >Prev_Ptr        defl    Heap_Ptr
 922+ ECAF             >
 922+ ECAF             >mirror_Ptr      defl    $
 922+ ECAF             >
 922+ ECAF 69 80       >                dw      Dict_Ptr + 2        // xt
 922+ ECB1             >Heap_Ptr        defl    $ - $E000           // save current HP
 922+ ECB1             >
 922+ ECB1             >Current_HP      defl  $ - $E000             // used to set HP once!
 922+ ECB1             >
 922+ ECB1             >//              ______________________________________________________________________
 922+ ECB1             >//              Dictionary part
 922+ ECB1             >
 922+ ECB1             >                org     Dict_Ptr
 922+ 8067             >
 922+ 8067 AF 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 922+ 8069             >
 922+ 8069             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 922+ 8069 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 922+ 806C             >
 922+ 806C             >
 922+ 806C             >                endif           ; ok        // for other definitions it "points" the correct handler
 922+ 806C             >                // Use of "; ok" to suppress "warning[fwdref]"
 922+ 806C             >
 922+ 806C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 923+ 806C D2 6D                        dw      QCOMP
 924+ 806E 72 6A F6 6D                  dw      TWO, QPAIRS
 925+ 8072 2D 6E F3 63                  dw      COMPILE, ZBRANCH
 926+ 8076 EA 7F                        dw      BACK
 927+ 8078 3D 68                        dw      EXIT
 928+ 807A
 929+ 807A              //  ______________________________________________________________________
 930+ 807A              //
 931+ 807A              // end          ( a 1 -- ) \ compile-time
 932+ 807A                              Colon_Def END, "END", is_immediate
 932+ 807A             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 932+ 807A             >
 932+ 807A             >Dict_Ptr        defl    $
 932+ 807A             >
 932+ 807A             >//              ______________________________________________________________________
 932+ 807A             >//              Heap part
 932+ 807A             >
 932+ 807A             >
 932+ 807A             >                org     (Heap_Ptr & $1FFF) + $E000
 932+ ECB1             >
 932+ ECB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 932+ ECB1             >Latest_Definition defl  Heap_Ptr
 932+ ECB1             >
 932+ ECB1             >                // dummy db directives used to calculate length of namec
 932+ ECB1 45 4E 44    >                db      "END"
 932+ ECB4             >len_NFA         defl    $ - temp_NFA
 932+ ECB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 932+ ECB1             >
 932+ ECB1 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 932+ ECB2 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 932+ ECB5             >                org     $-1                 // alter last byte of Name just above to set
 932+ ECB4 C4          >                db      {b $} | END_BIT     // msb as name end
 932+ ECB5             >
 932+ ECB5 A7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 932+ ECB7             >Prev_Ptr        defl    Heap_Ptr
 932+ ECB7             >
 932+ ECB7             >mirror_Ptr      defl    $
 932+ ECB7             >
 932+ ECB7 7C 80       >                dw      Dict_Ptr + 2        // xt
 932+ ECB9             >Heap_Ptr        defl    $ - $E000           // save current HP
 932+ ECB9             >
 932+ ECB9             >Current_HP      defl  $ - $E000             // used to set HP once!
 932+ ECB9             >
 932+ ECB9             >//              ______________________________________________________________________
 932+ ECB9             >//              Dictionary part
 932+ ECB9             >
 932+ ECB9             >                org     Dict_Ptr
 932+ 807A             >
 932+ 807A B7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 932+ 807C             >
 932+ 807C             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 932+ 807C CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 932+ 807F             >
 932+ 807F             >
 932+ 807F             >                endif           ; ok        // for other definitions it "points" the correct handler
 932+ 807F             >                // Use of "; ok" to suppress "warning[fwdref]"
 932+ 807F             >
 932+ 807F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 933+ 807F 69 80                        dw      UNTIL
 934+ 8081 3D 68                        dw      EXIT
 935+ 8083
 936+ 8083              //  ______________________________________________________________________
 937+ 8083              //
 938+ 8083              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 939+ 8083                              Colon_Def WHILE, "WHILE", is_immediate
 939+ 8083             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 939+ 8083             >
 939+ 8083             >Dict_Ptr        defl    $
 939+ 8083             >
 939+ 8083             >//              ______________________________________________________________________
 939+ 8083             >//              Heap part
 939+ 8083             >
 939+ 8083             >
 939+ 8083             >                org     (Heap_Ptr & $1FFF) + $E000
 939+ ECB9             >
 939+ ECB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 939+ ECB9             >Latest_Definition defl  Heap_Ptr
 939+ ECB9             >
 939+ ECB9             >                // dummy db directives used to calculate length of namec
 939+ ECB9 57 48 49 4C >                db      "WHILE"
 939+ ECBD 45          >
 939+ ECBE             >len_NFA         defl    $ - temp_NFA
 939+ ECBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 939+ ECB9             >
 939+ ECB9 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 939+ ECBA 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 939+ ECBE 45          >
 939+ ECBF             >                org     $-1                 // alter last byte of Name just above to set
 939+ ECBE C5          >                db      {b $} | END_BIT     // msb as name end
 939+ ECBF             >
 939+ ECBF B1 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 939+ ECC1             >Prev_Ptr        defl    Heap_Ptr
 939+ ECC1             >
 939+ ECC1             >mirror_Ptr      defl    $
 939+ ECC1             >
 939+ ECC1 85 80       >                dw      Dict_Ptr + 2        // xt
 939+ ECC3             >Heap_Ptr        defl    $ - $E000           // save current HP
 939+ ECC3             >
 939+ ECC3             >Current_HP      defl  $ - $E000             // used to set HP once!
 939+ ECC3             >
 939+ ECC3             >//              ______________________________________________________________________
 939+ ECC3             >//              Dictionary part
 939+ ECC3             >
 939+ ECC3             >                org     Dict_Ptr
 939+ 8083             >
 939+ 8083 C1 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 939+ 8085             >
 939+ 8085             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 939+ 8085 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 939+ 8088             >
 939+ 8088             >
 939+ 8088             >                endif           ; ok        // for other definitions it "points" the correct handler
 939+ 8088             >                // Use of "; ok" to suppress "warning[fwdref]"
 939+ 8088             >
 939+ 8088             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 940+ 8088 F7 7F                        dw      IF
 941+ 808A              //              dw      TWO_PLUS // ( that is 4 )
 942+ 808A 43 69                        dw      TWO_SWAP
 943+ 808C 3D 68                        dw      EXIT
 944+ 808E
 945+ 808E              //  ______________________________________________________________________
 946+ 808E              //
 947+ 808E              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 948+ 808E                              Colon_Def REPEAT, "REPEAT", is_immediate
 948+ 808E             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 948+ 808E             >
 948+ 808E             >Dict_Ptr        defl    $
 948+ 808E             >
 948+ 808E             >//              ______________________________________________________________________
 948+ 808E             >//              Heap part
 948+ 808E             >
 948+ 808E             >
 948+ 808E             >                org     (Heap_Ptr & $1FFF) + $E000
 948+ ECC3             >
 948+ ECC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ ECC3             >Latest_Definition defl  Heap_Ptr
 948+ ECC3             >
 948+ ECC3             >                // dummy db directives used to calculate length of namec
 948+ ECC3 52 45 50 45 >                db      "REPEAT"
 948+ ECC7 41 54       >
 948+ ECC9             >len_NFA         defl    $ - temp_NFA
 948+ ECC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ ECC3             >
 948+ ECC3 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ ECC4 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 948+ ECC8 41 54       >
 948+ ECCA             >                org     $-1                 // alter last byte of Name just above to set
 948+ ECC9 D4          >                db      {b $} | END_BIT     // msb as name end
 948+ ECCA             >
 948+ ECCA B9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 948+ ECCC             >Prev_Ptr        defl    Heap_Ptr
 948+ ECCC             >
 948+ ECCC             >mirror_Ptr      defl    $
 948+ ECCC             >
 948+ ECCC 90 80       >                dw      Dict_Ptr + 2        // xt
 948+ ECCE             >Heap_Ptr        defl    $ - $E000           // save current HP
 948+ ECCE             >
 948+ ECCE             >Current_HP      defl  $ - $E000             // used to set HP once!
 948+ ECCE             >
 948+ ECCE             >//              ______________________________________________________________________
 948+ ECCE             >//              Dictionary part
 948+ ECCE             >
 948+ ECCE             >                org     Dict_Ptr
 948+ 808E             >
 948+ 808E CC 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 948+ 8090             >
 948+ 8090             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 8090 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 8093             >
 948+ 8093             >
 948+ 8093             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 8093             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 8093             >
 948+ 8093             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 8093 56 80                        dw      AGAIN
 950+ 8095              //              dw      TWO_MINUS
 951+ 8095 0A 80                        dw      THEN
 952+ 8097 3D 68                        dw      EXIT
 953+ 8099
 954+ 8099              //  ______________________________________________________________________
 955+ 8099              //
 956+ 8099              // ?do-
 957+ 8099              // special version of "BACK" used by ?DO and LOOP
 958+ 8099                              Colon_Def C_DO_BACK, "?DO-", is_normal
 958+ 8099             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 958+ 8099             >
 958+ 8099             >Dict_Ptr        defl    $
 958+ 8099             >
 958+ 8099             >//              ______________________________________________________________________
 958+ 8099             >//              Heap part
 958+ 8099             >
 958+ 8099             >
 958+ 8099             >                org     (Heap_Ptr & $1FFF) + $E000
 958+ ECCE             >
 958+ ECCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 958+ ECCE             >Latest_Definition defl  Heap_Ptr
 958+ ECCE             >
 958+ ECCE             >                // dummy db directives used to calculate length of namec
 958+ ECCE 3F 44 4F 2D >                db      "?DO-"
 958+ ECD2             >len_NFA         defl    $ - temp_NFA
 958+ ECD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 958+ ECCE             >
 958+ ECCE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 958+ ECCF 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 958+ ECD3             >                org     $-1                 // alter last byte of Name just above to set
 958+ ECD2 AD          >                db      {b $} | END_BIT     // msb as name end
 958+ ECD3             >
 958+ ECD3 C3 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 958+ ECD5             >Prev_Ptr        defl    Heap_Ptr
 958+ ECD5             >
 958+ ECD5             >mirror_Ptr      defl    $
 958+ ECD5             >
 958+ ECD5 9B 80       >                dw      Dict_Ptr + 2        // xt
 958+ ECD7             >Heap_Ptr        defl    $ - $E000           // save current HP
 958+ ECD7             >
 958+ ECD7             >Current_HP      defl  $ - $E000             // used to set HP once!
 958+ ECD7             >
 958+ ECD7             >//              ______________________________________________________________________
 958+ ECD7             >//              Dictionary part
 958+ ECD7             >
 958+ ECD7             >                org     Dict_Ptr
 958+ 8099             >
 958+ 8099 D5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 958+ 809B             >
 958+ 809B             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 958+ 809B CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 958+ 809E             >
 958+ 809E             >
 958+ 809E             >                endif           ; ok        // for other definitions it "points" the correct handler
 958+ 809E             >                // Use of "; ok" to suppress "warning[fwdref]"
 958+ 809E             >
 958+ 809E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 959+ 809E EA 7F                        dw      BACK
 960+ 80A0              CDoBack_Begin:
 961+ 80A0 24 68 47 6B                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 961+ 80A4 72 69 C8 6B
 962+ 80A8 F3 63                        dw      ZBRANCH
 963+ 80AA 0A 00                        dw      CDoBack_While - $
 964+ 80AC B1 68 0A 80                  dw          TWO_PLUS, THEN
 965+ 80B0 EF 63                        dw      BRANCH
 966+ 80B2 EE FF                        dw      CDoBack_Begin - $
 967+ 80B4              CDoBack_While:
 968+ 80B4 05 6E 47 6B                  dw      QCSP, CSP, STORE
 968+ 80B8 7C 69
 969+ 80BA 3D 68                        dw      EXIT
 970+ 80BC
 971+ 80BC              //  ______________________________________________________________________
 972+ 80BC              //
 973+ 80BC              // do
 974+ 80BC              // DO  ... LOOP
 975+ 80BC              // DO  ... n +LOOP
 976+ 80BC              // ?DO ... LOOP
 977+ 80BC              // ?DO ... n +LOOP
 978+ 80BC                              Colon_Def DO, "DO", is_immediate
 978+ 80BC             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 978+ 80BC             >
 978+ 80BC             >Dict_Ptr        defl    $
 978+ 80BC             >
 978+ 80BC             >//              ______________________________________________________________________
 978+ 80BC             >//              Heap part
 978+ 80BC             >
 978+ 80BC             >
 978+ 80BC             >                org     (Heap_Ptr & $1FFF) + $E000
 978+ ECD7             >
 978+ ECD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ ECD7             >Latest_Definition defl  Heap_Ptr
 978+ ECD7             >
 978+ ECD7             >                // dummy db directives used to calculate length of namec
 978+ ECD7 44 4F       >                db      "DO"
 978+ ECD9             >len_NFA         defl    $ - temp_NFA
 978+ ECD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ ECD7             >
 978+ ECD7 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ ECD8 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 978+ ECDA             >                org     $-1                 // alter last byte of Name just above to set
 978+ ECD9 CF          >                db      {b $} | END_BIT     // msb as name end
 978+ ECDA             >
 978+ ECDA CE 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 978+ ECDC             >Prev_Ptr        defl    Heap_Ptr
 978+ ECDC             >
 978+ ECDC             >mirror_Ptr      defl    $
 978+ ECDC             >
 978+ ECDC BE 80       >                dw      Dict_Ptr + 2        // xt
 978+ ECDE             >Heap_Ptr        defl    $ - $E000           // save current HP
 978+ ECDE             >
 978+ ECDE             >Current_HP      defl  $ - $E000             // used to set HP once!
 978+ ECDE             >
 978+ ECDE             >//              ______________________________________________________________________
 978+ ECDE             >//              Dictionary part
 978+ ECDE             >
 978+ ECDE             >                org     Dict_Ptr
 978+ 80BC             >
 978+ 80BC DC 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 978+ 80BE             >
 978+ 80BE             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 80BE CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 80C1             >
 978+ 80C1             >
 978+ 80C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 80C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 80C1             >
 978+ 80C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 80C1 2D 6E 2C 64                  dw      COMPILE, C_DO
 980+ 80C5 47 6B 72 69                  dw      CSP, FETCH, STORE_CSP
 980+ 80C9 B0 6D
 981+ 80CB 89 6B 79 6A                  dw      HERE, THREE
 982+ 80CF 3D 68                        dw      EXIT
 983+ 80D1
 984+ 80D1              //  ______________________________________________________________________
 985+ 80D1              //
 986+ 80D1              // loop
 987+ 80D1                              Colon_Def LOOP, "LOOP", is_immediate
 987+ 80D1             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 987+ 80D1             >
 987+ 80D1             >Dict_Ptr        defl    $
 987+ 80D1             >
 987+ 80D1             >//              ______________________________________________________________________
 987+ 80D1             >//              Heap part
 987+ 80D1             >
 987+ 80D1             >
 987+ 80D1             >                org     (Heap_Ptr & $1FFF) + $E000
 987+ ECDE             >
 987+ ECDE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ ECDE             >Latest_Definition defl  Heap_Ptr
 987+ ECDE             >
 987+ ECDE             >                // dummy db directives used to calculate length of namec
 987+ ECDE 4C 4F 4F 50 >                db      "LOOP"
 987+ ECE2             >len_NFA         defl    $ - temp_NFA
 987+ ECE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ ECDE             >
 987+ ECDE C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ ECDF 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 987+ ECE3             >                org     $-1                 // alter last byte of Name just above to set
 987+ ECE2 D0          >                db      {b $} | END_BIT     // msb as name end
 987+ ECE3             >
 987+ ECE3 D7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 987+ ECE5             >Prev_Ptr        defl    Heap_Ptr
 987+ ECE5             >
 987+ ECE5             >mirror_Ptr      defl    $
 987+ ECE5             >
 987+ ECE5 D3 80       >                dw      Dict_Ptr + 2        // xt
 987+ ECE7             >Heap_Ptr        defl    $ - $E000           // save current HP
 987+ ECE7             >
 987+ ECE7             >Current_HP      defl  $ - $E000             // used to set HP once!
 987+ ECE7             >
 987+ ECE7             >//              ______________________________________________________________________
 987+ ECE7             >//              Dictionary part
 987+ ECE7             >
 987+ ECE7             >                org     Dict_Ptr
 987+ 80D1             >
 987+ 80D1 E5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 987+ 80D3             >
 987+ 80D3             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 80D3 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 80D6             >
 987+ 80D6             >
 987+ 80D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 80D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 80D6             >
 987+ 80D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 80D6 79 6A F6 6D                  dw      THREE, QPAIRS
 989+ 80DA 2D 6E E7 63                  dw      COMPILE, C_LOOP
 990+ 80DE 9B 80                        dw      C_DO_BACK
 991+ 80E0 3D 68                        dw      EXIT
 992+ 80E2
 993+ 80E2              //  ______________________________________________________________________
 994+ 80E2              //
 995+ 80E2              // +loop
 996+ 80E2                              Colon_Def PLOOP, "+LOOP", is_immediate
 996+ 80E2             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 996+ 80E2             >
 996+ 80E2             >Dict_Ptr        defl    $
 996+ 80E2             >
 996+ 80E2             >//              ______________________________________________________________________
 996+ 80E2             >//              Heap part
 996+ 80E2             >
 996+ 80E2             >
 996+ 80E2             >                org     (Heap_Ptr & $1FFF) + $E000
 996+ ECE7             >
 996+ ECE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ ECE7             >Latest_Definition defl  Heap_Ptr
 996+ ECE7             >
 996+ ECE7             >                // dummy db directives used to calculate length of namec
 996+ ECE7 2B 4C 4F 4F >                db      "+LOOP"
 996+ ECEB 50          >
 996+ ECEC             >len_NFA         defl    $ - temp_NFA
 996+ ECEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ ECE7             >
 996+ ECE7 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ ECE8 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 996+ ECEC 50          >
 996+ ECED             >                org     $-1                 // alter last byte of Name just above to set
 996+ ECEC D0          >                db      {b $} | END_BIT     // msb as name end
 996+ ECED             >
 996+ ECED DE 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 996+ ECEF             >Prev_Ptr        defl    Heap_Ptr
 996+ ECEF             >
 996+ ECEF             >mirror_Ptr      defl    $
 996+ ECEF             >
 996+ ECEF E4 80       >                dw      Dict_Ptr + 2        // xt
 996+ ECF1             >Heap_Ptr        defl    $ - $E000           // save current HP
 996+ ECF1             >
 996+ ECF1             >Current_HP      defl  $ - $E000             // used to set HP once!
 996+ ECF1             >
 996+ ECF1             >//              ______________________________________________________________________
 996+ ECF1             >//              Dictionary part
 996+ ECF1             >
 996+ ECF1             >                org     Dict_Ptr
 996+ 80E2             >
 996+ 80E2 EF 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 996+ 80E4             >
 996+ 80E4             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 80E4 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 80E7             >
 996+ 80E7             >
 996+ 80E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 80E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 80E7             >
 996+ 80E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 80E7 79 6A F6 6D                  dw      THREE, QPAIRS
 998+ 80EB 2D 6E B1 63                  dw      COMPILE, C_PLOOP
 999+ 80EF 9B 80                        dw      C_DO_BACK
1000+ 80F1 3D 68                        dw      EXIT
1001+ 80F3
1002+ 80F3              //  ______________________________________________________________________
1003+ 80F3              //
1004+ 80F3              // ?do
1005+ 80F3                              Colon_Def QDO, "?DO", is_immediate
1005+ 80F3             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1005+ 80F3             >
1005+ 80F3             >Dict_Ptr        defl    $
1005+ 80F3             >
1005+ 80F3             >//              ______________________________________________________________________
1005+ 80F3             >//              Heap part
1005+ 80F3             >
1005+ 80F3             >
1005+ 80F3             >                org     (Heap_Ptr & $1FFF) + $E000
1005+ ECF1             >
1005+ ECF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ ECF1             >Latest_Definition defl  Heap_Ptr
1005+ ECF1             >
1005+ ECF1             >                // dummy db directives used to calculate length of namec
1005+ ECF1 3F 44 4F    >                db      "?DO"
1005+ ECF4             >len_NFA         defl    $ - temp_NFA
1005+ ECF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ ECF1             >
1005+ ECF1 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ ECF2 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1005+ ECF5             >                org     $-1                 // alter last byte of Name just above to set
1005+ ECF4 CF          >                db      {b $} | END_BIT     // msb as name end
1005+ ECF5             >
1005+ ECF5 E7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1005+ ECF7             >Prev_Ptr        defl    Heap_Ptr
1005+ ECF7             >
1005+ ECF7             >mirror_Ptr      defl    $
1005+ ECF7             >
1005+ ECF7 F5 80       >                dw      Dict_Ptr + 2        // xt
1005+ ECF9             >Heap_Ptr        defl    $ - $E000           // save current HP
1005+ ECF9             >
1005+ ECF9             >Current_HP      defl  $ - $E000             // used to set HP once!
1005+ ECF9             >
1005+ ECF9             >//              ______________________________________________________________________
1005+ ECF9             >//              Dictionary part
1005+ ECF9             >
1005+ ECF9             >                org     Dict_Ptr
1005+ 80F3             >
1005+ 80F3 F7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1005+ 80F5             >
1005+ 80F5             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 80F5 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1005+ 80F8             >
1005+ 80F8             >
1005+ 80F8             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 80F8             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 80F8             >
1005+ 80F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 80F8 2D 6E 06 64                  dw      COMPILE, C_Q_DO
1007+ 80FC 47 6B 72 69                  dw      CSP, FETCH, STORE_CSP
1007+ 8100 B0 6D
1008+ 8102 89 6B 64 6A                  dw      HERE, ZERO, COMMA, ZERO
1008+ 8106 9F 6B 64 6A
1009+ 810A 89 6B 79 6A                  dw      HERE, THREE
1010+ 810E 3D 68                        dw      EXIT
1011+ 8110
1012+ 8110              //  ______________________________________________________________________
1013+ 8110              //
1014+ 8110              // \
1015+ 8110                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1015+ 8110             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1015+ 8110             >
1015+ 8110             >Dict_Ptr        defl    $
1015+ 8110             >
1015+ 8110             >//              ______________________________________________________________________
1015+ 8110             >//              Heap part
1015+ 8110             >
1015+ 8110             >
1015+ 8110             >                org     (Heap_Ptr & $1FFF) + $E000
1015+ ECF9             >
1015+ ECF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1015+ ECF9             >Latest_Definition defl  Heap_Ptr
1015+ ECF9             >
1015+ ECF9             >                // dummy db directives used to calculate length of namec
1015+ ECF9 5C          >                db      "\\"
1015+ ECFA             >len_NFA         defl    $ - temp_NFA
1015+ ECFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1015+ ECF9             >
1015+ ECF9 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1015+ ECFA 5C          >                db      "\\"               // name string in 7-bit ascii, but
1015+ ECFB             >                org     $-1                 // alter last byte of Name just above to set
1015+ ECFA DC          >                db      {b $} | END_BIT     // msb as name end
1015+ ECFB             >
1015+ ECFB F1 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1015+ ECFD             >Prev_Ptr        defl    Heap_Ptr
1015+ ECFD             >
1015+ ECFD             >mirror_Ptr      defl    $
1015+ ECFD             >
1015+ ECFD 12 81       >                dw      Dict_Ptr + 2        // xt
1015+ ECFF             >Heap_Ptr        defl    $ - $E000           // save current HP
1015+ ECFF             >
1015+ ECFF             >Current_HP      defl  $ - $E000             // used to set HP once!
1015+ ECFF             >
1015+ ECFF             >//              ______________________________________________________________________
1015+ ECFF             >//              Dictionary part
1015+ ECFF             >
1015+ ECFF             >                org     Dict_Ptr
1015+ 8110             >
1015+ 8110 FD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1015+ 8112             >
1015+ 8112             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1015+ 8112 CD 0F 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1015+ 8115             >
1015+ 8115             >
1015+ 8115             >                endif           ; ok        // for other definitions it "points" the correct handler
1015+ 8115             >                // Use of "; ok" to suppress "warning[fwdref]"
1015+ 8115             >
1015+ 8115             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1016+ 8115 05 6B 72 69                  dw      BLK, FETCH
1017+ 8119 AA 68                        dw      ONE_SUBTRACT // BLOCK 1 is used as temp-line in INCLUDE file
1018+ 811B F3 63                        dw      ZBRANCH
1019+ 811D 34 00                        dw      Backslash_Else_1 - $
1020+ 811F
1021+ 811F 05 6B 72 69                  dw          BLK, FETCH
1022+ 8123 F3 63                        dw          ZBRANCH
1023+ 8125 1A 00                        dw          Backslash_Else_2 - $
1024+ 8127
1025+ 8127 0B 6B 72 69                  dw              TO_IN, FETCH, CL, ONE_SUBTRACT, AND_OP, CL
1025+ 812B 8E 6A AA 68
1025+ 812F FD 67 8E 6A
1026+ 8133 01 69 C8 6B                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1026+ 8137 0B 6B 5A 69
1027+ 813B EF 63                        dw          BRANCH
1028+ 813D 10 00                        dw          Backslash_Endif_2 - $
1029+ 813F              Backslash_Else_2:
1030+ 813F 64 6A C9 6A                  dw              ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, CSTORE
1030+ 8143 72 69 0B 6B
1030+ 8147 72 69 8A 68
1030+ 814B 90 69
1031+ 814D              Backslash_Endif_2:
1032+ 814D EF 63                        dw      BRANCH
1033+ 814F 0A 00                        dw      Backslash_Endif_1 - $
1034+ 8151              Backslash_Else_1:
1035+ 8151 95 6A BD 68                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1035+ 8155 0B 6B 7C 69
1036+ 8159              Backslash_Endif_1:
1037+ 8159 3D 68                        dw      EXIT
1038+ 815B
1039+ 815B              Fence_Word:
1040+ 815B              //  ______________________________________________________________________
1041+ 815B              //
1042+ 815B
1043+ 815B 00           Here_Dictionary db      0
1044+ 815C
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/L3.asm
 153  815C
 154  815C              // now we save the compiled file so we can either run it or debug it
 155  815C              //              SAVENEX OPEN "output/forth17.nex", ORIGIN, S0_system
 156  815C              //              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 157  815C              //              SAVENEX CFG  7, 0
 158  815C              //              SAVENEX BANK 5,2,0,1,16
 159  815C              //              SAVENEX BANK 5,2,0,1,3,4,6,7, 16,17,18,19
 160  815C              //              SAVENEX AUTO
 161  815C              //              SAVENEX CLOSE
 162  815C
 163  815C              //              PAGE 7 ;set 7 page to current slot
 164  815C              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 165  815C              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 166  815C
 167  815C              //              SAVETAP "output/F16d.tap", CODE, "forth18d", ORIGIN, 9999
 168  815C              //              SAVETAP "output/F16e.tap", CODE, "forth18e", $E000, $2000
 169  815C
 170  815C                              SAVEBIN "output/forth18e.bin", ORIGIN, 9999
 171  815C                              SAVEBIN "output/ram8.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 172  815C
 173  815C                              // To load on ZX Spectrum Next you have to type
 174  815C                              //      LOAD "ram7.bin" BANK 16
 175  815C                              //      LOAD "forth18e.bin" CODE
 176  815C
 177  815C                              END
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/main.asm
