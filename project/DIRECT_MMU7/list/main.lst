# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  build 20230809
   8  0000              //
   9  0000              //  Direct-Threaded version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2023
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     0
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  68  0000 ~            ORIGIN          equ     39844 - $80               // for binary comparison with single compilation
  69  0000 ~            Heap_Ptr        defl    -6                      // HP before compilation
  70  0000 ~            Heap_offset     defl     $2000
  71  0000 ~
  72  0000                              endif
  73  0000              //  ______________________________________________________________________
  74  0000
  75  0000                              if (  0 == DEBUGGING )
  76  0000              ORIGIN          equ     $6366                   // binary and Tape
  77  0000              // ORIGIN          equ     $9A93                // binary and Tape
  78  0000              Heap_Ptr        defl    $0002
  79  0000              Heap_offset     defl     0
  80  0000
  81  0000                              endif
  82  0000              //  ______________________________________________________________________
  83  0000
  84  0000                              if (  1 == DEBUGGING )
  85  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  86  0000 ~            Heap_Ptr        defl    $0002
  87  0000 ~            Heap_offset     defl     0
  88  0000 ~
  89  0000                              endif
  90  0000              //  ______________________________________________________________________
  91  0000
  92  0000                              DEVICE  ZXSPECTRUMNEXT
  93  0000
  94  0000                              ORG     ORIGIN
  95  6366
  96  6366                              if ( -1 == DEBUGGING )
  97  6366 ~                            ds 128                            // for binary comparison
  98  6366                              endif
  99  6366
 100  6366              //  ______________________________________________________________________
 101  6366              //
 102  6366              //  Naming convention for Label vs Forth correspondance
 103  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 104  6366              //    - Leading "0" is converted into "Z_"
 105  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
 106  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 107  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 108  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 109  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 110  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 111  6366              //    - Equal sign "=" is converted in EQUAL
 112  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 113  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 114  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 115  6366              //    - Exclamation mark "!" is converted in STORE
 116  6366              //    - At-Sign "@" is converted in FETCH
 117  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 118  6366
 119  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              Dict_Ptr        defl    0
  94+ 6366              // Heap_Ptr        defl    $0002
  95+ 6366              Prev_Ptr        defl    0
  96+ 6366              mirror_Ptr      defl    0
  97+ 6366
  98+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  99+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
 100+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 101+ 6366
 102+ 6366              //  ______________________________________________________________________
 103+ 6366              //
 104+ 6366              //  Create a new "low-level" definition
 105+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 106+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 107+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 108+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 109+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 110+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 111+ 6366              //  This macro acts much like the standard Forth definition CREATE
 112+ 6366
 113+ 6366              New_Def         macro   label, namec, runcode, bits
 114+ 6366 ~
 115+ 6366 ~            Dict_Ptr        defl    $
 116+ 6366 ~
 117+ 6366 ~            //              ______________________________________________________________________
 118+ 6366 ~            //              Heap part
 119+ 6366 ~
 120+ 6366 ~
 121+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 122+ 6366 ~
 123+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6366 ~            Latest_Definition defl  Heap_Ptr
 125+ 6366 ~
 126+ 6366 ~                            // dummy db directives used to calculate length of namec
 127+ 6366 ~                            db      namec
 128+ 6366 ~            len_NFA         defl    $ - temp_NFA
 129+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 130+ 6366 ~
 131+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 133+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 134+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 135+ 6366 ~
 136+ 6366 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 137+ 6366 ~            Prev_Ptr        defl    Heap_Ptr
 138+ 6366 ~
 139+ 6366 ~            mirror_Ptr      defl    $
 140+ 6366 ~
 141+ 6366 ~                            dw      Dict_Ptr + 2        // xt
 142+ 6366 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 143+ 6366 ~
 144+ 6366 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 145+ 6366 ~
 146+ 6366 ~            //              ______________________________________________________________________
 147+ 6366 ~            //              Dictionary part
 148+ 6366 ~
 149+ 6366 ~                            org     Dict_Ptr
 150+ 6366 ~
 151+ 6366 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 152+ 6366 ~
 153+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 155+ 6366 ~
 156+ 6366 ~
 157+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6366 ~
 160+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6366                              endm
 162+ 6366
 163+ 6366              //  ______________________________________________________________________
 164+ 6366              //
 165+ 6366              // Create a "constant"
 166+ 6366              // The constant value is compiled in first PFA cell
 167+ 6366              Constant_Def    macro   label, namec, constant_value
 168+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 169+ 6366 ~                            dw      constant_value
 170+ 6366                              endm
 171+ 6366
 172+ 6366              //  ______________________________________________________________________
 173+ 6366              //
 174+ 6366              // Create a "variable"
 175+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 176+ 6366              // this allow creation of "variables" which content is  of any length
 177+ 6366              Variable_Def    macro   label, namec, initial_value
 178+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 179+ 6366 ~                            dw      initial_value
 180+ 6366                              endm
 181+ 6366
 182+ 6366              //  ______________________________________________________________________
 183+ 6366              //
 184+ 6366              // Create a "user"
 185+ 6366              // It uses a single byte as offset to calculate the address of the variable
 186+ 6366              User_Def        macro   label, namec, offset_value
 187+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 188+ 6366 ~                            db      offset_value
 189+ 6366                              endm
 190+ 6366
 191+ 6366              //  ______________________________________________________________________
 192+ 6366              //
 193+ 6366              // Create a "colon-definition"
 194+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 195+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 196+ 6366              Colon_Def       macro   label, namec, bits
 197+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 198+ 6366                              endm
 199+ 6366
 200+ 6366              //  ______________________________________________________________________
 201+ 6366              //
 202+ 6366              // Create a "heap-string"
 203+ 6366              Start_Heap      macro
 204+ 6366 ~            temp_ORG        defl    $                   // save this ORG
 205+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 206+ 6366 ~
 207+ 6366                              endm
 208+ 6366
 209+ 6366              End_Heap        macro
 210+ 6366 ~            Heap_Ptr        defl    $ - $E000
 211+ 6366 ~                            org     temp_ORG
 212+ 6366 ~
 213+ 6366                              endm
 214+ 6366
 215+ 6366
 216+ 6366              //  ______________________________________________________________________
 217+ 6366              //
 218+ 6366
 219+ 6366
 220+ 6366
 221+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 222+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 223+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 224+ 6366              USER_system:    equ     $D188               // User variables zone.
 225+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 226+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 227+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
 120  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366              Cold_origin:
   9+ 6366 A7                           and     a
  10+ 6367 C3 18 76                     jp      ColdRoutine
  11+ 636A              Warm_origin:
  12+ 636A 37                           scf
  13+ 636B C3 18 76                     jp      WarmRoutine
  14+ 636E
  15+ 636E              // +008
  16+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  17+ 6370
  18+ 6370              // +00A
  19+ 6370 00 0E                        dw      $0E00
  20+ 6372
  21+ 6372              // +00C
  22+ 6372 12 0D        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 6374
  24+ 6374              // +00E
  25+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 6376
  27+ 6376              // +010
  28+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 6378
  30+ 6378              // +012
  31+ 6378 E8 D0        S0_origin:      dw      S0_system
  32+ 637A 88 D1        R0_origin:      dw      R0_system
  33+ 637C E8 D0        TIB_origin:     dw      TIB_system
  34+ 637E 1F 00        WIDTH_origin:   dw      31
  35+ 6380 01 00        WARNING_origin: dw      1
  36+ 6382 59 81        FENCE_origin:   dw      Fence_Word
  37+ 6384 59 81        DP_origin       dw      Fence_Word
  38+ 6386 49 75        VOCLINK_origin: dw      Voclink_Ptr
  39+ 6388 E4 D1                        dw      FIRST_system
  40+ 638A 00 E0                        dw      LIMIT_system
  41+ 638C 18 0D        HP_origin:      dw      Current_HP
  42+ 638E
  43+ 638E              // +028
  44+ 638E 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638F 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6390 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6391 00                           db      0
  48+ 6392
  49+ 6392              // +02C
  50+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  51+ 6394
  52+ 6394              // +02E
  53+ 6394 88 D1        USER_Pointer:   dw      USER_system
  54+ 6396
  55+ 6396              // +030
  56+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 6398
  58+ 6398              // +32
  59+ 6398 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 639A
  61+ 639A
  62+ 639A                              Start_Heap
  62+ 639A             >temp_ORG        defl    $                   // save this ORG
  62+ 639A             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002 78                           db      120
  65+ E003 20 20 20 20                  db      "    v-Forth 1.7 - NextZXOS version ", $0D      // 36
  65+ E007 76 2D 46 6F
  65+ E00B 72 74 68 20
  65+ E00F 31 2E 37 20
  65+ E013 2D 20 4E 65
  65+ E017 78 74 5A 58
  65+ E01B 4F 53 20 76
  65+ E01F 65 72 73 69
  65+ E023 6F 6E 20 0D
  66+ E027 20 20 20 20                  db      "    Heap Vocabulary - build 2023-08-09 ", $0D  // 40
  66+ E02B 48 65 61 70
  66+ E02F 20 56 6F 63
  66+ E033 61 62 75 6C
  66+ E037 61 72 79 20
  66+ E03B 2D 20 62 75
  66+ E03F 69 6C 64 20
  66+ E043 32 30 32 33
  66+ E047 2D 30 38 2D
  66+ E04B 30 39 20 0D
  67+ E04F 20 20 20 20                  db      "    MIT License ", 127                         // 17
  67+ E053 4D 49 54 20
  67+ E057 4C 69 63 65
  67+ E05B 6E 73 65 20
  67+ E05F 7F
  68+ E060 20 31 39 39                  db      " 1990-2023 Matteo Vitturi ", $0D               // 27
  68+ E064 30 2D 32 30
  68+ E068 32 33 20 4D
  68+ E06C 61 74 74 65
  68+ E070 6F 20 56 69
  68+ E074 74 74 75 72
  68+ E078 69 20 0D
  69+ E07B 20                           db      " "
  70+ E07C                              End_Heap
  70+ E07C             >Heap_Ptr        defl    $ - $E000
  70+ E07C             >                org     temp_ORG
  70+ 639A             >
  71+ 639A
  72+ 639A              //  ______________________________________________________________________
  73+ 639A
  74+ 639A              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 639A              // instead of their equivalent long sequences.
  76+ 639A
  77+ 639A              //  ______________________________________________________________________
  78+ 639A
  79+ 639A              // address for "next" - inner interpreter
  80+ 639A              // This address must always be pointed by IX
  81+ 639A              // "next" macro simply does a  jp(ix)  instruction
  82+ 639A
  83+ 639A              // Psh2_Ptr:       push    de
  84+ 639A              // Psh1_Ptr:       push    hl
  85+ 639A
  86+ 639A              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 639A
  88+ 639A                              if ( 1 == DEBUGGING )
  89+ 639A ~                            ld      hl, Next_Breakpoint_1
  90+ 639A ~                            and     a
  91+ 639A ~                            sbc     hl, bc
  92+ 639A ~                            jr      nz, Next_Continue
  93+ 639A ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 639A                              endif
  95+ 639A
  96+ 639A              Next_Continue:
  97+ 639A 0A                           ld      a, (bc)
  98+ 639B 03                           inc     bc
  99+ 639C 6F                           ld      l, a
 100+ 639D 0A                           ld      a, (bc)
 101+ 639E 03                           inc     bc
 102+ 639F 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 63A0
 104+ 63A0              // Execute xt i.e. CFA held in HL
 105+ 63A0              Exec_Ptr:
 106+ 63A0
 107+ 63A0
 108+ 63A0
 109+ 63A0
 110+ 63A0 E9                           jp      (hl)                // and jump to it
 111+ 63A1                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 63A1
 113+ 63A1              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 63A1              // 0x00         n --      ( compile time )
 115+ 63A1              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 63A1              //              next
 117+ 63A1
 118+ 63A1              //  ______________________________________________________________________
 119+ 63A1              //
 120+ 63A1              // lit          -- x
 121+ 63A1              // puts on top of stack the value of the following word.
 122+ 63A1              // it is compiled in colon definition before a literal number
 123+ 63A1
 124+ 63A1                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 63A1             >
 124+ 63A1             >Dict_Ptr        defl    $
 124+ 63A1             >
 124+ 63A1             >//              ______________________________________________________________________
 124+ 63A1             >//              Heap part
 124+ 63A1             >
 124+ 63A1             >
 124+ 63A1             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E07C             >
 124+ E07C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E07C             >Latest_Definition defl  Heap_Ptr
 124+ E07C             >
 124+ E07C             >                // dummy db directives used to calculate length of namec
 124+ E07C 4C 49 54    >                db      "LIT"
 124+ E07F             >len_NFA         defl    $ - temp_NFA
 124+ E07F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E07C             >
 124+ E07C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E07D 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E080             >                org     $-1                 // alter last byte of Name just above to set
 124+ E07F D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E080             >
 124+ E080 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E082             >Prev_Ptr        defl    Heap_Ptr
 124+ E082             >
 124+ E082             >mirror_Ptr      defl    $
 124+ E082             >
 124+ E082 A3 63       >                dw      Dict_Ptr + 2        // xt
 124+ E084             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E084             >
 124+ E084             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E084             >
 124+ E084             >//              ______________________________________________________________________
 124+ E084             >//              Dictionary part
 124+ E084             >
 124+ E084             >                org     Dict_Ptr
 124+ 63A1             >
 124+ 63A1 82 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 63A3             >
 124+ 63A3             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 63A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 63A3 ~           >
 124+ 63A3 ~           >
 124+ 63A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 63A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 63A3             >
 124+ 63A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 63A3
 126+ 63A3 0A                           ld      a, (bc)
 127+ 63A4 03                           inc     bc
 128+ 63A5 6F                           ld      l, a
 129+ 63A6 0A                           ld      a, (bc)
 130+ 63A7 03                           inc     bc
 131+ 63A8 67                           ld      h, a
 132+ 63A9 E5                           push    hl
 133+ 63AA                              next
 133+ 63AA DD E9       >                jp      (ix)
 134+ 63AC
 135+ 63AC              //  ______________________________________________________________________
 136+ 63AC              //
 137+ 63AC              // execute      i*x xt -- j*x
 138+ 63AC              // execution token. usually xt is given by CFA
 139+ 63AC
 140+ 63AC                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 63AC             >
 140+ 63AC             >Dict_Ptr        defl    $
 140+ 63AC             >
 140+ 63AC             >//              ______________________________________________________________________
 140+ 63AC             >//              Heap part
 140+ 63AC             >
 140+ 63AC             >
 140+ 63AC             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E084             >
 140+ E084             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E084             >Latest_Definition defl  Heap_Ptr
 140+ E084             >
 140+ E084             >                // dummy db directives used to calculate length of namec
 140+ E084 45 58 45 43 >                db      "EXECUTE"
 140+ E088 55 54 45    >
 140+ E08B             >len_NFA         defl    $ - temp_NFA
 140+ E08B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E084             >
 140+ E084 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E085 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E089 55 54 45    >
 140+ E08C             >                org     $-1                 // alter last byte of Name just above to set
 140+ E08B C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E08C             >
 140+ E08C 7C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E08E             >Prev_Ptr        defl    Heap_Ptr
 140+ E08E             >
 140+ E08E             >mirror_Ptr      defl    $
 140+ E08E             >
 140+ E08E AE 63       >                dw      Dict_Ptr + 2        // xt
 140+ E090             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E090             >
 140+ E090             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E090             >
 140+ E090             >//              ______________________________________________________________________
 140+ E090             >//              Dictionary part
 140+ E090             >
 140+ E090             >                org     Dict_Ptr
 140+ 63AC             >
 140+ 63AC 8E 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 63AE             >
 140+ 63AE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 63AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 63AE ~           >
 140+ 63AE ~           >
 140+ 63AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 63AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 63AE             >
 140+ 63AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 63AE C9                           ret
 142+ 63AF
 143+ 63AF              //  ______________________________________________________________________
 144+ 63AF              //
 145+ 63AF              // brk
 146+ 63AF              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 63AF              //              next
 148+ 63AF
 149+ 63AF
 150+ 63AF
 151+ 63AF              //  ______________________________________________________________________
 152+ 63AF              //
 153+ 63AF              // (+loop)      n --
 154+ 63AF              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 63AF              // keep track of index and limit, they are accessed via I and I'
 156+ 63AF              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 63AF              // between the loop limit minus one and the loop limit, continue execution
 158+ 63AF              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 63AF              // parameters and continue execution immediately following the loop.
 160+ 63AF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 63AF             >
 160+ 63AF             >Dict_Ptr        defl    $
 160+ 63AF             >
 160+ 63AF             >//              ______________________________________________________________________
 160+ 63AF             >//              Heap part
 160+ 63AF             >
 160+ 63AF             >
 160+ 63AF             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E090             >
 160+ E090             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E090             >Latest_Definition defl  Heap_Ptr
 160+ E090             >
 160+ E090             >                // dummy db directives used to calculate length of namec
 160+ E090 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E094 4F 50 29    >
 160+ E097             >len_NFA         defl    $ - temp_NFA
 160+ E097             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E090             >
 160+ E090 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E091 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E095 4F 50 29    >
 160+ E098             >                org     $-1                 // alter last byte of Name just above to set
 160+ E097 A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E098             >
 160+ E098 84 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E09A             >Prev_Ptr        defl    Heap_Ptr
 160+ E09A             >
 160+ E09A             >mirror_Ptr      defl    $
 160+ E09A             >
 160+ E09A B1 63       >                dw      Dict_Ptr + 2        // xt
 160+ E09C             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E09C             >
 160+ E09C             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E09C             >
 160+ E09C             >//              ______________________________________________________________________
 160+ E09C             >//              Dictionary part
 160+ E09C             >
 160+ E09C             >                org     Dict_Ptr
 160+ 63AF             >
 160+ 63AF 9A 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 63B1             >
 160+ 63B1             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 63B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 63B1 ~           >
 160+ 63B1 ~           >
 160+ 63B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 63B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 63B1             >
 160+ 63B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 63B1
 162+ 63B1              Loop_Ptr:
 163+ 63B1 E1                           pop     hl                  // get increment
 164+ 63B2 EB                           ex      de, hl
 165+ 63B3                              // *** ldhlrp
 166+ 63B3 C5                           push    bc                  // Save IP
 167+ 63B4 42                           ld      b, d                // bc is increment
 168+ 63B5 4B                           ld      c, e
 169+ 63B6 E5                           push    hl
 170+ 63B7 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 63B8 7B                           ld      a, e                // de keeps index before increment.
 172+ 63B9 81                           add     c
 173+ 63BA 77                           ld      (hl), a
 174+ 63BB 23                           inc     hl
 175+ 63BC 56                           ld      d, (hl)
 176+ 63BD 7A                           ld      a, d
 177+ 63BE 88                           adc     b
 178+ 63BF 77                           ld      (hl),a
 179+ 63C0 23                           inc     hl
 180+ 63C1
 181+ 63C1 7B                           ld      a, e
 182+ 63C2 96                           sub     (hl)
 183+ 63C3 5F                           ld      e, a
 184+ 63C4 23                           inc     hl
 185+ 63C5 7A                           ld      a, d
 186+ 63C6 9E                           sbc     (hl)
 187+ 63C7 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 63C8
 189+ 63C8 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 63C9 09                           add     hl, bc
 191+ 63CA CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 63CC 28 01                        jr      z, Loop_NegativeIncrement
 193+ 63CE 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 63CF              Loop_NegativeIncrement:
 195+ 63CF 38 04                        jr      c, Loop_Endif
 196+ 63D1 D1                               pop     de              // Discard RP+3, retrieve original RP
 197+ 63D2 C1                               pop     bc                  // Retrieve IP
 198+ 63D3 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 199+ 63D5              Loop_Endif:
 200+ 63D5 C1                           pop     bc                  // discard original RP
 201+ 63D6 EB                           ex      de, hl
 202+ 63D7 23                           inc     hl                  // keep    RP+4 (exit from loop)
 203+ 63D8                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 204+ 63D8 EB                           ex      de, hl
 205+ 63D9 C1                           pop     bc                  // Retrieve IP
 206+ 63DA 03                           inc     bc                  // skip branch-style offset
 207+ 63DB 03                           inc     bc
 208+ 63DC                              next
 208+ 63DC DD E9       >                jp      (ix)
 209+ 63DE
 210+ 63DE              //  ______________________________________________________________________
 211+ 63DE              //
 212+ 63DE              // (loop)       n --
 213+ 63DE              // same as (LOOP) but index is incremented by 1
 214+ 63DE              // compiled by LOOP.
 215+ 63DE                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 215+ 63DE             >
 215+ 63DE             >Dict_Ptr        defl    $
 215+ 63DE             >
 215+ 63DE             >//              ______________________________________________________________________
 215+ 63DE             >//              Heap part
 215+ 63DE             >
 215+ 63DE             >
 215+ 63DE             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E09C             >
 215+ E09C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E09C             >Latest_Definition defl  Heap_Ptr
 215+ E09C             >
 215+ E09C             >                // dummy db directives used to calculate length of namec
 215+ E09C 28 4C 4F 4F >                db      "(LOOP)"
 215+ E0A0 50 29       >
 215+ E0A2             >len_NFA         defl    $ - temp_NFA
 215+ E0A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E09C             >
 215+ E09C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E09D 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 215+ E0A1 50 29       >
 215+ E0A3             >                org     $-1                 // alter last byte of Name just above to set
 215+ E0A2 A9          >                db      {b $} | END_BIT     // msb as name end
 215+ E0A3             >
 215+ E0A3 90 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E0A5             >Prev_Ptr        defl    Heap_Ptr
 215+ E0A5             >
 215+ E0A5             >mirror_Ptr      defl    $
 215+ E0A5             >
 215+ E0A5 E0 63       >                dw      Dict_Ptr + 2        // xt
 215+ E0A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E0A7             >
 215+ E0A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E0A7             >
 215+ E0A7             >//              ______________________________________________________________________
 215+ E0A7             >//              Dictionary part
 215+ E0A7             >
 215+ E0A7             >                org     Dict_Ptr
 215+ 63DE             >
 215+ 63DE A5 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 63E0             >
 215+ 63E0             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 63E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 215+ 63E0 ~           >
 215+ 63E0 ~           >
 215+ 63E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 63E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 63E0             >
 215+ 63E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 63E0 ED 8A 00 01                  push    1
 217+ 63E4 18 CB                        jr      Loop_Ptr
 218+ 63E6
 219+ 63E6              //  ______________________________________________________________________
 220+ 63E6              //
 221+ 63E6              // branch       --
 222+ 63E6              // unconditional branch in colon definition using the following cell as an offset from current IP value
 223+ 63E6              // compiled by ELSE, AGAIN and some other immediate words
 224+ 63E6
 225+ 63E6                              New_Def BRANCH, "BRANCH", is_code, is_normal
 225+ 63E6             >
 225+ 63E6             >Dict_Ptr        defl    $
 225+ 63E6             >
 225+ 63E6             >//              ______________________________________________________________________
 225+ 63E6             >//              Heap part
 225+ 63E6             >
 225+ 63E6             >
 225+ 63E6             >                org     (Heap_Ptr & $1FFF) + $E000
 225+ E0A7             >
 225+ E0A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ E0A7             >Latest_Definition defl  Heap_Ptr
 225+ E0A7             >
 225+ E0A7             >                // dummy db directives used to calculate length of namec
 225+ E0A7 42 52 41 4E >                db      "BRANCH"
 225+ E0AB 43 48       >
 225+ E0AD             >len_NFA         defl    $ - temp_NFA
 225+ E0AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ E0A7             >
 225+ E0A7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ E0A8 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 225+ E0AC 43 48       >
 225+ E0AE             >                org     $-1                 // alter last byte of Name just above to set
 225+ E0AD C8          >                db      {b $} | END_BIT     // msb as name end
 225+ E0AE             >
 225+ E0AE 9C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 225+ E0B0             >Prev_Ptr        defl    Heap_Ptr
 225+ E0B0             >
 225+ E0B0             >mirror_Ptr      defl    $
 225+ E0B0             >
 225+ E0B0 E8 63       >                dw      Dict_Ptr + 2        // xt
 225+ E0B2             >Heap_Ptr        defl    $ - $E000           // save current HP
 225+ E0B2             >
 225+ E0B2             >Current_HP      defl  $ - $E000             // used to set HP once!
 225+ E0B2             >
 225+ E0B2             >//              ______________________________________________________________________
 225+ E0B2             >//              Dictionary part
 225+ E0B2             >
 225+ E0B2             >                org     Dict_Ptr
 225+ 63E6             >
 225+ 63E6 B0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 225+ 63E8             >
 225+ 63E8             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 63E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 63E8 ~           >
 225+ 63E8 ~           >
 225+ 63E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 63E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 63E8             >
 225+ 63E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 63E8              Branch_Ptr:
 227+ 63E8 0A                           ld      a, (bc)
 228+ 63E9 6F                           ld      l, a
 229+ 63EA 03                           inc     bc
 230+ 63EB 0A                           ld      a, (bc)
 231+ 63EC 67                           ld      h, a
 232+ 63ED 0B                           dec     bc
 233+ 63EE 09                           add     hl, bc
 234+ 63EF 4D                           ld      c, l
 235+ 63F0 44                           ld      b, h
 236+ 63F1                              next
 236+ 63F1 DD E9       >                jp      (ix)
 237+ 63F3
 238+ 63F3
 239+ 63F3              //  ______________________________________________________________________
 240+ 63F3              //
 241+ 63F3              // 0branch      f --
 242+ 63F3              // conditional branch if the top-of-stack is ZERO or FALSE.
 243+ 63F3              // compiled by IF, UNTIL and some other immediate words
 244+ 63F3
 245+ 63F3                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 245+ 63F3             >
 245+ 63F3             >Dict_Ptr        defl    $
 245+ 63F3             >
 245+ 63F3             >//              ______________________________________________________________________
 245+ 63F3             >//              Heap part
 245+ 63F3             >
 245+ 63F3             >
 245+ 63F3             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E0B2             >
 245+ E0B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E0B2             >Latest_Definition defl  Heap_Ptr
 245+ E0B2             >
 245+ E0B2             >                // dummy db directives used to calculate length of namec
 245+ E0B2 30 42 52 41 >                db      "0BRANCH"
 245+ E0B6 4E 43 48    >
 245+ E0B9             >len_NFA         defl    $ - temp_NFA
 245+ E0B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E0B2             >
 245+ E0B2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E0B3 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 245+ E0B7 4E 43 48    >
 245+ E0BA             >                org     $-1                 // alter last byte of Name just above to set
 245+ E0B9 C8          >                db      {b $} | END_BIT     // msb as name end
 245+ E0BA             >
 245+ E0BA A7 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E0BC             >Prev_Ptr        defl    Heap_Ptr
 245+ E0BC             >
 245+ E0BC             >mirror_Ptr      defl    $
 245+ E0BC             >
 245+ E0BC F5 63       >                dw      Dict_Ptr + 2        // xt
 245+ E0BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E0BE             >
 245+ E0BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E0BE             >
 245+ E0BE             >//              ______________________________________________________________________
 245+ E0BE             >//              Dictionary part
 245+ E0BE             >
 245+ E0BE             >                org     Dict_Ptr
 245+ 63F3             >
 245+ 63F3 BC 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 63F5             >
 245+ 63F5             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 63F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 63F5 ~           >
 245+ 63F5 ~           >
 245+ 63F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 63F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 63F5             >
 245+ 63F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 63F5              ZBranch_Ptr:
 247+ 63F5 E1                           pop     hl
 248+ 63F6 7D                           ld      a, l
 249+ 63F7 B4                           or      h
 250+ 63F8 28 EE                        jr      z, Branch_Ptr
 251+ 63FA 03                           inc     bc                  // if not branch, skip offset cell.
 252+ 63FB 03                           inc     bc
 253+ 63FC                              next
 253+ 63FC DD E9       >                jp      (ix)
 254+ 63FE
 255+ 63FE              //  ______________________________________________________________________
 256+ 63FE              //
 257+ 63FE              // (leave)        --
 258+ 63FE              // compiled by LEAVE
 259+ 63FE              // this forces to exit from loop and jump past
 260+ 63FE                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 260+ 63FE             >
 260+ 63FE             >Dict_Ptr        defl    $
 260+ 63FE             >
 260+ 63FE             >//              ______________________________________________________________________
 260+ 63FE             >//              Heap part
 260+ 63FE             >
 260+ 63FE             >
 260+ 63FE             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E0BE             >
 260+ E0BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E0BE             >Latest_Definition defl  Heap_Ptr
 260+ E0BE             >
 260+ E0BE             >                // dummy db directives used to calculate length of namec
 260+ E0BE 28 4C 45 41 >                db      "(LEAVE)"
 260+ E0C2 56 45 29    >
 260+ E0C5             >len_NFA         defl    $ - temp_NFA
 260+ E0C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E0BE             >
 260+ E0BE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E0BF 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 260+ E0C3 56 45 29    >
 260+ E0C6             >                org     $-1                 // alter last byte of Name just above to set
 260+ E0C5 A9          >                db      {b $} | END_BIT     // msb as name end
 260+ E0C6             >
 260+ E0C6 B2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E0C8             >Prev_Ptr        defl    Heap_Ptr
 260+ E0C8             >
 260+ E0C8             >mirror_Ptr      defl    $
 260+ E0C8             >
 260+ E0C8 00 64       >                dw      Dict_Ptr + 2        // xt
 260+ E0CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E0CA             >
 260+ E0CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E0CA             >
 260+ E0CA             >//              ______________________________________________________________________
 260+ E0CA             >//              Dictionary part
 260+ E0CA             >
 260+ E0CA             >                org     Dict_Ptr
 260+ 63FE             >
 260+ 63FE C8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6400             >
 260+ 6400             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6400 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 6400 ~           >
 260+ 6400 ~           >
 260+ 6400             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6400             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6400             >
 260+ 6400             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6400 EB                           ex      de, hl
 262+ 6401                              // *** ldhlrp
 263+ 6401 3E 04                        ld      a, 4
 264+ 6403 ED 31                        add     hl, a
 265+ 6405                              // *** ldrphl
 266+ 6405 EB                           ex      de, hl
 267+ 6406 18 E0                        jr      Branch_Ptr       // perform branch consuming following cell
 268+ 6408                              next
 268+ 6408 DD E9       >                jp      (ix)
 269+ 640A
 270+ 640A              //  ______________________________________________________________________
 271+ 640A              //
 272+ 640A              // (?do)        lim ind --
 273+ 640A              // compiled by ?DO to make a loop checking for lim == ind first
 274+ 640A              // at run-time (?DO) must be followed by a BRANCH offset
 275+ 640A              // used to skip the loop if lim == ind
 276+ 640A                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 276+ 640A             >
 276+ 640A             >Dict_Ptr        defl    $
 276+ 640A             >
 276+ 640A             >//              ______________________________________________________________________
 276+ 640A             >//              Heap part
 276+ 640A             >
 276+ 640A             >
 276+ 640A             >                org     (Heap_Ptr & $1FFF) + $E000
 276+ E0CA             >
 276+ E0CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ E0CA             >Latest_Definition defl  Heap_Ptr
 276+ E0CA             >
 276+ E0CA             >                // dummy db directives used to calculate length of namec
 276+ E0CA 28 3F 44 4F >                db      "(?DO)"
 276+ E0CE 29          >
 276+ E0CF             >len_NFA         defl    $ - temp_NFA
 276+ E0CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ E0CA             >
 276+ E0CA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ E0CB 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 276+ E0CF 29          >
 276+ E0D0             >                org     $-1                 // alter last byte of Name just above to set
 276+ E0CF A9          >                db      {b $} | END_BIT     // msb as name end
 276+ E0D0             >
 276+ E0D0 BE 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 276+ E0D2             >Prev_Ptr        defl    Heap_Ptr
 276+ E0D2             >
 276+ E0D2             >mirror_Ptr      defl    $
 276+ E0D2             >
 276+ E0D2 0C 64       >                dw      Dict_Ptr + 2        // xt
 276+ E0D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 276+ E0D4             >
 276+ E0D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 276+ E0D4             >
 276+ E0D4             >//              ______________________________________________________________________
 276+ E0D4             >//              Dictionary part
 276+ E0D4             >
 276+ E0D4             >                org     Dict_Ptr
 276+ 640A             >
 276+ 640A D2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 276+ 640C             >
 276+ 640C             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 640C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 276+ 640C ~           >
 276+ 640C ~           >
 276+ 640C             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 640C             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 640C             >
 276+ 640C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 640C D9                           exx
 278+ 640D D1                            pop     de                  // de has the index
 279+ 640E E1                            pop     hl                  // hl has the limit
 280+ 640F 44                            ld      b, h
 281+ 6410 4D                            ld      c, l
 282+ 6411 E5                            push    hl                  // put them back to stack for later
 283+ 6412 D5                            push    de
 284+ 6413 A7                            and     a                   // reset carry flag
 285+ 6414 ED 52                         sbc     hl, de              // compute limit - index
 286+ 6416 D9                           exx
 287+ 6417 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 288+ 6419 E1                               pop     hl
 289+ 641A E1                               pop     hl
 290+ 641B 18 CB                            jr      Branch_Ptr          // perform branch consuming following cell
 291+ 641D              Do_Ptr:
 292+ 641D                              // *** ldhlrp                 // prepare RP
 293+ 641D                              // *** ex      de, hl
 294+ 641D 1B                           dec     de
 295+ 641E 1B                           dec     de
 296+ 641F 1B                           dec     de
 297+ 6420 1B                           dec     de
 298+ 6421 D5                           push    de                  // pass it to h'l'
 299+ 6422                              // *** ex      de, hl
 300+ 6422                              // *** ldrphl
 301+ 6422 D9                           exx
 302+ 6423 E1                            pop     hl
 303+ 6424
 304+ 6424                               // store index as top RP
 305+ 6424 D1                            pop     de
 306+ 6425 73                            ld      (hl), e
 307+ 6426 23                            inc     hl
 308+ 6427 72                            ld      (hl), d
 309+ 6428 23                            inc     hl
 310+ 6429                               // stores lim as second from top RP
 311+ 6429 D1                            pop     de
 312+ 642A 73                            ld      (hl), e
 313+ 642B 23                            inc     hl
 314+ 642C 72                            ld      (hl), d
 315+ 642D D9                           exx
 316+ 642E                              // skip branch-style offseet
 317+ 642E 03                           inc     bc
 318+ 642F 03                           inc     bc
 319+ 6430                              next
 319+ 6430 DD E9       >                jp      (ix)
 320+ 6432
 321+ 6432              //  ______________________________________________________________________
 322+ 6432              //
 323+ 6432              // (do)        lim ind --
 324+ 6432              // compiled by DO to make a loop checking for lim == ind first
 325+ 6432              // this is a simpler version of (?DO)
 326+ 6432                              New_Def C_DO, "(DO)", is_code, is_normal
 326+ 6432             >
 326+ 6432             >Dict_Ptr        defl    $
 326+ 6432             >
 326+ 6432             >//              ______________________________________________________________________
 326+ 6432             >//              Heap part
 326+ 6432             >
 326+ 6432             >
 326+ 6432             >                org     (Heap_Ptr & $1FFF) + $E000
 326+ E0D4             >
 326+ E0D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 326+ E0D4             >Latest_Definition defl  Heap_Ptr
 326+ E0D4             >
 326+ E0D4             >                // dummy db directives used to calculate length of namec
 326+ E0D4 28 44 4F 29 >                db      "(DO)"
 326+ E0D8             >len_NFA         defl    $ - temp_NFA
 326+ E0D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 326+ E0D4             >
 326+ E0D4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 326+ E0D5 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 326+ E0D9             >                org     $-1                 // alter last byte of Name just above to set
 326+ E0D8 A9          >                db      {b $} | END_BIT     // msb as name end
 326+ E0D9             >
 326+ E0D9 CA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 326+ E0DB             >Prev_Ptr        defl    Heap_Ptr
 326+ E0DB             >
 326+ E0DB             >mirror_Ptr      defl    $
 326+ E0DB             >
 326+ E0DB 34 64       >                dw      Dict_Ptr + 2        // xt
 326+ E0DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 326+ E0DD             >
 326+ E0DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 326+ E0DD             >
 326+ E0DD             >//              ______________________________________________________________________
 326+ E0DD             >//              Dictionary part
 326+ E0DD             >
 326+ E0DD             >                org     Dict_Ptr
 326+ 6432             >
 326+ 6432 DB 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 326+ 6434             >
 326+ 6434             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 326+ 6434 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 326+ 6434 ~           >
 326+ 6434 ~           >
 326+ 6434             >                endif           ; ok        // for other definitions it "points" the correct handler
 326+ 6434             >                // Use of "; ok" to suppress "warning[fwdref]"
 326+ 6434             >
 326+ 6434             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 327+ 6434 0B                           dec     bc                  // prepare IP beforehand
 328+ 6435 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 329+ 6436 18 E5                        jr      Do_Ptr
 330+ 6438
 331+ 6438              //  ______________________________________________________________________
 332+ 6438              //
 333+ 6438              // i            -- n
 334+ 6438              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 335+ 6438              // the current value of the index-loop
 336+ 6438                              New_Def I, "I", is_code, is_normal
 336+ 6438             >
 336+ 6438             >Dict_Ptr        defl    $
 336+ 6438             >
 336+ 6438             >//              ______________________________________________________________________
 336+ 6438             >//              Heap part
 336+ 6438             >
 336+ 6438             >
 336+ 6438             >                org     (Heap_Ptr & $1FFF) + $E000
 336+ E0DD             >
 336+ E0DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ E0DD             >Latest_Definition defl  Heap_Ptr
 336+ E0DD             >
 336+ E0DD             >                // dummy db directives used to calculate length of namec
 336+ E0DD 49          >                db      "I"
 336+ E0DE             >len_NFA         defl    $ - temp_NFA
 336+ E0DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ E0DD             >
 336+ E0DD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ E0DE 49          >                db      "I"               // name string in 7-bit ascii, but
 336+ E0DF             >                org     $-1                 // alter last byte of Name just above to set
 336+ E0DE C9          >                db      {b $} | END_BIT     // msb as name end
 336+ E0DF             >
 336+ E0DF D4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 336+ E0E1             >Prev_Ptr        defl    Heap_Ptr
 336+ E0E1             >
 336+ E0E1             >mirror_Ptr      defl    $
 336+ E0E1             >
 336+ E0E1 3A 64       >                dw      Dict_Ptr + 2        // xt
 336+ E0E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 336+ E0E3             >
 336+ E0E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 336+ E0E3             >
 336+ E0E3             >//              ______________________________________________________________________
 336+ E0E3             >//              Dictionary part
 336+ E0E3             >
 336+ E0E3             >                org     Dict_Ptr
 336+ 6438             >
 336+ 6438 E1 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 336+ 643A             >
 336+ 643A             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 643A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 336+ 643A ~           >
 336+ 643A ~           >
 336+ 643A             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 643A             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 643A             >
 336+ 643A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 643A              I_Ptr:
 338+ 643A 62                           ld      h, d
 339+ 643B 6B                           ld      l, e
 340+ 643C                              // *** ldhlrp
 341+ 643C              I_Ptr_prime:
 342+ 643C 7E                           ld      a, (hl)
 343+ 643D 23                           inc     hl
 344+ 643E 66                           ld      h, (hl)
 345+ 643F 6F                           ld      l, a
 346+ 6440 E5                           push    hl
 347+ 6441                              next
 347+ 6441 DD E9       >                jp      (ix)
 348+ 6443
 349+ 6443
 350+ 6443              //  ______________________________________________________________________
 351+ 6443              //
 352+ 6443              // i'            -- n
 353+ 6443              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 354+ 6443              // the limit of the index-loop
 355+ 6443
 356+ 6443                              New_Def II, "I'", is_code, is_normal
 356+ 6443             >
 356+ 6443             >Dict_Ptr        defl    $
 356+ 6443             >
 356+ 6443             >//              ______________________________________________________________________
 356+ 6443             >//              Heap part
 356+ 6443             >
 356+ 6443             >
 356+ 6443             >                org     (Heap_Ptr & $1FFF) + $E000
 356+ E0E3             >
 356+ E0E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 356+ E0E3             >Latest_Definition defl  Heap_Ptr
 356+ E0E3             >
 356+ E0E3             >                // dummy db directives used to calculate length of namec
 356+ E0E3 49 27       >                db      "I'"
 356+ E0E5             >len_NFA         defl    $ - temp_NFA
 356+ E0E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 356+ E0E3             >
 356+ E0E3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 356+ E0E4 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 356+ E0E6             >                org     $-1                 // alter last byte of Name just above to set
 356+ E0E5 A7          >                db      {b $} | END_BIT     // msb as name end
 356+ E0E6             >
 356+ E0E6 DD 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 356+ E0E8             >Prev_Ptr        defl    Heap_Ptr
 356+ E0E8             >
 356+ E0E8             >mirror_Ptr      defl    $
 356+ E0E8             >
 356+ E0E8 45 64       >                dw      Dict_Ptr + 2        // xt
 356+ E0EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 356+ E0EA             >
 356+ E0EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 356+ E0EA             >
 356+ E0EA             >//              ______________________________________________________________________
 356+ E0EA             >//              Dictionary part
 356+ E0EA             >
 356+ E0EA             >                org     Dict_Ptr
 356+ 6443             >
 356+ 6443 E8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 356+ 6445             >
 356+ 6445             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 356+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 356+ 6445 ~           >
 356+ 6445 ~           >
 356+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 356+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 356+ 6445             >
 356+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 357+ 6445 62                           ld      h, d
 358+ 6446 6B                           ld      l, e
 359+ 6447                              // *** ldhlrp
 360+ 6447 23                           inc     hl
 361+ 6448 23                           inc     hl
 362+ 6449 18 F1                        jr      I_Ptr_prime
 363+ 644B
 364+ 644B
 365+ 644B              //  ______________________________________________________________________
 366+ 644B              //
 367+ 644B              // digit        c n -- u tf  |  ff
 368+ 644B              // convert a character c using base n
 369+ 644B              // returns a unsigned number and a true flag
 370+ 644B              // or just a false flag if the conversion fails
 371+ 644B                              New_Def DIGIT, "DIGIT", is_code, is_normal
 371+ 644B             >
 371+ 644B             >Dict_Ptr        defl    $
 371+ 644B             >
 371+ 644B             >//              ______________________________________________________________________
 371+ 644B             >//              Heap part
 371+ 644B             >
 371+ 644B             >
 371+ 644B             >                org     (Heap_Ptr & $1FFF) + $E000
 371+ E0EA             >
 371+ E0EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ E0EA             >Latest_Definition defl  Heap_Ptr
 371+ E0EA             >
 371+ E0EA             >                // dummy db directives used to calculate length of namec
 371+ E0EA 44 49 47 49 >                db      "DIGIT"
 371+ E0EE 54          >
 371+ E0EF             >len_NFA         defl    $ - temp_NFA
 371+ E0EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ E0EA             >
 371+ E0EA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ E0EB 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 371+ E0EF 54          >
 371+ E0F0             >                org     $-1                 // alter last byte of Name just above to set
 371+ E0EF D4          >                db      {b $} | END_BIT     // msb as name end
 371+ E0F0             >
 371+ E0F0 E3 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 371+ E0F2             >Prev_Ptr        defl    Heap_Ptr
 371+ E0F2             >
 371+ E0F2             >mirror_Ptr      defl    $
 371+ E0F2             >
 371+ E0F2 4D 64       >                dw      Dict_Ptr + 2        // xt
 371+ E0F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 371+ E0F4             >
 371+ E0F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 371+ E0F4             >
 371+ E0F4             >//              ______________________________________________________________________
 371+ E0F4             >//              Dictionary part
 371+ E0F4             >
 371+ E0F4             >                org     Dict_Ptr
 371+ 644B             >
 371+ 644B F2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 371+ 644D             >
 371+ 644D             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 644D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 371+ 644D ~           >
 371+ 644D ~           >
 371+ 644D             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 644D             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 644D             >
 371+ 644D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 644D D9                           exx
 373+ 644E E1                           pop     hl                  // l has the base
 374+ 644F D1                           pop     de                  // e has the digit
 375+ 6450 7B                           ld      a, e
 376+ 6451 FE 60                        cp      $60                 // check if lowercase
 377+ 6453 38 02                        jr      c, Digit_Uppercase
 378+ 6455 D6 20                            sub     $20                 // quick'n'dirty uppercase
 379+ 6457              Digit_Uppercase:
 380+ 6457 D6 30                        sub     $30
 381+ 6459 38 16                        jr      c, Digit_Fail       // fail when character < "0"
 382+ 645B FE 0A                            cp      $0A
 383+ 645D 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 384+ 645F D6 07                                sub     7                   // try hex and subtract 7
 385+ 6461 FE 0A                                cp      $0A
 386+ 6463 38 0C                                jr      c,  Digit_Fail      // it is not hex !
 387+ 6465
 388+ 6465              Digit_Decimal:
 389+ 6465                              // compare digit
 390+ 6465 BD                           cp      l                   // compare with base
 391+ 6466 30 09                        jr      nc, Digit_Fail      // fail when greater than base
 392+ 6468 5F                               ld      e, a                // digit is returned as second from TOS
 393+ 6469 21 01 00                         ld      hl, 1
 394+ 646C D5                               push    de
 395+ 646D E5                               push    hl
 396+ 646E D9                               exx
 397+ 646F                                  next
 397+ 646F DD E9       >                jp      (ix)
 398+ 6471              Digit_Fail:
 399+ 6471 21 00 00                     ld      hl, 0
 400+ 6474 E5                           push    hl
 401+ 6475 D9                           exx
 402+ 6476                              next
 402+ 6476 DD E9       >                jp      (ix)
 403+ 6478
 404+ 6478              //  ______________________________________________________________________
 405+ 6478              //
 406+ 6478              //  parametric uppercase routine
 407+ 6478              //  depending on the following op-code the routine can be by-passed
 408+ 6478              //  changing the behaviour of some callers.
 409+ 6478              //  If it is "ret" then the system is Case-Sensitive
 410+ 6478              //  If it is "Nop" then the system is Case-Insensitive
 411+ 6478              //  Only A register is touched.
 412+ 6478 00           Case_Sensitive: nop                         // Default is case-insensitive.
 413+ 6479              Case_Upper:
 414+ 6479 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 415+ 647B D8                           ret     c                   // no change if A < "a"
 416+ 647C FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 417+ 647E D0                           ret     nc                  // no change if A > "z"
 418+ 647F D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 419+ 6481 C9                           ret
 420+ 6482
 421+ 6482              //  ______________________________________________________________________
 422+ 6482              //
 423+ 6482              //  caseon      --
 424+ 6482              // set system case-sensitivity on
 425+ 6482              // it patches a RET/NOP at the beginning of the uppercase-routine
 426+ 6482                              New_Def CASEON, "CASEON", is_code, is_normal
 426+ 6482             >
 426+ 6482             >Dict_Ptr        defl    $
 426+ 6482             >
 426+ 6482             >//              ______________________________________________________________________
 426+ 6482             >//              Heap part
 426+ 6482             >
 426+ 6482             >
 426+ 6482             >                org     (Heap_Ptr & $1FFF) + $E000
 426+ E0F4             >
 426+ E0F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 426+ E0F4             >Latest_Definition defl  Heap_Ptr
 426+ E0F4             >
 426+ E0F4             >                // dummy db directives used to calculate length of namec
 426+ E0F4 43 41 53 45 >                db      "CASEON"
 426+ E0F8 4F 4E       >
 426+ E0FA             >len_NFA         defl    $ - temp_NFA
 426+ E0FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 426+ E0F4             >
 426+ E0F4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 426+ E0F5 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 426+ E0F9 4F 4E       >
 426+ E0FB             >                org     $-1                 // alter last byte of Name just above to set
 426+ E0FA CE          >                db      {b $} | END_BIT     // msb as name end
 426+ E0FB             >
 426+ E0FB EA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 426+ E0FD             >Prev_Ptr        defl    Heap_Ptr
 426+ E0FD             >
 426+ E0FD             >mirror_Ptr      defl    $
 426+ E0FD             >
 426+ E0FD 84 64       >                dw      Dict_Ptr + 2        // xt
 426+ E0FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 426+ E0FF             >
 426+ E0FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 426+ E0FF             >
 426+ E0FF             >//              ______________________________________________________________________
 426+ E0FF             >//              Dictionary part
 426+ E0FF             >
 426+ E0FF             >                org     Dict_Ptr
 426+ 6482             >
 426+ 6482 FD 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 426+ 6484             >
 426+ 6484             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 426+ 6484 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 426+ 6484 ~           >
 426+ 6484 ~           >
 426+ 6484             >                endif           ; ok        // for other definitions it "points" the correct handler
 426+ 6484             >                // Use of "; ok" to suppress "warning[fwdref]"
 426+ 6484             >
 426+ 6484             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 427+ 6484 3E C9                        ld      a, $C9              // "ret"
 428+ 6486 32 78 64                     ld      (Case_Sensitive), a
 429+ 6489                              next
 429+ 6489 DD E9       >                jp      (ix)
 430+ 648B
 431+ 648B              //  ______________________________________________________________________
 432+ 648B              //
 433+ 648B              //  caseoff     --
 434+ 648B              // set system case-sensitivity on
 435+ 648B              // it patches a RET/NOP at the beginning of the uppercase-routine
 436+ 648B                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 436+ 648B             >
 436+ 648B             >Dict_Ptr        defl    $
 436+ 648B             >
 436+ 648B             >//              ______________________________________________________________________
 436+ 648B             >//              Heap part
 436+ 648B             >
 436+ 648B             >
 436+ 648B             >                org     (Heap_Ptr & $1FFF) + $E000
 436+ E0FF             >
 436+ E0FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ E0FF             >Latest_Definition defl  Heap_Ptr
 436+ E0FF             >
 436+ E0FF             >                // dummy db directives used to calculate length of namec
 436+ E0FF 43 41 53 45 >                db      "CASEOFF"
 436+ E103 4F 46 46    >
 436+ E106             >len_NFA         defl    $ - temp_NFA
 436+ E106             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ E0FF             >
 436+ E0FF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ E100 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 436+ E104 4F 46 46    >
 436+ E107             >                org     $-1                 // alter last byte of Name just above to set
 436+ E106 C6          >                db      {b $} | END_BIT     // msb as name end
 436+ E107             >
 436+ E107 F4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 436+ E109             >Prev_Ptr        defl    Heap_Ptr
 436+ E109             >
 436+ E109             >mirror_Ptr      defl    $
 436+ E109             >
 436+ E109 8D 64       >                dw      Dict_Ptr + 2        // xt
 436+ E10B             >Heap_Ptr        defl    $ - $E000           // save current HP
 436+ E10B             >
 436+ E10B             >Current_HP      defl  $ - $E000             // used to set HP once!
 436+ E10B             >
 436+ E10B             >//              ______________________________________________________________________
 436+ E10B             >//              Dictionary part
 436+ E10B             >
 436+ E10B             >                org     Dict_Ptr
 436+ 648B             >
 436+ 648B 09 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 436+ 648D             >
 436+ 648D             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 648D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 436+ 648D ~           >
 436+ 648D ~           >
 436+ 648D             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 648D             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 648D             >
 436+ 648D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 648D 3E 00                        ld      a, $00              // "nop"
 438+ 648F 32 78 64                     ld      (Case_Sensitive), a
 439+ 6492                              next
 439+ 6492 DD E9       >                jp      (ix)
 440+ 6494
 441+ 6494              //  ______________________________________________________________________
 442+ 6494              //
 443+ 6494              //  upper       c1 -- c1 | c2
 444+ 6494              // character on top of stack is forced to Uppercase.
 445+ 6494                              New_Def UPPER, "UPPER", is_code, is_normal
 445+ 6494             >
 445+ 6494             >Dict_Ptr        defl    $
 445+ 6494             >
 445+ 6494             >//              ______________________________________________________________________
 445+ 6494             >//              Heap part
 445+ 6494             >
 445+ 6494             >
 445+ 6494             >                org     (Heap_Ptr & $1FFF) + $E000
 445+ E10B             >
 445+ E10B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ E10B             >Latest_Definition defl  Heap_Ptr
 445+ E10B             >
 445+ E10B             >                // dummy db directives used to calculate length of namec
 445+ E10B 55 50 50 45 >                db      "UPPER"
 445+ E10F 52          >
 445+ E110             >len_NFA         defl    $ - temp_NFA
 445+ E110             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ E10B             >
 445+ E10B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ E10C 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 445+ E110 52          >
 445+ E111             >                org     $-1                 // alter last byte of Name just above to set
 445+ E110 D2          >                db      {b $} | END_BIT     // msb as name end
 445+ E111             >
 445+ E111 FF 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 445+ E113             >Prev_Ptr        defl    Heap_Ptr
 445+ E113             >
 445+ E113             >mirror_Ptr      defl    $
 445+ E113             >
 445+ E113 96 64       >                dw      Dict_Ptr + 2        // xt
 445+ E115             >Heap_Ptr        defl    $ - $E000           // save current HP
 445+ E115             >
 445+ E115             >Current_HP      defl  $ - $E000             // used to set HP once!
 445+ E115             >
 445+ E115             >//              ______________________________________________________________________
 445+ E115             >//              Dictionary part
 445+ E115             >
 445+ E115             >                org     Dict_Ptr
 445+ 6494             >
 445+ 6494 13 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 445+ 6496             >
 445+ 6496             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 6496 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 445+ 6496 ~           >
 445+ 6496 ~           >
 445+ 6496             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 6496             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 6496             >
 445+ 6496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 6496 E1                           pop     hl
 447+ 6497 7D                           ld      a, l
 448+ 6498 CD 79 64                     call    Case_Upper
 449+ 649B 6F                           ld      l, a
 450+ 649C
 451+ 649C                              psh1
 451+ 649C E5          >                push    hl
 451+ 649D DD E9       >                jp      (ix)
 452+ 649F
 453+ 649F              //  ______________________________________________________________________
 454+ 649F
 455+ 649F              MMU7_read:
 456+ 649F 01 3B 24                     ld      bc, $243B
 457+ 64A2 3E 57                        ld      a, 87
 458+ 64A4 ED 79                        out     (c), a
 459+ 64A6 04                           inc     b
 460+ 64A7 ED 78                        in      a, (c)
 461+ 64A9 C9                           ret
 462+ 64AA
 463+ 64AA              //  ______________________________________________________________________
 464+ 64AA
 465+ 64AA              TO_FAR_rout:
 466+ 64AA 7C                           ld      a, h
 467+ 64AB 08                           ex      af, af
 468+ 64AC 7C                           ld      a, h
 469+ 64AD F6 E0                        or      $E0
 470+ 64AF 67                           ld      h, a
 471+ 64B0 08                           ex      af, af
 472+ 64B1 07                           rlca
 473+ 64B2 07                           rlca
 474+ 64B3 07                           rlca
 475+ 64B4 E6 07                        and     $07
 476+ 64B6 C6 20                        add     $20
 477+ 64B8 C9                           ret
 478+ 64B9
 479+ 64B9
 480+ 64B9              //  ______________________________________________________________________
 481+ 64B9              //
 482+ 64B9              // (find)       addr voc -- 0 | cfa b 1
 483+ 64B9              // vocabulary search,
 484+ 64B9              // - voc is starting word's NFA
 485+ 64B9              // - addr is the string to be searched for
 486+ 64B9              // On success, it returns the CFA of found word, the first NFA byte
 487+ 64B9              // (which contains length and some flags) and a true flag.
 488+ 64B9              // On fail, a false flag  (no more: leaves addr unchanged)
 489+ 64B9                              New_Def C_FIND, "(FIND)", is_code, is_normal
 489+ 64B9             >
 489+ 64B9             >Dict_Ptr        defl    $
 489+ 64B9             >
 489+ 64B9             >//              ______________________________________________________________________
 489+ 64B9             >//              Heap part
 489+ 64B9             >
 489+ 64B9             >
 489+ 64B9             >                org     (Heap_Ptr & $1FFF) + $E000
 489+ E115             >
 489+ E115             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ E115             >Latest_Definition defl  Heap_Ptr
 489+ E115             >
 489+ E115             >                // dummy db directives used to calculate length of namec
 489+ E115 28 46 49 4E >                db      "(FIND)"
 489+ E119 44 29       >
 489+ E11B             >len_NFA         defl    $ - temp_NFA
 489+ E11B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ E115             >
 489+ E115 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ E116 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 489+ E11A 44 29       >
 489+ E11C             >                org     $-1                 // alter last byte of Name just above to set
 489+ E11B A9          >                db      {b $} | END_BIT     // msb as name end
 489+ E11C             >
 489+ E11C 0B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 489+ E11E             >Prev_Ptr        defl    Heap_Ptr
 489+ E11E             >
 489+ E11E             >mirror_Ptr      defl    $
 489+ E11E             >
 489+ E11E BB 64       >                dw      Dict_Ptr + 2        // xt
 489+ E120             >Heap_Ptr        defl    $ - $E000           // save current HP
 489+ E120             >
 489+ E120             >Current_HP      defl  $ - $E000             // used to set HP once!
 489+ E120             >
 489+ E120             >//              ______________________________________________________________________
 489+ E120             >//              Dictionary part
 489+ E120             >
 489+ E120             >                org     Dict_Ptr
 489+ 64B9             >
 489+ 64B9 1E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 489+ 64BB             >
 489+ 64BB             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 64BB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 489+ 64BB ~           >
 489+ 64BB ~           >
 489+ 64BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 64BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 64BB             >
 489+ 64BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 64BB D9                           exx
 491+ 64BC CD 9F 64                     call    MMU7_read
 492+ 64BF D9                           exx
 493+ 64C0 6F                           ld      l, a
 494+ 64C1 D9                           exx
 495+ 64C2
 496+ 64C2 D1                           pop     de                      // de has dictionary pointer
 497+ 64C3              Find_VocabularyLoop:
 498+ 64C3 7A                               ld      a, d
 499+ 64C4 D6 60                            sub     $60
 500+ 64C6 30 08                            jr      nc, Find_far_endif
 501+ 64C8 EB                                   ex      de, hl
 502+ 64C9 CD AA 64                             call    TO_FAR_rout
 503+ 64CC EB                                   ex      de, hl
 504+ 64CD ED 92 57                             nextreg 87, a
 505+ 64D0              Find_far_endif:
 506+ 64D0 E1                               pop     hl                  // string pointer to search for
 507+ 64D1 E5                               push    hl                  // keep it on stack too for the end.
 508+ 64D2 1A                               ld      a, (de)             // save NFA length byte
 509+ 64D3 08                               ex      af,af'              // for later use (!)
 510+ 64D4 1A                               ld      a, (de)             // reload NFA length byte
 511+ 64D5 AE                               xor     (hl)                // check if same length
 512+ 64D6 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 513+ 64D8                                  // word and text haven't the same length, skip to next vocabulary entry
 514+ 64D8 20 33                            jr      nz, Find_DifferentLenght
 515+ 64DA
 516+ 64DA              Find_ThisWord:      // begin loop
 517+ 64DA 23                                   inc     hl
 518+ 64DB 13                                   inc     de
 519+ 64DC 1A                                   ld      a, (de)
 520+ 64DD                                      // case insensitive option - begin
 521+ 64DD                                      // push    bc
 522+ 64DD E6 80                                and     $80                 // split A in msb and the rest
 523+ 64DF 47                                   ld      b, a
 524+ 64E0 1A                                   ld      a, (de)
 525+ 64E1 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 526+ 64E3 CD 78 64                             call    Case_Sensitive      // uppercase routine
 527+ 64E6 4F                                   ld      c, a
 528+ 64E7 7E                                   ld      a, (hl)
 529+ 64E8 CD 78 64                             call    Case_Sensitive      // uppercase routine
 530+ 64EB A9                                   xor     c
 531+ 64EC A8                                   xor     b
 532+ 64ED                                      // pop     bc
 533+ 64ED                                      // case insensitive option - end
 534+ 64ED 87                                   add     a                   // ignore msb during compare
 535+ 64EE 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 536+ 64F0
 537+ 64F0                                  // loop back until last byte msb is found set
 538+ 64F0                                  // that bit marks the ending char of this word
 539+ 64F0 30 E8                            jr      nc, Find_ThisWord
 540+ 64F2
 541+ 64F2                                  // match found !
 542+ 64F2 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 543+ 64F5 19                               add     hl, de
 544+ 64F6
 545+ 64F6                              //  ld      a, h
 546+ 64F6                              //  and     $E0
 547+ 64F6                              //  xor     h
 548+ 64F6                              //  jr      nz, Non_MMU7
 549+ 64F6                                  //  call    MMU7_read
 550+ 64F6                                  //  dec     a
 551+ 64F6                                  //  jr      z, Non_MMU7
 552+ 64F6 5E                                       ld      e, (hl)
 553+ 64F7 23                                       inc     hl
 554+ 64F8 56                                       ld      d, (hl)
 555+ 64F9 EB                                       ex      de, hl
 556+ 64FA              //Non_MMU7:
 557+ 64FA E3                               ex      (sp), hl            // CFA on stack and drop addr
 558+ 64FB 08                               ex      af, af'             // retrieve NFA byte (!)
 559+ 64FC 5F                               ld      e, a
 560+ 64FD 16 00                            ld      d, 0
 561+ 64FF 21 FF FF                         ld      hl, -1
 562+ 6502 D5                               push    de
 563+ 6503 E5                               push    hl
 564+ 6504 D9                               exx
 565+ 6505 7D                               ld      a, l
 566+ 6506 ED 92 57                         nextreg 87, a
 567+ 6509                                  next
 567+ 6509 DD E9       >                jp      (ix)
 568+ 650B
 569+ 650B              Find_DidntMatch: // didn't match (*)
 570+ 650B 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 571+ 650D
 572+ 650D              Find_DifferentLenght:
 573+ 650D                                  // consume chars until the end of the word
 574+ 650D                                  // that is last byte msb is found set
 575+ 650D 13                                   inc     de
 576+ 650E 1A                                   ld      a, (de)
 577+ 650F 87                                   add     a, a
 578+ 6510 30 FB                            jr      nc, Find_DifferentLenght
 579+ 6512
 580+ 6512              Find_WordEnd:   // word-end  found (**)
 581+ 6512                                  // take LFA and use it
 582+ 6512 13                               inc     de
 583+ 6513 EB                               ex      de, hl
 584+ 6514 5E                               ld      e, (hl)
 585+ 6515 23                               inc     hl
 586+ 6516 56                               ld      d, (hl)
 587+ 6517 7A                               ld      a, d
 588+ 6518 B3                               or      e
 589+ 6519
 590+ 6519                              // loop until end of vocabulary
 591+ 6519 20 A8                        jr      nz, Find_VocabularyLoop
 592+ 651B
 593+ 651B E1                           pop     hl              // without this, leaves addr unchanged
 594+ 651C 21 00 00                     ld      hl, 0
 595+ 651F E5                           push    hl
 596+ 6520 D9                           exx
 597+ 6521 7D                           ld      a, l
 598+ 6522 ED 92 57                     nextreg 87, a
 599+ 6525                              next
 599+ 6525 DD E9       >                jp      (ix)
 600+ 6527
 601+ 6527              //  ______________________________________________________________________
 602+ 6527              //
 603+ 6527              // enclose      a c -- a  n1 n2 n3
 604+ 6527              // starting from a, using delimiter c, determines the offsets:
 605+ 6527              //   n1   the first character non-delimiter
 606+ 6527              //   n2   the first delimiter after the text
 607+ 6527              //   n3   the first character non enclosed.
 608+ 6527              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 609+ 6527              // an uncoditional delimiter.
 610+ 6527              // Examples:
 611+ 6527              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 612+ 6527              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 613+ 6527              // iii:	c  c  'nul'          -- 2  3  2
 614+ 6527                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 614+ 6527             >
 614+ 6527             >Dict_Ptr        defl    $
 614+ 6527             >
 614+ 6527             >//              ______________________________________________________________________
 614+ 6527             >//              Heap part
 614+ 6527             >
 614+ 6527             >
 614+ 6527             >                org     (Heap_Ptr & $1FFF) + $E000
 614+ E120             >
 614+ E120             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ E120             >Latest_Definition defl  Heap_Ptr
 614+ E120             >
 614+ E120             >                // dummy db directives used to calculate length of namec
 614+ E120 45 4E 43 4C >                db      "ENCLOSE"
 614+ E124 4F 53 45    >
 614+ E127             >len_NFA         defl    $ - temp_NFA
 614+ E127             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ E120             >
 614+ E120 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ E121 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 614+ E125 4F 53 45    >
 614+ E128             >                org     $-1                 // alter last byte of Name just above to set
 614+ E127 C5          >                db      {b $} | END_BIT     // msb as name end
 614+ E128             >
 614+ E128 15 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 614+ E12A             >Prev_Ptr        defl    Heap_Ptr
 614+ E12A             >
 614+ E12A             >mirror_Ptr      defl    $
 614+ E12A             >
 614+ E12A 29 65       >                dw      Dict_Ptr + 2        // xt
 614+ E12C             >Heap_Ptr        defl    $ - $E000           // save current HP
 614+ E12C             >
 614+ E12C             >Current_HP      defl  $ - $E000             // used to set HP once!
 614+ E12C             >
 614+ E12C             >//              ______________________________________________________________________
 614+ E12C             >//              Dictionary part
 614+ E12C             >
 614+ E12C             >                org     Dict_Ptr
 614+ 6527             >
 614+ 6527 2A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 614+ 6529             >
 614+ 6529             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 6529 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 614+ 6529 ~           >
 614+ 6529 ~           >
 614+ 6529             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 6529             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 6529             >
 614+ 6529             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 6529 D9                           exx
 616+ 652A D1                           pop     de                  //  e has the character
 617+ 652B E1                           pop     hl                  // hl has the string address
 618+ 652C E5                           push    hl
 619+ 652D 7B                           ld      a, e
 620+ 652E 11 FF FF                     ld      de, -1              // let's start from -1
 621+ 6531 2B                           dec     hl
 622+ 6532              Enclose_NonDelimiter:
 623+ 6532                              // find first non delimiter
 624+ 6532 23                               inc     hl
 625+ 6533 13                               inc     de
 626+ 6534 BE                               cp      (hl)
 627+ 6535 28 FB                        jr      z, Enclose_NonDelimiter
 628+ 6537 D5                           push    de
 629+ 6538
 630+ 6538                              // push    bc                  // save Instruction Pointer
 631+ 6538
 632+ 6538 4F                           ld      c, a                // save char
 633+ 6539 7E                           ld      a, (hl)
 634+ 653A A7                           and     a                   // stop if 0x00
 635+ 653B 20 07                        jr      nz, Enclose_NextChar
 636+ 653D                              /// case iii. no more character in string
 637+ 653D                                  // pop     bc                  // restore Instruction Pointer
 638+ 653D 13                               inc     de
 639+ 653E D5                               push    de
 640+ 653F 1B                               dec     de
 641+ 6540 D5                               push    de
 642+ 6541 D9                               exx
 643+ 6542                                  next
 643+ 6542 DD E9       >                jp      (ix)
 644+ 6544              Enclose_NextChar:
 645+ 6544 79                               ld      a, c
 646+ 6545 23                               inc     hl
 647+ 6546 13                               inc     de
 648+ 6547 BE                               cp      (hl)
 649+ 6548 20 06                            jr      nz, Enclose_NonSeparator
 650+ 654A                                      // case i. first non enclosed
 651+ 654A                                      // pop     bc                  // restore Instruction Pointer
 652+ 654A D5                                   push    de
 653+ 654B 13                                   inc     de
 654+ 654C D5                                   push    de
 655+ 654D D9                                   exx
 656+ 654E                                      next
 656+ 654E DD E9       >                jp      (ix)
 657+ 6550              Enclose_NonSeparator:
 658+ 6550 7E                               ld      a, (hl)
 659+ 6551 A7                               and     a
 660+ 6552 20 F0                        jr      nz, Enclose_NextChar
 661+ 6554
 662+ 6554                              // case ii. separator & terminator
 663+ 6554                              // pop     bc                  // restore Instruction Pointer
 664+ 6554 D5                           push    de
 665+ 6555 D5                           push    de
 666+ 6556 D9                           exx
 667+ 6557                              next
 667+ 6557 DD E9       >                jp      (ix)
 668+ 6559
 669+ 6559              //  ______________________________________________________________________
 670+ 6559              //
 671+ 6559              // (map)        a2 a1 n c1 -- c2
 672+ 6559              // translate character c1 using mapping string a2 and a2
 673+ 6559              // if c1 is not present within string a1 then
 674+ 6559              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 675+ 6559                              New_Def C_MAP, "(MAP)", is_code, is_normal
 675+ 6559             >
 675+ 6559             >Dict_Ptr        defl    $
 675+ 6559             >
 675+ 6559             >//              ______________________________________________________________________
 675+ 6559             >//              Heap part
 675+ 6559             >
 675+ 6559             >
 675+ 6559             >                org     (Heap_Ptr & $1FFF) + $E000
 675+ E12C             >
 675+ E12C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 675+ E12C             >Latest_Definition defl  Heap_Ptr
 675+ E12C             >
 675+ E12C             >                // dummy db directives used to calculate length of namec
 675+ E12C 28 4D 41 50 >                db      "(MAP)"
 675+ E130 29          >
 675+ E131             >len_NFA         defl    $ - temp_NFA
 675+ E131             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 675+ E12C             >
 675+ E12C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 675+ E12D 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 675+ E131 29          >
 675+ E132             >                org     $-1                 // alter last byte of Name just above to set
 675+ E131 A9          >                db      {b $} | END_BIT     // msb as name end
 675+ E132             >
 675+ E132 20 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 675+ E134             >Prev_Ptr        defl    Heap_Ptr
 675+ E134             >
 675+ E134             >mirror_Ptr      defl    $
 675+ E134             >
 675+ E134 5B 65       >                dw      Dict_Ptr + 2        // xt
 675+ E136             >Heap_Ptr        defl    $ - $E000           // save current HP
 675+ E136             >
 675+ E136             >Current_HP      defl  $ - $E000             // used to set HP once!
 675+ E136             >
 675+ E136             >//              ______________________________________________________________________
 675+ E136             >//              Dictionary part
 675+ E136             >
 675+ E136             >                org     Dict_Ptr
 675+ 6559             >
 675+ 6559 34 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 675+ 655B             >
 675+ 655B             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 675+ 655B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 675+ 655B ~           >
 675+ 655B ~           >
 675+ 655B             >                endif           ; ok        // for other definitions it "points" the correct handler
 675+ 655B             >                // Use of "; ok" to suppress "warning[fwdref]"
 675+ 655B             >
 675+ 655B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 676+ 655B D9                           exx
 677+ 655C E1                           pop     hl
 678+ 655D 7D                           ld      a, l
 679+ 655E C1                           pop     bc
 680+ 655F E1                           pop     hl
 681+ 6560 50                           ld      d, b
 682+ 6561 59                           ld      e, c
 683+ 6562 ED B1                        cpir
 684+ 6564 E1                           pop     hl
 685+ 6565 20 05                        jr      nz, C_Map_Then
 685+ 6567
 686+ 6567 19                               add     hl, de
 687+ 6568 2B                               dec     hl
 688+ 6569 ED 42                            sbc     hl, bc
 689+ 656B 7E                               ld      a, (hl)
 690+ 656C              C_Map_Then:
 691+ 656C 6F                           ld      l, a
 692+ 656D 26 00                        ld      h, 0
 693+ 656F E5                           push    hl
 694+ 6570 D9                           exx
 695+ 6571                              next
 695+ 6571 DD E9       >                jp      (ix)
 696+ 6573
 697+ 6573              //  ______________________________________________________________________
 698+ 6573              //
 699+ 6573              // (compare)    a1 a2 n -- b
 700+ 6573              // this word performs a lexicographic compare of n bytes of text at address a1
 701+ 6573              // with n bytes of text at address a2. It returns numeric a value:
 702+ 6573              //  0 : if strings are equal
 703+ 6573              // +1 : if string at a1 greater than string at a2
 704+ 6573              // -1 : if string at a1 less than string at a2
 705+ 6573              // strings can be 256 bytes in length at most.
 706+ 6573                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 706+ 6573             >
 706+ 6573             >Dict_Ptr        defl    $
 706+ 6573             >
 706+ 6573             >//              ______________________________________________________________________
 706+ 6573             >//              Heap part
 706+ 6573             >
 706+ 6573             >
 706+ 6573             >                org     (Heap_Ptr & $1FFF) + $E000
 706+ E136             >
 706+ E136             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 706+ E136             >Latest_Definition defl  Heap_Ptr
 706+ E136             >
 706+ E136             >                // dummy db directives used to calculate length of namec
 706+ E136 28 43 4F 4D >                db      "(COMPARE)"
 706+ E13A 50 41 52 45 >
 706+ E13E 29          >
 706+ E13F             >len_NFA         defl    $ - temp_NFA
 706+ E13F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 706+ E136             >
 706+ E136 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 706+ E137 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 706+ E13B 50 41 52 45 >
 706+ E13F 29          >
 706+ E140             >                org     $-1                 // alter last byte of Name just above to set
 706+ E13F A9          >                db      {b $} | END_BIT     // msb as name end
 706+ E140             >
 706+ E140 2C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 706+ E142             >Prev_Ptr        defl    Heap_Ptr
 706+ E142             >
 706+ E142             >mirror_Ptr      defl    $
 706+ E142             >
 706+ E142 75 65       >                dw      Dict_Ptr + 2        // xt
 706+ E144             >Heap_Ptr        defl    $ - $E000           // save current HP
 706+ E144             >
 706+ E144             >Current_HP      defl  $ - $E000             // used to set HP once!
 706+ E144             >
 706+ E144             >//              ______________________________________________________________________
 706+ E144             >//              Dictionary part
 706+ E144             >
 706+ E144             >                org     Dict_Ptr
 706+ 6573             >
 706+ 6573 42 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 706+ 6575             >
 706+ 6575             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 706+ 6575 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 706+ 6575 ~           >
 706+ 6575 ~           >
 706+ 6575             >                endif           ; ok        // for other definitions it "points" the correct handler
 706+ 6575             >                // Use of "; ok" to suppress "warning[fwdref]"
 706+ 6575             >
 706+ 6575             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 707+ 6575 D9                           exx
 708+ 6576 E1                           pop     hl                  // Number of bytes
 709+ 6577 7D                           ld      a, l
 710+ 6578 E1                           pop     hl                  // hl points string a2
 711+ 6579 D1                           pop     de                  // hl points string a1
 712+ 657A              //              push    bc                  // Instruction pointer on stack
 713+ 657A 47                           ld      b, a
 714+ 657B              C_Compare_Loop:
 715+ 657B 7E                               ld      a, (hl)
 716+ 657C CD 78 64                         call    Case_Sensitive
 717+ 657F 4F                               ld      c, a
 718+ 6580 1A                               ld      a, (de)
 719+ 6581 CD 78 64                         call    Case_Sensitive
 720+ 6584 B9                               cp      c
 721+ 6585 13                               inc     de
 722+ 6586 23                               inc     hl
 723+ 6587 28 0E                            jr      z, C_Compare_Equal
 724+ 6589 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 725+ 658B 21 01 00                                 ld      hl, 1               // a1 gt a2
 726+ 658E 18 03                                jr      C_Compare_Then      // Else
 727+ 6590              C_Compare_NotLessThan:
 728+ 6590 21 FF FF                                 ld      hl, -1              // a1 lt a2
 729+ 6593              C_Compare_Then:                                 // Endif
 730+ 6593              //                      pop     bc              // restore Instruction Pointer
 731+ 6593 E5                                   push    hl
 732+ 6594 D9                                   exx
 733+ 6595
 734+ 6595                                      next
 734+ 6595 DD E9       >                jp      (ix)
 735+ 6597
 736+ 6597              C_Compare_Equal:
 737+ 6597 10 E2                        djnz    C_Compare_Loop
 738+ 6599 21 00 00                     ld      hl, 0               // a1 eq a2
 739+ 659C              //              pop     bc                  // restore Instruction Pointer
 740+ 659C E5                           push    hl
 741+ 659D D9                           exx
 742+ 659E
 743+ 659E                              next
 743+ 659E DD E9       >                jp      (ix)
 744+ 65A0
 745+ 65A0              //  ______________________________________________________________________
 746+ 65A0              //
 747+ 65A0              // emitc        c --
 748+ 65A0              // low level emit, calls ROM routine at #10 to send a character to
 749+ 65A0              // the the current channel (see SELECT to change stream-channel)
 750+ 65A0                              New_Def EMITC, "EMITC", is_code, is_normal
 750+ 65A0             >
 750+ 65A0             >Dict_Ptr        defl    $
 750+ 65A0             >
 750+ 65A0             >//              ______________________________________________________________________
 750+ 65A0             >//              Heap part
 750+ 65A0             >
 750+ 65A0             >
 750+ 65A0             >                org     (Heap_Ptr & $1FFF) + $E000
 750+ E144             >
 750+ E144             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 750+ E144             >Latest_Definition defl  Heap_Ptr
 750+ E144             >
 750+ E144             >                // dummy db directives used to calculate length of namec
 750+ E144 45 4D 49 54 >                db      "EMITC"
 750+ E148 43          >
 750+ E149             >len_NFA         defl    $ - temp_NFA
 750+ E149             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 750+ E144             >
 750+ E144 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 750+ E145 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 750+ E149 43          >
 750+ E14A             >                org     $-1                 // alter last byte of Name just above to set
 750+ E149 C3          >                db      {b $} | END_BIT     // msb as name end
 750+ E14A             >
 750+ E14A 36 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 750+ E14C             >Prev_Ptr        defl    Heap_Ptr
 750+ E14C             >
 750+ E14C             >mirror_Ptr      defl    $
 750+ E14C             >
 750+ E14C A2 65       >                dw      Dict_Ptr + 2        // xt
 750+ E14E             >Heap_Ptr        defl    $ - $E000           // save current HP
 750+ E14E             >
 750+ E14E             >Current_HP      defl  $ - $E000             // used to set HP once!
 750+ E14E             >
 750+ E14E             >//              ______________________________________________________________________
 750+ E14E             >//              Dictionary part
 750+ E14E             >
 750+ E14E             >                org     Dict_Ptr
 750+ 65A0             >
 750+ 65A0 4C 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 750+ 65A2             >
 750+ 65A2             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 750+ 65A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 750+ 65A2 ~           >
 750+ 65A2 ~           >
 750+ 65A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 750+ 65A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 750+ 65A2             >
 750+ 65A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 751+ 65A2 E1                           pop     hl
 752+ 65A3 7D                           ld      a, l
 753+ 65A4              Emitc_Ptr:
 754+ 65A4 C5                           push    bc
 755+ 65A5 D5                           push    de
 756+ 65A6 DD E5                        push    ix
 757+ 65A8 D7                           rst     $10
 758+ 65A9 DD E1                        pop     ix
 759+ 65AB D1                           pop     de
 760+ 65AC C1                           pop     bc
 761+ 65AD 3E FF                        ld      a, 255            // max possible
 762+ 65AF 32 8C 5C                     ld      (SCR_CT), a
 763+ 65B2                              next
 763+ 65B2 DD E9       >                jp      (ix)
 764+ 65B4
 765+ 65B4              //  ______________________________________________________________________
 766+ 65B4              //
 767+ 65B4              // cr           --
 768+ 65B4              // send a CR via EMITC
 769+ 65B4                              New_Def CR, "CR", is_code, is_normal
 769+ 65B4             >
 769+ 65B4             >Dict_Ptr        defl    $
 769+ 65B4             >
 769+ 65B4             >//              ______________________________________________________________________
 769+ 65B4             >//              Heap part
 769+ 65B4             >
 769+ 65B4             >
 769+ 65B4             >                org     (Heap_Ptr & $1FFF) + $E000
 769+ E14E             >
 769+ E14E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 769+ E14E             >Latest_Definition defl  Heap_Ptr
 769+ E14E             >
 769+ E14E             >                // dummy db directives used to calculate length of namec
 769+ E14E 43 52       >                db      "CR"
 769+ E150             >len_NFA         defl    $ - temp_NFA
 769+ E150             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 769+ E14E             >
 769+ E14E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 769+ E14F 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 769+ E151             >                org     $-1                 // alter last byte of Name just above to set
 769+ E150 D2          >                db      {b $} | END_BIT     // msb as name end
 769+ E151             >
 769+ E151 44 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 769+ E153             >Prev_Ptr        defl    Heap_Ptr
 769+ E153             >
 769+ E153             >mirror_Ptr      defl    $
 769+ E153             >
 769+ E153 B6 65       >                dw      Dict_Ptr + 2        // xt
 769+ E155             >Heap_Ptr        defl    $ - $E000           // save current HP
 769+ E155             >
 769+ E155             >Current_HP      defl  $ - $E000             // used to set HP once!
 769+ E155             >
 769+ E155             >//              ______________________________________________________________________
 769+ E155             >//              Dictionary part
 769+ E155             >
 769+ E155             >                org     Dict_Ptr
 769+ 65B4             >
 769+ 65B4 53 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 769+ 65B6             >
 769+ 65B6             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 769+ 65B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 769+ 65B6 ~           >
 769+ 65B6 ~           >
 769+ 65B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 769+ 65B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 769+ 65B6             >
 769+ 65B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 770+ 65B6
 771+ 65B6 3E 0D                        ld      a, CR_CHAR
 772+ 65B8 18 EA                        jr      Emitc_Ptr
 773+ 65BA
 774+ 65BA              Emitc_Vec:
 775+ 65BA F3 65                        dw      C_Emit_Printable  // comma
 776+ 65BC FA 65                        dw      C_Emit_Bel        // bel
 777+ 65BE F3 65                        dw      C_Emit_Printable  // bs
 778+ 65C0 12 66                        dw      C_Emit_Tab        // tab
 779+ 65C2 F3 65                        dw      C_Emit_Printable  // cr
 780+ 65C4 19 66                        dw      C_Emit_NL         // lf (unix newline)
 781+ 65C6 F3 65                        dw      C_Emit_Printable  // blank
 782+ 65C8 F3 65                        dw      C_Emit_Printable  // blank
 783+ 65CA
 784+ 65CA              Emit_Selector_Start:
 785+ 65CA 06                           db      $06                 // comma
 786+ 65CB 07                           db      $07                 // bel
 787+ 65CC 08                           db      $08                 // bs
 788+ 65CD 09                           db      $09                 // tab
 789+ 65CE 0D                           db      $0D                 // cr
 790+ 65CF 0A                           db      $0A                 // lf (unix newline)
 791+ 65D0 20                           db      $20
 792+ 65D1              Emit_Selector_End:
 793+ 65D1 20                           db      $20
 794+ 65D2
 795+ 65D2              //  ______________________________________________________________________
 796+ 65D2              //
 797+ 65D2              // (?emit)      c1 -- c2 | c1
 798+ 65D2              // decode a character to be sent via EMIT
 799+ 65D2              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 800+ 65D2              // the routine should resolve anything and convert the character anyway.
 801+ 65D2                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 801+ 65D2             >
 801+ 65D2             >Dict_Ptr        defl    $
 801+ 65D2             >
 801+ 65D2             >//              ______________________________________________________________________
 801+ 65D2             >//              Heap part
 801+ 65D2             >
 801+ 65D2             >
 801+ 65D2             >                org     (Heap_Ptr & $1FFF) + $E000
 801+ E155             >
 801+ E155             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 801+ E155             >Latest_Definition defl  Heap_Ptr
 801+ E155             >
 801+ E155             >                // dummy db directives used to calculate length of namec
 801+ E155 28 3F 45 4D >                db      "(?EMIT)"
 801+ E159 49 54 29    >
 801+ E15C             >len_NFA         defl    $ - temp_NFA
 801+ E15C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 801+ E155             >
 801+ E155 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 801+ E156 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 801+ E15A 49 54 29    >
 801+ E15D             >                org     $-1                 // alter last byte of Name just above to set
 801+ E15C A9          >                db      {b $} | END_BIT     // msb as name end
 801+ E15D             >
 801+ E15D 4E 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 801+ E15F             >Prev_Ptr        defl    Heap_Ptr
 801+ E15F             >
 801+ E15F             >mirror_Ptr      defl    $
 801+ E15F             >
 801+ E15F D4 65       >                dw      Dict_Ptr + 2        // xt
 801+ E161             >Heap_Ptr        defl    $ - $E000           // save current HP
 801+ E161             >
 801+ E161             >Current_HP      defl  $ - $E000             // used to set HP once!
 801+ E161             >
 801+ E161             >//              ______________________________________________________________________
 801+ E161             >//              Dictionary part
 801+ E161             >
 801+ E161             >                org     Dict_Ptr
 801+ 65D2             >
 801+ 65D2 5F 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 801+ 65D4             >
 801+ 65D4             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 801+ 65D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 801+ 65D4 ~           >
 801+ 65D4 ~           >
 801+ 65D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 801+ 65D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 801+ 65D4             >
 801+ 65D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 802+ 65D4 D9                           exx
 803+ 65D5 D1                           pop     de
 804+ 65D6 7B                           ld      a, e                //  de has c1
 805+ 65D7 E6 7F                        and     $7F                 // 7-bit ascii only
 806+ 65D9                              // push    bc                  // save Instruction Pointer
 807+ 65D9 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 808+ 65DC 21 D1 65                     ld      hl, Emit_Selector_End
 809+ 65DF ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 810+ 65E1 20 0A                        jr      nz, C_Emit_Not_Found
 811+ 65E3                                  // Found then decode it
 812+ 65E3 21 BA 65                         ld      hl, Emitc_Vec
 813+ 65E6 09                               add     hl, bc
 814+ 65E7 09                               add     hl, bc
 815+ 65E8 5E                               ld      e, (hl)
 816+ 65E9 23                               inc     hl
 817+ 65EA 56                               ld      d, (hl)
 818+ 65EB EB                               ex      de, hl
 819+ 65EC                                  // pop     bc                  // restore Instruction Pointer
 820+ 65EC E9                               jp      (hl)                // one of the following labels
 821+ 65ED              C_Emit_Not_Found:
 822+ 65ED                              // pop     bc                  // restore Instruction Pointer
 823+ 65ED FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 824+ 65EF 30 02                        jr      nc, C_Emit_Printable
 825+ 65F1 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 826+ 65F3              C_Emit_Printable:
 827+ 65F3 6F                           ld      l, a
 828+ 65F4 26 00                        ld      h, 0
 829+ 65F6 E5                           push    hl
 830+ 65F7 D9                           exx
 831+ 65F8                              next
 831+ 65F8 DD E9       >                jp      (ix)
 832+ 65FA
 833+ 65FA              C_Emit_Bel:
 834+ 65FA D9                            exx
 835+ 65FB C5                           push    bc                  // save Instruction Pointer
 836+ 65FC D5                           push    de
 837+ 65FD 11 00 01                     ld      de, $0100
 838+ 6600 21 00 02                     ld      hl, $0200
 839+ 6603 DD E5                        push    ix                  // save Next Pointer
 840+ 6605 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 841+ 6608 DD E1                        pop     ix                  // restore Next Pointer
 842+ 660A D1                           pop     de
 843+ 660B C1                           pop     bc                  // restore Instruction Pointer
 844+ 660C 21 00 00                     ld      hl, NUL_CHAR
 845+ 660F E5                           push    hl
 846+ 6610                              next
 846+ 6610 DD E9       >                jp      (ix)
 847+ 6612
 848+ 6612 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 849+ 6615 E5                           push    hl
 850+ 6616 D9                           exx
 851+ 6617                              next
 851+ 6617 DD E9       >                jp      (ix)
 852+ 6619
 853+ 6619 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 854+ 661C E5                           push    hl
 855+ 661D D9                           exx
 856+ 661E                              next
 856+ 661E DD E9       >                jp      (ix)
 857+ 6620
 858+ 6620              //  ______________________________________________________________________
 859+ 6620
 860+ 6620              Key_Table:
 861+ 6620 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 862+ 6621 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 863+ 6622 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 864+ 6623 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 865+ 6624 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 866+ 6625 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 867+ 6626 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 868+ 6627 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 869+ 6628 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 870+ 6629 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 871+ 662A C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 872+ 662B              Key_MapTo:
 873+ 662B 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 874+ 662C 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 875+ 662D 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 876+ 662E 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 877+ 662F 5D                           db      $5D                 //  6: SYMBOL+U : ]
 878+ 6630 5B                           db      $5B                 //  5: SYMBOL+Y : [
 879+ 6631 7D                           db      $7D                 //  4: SYMBOL+G : }
 880+ 6632 7B                           db      $7B                 //  3: SYMBOL+F : {
 881+ 6633 5C                           db      $5C                 //  2: SYMBOl+D : //
 882+ 6634 7C                           db      $7C                 //  1: SYMBOL+S : |
 883+ 6635 7E                           db      $7E                 //  0: SYMBOL+A : ~
 884+ 6636
 885+ 6636              //  ______________________________________________________________________
 886+ 6636              //
 887+ 6636              // curs         -- c
 888+ 6636              // wait for a keypress
 889+ 6636              // This definition need Standard ROM Interrupt to be served
 890+ 6636
 891+ 6636                              New_Def CUR, "CURS", is_code, is_normal
 891+ 6636             >
 891+ 6636             >Dict_Ptr        defl    $
 891+ 6636             >
 891+ 6636             >//              ______________________________________________________________________
 891+ 6636             >//              Heap part
 891+ 6636             >
 891+ 6636             >
 891+ 6636             >                org     (Heap_Ptr & $1FFF) + $E000
 891+ E161             >
 891+ E161             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 891+ E161             >Latest_Definition defl  Heap_Ptr
 891+ E161             >
 891+ E161             >                // dummy db directives used to calculate length of namec
 891+ E161 43 55 52 53 >                db      "CURS"
 891+ E165             >len_NFA         defl    $ - temp_NFA
 891+ E165             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 891+ E161             >
 891+ E161 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 891+ E162 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 891+ E166             >                org     $-1                 // alter last byte of Name just above to set
 891+ E165 D3          >                db      {b $} | END_BIT     // msb as name end
 891+ E166             >
 891+ E166 55 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 891+ E168             >Prev_Ptr        defl    Heap_Ptr
 891+ E168             >
 891+ E168             >mirror_Ptr      defl    $
 891+ E168             >
 891+ E168 38 66       >                dw      Dict_Ptr + 2        // xt
 891+ E16A             >Heap_Ptr        defl    $ - $E000           // save current HP
 891+ E16A             >
 891+ E16A             >Current_HP      defl  $ - $E000             // used to set HP once!
 891+ E16A             >
 891+ E16A             >//              ______________________________________________________________________
 891+ E16A             >//              Dictionary part
 891+ E16A             >
 891+ E16A             >                org     Dict_Ptr
 891+ 6636             >
 891+ 6636 68 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 891+ 6638             >
 891+ 6638             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 891+ 6638 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 891+ 6638 ~           >
 891+ 6638 ~           >
 891+ 6638             >                endif           ; ok        // for other definitions it "points" the correct handler
 891+ 6638             >                // Use of "; ok" to suppress "warning[fwdref]"
 891+ 6638             >
 891+ 6638             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 892+ 6638
 893+ 6638 C5                           push    bc                  // save Instruction Pointer
 894+ 6639 D5                           push    de                  // save Return Stack Pointer
 895+ 663A DD E5                        push    ix
 896+ 663C ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 897+ 6640 31 61 63                     ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 898+ 6643 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 899+ 6647
 900+ 6647              Cur_Wait:
 901+ 6647 76                               halt
 902+ 6648 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 903+ 664A CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 904+ 664D
 905+ 664D                                  // software-flash: flips face every 320 ms
 906+ 664D 3E 20                            ld      a, $20              // Timing based
 907+ 664F FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 908+ 6652
 909+ 6652 3A 8E 63                         ld      a, (Block_Face)     // see origin.asm
 910+ 6655 20 0C                            jr      nz, Cur_Cursor
 911+ 6657 3A 8F 63                             ld      a, (Half_Face)      // see origin.asm
 912+ 665A FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 913+ 665E 28 03                                jr      z, Cur_Cursor
 914+ 6660 3A 90 63                                 ld      a, (Underscore_Face) // see origin
 915+ 6663              Cur_Cursor:
 916+ 6663 D7                               rst     $10
 917+ 6664 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 918+ 6666 D7                               rst     $10
 919+ 6667
 920+ 6667 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 921+ 666B 28 DA                        jr      z, Cur_Wait
 922+ 666D
 923+ 666D 76                           halt    // this is to sync flashing cursor.
 924+ 666E
 925+ 666E 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 926+ 6670 D7                           rst     $10
 927+ 6671 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 928+ 6673 D7                           rst     $10
 929+ 6674
 930+ 6674 ED 7B 92 63                  ld      sp, (SP_Saved)
 931+ 6678
 932+ 6678 DD E1                        pop     ix
 933+ 667A D1                           pop     de                  // Restore Return Stack Pointer
 934+ 667B C1                           pop     bc                  // Restore Instruction Pointer
 935+ 667C                              next
 935+ 667C DD E9       >                jp      (ix)
 936+ 667E
 937+ 667E
 938+ 667E              //  ______________________________________________________________________
 939+ 667E              //
 940+ 667E              // key          -- c
 941+ 667E              // This definition need Standard ROM Interrupt to be served
 942+ 667E
 943+ 667E                              New_Def KEY, "KEY", is_code, is_normal
 943+ 667E             >
 943+ 667E             >Dict_Ptr        defl    $
 943+ 667E             >
 943+ 667E             >//              ______________________________________________________________________
 943+ 667E             >//              Heap part
 943+ 667E             >
 943+ 667E             >
 943+ 667E             >                org     (Heap_Ptr & $1FFF) + $E000
 943+ E16A             >
 943+ E16A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 943+ E16A             >Latest_Definition defl  Heap_Ptr
 943+ E16A             >
 943+ E16A             >                // dummy db directives used to calculate length of namec
 943+ E16A 4B 45 59    >                db      "KEY"
 943+ E16D             >len_NFA         defl    $ - temp_NFA
 943+ E16D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 943+ E16A             >
 943+ E16A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 943+ E16B 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 943+ E16E             >                org     $-1                 // alter last byte of Name just above to set
 943+ E16D D9          >                db      {b $} | END_BIT     // msb as name end
 943+ E16E             >
 943+ E16E 61 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 943+ E170             >Prev_Ptr        defl    Heap_Ptr
 943+ E170             >
 943+ E170             >mirror_Ptr      defl    $
 943+ E170             >
 943+ E170 80 66       >                dw      Dict_Ptr + 2        // xt
 943+ E172             >Heap_Ptr        defl    $ - $E000           // save current HP
 943+ E172             >
 943+ E172             >Current_HP      defl  $ - $E000             // used to set HP once!
 943+ E172             >
 943+ E172             >//              ______________________________________________________________________
 943+ E172             >//              Dictionary part
 943+ E172             >
 943+ E172             >                org     Dict_Ptr
 943+ 667E             >
 943+ 667E 70 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 943+ 6680             >
 943+ 6680             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 943+ 6680 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 943+ 6680 ~           >
 943+ 6680 ~           >
 943+ 6680             >                endif           ; ok        // for other definitions it "points" the correct handler
 943+ 6680             >                // Use of "; ok" to suppress "warning[fwdref]"
 943+ 6680             >
 943+ 6680             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 944+ 6680
 945+ 6680 C5                           push    bc                  // Save Instruction Pointer
 946+ 6681
 947+ 6681              Key_Wait:
 948+ 6681 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 949+ 6685 28 FA                        jr      z, Key_Wait
 950+ 6687
 951+ 6687 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 952+ 668A
 953+ 668A                              // decode character from above table
 954+ 668A 21 20 66                     ld      hl, Key_Table
 955+ 668D 01 0B 00                     ld      bc, $000B
 956+ 6690 ED B1                        cpir
 957+ 6692 20 05                        jr      nz, Key_DontMap
 958+ 6694 21 2B 66                         ld      hl, Key_MapTo
 959+ 6697 09                               add     hl, bc
 960+ 6698 7E                               ld      a, (hl)
 961+ 6699 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 962+ 669B 20 09                        jr      nz, Key_NoCapsLock
 963+ 669D 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 964+ 66A0 7E                               ld      a, (hl)
 965+ 66A1 EE 08                            xor     $08
 966+ 66A3 77                               ld      (hl), a
 967+ 66A4 3E 00                            ld      a, NUL_CHAR
 968+ 66A6 6F           Key_NoCapsLock: ld      l, a
 969+ 66A7 26 00                        ld      h, 0                // Prepare TOS
 970+ 66A9
 971+ 66A9 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 972+ 66AD
 973+ 66AD C1                           pop     bc                  // Restore Instruction Pointer
 974+ 66AE
 975+ 66AE                              psh1
 975+ 66AE E5          >                push    hl
 975+ 66AF DD E9       >                jp      (ix)
 976+ 66B1
 977+ 66B1
 978+ 66B1              //  ______________________________________________________________________
 979+ 66B1              //
 980+ 66B1              // click        --
 981+ 66B1              // This definition need Standard ROM Interrupt to be served
 982+ 66B1              //
 983+ 66B1              //              New_Def CLICK, "CLICK", is_code, is_normal
 984+ 66B1              //
 985+ 66B1              //                push    bc
 986+ 66B1              //              ld      a, ($5C48)          // BORDCR system variable
 987+ 66B1              //              rra
 988+ 66B1              //              rra
 989+ 66B1              //              rra
 990+ 66B1              //              or      $18                 // quick'n'dirty click
 991+ 66B1              //              out     ($fe), a
 992+ 66B1              //              ld      b, 0
 993+ 66B1              //              djnz    $                   // wait loop
 994+ 66B1              //              xor     $18
 995+ 66B1              //              out     ($fe), a
 996+ 66B1              //                pop     bc
 997+ 66B1
 998+ 66B1              //              next
 999+ 66B1
1000+ 66B1              //  ______________________________________________________________________
1001+ 66B1              //
1002+ 66B1              // key?         -- f
1003+ 66B1              // key available
1004+ 66B1              //
1005+ 66B1              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1006+ 66B1              //
1007+ 66B1              //              ld      hl, 0000
1008+ 66B1              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1009+ 66B1              //              jr      z, Key_Q
1010+ 66B1              //                  dec     hl
1011+ 66B1              // Key_Q:
1012+ 66B1              //                psh1
1013+ 66B1              //              next
1014+ 66B1
1015+ 66B1              //  ______________________________________________________________________
1016+ 66B1              //
1017+ 66B1              // ?terminal    -- FALSE | TRUE
1018+ 66B1              // test for BREAK keypress
1019+ 66B1                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1019+ 66B1             >
1019+ 66B1             >Dict_Ptr        defl    $
1019+ 66B1             >
1019+ 66B1             >//              ______________________________________________________________________
1019+ 66B1             >//              Heap part
1019+ 66B1             >
1019+ 66B1             >
1019+ 66B1             >                org     (Heap_Ptr & $1FFF) + $E000
1019+ E172             >
1019+ E172             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1019+ E172             >Latest_Definition defl  Heap_Ptr
1019+ E172             >
1019+ E172             >                // dummy db directives used to calculate length of namec
1019+ E172 3F 54 45 52 >                db      "?TERMINAL"
1019+ E176 4D 49 4E 41 >
1019+ E17A 4C          >
1019+ E17B             >len_NFA         defl    $ - temp_NFA
1019+ E17B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1019+ E172             >
1019+ E172 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1019+ E173 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1019+ E177 4D 49 4E 41 >
1019+ E17B 4C          >
1019+ E17C             >                org     $-1                 // alter last byte of Name just above to set
1019+ E17B CC          >                db      {b $} | END_BIT     // msb as name end
1019+ E17C             >
1019+ E17C 6A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1019+ E17E             >Prev_Ptr        defl    Heap_Ptr
1019+ E17E             >
1019+ E17E             >mirror_Ptr      defl    $
1019+ E17E             >
1019+ E17E B3 66       >                dw      Dict_Ptr + 2        // xt
1019+ E180             >Heap_Ptr        defl    $ - $E000           // save current HP
1019+ E180             >
1019+ E180             >Current_HP      defl  $ - $E000             // used to set HP once!
1019+ E180             >
1019+ E180             >//              ______________________________________________________________________
1019+ E180             >//              Dictionary part
1019+ E180             >
1019+ E180             >                org     Dict_Ptr
1019+ 66B1             >
1019+ 66B1 7E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1019+ 66B3             >
1019+ 66B3             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1019+ 66B3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1019+ 66B3 ~           >
1019+ 66B3 ~           >
1019+ 66B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1019+ 66B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1019+ 66B3             >
1019+ 66B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1020+ 66B3 D9                           exx
1021+ 66B4 01 FE 7F                     ld      bc, $7ffe
1022+ 66B7 ED 50                        in      d, (c)
1023+ 66B9 41                           ld      b, c
1024+ 66BA ED 78                        in      a, (c)
1025+ 66BC B2                           or       d
1026+ 66BD 1F                           rra
1027+ 66BE 3F                           ccf
1028+ 66BF ED 62                        sbc     hl, hl
1029+ 66C1 E5                           push    hl
1030+ 66C2 D9                           exx
1031+ 66C3                              next
1031+ 66C3 DD E9       >                jp      (ix)
1032+ 66C5
1033+ 66C5
1034+ 66C5              //  ______________________________________________________________________
1035+ 66C5              //
1036+ 66C5              // inkey        -- c | 0
1037+ 66C5              // call ROM inkey$ routine, returns c or "zero".
1038+ 66C5              //
1039+ 66C5              //              New_Def INKEY, "INKEY", is_code, is_normal
1040+ 66C5              //              push    bc
1041+ 66C5              //              push    de
1042+ 66C5              //              ld      (SP_Saved), sp
1043+ 66C5              //              ld      sp, Cold_origin - 5
1044+ 66C5              //              push    ix
1045+ 66C5              //              call    $15E6                   // instead of 15E9
1046+ 66C5              //              pop     ix
1047+ 66C5              //              ld      sp, (SP_Saved)
1048+ 66C5              //              ld      l, a
1049+ 66C5              //              ld      h, 0
1050+ 66C5              //              pop     de
1051+ 66C5              //              pop     bc
1052+ 66C5              //              psh1
1053+ 66C5
1054+ 66C5              //  ______________________________________________________________________
1055+ 66C5              //
1056+ 66C5              // select      n --
1057+ 66C5              // selects the given channel number
1058+ 66C5
1059+ 66C5                              New_Def SELECT, "SELECT", is_code, is_normal
1059+ 66C5             >
1059+ 66C5             >Dict_Ptr        defl    $
1059+ 66C5             >
1059+ 66C5             >//              ______________________________________________________________________
1059+ 66C5             >//              Heap part
1059+ 66C5             >
1059+ 66C5             >
1059+ 66C5             >                org     (Heap_Ptr & $1FFF) + $E000
1059+ E180             >
1059+ E180             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1059+ E180             >Latest_Definition defl  Heap_Ptr
1059+ E180             >
1059+ E180             >                // dummy db directives used to calculate length of namec
1059+ E180 53 45 4C 45 >                db      "SELECT"
1059+ E184 43 54       >
1059+ E186             >len_NFA         defl    $ - temp_NFA
1059+ E186             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1059+ E180             >
1059+ E180 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1059+ E181 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1059+ E185 43 54       >
1059+ E187             >                org     $-1                 // alter last byte of Name just above to set
1059+ E186 D4          >                db      {b $} | END_BIT     // msb as name end
1059+ E187             >
1059+ E187 72 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1059+ E189             >Prev_Ptr        defl    Heap_Ptr
1059+ E189             >
1059+ E189             >mirror_Ptr      defl    $
1059+ E189             >
1059+ E189 C7 66       >                dw      Dict_Ptr + 2        // xt
1059+ E18B             >Heap_Ptr        defl    $ - $E000           // save current HP
1059+ E18B             >
1059+ E18B             >Current_HP      defl  $ - $E000             // used to set HP once!
1059+ E18B             >
1059+ E18B             >//              ______________________________________________________________________
1059+ E18B             >//              Dictionary part
1059+ E18B             >
1059+ E18B             >                org     Dict_Ptr
1059+ 66C5             >
1059+ 66C5 89 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1059+ 66C7             >
1059+ 66C7             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1059+ 66C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1059+ 66C7 ~           >
1059+ 66C7 ~           >
1059+ 66C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1059+ 66C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1059+ 66C7             >
1059+ 66C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1060+ 66C7 E1                           pop     hl
1061+ 66C8 C5                           push    bc
1062+ 66C9 D5                           push    de
1063+ 66CA 7D                           ld      a, l
1064+ 66CB ED 73 92 63                  ld      (SP_Saved), sp
1065+ 66CF 31 61 63                     ld      sp, Cold_origin - 5
1066+ 66D2 DD E5                        push    ix
1067+ 66D4 CD 01 16                     call    $1601
1068+ 66D7 DD E1                        pop     ix
1069+ 66D9 ED 7B 92 63                  ld      sp, (SP_Saved)
1070+ 66DD D1                           pop     de
1071+ 66DE C1                           pop     bc
1072+ 66DF                              next
1072+ 66DF DD E9       >                jp      (ix)
1073+ 66E1
1074+ 66E1              //  ______________________________________________________________________
1075+ 66E1              //
1076+ 66E1              // ZX Spectrum Next - Low Level disk primitives.
1077+ 66E1              // this include is "here" for backward compatibility
1078+ 66E1
1079+ 66E1                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
   1++66E1              //  ______________________________________________________________________
   2++66E1              //
   3++66E1              //  next-opt.asm
   4++66E1              //
   5++66E1              //  ZX Spectrum Next - peculiar definitions
   6++66E1              //  ______________________________________________________________________
   7++66E1
   8++66E1              //  ______________________________________________________________________
   9++66E1              //
  10++66E1              // f_seek       d u -- f
  11++66E1              // Seek to position d in file-handle u.
  12++66E1              // Return a false-flag 0 on success, True flag on error
  13++66E1                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++66E1             >
  13++66E1             >Dict_Ptr        defl    $
  13++66E1             >
  13++66E1             >//              ______________________________________________________________________
  13++66E1             >//              Heap part
  13++66E1             >
  13++66E1             >
  13++66E1             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E18B             >
  13++E18B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E18B             >Latest_Definition defl  Heap_Ptr
  13++E18B             >
  13++E18B             >                // dummy db directives used to calculate length of namec
  13++E18B 46 5F 53 45 >                db      "F_SEEK"
  13++E18F 45 4B       >
  13++E191             >len_NFA         defl    $ - temp_NFA
  13++E191             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E18B             >
  13++E18B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E18C 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E190 45 4B       >
  13++E192             >                org     $-1                 // alter last byte of Name just above to set
  13++E191 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E192             >
  13++E192 80 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E194             >Prev_Ptr        defl    Heap_Ptr
  13++E194             >
  13++E194             >mirror_Ptr      defl    $
  13++E194             >
  13++E194 E3 66       >                dw      Dict_Ptr + 2        // xt
  13++E196             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E196             >
  13++E196             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E196             >
  13++E196             >//              ______________________________________________________________________
  13++E196             >//              Dictionary part
  13++E196             >
  13++E196             >                org     Dict_Ptr
  13++66E1             >
  13++66E1 94 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++66E3             >
  13++66E3             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++66E3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++66E3 ~           >
  13++66E3 ~           >
  13++66E3             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++66E3             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++66E3             >
  13++66E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++66E3 D9                            exx
  15++66E4 E1                            pop     hl                  // file-handle
  16++66E5 7D                            ld      a, l
  17++66E6 C1                            pop     bc                  // bc has high-word of d
  18++66E7 D1                            pop     de
  19++66E8 D9                           exx
  20++66E9 DD E5                        push    ix
  21++66EB D5                           push    de
  22++66EC C5                           push    bc                  // save Instruction Pointer
  23++66ED D9                            exx
  24++66EE DD 21 00 00                   ld      ix, 0
  25++66F2 CF                            rst     $08
  26++66F3 9F                            db      $9F
  27++66F4              F_Seek_Exit:
  28++66F4 C1                           pop     bc                  // restore Instruction Pointer
  29++66F5 D1                           pop     de
  30++66F6 DD E1                        pop     ix
  31++66F8 ED 62                        sbc     hl, hl              // to get 0 or -1
  32++66FA
  33++66FA                              psh1
  33++66FA E5          >                push    hl
  33++66FB DD E9       >                jp      (ix)
  34++66FD
  35++66FD              //  ______________________________________________________________________
  36++66FD              //
  37++66FD              // f_close      u -- f
  38++66FD              // Close file-handle u.
  39++66FD              // Return 0 on success, True flag on error
  40++66FD
  41++66FD                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  41++66FD             >
  41++66FD             >Dict_Ptr        defl    $
  41++66FD             >
  41++66FD             >//              ______________________________________________________________________
  41++66FD             >//              Heap part
  41++66FD             >
  41++66FD             >
  41++66FD             >                org     (Heap_Ptr & $1FFF) + $E000
  41++E196             >
  41++E196             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41++E196             >Latest_Definition defl  Heap_Ptr
  41++E196             >
  41++E196             >                // dummy db directives used to calculate length of namec
  41++E196 46 5F 43 4C >                db      "F_CLOSE"
  41++E19A 4F 53 45    >
  41++E19D             >len_NFA         defl    $ - temp_NFA
  41++E19D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41++E196             >
  41++E196 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  41++E197 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  41++E19B 4F 53 45    >
  41++E19E             >                org     $-1                 // alter last byte of Name just above to set
  41++E19D C5          >                db      {b $} | END_BIT     // msb as name end
  41++E19E             >
  41++E19E 8B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  41++E1A0             >Prev_Ptr        defl    Heap_Ptr
  41++E1A0             >
  41++E1A0             >mirror_Ptr      defl    $
  41++E1A0             >
  41++E1A0 FF 66       >                dw      Dict_Ptr + 2        // xt
  41++E1A2             >Heap_Ptr        defl    $ - $E000           // save current HP
  41++E1A2             >
  41++E1A2             >Current_HP      defl  $ - $E000             // used to set HP once!
  41++E1A2             >
  41++E1A2             >//              ______________________________________________________________________
  41++E1A2             >//              Dictionary part
  41++E1A2             >
  41++E1A2             >                org     Dict_Ptr
  41++66FD             >
  41++66FD A0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  41++66FF             >
  41++66FF             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  41++66FF ~           >                call    runcode ; ok        // for primitive definitions  actual code
  41++66FF ~           >
  41++66FF ~           >
  41++66FF             >                endif           ; ok        // for other definitions it "points" the correct handler
  41++66FF             >                // Use of "; ok" to suppress "warning[fwdref]"
  41++66FF             >
  41++66FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42++66FF
  43++66FF E1                           pop     hl
  44++6700 7D                           ld      a, l                // file-handle
  45++6701 DD E5                        push    ix
  46++6703 D5                           push    de
  47++6704 C5                           push    bc                  // Save Instruction pointer
  48++6705 CF                           rst     $08
  49++6706 9B                           db      $9B
  50++6707 18 EB                        jr      F_Seek_Exit
  51++6709              //              pop     de
  52++6709              //              pop     bc
  53++6709              //              pop     ix
  54++6709              //              sbc     hl, hl
  55++6709              //              psh1
  56++6709
  57++6709              //  ______________________________________________________________________
  58++6709              //
  59++6709              // f_sync      u -- f
  60++6709              // Close file-handle u.
  61++6709              // Return 0 on success, True flag on error
  62++6709
  63++6709                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  63++6709             >
  63++6709             >Dict_Ptr        defl    $
  63++6709             >
  63++6709             >//              ______________________________________________________________________
  63++6709             >//              Heap part
  63++6709             >
  63++6709             >
  63++6709             >                org     (Heap_Ptr & $1FFF) + $E000
  63++E1A2             >
  63++E1A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63++E1A2             >Latest_Definition defl  Heap_Ptr
  63++E1A2             >
  63++E1A2             >                // dummy db directives used to calculate length of namec
  63++E1A2 46 5F 53 59 >                db      "F_SYNC"
  63++E1A6 4E 43       >
  63++E1A8             >len_NFA         defl    $ - temp_NFA
  63++E1A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63++E1A2             >
  63++E1A2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63++E1A3 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  63++E1A7 4E 43       >
  63++E1A9             >                org     $-1                 // alter last byte of Name just above to set
  63++E1A8 C3          >                db      {b $} | END_BIT     // msb as name end
  63++E1A9             >
  63++E1A9 96 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63++E1AB             >Prev_Ptr        defl    Heap_Ptr
  63++E1AB             >
  63++E1AB             >mirror_Ptr      defl    $
  63++E1AB             >
  63++E1AB 0B 67       >                dw      Dict_Ptr + 2        // xt
  63++E1AD             >Heap_Ptr        defl    $ - $E000           // save current HP
  63++E1AD             >
  63++E1AD             >Current_HP      defl  $ - $E000             // used to set HP once!
  63++E1AD             >
  63++E1AD             >//              ______________________________________________________________________
  63++E1AD             >//              Dictionary part
  63++E1AD             >
  63++E1AD             >                org     Dict_Ptr
  63++6709             >
  63++6709 AB 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  63++670B             >
  63++670B             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  63++670B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  63++670B ~           >
  63++670B ~           >
  63++670B             >                endif           ; ok        // for other definitions it "points" the correct handler
  63++670B             >                // Use of "; ok" to suppress "warning[fwdref]"
  63++670B             >
  63++670B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64++670B E1                           pop     hl
  65++670C 7D                           ld      a, l                // file-handle
  66++670D DD E5                        push    ix
  67++670F D5                           push    de
  68++6710 C5                           push    bc
  69++6711 CF                           rst     $08
  70++6712 9C                           db      $9C
  71++6713 18 DF                        jr      F_Seek_Exit
  72++6715              //              pop     de
  73++6715              //              pop     bc
  74++6715              //              pop     ix
  75++6715              //              sbc     hl, hl
  76++6715              //              psh1
  77++6715
  78++6715              //  ______________________________________________________________________
  79++6715              //
  80++6715              // f_fgetpos    u -- d f
  81++6715              // Seek to position d in file-handle u.
  82++6715              // Return a false-flag 0 on success, True flag on error
  83++6715                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  83++6715             >
  83++6715             >Dict_Ptr        defl    $
  83++6715             >
  83++6715             >//              ______________________________________________________________________
  83++6715             >//              Heap part
  83++6715             >
  83++6715             >
  83++6715             >                org     (Heap_Ptr & $1FFF) + $E000
  83++E1AD             >
  83++E1AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  83++E1AD             >Latest_Definition defl  Heap_Ptr
  83++E1AD             >
  83++E1AD             >                // dummy db directives used to calculate length of namec
  83++E1AD 46 5F 46 47 >                db      "F_FGETPOS"
  83++E1B1 45 54 50 4F >
  83++E1B5 53          >
  83++E1B6             >len_NFA         defl    $ - temp_NFA
  83++E1B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  83++E1AD             >
  83++E1AD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  83++E1AE 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  83++E1B2 45 54 50 4F >
  83++E1B6 53          >
  83++E1B7             >                org     $-1                 // alter last byte of Name just above to set
  83++E1B6 D3          >                db      {b $} | END_BIT     // msb as name end
  83++E1B7             >
  83++E1B7 A2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  83++E1B9             >Prev_Ptr        defl    Heap_Ptr
  83++E1B9             >
  83++E1B9             >mirror_Ptr      defl    $
  83++E1B9             >
  83++E1B9 17 67       >                dw      Dict_Ptr + 2        // xt
  83++E1BB             >Heap_Ptr        defl    $ - $E000           // save current HP
  83++E1BB             >
  83++E1BB             >Current_HP      defl  $ - $E000             // used to set HP once!
  83++E1BB             >
  83++E1BB             >//              ______________________________________________________________________
  83++E1BB             >//              Dictionary part
  83++E1BB             >
  83++E1BB             >                org     Dict_Ptr
  83++6715             >
  83++6715 B9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  83++6717             >
  83++6717             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  83++6717 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  83++6717 ~           >
  83++6717 ~           >
  83++6717             >                endif           ; ok        // for other definitions it "points" the correct handler
  83++6717             >                // Use of "; ok" to suppress "warning[fwdref]"
  83++6717             >
  83++6717             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  84++6717 E1                            pop     hl
  85++6718 7D                            ld      a, l                // file-handle
  86++6719 DD E5                         push    ix
  87++671B D5                            push    de
  88++671C C5                            push    bc
  89++671D CF                            rst     $08
  90++671E A0                            db      $A0
  91++671F D9                           exx
  92++6720 C1                           pop     bc                  // IP
  93++6721 D1                           pop     de                  // Return Stack Pointer
  94++6722 DD E1                        pop     ix
  95++6724 D9                            exx
  96++6725 D5                            push    de
  97++6726 C5                            push    bc
  98++6727 ED 62                         sbc     hl, hl
  99++6729 E5                            push    hl
 100++672A D9                           exx
 101++672B                              next
 101++672B DD E9       >                jp      (ix)
 102++672D
 103++672D              //  ______________________________________________________________________
 104++672D              //
 105++672D              // f_read       a b u -- n f
 106++672D              // Read b bytes from file-handle u to address a
 107++672D              // Return the actual number n of bytes read
 108++672D              // Return 0 on success, True flag on error
 109++672D                              New_Def F_READ, "F_READ", is_code, is_normal
 109++672D             >
 109++672D             >Dict_Ptr        defl    $
 109++672D             >
 109++672D             >//              ______________________________________________________________________
 109++672D             >//              Heap part
 109++672D             >
 109++672D             >
 109++672D             >                org     (Heap_Ptr & $1FFF) + $E000
 109++E1BB             >
 109++E1BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 109++E1BB             >Latest_Definition defl  Heap_Ptr
 109++E1BB             >
 109++E1BB             >                // dummy db directives used to calculate length of namec
 109++E1BB 46 5F 52 45 >                db      "F_READ"
 109++E1BF 41 44       >
 109++E1C1             >len_NFA         defl    $ - temp_NFA
 109++E1C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 109++E1BB             >
 109++E1BB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 109++E1BC 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 109++E1C0 41 44       >
 109++E1C2             >                org     $-1                 // alter last byte of Name just above to set
 109++E1C1 C4          >                db      {b $} | END_BIT     // msb as name end
 109++E1C2             >
 109++E1C2 AD 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 109++E1C4             >Prev_Ptr        defl    Heap_Ptr
 109++E1C4             >
 109++E1C4             >mirror_Ptr      defl    $
 109++E1C4             >
 109++E1C4 2F 67       >                dw      Dict_Ptr + 2        // xt
 109++E1C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 109++E1C6             >
 109++E1C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 109++E1C6             >
 109++E1C6             >//              ______________________________________________________________________
 109++E1C6             >//              Dictionary part
 109++E1C6             >
 109++E1C6             >                org     Dict_Ptr
 109++672D             >
 109++672D C4 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 109++672F             >
 109++672F             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 109++672F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 109++672F ~           >
 109++672F ~           >
 109++672F             >                endif           ; ok        // for other definitions it "points" the correct handler
 109++672F             >                // Use of "; ok" to suppress "warning[fwdref]"
 109++672F             >
 109++672F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 110++672F D9                            exx
 111++6730 E1                            pop     hl
 112++6731 7D                            ld      a, l                // file-handle
 113++6732 C1                            pop     bc                  // bc has bytes to read
 114++6733 DD E3                         ex      (sp), ix            // ix has address
 115++6735 D9                           exx
 116++6736 D5                           push    de                  // Save Return Stack pointer
 117++6737 C5                           push    bc                  // Save Instruction pointer
 118++6738 D9                            exx
 119++6739 CF                            rst     $08
 120++673A 9D                            db      $9D
 121++673B              F_Read_Exit:
 122++673B D9                           exx
 123++673C C1                           pop     bc                  // Restore Instruction pointer
 124++673D D1                           pop     de                  // Restore Return Stack pointer
 125++673E DD E1                        pop     ix                  // Restore ix
 126++6740 D9                            exx
 127++6741 D5                            push    de                  // bytes involved in i/o operation
 128++6742 ED 62                         sbc     hl, hl
 129++6744 E5                            push    hl
 130++6745 D9                           exx
 131++6746                              next
 131++6746 DD E9       >                jp      (ix)
 132++6748
 133++6748              //  ______________________________________________________________________
 134++6748              //
 135++6748              // f_write      a b u -- n f
 136++6748              // Write bytes currently stored at address a to file-handle u.
 137++6748              // Return the actual n bytes written and 0 on success, True flag on error.
 138++6748                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 138++6748             >
 138++6748             >Dict_Ptr        defl    $
 138++6748             >
 138++6748             >//              ______________________________________________________________________
 138++6748             >//              Heap part
 138++6748             >
 138++6748             >
 138++6748             >                org     (Heap_Ptr & $1FFF) + $E000
 138++E1C6             >
 138++E1C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138++E1C6             >Latest_Definition defl  Heap_Ptr
 138++E1C6             >
 138++E1C6             >                // dummy db directives used to calculate length of namec
 138++E1C6 46 5F 57 52 >                db      "F_WRITE"
 138++E1CA 49 54 45    >
 138++E1CD             >len_NFA         defl    $ - temp_NFA
 138++E1CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138++E1C6             >
 138++E1C6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138++E1C7 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 138++E1CB 49 54 45    >
 138++E1CE             >                org     $-1                 // alter last byte of Name just above to set
 138++E1CD C5          >                db      {b $} | END_BIT     // msb as name end
 138++E1CE             >
 138++E1CE BB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138++E1D0             >Prev_Ptr        defl    Heap_Ptr
 138++E1D0             >
 138++E1D0             >mirror_Ptr      defl    $
 138++E1D0             >
 138++E1D0 4A 67       >                dw      Dict_Ptr + 2        // xt
 138++E1D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 138++E1D2             >
 138++E1D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 138++E1D2             >
 138++E1D2             >//              ______________________________________________________________________
 138++E1D2             >//              Dictionary part
 138++E1D2             >
 138++E1D2             >                org     Dict_Ptr
 138++6748             >
 138++6748 D0 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 138++674A             >
 138++674A             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138++674A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138++674A ~           >
 138++674A ~           >
 138++674A             >                endif           ; ok        // for other definitions it "points" the correct handler
 138++674A             >                // Use of "; ok" to suppress "warning[fwdref]"
 138++674A             >
 138++674A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139++674A D9                            exx
 140++674B E1                            pop     hl
 141++674C 7D                            ld      a, l                // file-handle
 142++674D C1                            pop     bc                  // bc has bytes to read
 143++674E DD E3                         ex      (sp), ix            // ix has address
 144++6750 D9                           exx
 145++6751 D5                           push    de                  // Save Return Stack pointer
 146++6752 C5                           push    bc                  // Save Instruction pointer
 147++6753 D9                            exx
 148++6754 CF                            rst     $08
 149++6755 9E                            db      $9E
 150++6756 18 E3                         jr F_Read_Exit
 151++6758              //                exx
 152++6758              //                pop     de                  // Restore Return Stack pointer
 153++6758              //                pop     bc                  // Restore Instruction pointer
 154++6758              //                pop     ix                  // Restore ix
 155++6758              //                 exx
 156++6758              //                 push    de                  // bytes involved in i/o operation
 157++6758              //                 sbc     hl, hl
 158++6758              //                 push    hl
 159++6758              //                exx
 160++6758              //                next
 161++6758
 162++6758              //  ______________________________________________________________________
 163++6758              //
 164++6758              // f_open       a1 a2 b -- u f
 165++6758              // open a file
 166++6758              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 167++6758              // a2 is address to an 8-byte header data used in some cases.
 168++6758              // b is access mode-byte, that is a combination of:
 169++6758              // any/all of:
 170++6758              //   esx_mode_read          $01 request read access
 171++6758              //   esx_mode_write         $02 request write access
 172++6758              //   esx_mode_use_header    $40 read/write +3DOS header
 173++6758              // plus one of:
 174++6758              //   esx_mode_open_exist    $00 only open existing file
 175++6758              //   esx_mode_open_creat    $08 open existing or create file
 176++6758              //   esx_mode_creat_noexist $04 create new file, error if exists
 177++6758              //   esx_mode_creat_trunc   $0c create new file, delete existing
 178++6758              // Return file-handle u and 0 on success, True flag on error
 179++6758                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 179++6758             >
 179++6758             >Dict_Ptr        defl    $
 179++6758             >
 179++6758             >//              ______________________________________________________________________
 179++6758             >//              Heap part
 179++6758             >
 179++6758             >
 179++6758             >                org     (Heap_Ptr & $1FFF) + $E000
 179++E1D2             >
 179++E1D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179++E1D2             >Latest_Definition defl  Heap_Ptr
 179++E1D2             >
 179++E1D2             >                // dummy db directives used to calculate length of namec
 179++E1D2 46 5F 4F 50 >                db      "F_OPEN"
 179++E1D6 45 4E       >
 179++E1D8             >len_NFA         defl    $ - temp_NFA
 179++E1D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179++E1D2             >
 179++E1D2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179++E1D3 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 179++E1D7 45 4E       >
 179++E1D9             >                org     $-1                 // alter last byte of Name just above to set
 179++E1D8 CE          >                db      {b $} | END_BIT     // msb as name end
 179++E1D9             >
 179++E1D9 C6 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179++E1DB             >Prev_Ptr        defl    Heap_Ptr
 179++E1DB             >
 179++E1DB             >mirror_Ptr      defl    $
 179++E1DB             >
 179++E1DB 5A 67       >                dw      Dict_Ptr + 2        // xt
 179++E1DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 179++E1DD             >
 179++E1DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 179++E1DD             >
 179++E1DD             >//              ______________________________________________________________________
 179++E1DD             >//              Dictionary part
 179++E1DD             >
 179++E1DD             >                org     Dict_Ptr
 179++6758             >
 179++6758 DB 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 179++675A             >
 179++675A             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 179++675A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 179++675A ~           >
 179++675A ~           >
 179++675A             >                endif           ; ok        // for other definitions it "points" the correct handler
 179++675A             >                // Use of "; ok" to suppress "warning[fwdref]"
 179++675A             >
 179++675A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180++675A D9                            exx
 181++675B C1                            pop     bc                  // file-mode
 182++675C 41                            ld      b, c                // file-mode
 183++675D D1                            pop     de                  // 8-bytes buffer if any
 184++675E DD E3                         ex      (sp), ix            // filespec nul-terminated
 185++6760 D9                           exx
 186++6761 D5                           push    de                  // Save Return Stack pointer
 187++6762 C5                           push    bc                  // Save Instruction pointer
 188++6763 D9                            exx
 189++6764 3E 2A                         ld      a, "*"
 190++6766 CF                            rst     $08
 191++6767 9A                            db      $9A
 192++6768              F_Open_Exit:
 193++6768 5F                            ld      e, a                // return the handle-number
 194++6769 16 00                         ld      d, 0
 195++676B 18 CE                        jr F_Read_Exit
 196++676D
 197++676D              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 198++676D              //   \ FILENAME 1+ PAD 1 F_OPEN
 199++676D              //   \ DROP
 200++676D              //   \ F_CLOSE
 201++676D
 202++676D
 203++676D              //  ______________________________________________________________________
 204++676D              //
 205++676D              // f_opendir    a1 -- u f
 206++676D              // open a file
 207++676D                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 207++676D             >
 207++676D             >Dict_Ptr        defl    $
 207++676D             >
 207++676D             >//              ______________________________________________________________________
 207++676D             >//              Heap part
 207++676D             >
 207++676D             >
 207++676D             >                org     (Heap_Ptr & $1FFF) + $E000
 207++E1DD             >
 207++E1DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207++E1DD             >Latest_Definition defl  Heap_Ptr
 207++E1DD             >
 207++E1DD             >                // dummy db directives used to calculate length of namec
 207++E1DD 46 5F 4F 50 >                db      "F_OPENDIR"
 207++E1E1 45 4E 44 49 >
 207++E1E5 52          >
 207++E1E6             >len_NFA         defl    $ - temp_NFA
 207++E1E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207++E1DD             >
 207++E1DD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207++E1DE 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 207++E1E2 45 4E 44 49 >
 207++E1E6 52          >
 207++E1E7             >                org     $-1                 // alter last byte of Name just above to set
 207++E1E6 D2          >                db      {b $} | END_BIT     // msb as name end
 207++E1E7             >
 207++E1E7 D2 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207++E1E9             >Prev_Ptr        defl    Heap_Ptr
 207++E1E9             >
 207++E1E9             >mirror_Ptr      defl    $
 207++E1E9             >
 207++E1E9 6F 67       >                dw      Dict_Ptr + 2        // xt
 207++E1EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 207++E1EB             >
 207++E1EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 207++E1EB             >
 207++E1EB             >//              ______________________________________________________________________
 207++E1EB             >//              Dictionary part
 207++E1EB             >
 207++E1EB             >                org     Dict_Ptr
 207++676D             >
 207++676D E9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 207++676F             >
 207++676F             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 207++676F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 207++676F ~           >
 207++676F ~           >
 207++676F             >                endif           ; ok        // for other definitions it "points" the correct handler
 207++676F             >                // Use of "; ok" to suppress "warning[fwdref]"
 207++676F             >
 207++676F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208++676F DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++6771 D5                           push    de                  // Save Return Stack pointer
 210++6772 C5                           push    bc                  // Save Instruction pointer
 211++6773 06 10                        ld      b, $10              // file-mode
 212++6775 3E 43                        ld      a, "C"
 213++6777 CF                           rst     $08
 214++6778 A3                           db      $A3
 215++6779 18 ED                        jr      F_Open_Exit
 216++677B
 217++677B
 218++677B              //  ______________________________________________________________________
 219++677B              //
 220++677B              // f_readdir    a1 a2 b -- u f
 221++677B              // open a file
 222++677B                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 222++677B             >
 222++677B             >Dict_Ptr        defl    $
 222++677B             >
 222++677B             >//              ______________________________________________________________________
 222++677B             >//              Heap part
 222++677B             >
 222++677B             >
 222++677B             >                org     (Heap_Ptr & $1FFF) + $E000
 222++E1EB             >
 222++E1EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222++E1EB             >Latest_Definition defl  Heap_Ptr
 222++E1EB             >
 222++E1EB             >                // dummy db directives used to calculate length of namec
 222++E1EB 46 5F 52 45 >                db      "F_READDIR"
 222++E1EF 41 44 44 49 >
 222++E1F3 52          >
 222++E1F4             >len_NFA         defl    $ - temp_NFA
 222++E1F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222++E1EB             >
 222++E1EB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222++E1EC 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 222++E1F0 41 44 44 49 >
 222++E1F4 52          >
 222++E1F5             >                org     $-1                 // alter last byte of Name just above to set
 222++E1F4 D2          >                db      {b $} | END_BIT     // msb as name end
 222++E1F5             >
 222++E1F5 DD 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 222++E1F7             >Prev_Ptr        defl    Heap_Ptr
 222++E1F7             >
 222++E1F7             >mirror_Ptr      defl    $
 222++E1F7             >
 222++E1F7 7D 67       >                dw      Dict_Ptr + 2        // xt
 222++E1F9             >Heap_Ptr        defl    $ - $E000           // save current HP
 222++E1F9             >
 222++E1F9             >Current_HP      defl  $ - $E000             // used to set HP once!
 222++E1F9             >
 222++E1F9             >//              ______________________________________________________________________
 222++E1F9             >//              Dictionary part
 222++E1F9             >
 222++E1F9             >                org     Dict_Ptr
 222++677B             >
 222++677B F7 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 222++677D             >
 222++677D             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 222++677D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 222++677D ~           >
 222++677D ~           >
 222++677D             >                endif           ; ok        // for other definitions it "points" the correct handler
 222++677D             >                // Use of "; ok" to suppress "warning[fwdref]"
 222++677D             >
 222++677D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223++677D D9                            exx
 224++677E E1                            pop     hl
 225++677F 7D                            ld      a, l
 226++6780 D1                            pop     de
 227++6781 DD E3                         ex      (sp), ix            // filespec nul-terminated
 228++6783 D9                           exx
 229++6784 D5                           push    de                  // Save Return Stack pointer
 230++6785 C5                           push    bc                  // Save Instruction pointer
 231++6786 D9                            exx
 232++6787 CF                            rst     $08
 233++6788 A4                            db      $A4
 234++6789 18 DD                         jr      F_Open_Exit
 235++678B
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
1080+ 678B
1081+ 678B
1082+ 678B              //  ______________________________________________________________________
1083+ 678B              //
1084+ 678B              // cmove    a1 a2 u --
1085+ 678B              // If u > 0, moves memory content starting at address a1 for n bytes long
1086+ 678B              // storing then starting at address addr2.
1087+ 678B              // The content of a1 is moved first. See CMOVE> also.
1088+ 678B                              New_Def CMOVE, "CMOVE", is_code, is_normal
1088+ 678B             >
1088+ 678B             >Dict_Ptr        defl    $
1088+ 678B             >
1088+ 678B             >//              ______________________________________________________________________
1088+ 678B             >//              Heap part
1088+ 678B             >
1088+ 678B             >
1088+ 678B             >                org     (Heap_Ptr & $1FFF) + $E000
1088+ E1F9             >
1088+ E1F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1088+ E1F9             >Latest_Definition defl  Heap_Ptr
1088+ E1F9             >
1088+ E1F9             >                // dummy db directives used to calculate length of namec
1088+ E1F9 43 4D 4F 56 >                db      "CMOVE"
1088+ E1FD 45          >
1088+ E1FE             >len_NFA         defl    $ - temp_NFA
1088+ E1FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1088+ E1F9             >
1088+ E1F9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1088+ E1FA 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1088+ E1FE 45          >
1088+ E1FF             >                org     $-1                 // alter last byte of Name just above to set
1088+ E1FE C5          >                db      {b $} | END_BIT     // msb as name end
1088+ E1FF             >
1088+ E1FF EB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1088+ E201             >Prev_Ptr        defl    Heap_Ptr
1088+ E201             >
1088+ E201             >mirror_Ptr      defl    $
1088+ E201             >
1088+ E201 8D 67       >                dw      Dict_Ptr + 2        // xt
1088+ E203             >Heap_Ptr        defl    $ - $E000           // save current HP
1088+ E203             >
1088+ E203             >Current_HP      defl  $ - $E000             // used to set HP once!
1088+ E203             >
1088+ E203             >//              ______________________________________________________________________
1088+ E203             >//              Dictionary part
1088+ E203             >
1088+ E203             >                org     Dict_Ptr
1088+ 678B             >
1088+ 678B 01 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1088+ 678D             >
1088+ 678D             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1088+ 678D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1088+ 678D ~           >
1088+ 678D ~           >
1088+ 678D             >                endif           ; ok        // for other definitions it "points" the correct handler
1088+ 678D             >                // Use of "; ok" to suppress "warning[fwdref]"
1088+ 678D             >
1088+ 678D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1089+ 678D D9                           exx
1090+ 678E
1091+ 678E C1                           pop     bc                  // bc has counter
1092+ 678F D1                           pop     de                  // de now has dest
1093+ 6790 E1                           pop     hl                 // hl has source, save Instruction Pointer
1094+ 6791 78                           ld      a, b
1095+ 6792 B1                           or      c
1096+ 6793 28 02                        jr      z, Cmove_NoMove
1097+ 6795 ED B0                            ldir
1098+ 6797              Cmove_NoMove:
1099+ 6797 D9                           exx
1100+ 6798
1101+ 6798                              next
1101+ 6798 DD E9       >                jp      (ix)
1102+ 679A
1103+ 679A              //  ______________________________________________________________________
1104+ 679A              //
1105+ 679A              // cmove>    a1 a2 u --
1106+ 679A              // If u > 0, moves memory content starting at address a1 for n bytes long
1107+ 679A              // storing then starting at address addr2.
1108+ 679A              // The content of a1 is moved last. See cmove.
1109+ 679A                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1109+ 679A             >
1109+ 679A             >Dict_Ptr        defl    $
1109+ 679A             >
1109+ 679A             >//              ______________________________________________________________________
1109+ 679A             >//              Heap part
1109+ 679A             >
1109+ 679A             >
1109+ 679A             >                org     (Heap_Ptr & $1FFF) + $E000
1109+ E203             >
1109+ E203             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1109+ E203             >Latest_Definition defl  Heap_Ptr
1109+ E203             >
1109+ E203             >                // dummy db directives used to calculate length of namec
1109+ E203 43 4D 4F 56 >                db      "CMOVE>"
1109+ E207 45 3E       >
1109+ E209             >len_NFA         defl    $ - temp_NFA
1109+ E209             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1109+ E203             >
1109+ E203 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1109+ E204 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1109+ E208 45 3E       >
1109+ E20A             >                org     $-1                 // alter last byte of Name just above to set
1109+ E209 BE          >                db      {b $} | END_BIT     // msb as name end
1109+ E20A             >
1109+ E20A F9 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1109+ E20C             >Prev_Ptr        defl    Heap_Ptr
1109+ E20C             >
1109+ E20C             >mirror_Ptr      defl    $
1109+ E20C             >
1109+ E20C 9C 67       >                dw      Dict_Ptr + 2        // xt
1109+ E20E             >Heap_Ptr        defl    $ - $E000           // save current HP
1109+ E20E             >
1109+ E20E             >Current_HP      defl  $ - $E000             // used to set HP once!
1109+ E20E             >
1109+ E20E             >//              ______________________________________________________________________
1109+ E20E             >//              Dictionary part
1109+ E20E             >
1109+ E20E             >                org     Dict_Ptr
1109+ 679A             >
1109+ 679A 0C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1109+ 679C             >
1109+ 679C             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1109+ 679C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1109+ 679C ~           >
1109+ 679C ~           >
1109+ 679C             >                endif           ; ok        // for other definitions it "points" the correct handler
1109+ 679C             >                // Use of "; ok" to suppress "warning[fwdref]"
1109+ 679C             >
1109+ 679C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1110+ 679C D9                           exx
1111+ 679D
1112+ 679D C1                           pop     bc                  // bc has counter
1113+ 679E D1                           pop     de                  // de has dest
1114+ 679F E1                           pop     hl                  // hl has source, save Instruction Pointer
1115+ 67A0 78                           ld      a, b
1116+ 67A1 B1                           or      c
1117+ 67A2 28 08                        jr      z, CmoveV_NoMove
1118+ 67A4 EB                               ex      de, hl              // compute address to
1119+ 67A5 09                               add     hl, bc              // operate backward
1120+ 67A6 2B                               dec     hl
1121+ 67A7 EB                               ex      de, hl
1122+ 67A8 09                               add     hl, bc
1123+ 67A9 2B                               dec     hl
1124+ 67AA ED B8                            lddr                        // backward
1125+ 67AC              CmoveV_NoMove:
1126+ 67AC D9                           exx
1127+ 67AD
1128+ 67AD                              next
1128+ 67AD DD E9       >                jp      (ix)
1129+ 67AF
1130+ 67AF              //  ______________________________________________________________________
1131+ 67AF              //
1132+ 67AF              // um*      u1 u2 -- ud
1133+ 67AF              // Unsigned multiplication
1134+ 67AF              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1135+ 67AF              // On the stack a double number is treated as two single numbers
1136+ 67AF              // where DE is on the top of the stack and HL is the second from top,
1137+ 67AF              // Instead, in 2VARIABLE a double number is stored as EDLH.
1138+ 67AF              // this definition could use "MUL" Z80N new op-code.
1139+ 67AF                              New_Def UM_MUL, "UM*", is_code, is_normal
1139+ 67AF             >
1139+ 67AF             >Dict_Ptr        defl    $
1139+ 67AF             >
1139+ 67AF             >//              ______________________________________________________________________
1139+ 67AF             >//              Heap part
1139+ 67AF             >
1139+ 67AF             >
1139+ 67AF             >                org     (Heap_Ptr & $1FFF) + $E000
1139+ E20E             >
1139+ E20E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1139+ E20E             >Latest_Definition defl  Heap_Ptr
1139+ E20E             >
1139+ E20E             >                // dummy db directives used to calculate length of namec
1139+ E20E 55 4D 2A    >                db      "UM*"
1139+ E211             >len_NFA         defl    $ - temp_NFA
1139+ E211             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1139+ E20E             >
1139+ E20E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1139+ E20F 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1139+ E212             >                org     $-1                 // alter last byte of Name just above to set
1139+ E211 AA          >                db      {b $} | END_BIT     // msb as name end
1139+ E212             >
1139+ E212 03 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1139+ E214             >Prev_Ptr        defl    Heap_Ptr
1139+ E214             >
1139+ E214             >mirror_Ptr      defl    $
1139+ E214             >
1139+ E214 B1 67       >                dw      Dict_Ptr + 2        // xt
1139+ E216             >Heap_Ptr        defl    $ - $E000           // save current HP
1139+ E216             >
1139+ E216             >Current_HP      defl  $ - $E000             // used to set HP once!
1139+ E216             >
1139+ E216             >//              ______________________________________________________________________
1139+ E216             >//              Dictionary part
1139+ E216             >
1139+ E216             >                org     Dict_Ptr
1139+ 67AF             >
1139+ 67AF 14 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1139+ 67B1             >
1139+ 67B1             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1139+ 67B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1139+ 67B1 ~           >
1139+ 67B1 ~           >
1139+ 67B1             >                endif           ; ok        // for other definitions it "points" the correct handler
1139+ 67B1             >                // Use of "; ok" to suppress "warning[fwdref]"
1139+ 67B1             >
1139+ 67B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1140+ 67B1 D9                           exx
1141+ 67B2 D1                           pop     de                    // de has u2 operand
1142+ 67B3 E1                           pop     hl                    // hl has u1 operand
1143+ 67B4 45                           ld      b, l
1144+ 67B5 4B                           ld      c, e
1145+ 67B6 5D                           ld      e, l
1146+ 67B7 6A                           ld      l, d
1147+ 67B8 E5                           push    hl
1148+ 67B9 69                           ld      l, c
1149+ 67BA ED 30                        mul
1150+ 67BC EB                           ex      de, hl
1151+ 67BD ED 30                        mul
1152+ 67BF AF                           xor     a
1153+ 67C0 19                           add     hl, de
1154+ 67C1 8F                           adc     a
1155+ 67C2 59                           ld      e, c
1156+ 67C3 50                           ld      d, b
1157+ 67C4 ED 30                        mul
1158+ 67C6 47                           ld      b, a
1159+ 67C7 4C                           ld      c, h
1160+ 67C8 7A                           ld      a, d
1161+ 67C9 85                           add     l
1162+ 67CA 67                           ld      h, a
1163+ 67CB 6B                           ld      l, e
1164+ 67CC D1                           pop     de
1165+ 67CD ED 30                        mul
1166+ 67CF EB                           ex      de, hl
1167+ 67D0 ED 4A                        adc     hl, bc
1168+ 67D2 D5                           push    de
1169+ 67D3 E5                           push    hl
1170+ 67D4 D9                           exx
1171+ 67D5                              next
1171+ 67D5 DD E9       >                jp      (ix)
1172+ 67D7
1173+ 67D7              //  ______________________________________________________________________
1174+ 67D7              //
1175+ 67D7              // um/mod      ud u1 -- q r
1176+ 67D7              // divides ud into u1 giving quotient q and remainder r
1177+ 67D7              // algorithm takes 16 bit at a time starting from msb
1178+ 67D7              // DE grows from lsb upward with quotient result
1179+ 67D7              // HL keeps the remainder at each stage of division
1180+ 67D7              // each loop 'lowers' the next binary digit to form the current dividend
1181+ 67D7                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1181+ 67D7             >
1181+ 67D7             >Dict_Ptr        defl    $
1181+ 67D7             >
1181+ 67D7             >//              ______________________________________________________________________
1181+ 67D7             >//              Heap part
1181+ 67D7             >
1181+ 67D7             >
1181+ 67D7             >                org     (Heap_Ptr & $1FFF) + $E000
1181+ E216             >
1181+ E216             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1181+ E216             >Latest_Definition defl  Heap_Ptr
1181+ E216             >
1181+ E216             >                // dummy db directives used to calculate length of namec
1181+ E216 55 4D 2F 4D >                db      "UM/MOD"
1181+ E21A 4F 44       >
1181+ E21C             >len_NFA         defl    $ - temp_NFA
1181+ E21C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1181+ E216             >
1181+ E216 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1181+ E217 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1181+ E21B 4F 44       >
1181+ E21D             >                org     $-1                 // alter last byte of Name just above to set
1181+ E21C C4          >                db      {b $} | END_BIT     // msb as name end
1181+ E21D             >
1181+ E21D 0E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1181+ E21F             >Prev_Ptr        defl    Heap_Ptr
1181+ E21F             >
1181+ E21F             >mirror_Ptr      defl    $
1181+ E21F             >
1181+ E21F D9 67       >                dw      Dict_Ptr + 2        // xt
1181+ E221             >Heap_Ptr        defl    $ - $E000           // save current HP
1181+ E221             >
1181+ E221             >Current_HP      defl  $ - $E000             // used to set HP once!
1181+ E221             >
1181+ E221             >//              ______________________________________________________________________
1181+ E221             >//              Dictionary part
1181+ E221             >
1181+ E221             >                org     Dict_Ptr
1181+ 67D7             >
1181+ 67D7 1F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1181+ 67D9             >
1181+ 67D9             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1181+ 67D9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1181+ 67D9 ~           >
1181+ 67D9 ~           >
1181+ 67D9             >                endif           ; ok        // for other definitions it "points" the correct handler
1181+ 67D9             >                // Use of "; ok" to suppress "warning[fwdref]"
1181+ 67D9             >
1181+ 67D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1182+ 67D9 D9                           exx
1183+ 67DA C1                           pop     bc                      // divisor
1184+ 67DB
1185+ 67DB E1                           pop     hl                      // < high part
1186+ 67DC D1                           pop     de                      // < low part and
1187+ 67DD
1188+ 67DD 7D                           ld      a, l                    // check without changing arguments
1189+ 67DE 91                           sub     c                       // if divisor is greater than high part
1190+ 67DF 7C                           ld      a, h                    // so quotient will be in range
1191+ 67E0 98                           sbc     a, b
1192+ 67E1 30 20                        jr      nc, Um_DivMod_OutOfRange
1193+ 67E3 3E 10                            ld      a, 16
1194+ 67E5              Um_DivMod_Loop:
1195+ 67E5 CB 23                                sla     e
1196+ 67E7 CB 12                                rl      d
1197+ 67E9 ED 6A                                adc     hl, hl
1198+ 67EB 30 05                                jr      nc, Um_DivMod_Carry
1199+ 67ED A7                                       and     a
1200+ 67EE ED 42                                    sbc     hl, bc
1201+ 67F0 18 07                                jr      Um_DivMod_Endif    // else
1202+ 67F2              Um_DivMod_Carry:
1203+ 67F2 A7                                       and     a
1204+ 67F3 ED 42                                    sbc     hl, bc
1205+ 67F5 30 02                                    jr      nc, Um_DivMod_Endif
1206+ 67F7 09                                           add     hl, bc
1207+ 67F8 1B                                           dec     de
1208+ 67F9              Um_DivMod_Endif:                                   // endif
1209+ 67F9 13                                   inc     de
1210+ 67FA 3D                                   dec     a
1211+ 67FB 20 E8                            jr      nz, Um_DivMod_Loop
1212+ 67FD EB                               ex      de, hl
1213+ 67FE              Um_DivMod_Bailout:
1214+ 67FE D5                               push    de                  // de := remanider
1215+ 67FF E5                               push    hl                  // hl := quotient
1216+ 6800 D9                               exx
1217+ 6801                                  next
1217+ 6801 DD E9       >                jp      (ix)
1218+ 6803
1219+ 6803              Um_DivMod_OutOfRange:
1220+ 6803 21 FF FF                     ld      hl, -1
1221+ 6806 54                           ld      d, h
1222+ 6807 5D                           ld      e, l
1223+ 6808 18 F4                        jr      Um_DivMod_Bailout
1224+ 680A
1225+ 680A              //  ______________________________________________________________________
1226+ 680A              //
1227+ 680A              // and          n1 n2 -- n3
1228+ 680A              // bit logical AND. Returns n3 as n1 & n2
1229+ 680A                              New_Def AND_OP, "AND", is_code, is_normal
1229+ 680A             >
1229+ 680A             >Dict_Ptr        defl    $
1229+ 680A             >
1229+ 680A             >//              ______________________________________________________________________
1229+ 680A             >//              Heap part
1229+ 680A             >
1229+ 680A             >
1229+ 680A             >                org     (Heap_Ptr & $1FFF) + $E000
1229+ E221             >
1229+ E221             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1229+ E221             >Latest_Definition defl  Heap_Ptr
1229+ E221             >
1229+ E221             >                // dummy db directives used to calculate length of namec
1229+ E221 41 4E 44    >                db      "AND"
1229+ E224             >len_NFA         defl    $ - temp_NFA
1229+ E224             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1229+ E221             >
1229+ E221 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1229+ E222 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1229+ E225             >                org     $-1                 // alter last byte of Name just above to set
1229+ E224 C4          >                db      {b $} | END_BIT     // msb as name end
1229+ E225             >
1229+ E225 16 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1229+ E227             >Prev_Ptr        defl    Heap_Ptr
1229+ E227             >
1229+ E227             >mirror_Ptr      defl    $
1229+ E227             >
1229+ E227 0C 68       >                dw      Dict_Ptr + 2        // xt
1229+ E229             >Heap_Ptr        defl    $ - $E000           // save current HP
1229+ E229             >
1229+ E229             >Current_HP      defl  $ - $E000             // used to set HP once!
1229+ E229             >
1229+ E229             >//              ______________________________________________________________________
1229+ E229             >//              Dictionary part
1229+ E229             >
1229+ E229             >                org     Dict_Ptr
1229+ 680A             >
1229+ 680A 27 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1229+ 680C             >
1229+ 680C             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1229+ 680C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1229+ 680C ~           >
1229+ 680C ~           >
1229+ 680C             >                endif           ; ok        // for other definitions it "points" the correct handler
1229+ 680C             >                // Use of "; ok" to suppress "warning[fwdref]"
1229+ 680C             >
1229+ 680C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1230+ 680C D9                           exx
1231+ 680D D1                           pop     de
1232+ 680E E1                           pop     hl
1233+ 680F 7B                           ld      a, e
1234+ 6810 A5                           and     l
1235+ 6811 6F                           ld      l, a
1236+ 6812 7A                           ld      a, d
1237+ 6813 A4                           and     h
1238+ 6814 67                           ld      h, a
1239+ 6815 E5                           push    hl
1240+ 6816 D9                           exx
1241+ 6817                              next
1241+ 6817 DD E9       >                jp      (ix)
1242+ 6819
1243+ 6819              //  ______________________________________________________________________
1244+ 6819              //
1245+ 6819              // or           n1 n2 -- n3
1246+ 6819              // bit logical OR. Returns n3 as n1 | n2
1247+ 6819                              New_Def OR_OP, "OR", is_code, is_normal
1247+ 6819             >
1247+ 6819             >Dict_Ptr        defl    $
1247+ 6819             >
1247+ 6819             >//              ______________________________________________________________________
1247+ 6819             >//              Heap part
1247+ 6819             >
1247+ 6819             >
1247+ 6819             >                org     (Heap_Ptr & $1FFF) + $E000
1247+ E229             >
1247+ E229             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1247+ E229             >Latest_Definition defl  Heap_Ptr
1247+ E229             >
1247+ E229             >                // dummy db directives used to calculate length of namec
1247+ E229 4F 52       >                db      "OR"
1247+ E22B             >len_NFA         defl    $ - temp_NFA
1247+ E22B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1247+ E229             >
1247+ E229 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1247+ E22A 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1247+ E22C             >                org     $-1                 // alter last byte of Name just above to set
1247+ E22B D2          >                db      {b $} | END_BIT     // msb as name end
1247+ E22C             >
1247+ E22C 21 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1247+ E22E             >Prev_Ptr        defl    Heap_Ptr
1247+ E22E             >
1247+ E22E             >mirror_Ptr      defl    $
1247+ E22E             >
1247+ E22E 1B 68       >                dw      Dict_Ptr + 2        // xt
1247+ E230             >Heap_Ptr        defl    $ - $E000           // save current HP
1247+ E230             >
1247+ E230             >Current_HP      defl  $ - $E000             // used to set HP once!
1247+ E230             >
1247+ E230             >//              ______________________________________________________________________
1247+ E230             >//              Dictionary part
1247+ E230             >
1247+ E230             >                org     Dict_Ptr
1247+ 6819             >
1247+ 6819 2E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1247+ 681B             >
1247+ 681B             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1247+ 681B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1247+ 681B ~           >
1247+ 681B ~           >
1247+ 681B             >                endif           ; ok        // for other definitions it "points" the correct handler
1247+ 681B             >                // Use of "; ok" to suppress "warning[fwdref]"
1247+ 681B             >
1247+ 681B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1248+ 681B D9                           exx
1249+ 681C D1                           pop     de
1250+ 681D E1                           pop     hl
1251+ 681E 7B                           ld      a, e
1252+ 681F B5                           or      l
1253+ 6820 6F                           ld      l, a
1254+ 6821 7A                           ld      a, d
1255+ 6822 B4                           or      h
1256+ 6823 67                           ld      h, a
1257+ 6824 E5                           push    hl
1258+ 6825 D9                           exx
1259+ 6826                              next
1259+ 6826 DD E9       >                jp      (ix)
1260+ 6828
1261+ 6828              //  ______________________________________________________________________
1262+ 6828              //
1263+ 6828              // xor          n1 n2 -- n3
1264+ 6828              // bit logical OR. Returns n3 as n1 ^ n2
1265+ 6828                              New_Def XOR_OP, "XOR", is_code, is_normal
1265+ 6828             >
1265+ 6828             >Dict_Ptr        defl    $
1265+ 6828             >
1265+ 6828             >//              ______________________________________________________________________
1265+ 6828             >//              Heap part
1265+ 6828             >
1265+ 6828             >
1265+ 6828             >                org     (Heap_Ptr & $1FFF) + $E000
1265+ E230             >
1265+ E230             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1265+ E230             >Latest_Definition defl  Heap_Ptr
1265+ E230             >
1265+ E230             >                // dummy db directives used to calculate length of namec
1265+ E230 58 4F 52    >                db      "XOR"
1265+ E233             >len_NFA         defl    $ - temp_NFA
1265+ E233             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1265+ E230             >
1265+ E230 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1265+ E231 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1265+ E234             >                org     $-1                 // alter last byte of Name just above to set
1265+ E233 D2          >                db      {b $} | END_BIT     // msb as name end
1265+ E234             >
1265+ E234 29 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1265+ E236             >Prev_Ptr        defl    Heap_Ptr
1265+ E236             >
1265+ E236             >mirror_Ptr      defl    $
1265+ E236             >
1265+ E236 2A 68       >                dw      Dict_Ptr + 2        // xt
1265+ E238             >Heap_Ptr        defl    $ - $E000           // save current HP
1265+ E238             >
1265+ E238             >Current_HP      defl  $ - $E000             // used to set HP once!
1265+ E238             >
1265+ E238             >//              ______________________________________________________________________
1265+ E238             >//              Dictionary part
1265+ E238             >
1265+ E238             >                org     Dict_Ptr
1265+ 6828             >
1265+ 6828 36 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1265+ 682A             >
1265+ 682A             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1265+ 682A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1265+ 682A ~           >
1265+ 682A ~           >
1265+ 682A             >                endif           ; ok        // for other definitions it "points" the correct handler
1265+ 682A             >                // Use of "; ok" to suppress "warning[fwdref]"
1265+ 682A             >
1265+ 682A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1266+ 682A D9                           exx
1267+ 682B D1                           pop     de
1268+ 682C E1                           pop     hl
1269+ 682D 7B                           ld      a, e
1270+ 682E AD                           xor     l
1271+ 682F 6F                           ld      l, a
1272+ 6830 7A                           ld      a, d
1273+ 6831 AC                           xor     h
1274+ 6832 67                           ld      h, a
1275+ 6833 E5                           push    hl
1276+ 6834 D9                           exx
1277+ 6835                              next
1277+ 6835 DD E9       >                jp      (ix)
1278+ 6837
1279+ 6837              //  ______________________________________________________________________
1280+ 6837              //
1281+ 6837              // sp@      -- a
1282+ 6837              // returns on top of stack the value of SP before execution
1283+ 6837                              New_Def SPFETCH, "SP@", is_code, is_normal
1283+ 6837             >
1283+ 6837             >Dict_Ptr        defl    $
1283+ 6837             >
1283+ 6837             >//              ______________________________________________________________________
1283+ 6837             >//              Heap part
1283+ 6837             >
1283+ 6837             >
1283+ 6837             >                org     (Heap_Ptr & $1FFF) + $E000
1283+ E238             >
1283+ E238             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ E238             >Latest_Definition defl  Heap_Ptr
1283+ E238             >
1283+ E238             >                // dummy db directives used to calculate length of namec
1283+ E238 53 50 40    >                db      "SP@"
1283+ E23B             >len_NFA         defl    $ - temp_NFA
1283+ E23B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ E238             >
1283+ E238 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ E239 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1283+ E23C             >                org     $-1                 // alter last byte of Name just above to set
1283+ E23B C0          >                db      {b $} | END_BIT     // msb as name end
1283+ E23C             >
1283+ E23C 30 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1283+ E23E             >Prev_Ptr        defl    Heap_Ptr
1283+ E23E             >
1283+ E23E             >mirror_Ptr      defl    $
1283+ E23E             >
1283+ E23E 39 68       >                dw      Dict_Ptr + 2        // xt
1283+ E240             >Heap_Ptr        defl    $ - $E000           // save current HP
1283+ E240             >
1283+ E240             >Current_HP      defl  $ - $E000             // used to set HP once!
1283+ E240             >
1283+ E240             >//              ______________________________________________________________________
1283+ E240             >//              Dictionary part
1283+ E240             >
1283+ E240             >                org     Dict_Ptr
1283+ 6837             >
1283+ 6837 3E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1283+ 6839             >
1283+ 6839             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 6839 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1283+ 6839 ~           >
1283+ 6839 ~           >
1283+ 6839             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 6839             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 6839             >
1283+ 6839             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 6839
1285+ 6839 21 00 00                     ld      hl, 0
1286+ 683C 39                           add     hl, sp
1287+ 683D
1288+ 683D                              psh1
1288+ 683D E5          >                push    hl
1288+ 683E DD E9       >                jp      (ix)
1289+ 6840
1290+ 6840              //  ______________________________________________________________________
1291+ 6840              //
1292+ 6840              // sp!      a --
1293+ 6840              // restore SP to the initial value passed
1294+ 6840              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1295+ 6840                              New_Def SPSTORE, "SP!", is_code, is_normal
1295+ 6840             >
1295+ 6840             >Dict_Ptr        defl    $
1295+ 6840             >
1295+ 6840             >//              ______________________________________________________________________
1295+ 6840             >//              Heap part
1295+ 6840             >
1295+ 6840             >
1295+ 6840             >                org     (Heap_Ptr & $1FFF) + $E000
1295+ E240             >
1295+ E240             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1295+ E240             >Latest_Definition defl  Heap_Ptr
1295+ E240             >
1295+ E240             >                // dummy db directives used to calculate length of namec
1295+ E240 53 50 21    >                db      "SP!"
1295+ E243             >len_NFA         defl    $ - temp_NFA
1295+ E243             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1295+ E240             >
1295+ E240 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1295+ E241 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1295+ E244             >                org     $-1                 // alter last byte of Name just above to set
1295+ E243 A1          >                db      {b $} | END_BIT     // msb as name end
1295+ E244             >
1295+ E244 38 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1295+ E246             >Prev_Ptr        defl    Heap_Ptr
1295+ E246             >
1295+ E246             >mirror_Ptr      defl    $
1295+ E246             >
1295+ E246 42 68       >                dw      Dict_Ptr + 2        // xt
1295+ E248             >Heap_Ptr        defl    $ - $E000           // save current HP
1295+ E248             >
1295+ E248             >Current_HP      defl  $ - $E000             // used to set HP once!
1295+ E248             >
1295+ E248             >//              ______________________________________________________________________
1295+ E248             >//              Dictionary part
1295+ E248             >
1295+ E248             >                org     Dict_Ptr
1295+ 6840             >
1295+ 6840 46 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1295+ 6842             >
1295+ 6842             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1295+ 6842 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1295+ 6842 ~           >
1295+ 6842 ~           >
1295+ 6842             >                endif           ; ok        // for other definitions it "points" the correct handler
1295+ 6842             >                // Use of "; ok" to suppress "warning[fwdref]"
1295+ 6842             >
1295+ 6842             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1296+ 6842 E1                           pop     hl
1297+ 6843 F9                           ld      sp, hl
1298+ 6844
1299+ 6844                              next
1299+ 6844 DD E9       >                jp      (ix)
1300+ 6846
1301+ 6846              //  ______________________________________________________________________
1302+ 6846              //
1303+ 6846              // rp@      -- a
1304+ 6846              // returns on top of stack the value of Return-Pointer
1305+ 6846                              New_Def RPFETCH, "RP@", is_code, is_normal
1305+ 6846             >
1305+ 6846             >Dict_Ptr        defl    $
1305+ 6846             >
1305+ 6846             >//              ______________________________________________________________________
1305+ 6846             >//              Heap part
1305+ 6846             >
1305+ 6846             >
1305+ 6846             >                org     (Heap_Ptr & $1FFF) + $E000
1305+ E248             >
1305+ E248             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1305+ E248             >Latest_Definition defl  Heap_Ptr
1305+ E248             >
1305+ E248             >                // dummy db directives used to calculate length of namec
1305+ E248 52 50 40    >                db      "RP@"
1305+ E24B             >len_NFA         defl    $ - temp_NFA
1305+ E24B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1305+ E248             >
1305+ E248 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1305+ E249 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1305+ E24C             >                org     $-1                 // alter last byte of Name just above to set
1305+ E24B C0          >                db      {b $} | END_BIT     // msb as name end
1305+ E24C             >
1305+ E24C 40 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1305+ E24E             >Prev_Ptr        defl    Heap_Ptr
1305+ E24E             >
1305+ E24E             >mirror_Ptr      defl    $
1305+ E24E             >
1305+ E24E 48 68       >                dw      Dict_Ptr + 2        // xt
1305+ E250             >Heap_Ptr        defl    $ - $E000           // save current HP
1305+ E250             >
1305+ E250             >Current_HP      defl  $ - $E000             // used to set HP once!
1305+ E250             >
1305+ E250             >//              ______________________________________________________________________
1305+ E250             >//              Dictionary part
1305+ E250             >
1305+ E250             >                org     Dict_Ptr
1305+ 6846             >
1305+ 6846 4E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1305+ 6848             >
1305+ 6848             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1305+ 6848 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1305+ 6848 ~           >
1305+ 6848 ~           >
1305+ 6848             >                endif           ; ok        // for other definitions it "points" the correct handler
1305+ 6848             >                // Use of "; ok" to suppress "warning[fwdref]"
1305+ 6848             >
1305+ 6848             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1306+ 6848
1307+ 6848                              // *** ldhlrp
1308+ 6848                              // *** ex      de, hl
1309+ 6848 D5                           push de
1310+ 6849
1311+ 6849                              next
1311+ 6849 DD E9       >                jp      (ix)
1312+ 684B
1313+ 684B              //  ______________________________________________________________________
1314+ 684B              //
1315+ 684B              // rp!      a --
1316+ 684B              // restore RP to the initial value passed
1317+ 684B              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1318+ 684B                              New_Def RPSTORE, "RP!", is_code, is_normal
1318+ 684B             >
1318+ 684B             >Dict_Ptr        defl    $
1318+ 684B             >
1318+ 684B             >//              ______________________________________________________________________
1318+ 684B             >//              Heap part
1318+ 684B             >
1318+ 684B             >
1318+ 684B             >                org     (Heap_Ptr & $1FFF) + $E000
1318+ E250             >
1318+ E250             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1318+ E250             >Latest_Definition defl  Heap_Ptr
1318+ E250             >
1318+ E250             >                // dummy db directives used to calculate length of namec
1318+ E250 52 50 21    >                db      "RP!"
1318+ E253             >len_NFA         defl    $ - temp_NFA
1318+ E253             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1318+ E250             >
1318+ E250 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1318+ E251 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1318+ E254             >                org     $-1                 // alter last byte of Name just above to set
1318+ E253 A1          >                db      {b $} | END_BIT     // msb as name end
1318+ E254             >
1318+ E254 48 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1318+ E256             >Prev_Ptr        defl    Heap_Ptr
1318+ E256             >
1318+ E256             >mirror_Ptr      defl    $
1318+ E256             >
1318+ E256 4D 68       >                dw      Dict_Ptr + 2        // xt
1318+ E258             >Heap_Ptr        defl    $ - $E000           // save current HP
1318+ E258             >
1318+ E258             >Current_HP      defl  $ - $E000             // used to set HP once!
1318+ E258             >
1318+ E258             >//              ______________________________________________________________________
1318+ E258             >//              Dictionary part
1318+ E258             >
1318+ E258             >                org     Dict_Ptr
1318+ 684B             >
1318+ 684B 56 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1318+ 684D             >
1318+ 684D             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1318+ 684D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1318+ 684D ~           >
1318+ 684D ~           >
1318+ 684D             >                endif           ; ok        // for other definitions it "points" the correct handler
1318+ 684D             >                // Use of "; ok" to suppress "warning[fwdref]"
1318+ 684D             >
1318+ 684D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1319+ 684D D1                           pop     de
1320+ 684E                              // *** ex      de, hl
1321+ 684E                              // *** ldrphl
1322+ 684E
1323+ 684E                              next
1323+ 684E DD E9       >                jp      (ix)
1324+ 6850
1325+ 6850              //  ______________________________________________________________________
1326+ 6850              //
1327+ 6850              // exit       --
1328+ 6850              // exits back to the caller word
1329+ 6850                              New_Def EXIT, "EXIT", is_code, is_normal
1329+ 6850             >
1329+ 6850             >Dict_Ptr        defl    $
1329+ 6850             >
1329+ 6850             >//              ______________________________________________________________________
1329+ 6850             >//              Heap part
1329+ 6850             >
1329+ 6850             >
1329+ 6850             >                org     (Heap_Ptr & $1FFF) + $E000
1329+ E258             >
1329+ E258             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1329+ E258             >Latest_Definition defl  Heap_Ptr
1329+ E258             >
1329+ E258             >                // dummy db directives used to calculate length of namec
1329+ E258 45 58 49 54 >                db      "EXIT"
1329+ E25C             >len_NFA         defl    $ - temp_NFA
1329+ E25C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1329+ E258             >
1329+ E258 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1329+ E259 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1329+ E25D             >                org     $-1                 // alter last byte of Name just above to set
1329+ E25C D4          >                db      {b $} | END_BIT     // msb as name end
1329+ E25D             >
1329+ E25D 50 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1329+ E25F             >Prev_Ptr        defl    Heap_Ptr
1329+ E25F             >
1329+ E25F             >mirror_Ptr      defl    $
1329+ E25F             >
1329+ E25F 52 68       >                dw      Dict_Ptr + 2        // xt
1329+ E261             >Heap_Ptr        defl    $ - $E000           // save current HP
1329+ E261             >
1329+ E261             >Current_HP      defl  $ - $E000             // used to set HP once!
1329+ E261             >
1329+ E261             >//              ______________________________________________________________________
1329+ E261             >//              Dictionary part
1329+ E261             >
1329+ E261             >                org     Dict_Ptr
1329+ 6850             >
1329+ 6850 5F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1329+ 6852             >
1329+ 6852             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1329+ 6852 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1329+ 6852 ~           >
1329+ 6852 ~           >
1329+ 6852             >                endif           ; ok        // for other definitions it "points" the correct handler
1329+ 6852             >                // Use of "; ok" to suppress "warning[fwdref]"
1329+ 6852             >
1329+ 6852             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1330+ 6852 EB                           ex      de, hl
1331+ 6853                              // *** ldhlrp                      // Get Return Stack Pointer
1332+ 6853 4E                           ld      c, (hl)             // pop Instruction Pointer
1333+ 6854 23                           inc     hl                  // from Return Stack
1334+ 6855 46                           ld      b, (hl)
1335+ 6856 23                           inc     hl
1336+ 6857                              // *** ldrphl                      // Set Return Stack Pointer
1337+ 6857 EB                           ex      de, hl
1338+ 6858                              next
1338+ 6858 DD E9       >                jp      (ix)
1339+ 685A
1340+ 685A              //  ______________________________________________________________________
1341+ 685A              //
1342+ 685A              // lastl      --
1343+ 685A              // exits back to the caller word
1344+ 685A              //              New_Def EXIT, "LASTL", is_code, is_normal
1345+ 685A              //              push    de
1346+ 685A              //              ex      de, hl //**
1347+ 685A              //              // *** ldhlrp                      // Get Return Stack Pointer
1348+ 685A              //              ld      e, (hl)             // pop Instruction Pointer
1349+ 685A              //              inc     hl                  // from Return Stack
1350+ 685A              //              ld      d, (hl)
1351+ 685A              //              inc     hl
1352+ 685A              //              ld      (hl), e
1353+ 685A              //              inc     hl
1354+ 685A              //              ld      (hl), d
1355+ 685A              //              add     hl, -3
1356+ 685A              //              pop     de
1357+ 685A              //              next
1358+ 685A
1359+ 685A              //  ______________________________________________________________________
1360+ 685A              //
1361+ 685A              // >r      n --
1362+ 685A              // pop from calculator-stack and push into return-stack
1363+ 685A                              New_Def TO_R, ">R", is_code, is_normal
1363+ 685A             >
1363+ 685A             >Dict_Ptr        defl    $
1363+ 685A             >
1363+ 685A             >//              ______________________________________________________________________
1363+ 685A             >//              Heap part
1363+ 685A             >
1363+ 685A             >
1363+ 685A             >                org     (Heap_Ptr & $1FFF) + $E000
1363+ E261             >
1363+ E261             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1363+ E261             >Latest_Definition defl  Heap_Ptr
1363+ E261             >
1363+ E261             >                // dummy db directives used to calculate length of namec
1363+ E261 3E 52       >                db      ">R"
1363+ E263             >len_NFA         defl    $ - temp_NFA
1363+ E263             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1363+ E261             >
1363+ E261 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1363+ E262 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1363+ E264             >                org     $-1                 // alter last byte of Name just above to set
1363+ E263 D2          >                db      {b $} | END_BIT     // msb as name end
1363+ E264             >
1363+ E264 58 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1363+ E266             >Prev_Ptr        defl    Heap_Ptr
1363+ E266             >
1363+ E266             >mirror_Ptr      defl    $
1363+ E266             >
1363+ E266 5C 68       >                dw      Dict_Ptr + 2        // xt
1363+ E268             >Heap_Ptr        defl    $ - $E000           // save current HP
1363+ E268             >
1363+ E268             >Current_HP      defl  $ - $E000             // used to set HP once!
1363+ E268             >
1363+ E268             >//              ______________________________________________________________________
1363+ E268             >//              Dictionary part
1363+ E268             >
1363+ E268             >                org     Dict_Ptr
1363+ 685A             >
1363+ 685A 66 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1363+ 685C             >
1363+ 685C             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1363+ 685C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1363+ 685C ~           >
1363+ 685C ~           >
1363+ 685C             >                endif           ; ok        // for other definitions it "points" the correct handler
1363+ 685C             >                // Use of "; ok" to suppress "warning[fwdref]"
1363+ 685C             >
1363+ 685C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1364+ 685C E1                           pop     hl
1365+ 685D EB                           ex      de, hl //**
1366+ 685E                              // *** ldhlrp
1367+ 685E 2B                           dec     hl
1368+ 685F 72                           ld      (hl), d             // store current TOS
1369+ 6860 2B                           dec     hl                  // to Return Stack
1370+ 6861 73                           ld      (hl), e
1371+ 6862                              // *** ldrphl
1372+ 6862 EB                           ex      de, hl //**
1373+ 6863                              next
1373+ 6863 DD E9       >                jp      (ix)
1374+ 6865
1375+ 6865              //  ______________________________________________________________________
1376+ 6865              //
1377+ 6865              // r>      -- n
1378+ 6865              // pop from return-stack and push into calculator-stack
1379+ 6865                              New_Def R_TO, "R>", is_code, is_normal
1379+ 6865             >
1379+ 6865             >Dict_Ptr        defl    $
1379+ 6865             >
1379+ 6865             >//              ______________________________________________________________________
1379+ 6865             >//              Heap part
1379+ 6865             >
1379+ 6865             >
1379+ 6865             >                org     (Heap_Ptr & $1FFF) + $E000
1379+ E268             >
1379+ E268             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1379+ E268             >Latest_Definition defl  Heap_Ptr
1379+ E268             >
1379+ E268             >                // dummy db directives used to calculate length of namec
1379+ E268 52 3E       >                db      "R>"
1379+ E26A             >len_NFA         defl    $ - temp_NFA
1379+ E26A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1379+ E268             >
1379+ E268 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1379+ E269 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1379+ E26B             >                org     $-1                 // alter last byte of Name just above to set
1379+ E26A BE          >                db      {b $} | END_BIT     // msb as name end
1379+ E26B             >
1379+ E26B 61 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1379+ E26D             >Prev_Ptr        defl    Heap_Ptr
1379+ E26D             >
1379+ E26D             >mirror_Ptr      defl    $
1379+ E26D             >
1379+ E26D 67 68       >                dw      Dict_Ptr + 2        // xt
1379+ E26F             >Heap_Ptr        defl    $ - $E000           // save current HP
1379+ E26F             >
1379+ E26F             >Current_HP      defl  $ - $E000             // used to set HP once!
1379+ E26F             >
1379+ E26F             >//              ______________________________________________________________________
1379+ E26F             >//              Dictionary part
1379+ E26F             >
1379+ E26F             >                org     Dict_Ptr
1379+ 6865             >
1379+ 6865 6D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1379+ 6867             >
1379+ 6867             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1379+ 6867 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1379+ 6867 ~           >
1379+ 6867 ~           >
1379+ 6867             >                endif           ; ok        // for other definitions it "points" the correct handler
1379+ 6867             >                // Use of "; ok" to suppress "warning[fwdref]"
1379+ 6867             >
1379+ 6867             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1380+ 6867
1381+ 6867 EB                           ex      de, hl //**
1382+ 6868                              // *** ldhlrp
1383+ 6868 5E                           ld      e, (hl)             // retrieve from Return Stack
1384+ 6869 23                           inc     hl
1385+ 686A 56                           ld      d, (hl)
1386+ 686B 23                           inc     hl
1387+ 686C                              // *** ldrphl
1388+ 686C EB                           ex      de, hl //**
1389+ 686D E5                           push    hl
1390+ 686E                              next
1390+ 686E DD E9       >                jp      (ix)
1391+ 6870
1392+ 6870              //  ______________________________________________________________________
1393+ 6870              //
1394+ 6870              // r@           -- n
1395+ 6870              // return on top of stack the value of top of return-stack
1396+ 6870              // Since this is the same as I, we alter R's CFA to jump there
1397+ 6870                              New_Def R_OP, "R@", is_code, is_normal
1397+ 6870             >
1397+ 6870             >Dict_Ptr        defl    $
1397+ 6870             >
1397+ 6870             >//              ______________________________________________________________________
1397+ 6870             >//              Heap part
1397+ 6870             >
1397+ 6870             >
1397+ 6870             >                org     (Heap_Ptr & $1FFF) + $E000
1397+ E26F             >
1397+ E26F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1397+ E26F             >Latest_Definition defl  Heap_Ptr
1397+ E26F             >
1397+ E26F             >                // dummy db directives used to calculate length of namec
1397+ E26F 52 40       >                db      "R@"
1397+ E271             >len_NFA         defl    $ - temp_NFA
1397+ E271             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1397+ E26F             >
1397+ E26F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1397+ E270 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1397+ E272             >                org     $-1                 // alter last byte of Name just above to set
1397+ E271 C0          >                db      {b $} | END_BIT     // msb as name end
1397+ E272             >
1397+ E272 68 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1397+ E274             >Prev_Ptr        defl    Heap_Ptr
1397+ E274             >
1397+ E274             >mirror_Ptr      defl    $
1397+ E274             >
1397+ E274 72 68       >                dw      Dict_Ptr + 2        // xt
1397+ E276             >Heap_Ptr        defl    $ - $E000           // save current HP
1397+ E276             >
1397+ E276             >Current_HP      defl  $ - $E000             // used to set HP once!
1397+ E276             >
1397+ E276             >//              ______________________________________________________________________
1397+ E276             >//              Dictionary part
1397+ E276             >
1397+ E276             >                org     Dict_Ptr
1397+ 6870             >
1397+ 6870 74 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1397+ 6872             >
1397+ 6872             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1397+ 6872 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1397+ 6872 ~           >
1397+ 6872 ~           >
1397+ 6872             >                endif           ; ok        // for other definitions it "points" the correct handler
1397+ 6872             >                // Use of "; ok" to suppress "warning[fwdref]"
1397+ 6872             >
1397+ 6872             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1398+ 6872 C3 3A 64                     jp      I_Ptr
1399+ 6875
1400+ 6875              //  ______________________________________________________________________
1401+ 6875              //
1402+ 6875              // r            -- n
1403+ 6875              // return on top of stack the value of top of return-stack
1404+ 6875              // Since this is the same as I, we alter R's CFA to jump there
1405+ 6875              //              New_Def R_OLD, "R", is_code, is_normal
1406+ 6875              //              jp      I_Ptr
1407+ 6875
1408+ 6875              //  ______________________________________________________________________
1409+ 6875              //
1410+ 6875              // 0=           n -- f
1411+ 6875              // true (non zero) if n is zero, false (0) elsewere
1412+ 6875                              New_Def ZEQUAL, "0=", is_code, is_normal
1412+ 6875             >
1412+ 6875             >Dict_Ptr        defl    $
1412+ 6875             >
1412+ 6875             >//              ______________________________________________________________________
1412+ 6875             >//              Heap part
1412+ 6875             >
1412+ 6875             >
1412+ 6875             >                org     (Heap_Ptr & $1FFF) + $E000
1412+ E276             >
1412+ E276             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1412+ E276             >Latest_Definition defl  Heap_Ptr
1412+ E276             >
1412+ E276             >                // dummy db directives used to calculate length of namec
1412+ E276 30 3D       >                db      "0="
1412+ E278             >len_NFA         defl    $ - temp_NFA
1412+ E278             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1412+ E276             >
1412+ E276 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1412+ E277 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1412+ E279             >                org     $-1                 // alter last byte of Name just above to set
1412+ E278 BD          >                db      {b $} | END_BIT     // msb as name end
1412+ E279             >
1412+ E279 6F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1412+ E27B             >Prev_Ptr        defl    Heap_Ptr
1412+ E27B             >
1412+ E27B             >mirror_Ptr      defl    $
1412+ E27B             >
1412+ E27B 77 68       >                dw      Dict_Ptr + 2        // xt
1412+ E27D             >Heap_Ptr        defl    $ - $E000           // save current HP
1412+ E27D             >
1412+ E27D             >Current_HP      defl  $ - $E000             // used to set HP once!
1412+ E27D             >
1412+ E27D             >//              ______________________________________________________________________
1412+ E27D             >//              Dictionary part
1412+ E27D             >
1412+ E27D             >                org     Dict_Ptr
1412+ 6875             >
1412+ 6875 7B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1412+ 6877             >
1412+ 6877             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1412+ 6877 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1412+ 6877 ~           >
1412+ 6877 ~           >
1412+ 6877             >                endif           ; ok        // for other definitions it "points" the correct handler
1412+ 6877             >                // Use of "; ok" to suppress "warning[fwdref]"
1412+ 6877             >
1412+ 6877             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1413+ 6877              Zero_Equal:
1414+ 6877 E1                           pop     hl
1415+ 6878 7D                           ld      a, l
1416+ 6879 B4                           or      h
1417+ 687A 21 00 00                     ld      hl, FALSE_FLAG
1418+ 687D 20 01                        jr      nz, ZEqual_Skip
1419+ 687F 2B                               dec     hl
1420+ 6880              ZEqual_Skip:
1421+ 6880                              psh1
1421+ 6880 E5          >                push    hl
1421+ 6881 DD E9       >                jp      (ix)
1422+ 6883
1423+ 6883              //  ______________________________________________________________________
1424+ 6883              //
1425+ 6883              // not         a1 -- a2
1426+ 6883              // increment by 2 top of stack
1427+ 6883                              New_Def NOT_OP, "NOT", is_code, is_normal
1427+ 6883             >
1427+ 6883             >Dict_Ptr        defl    $
1427+ 6883             >
1427+ 6883             >//              ______________________________________________________________________
1427+ 6883             >//              Heap part
1427+ 6883             >
1427+ 6883             >
1427+ 6883             >                org     (Heap_Ptr & $1FFF) + $E000
1427+ E27D             >
1427+ E27D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1427+ E27D             >Latest_Definition defl  Heap_Ptr
1427+ E27D             >
1427+ E27D             >                // dummy db directives used to calculate length of namec
1427+ E27D 4E 4F 54    >                db      "NOT"
1427+ E280             >len_NFA         defl    $ - temp_NFA
1427+ E280             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1427+ E27D             >
1427+ E27D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1427+ E27E 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1427+ E281             >                org     $-1                 // alter last byte of Name just above to set
1427+ E280 D4          >                db      {b $} | END_BIT     // msb as name end
1427+ E281             >
1427+ E281 76 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1427+ E283             >Prev_Ptr        defl    Heap_Ptr
1427+ E283             >
1427+ E283             >mirror_Ptr      defl    $
1427+ E283             >
1427+ E283 85 68       >                dw      Dict_Ptr + 2        // xt
1427+ E285             >Heap_Ptr        defl    $ - $E000           // save current HP
1427+ E285             >
1427+ E285             >Current_HP      defl  $ - $E000             // used to set HP once!
1427+ E285             >
1427+ E285             >//              ______________________________________________________________________
1427+ E285             >//              Dictionary part
1427+ E285             >
1427+ E285             >                org     Dict_Ptr
1427+ 6883             >
1427+ 6883 83 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1427+ 6885             >
1427+ 6885             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1427+ 6885 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1427+ 6885 ~           >
1427+ 6885 ~           >
1427+ 6885             >                endif           ; ok        // for other definitions it "points" the correct handler
1427+ 6885             >                // Use of "; ok" to suppress "warning[fwdref]"
1427+ 6885             >
1427+ 6885             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1428+ 6885 C3 77 68                     jp      Zero_Equal
1429+ 6888
1430+ 6888              //  ______________________________________________________________________
1431+ 6888              //
1432+ 6888              // 0<           n -- f
1433+ 6888              // true (non zero) if n is less than zero, false (0) elsewere
1434+ 6888                              New_Def ZLESS, "0<", is_code, is_normal
1434+ 6888             >
1434+ 6888             >Dict_Ptr        defl    $
1434+ 6888             >
1434+ 6888             >//              ______________________________________________________________________
1434+ 6888             >//              Heap part
1434+ 6888             >
1434+ 6888             >
1434+ 6888             >                org     (Heap_Ptr & $1FFF) + $E000
1434+ E285             >
1434+ E285             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1434+ E285             >Latest_Definition defl  Heap_Ptr
1434+ E285             >
1434+ E285             >                // dummy db directives used to calculate length of namec
1434+ E285 30 3C       >                db      "0<"
1434+ E287             >len_NFA         defl    $ - temp_NFA
1434+ E287             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1434+ E285             >
1434+ E285 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1434+ E286 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1434+ E288             >                org     $-1                 // alter last byte of Name just above to set
1434+ E287 BC          >                db      {b $} | END_BIT     // msb as name end
1434+ E288             >
1434+ E288 7D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1434+ E28A             >Prev_Ptr        defl    Heap_Ptr
1434+ E28A             >
1434+ E28A             >mirror_Ptr      defl    $
1434+ E28A             >
1434+ E28A 8A 68       >                dw      Dict_Ptr + 2        // xt
1434+ E28C             >Heap_Ptr        defl    $ - $E000           // save current HP
1434+ E28C             >
1434+ E28C             >Current_HP      defl  $ - $E000             // used to set HP once!
1434+ E28C             >
1434+ E28C             >//              ______________________________________________________________________
1434+ E28C             >//              Dictionary part
1434+ E28C             >
1434+ E28C             >                org     Dict_Ptr
1434+ 6888             >
1434+ 6888 8A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1434+ 688A             >
1434+ 688A             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1434+ 688A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1434+ 688A ~           >
1434+ 688A ~           >
1434+ 688A             >                endif           ; ok        // for other definitions it "points" the correct handler
1434+ 688A             >                // Use of "; ok" to suppress "warning[fwdref]"
1434+ 688A             >
1434+ 688A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1435+ 688A E1                           pop     hl
1436+ 688B 29                           add     hl, hl
1437+ 688C ED 62                        sbc     hl, hl
1438+ 688E                              psh1
1438+ 688E E5          >                push    hl
1438+ 688F DD E9       >                jp      (ix)
1439+ 6891
1440+ 6891              //  ______________________________________________________________________
1441+ 6891              //
1442+ 6891              // 0>           n -- f
1443+ 6891              // true (non zero) if n is less than zero, false (0) elsewere
1444+ 6891                              New_Def ZGREATER, "0>", is_code, is_normal
1444+ 6891             >
1444+ 6891             >Dict_Ptr        defl    $
1444+ 6891             >
1444+ 6891             >//              ______________________________________________________________________
1444+ 6891             >//              Heap part
1444+ 6891             >
1444+ 6891             >
1444+ 6891             >                org     (Heap_Ptr & $1FFF) + $E000
1444+ E28C             >
1444+ E28C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1444+ E28C             >Latest_Definition defl  Heap_Ptr
1444+ E28C             >
1444+ E28C             >                // dummy db directives used to calculate length of namec
1444+ E28C 30 3E       >                db      "0>"
1444+ E28E             >len_NFA         defl    $ - temp_NFA
1444+ E28E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1444+ E28C             >
1444+ E28C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1444+ E28D 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1444+ E28F             >                org     $-1                 // alter last byte of Name just above to set
1444+ E28E BE          >                db      {b $} | END_BIT     // msb as name end
1444+ E28F             >
1444+ E28F 85 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1444+ E291             >Prev_Ptr        defl    Heap_Ptr
1444+ E291             >
1444+ E291             >mirror_Ptr      defl    $
1444+ E291             >
1444+ E291 93 68       >                dw      Dict_Ptr + 2        // xt
1444+ E293             >Heap_Ptr        defl    $ - $E000           // save current HP
1444+ E293             >
1444+ E293             >Current_HP      defl  $ - $E000             // used to set HP once!
1444+ E293             >
1444+ E293             >//              ______________________________________________________________________
1444+ E293             >//              Dictionary part
1444+ E293             >
1444+ E293             >                org     Dict_Ptr
1444+ 6891             >
1444+ 6891 91 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1444+ 6893             >
1444+ 6893             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1444+ 6893 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1444+ 6893 ~           >
1444+ 6893 ~           >
1444+ 6893             >                endif           ; ok        // for other definitions it "points" the correct handler
1444+ 6893             >                // Use of "; ok" to suppress "warning[fwdref]"
1444+ 6893             >
1444+ 6893             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1445+ 6893 E1                           pop     hl
1446+ 6894 7D                           ld      a, l
1447+ 6895 B4                           or      h
1448+ 6896 29                           add     hl, hl
1449+ 6897 21 00 00                     ld      hl, FALSE_FLAG
1450+ 689A 38 04                        jr      c, ZGreater_Skip
1451+ 689C A7                               and     a
1452+ 689D 28 01                            jr      z, ZGreater_Skip
1453+ 689F 2B                                   dec     hl
1454+ 68A0              ZGreater_Skip:
1455+ 68A0                              psh1
1455+ 68A0 E5          >                push    hl
1455+ 68A1 DD E9       >                jp      (ix)
1456+ 68A3
1457+ 68A3              //  ______________________________________________________________________
1458+ 68A3              //
1459+ 68A3              // +            n1 n2 -- n3
1460+ 68A3              // returns the unsigned sum of two top values
1461+ 68A3                              New_Def PLUS, "+", is_code, is_normal
1461+ 68A3             >
1461+ 68A3             >Dict_Ptr        defl    $
1461+ 68A3             >
1461+ 68A3             >//              ______________________________________________________________________
1461+ 68A3             >//              Heap part
1461+ 68A3             >
1461+ 68A3             >
1461+ 68A3             >                org     (Heap_Ptr & $1FFF) + $E000
1461+ E293             >
1461+ E293             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1461+ E293             >Latest_Definition defl  Heap_Ptr
1461+ E293             >
1461+ E293             >                // dummy db directives used to calculate length of namec
1461+ E293 2B          >                db      "+"
1461+ E294             >len_NFA         defl    $ - temp_NFA
1461+ E294             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1461+ E293             >
1461+ E293 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1461+ E294 2B          >                db      "+"               // name string in 7-bit ascii, but
1461+ E295             >                org     $-1                 // alter last byte of Name just above to set
1461+ E294 AB          >                db      {b $} | END_BIT     // msb as name end
1461+ E295             >
1461+ E295 8C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1461+ E297             >Prev_Ptr        defl    Heap_Ptr
1461+ E297             >
1461+ E297             >mirror_Ptr      defl    $
1461+ E297             >
1461+ E297 A5 68       >                dw      Dict_Ptr + 2        // xt
1461+ E299             >Heap_Ptr        defl    $ - $E000           // save current HP
1461+ E299             >
1461+ E299             >Current_HP      defl  $ - $E000             // used to set HP once!
1461+ E299             >
1461+ E299             >//              ______________________________________________________________________
1461+ E299             >//              Dictionary part
1461+ E299             >
1461+ E299             >                org     Dict_Ptr
1461+ 68A3             >
1461+ 68A3 97 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1461+ 68A5             >
1461+ 68A5             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1461+ 68A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1461+ 68A5 ~           >
1461+ 68A5 ~           >
1461+ 68A5             >                endif           ; ok        // for other definitions it "points" the correct handler
1461+ 68A5             >                // Use of "; ok" to suppress "warning[fwdref]"
1461+ 68A5             >
1461+ 68A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1462+ 68A5 D9                           exx
1463+ 68A6 E1                           pop     hl
1464+ 68A7 D1                           pop     de
1465+ 68A8 19                           add     hl, de
1466+ 68A9 E5                           push    hl
1467+ 68AA D9                           exx
1468+ 68AB                              next
1468+ 68AB DD E9       >                jp      (ix)
1469+ 68AD
1470+ 68AD
1471+ 68AD              //  ______________________________________________________________________
1472+ 68AD              //
1473+ 68AD              // d+           d1 d2 -- d3
1474+ 68AD              // returns the unsigned sum of two top double-numbers
1475+ 68AD              //      d2  d1
1476+ 68AD              //      h l h l
1477+ 68AD              // SP   LHEDLHED
1478+ 68AD              // SP  +01234567
1479+ 68AD                              New_Def DPLUS, "D+", is_code, is_normal
1479+ 68AD             >
1479+ 68AD             >Dict_Ptr        defl    $
1479+ 68AD             >
1479+ 68AD             >//              ______________________________________________________________________
1479+ 68AD             >//              Heap part
1479+ 68AD             >
1479+ 68AD             >
1479+ 68AD             >                org     (Heap_Ptr & $1FFF) + $E000
1479+ E299             >
1479+ E299             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1479+ E299             >Latest_Definition defl  Heap_Ptr
1479+ E299             >
1479+ E299             >                // dummy db directives used to calculate length of namec
1479+ E299 44 2B       >                db      "D+"
1479+ E29B             >len_NFA         defl    $ - temp_NFA
1479+ E29B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1479+ E299             >
1479+ E299 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1479+ E29A 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1479+ E29C             >                org     $-1                 // alter last byte of Name just above to set
1479+ E29B AB          >                db      {b $} | END_BIT     // msb as name end
1479+ E29C             >
1479+ E29C 93 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1479+ E29E             >Prev_Ptr        defl    Heap_Ptr
1479+ E29E             >
1479+ E29E             >mirror_Ptr      defl    $
1479+ E29E             >
1479+ E29E AF 68       >                dw      Dict_Ptr + 2        // xt
1479+ E2A0             >Heap_Ptr        defl    $ - $E000           // save current HP
1479+ E2A0             >
1479+ E2A0             >Current_HP      defl  $ - $E000             // used to set HP once!
1479+ E2A0             >
1479+ E2A0             >//              ______________________________________________________________________
1479+ E2A0             >//              Dictionary part
1479+ E2A0             >
1479+ E2A0             >                org     Dict_Ptr
1479+ 68AD             >
1479+ 68AD 9E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1479+ 68AF             >
1479+ 68AF             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1479+ 68AF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1479+ 68AF ~           >
1479+ 68AF ~           >
1479+ 68AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1479+ 68AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1479+ 68AF             >
1479+ 68AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1480+ 68AF
1481+ 68AF D9                           exx
1482+ 68B0 C1                           pop     bc                  // bc := d2.H
1483+ 68B1 D1                           pop     de                  // hl := d2.L
1484+ 68B2 E1                           pop     hl                  // d1.H
1485+ 68B3 E3                           ex      (sp), hl            // d1.L
1486+ 68B4 19                           add     hl, de              // hl := d2.L + d1.L
1487+ 68B5 E3                           ex      (sp), hl            // d1.H
1488+ 68B6 ED 4A                        adc     hl, bc              // d1.H + d2.H
1489+ 68B8 E5                           push    hl
1490+ 68B9 D9                           exx
1491+ 68BA                              next
1491+ 68BA DD E9       >                jp      (ix)
1492+ 68BC
1493+ 68BC              //  ______________________________________________________________________
1494+ 68BC              //
1495+ 68BC              // 1+           n1 -- n2
1496+ 68BC              // increment by 1 top of stack
1497+ 68BC                              New_Def ONE_PLUS, "1+", is_code, is_normal
1497+ 68BC             >
1497+ 68BC             >Dict_Ptr        defl    $
1497+ 68BC             >
1497+ 68BC             >//              ______________________________________________________________________
1497+ 68BC             >//              Heap part
1497+ 68BC             >
1497+ 68BC             >
1497+ 68BC             >                org     (Heap_Ptr & $1FFF) + $E000
1497+ E2A0             >
1497+ E2A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1497+ E2A0             >Latest_Definition defl  Heap_Ptr
1497+ E2A0             >
1497+ E2A0             >                // dummy db directives used to calculate length of namec
1497+ E2A0 31 2B       >                db      "1+"
1497+ E2A2             >len_NFA         defl    $ - temp_NFA
1497+ E2A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1497+ E2A0             >
1497+ E2A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1497+ E2A1 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1497+ E2A3             >                org     $-1                 // alter last byte of Name just above to set
1497+ E2A2 AB          >                db      {b $} | END_BIT     // msb as name end
1497+ E2A3             >
1497+ E2A3 99 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1497+ E2A5             >Prev_Ptr        defl    Heap_Ptr
1497+ E2A5             >
1497+ E2A5             >mirror_Ptr      defl    $
1497+ E2A5             >
1497+ E2A5 BE 68       >                dw      Dict_Ptr + 2        // xt
1497+ E2A7             >Heap_Ptr        defl    $ - $E000           // save current HP
1497+ E2A7             >
1497+ E2A7             >Current_HP      defl  $ - $E000             // used to set HP once!
1497+ E2A7             >
1497+ E2A7             >//              ______________________________________________________________________
1497+ E2A7             >//              Dictionary part
1497+ E2A7             >
1497+ E2A7             >                org     Dict_Ptr
1497+ 68BC             >
1497+ 68BC A5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1497+ 68BE             >
1497+ 68BE             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1497+ 68BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1497+ 68BE ~           >
1497+ 68BE ~           >
1497+ 68BE             >                endif           ; ok        // for other definitions it "points" the correct handler
1497+ 68BE             >                // Use of "; ok" to suppress "warning[fwdref]"
1497+ 68BE             >
1497+ 68BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1498+ 68BE E1                           pop     hl
1499+ 68BF 23                           inc     hl
1500+ 68C0
1501+ 68C0                              psh1
1501+ 68C0 E5          >                push    hl
1501+ 68C1 DD E9       >                jp      (ix)
1502+ 68C3
1503+ 68C3              //  ______________________________________________________________________
1504+ 68C3              //
1505+ 68C3              // 1-           n1 -- n2
1506+ 68C3              // decrement by 1 top of stack
1507+ 68C3                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1507+ 68C3             >
1507+ 68C3             >Dict_Ptr        defl    $
1507+ 68C3             >
1507+ 68C3             >//              ______________________________________________________________________
1507+ 68C3             >//              Heap part
1507+ 68C3             >
1507+ 68C3             >
1507+ 68C3             >                org     (Heap_Ptr & $1FFF) + $E000
1507+ E2A7             >
1507+ E2A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1507+ E2A7             >Latest_Definition defl  Heap_Ptr
1507+ E2A7             >
1507+ E2A7             >                // dummy db directives used to calculate length of namec
1507+ E2A7 31 2D       >                db      "1-"
1507+ E2A9             >len_NFA         defl    $ - temp_NFA
1507+ E2A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1507+ E2A7             >
1507+ E2A7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1507+ E2A8 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1507+ E2AA             >                org     $-1                 // alter last byte of Name just above to set
1507+ E2A9 AD          >                db      {b $} | END_BIT     // msb as name end
1507+ E2AA             >
1507+ E2AA A0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1507+ E2AC             >Prev_Ptr        defl    Heap_Ptr
1507+ E2AC             >
1507+ E2AC             >mirror_Ptr      defl    $
1507+ E2AC             >
1507+ E2AC C5 68       >                dw      Dict_Ptr + 2        // xt
1507+ E2AE             >Heap_Ptr        defl    $ - $E000           // save current HP
1507+ E2AE             >
1507+ E2AE             >Current_HP      defl  $ - $E000             // used to set HP once!
1507+ E2AE             >
1507+ E2AE             >//              ______________________________________________________________________
1507+ E2AE             >//              Dictionary part
1507+ E2AE             >
1507+ E2AE             >                org     Dict_Ptr
1507+ 68C3             >
1507+ 68C3 AC 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1507+ 68C5             >
1507+ 68C5             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1507+ 68C5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1507+ 68C5 ~           >
1507+ 68C5 ~           >
1507+ 68C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1507+ 68C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1507+ 68C5             >
1507+ 68C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1508+ 68C5 E1                           pop     hl
1509+ 68C6 2B                           dec     hl
1510+ 68C7
1511+ 68C7                              psh1
1511+ 68C7 E5          >                push    hl
1511+ 68C8 DD E9       >                jp      (ix)
1512+ 68CA
1513+ 68CA              //  ______________________________________________________________________
1514+ 68CA              //
1515+ 68CA              // 2+           n1 -- n2
1516+ 68CA              // increment by 2 top of stack
1517+ 68CA                              New_Def TWO_PLUS, "2+", is_code, is_normal
1517+ 68CA             >
1517+ 68CA             >Dict_Ptr        defl    $
1517+ 68CA             >
1517+ 68CA             >//              ______________________________________________________________________
1517+ 68CA             >//              Heap part
1517+ 68CA             >
1517+ 68CA             >
1517+ 68CA             >                org     (Heap_Ptr & $1FFF) + $E000
1517+ E2AE             >
1517+ E2AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1517+ E2AE             >Latest_Definition defl  Heap_Ptr
1517+ E2AE             >
1517+ E2AE             >                // dummy db directives used to calculate length of namec
1517+ E2AE 32 2B       >                db      "2+"
1517+ E2B0             >len_NFA         defl    $ - temp_NFA
1517+ E2B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1517+ E2AE             >
1517+ E2AE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1517+ E2AF 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1517+ E2B1             >                org     $-1                 // alter last byte of Name just above to set
1517+ E2B0 AB          >                db      {b $} | END_BIT     // msb as name end
1517+ E2B1             >
1517+ E2B1 A7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1517+ E2B3             >Prev_Ptr        defl    Heap_Ptr
1517+ E2B3             >
1517+ E2B3             >mirror_Ptr      defl    $
1517+ E2B3             >
1517+ E2B3 CC 68       >                dw      Dict_Ptr + 2        // xt
1517+ E2B5             >Heap_Ptr        defl    $ - $E000           // save current HP
1517+ E2B5             >
1517+ E2B5             >Current_HP      defl  $ - $E000             // used to set HP once!
1517+ E2B5             >
1517+ E2B5             >//              ______________________________________________________________________
1517+ E2B5             >//              Dictionary part
1517+ E2B5             >
1517+ E2B5             >                org     Dict_Ptr
1517+ 68CA             >
1517+ 68CA B3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1517+ 68CC             >
1517+ 68CC             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1517+ 68CC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1517+ 68CC ~           >
1517+ 68CC ~           >
1517+ 68CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1517+ 68CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1517+ 68CC             >
1517+ 68CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1518+ 68CC              Two_Plus:
1519+ 68CC E1                           pop     hl
1520+ 68CD 23                           inc     hl
1521+ 68CE 23                           inc     hl
1522+ 68CF
1523+ 68CF                              psh1
1523+ 68CF E5          >                push    hl
1523+ 68D0 DD E9       >                jp      (ix)
1524+ 68D2
1525+ 68D2              //  ______________________________________________________________________
1526+ 68D2              //
1527+ 68D2              // cell+        a1 -- a2
1528+ 68D2              // increment by 2 top of stack
1529+ 68D2                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1529+ 68D2             >
1529+ 68D2             >Dict_Ptr        defl    $
1529+ 68D2             >
1529+ 68D2             >//              ______________________________________________________________________
1529+ 68D2             >//              Heap part
1529+ 68D2             >
1529+ 68D2             >
1529+ 68D2             >                org     (Heap_Ptr & $1FFF) + $E000
1529+ E2B5             >
1529+ E2B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1529+ E2B5             >Latest_Definition defl  Heap_Ptr
1529+ E2B5             >
1529+ E2B5             >                // dummy db directives used to calculate length of namec
1529+ E2B5 43 45 4C 4C >                db      "CELL+"
1529+ E2B9 2B          >
1529+ E2BA             >len_NFA         defl    $ - temp_NFA
1529+ E2BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1529+ E2B5             >
1529+ E2B5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1529+ E2B6 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1529+ E2BA 2B          >
1529+ E2BB             >                org     $-1                 // alter last byte of Name just above to set
1529+ E2BA AB          >                db      {b $} | END_BIT     // msb as name end
1529+ E2BB             >
1529+ E2BB AE 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1529+ E2BD             >Prev_Ptr        defl    Heap_Ptr
1529+ E2BD             >
1529+ E2BD             >mirror_Ptr      defl    $
1529+ E2BD             >
1529+ E2BD D4 68       >                dw      Dict_Ptr + 2        // xt
1529+ E2BF             >Heap_Ptr        defl    $ - $E000           // save current HP
1529+ E2BF             >
1529+ E2BF             >Current_HP      defl  $ - $E000             // used to set HP once!
1529+ E2BF             >
1529+ E2BF             >//              ______________________________________________________________________
1529+ E2BF             >//              Dictionary part
1529+ E2BF             >
1529+ E2BF             >                org     Dict_Ptr
1529+ 68D2             >
1529+ 68D2 BD 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1529+ 68D4             >
1529+ 68D4             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1529+ 68D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1529+ 68D4 ~           >
1529+ 68D4 ~           >
1529+ 68D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1529+ 68D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1529+ 68D4             >
1529+ 68D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1530+ 68D4 C3 CC 68                     jp      Two_Plus
1531+ 68D7
1532+ 68D7              //  ______________________________________________________________________
1533+ 68D7              //
1534+ 68D7              // align        a1 -- a2
1535+ 68D7              // align memory : not used
1536+ 68D7              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1537+ 68D7              //            next
1538+ 68D7
1539+ 68D7              //  ______________________________________________________________________
1540+ 68D7              //
1541+ 68D7              // cell-        a1 -- a2
1542+ 68D7              // decrement by 2 top of stack
1543+ 68D7                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1543+ 68D7             >
1543+ 68D7             >Dict_Ptr        defl    $
1543+ 68D7             >
1543+ 68D7             >//              ______________________________________________________________________
1543+ 68D7             >//              Heap part
1543+ 68D7             >
1543+ 68D7             >
1543+ 68D7             >                org     (Heap_Ptr & $1FFF) + $E000
1543+ E2BF             >
1543+ E2BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1543+ E2BF             >Latest_Definition defl  Heap_Ptr
1543+ E2BF             >
1543+ E2BF             >                // dummy db directives used to calculate length of namec
1543+ E2BF 43 45 4C 4C >                db      "CELL-"
1543+ E2C3 2D          >
1543+ E2C4             >len_NFA         defl    $ - temp_NFA
1543+ E2C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1543+ E2BF             >
1543+ E2BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1543+ E2C0 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1543+ E2C4 2D          >
1543+ E2C5             >                org     $-1                 // alter last byte of Name just above to set
1543+ E2C4 AD          >                db      {b $} | END_BIT     // msb as name end
1543+ E2C5             >
1543+ E2C5 B5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1543+ E2C7             >Prev_Ptr        defl    Heap_Ptr
1543+ E2C7             >
1543+ E2C7             >mirror_Ptr      defl    $
1543+ E2C7             >
1543+ E2C7 D9 68       >                dw      Dict_Ptr + 2        // xt
1543+ E2C9             >Heap_Ptr        defl    $ - $E000           // save current HP
1543+ E2C9             >
1543+ E2C9             >Current_HP      defl  $ - $E000             // used to set HP once!
1543+ E2C9             >
1543+ E2C9             >//              ______________________________________________________________________
1543+ E2C9             >//              Dictionary part
1543+ E2C9             >
1543+ E2C9             >                org     Dict_Ptr
1543+ 68D7             >
1543+ 68D7 C7 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1543+ 68D9             >
1543+ 68D9             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1543+ 68D9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1543+ 68D9 ~           >
1543+ 68D9 ~           >
1543+ 68D9             >                endif           ; ok        // for other definitions it "points" the correct handler
1543+ 68D9             >                // Use of "; ok" to suppress "warning[fwdref]"
1543+ 68D9             >
1543+ 68D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1544+ 68D9              CellMinus:
1545+ 68D9 E1                           pop     hl
1546+ 68DA 2B                           dec     hl
1547+ 68DB 2B                           dec     hl
1548+ 68DC
1549+ 68DC                              psh1
1549+ 68DC E5          >                push    hl
1549+ 68DD DD E9       >                jp      (ix)
1550+ 68DF
1551+ 68DF              //  ______________________________________________________________________
1552+ 68DF              //
1553+ 68DF              // 2-           a1 -- a2
1554+ 68DF              // decrement by 2 top of stack
1555+ 68DF                              New_Def TWO_MINUS, "2-", is_code, is_normal
1555+ 68DF             >
1555+ 68DF             >Dict_Ptr        defl    $
1555+ 68DF             >
1555+ 68DF             >//              ______________________________________________________________________
1555+ 68DF             >//              Heap part
1555+ 68DF             >
1555+ 68DF             >
1555+ 68DF             >                org     (Heap_Ptr & $1FFF) + $E000
1555+ E2C9             >
1555+ E2C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1555+ E2C9             >Latest_Definition defl  Heap_Ptr
1555+ E2C9             >
1555+ E2C9             >                // dummy db directives used to calculate length of namec
1555+ E2C9 32 2D       >                db      "2-"
1555+ E2CB             >len_NFA         defl    $ - temp_NFA
1555+ E2CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1555+ E2C9             >
1555+ E2C9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1555+ E2CA 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1555+ E2CC             >                org     $-1                 // alter last byte of Name just above to set
1555+ E2CB AD          >                db      {b $} | END_BIT     // msb as name end
1555+ E2CC             >
1555+ E2CC BF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1555+ E2CE             >Prev_Ptr        defl    Heap_Ptr
1555+ E2CE             >
1555+ E2CE             >mirror_Ptr      defl    $
1555+ E2CE             >
1555+ E2CE E1 68       >                dw      Dict_Ptr + 2        // xt
1555+ E2D0             >Heap_Ptr        defl    $ - $E000           // save current HP
1555+ E2D0             >
1555+ E2D0             >Current_HP      defl  $ - $E000             // used to set HP once!
1555+ E2D0             >
1555+ E2D0             >//              ______________________________________________________________________
1555+ E2D0             >//              Dictionary part
1555+ E2D0             >
1555+ E2D0             >                org     Dict_Ptr
1555+ 68DF             >
1555+ 68DF CE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1555+ 68E1             >
1555+ 68E1             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1555+ 68E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1555+ 68E1 ~           >
1555+ 68E1 ~           >
1555+ 68E1             >                endif           ; ok        // for other definitions it "points" the correct handler
1555+ 68E1             >                // Use of "; ok" to suppress "warning[fwdref]"
1555+ 68E1             >
1555+ 68E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1556+ 68E1 C3 D9 68                     jp      CellMinus
1557+ 68E4
1558+ 68E4              //  ______________________________________________________________________
1559+ 68E4              //
1560+ 68E4              // negate       n1 -- n2
1561+ 68E4              // change the sign of number
1562+ 68E4                              New_Def MINUS, "NEGATE", is_code, is_normal
1562+ 68E4             >
1562+ 68E4             >Dict_Ptr        defl    $
1562+ 68E4             >
1562+ 68E4             >//              ______________________________________________________________________
1562+ 68E4             >//              Heap part
1562+ 68E4             >
1562+ 68E4             >
1562+ 68E4             >                org     (Heap_Ptr & $1FFF) + $E000
1562+ E2D0             >
1562+ E2D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1562+ E2D0             >Latest_Definition defl  Heap_Ptr
1562+ E2D0             >
1562+ E2D0             >                // dummy db directives used to calculate length of namec
1562+ E2D0 4E 45 47 41 >                db      "NEGATE"
1562+ E2D4 54 45       >
1562+ E2D6             >len_NFA         defl    $ - temp_NFA
1562+ E2D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1562+ E2D0             >
1562+ E2D0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1562+ E2D1 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1562+ E2D5 54 45       >
1562+ E2D7             >                org     $-1                 // alter last byte of Name just above to set
1562+ E2D6 C5          >                db      {b $} | END_BIT     // msb as name end
1562+ E2D7             >
1562+ E2D7 C9 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1562+ E2D9             >Prev_Ptr        defl    Heap_Ptr
1562+ E2D9             >
1562+ E2D9             >mirror_Ptr      defl    $
1562+ E2D9             >
1562+ E2D9 E6 68       >                dw      Dict_Ptr + 2        // xt
1562+ E2DB             >Heap_Ptr        defl    $ - $E000           // save current HP
1562+ E2DB             >
1562+ E2DB             >Current_HP      defl  $ - $E000             // used to set HP once!
1562+ E2DB             >
1562+ E2DB             >//              ______________________________________________________________________
1562+ E2DB             >//              Dictionary part
1562+ E2DB             >
1562+ E2DB             >                org     Dict_Ptr
1562+ 68E4             >
1562+ 68E4 D9 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1562+ 68E6             >
1562+ 68E6             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1562+ 68E6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1562+ 68E6 ~           >
1562+ 68E6 ~           >
1562+ 68E6             >                endif           ; ok        // for other definitions it "points" the correct handler
1562+ 68E6             >                // Use of "; ok" to suppress "warning[fwdref]"
1562+ 68E6             >
1562+ 68E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1563+ 68E6 D9                           exx
1564+ 68E7 21 00 00                     ld      hl, 0               // subtract from 0
1565+ 68EA D1                           pop     de
1566+ 68EB B7                           or      a
1567+ 68EC ED 52                        sbc     hl, de
1568+ 68EE E5                           push    hl
1569+ 68EF D9                           exx
1570+ 68F0                              next
1570+ 68F0 DD E9       >                jp      (ix)
1571+ 68F2
1572+ 68F2              //  ______________________________________________________________________
1573+ 68F2              //
1574+ 68F2              // dnegate      d1 -- d2
1575+ 68F2              // change the sign of a double number
1576+ 68F2                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1576+ 68F2             >
1576+ 68F2             >Dict_Ptr        defl    $
1576+ 68F2             >
1576+ 68F2             >//              ______________________________________________________________________
1576+ 68F2             >//              Heap part
1576+ 68F2             >
1576+ 68F2             >
1576+ 68F2             >                org     (Heap_Ptr & $1FFF) + $E000
1576+ E2DB             >
1576+ E2DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1576+ E2DB             >Latest_Definition defl  Heap_Ptr
1576+ E2DB             >
1576+ E2DB             >                // dummy db directives used to calculate length of namec
1576+ E2DB 44 4E 45 47 >                db      "DNEGATE"
1576+ E2DF 41 54 45    >
1576+ E2E2             >len_NFA         defl    $ - temp_NFA
1576+ E2E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1576+ E2DB             >
1576+ E2DB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1576+ E2DC 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1576+ E2E0 41 54 45    >
1576+ E2E3             >                org     $-1                 // alter last byte of Name just above to set
1576+ E2E2 C5          >                db      {b $} | END_BIT     // msb as name end
1576+ E2E3             >
1576+ E2E3 D0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1576+ E2E5             >Prev_Ptr        defl    Heap_Ptr
1576+ E2E5             >
1576+ E2E5             >mirror_Ptr      defl    $
1576+ E2E5             >
1576+ E2E5 F4 68       >                dw      Dict_Ptr + 2        // xt
1576+ E2E7             >Heap_Ptr        defl    $ - $E000           // save current HP
1576+ E2E7             >
1576+ E2E7             >Current_HP      defl  $ - $E000             // used to set HP once!
1576+ E2E7             >
1576+ E2E7             >//              ______________________________________________________________________
1576+ E2E7             >//              Dictionary part
1576+ E2E7             >
1576+ E2E7             >                org     Dict_Ptr
1576+ 68F2             >
1576+ 68F2 E5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1576+ 68F4             >
1576+ 68F4             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1576+ 68F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1576+ 68F4 ~           >
1576+ 68F4 ~           >
1576+ 68F4             >                endif           ; ok        // for other definitions it "points" the correct handler
1576+ 68F4             >                // Use of "; ok" to suppress "warning[fwdref]"
1576+ 68F4             >
1576+ 68F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1577+ 68F4 D9                           exx
1578+ 68F5 C1                           pop     bc                  // d1.H
1579+ 68F6 D1                           pop     de                  // d1.L
1580+ 68F7 AF                           xor     a
1581+ 68F8 67                           ld      h, a
1582+ 68F9 6F                           ld      l, a
1583+ 68FA ED 52                        sbc     hl, de              // subtact from zero
1584+ 68FC E5                           push    hl                  // > d2-L
1585+ 68FD 67                           ld      h, a
1586+ 68FE 6F                           ld      l, a
1587+ 68FF ED 42                        sbc     hl, bc              // subtract from zero with carry
1588+ 6901                                                          // > d2-H
1589+ 6901 E5                           push    hl
1590+ 6902 D9                           exx
1591+ 6903                              next
1591+ 6903 DD E9       >                jp      (ix)
1592+ 6905
1593+ 6905              //  ______________________________________________________________________
1594+ 6905              //
1595+ 6905              // over         n1 n2 -- n1 n2 n1
1596+ 6905              // copy the second value of stack and put it on top.
1597+ 6905                              New_Def OVER, "OVER", is_code, is_normal
1597+ 6905             >
1597+ 6905             >Dict_Ptr        defl    $
1597+ 6905             >
1597+ 6905             >//              ______________________________________________________________________
1597+ 6905             >//              Heap part
1597+ 6905             >
1597+ 6905             >
1597+ 6905             >                org     (Heap_Ptr & $1FFF) + $E000
1597+ E2E7             >
1597+ E2E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1597+ E2E7             >Latest_Definition defl  Heap_Ptr
1597+ E2E7             >
1597+ E2E7             >                // dummy db directives used to calculate length of namec
1597+ E2E7 4F 56 45 52 >                db      "OVER"
1597+ E2EB             >len_NFA         defl    $ - temp_NFA
1597+ E2EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1597+ E2E7             >
1597+ E2E7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1597+ E2E8 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1597+ E2EC             >                org     $-1                 // alter last byte of Name just above to set
1597+ E2EB D2          >                db      {b $} | END_BIT     // msb as name end
1597+ E2EC             >
1597+ E2EC DB 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1597+ E2EE             >Prev_Ptr        defl    Heap_Ptr
1597+ E2EE             >
1597+ E2EE             >mirror_Ptr      defl    $
1597+ E2EE             >
1597+ E2EE 07 69       >                dw      Dict_Ptr + 2        // xt
1597+ E2F0             >Heap_Ptr        defl    $ - $E000           // save current HP
1597+ E2F0             >
1597+ E2F0             >Current_HP      defl  $ - $E000             // used to set HP once!
1597+ E2F0             >
1597+ E2F0             >//              ______________________________________________________________________
1597+ E2F0             >//              Dictionary part
1597+ E2F0             >
1597+ E2F0             >                org     Dict_Ptr
1597+ 6905             >
1597+ 6905 EE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1597+ 6907             >
1597+ 6907             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1597+ 6907 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1597+ 6907 ~           >
1597+ 6907 ~           >
1597+ 6907             >                endif           ; ok        // for other definitions it "points" the correct handler
1597+ 6907             >                // Use of "; ok" to suppress "warning[fwdref]"
1597+ 6907             >
1597+ 6907             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1598+ 6907                              // exx     // we can use af instead OPTIMIZATION possible
1599+ 6907 F1                           pop     af                  //   n2
1600+ 6908 E1                           pop     hl                  // < n1
1601+ 6909 E5                           push    hl                  // > n1
1602+ 690A F5                           push    af                  // > n2
1603+ 690B E5                           push    hl                  // > n1
1604+ 690C                              // exx
1605+ 690C                              next
1605+ 690C DD E9       >                jp      (ix)
1606+ 690E
1607+ 690E              //  ______________________________________________________________________
1608+ 690E              //
1609+ 690E              // drop         n1 --
1610+ 690E              // drops the top of stack
1611+ 690E                              New_Def DROP, "DROP", is_code, is_normal
1611+ 690E             >
1611+ 690E             >Dict_Ptr        defl    $
1611+ 690E             >
1611+ 690E             >//              ______________________________________________________________________
1611+ 690E             >//              Heap part
1611+ 690E             >
1611+ 690E             >
1611+ 690E             >                org     (Heap_Ptr & $1FFF) + $E000
1611+ E2F0             >
1611+ E2F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1611+ E2F0             >Latest_Definition defl  Heap_Ptr
1611+ E2F0             >
1611+ E2F0             >                // dummy db directives used to calculate length of namec
1611+ E2F0 44 52 4F 50 >                db      "DROP"
1611+ E2F4             >len_NFA         defl    $ - temp_NFA
1611+ E2F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1611+ E2F0             >
1611+ E2F0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1611+ E2F1 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1611+ E2F5             >                org     $-1                 // alter last byte of Name just above to set
1611+ E2F4 D0          >                db      {b $} | END_BIT     // msb as name end
1611+ E2F5             >
1611+ E2F5 E7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1611+ E2F7             >Prev_Ptr        defl    Heap_Ptr
1611+ E2F7             >
1611+ E2F7             >mirror_Ptr      defl    $
1611+ E2F7             >
1611+ E2F7 10 69       >                dw      Dict_Ptr + 2        // xt
1611+ E2F9             >Heap_Ptr        defl    $ - $E000           // save current HP
1611+ E2F9             >
1611+ E2F9             >Current_HP      defl  $ - $E000             // used to set HP once!
1611+ E2F9             >
1611+ E2F9             >//              ______________________________________________________________________
1611+ E2F9             >//              Dictionary part
1611+ E2F9             >
1611+ E2F9             >                org     Dict_Ptr
1611+ 690E             >
1611+ 690E F7 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1611+ 6910             >
1611+ 6910             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1611+ 6910 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1611+ 6910 ~           >
1611+ 6910 ~           >
1611+ 6910             >                endif           ; ok        // for other definitions it "points" the correct handler
1611+ 6910             >                // Use of "; ok" to suppress "warning[fwdref]"
1611+ 6910             >
1611+ 6910             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1612+ 6910 E1                           pop     hl                  // < n1 and discard previous TOS
1613+ 6911                              next
1613+ 6911 DD E9       >                jp      (ix)
1614+ 6913
1615+ 6913              //  ______________________________________________________________________
1616+ 6913              //
1617+ 6913              // nip          n1 n2 -- n2
1618+ 6913              // drops the second elemento on the stack
1619+ 6913                              New_Def NIP, "NIP", is_code, is_normal
1619+ 6913             >
1619+ 6913             >Dict_Ptr        defl    $
1619+ 6913             >
1619+ 6913             >//              ______________________________________________________________________
1619+ 6913             >//              Heap part
1619+ 6913             >
1619+ 6913             >
1619+ 6913             >                org     (Heap_Ptr & $1FFF) + $E000
1619+ E2F9             >
1619+ E2F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1619+ E2F9             >Latest_Definition defl  Heap_Ptr
1619+ E2F9             >
1619+ E2F9             >                // dummy db directives used to calculate length of namec
1619+ E2F9 4E 49 50    >                db      "NIP"
1619+ E2FC             >len_NFA         defl    $ - temp_NFA
1619+ E2FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1619+ E2F9             >
1619+ E2F9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1619+ E2FA 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1619+ E2FD             >                org     $-1                 // alter last byte of Name just above to set
1619+ E2FC D0          >                db      {b $} | END_BIT     // msb as name end
1619+ E2FD             >
1619+ E2FD F0 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1619+ E2FF             >Prev_Ptr        defl    Heap_Ptr
1619+ E2FF             >
1619+ E2FF             >mirror_Ptr      defl    $
1619+ E2FF             >
1619+ E2FF 15 69       >                dw      Dict_Ptr + 2        // xt
1619+ E301             >Heap_Ptr        defl    $ - $E000           // save current HP
1619+ E301             >
1619+ E301             >Current_HP      defl  $ - $E000             // used to set HP once!
1619+ E301             >
1619+ E301             >//              ______________________________________________________________________
1619+ E301             >//              Dictionary part
1619+ E301             >
1619+ E301             >                org     Dict_Ptr
1619+ 6913             >
1619+ 6913 FF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1619+ 6915             >
1619+ 6915             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1619+ 6915 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1619+ 6915 ~           >
1619+ 6915 ~           >
1619+ 6915             >                endif           ; ok        // for other definitions it "points" the correct handler
1619+ 6915             >                // Use of "; ok" to suppress "warning[fwdref]"
1619+ 6915             >
1619+ 6915             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1620+ 6915
1621+ 6915 E1                           pop     hl                  // < n1 discarded
1622+ 6916 E3                           ex      (sp), hl
1623+ 6917                              next
1623+ 6917 DD E9       >                jp      (ix)
1624+ 6919
1625+ 6919              //  ______________________________________________________________________
1626+ 6919              //
1627+ 6919              // tuck         n1 n2 -- n2 n1 n2
1628+ 6919              // copy the top element after the second.
1629+ 6919                              New_Def TUCK, "TUCK", is_code, is_normal
1629+ 6919             >
1629+ 6919             >Dict_Ptr        defl    $
1629+ 6919             >
1629+ 6919             >//              ______________________________________________________________________
1629+ 6919             >//              Heap part
1629+ 6919             >
1629+ 6919             >
1629+ 6919             >                org     (Heap_Ptr & $1FFF) + $E000
1629+ E301             >
1629+ E301             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1629+ E301             >Latest_Definition defl  Heap_Ptr
1629+ E301             >
1629+ E301             >                // dummy db directives used to calculate length of namec
1629+ E301 54 55 43 4B >                db      "TUCK"
1629+ E305             >len_NFA         defl    $ - temp_NFA
1629+ E305             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1629+ E301             >
1629+ E301 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1629+ E302 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1629+ E306             >                org     $-1                 // alter last byte of Name just above to set
1629+ E305 CB          >                db      {b $} | END_BIT     // msb as name end
1629+ E306             >
1629+ E306 F9 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1629+ E308             >Prev_Ptr        defl    Heap_Ptr
1629+ E308             >
1629+ E308             >mirror_Ptr      defl    $
1629+ E308             >
1629+ E308 1B 69       >                dw      Dict_Ptr + 2        // xt
1629+ E30A             >Heap_Ptr        defl    $ - $E000           // save current HP
1629+ E30A             >
1629+ E30A             >Current_HP      defl  $ - $E000             // used to set HP once!
1629+ E30A             >
1629+ E30A             >//              ______________________________________________________________________
1629+ E30A             >//              Dictionary part
1629+ E30A             >
1629+ E30A             >                org     Dict_Ptr
1629+ 6919             >
1629+ 6919 08 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1629+ 691B             >
1629+ 691B             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1629+ 691B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1629+ 691B ~           >
1629+ 691B ~           >
1629+ 691B             >                endif           ; ok        // for other definitions it "points" the correct handler
1629+ 691B             >                // Use of "; ok" to suppress "warning[fwdref]"
1629+ 691B             >
1629+ 691B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1630+ 691B E1                           pop     hl
1631+ 691C F1                           pop     af                  // < n1
1632+ 691D E5                           push    hl                  // > n2  and TOS
1633+ 691E F5                           push    af                  // > n1
1634+ 691F E5                           push    hl
1635+ 6920                              next
1635+ 6920 DD E9       >                jp      (ix)
1636+ 6922
1637+ 6922              //  ______________________________________________________________________
1638+ 6922              //
1639+ 6922              // swap         n1 n2 -- n2 n1
1640+ 6922              // swaps the two values on top of stack
1641+ 6922                              New_Def SWAP, "SWAP", is_code, is_normal
1641+ 6922             >
1641+ 6922             >Dict_Ptr        defl    $
1641+ 6922             >
1641+ 6922             >//              ______________________________________________________________________
1641+ 6922             >//              Heap part
1641+ 6922             >
1641+ 6922             >
1641+ 6922             >                org     (Heap_Ptr & $1FFF) + $E000
1641+ E30A             >
1641+ E30A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1641+ E30A             >Latest_Definition defl  Heap_Ptr
1641+ E30A             >
1641+ E30A             >                // dummy db directives used to calculate length of namec
1641+ E30A 53 57 41 50 >                db      "SWAP"
1641+ E30E             >len_NFA         defl    $ - temp_NFA
1641+ E30E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1641+ E30A             >
1641+ E30A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1641+ E30B 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1641+ E30F             >                org     $-1                 // alter last byte of Name just above to set
1641+ E30E D0          >                db      {b $} | END_BIT     // msb as name end
1641+ E30F             >
1641+ E30F 01 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1641+ E311             >Prev_Ptr        defl    Heap_Ptr
1641+ E311             >
1641+ E311             >mirror_Ptr      defl    $
1641+ E311             >
1641+ E311 24 69       >                dw      Dict_Ptr + 2        // xt
1641+ E313             >Heap_Ptr        defl    $ - $E000           // save current HP
1641+ E313             >
1641+ E313             >Current_HP      defl  $ - $E000             // used to set HP once!
1641+ E313             >
1641+ E313             >//              ______________________________________________________________________
1641+ E313             >//              Dictionary part
1641+ E313             >
1641+ E313             >                org     Dict_Ptr
1641+ 6922             >
1641+ 6922 11 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1641+ 6924             >
1641+ 6924             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1641+ 6924 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1641+ 6924 ~           >
1641+ 6924 ~           >
1641+ 6924             >                endif           ; ok        // for other definitions it "points" the correct handler
1641+ 6924             >                // Use of "; ok" to suppress "warning[fwdref]"
1641+ 6924             >
1641+ 6924             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1642+ 6924 E1                           pop     hl                  // < n1
1643+ 6925 E3                           ex      (sp),hl             // > n2
1644+ 6926 E5                           push    hl                  // copy n1 to TOS
1645+ 6927                              next
1645+ 6927 DD E9       >                jp      (ix)
1646+ 6929
1647+ 6929              //  ______________________________________________________________________
1648+ 6929              //
1649+ 6929              // dup         n -- n n
1650+ 6929              // duplicates the top value of stack
1651+ 6929                              New_Def DUP, "DUP", is_code, is_normal
1651+ 6929             >
1651+ 6929             >Dict_Ptr        defl    $
1651+ 6929             >
1651+ 6929             >//              ______________________________________________________________________
1651+ 6929             >//              Heap part
1651+ 6929             >
1651+ 6929             >
1651+ 6929             >                org     (Heap_Ptr & $1FFF) + $E000
1651+ E313             >
1651+ E313             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1651+ E313             >Latest_Definition defl  Heap_Ptr
1651+ E313             >
1651+ E313             >                // dummy db directives used to calculate length of namec
1651+ E313 44 55 50    >                db      "DUP"
1651+ E316             >len_NFA         defl    $ - temp_NFA
1651+ E316             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1651+ E313             >
1651+ E313 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1651+ E314 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1651+ E317             >                org     $-1                 // alter last byte of Name just above to set
1651+ E316 D0          >                db      {b $} | END_BIT     // msb as name end
1651+ E317             >
1651+ E317 0A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1651+ E319             >Prev_Ptr        defl    Heap_Ptr
1651+ E319             >
1651+ E319             >mirror_Ptr      defl    $
1651+ E319             >
1651+ E319 2B 69       >                dw      Dict_Ptr + 2        // xt
1651+ E31B             >Heap_Ptr        defl    $ - $E000           // save current HP
1651+ E31B             >
1651+ E31B             >Current_HP      defl  $ - $E000             // used to set HP once!
1651+ E31B             >
1651+ E31B             >//              ______________________________________________________________________
1651+ E31B             >//              Dictionary part
1651+ E31B             >
1651+ E31B             >                org     Dict_Ptr
1651+ 6929             >
1651+ 6929 19 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1651+ 692B             >
1651+ 692B             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1651+ 692B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1651+ 692B ~           >
1651+ 692B ~           >
1651+ 692B             >                endif           ; ok        // for other definitions it "points" the correct handler
1651+ 692B             >                // Use of "; ok" to suppress "warning[fwdref]"
1651+ 692B             >
1651+ 692B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1652+ 692B E1                           pop     hl
1653+ 692C E5                           push    hl                  // > n duplicate TOS
1654+ 692D E5                           push    hl
1655+ 692E                              next
1655+ 692E DD E9       >                jp      (ix)
1656+ 6930
1657+ 6930              //  ______________________________________________________________________
1658+ 6930              //
1659+ 6930              // rot         n1 n2 n3 -- n2 n3 n1
1660+ 6930              // Rotates the 3 top values of stack by picking the 3rd in access-order
1661+ 6930              // and putting it on top. The other two are shifted down one place.
1662+ 6930                              New_Def ROT, "ROT", is_code, is_normal
1662+ 6930             >
1662+ 6930             >Dict_Ptr        defl    $
1662+ 6930             >
1662+ 6930             >//              ______________________________________________________________________
1662+ 6930             >//              Heap part
1662+ 6930             >
1662+ 6930             >
1662+ 6930             >                org     (Heap_Ptr & $1FFF) + $E000
1662+ E31B             >
1662+ E31B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1662+ E31B             >Latest_Definition defl  Heap_Ptr
1662+ E31B             >
1662+ E31B             >                // dummy db directives used to calculate length of namec
1662+ E31B 52 4F 54    >                db      "ROT"
1662+ E31E             >len_NFA         defl    $ - temp_NFA
1662+ E31E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1662+ E31B             >
1662+ E31B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1662+ E31C 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1662+ E31F             >                org     $-1                 // alter last byte of Name just above to set
1662+ E31E D4          >                db      {b $} | END_BIT     // msb as name end
1662+ E31F             >
1662+ E31F 13 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1662+ E321             >Prev_Ptr        defl    Heap_Ptr
1662+ E321             >
1662+ E321             >mirror_Ptr      defl    $
1662+ E321             >
1662+ E321 32 69       >                dw      Dict_Ptr + 2        // xt
1662+ E323             >Heap_Ptr        defl    $ - $E000           // save current HP
1662+ E323             >
1662+ E323             >Current_HP      defl  $ - $E000             // used to set HP once!
1662+ E323             >
1662+ E323             >//              ______________________________________________________________________
1662+ E323             >//              Dictionary part
1662+ E323             >
1662+ E323             >                org     Dict_Ptr
1662+ 6930             >
1662+ 6930 21 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1662+ 6932             >
1662+ 6932             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1662+ 6932 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1662+ 6932 ~           >
1662+ 6932 ~           >
1662+ 6932             >                endif           ; ok        // for other definitions it "points" the correct handler
1662+ 6932             >                // Use of "; ok" to suppress "warning[fwdref]"
1662+ 6932             >
1662+ 6932             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1663+ 6932 D9                           exx
1664+ 6933 D1                           pop     de                  // < n3
1665+ 6934 E1                           pop     hl                  // < n2
1666+ 6935 E3                           ex      (sp),hl             // > n2 < n1
1667+ 6936 D5                           push    de                  // > n3
1668+ 6937 E5                           push    hl                  // copy n1 to TOS
1669+ 6938 D9                           exx
1670+ 6939                              next
1670+ 6939 DD E9       >                jp      (ix)
1671+ 693B
1672+ 693B              //  ______________________________________________________________________
1673+ 693B              //
1674+ 693B              // -rot         n1 n2 n3 -- n3 n1 n2
1675+ 693B              // Rotates the 3 top values of stack by picking the 1st in access-order
1676+ 693B              // and putting back to 3rd place. The other two are shifted down one place.
1677+ 693B                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1677+ 693B             >
1677+ 693B             >Dict_Ptr        defl    $
1677+ 693B             >
1677+ 693B             >//              ______________________________________________________________________
1677+ 693B             >//              Heap part
1677+ 693B             >
1677+ 693B             >
1677+ 693B             >                org     (Heap_Ptr & $1FFF) + $E000
1677+ E323             >
1677+ E323             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1677+ E323             >Latest_Definition defl  Heap_Ptr
1677+ E323             >
1677+ E323             >                // dummy db directives used to calculate length of namec
1677+ E323 2D 52 4F 54 >                db      "-ROT"
1677+ E327             >len_NFA         defl    $ - temp_NFA
1677+ E327             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1677+ E323             >
1677+ E323 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1677+ E324 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1677+ E328             >                org     $-1                 // alter last byte of Name just above to set
1677+ E327 D4          >                db      {b $} | END_BIT     // msb as name end
1677+ E328             >
1677+ E328 1B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1677+ E32A             >Prev_Ptr        defl    Heap_Ptr
1677+ E32A             >
1677+ E32A             >mirror_Ptr      defl    $
1677+ E32A             >
1677+ E32A 3D 69       >                dw      Dict_Ptr + 2        // xt
1677+ E32C             >Heap_Ptr        defl    $ - $E000           // save current HP
1677+ E32C             >
1677+ E32C             >Current_HP      defl  $ - $E000             // used to set HP once!
1677+ E32C             >
1677+ E32C             >//              ______________________________________________________________________
1677+ E32C             >//              Dictionary part
1677+ E32C             >
1677+ E32C             >                org     Dict_Ptr
1677+ 693B             >
1677+ 693B 2A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1677+ 693D             >
1677+ 693D             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1677+ 693D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1677+ 693D ~           >
1677+ 693D ~           >
1677+ 693D             >                endif           ; ok        // for other definitions it "points" the correct handler
1677+ 693D             >                // Use of "; ok" to suppress "warning[fwdref]"
1677+ 693D             >
1677+ 693D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1678+ 693D D9                           exx
1679+ 693E E1                           pop     hl                  // < n3
1680+ 693F D1                           pop     de                  // < n2
1681+ 6940 E3                           ex      (sp),hl             // > n3 < n1
1682+ 6941 E5                           push    hl                  // > n1
1683+ 6942 D5                           push    de                  // copy n3 to TOS
1684+ 6943 D9                           exx
1685+ 6944                              next
1685+ 6944 DD E9       >                jp      (ix)
1686+ 6946
1687+ 6946              //  ______________________________________________________________________
1688+ 6946              //
1689+ 6946              // pick        n1 -- nx
1690+ 6946              // picks the nth element from TOS
1691+ 6946                              New_Def PICK, "PICK", is_code, is_normal
1691+ 6946             >
1691+ 6946             >Dict_Ptr        defl    $
1691+ 6946             >
1691+ 6946             >//              ______________________________________________________________________
1691+ 6946             >//              Heap part
1691+ 6946             >
1691+ 6946             >
1691+ 6946             >                org     (Heap_Ptr & $1FFF) + $E000
1691+ E32C             >
1691+ E32C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1691+ E32C             >Latest_Definition defl  Heap_Ptr
1691+ E32C             >
1691+ E32C             >                // dummy db directives used to calculate length of namec
1691+ E32C 50 49 43 4B >                db      "PICK"
1691+ E330             >len_NFA         defl    $ - temp_NFA
1691+ E330             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1691+ E32C             >
1691+ E32C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1691+ E32D 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1691+ E331             >                org     $-1                 // alter last byte of Name just above to set
1691+ E330 CB          >                db      {b $} | END_BIT     // msb as name end
1691+ E331             >
1691+ E331 23 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1691+ E333             >Prev_Ptr        defl    Heap_Ptr
1691+ E333             >
1691+ E333             >mirror_Ptr      defl    $
1691+ E333             >
1691+ E333 48 69       >                dw      Dict_Ptr + 2        // xt
1691+ E335             >Heap_Ptr        defl    $ - $E000           // save current HP
1691+ E335             >
1691+ E335             >Current_HP      defl  $ - $E000             // used to set HP once!
1691+ E335             >
1691+ E335             >//              ______________________________________________________________________
1691+ E335             >//              Dictionary part
1691+ E335             >
1691+ E335             >                org     Dict_Ptr
1691+ 6946             >
1691+ 6946 33 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1691+ 6948             >
1691+ 6948             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1691+ 6948 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1691+ 6948 ~           >
1691+ 6948 ~           >
1691+ 6948             >                endif           ; ok        // for other definitions it "points" the correct handler
1691+ 6948             >                // Use of "; ok" to suppress "warning[fwdref]"
1691+ 6948             >
1691+ 6948             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1692+ 6948 E1                           pop     hl                  // take TOS as index
1693+ 6949 29                           add     hl, hl              // as cells
1694+ 694A 39                           add     hl, sp              // from Stack Pointer
1695+ 694B 7E                           ld      a, (hl)             // replace TOS
1696+ 694C 23                           inc     hl
1697+ 694D 66                           ld      h, (hl)
1698+ 694E 6F                           ld      l, a
1699+ 694F E5                           push    hl
1700+ 6950                              next
1700+ 6950 DD E9       >                jp      (ix)
1701+ 6952
1702+ 6952
1703+ 6952              //  ______________________________________________________________________
1704+ 6952              //
1705+ 6952              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1706+ 6952              // picks the nth element from TOS
1707+ 6952              //              New_Def ROLL, "ROLL", is_code, is_normal
1708+ 6952              //              exx                     // we need all registers free
1709+ 6952              //              pop     hl              // number of cells to roll
1710+ 6952              //              ld      a, h
1711+ 6952              //              or       l
1712+ 6952              //              jr      z, Roll_Zero
1713+ 6952              //                  add     hl, hl              // number of bytes to move
1714+ 6952              //                  ld      b, h
1715+ 6952              //                  ld      c, l
1716+ 6952              //                  add     hl, sp          // address of n1
1717+ 6952              //                  ld      a, (hl)         // take n1 into a and a,
1718+ 6952              //                  inc     hl
1719+ 6952              //                  ex      af, af'
1720+ 6952              //                  ld      a, (hl)         // take n1 into a and a,
1721+ 6952              //                  ld      d, h
1722+ 6952              //                  ld      e, l
1723+ 6952              //                  dec     hl
1724+ 6952              //                  dec     hl
1725+ 6952              //                  lddr
1726+ 6952              //                  ex      de, hl
1727+ 6952              //                  ld      (hl), a
1728+ 6952              //                  dec     hl
1729+ 6952              //                  ex      af, af'
1730+ 6952              //                  ld      (hl), a
1731+ 6952              //Roll_Zero:
1732+ 6952              //              exx
1733+ 6952              //              next
1734+ 6952
1735+ 6952
1736+ 6952              //  ______________________________________________________________________
1737+ 6952              //
1738+ 6952              // 2over        d1 d2 -- d1 d2 d1
1739+ 6952              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1740+ 6952              // copy the second double of stack and put on top.
1741+ 6952              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1742+ 6952              //              exx
1743+ 6952              //              ld      hl, 7
1744+ 6952              //              add     hl, sp
1745+ 6952              //              ld      d, (hl)
1746+ 6952              //              dec     hl
1747+ 6952              //              ld      e, (hl)             // d1-L
1748+ 6952              //              push    de
1749+ 6952              //              dec     hl
1750+ 6952              //              ld      d, (hl)
1751+ 6952              //              dec     hl
1752+ 6952              //              ld      e, (hl)             // d1-H
1753+ 6952              //              push    de
1754+ 6952              //              exx
1755+ 6952              //              next
1756+ 6952
1757+ 6952              //  ______________________________________________________________________
1758+ 6952              //
1759+ 6952              // 2drop        d --
1760+ 6952              //              n1 n2 --
1761+ 6952              // drops the top double from stack
1762+ 6952                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1762+ 6952             >
1762+ 6952             >Dict_Ptr        defl    $
1762+ 6952             >
1762+ 6952             >//              ______________________________________________________________________
1762+ 6952             >//              Heap part
1762+ 6952             >
1762+ 6952             >
1762+ 6952             >                org     (Heap_Ptr & $1FFF) + $E000
1762+ E335             >
1762+ E335             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1762+ E335             >Latest_Definition defl  Heap_Ptr
1762+ E335             >
1762+ E335             >                // dummy db directives used to calculate length of namec
1762+ E335 32 44 52 4F >                db      "2DROP"
1762+ E339 50          >
1762+ E33A             >len_NFA         defl    $ - temp_NFA
1762+ E33A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1762+ E335             >
1762+ E335 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1762+ E336 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1762+ E33A 50          >
1762+ E33B             >                org     $-1                 // alter last byte of Name just above to set
1762+ E33A D0          >                db      {b $} | END_BIT     // msb as name end
1762+ E33B             >
1762+ E33B 2C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1762+ E33D             >Prev_Ptr        defl    Heap_Ptr
1762+ E33D             >
1762+ E33D             >mirror_Ptr      defl    $
1762+ E33D             >
1762+ E33D 54 69       >                dw      Dict_Ptr + 2        // xt
1762+ E33F             >Heap_Ptr        defl    $ - $E000           // save current HP
1762+ E33F             >
1762+ E33F             >Current_HP      defl  $ - $E000             // used to set HP once!
1762+ E33F             >
1762+ E33F             >//              ______________________________________________________________________
1762+ E33F             >//              Dictionary part
1762+ E33F             >
1762+ E33F             >                org     Dict_Ptr
1762+ 6952             >
1762+ 6952 3D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1762+ 6954             >
1762+ 6954             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1762+ 6954 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1762+ 6954 ~           >
1762+ 6954 ~           >
1762+ 6954             >                endif           ; ok        // for other definitions it "points" the correct handler
1762+ 6954             >                // Use of "; ok" to suppress "warning[fwdref]"
1762+ 6954             >
1762+ 6954             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1763+ 6954 E1                           pop     hl
1764+ 6955 E1                           pop     hl
1765+ 6956                              next
1765+ 6956 DD E9       >                jp      (ix)
1766+ 6958
1767+ 6958              //  ______________________________________________________________________
1768+ 6958              //
1769+ 6958              // 2nip         d1 d2 -- d2
1770+ 6958              //              n1 n2 n3 n4 -- n3 n4
1771+ 6958              // drops the second double on the stack
1772+ 6958              //              New_Def TWO_NIP, 4, "2nip"
1773+ 6958              //              ...
1774+ 6958
1775+ 6958              //  ______________________________________________________________________
1776+ 6958              //
1777+ 6958              // 2tuck         d1 d2 -- d2 d1 d2
1778+ 6958              // copy the top element after the second.
1779+ 6958              //              New_Def TWO_TUCK, 5, "2tuck"
1780+ 6958              //              ...
1781+ 6958
1782+ 6958              //  ______________________________________________________________________
1783+ 6958              //
1784+ 6958              // 2swap         d1 d2 -- d2 d1
1785+ 6958              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1786+ 6958              // swaps the two doubles on top of stack
1787+ 6958                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1787+ 6958             >
1787+ 6958             >Dict_Ptr        defl    $
1787+ 6958             >
1787+ 6958             >//              ______________________________________________________________________
1787+ 6958             >//              Heap part
1787+ 6958             >
1787+ 6958             >
1787+ 6958             >                org     (Heap_Ptr & $1FFF) + $E000
1787+ E33F             >
1787+ E33F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1787+ E33F             >Latest_Definition defl  Heap_Ptr
1787+ E33F             >
1787+ E33F             >                // dummy db directives used to calculate length of namec
1787+ E33F 32 53 57 41 >                db      "2SWAP"
1787+ E343 50          >
1787+ E344             >len_NFA         defl    $ - temp_NFA
1787+ E344             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1787+ E33F             >
1787+ E33F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1787+ E340 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1787+ E344 50          >
1787+ E345             >                org     $-1                 // alter last byte of Name just above to set
1787+ E344 D0          >                db      {b $} | END_BIT     // msb as name end
1787+ E345             >
1787+ E345 35 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1787+ E347             >Prev_Ptr        defl    Heap_Ptr
1787+ E347             >
1787+ E347             >mirror_Ptr      defl    $
1787+ E347             >
1787+ E347 5A 69       >                dw      Dict_Ptr + 2        // xt
1787+ E349             >Heap_Ptr        defl    $ - $E000           // save current HP
1787+ E349             >
1787+ E349             >Current_HP      defl  $ - $E000             // used to set HP once!
1787+ E349             >
1787+ E349             >//              ______________________________________________________________________
1787+ E349             >//              Dictionary part
1787+ E349             >
1787+ E349             >                org     Dict_Ptr
1787+ 6958             >
1787+ 6958 47 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1787+ 695A             >
1787+ 695A             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1787+ 695A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1787+ 695A ~           >
1787+ 695A ~           >
1787+ 695A             >                endif           ; ok        // for other definitions it "points" the correct handler
1787+ 695A             >                // Use of "; ok" to suppress "warning[fwdref]"
1787+ 695A             >
1787+ 695A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1788+ 695A D9                           exx
1789+ 695B F1                           pop     af                  //   d2-H
1790+ 695C E1                           pop     hl                  // < d2-L
1791+ 695D D1                           pop     de                  // < d1-H
1792+ 695E E3                           ex      (sp), hl            // < d1-L > d2-L
1793+ 695F F5                           push    af                  // > d2-H
1794+ 6960 E5                           push    hl                  // > d1-L
1795+ 6961 D5                           push    de
1796+ 6962 D9                           exx
1797+ 6963                              next
1797+ 6963 DD E9       >                jp      (ix)
1798+ 6965
1799+ 6965              //  ______________________________________________________________________
1800+ 6965              //
1801+ 6965              // 2dup         d -- d d
1802+ 6965              //              n1 n2 -- n1 n2 n1 n2
1803+ 6965              // duplicates the top double of stack
1804+ 6965                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1804+ 6965             >
1804+ 6965             >Dict_Ptr        defl    $
1804+ 6965             >
1804+ 6965             >//              ______________________________________________________________________
1804+ 6965             >//              Heap part
1804+ 6965             >
1804+ 6965             >
1804+ 6965             >                org     (Heap_Ptr & $1FFF) + $E000
1804+ E349             >
1804+ E349             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1804+ E349             >Latest_Definition defl  Heap_Ptr
1804+ E349             >
1804+ E349             >                // dummy db directives used to calculate length of namec
1804+ E349 32 44 55 50 >                db      "2DUP"
1804+ E34D             >len_NFA         defl    $ - temp_NFA
1804+ E34D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1804+ E349             >
1804+ E349 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1804+ E34A 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1804+ E34E             >                org     $-1                 // alter last byte of Name just above to set
1804+ E34D D0          >                db      {b $} | END_BIT     // msb as name end
1804+ E34E             >
1804+ E34E 3F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1804+ E350             >Prev_Ptr        defl    Heap_Ptr
1804+ E350             >
1804+ E350             >mirror_Ptr      defl    $
1804+ E350             >
1804+ E350 67 69       >                dw      Dict_Ptr + 2        // xt
1804+ E352             >Heap_Ptr        defl    $ - $E000           // save current HP
1804+ E352             >
1804+ E352             >Current_HP      defl  $ - $E000             // used to set HP once!
1804+ E352             >
1804+ E352             >//              ______________________________________________________________________
1804+ E352             >//              Dictionary part
1804+ E352             >
1804+ E352             >                org     Dict_Ptr
1804+ 6965             >
1804+ 6965 50 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1804+ 6967             >
1804+ 6967             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1804+ 6967 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1804+ 6967 ~           >
1804+ 6967 ~           >
1804+ 6967             >                endif           ; ok        // for other definitions it "points" the correct handler
1804+ 6967             >                // Use of "; ok" to suppress "warning[fwdref]"
1804+ 6967             >
1804+ 6967             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1805+ 6967 E1                           pop     hl                  // < d-H
1806+ 6968 F1                           pop     af                  // < d-L
1807+ 6969 F5                           push    af                  // < d-L
1808+ 696A E5                           push    hl                  // > d-H
1809+ 696B F5                           push    af                  // > d-L
1810+ 696C E5                           push    hl                  // > d-H
1811+ 696D                              next
1811+ 696D DD E9       >                jp      (ix)
1812+ 696F
1813+ 696F              //  ______________________________________________________________________
1814+ 696F              //
1815+ 696F              // 2rot         d1 d2 d3 -- d2 d3 d1
1816+ 696F              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1817+ 696F              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1818+ 696F              // and putting it on top. The other two are shifted down one place.
1819+ 696F              //              New_Def TWO?ROT, 4, "2rot"
1820+ 696F              //              ...
1821+ 696F              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1822+ 696F              //
1823+ 696F              //      d3  |d2  |d1  |
1824+ 696F              //      h l |h l |h l |
1825+ 696F              // SP   LHED|LHED|LHED|
1826+ 696F              // SP  +0123|4567|89ab|
1827+ 696F              //              ld      hl, $000B
1828+ 696F              //              add     hl, sp
1829+ 696F              //              ld      d, (hl)
1830+ 696F              //              dec     hl
1831+ 696F              //              ld      e, (hl)
1832+ 696F              //              dec     hl
1833+ 696F              //              push    de
1834+ 696F              //              ld      d, (hl)
1835+ 696F              //              dec     hl
1836+ 696F              //              ld      e, (hl)
1837+ 696F              //              dec     hl
1838+ 696F              //              push    de
1839+ 696F
1840+ 696F              //      d1  |d3  |d2  |d1  |
1841+ 696F              //      h l |h l |h l |h l |
1842+ 696F              // SP   LHED|LHED|LHED|LHED|
1843+ 696F              // SP       +0123|4567|89ab|
1844+ 696F
1845+ 696F              //              ld      d, h
1846+ 696F              //              ld      e, l
1847+ 696F              //              inc     de
1848+ 696F              //              inc     de
1849+ 696F              //              inc     de
1850+ 696F              //              inc     de
1851+ 696F              //              push    bc
1852+ 696F              //              ld      bc, $000C
1853+ 696F              //              lddr
1854+ 696F              //              pop     bc
1855+ 696F              //              pop     de
1856+ 696F              //              pop     de
1857+ 696F              //
1858+ 696F              //              next
1859+ 696F
1860+ 696F
1861+ 696F              //  ______________________________________________________________________
1862+ 696F              //
1863+ 696F              // +!           n a --
1864+ 696F              // Sums to the content of address a the number n.
1865+ 696F              // It is the same of  a @ n + a !
1866+ 696F                              New_Def PLUSSTORE, "+!", is_code, is_normal
1866+ 696F             >
1866+ 696F             >Dict_Ptr        defl    $
1866+ 696F             >
1866+ 696F             >//              ______________________________________________________________________
1866+ 696F             >//              Heap part
1866+ 696F             >
1866+ 696F             >
1866+ 696F             >                org     (Heap_Ptr & $1FFF) + $E000
1866+ E352             >
1866+ E352             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1866+ E352             >Latest_Definition defl  Heap_Ptr
1866+ E352             >
1866+ E352             >                // dummy db directives used to calculate length of namec
1866+ E352 2B 21       >                db      "+!"
1866+ E354             >len_NFA         defl    $ - temp_NFA
1866+ E354             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1866+ E352             >
1866+ E352 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1866+ E353 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1866+ E355             >                org     $-1                 // alter last byte of Name just above to set
1866+ E354 A1          >                db      {b $} | END_BIT     // msb as name end
1866+ E355             >
1866+ E355 49 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1866+ E357             >Prev_Ptr        defl    Heap_Ptr
1866+ E357             >
1866+ E357             >mirror_Ptr      defl    $
1866+ E357             >
1866+ E357 71 69       >                dw      Dict_Ptr + 2        // xt
1866+ E359             >Heap_Ptr        defl    $ - $E000           // save current HP
1866+ E359             >
1866+ E359             >Current_HP      defl  $ - $E000             // used to set HP once!
1866+ E359             >
1866+ E359             >//              ______________________________________________________________________
1866+ E359             >//              Dictionary part
1866+ E359             >
1866+ E359             >                org     Dict_Ptr
1866+ 696F             >
1866+ 696F 57 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1866+ 6971             >
1866+ 6971             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1866+ 6971 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1866+ 6971 ~           >
1866+ 6971 ~           >
1866+ 6971             >                endif           ; ok        // for other definitions it "points" the correct handler
1866+ 6971             >                // Use of "; ok" to suppress "warning[fwdref]"
1866+ 6971             >
1866+ 6971             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1867+ 6971 D9                           exx
1868+ 6972 E1                           pop     hl                  // hl is the address
1869+ 6973 D1                           pop     de                  // de is the number
1870+ 6974 7E                           ld      a, (hl)
1871+ 6975 83                           add     e
1872+ 6976 77                           ld      (hl), a
1873+ 6977 23                           inc     hl
1874+ 6978 7E                           ld      a, (hl)
1875+ 6979 8A                           adc     d
1876+ 697A 77                           ld      (hl), a
1877+ 697B D9                           exx
1878+ 697C                              next
1878+ 697C DD E9       >                jp      (ix)
1879+ 697E
1880+ 697E              //  ______________________________________________________________________
1881+ 697E              //
1882+ 697E              // toggle       a n --
1883+ 697E              // Complements (xor) the byte at addrress  a  with the model n.
1884+ 697E                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1884+ 697E             >
1884+ 697E             >Dict_Ptr        defl    $
1884+ 697E             >
1884+ 697E             >//              ______________________________________________________________________
1884+ 697E             >//              Heap part
1884+ 697E             >
1884+ 697E             >
1884+ 697E             >                org     (Heap_Ptr & $1FFF) + $E000
1884+ E359             >
1884+ E359             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1884+ E359             >Latest_Definition defl  Heap_Ptr
1884+ E359             >
1884+ E359             >                // dummy db directives used to calculate length of namec
1884+ E359 54 4F 47 47 >                db      "TOGGLE"
1884+ E35D 4C 45       >
1884+ E35F             >len_NFA         defl    $ - temp_NFA
1884+ E35F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1884+ E359             >
1884+ E359 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1884+ E35A 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1884+ E35E 4C 45       >
1884+ E360             >                org     $-1                 // alter last byte of Name just above to set
1884+ E35F C5          >                db      {b $} | END_BIT     // msb as name end
1884+ E360             >
1884+ E360 52 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1884+ E362             >Prev_Ptr        defl    Heap_Ptr
1884+ E362             >
1884+ E362             >mirror_Ptr      defl    $
1884+ E362             >
1884+ E362 80 69       >                dw      Dict_Ptr + 2        // xt
1884+ E364             >Heap_Ptr        defl    $ - $E000           // save current HP
1884+ E364             >
1884+ E364             >Current_HP      defl  $ - $E000             // used to set HP once!
1884+ E364             >
1884+ E364             >//              ______________________________________________________________________
1884+ E364             >//              Dictionary part
1884+ E364             >
1884+ E364             >                org     Dict_Ptr
1884+ 697E             >
1884+ 697E 62 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1884+ 6980             >
1884+ 6980             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1884+ 6980 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1884+ 6980 ~           >
1884+ 6980 ~           >
1884+ 6980             >                endif           ; ok        // for other definitions it "points" the correct handler
1884+ 6980             >                // Use of "; ok" to suppress "warning[fwdref]"
1884+ 6980             >
1884+ 6980             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1885+ 6980 E1                           pop     hl
1886+ 6981 7D                           ld      a, l
1887+ 6982 E1                           pop     hl
1888+ 6983 AE                           xor     (hl)
1889+ 6984 77                           ld      (hl), a
1890+ 6985
1891+ 6985                              next
1891+ 6985 DD E9       >                jp      (ix)
1892+ 6987
1893+ 6987              //  ______________________________________________________________________
1894+ 6987              //
1895+ 6987              // @            a -- n
1896+ 6987              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1897+ 6987                              New_Def FETCH, "@", is_code, is_normal
1897+ 6987             >
1897+ 6987             >Dict_Ptr        defl    $
1897+ 6987             >
1897+ 6987             >//              ______________________________________________________________________
1897+ 6987             >//              Heap part
1897+ 6987             >
1897+ 6987             >
1897+ 6987             >                org     (Heap_Ptr & $1FFF) + $E000
1897+ E364             >
1897+ E364             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1897+ E364             >Latest_Definition defl  Heap_Ptr
1897+ E364             >
1897+ E364             >                // dummy db directives used to calculate length of namec
1897+ E364 40          >                db      "@"
1897+ E365             >len_NFA         defl    $ - temp_NFA
1897+ E365             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1897+ E364             >
1897+ E364 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1897+ E365 40          >                db      "@"               // name string in 7-bit ascii, but
1897+ E366             >                org     $-1                 // alter last byte of Name just above to set
1897+ E365 C0          >                db      {b $} | END_BIT     // msb as name end
1897+ E366             >
1897+ E366 59 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1897+ E368             >Prev_Ptr        defl    Heap_Ptr
1897+ E368             >
1897+ E368             >mirror_Ptr      defl    $
1897+ E368             >
1897+ E368 89 69       >                dw      Dict_Ptr + 2        // xt
1897+ E36A             >Heap_Ptr        defl    $ - $E000           // save current HP
1897+ E36A             >
1897+ E36A             >Current_HP      defl  $ - $E000             // used to set HP once!
1897+ E36A             >
1897+ E36A             >//              ______________________________________________________________________
1897+ E36A             >//              Dictionary part
1897+ E36A             >
1897+ E36A             >                org     Dict_Ptr
1897+ 6987             >
1897+ 6987 68 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1897+ 6989             >
1897+ 6989             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1897+ 6989 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1897+ 6989 ~           >
1897+ 6989 ~           >
1897+ 6989             >                endif           ; ok        // for other definitions it "points" the correct handler
1897+ 6989             >                // Use of "; ok" to suppress "warning[fwdref]"
1897+ 6989             >
1897+ 6989             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1898+ 6989 E1                           pop     hl
1899+ 698A 7E                           ld      a, (hl)             // low-byte
1900+ 698B 23                           inc     hl
1901+ 698C 66                           ld      h, (hl)             // high-byte
1902+ 698D 6F                           ld      l, a
1903+ 698E E5                           push    hl
1904+ 698F                              next
1904+ 698F DD E9       >                jp      (ix)
1905+ 6991
1906+ 6991              //  ______________________________________________________________________
1907+ 6991              //
1908+ 6991              // !            n a --
1909+ 6991              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1910+ 6991                              New_Def STORE, "!", is_code, is_normal
1910+ 6991             >
1910+ 6991             >Dict_Ptr        defl    $
1910+ 6991             >
1910+ 6991             >//              ______________________________________________________________________
1910+ 6991             >//              Heap part
1910+ 6991             >
1910+ 6991             >
1910+ 6991             >                org     (Heap_Ptr & $1FFF) + $E000
1910+ E36A             >
1910+ E36A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1910+ E36A             >Latest_Definition defl  Heap_Ptr
1910+ E36A             >
1910+ E36A             >                // dummy db directives used to calculate length of namec
1910+ E36A 21          >                db      "!"
1910+ E36B             >len_NFA         defl    $ - temp_NFA
1910+ E36B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1910+ E36A             >
1910+ E36A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1910+ E36B 21          >                db      "!"               // name string in 7-bit ascii, but
1910+ E36C             >                org     $-1                 // alter last byte of Name just above to set
1910+ E36B A1          >                db      {b $} | END_BIT     // msb as name end
1910+ E36C             >
1910+ E36C 64 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1910+ E36E             >Prev_Ptr        defl    Heap_Ptr
1910+ E36E             >
1910+ E36E             >mirror_Ptr      defl    $
1910+ E36E             >
1910+ E36E 93 69       >                dw      Dict_Ptr + 2        // xt
1910+ E370             >Heap_Ptr        defl    $ - $E000           // save current HP
1910+ E370             >
1910+ E370             >Current_HP      defl  $ - $E000             // used to set HP once!
1910+ E370             >
1910+ E370             >//              ______________________________________________________________________
1910+ E370             >//              Dictionary part
1910+ E370             >
1910+ E370             >                org     Dict_Ptr
1910+ 6991             >
1910+ 6991 6E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1910+ 6993             >
1910+ 6993             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1910+ 6993 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1910+ 6993 ~           >
1910+ 6993 ~           >
1910+ 6993             >                endif           ; ok        // for other definitions it "points" the correct handler
1910+ 6993             >                // Use of "; ok" to suppress "warning[fwdref]"
1910+ 6993             >
1910+ 6993             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1911+ 6993 D9                           exx
1912+ 6994 E1                           pop     hl                  // address
1913+ 6995 D1                           pop     de                  // < n
1914+ 6996 73                           ld      (hl), e             // low-byte
1915+ 6997 23                           inc     hl
1916+ 6998 72                           ld      (hl), d             // high-byte
1917+ 6999 D9                           exx
1918+ 699A                              next
1918+ 699A DD E9       >                jp      (ix)
1919+ 699C
1920+ 699C              //  ______________________________________________________________________
1921+ 699C              //
1922+ 699C              // c@           a -- c
1923+ 699C              // fetch a character n from address a
1924+ 699C                              New_Def CFETCH, "C@", is_code, is_normal
1924+ 699C             >
1924+ 699C             >Dict_Ptr        defl    $
1924+ 699C             >
1924+ 699C             >//              ______________________________________________________________________
1924+ 699C             >//              Heap part
1924+ 699C             >
1924+ 699C             >
1924+ 699C             >                org     (Heap_Ptr & $1FFF) + $E000
1924+ E370             >
1924+ E370             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1924+ E370             >Latest_Definition defl  Heap_Ptr
1924+ E370             >
1924+ E370             >                // dummy db directives used to calculate length of namec
1924+ E370 43 40       >                db      "C@"
1924+ E372             >len_NFA         defl    $ - temp_NFA
1924+ E372             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1924+ E370             >
1924+ E370 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1924+ E371 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1924+ E373             >                org     $-1                 // alter last byte of Name just above to set
1924+ E372 C0          >                db      {b $} | END_BIT     // msb as name end
1924+ E373             >
1924+ E373 6A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1924+ E375             >Prev_Ptr        defl    Heap_Ptr
1924+ E375             >
1924+ E375             >mirror_Ptr      defl    $
1924+ E375             >
1924+ E375 9E 69       >                dw      Dict_Ptr + 2        // xt
1924+ E377             >Heap_Ptr        defl    $ - $E000           // save current HP
1924+ E377             >
1924+ E377             >Current_HP      defl  $ - $E000             // used to set HP once!
1924+ E377             >
1924+ E377             >//              ______________________________________________________________________
1924+ E377             >//              Dictionary part
1924+ E377             >
1924+ E377             >                org     Dict_Ptr
1924+ 699C             >
1924+ 699C 75 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1924+ 699E             >
1924+ 699E             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1924+ 699E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1924+ 699E ~           >
1924+ 699E ~           >
1924+ 699E             >                endif           ; ok        // for other definitions it "points" the correct handler
1924+ 699E             >                // Use of "; ok" to suppress "warning[fwdref]"
1924+ 699E             >
1924+ 699E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1925+ 699E E1                           pop     hl
1926+ 699F 6E                           ld      l, (hl)             // low-byte
1927+ 69A0 26 00                        ld      h, 0
1928+ 69A2
1929+ 69A2                              psh1
1929+ 69A2 E5          >                push    hl
1929+ 69A3 DD E9       >                jp      (ix)
1930+ 69A5
1931+ 69A5              //  ______________________________________________________________________
1932+ 69A5              //
1933+ 69A5              // c!           c a --
1934+ 69A5              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1935+ 69A5                              New_Def CSTORE, "C!", is_code, is_normal
1935+ 69A5             >
1935+ 69A5             >Dict_Ptr        defl    $
1935+ 69A5             >
1935+ 69A5             >//              ______________________________________________________________________
1935+ 69A5             >//              Heap part
1935+ 69A5             >
1935+ 69A5             >
1935+ 69A5             >                org     (Heap_Ptr & $1FFF) + $E000
1935+ E377             >
1935+ E377             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1935+ E377             >Latest_Definition defl  Heap_Ptr
1935+ E377             >
1935+ E377             >                // dummy db directives used to calculate length of namec
1935+ E377 43 21       >                db      "C!"
1935+ E379             >len_NFA         defl    $ - temp_NFA
1935+ E379             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1935+ E377             >
1935+ E377 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1935+ E378 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1935+ E37A             >                org     $-1                 // alter last byte of Name just above to set
1935+ E379 A1          >                db      {b $} | END_BIT     // msb as name end
1935+ E37A             >
1935+ E37A 70 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1935+ E37C             >Prev_Ptr        defl    Heap_Ptr
1935+ E37C             >
1935+ E37C             >mirror_Ptr      defl    $
1935+ E37C             >
1935+ E37C A7 69       >                dw      Dict_Ptr + 2        // xt
1935+ E37E             >Heap_Ptr        defl    $ - $E000           // save current HP
1935+ E37E             >
1935+ E37E             >Current_HP      defl  $ - $E000             // used to set HP once!
1935+ E37E             >
1935+ E37E             >//              ______________________________________________________________________
1935+ E37E             >//              Dictionary part
1935+ E37E             >
1935+ E37E             >                org     Dict_Ptr
1935+ 69A5             >
1935+ 69A5 7C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1935+ 69A7             >
1935+ 69A7             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1935+ 69A7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1935+ 69A7 ~           >
1935+ 69A7 ~           >
1935+ 69A7             >                endif           ; ok        // for other definitions it "points" the correct handler
1935+ 69A7             >                // Use of "; ok" to suppress "warning[fwdref]"
1935+ 69A7             >
1935+ 69A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1936+ 69A7 D9                           exx
1937+ 69A8 E1                           pop     hl                  // < address
1938+ 69A9 D1                           pop     de
1939+ 69AA 73                           ld      (hl), e             // low-byte
1940+ 69AB D9                           exx
1941+ 69AC                              next
1941+ 69AC DD E9       >                jp      (ix)
1942+ 69AE
1943+ 69AE              //  ______________________________________________________________________
1944+ 69AE              //
1945+ 69AE              // 2@           a -- d
1946+ 69AE              // fetch a 32 bits number d from address a and leaves it on top of the
1947+ 69AE              // stack as two single numbers, high part as top of the stack.
1948+ 69AE              // A double number is normally kept in CPU registers as HLDE.
1949+ 69AE              // On stack a double number is treated as two single numbers
1950+ 69AE              // where BC is on the top of the stack and HL is the second from top,
1951+ 69AE              // so the sign of the number can be checked on top of stack
1952+ 69AE              // and in the stack memory it appears as LHED.
1953+ 69AE                              New_Def TWO_FETCH, "2@", is_code, is_normal
1953+ 69AE             >
1953+ 69AE             >Dict_Ptr        defl    $
1953+ 69AE             >
1953+ 69AE             >//              ______________________________________________________________________
1953+ 69AE             >//              Heap part
1953+ 69AE             >
1953+ 69AE             >
1953+ 69AE             >                org     (Heap_Ptr & $1FFF) + $E000
1953+ E37E             >
1953+ E37E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1953+ E37E             >Latest_Definition defl  Heap_Ptr
1953+ E37E             >
1953+ E37E             >                // dummy db directives used to calculate length of namec
1953+ E37E 32 40       >                db      "2@"
1953+ E380             >len_NFA         defl    $ - temp_NFA
1953+ E380             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1953+ E37E             >
1953+ E37E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1953+ E37F 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1953+ E381             >                org     $-1                 // alter last byte of Name just above to set
1953+ E380 C0          >                db      {b $} | END_BIT     // msb as name end
1953+ E381             >
1953+ E381 77 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1953+ E383             >Prev_Ptr        defl    Heap_Ptr
1953+ E383             >
1953+ E383             >mirror_Ptr      defl    $
1953+ E383             >
1953+ E383 B0 69       >                dw      Dict_Ptr + 2        // xt
1953+ E385             >Heap_Ptr        defl    $ - $E000           // save current HP
1953+ E385             >
1953+ E385             >Current_HP      defl  $ - $E000             // used to set HP once!
1953+ E385             >
1953+ E385             >//              ______________________________________________________________________
1953+ E385             >//              Dictionary part
1953+ E385             >
1953+ E385             >                org     Dict_Ptr
1953+ 69AE             >
1953+ 69AE 83 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1953+ 69B0             >
1953+ 69B0             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1953+ 69B0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1953+ 69B0 ~           >
1953+ 69B0 ~           >
1953+ 69B0             >                endif           ; ok        // for other definitions it "points" the correct handler
1953+ 69B0             >                // Use of "; ok" to suppress "warning[fwdref]"
1953+ 69B0             >
1953+ 69B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1954+ 69B0 D9                           exx
1955+ 69B1 E1                           pop     hl                  // address
1956+ 69B2 5E                           ld      e, (hl)             // low-byte
1957+ 69B3 23                           inc     hl
1958+ 69B4 56                           ld      d, (hl)             // high-byte
1959+ 69B5 23                           inc     hl
1960+ 69B6 7E                           ld      a, (hl)             // low-byte
1961+ 69B7 23                           inc     hl
1962+ 69B8 66                           ld      h, (hl)             // high-byte
1963+ 69B9 6F                           ld      l, a
1964+ 69BA E5                           push    hl
1965+ 69BB D5                           push    de
1966+ 69BC D9                           exx
1967+ 69BD                              next
1967+ 69BD DD E9       >                jp      (ix)
1968+ 69BF
1969+ 69BF              //  ______________________________________________________________________
1970+ 69BF              //
1971+ 69BF              // 2!           d a --
1972+ 69BF              // stores a 32 bits number d from address a and leaves it on top of the
1973+ 69BF              // stack as two single numbers, high part as top of the stack.
1974+ 69BF              // A double number is normally kept in CPU registers as HLDE.
1975+ 69BF              // On stack a double number is treated as two single numbers
1976+ 69BF              // where BC is on the top of the stack and HL is the second from top,
1977+ 69BF              // so the sign of the number can be checked on top of stack
1978+ 69BF              // and in the stack memory it appears as LHED.
1979+ 69BF                              New_Def TWO_STORE, "2!", is_code, is_normal
1979+ 69BF             >
1979+ 69BF             >Dict_Ptr        defl    $
1979+ 69BF             >
1979+ 69BF             >//              ______________________________________________________________________
1979+ 69BF             >//              Heap part
1979+ 69BF             >
1979+ 69BF             >
1979+ 69BF             >                org     (Heap_Ptr & $1FFF) + $E000
1979+ E385             >
1979+ E385             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1979+ E385             >Latest_Definition defl  Heap_Ptr
1979+ E385             >
1979+ E385             >                // dummy db directives used to calculate length of namec
1979+ E385 32 21       >                db      "2!"
1979+ E387             >len_NFA         defl    $ - temp_NFA
1979+ E387             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1979+ E385             >
1979+ E385 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1979+ E386 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1979+ E388             >                org     $-1                 // alter last byte of Name just above to set
1979+ E387 A1          >                db      {b $} | END_BIT     // msb as name end
1979+ E388             >
1979+ E388 7E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1979+ E38A             >Prev_Ptr        defl    Heap_Ptr
1979+ E38A             >
1979+ E38A             >mirror_Ptr      defl    $
1979+ E38A             >
1979+ E38A C1 69       >                dw      Dict_Ptr + 2        // xt
1979+ E38C             >Heap_Ptr        defl    $ - $E000           // save current HP
1979+ E38C             >
1979+ E38C             >Current_HP      defl  $ - $E000             // used to set HP once!
1979+ E38C             >
1979+ E38C             >//              ______________________________________________________________________
1979+ E38C             >//              Dictionary part
1979+ E38C             >
1979+ E38C             >                org     Dict_Ptr
1979+ 69BF             >
1979+ 69BF 8A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1979+ 69C1             >
1979+ 69C1             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1979+ 69C1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1979+ 69C1 ~           >
1979+ 69C1 ~           >
1979+ 69C1             >                endif           ; ok        // for other definitions it "points" the correct handler
1979+ 69C1             >                // Use of "; ok" to suppress "warning[fwdref]"
1979+ 69C1             >
1979+ 69C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1980+ 69C1 D9                           exx
1981+ 69C2 E1                           pop     hl                  // address
1982+ 69C3 C1                           pop     bc                  // < high-part
1983+ 69C4 D1                           pop     de                  // < low-part > Instruction Pointer
1984+ 69C5 71                           ld      (hl), c
1985+ 69C6 23                           inc     hl
1986+ 69C7 70                           ld      (hl), b
1987+ 69C8 23                           inc     hl
1988+ 69C9 73                           ld      (hl), e
1989+ 69CA 23                           inc     hl
1990+ 69CB 72                           ld      (hl), d
1991+ 69CC D9                           exx
1992+ 69CD                              next
1992+ 69CD DD E9       >                jp      (ix)
1993+ 69CF
1994+ 69CF              //  ______________________________________________________________________
1995+ 69CF              //
1996+ 69CF              // p@           a -- c
1997+ 69CF              // Read one byte from port a and leave the result on top of stack
1998+ 69CF                              New_Def PFETCH, "P@", is_code, is_normal
1998+ 69CF             >
1998+ 69CF             >Dict_Ptr        defl    $
1998+ 69CF             >
1998+ 69CF             >//              ______________________________________________________________________
1998+ 69CF             >//              Heap part
1998+ 69CF             >
1998+ 69CF             >
1998+ 69CF             >                org     (Heap_Ptr & $1FFF) + $E000
1998+ E38C             >
1998+ E38C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1998+ E38C             >Latest_Definition defl  Heap_Ptr
1998+ E38C             >
1998+ E38C             >                // dummy db directives used to calculate length of namec
1998+ E38C 50 40       >                db      "P@"
1998+ E38E             >len_NFA         defl    $ - temp_NFA
1998+ E38E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1998+ E38C             >
1998+ E38C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1998+ E38D 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1998+ E38F             >                org     $-1                 // alter last byte of Name just above to set
1998+ E38E C0          >                db      {b $} | END_BIT     // msb as name end
1998+ E38F             >
1998+ E38F 85 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1998+ E391             >Prev_Ptr        defl    Heap_Ptr
1998+ E391             >
1998+ E391             >mirror_Ptr      defl    $
1998+ E391             >
1998+ E391 D1 69       >                dw      Dict_Ptr + 2        // xt
1998+ E393             >Heap_Ptr        defl    $ - $E000           // save current HP
1998+ E393             >
1998+ E393             >Current_HP      defl  $ - $E000             // used to set HP once!
1998+ E393             >
1998+ E393             >//              ______________________________________________________________________
1998+ E393             >//              Dictionary part
1998+ E393             >
1998+ E393             >                org     Dict_Ptr
1998+ 69CF             >
1998+ 69CF 91 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1998+ 69D1             >
1998+ 69D1             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1998+ 69D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1998+ 69D1 ~           >
1998+ 69D1 ~           >
1998+ 69D1             >                endif           ; ok        // for other definitions it "points" the correct handler
1998+ 69D1             >                // Use of "; ok" to suppress "warning[fwdref]"
1998+ 69D1             >
1998+ 69D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1999+ 69D1 D9                           exx
2000+ 69D2 C1                           pop     bc
2001+ 69D3 26 00                        ld      h, 0
2002+ 69D5 ED 68                        in      l, (c)
2003+ 69D7 E5                           push    hl
2004+ 69D8 D9                           exx
2005+ 69D9                              next
2005+ 69D9 DD E9       >                jp      (ix)
2006+ 69DB
2007+ 69DB              //  ______________________________________________________________________
2008+ 69DB              //
2009+ 69DB              // p!           c a --
2010+ 69DB              // Send one byte (top of stack) to port a
2011+ 69DB                              New_Def PSTORE, "P!", is_code, is_normal
2011+ 69DB             >
2011+ 69DB             >Dict_Ptr        defl    $
2011+ 69DB             >
2011+ 69DB             >//              ______________________________________________________________________
2011+ 69DB             >//              Heap part
2011+ 69DB             >
2011+ 69DB             >
2011+ 69DB             >                org     (Heap_Ptr & $1FFF) + $E000
2011+ E393             >
2011+ E393             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2011+ E393             >Latest_Definition defl  Heap_Ptr
2011+ E393             >
2011+ E393             >                // dummy db directives used to calculate length of namec
2011+ E393 50 21       >                db      "P!"
2011+ E395             >len_NFA         defl    $ - temp_NFA
2011+ E395             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2011+ E393             >
2011+ E393 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2011+ E394 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2011+ E396             >                org     $-1                 // alter last byte of Name just above to set
2011+ E395 A1          >                db      {b $} | END_BIT     // msb as name end
2011+ E396             >
2011+ E396 8C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2011+ E398             >Prev_Ptr        defl    Heap_Ptr
2011+ E398             >
2011+ E398             >mirror_Ptr      defl    $
2011+ E398             >
2011+ E398 DD 69       >                dw      Dict_Ptr + 2        // xt
2011+ E39A             >Heap_Ptr        defl    $ - $E000           // save current HP
2011+ E39A             >
2011+ E39A             >Current_HP      defl  $ - $E000             // used to set HP once!
2011+ E39A             >
2011+ E39A             >//              ______________________________________________________________________
2011+ E39A             >//              Dictionary part
2011+ E39A             >
2011+ E39A             >                org     Dict_Ptr
2011+ 69DB             >
2011+ 69DB 98 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2011+ 69DD             >
2011+ 69DD             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2011+ 69DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
2011+ 69DD ~           >
2011+ 69DD ~           >
2011+ 69DD             >                endif           ; ok        // for other definitions it "points" the correct handler
2011+ 69DD             >                // Use of "; ok" to suppress "warning[fwdref]"
2011+ 69DD             >
2011+ 69DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2012+ 69DD D9                           exx
2013+ 69DE C1                           pop     bc
2014+ 69DF E1                           pop     hl                  // < c
2015+ 69E0 ED 69                        out     (c), l              // low-byte
2016+ 69E2 D9                           exx
2017+ 69E3                              next
2017+ 69E3 DD E9       >                jp      (ix)
2018+ 69E5
2019+ 69E5
2020+ 69E5              //  ______________________________________________________________________
2021+ 69E5              //
2022+ 69E5              // 2*           n1 -- n2
2023+ 69E5              // doubles the number at top of stack
2024+ 69E5                              New_Def TWO_MUL, "2*", is_code, is_normal
2024+ 69E5             >
2024+ 69E5             >Dict_Ptr        defl    $
2024+ 69E5             >
2024+ 69E5             >//              ______________________________________________________________________
2024+ 69E5             >//              Heap part
2024+ 69E5             >
2024+ 69E5             >
2024+ 69E5             >                org     (Heap_Ptr & $1FFF) + $E000
2024+ E39A             >
2024+ E39A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2024+ E39A             >Latest_Definition defl  Heap_Ptr
2024+ E39A             >
2024+ E39A             >                // dummy db directives used to calculate length of namec
2024+ E39A 32 2A       >                db      "2*"
2024+ E39C             >len_NFA         defl    $ - temp_NFA
2024+ E39C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2024+ E39A             >
2024+ E39A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2024+ E39B 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2024+ E39D             >                org     $-1                 // alter last byte of Name just above to set
2024+ E39C AA          >                db      {b $} | END_BIT     // msb as name end
2024+ E39D             >
2024+ E39D 93 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2024+ E39F             >Prev_Ptr        defl    Heap_Ptr
2024+ E39F             >
2024+ E39F             >mirror_Ptr      defl    $
2024+ E39F             >
2024+ E39F E7 69       >                dw      Dict_Ptr + 2        // xt
2024+ E3A1             >Heap_Ptr        defl    $ - $E000           // save current HP
2024+ E3A1             >
2024+ E3A1             >Current_HP      defl  $ - $E000             // used to set HP once!
2024+ E3A1             >
2024+ E3A1             >//              ______________________________________________________________________
2024+ E3A1             >//              Dictionary part
2024+ E3A1             >
2024+ E3A1             >                org     Dict_Ptr
2024+ 69E5             >
2024+ 69E5 9F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2024+ 69E7             >
2024+ 69E7             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2024+ 69E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2024+ 69E7 ~           >
2024+ 69E7 ~           >
2024+ 69E7             >                endif           ; ok        // for other definitions it "points" the correct handler
2024+ 69E7             >                // Use of "; ok" to suppress "warning[fwdref]"
2024+ 69E7             >
2024+ 69E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2025+ 69E7              Two_Mul_Ptr:
2026+ 69E7 E1                           pop     hl
2027+ 69E8 29                           add     hl, hl
2028+ 69E9
2029+ 69E9                              psh1
2029+ 69E9 E5          >                push    hl
2029+ 69EA DD E9       >                jp      (ix)
2030+ 69EC
2031+ 69EC              //  ______________________________________________________________________
2032+ 69EC              //
2033+ 69EC              // 2/           n1 -- n2
2034+ 69EC              // halves the top of stack, sign is unchanged
2035+ 69EC                              New_Def TWO_DIV, "2/", is_code, is_normal
2035+ 69EC             >
2035+ 69EC             >Dict_Ptr        defl    $
2035+ 69EC             >
2035+ 69EC             >//              ______________________________________________________________________
2035+ 69EC             >//              Heap part
2035+ 69EC             >
2035+ 69EC             >
2035+ 69EC             >                org     (Heap_Ptr & $1FFF) + $E000
2035+ E3A1             >
2035+ E3A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2035+ E3A1             >Latest_Definition defl  Heap_Ptr
2035+ E3A1             >
2035+ E3A1             >                // dummy db directives used to calculate length of namec
2035+ E3A1 32 2F       >                db      "2/"
2035+ E3A3             >len_NFA         defl    $ - temp_NFA
2035+ E3A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2035+ E3A1             >
2035+ E3A1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2035+ E3A2 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2035+ E3A4             >                org     $-1                 // alter last byte of Name just above to set
2035+ E3A3 AF          >                db      {b $} | END_BIT     // msb as name end
2035+ E3A4             >
2035+ E3A4 9A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2035+ E3A6             >Prev_Ptr        defl    Heap_Ptr
2035+ E3A6             >
2035+ E3A6             >mirror_Ptr      defl    $
2035+ E3A6             >
2035+ E3A6 EE 69       >                dw      Dict_Ptr + 2        // xt
2035+ E3A8             >Heap_Ptr        defl    $ - $E000           // save current HP
2035+ E3A8             >
2035+ E3A8             >Current_HP      defl  $ - $E000             // used to set HP once!
2035+ E3A8             >
2035+ E3A8             >//              ______________________________________________________________________
2035+ E3A8             >//              Dictionary part
2035+ E3A8             >
2035+ E3A8             >                org     Dict_Ptr
2035+ 69EC             >
2035+ 69EC A6 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2035+ 69EE             >
2035+ 69EE             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2035+ 69EE ~           >                call    runcode ; ok        // for primitive definitions  actual code
2035+ 69EE ~           >
2035+ 69EE ~           >
2035+ 69EE             >                endif           ; ok        // for other definitions it "points" the correct handler
2035+ 69EE             >                // Use of "; ok" to suppress "warning[fwdref]"
2035+ 69EE             >
2035+ 69EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2036+ 69EE E1                           pop     hl
2037+ 69EF CB 2C                        sra     h
2038+ 69F1 CB 1D                        rr      l
2039+ 69F3
2040+ 69F3                              psh1
2040+ 69F3 E5          >                push    hl
2040+ 69F4 DD E9       >                jp      (ix)
2041+ 69F6
2042+ 69F6              //  ______________________________________________________________________
2043+ 69F6              //
2044+ 69F6              // lshift       n1 u -- n2
2045+ 69F6              // bit left shift of u bits
2046+ 69F6                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2046+ 69F6             >
2046+ 69F6             >Dict_Ptr        defl    $
2046+ 69F6             >
2046+ 69F6             >//              ______________________________________________________________________
2046+ 69F6             >//              Heap part
2046+ 69F6             >
2046+ 69F6             >
2046+ 69F6             >                org     (Heap_Ptr & $1FFF) + $E000
2046+ E3A8             >
2046+ E3A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2046+ E3A8             >Latest_Definition defl  Heap_Ptr
2046+ E3A8             >
2046+ E3A8             >                // dummy db directives used to calculate length of namec
2046+ E3A8 4C 53 48 49 >                db      "LSHIFT"
2046+ E3AC 46 54       >
2046+ E3AE             >len_NFA         defl    $ - temp_NFA
2046+ E3AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2046+ E3A8             >
2046+ E3A8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2046+ E3A9 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2046+ E3AD 46 54       >
2046+ E3AF             >                org     $-1                 // alter last byte of Name just above to set
2046+ E3AE D4          >                db      {b $} | END_BIT     // msb as name end
2046+ E3AF             >
2046+ E3AF A1 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2046+ E3B1             >Prev_Ptr        defl    Heap_Ptr
2046+ E3B1             >
2046+ E3B1             >mirror_Ptr      defl    $
2046+ E3B1             >
2046+ E3B1 F8 69       >                dw      Dict_Ptr + 2        // xt
2046+ E3B3             >Heap_Ptr        defl    $ - $E000           // save current HP
2046+ E3B3             >
2046+ E3B3             >Current_HP      defl  $ - $E000             // used to set HP once!
2046+ E3B3             >
2046+ E3B3             >//              ______________________________________________________________________
2046+ E3B3             >//              Dictionary part
2046+ E3B3             >
2046+ E3B3             >                org     Dict_Ptr
2046+ 69F6             >
2046+ 69F6 B1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2046+ 69F8             >
2046+ 69F8             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2046+ 69F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2046+ 69F8 ~           >
2046+ 69F8 ~           >
2046+ 69F8             >                endif           ; ok        // for other definitions it "points" the correct handler
2046+ 69F8             >                // Use of "; ok" to suppress "warning[fwdref]"
2046+ 69F8             >
2046+ 69F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2047+ 69F8 D9                           exx
2048+ 69F9 C1                           pop     bc
2049+ 69FA 41                           ld      b, c
2050+ 69FB D1                           pop     de
2051+ 69FC ED 28                        bsla    de, b
2052+ 69FE D5                           push    de
2053+ 69FF D9                           exx
2054+ 6A00                              next
2054+ 6A00 DD E9       >                jp      (ix)
2055+ 6A02
2056+ 6A02              //  ______________________________________________________________________
2057+ 6A02              //
2058+ 6A02              // rshift       n1 u -- n2
2059+ 6A02              // bit right shift of u bits
2060+ 6A02                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2060+ 6A02             >
2060+ 6A02             >Dict_Ptr        defl    $
2060+ 6A02             >
2060+ 6A02             >//              ______________________________________________________________________
2060+ 6A02             >//              Heap part
2060+ 6A02             >
2060+ 6A02             >
2060+ 6A02             >                org     (Heap_Ptr & $1FFF) + $E000
2060+ E3B3             >
2060+ E3B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2060+ E3B3             >Latest_Definition defl  Heap_Ptr
2060+ E3B3             >
2060+ E3B3             >                // dummy db directives used to calculate length of namec
2060+ E3B3 52 53 48 49 >                db      "RSHIFT"
2060+ E3B7 46 54       >
2060+ E3B9             >len_NFA         defl    $ - temp_NFA
2060+ E3B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2060+ E3B3             >
2060+ E3B3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2060+ E3B4 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2060+ E3B8 46 54       >
2060+ E3BA             >                org     $-1                 // alter last byte of Name just above to set
2060+ E3B9 D4          >                db      {b $} | END_BIT     // msb as name end
2060+ E3BA             >
2060+ E3BA A8 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2060+ E3BC             >Prev_Ptr        defl    Heap_Ptr
2060+ E3BC             >
2060+ E3BC             >mirror_Ptr      defl    $
2060+ E3BC             >
2060+ E3BC 04 6A       >                dw      Dict_Ptr + 2        // xt
2060+ E3BE             >Heap_Ptr        defl    $ - $E000           // save current HP
2060+ E3BE             >
2060+ E3BE             >Current_HP      defl  $ - $E000             // used to set HP once!
2060+ E3BE             >
2060+ E3BE             >//              ______________________________________________________________________
2060+ E3BE             >//              Dictionary part
2060+ E3BE             >
2060+ E3BE             >                org     Dict_Ptr
2060+ 6A02             >
2060+ 6A02 BC 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2060+ 6A04             >
2060+ 6A04             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2060+ 6A04 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2060+ 6A04 ~           >
2060+ 6A04 ~           >
2060+ 6A04             >                endif           ; ok        // for other definitions it "points" the correct handler
2060+ 6A04             >                // Use of "; ok" to suppress "warning[fwdref]"
2060+ 6A04             >
2060+ 6A04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2061+ 6A04 D9                           exx
2062+ 6A05 C1                           pop     bc
2063+ 6A06 41                           ld      b, c
2064+ 6A07 D1                           pop     de
2065+ 6A08 ED 2A                        bsrl    de, b
2066+ 6A0A D5                           push    de
2067+ 6A0B D9                           exx
2068+ 6A0C                              next
2068+ 6A0C DD E9       >                jp      (ix)
2069+ 6A0E
2070+ 6A0E              //  ______________________________________________________________________
2071+ 6A0E              //
2072+ 6A0E              // cells        n1 -- n2
2073+ 6A0E              // decrement by 2 top of stack
2074+ 6A0E                              New_Def CELLS, "CELLS", is_code, is_normal
2074+ 6A0E             >
2074+ 6A0E             >Dict_Ptr        defl    $
2074+ 6A0E             >
2074+ 6A0E             >//              ______________________________________________________________________
2074+ 6A0E             >//              Heap part
2074+ 6A0E             >
2074+ 6A0E             >
2074+ 6A0E             >                org     (Heap_Ptr & $1FFF) + $E000
2074+ E3BE             >
2074+ E3BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2074+ E3BE             >Latest_Definition defl  Heap_Ptr
2074+ E3BE             >
2074+ E3BE             >                // dummy db directives used to calculate length of namec
2074+ E3BE 43 45 4C 4C >                db      "CELLS"
2074+ E3C2 53          >
2074+ E3C3             >len_NFA         defl    $ - temp_NFA
2074+ E3C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2074+ E3BE             >
2074+ E3BE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2074+ E3BF 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2074+ E3C3 53          >
2074+ E3C4             >                org     $-1                 // alter last byte of Name just above to set
2074+ E3C3 D3          >                db      {b $} | END_BIT     // msb as name end
2074+ E3C4             >
2074+ E3C4 B3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2074+ E3C6             >Prev_Ptr        defl    Heap_Ptr
2074+ E3C6             >
2074+ E3C6             >mirror_Ptr      defl    $
2074+ E3C6             >
2074+ E3C6 10 6A       >                dw      Dict_Ptr + 2        // xt
2074+ E3C8             >Heap_Ptr        defl    $ - $E000           // save current HP
2074+ E3C8             >
2074+ E3C8             >Current_HP      defl  $ - $E000             // used to set HP once!
2074+ E3C8             >
2074+ E3C8             >//              ______________________________________________________________________
2074+ E3C8             >//              Dictionary part
2074+ E3C8             >
2074+ E3C8             >                org     Dict_Ptr
2074+ 6A0E             >
2074+ 6A0E C6 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2074+ 6A10             >
2074+ 6A10             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2074+ 6A10 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2074+ 6A10 ~           >
2074+ 6A10 ~           >
2074+ 6A10             >                endif           ; ok        // for other definitions it "points" the correct handler
2074+ 6A10             >                // Use of "; ok" to suppress "warning[fwdref]"
2074+ 6A10             >
2074+ 6A10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2075+ 6A10 C3 E7 69                     jp      Two_Mul_Ptr
2076+ 6A13
2077+ 6A13
2078+ 6A13              //  ______________________________________________________________________
2079+ 6A13
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
 121  6A13                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
   1+ 6A13              //  ______________________________________________________________________
   2+ 6A13              //
   3+ 6A13              //  L1.asm
   4+ 6A13              //
   5+ 6A13              //  Level-1 definitions and derivate
   6+ 6A13              //  ______________________________________________________________________
   7+ 6A13
   8+ 6A13              //  ______________________________________________________________________
   9+ 6A13              //
  10+ 6A13              // :            -- cccc     ( compile time )
  11+ 6A13              //              i*x -- j*x  ( run time )
  12+ 6A13              // Colon Definition
  13+ 6A13                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6A13             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6A13             >
  13+ 6A13             >Dict_Ptr        defl    $
  13+ 6A13             >
  13+ 6A13             >//              ______________________________________________________________________
  13+ 6A13             >//              Heap part
  13+ 6A13             >
  13+ 6A13             >
  13+ 6A13             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3C8             >
  13+ E3C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3C8             >Latest_Definition defl  Heap_Ptr
  13+ E3C8             >
  13+ E3C8             >                // dummy db directives used to calculate length of namec
  13+ E3C8 3A          >                db      ":"
  13+ E3C9             >len_NFA         defl    $ - temp_NFA
  13+ E3C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3C8             >
  13+ E3C8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3C9 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3CA             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3C9 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3CA             >
  13+ E3CA BE 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CC             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CC             >
  13+ E3CC             >mirror_Ptr      defl    $
  13+ E3CC             >
  13+ E3CC 15 6A       >                dw      Dict_Ptr + 2        // xt
  13+ E3CE             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3CE             >
  13+ E3CE             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3CE             >
  13+ E3CE             >//              ______________________________________________________________________
  13+ E3CE             >//              Dictionary part
  13+ E3CE             >
  13+ E3CE             >                org     Dict_Ptr
  13+ 6A13             >
  13+ 6A13 CC 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 6A15             >
  13+ 6A15             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6A15 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6A18             >
  13+ 6A18             >
  13+ 6A18             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6A18             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6A18             >
  13+ 6A18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6A18
  15+ 6A18 1D 6E                        dw      QEXEC                   // ?exec
  16+ 6A1A E8 6D                        dw      STORE_CSP               // !csp
  17+ 6A1C 46 6B 89 69                  dw      CURRENT, FETCH          // current @
  18+ 6A20 40 6B 93 69                  dw      CONTEXT, STORE          // context !
  19+ 6A24 F3 73                        dw      CREATE                  // create  ( forward )
  20+ 6A26 A1 6E                        dw      SMUDGE                  // dmudge
  21+ 6A28 92 6E                        dw      SQUARED_CLOSE           // ]
  22+ 6A2A DD 6E                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6A2C                                                              // ... immediate
  24+ 6A2C              Enter_Ptr:
  25+ 6A2C                              // via call coded in CFA
  26+ 6A2C EB                           ex      de, hl //**
  27+ 6A2D                              // *** ldhlrp
  28+ 6A2D 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 6A2E 70                           ld      (hl), b
  30+ 6A2F 2B                           dec     hl
  31+ 6A30 71                           ld      (hl), c
  32+ 6A31                              // *** ldrphl
  33+ 6A31 EB                           ex      de, hl //**
  34+ 6A32
  35+ 6A32
  36+ 6A32 C1                           pop     bc                  // points to PFA of "this" word
  37+ 6A33                              next
  37+ 6A33 DD E9       >                jp      (ix)
  38+ 6A35
  39+ 6A35              //  ______________________________________________________________________
  40+ 6A35              //
  41+ 6A35              // ;            --
  42+ 6A35              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 6A35                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 6A35             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 6A35             >
  43+ 6A35             >Dict_Ptr        defl    $
  43+ 6A35             >
  43+ 6A35             >//              ______________________________________________________________________
  43+ 6A35             >//              Heap part
  43+ 6A35             >
  43+ 6A35             >
  43+ 6A35             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3CE             >
  43+ E3CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3CE             >Latest_Definition defl  Heap_Ptr
  43+ E3CE             >
  43+ E3CE             >                // dummy db directives used to calculate length of namec
  43+ E3CE 3B          >                db      ";"
  43+ E3CF             >len_NFA         defl    $ - temp_NFA
  43+ E3CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3CE             >
  43+ E3CE C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3CF 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3D0             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3CF BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3D0             >
  43+ E3D0 C8 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D2             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D2             >
  43+ E3D2             >mirror_Ptr      defl    $
  43+ E3D2             >
  43+ E3D2 37 6A       >                dw      Dict_Ptr + 2        // xt
  43+ E3D4             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D4             >
  43+ E3D4             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D4             >
  43+ E3D4             >//              ______________________________________________________________________
  43+ E3D4             >//              Dictionary part
  43+ E3D4             >
  43+ E3D4             >                org     Dict_Ptr
  43+ 6A35             >
  43+ 6A35 D2 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 6A37             >
  43+ 6A37             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 6A37 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 6A3A             >
  43+ 6A3A             >
  43+ 6A3A             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 6A3A             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 6A3A             >
  43+ 6A3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 6A3A
  45+ 6A3A 3D 6E                        dw      QCSP                    // ?csp
  46+ 6A3C 65 6E 52 68                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 6A40 A1 6E                        dw      SMUDGE                  // smudge
  48+ 6A42 85 6E                        dw      SQUARED_OPEN            // [
  49+ 6A44 52 68                        dw      EXIT                    // ; immediate
  50+ 6A46
  51+ 6A46              //  ______________________________________________________________________
  52+ 6A46              //
  53+ 6A46              // noop         --
  54+ 6A46
  55+ 6A46                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 6A46             >
  55+ 6A46             >Dict_Ptr        defl    $
  55+ 6A46             >
  55+ 6A46             >//              ______________________________________________________________________
  55+ 6A46             >//              Heap part
  55+ 6A46             >
  55+ 6A46             >
  55+ 6A46             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D4             >
  55+ E3D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D4             >Latest_Definition defl  Heap_Ptr
  55+ E3D4             >
  55+ E3D4             >                // dummy db directives used to calculate length of namec
  55+ E3D4 4E 4F 4F 50 >                db      "NOOP"
  55+ E3D8             >len_NFA         defl    $ - temp_NFA
  55+ E3D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D4             >
  55+ E3D4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D5 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3D9             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3D8 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3D9             >
  55+ E3D9 CE 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DB             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DB             >
  55+ E3DB             >mirror_Ptr      defl    $
  55+ E3DB             >
  55+ E3DB 48 6A       >                dw      Dict_Ptr + 2        // xt
  55+ E3DD             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DD             >
  55+ E3DD             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DD             >
  55+ E3DD             >//              ______________________________________________________________________
  55+ E3DD             >//              Dictionary part
  55+ E3DD             >
  55+ E3DD             >                org     Dict_Ptr
  55+ 6A46             >
  55+ 6A46 DB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 6A48             >
  55+ 6A48             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 6A48 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 6A48 ~           >
  55+ 6A48 ~           >
  55+ 6A48             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 6A48             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 6A48             >
  55+ 6A48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 6A48                              next
  56+ 6A48 DD E9       >                jp      (ix)
  57+ 6A4A
  58+ 6A4A              //  ______________________________________________________________________
  59+ 6A4A              //
  60+ 6A4A              // constant     n -- cccc     ( compile time )
  61+ 6A4A              //              -- n          ( run time )
  62+ 6A4A              // Constant definition.
  63+ 6A4A                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 6A4A             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 6A4A             >
  63+ 6A4A             >Dict_Ptr        defl    $
  63+ 6A4A             >
  63+ 6A4A             >//              ______________________________________________________________________
  63+ 6A4A             >//              Heap part
  63+ 6A4A             >
  63+ 6A4A             >
  63+ 6A4A             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DD             >
  63+ E3DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DD             >Latest_Definition defl  Heap_Ptr
  63+ E3DD             >
  63+ E3DD             >                // dummy db directives used to calculate length of namec
  63+ E3DD 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E1 54 41 4E 54 >
  63+ E3E5             >len_NFA         defl    $ - temp_NFA
  63+ E3E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DD             >
  63+ E3DD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3DE 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E2 54 41 4E 54 >
  63+ E3E6             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E5 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E6             >
  63+ E3E6 D4 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3E8             >Prev_Ptr        defl    Heap_Ptr
  63+ E3E8             >
  63+ E3E8             >mirror_Ptr      defl    $
  63+ E3E8             >
  63+ E3E8 4C 6A       >                dw      Dict_Ptr + 2        // xt
  63+ E3EA             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3EA             >
  63+ E3EA             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3EA             >
  63+ E3EA             >//              ______________________________________________________________________
  63+ E3EA             >//              Dictionary part
  63+ E3EA             >
  63+ E3EA             >                org     Dict_Ptr
  63+ 6A4A             >
  63+ 6A4A E8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 6A4C             >
  63+ 6A4C             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 6A4C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 6A4F             >
  63+ 6A4F             >
  63+ 6A4F             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 6A4F             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 6A4F             >
  63+ 6A4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 6A4F F3 73                        dw      CREATE                  // create
  65+ 6A51 BC 6B                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 6A53 DD 6E                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 6A55              Constant_Ptr:
  68+ 6A55
  69+ 6A55
  70+ 6A55 E1                           pop     hl
  71+ 6A56
  72+ 6A56 7E                           ld      a, (hl)
  73+ 6A57 23                           inc     hl
  74+ 6A58 66                           ld      h, (hl)
  75+ 6A59 6F                           ld      l, a
  76+ 6A5A E5                           push    hl
  77+ 6A5B                              next
  77+ 6A5B DD E9       >                jp      (ix)
  78+ 6A5D
  79+ 6A5D              //  ______________________________________________________________________
  80+ 6A5D              //
  81+ 6A5D              // variable     n -- cccc     ( compile time )
  82+ 6A5D              //              -- a          ( run time )
  83+ 6A5D              // Variable definition, n is the initial value.
  84+ 6A5D                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 6A5D             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 6A5D             >
  84+ 6A5D             >Dict_Ptr        defl    $
  84+ 6A5D             >
  84+ 6A5D             >//              ______________________________________________________________________
  84+ 6A5D             >//              Heap part
  84+ 6A5D             >
  84+ 6A5D             >
  84+ 6A5D             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3EA             >
  84+ E3EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3EA             >Latest_Definition defl  Heap_Ptr
  84+ E3EA             >
  84+ E3EA             >                // dummy db directives used to calculate length of namec
  84+ E3EA 56 41 52 49 >                db      "VARIABLE"
  84+ E3EE 41 42 4C 45 >
  84+ E3F2             >len_NFA         defl    $ - temp_NFA
  84+ E3F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3EA             >
  84+ E3EA 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3EB 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3EF 41 42 4C 45 >
  84+ E3F3             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F2 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F3             >
  84+ E3F3 DD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F5             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F5             >
  84+ E3F5             >mirror_Ptr      defl    $
  84+ E3F5             >
  84+ E3F5 5F 6A       >                dw      Dict_Ptr + 2        // xt
  84+ E3F7             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F7             >
  84+ E3F7             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F7             >
  84+ E3F7             >//              ______________________________________________________________________
  84+ E3F7             >//              Dictionary part
  84+ E3F7             >
  84+ E3F7             >                org     Dict_Ptr
  84+ 6A5D             >
  84+ 6A5D F5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 6A5F             >
  84+ 6A5F             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 6A5F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 6A62             >
  84+ 6A62             >
  84+ 6A62             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 6A62             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 6A62             >
  84+ 6A62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 6A62
  86+ 6A62 81 6A                        dw      ZERO
  87+ 6A64 4C 6A                        dw      CONSTANT                // constant
  88+ 6A66 DD 6E                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 6A68              Variable_Ptr:
  90+ 6A68
  91+ 6A68
  92+ 6A68
  93+ 6A68
  94+ 6A68                              next
  94+ 6A68 DD E9       >                jp      (ix)
  95+ 6A6A
  96+ 6A6A              //  ______________________________________________________________________
  97+ 6A6A              //
  98+ 6A6A              // user         b -- cccc     ( compile time )
  99+ 6A6A              //              -- a          ( run time )
 100+ 6A6A              // User variable definition
 101+ 6A6A                              Colon_Def USER, "USER", is_normal
 101+ 6A6A             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 6A6A             >
 101+ 6A6A             >Dict_Ptr        defl    $
 101+ 6A6A             >
 101+ 6A6A             >//              ______________________________________________________________________
 101+ 6A6A             >//              Heap part
 101+ 6A6A             >
 101+ 6A6A             >
 101+ 6A6A             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F7             >
 101+ E3F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F7             >Latest_Definition defl  Heap_Ptr
 101+ E3F7             >
 101+ E3F7             >                // dummy db directives used to calculate length of namec
 101+ E3F7 55 53 45 52 >                db      "USER"
 101+ E3FB             >len_NFA         defl    $ - temp_NFA
 101+ E3FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F7             >
 101+ E3F7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3F8 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FC             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FB D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FC             >
 101+ E3FC EA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E3FE             >Prev_Ptr        defl    Heap_Ptr
 101+ E3FE             >
 101+ E3FE             >mirror_Ptr      defl    $
 101+ E3FE             >
 101+ E3FE 6C 6A       >                dw      Dict_Ptr + 2        // xt
 101+ E400             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E400             >
 101+ E400             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E400             >
 101+ E400             >//              ______________________________________________________________________
 101+ E400             >//              Dictionary part
 101+ E400             >
 101+ E400             >                org     Dict_Ptr
 101+ 6A6A             >
 101+ 6A6A FE 03       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 6A6C             >
 101+ 6A6C             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 6A6C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 6A6F             >
 101+ 6A6F             >
 101+ 6A6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 6A6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 6A6F             >
 101+ 6A6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 6A6F
 103+ 6A6F F3 73                        dw      CREATE                  // create
 104+ 6A71 CB 6B                        dw      CCOMMA                  // c,
 105+ 6A73 DD 6E                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 6A75
 107+ 6A75
 108+ 6A75              User_Ptr:
 109+ 6A75                              // via call coded in CFA
 110+ 6A75 E1                           pop     hl
 111+ 6A76
 112+ 6A76 7E                           ld      a, (hl)
 113+ 6A77 2A 94 63                     ld      hl, (USER_Pointer)
 114+ 6A7A ED 31                        add     hl, a
 115+ 6A7C E5                           push    hl
 116+ 6A7D                              next
 116+ 6A7D DD E9       >                jp      (ix)
 117+ 6A7F
 118+ 6A7F              //  ______________________________________________________________________
 119+ 6A7F              //
 120+ 6A7F                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 6A7F             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 6A7F             >
 120+ 6A7F             >Dict_Ptr        defl    $
 120+ 6A7F             >
 120+ 6A7F             >//              ______________________________________________________________________
 120+ 6A7F             >//              Heap part
 120+ 6A7F             >
 120+ 6A7F             >
 120+ 6A7F             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E400             >
 120+ E400             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E400             >Latest_Definition defl  Heap_Ptr
 120+ E400             >
 120+ E400             >                // dummy db directives used to calculate length of namec
 120+ E400 30          >                db      "0"
 120+ E401             >len_NFA         defl    $ - temp_NFA
 120+ E401             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E400             >
 120+ E400 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E401 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E402             >                org     $-1                 // alter last byte of Name just above to set
 120+ E401 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E402             >
 120+ E402 F7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E404             >Prev_Ptr        defl    Heap_Ptr
 120+ E404             >
 120+ E404             >mirror_Ptr      defl    $
 120+ E404             >
 120+ E404 81 6A       >                dw      Dict_Ptr + 2        // xt
 120+ E406             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E406             >
 120+ E406             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E406             >
 120+ E406             >//              ______________________________________________________________________
 120+ E406             >//              Dictionary part
 120+ E406             >
 120+ E406             >                org     Dict_Ptr
 120+ 6A7F             >
 120+ 6A7F 04 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 6A81             >
 120+ 6A81             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6A81 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6A84             >
 120+ 6A84             >
 120+ 6A84             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6A84             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6A84             >
 120+ 6A84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6A84 00 00       >                dw      0
 121+ 6A86                              Constant_Def ONE        ,   "1"     ,   1
 121+ 6A86             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 6A86             >
 121+ 6A86             >Dict_Ptr        defl    $
 121+ 6A86             >
 121+ 6A86             >//              ______________________________________________________________________
 121+ 6A86             >//              Heap part
 121+ 6A86             >
 121+ 6A86             >
 121+ 6A86             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E406             >
 121+ E406             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E406             >Latest_Definition defl  Heap_Ptr
 121+ E406             >
 121+ E406             >                // dummy db directives used to calculate length of namec
 121+ E406 31          >                db      "1"
 121+ E407             >len_NFA         defl    $ - temp_NFA
 121+ E407             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E406             >
 121+ E406 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E407 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E408             >                org     $-1                 // alter last byte of Name just above to set
 121+ E407 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E408             >
 121+ E408 00 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E40A             >Prev_Ptr        defl    Heap_Ptr
 121+ E40A             >
 121+ E40A             >mirror_Ptr      defl    $
 121+ E40A             >
 121+ E40A 88 6A       >                dw      Dict_Ptr + 2        // xt
 121+ E40C             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40C             >
 121+ E40C             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40C             >
 121+ E40C             >//              ______________________________________________________________________
 121+ E40C             >//              Dictionary part
 121+ E40C             >
 121+ E40C             >                org     Dict_Ptr
 121+ 6A86             >
 121+ 6A86 0A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 6A88             >
 121+ 6A88             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6A88 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6A8B             >
 121+ 6A8B             >
 121+ 6A8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6A8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6A8B             >
 121+ 6A8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6A8B 01 00       >                dw      1
 122+ 6A8D                              Constant_Def TWO        ,   "2"     ,   2
 122+ 6A8D             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 6A8D             >
 122+ 6A8D             >Dict_Ptr        defl    $
 122+ 6A8D             >
 122+ 6A8D             >//              ______________________________________________________________________
 122+ 6A8D             >//              Heap part
 122+ 6A8D             >
 122+ 6A8D             >
 122+ 6A8D             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40C             >
 122+ E40C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40C             >Latest_Definition defl  Heap_Ptr
 122+ E40C             >
 122+ E40C             >                // dummy db directives used to calculate length of namec
 122+ E40C 32          >                db      "2"
 122+ E40D             >len_NFA         defl    $ - temp_NFA
 122+ E40D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40C             >
 122+ E40C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40D 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E40E             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40D B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E40E             >
 122+ E40E 06 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E410             >Prev_Ptr        defl    Heap_Ptr
 122+ E410             >
 122+ E410             >mirror_Ptr      defl    $
 122+ E410             >
 122+ E410 8F 6A       >                dw      Dict_Ptr + 2        // xt
 122+ E412             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E412             >
 122+ E412             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E412             >
 122+ E412             >//              ______________________________________________________________________
 122+ E412             >//              Dictionary part
 122+ E412             >
 122+ E412             >                org     Dict_Ptr
 122+ 6A8D             >
 122+ 6A8D 10 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 6A8F             >
 122+ 6A8F             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6A8F CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6A92             >
 122+ 6A92             >
 122+ 6A92             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6A92             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6A92             >
 122+ 6A92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6A92 02 00       >                dw      2
 123+ 6A94                              Constant_Def THREE      ,   "3"     ,   3
 123+ 6A94             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 6A94             >
 123+ 6A94             >Dict_Ptr        defl    $
 123+ 6A94             >
 123+ 6A94             >//              ______________________________________________________________________
 123+ 6A94             >//              Heap part
 123+ 6A94             >
 123+ 6A94             >
 123+ 6A94             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E412             >
 123+ E412             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E412             >Latest_Definition defl  Heap_Ptr
 123+ E412             >
 123+ E412             >                // dummy db directives used to calculate length of namec
 123+ E412 33          >                db      "3"
 123+ E413             >len_NFA         defl    $ - temp_NFA
 123+ E413             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E412             >
 123+ E412 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E413 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E414             >                org     $-1                 // alter last byte of Name just above to set
 123+ E413 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E414             >
 123+ E414 0C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E416             >Prev_Ptr        defl    Heap_Ptr
 123+ E416             >
 123+ E416             >mirror_Ptr      defl    $
 123+ E416             >
 123+ E416 96 6A       >                dw      Dict_Ptr + 2        // xt
 123+ E418             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E418             >
 123+ E418             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E418             >
 123+ E418             >//              ______________________________________________________________________
 123+ E418             >//              Dictionary part
 123+ E418             >
 123+ E418             >                org     Dict_Ptr
 123+ 6A94             >
 123+ 6A94 16 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 6A96             >
 123+ 6A96             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6A96 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6A99             >
 123+ 6A99             >
 123+ 6A99             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6A99             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6A99             >
 123+ 6A99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6A99 03 00       >                dw      3
 124+ 6A9B                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 6A9B             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 6A9B             >
 124+ 6A9B             >Dict_Ptr        defl    $
 124+ 6A9B             >
 124+ 6A9B             >//              ______________________________________________________________________
 124+ 6A9B             >//              Heap part
 124+ 6A9B             >
 124+ 6A9B             >
 124+ 6A9B             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E418             >
 124+ E418             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E418             >Latest_Definition defl  Heap_Ptr
 124+ E418             >
 124+ E418             >                // dummy db directives used to calculate length of namec
 124+ E418 2D 31       >                db      "-1"
 124+ E41A             >len_NFA         defl    $ - temp_NFA
 124+ E41A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E418             >
 124+ E418 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E419 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41B             >                org     $-1                 // alter last byte of Name just above to set
 124+ E41A B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41B             >
 124+ E41B 12 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41D             >Prev_Ptr        defl    Heap_Ptr
 124+ E41D             >
 124+ E41D             >mirror_Ptr      defl    $
 124+ E41D             >
 124+ E41D 9D 6A       >                dw      Dict_Ptr + 2        // xt
 124+ E41F             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E41F             >
 124+ E41F             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E41F             >
 124+ E41F             >//              ______________________________________________________________________
 124+ E41F             >//              Dictionary part
 124+ E41F             >
 124+ E41F             >                org     Dict_Ptr
 124+ 6A9B             >
 124+ 6A9B 1D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 6A9D             >
 124+ 6A9D             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6A9D CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6AA0             >
 124+ 6AA0             >
 124+ 6AA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6AA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6AA0             >
 124+ 6AA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6AA0 FF FF       >                dw      -1
 125+ 6AA2                              Constant_Def BL         ,   "BL"    , $20
 125+ 6AA2             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 6AA2             >
 125+ 6AA2             >Dict_Ptr        defl    $
 125+ 6AA2             >
 125+ 6AA2             >//              ______________________________________________________________________
 125+ 6AA2             >//              Heap part
 125+ 6AA2             >
 125+ 6AA2             >
 125+ 6AA2             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E41F             >
 125+ E41F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E41F             >Latest_Definition defl  Heap_Ptr
 125+ E41F             >
 125+ E41F             >                // dummy db directives used to calculate length of namec
 125+ E41F 42 4C       >                db      "BL"
 125+ E421             >len_NFA         defl    $ - temp_NFA
 125+ E421             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E41F             >
 125+ E41F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E420 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E422             >                org     $-1                 // alter last byte of Name just above to set
 125+ E421 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E422             >
 125+ E422 18 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E424             >Prev_Ptr        defl    Heap_Ptr
 125+ E424             >
 125+ E424             >mirror_Ptr      defl    $
 125+ E424             >
 125+ E424 A4 6A       >                dw      Dict_Ptr + 2        // xt
 125+ E426             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E426             >
 125+ E426             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E426             >
 125+ E426             >//              ______________________________________________________________________
 125+ E426             >//              Dictionary part
 125+ E426             >
 125+ E426             >                org     Dict_Ptr
 125+ 6AA2             >
 125+ 6AA2 24 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 6AA4             >
 125+ 6AA4             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6AA4 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6AA7             >
 125+ 6AA7             >
 125+ 6AA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6AA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6AA7             >
 125+ 6AA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6AA7 20 00       >                dw      $20
 126+ 6AA9                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 6AA9             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 6AA9             >
 126+ 6AA9             >Dict_Ptr        defl    $
 126+ 6AA9             >
 126+ 6AA9             >//              ______________________________________________________________________
 126+ 6AA9             >//              Heap part
 126+ 6AA9             >
 126+ 6AA9             >
 126+ 6AA9             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E426             >
 126+ E426             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E426             >Latest_Definition defl  Heap_Ptr
 126+ E426             >
 126+ E426             >                // dummy db directives used to calculate length of namec
 126+ E426 43 2F 4C    >                db      "C/L"
 126+ E429             >len_NFA         defl    $ - temp_NFA
 126+ E429             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E426             >
 126+ E426 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E427 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E42A             >                org     $-1                 // alter last byte of Name just above to set
 126+ E429 CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E42A             >
 126+ E42A 1F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42C             >Prev_Ptr        defl    Heap_Ptr
 126+ E42C             >
 126+ E42C             >mirror_Ptr      defl    $
 126+ E42C             >
 126+ E42C AB 6A       >                dw      Dict_Ptr + 2        // xt
 126+ E42E             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E42E             >
 126+ E42E             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E42E             >
 126+ E42E             >//              ______________________________________________________________________
 126+ E42E             >//              Dictionary part
 126+ E42E             >
 126+ E42E             >                org     Dict_Ptr
 126+ 6AA9             >
 126+ 6AA9 2C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 6AAB             >
 126+ 6AAB             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6AAB CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6AAE             >
 126+ 6AAE             >
 126+ 6AAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6AAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6AAE             >
 126+ 6AAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6AAE 40 00       >                dw      64
 127+ 6AB0                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 6AB0             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 6AB0             >
 127+ 6AB0             >Dict_Ptr        defl    $
 127+ 6AB0             >
 127+ 6AB0             >//              ______________________________________________________________________
 127+ 6AB0             >//              Heap part
 127+ 6AB0             >
 127+ 6AB0             >
 127+ 6AB0             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E42E             >
 127+ E42E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E42E             >Latest_Definition defl  Heap_Ptr
 127+ E42E             >
 127+ E42E             >                // dummy db directives used to calculate length of namec
 127+ E42E 42 2F 42 55 >                db      "B/BUF"
 127+ E432 46          >
 127+ E433             >len_NFA         defl    $ - temp_NFA
 127+ E433             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E42E             >
 127+ E42E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E42F 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E433 46          >
 127+ E434             >                org     $-1                 // alter last byte of Name just above to set
 127+ E433 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E434             >
 127+ E434 26 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E436             >Prev_Ptr        defl    Heap_Ptr
 127+ E436             >
 127+ E436             >mirror_Ptr      defl    $
 127+ E436             >
 127+ E436 B2 6A       >                dw      Dict_Ptr + 2        // xt
 127+ E438             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E438             >
 127+ E438             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E438             >
 127+ E438             >//              ______________________________________________________________________
 127+ E438             >//              Dictionary part
 127+ E438             >
 127+ E438             >                org     Dict_Ptr
 127+ 6AB0             >
 127+ 6AB0 36 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 6AB2             >
 127+ 6AB2             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6AB2 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6AB5             >
 127+ 6AB5             >
 127+ 6AB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6AB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6AB5             >
 127+ 6AB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6AB5 00 02       >                dw      512
 128+ 6AB7                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 6AB7             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 6AB7             >
 128+ 6AB7             >Dict_Ptr        defl    $
 128+ 6AB7             >
 128+ 6AB7             >//              ______________________________________________________________________
 128+ 6AB7             >//              Heap part
 128+ 6AB7             >
 128+ 6AB7             >
 128+ 6AB7             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E438             >
 128+ E438             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E438             >Latest_Definition defl  Heap_Ptr
 128+ E438             >
 128+ E438             >                // dummy db directives used to calculate length of namec
 128+ E438 42 2F 53 43 >                db      "B/SCR"
 128+ E43C 52          >
 128+ E43D             >len_NFA         defl    $ - temp_NFA
 128+ E43D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E438             >
 128+ E438 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E439 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43D 52          >
 128+ E43E             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43D D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E43E             >
 128+ E43E 2E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E440             >Prev_Ptr        defl    Heap_Ptr
 128+ E440             >
 128+ E440             >mirror_Ptr      defl    $
 128+ E440             >
 128+ E440 B9 6A       >                dw      Dict_Ptr + 2        // xt
 128+ E442             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E442             >
 128+ E442             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E442             >
 128+ E442             >//              ______________________________________________________________________
 128+ E442             >//              Dictionary part
 128+ E442             >
 128+ E442             >                org     Dict_Ptr
 128+ 6AB7             >
 128+ 6AB7 40 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 6AB9             >
 128+ 6AB9             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6AB9 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6ABC             >
 128+ 6ABC             >
 128+ 6ABC             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6ABC             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6ABC             >
 128+ 6ABC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6ABC 02 00       >                dw      2
 129+ 6ABE                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 6ABE             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 6ABE             >
 129+ 6ABE             >Dict_Ptr        defl    $
 129+ 6ABE             >
 129+ 6ABE             >//              ______________________________________________________________________
 129+ 6ABE             >//              Heap part
 129+ 6ABE             >
 129+ 6ABE             >
 129+ 6ABE             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E442             >
 129+ E442             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E442             >Latest_Definition defl  Heap_Ptr
 129+ E442             >
 129+ E442             >                // dummy db directives used to calculate length of namec
 129+ E442 4C 2F 53 43 >                db      "L/SCR"
 129+ E446 52          >
 129+ E447             >len_NFA         defl    $ - temp_NFA
 129+ E447             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E442             >
 129+ E442 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E443 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E447 52          >
 129+ E448             >                org     $-1                 // alter last byte of Name just above to set
 129+ E447 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E448             >
 129+ E448 38 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E44A             >Prev_Ptr        defl    Heap_Ptr
 129+ E44A             >
 129+ E44A             >mirror_Ptr      defl    $
 129+ E44A             >
 129+ E44A C0 6A       >                dw      Dict_Ptr + 2        // xt
 129+ E44C             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44C             >
 129+ E44C             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44C             >
 129+ E44C             >//              ______________________________________________________________________
 129+ E44C             >//              Dictionary part
 129+ E44C             >
 129+ E44C             >                org     Dict_Ptr
 129+ 6ABE             >
 129+ 6ABE 4A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 6AC0             >
 129+ 6AC0             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 6AC0 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 6AC3             >
 129+ 6AC3             >
 129+ 6AC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 6AC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 6AC3             >
 129+ 6AC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 6AC3 10 00       >                dw      16
 130+ 6AC5
 131+ 6AC5              //  ______________________________________________________________________
 132+ 6AC5              //
 133+ 6AC5              // +origin         --
 134+ 6AC5              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 6AC5              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 6AC5              //              dw      PLUS                    // +
 137+ 6AC5              //              dw      EXIT                    // ;
 138+ 6AC5                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 6AC5             >
 138+ 6AC5             >Dict_Ptr        defl    $
 138+ 6AC5             >
 138+ 6AC5             >//              ______________________________________________________________________
 138+ 6AC5             >//              Heap part
 138+ 6AC5             >
 138+ 6AC5             >
 138+ 6AC5             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44C             >
 138+ E44C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44C             >Latest_Definition defl  Heap_Ptr
 138+ E44C             >
 138+ E44C             >                // dummy db directives used to calculate length of namec
 138+ E44C 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E450 47 49 4E    >
 138+ E453             >len_NFA         defl    $ - temp_NFA
 138+ E453             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44C             >
 138+ E44C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44D 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E451 47 49 4E    >
 138+ E454             >                org     $-1                 // alter last byte of Name just above to set
 138+ E453 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E454             >
 138+ E454 42 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E456             >Prev_Ptr        defl    Heap_Ptr
 138+ E456             >
 138+ E456             >mirror_Ptr      defl    $
 138+ E456             >
 138+ E456 C7 6A       >                dw      Dict_Ptr + 2        // xt
 138+ E458             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E458             >
 138+ E458             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E458             >
 138+ E458             >//              ______________________________________________________________________
 138+ E458             >//              Dictionary part
 138+ E458             >
 138+ E458             >                org     Dict_Ptr
 138+ 6AC5             >
 138+ 6AC5 56 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 6AC7             >
 138+ 6AC7             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6AC7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 6AC7 ~           >
 138+ 6AC7 ~           >
 138+ 6AC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 6AC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 6AC7             >
 138+ 6AC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6AC7 D9                           exx
 140+ 6AC8 E1                           pop     hl
 141+ 6AC9 11 66 63                     ld      de, Cold_origin
 142+ 6ACC 19                           add     hl, de
 143+ 6ACD E5                           push    hl
 144+ 6ACE D9                           exx
 145+ 6ACF                              next
 145+ 6ACF DD E9       >                jp      (ix)
 146+ 6AD1
 147+ 6AD1
 148+ 6AD1              //  ______________________________________________________________________
 149+ 6AD1              //
 150+ 6AD1                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 6AD1             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 6AD1             >
 150+ 6AD1             >Dict_Ptr        defl    $
 150+ 6AD1             >
 150+ 6AD1             >//              ______________________________________________________________________
 150+ 6AD1             >//              Heap part
 150+ 6AD1             >
 150+ 6AD1             >
 150+ 6AD1             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E458             >
 150+ E458             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E458             >Latest_Definition defl  Heap_Ptr
 150+ E458             >
 150+ E458             >                // dummy db directives used to calculate length of namec
 150+ E458 28 4E 45 58 >                db      "(NEXT)"
 150+ E45C 54 29       >
 150+ E45E             >len_NFA         defl    $ - temp_NFA
 150+ E45E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E458             >
 150+ E458 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E459 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45D 54 29       >
 150+ E45F             >                org     $-1                 // alter last byte of Name just above to set
 150+ E45E A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E45F             >
 150+ E45F 4C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E461             >Prev_Ptr        defl    Heap_Ptr
 150+ E461             >
 150+ E461             >mirror_Ptr      defl    $
 150+ E461             >
 150+ E461 D3 6A       >                dw      Dict_Ptr + 2        // xt
 150+ E463             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E463             >
 150+ E463             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E463             >
 150+ E463             >//              ______________________________________________________________________
 150+ E463             >//              Dictionary part
 150+ E463             >
 150+ E463             >                org     Dict_Ptr
 150+ 6AD1             >
 150+ 6AD1 61 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 6AD3             >
 150+ 6AD3             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6AD3 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 6AD6             >
 150+ 6AD6             >
 150+ 6AD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6AD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6AD6             >
 150+ 6AD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6AD6 9A 63       >                dw      Next_Ptr
 151+ 6AD8
 152+ 6AD8              //  ______________________________________________________________________
 153+ 6AD8              //
 154+ 6AD8
 155+ 6AD8                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 6AD8             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 6AD8             >
 155+ 6AD8             >Dict_Ptr        defl    $
 155+ 6AD8             >
 155+ 6AD8             >//              ______________________________________________________________________
 155+ 6AD8             >//              Heap part
 155+ 6AD8             >
 155+ 6AD8             >
 155+ 6AD8             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E463             >
 155+ E463             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E463             >Latest_Definition defl  Heap_Ptr
 155+ E463             >
 155+ E463             >                // dummy db directives used to calculate length of namec
 155+ E463 53 30       >                db      "S0"
 155+ E465             >len_NFA         defl    $ - temp_NFA
 155+ E465             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E463             >
 155+ E463 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E464 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E466             >                org     $-1                 // alter last byte of Name just above to set
 155+ E465 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E466             >
 155+ E466 58 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E468             >Prev_Ptr        defl    Heap_Ptr
 155+ E468             >
 155+ E468             >mirror_Ptr      defl    $
 155+ E468             >
 155+ E468 DA 6A       >                dw      Dict_Ptr + 2        // xt
 155+ E46A             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E46A             >
 155+ E46A             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E46A             >
 155+ E46A             >//              ______________________________________________________________________
 155+ E46A             >//              Dictionary part
 155+ E46A             >
 155+ E46A             >                org     Dict_Ptr
 155+ 6AD8             >
 155+ 6AD8 68 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 6ADA             >
 155+ 6ADA             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6ADA CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6ADD             >
 155+ 6ADD             >
 155+ 6ADD             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6ADD             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6ADD             >
 155+ 6ADD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6ADD 06          >                db      06
 156+ 6ADE                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 6ADE             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 6ADE             >
 156+ 6ADE             >Dict_Ptr        defl    $
 156+ 6ADE             >
 156+ 6ADE             >//              ______________________________________________________________________
 156+ 6ADE             >//              Heap part
 156+ 6ADE             >
 156+ 6ADE             >
 156+ 6ADE             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E46A             >
 156+ E46A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E46A             >Latest_Definition defl  Heap_Ptr
 156+ E46A             >
 156+ E46A             >                // dummy db directives used to calculate length of namec
 156+ E46A 52 30       >                db      "R0"
 156+ E46C             >len_NFA         defl    $ - temp_NFA
 156+ E46C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E46A             >
 156+ E46A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46B 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46D             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46C B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46D             >
 156+ E46D 63 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E46F             >Prev_Ptr        defl    Heap_Ptr
 156+ E46F             >
 156+ E46F             >mirror_Ptr      defl    $
 156+ E46F             >
 156+ E46F E0 6A       >                dw      Dict_Ptr + 2        // xt
 156+ E471             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E471             >
 156+ E471             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E471             >
 156+ E471             >//              ______________________________________________________________________
 156+ E471             >//              Dictionary part
 156+ E471             >
 156+ E471             >                org     Dict_Ptr
 156+ 6ADE             >
 156+ 6ADE 6F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 6AE0             >
 156+ 6AE0             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6AE0 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6AE3             >
 156+ 6AE3             >
 156+ 6AE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6AE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6AE3             >
 156+ 6AE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6AE3 08          >                db      08
 157+ 6AE4                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 6AE4             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 6AE4             >
 157+ 6AE4             >Dict_Ptr        defl    $
 157+ 6AE4             >
 157+ 6AE4             >//              ______________________________________________________________________
 157+ 6AE4             >//              Heap part
 157+ 6AE4             >
 157+ 6AE4             >
 157+ 6AE4             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E471             >
 157+ E471             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E471             >Latest_Definition defl  Heap_Ptr
 157+ E471             >
 157+ E471             >                // dummy db directives used to calculate length of namec
 157+ E471 54 49 42    >                db      "TIB"
 157+ E474             >len_NFA         defl    $ - temp_NFA
 157+ E474             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E471             >
 157+ E471 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E472 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E475             >                org     $-1                 // alter last byte of Name just above to set
 157+ E474 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E475             >
 157+ E475 6A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E477             >Prev_Ptr        defl    Heap_Ptr
 157+ E477             >
 157+ E477             >mirror_Ptr      defl    $
 157+ E477             >
 157+ E477 E6 6A       >                dw      Dict_Ptr + 2        // xt
 157+ E479             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E479             >
 157+ E479             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E479             >
 157+ E479             >//              ______________________________________________________________________
 157+ E479             >//              Dictionary part
 157+ E479             >
 157+ E479             >                org     Dict_Ptr
 157+ 6AE4             >
 157+ 6AE4 77 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 6AE6             >
 157+ 6AE6             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6AE6 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6AE9             >
 157+ 6AE9             >
 157+ 6AE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6AE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6AE9             >
 157+ 6AE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6AE9 0A          >                db      10
 158+ 6AEA                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 6AEA             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 6AEA             >
 158+ 6AEA             >Dict_Ptr        defl    $
 158+ 6AEA             >
 158+ 6AEA             >//              ______________________________________________________________________
 158+ 6AEA             >//              Heap part
 158+ 6AEA             >
 158+ 6AEA             >
 158+ 6AEA             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E479             >
 158+ E479             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E479             >Latest_Definition defl  Heap_Ptr
 158+ E479             >
 158+ E479             >                // dummy db directives used to calculate length of namec
 158+ E479 57 49 44 54 >                db      "WIDTH"
 158+ E47D 48          >
 158+ E47E             >len_NFA         defl    $ - temp_NFA
 158+ E47E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E479             >
 158+ E479 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E47A 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E47E 48          >
 158+ E47F             >                org     $-1                 // alter last byte of Name just above to set
 158+ E47E C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E47F             >
 158+ E47F 71 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E481             >Prev_Ptr        defl    Heap_Ptr
 158+ E481             >
 158+ E481             >mirror_Ptr      defl    $
 158+ E481             >
 158+ E481 EC 6A       >                dw      Dict_Ptr + 2        // xt
 158+ E483             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E483             >
 158+ E483             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E483             >
 158+ E483             >//              ______________________________________________________________________
 158+ E483             >//              Dictionary part
 158+ E483             >
 158+ E483             >                org     Dict_Ptr
 158+ 6AEA             >
 158+ 6AEA 81 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 6AEC             >
 158+ 6AEC             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6AEC CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6AEF             >
 158+ 6AEF             >
 158+ 6AEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6AEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6AEF             >
 158+ 6AEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6AEF 0C          >                db      12
 159+ 6AF0                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 6AF0             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 6AF0             >
 159+ 6AF0             >Dict_Ptr        defl    $
 159+ 6AF0             >
 159+ 6AF0             >//              ______________________________________________________________________
 159+ 6AF0             >//              Heap part
 159+ 6AF0             >
 159+ 6AF0             >
 159+ 6AF0             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E483             >
 159+ E483             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E483             >Latest_Definition defl  Heap_Ptr
 159+ E483             >
 159+ E483             >                // dummy db directives used to calculate length of namec
 159+ E483 57 41 52 4E >                db      "WARNING"
 159+ E487 49 4E 47    >
 159+ E48A             >len_NFA         defl    $ - temp_NFA
 159+ E48A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E483             >
 159+ E483 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E484 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E488 49 4E 47    >
 159+ E48B             >                org     $-1                 // alter last byte of Name just above to set
 159+ E48A C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48B             >
 159+ E48B 79 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48D             >Prev_Ptr        defl    Heap_Ptr
 159+ E48D             >
 159+ E48D             >mirror_Ptr      defl    $
 159+ E48D             >
 159+ E48D F2 6A       >                dw      Dict_Ptr + 2        // xt
 159+ E48F             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E48F             >
 159+ E48F             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E48F             >
 159+ E48F             >//              ______________________________________________________________________
 159+ E48F             >//              Dictionary part
 159+ E48F             >
 159+ E48F             >                org     Dict_Ptr
 159+ 6AF0             >
 159+ 6AF0 8D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 6AF2             >
 159+ 6AF2             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6AF2 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6AF5             >
 159+ 6AF5             >
 159+ 6AF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6AF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6AF5             >
 159+ 6AF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6AF5 0E          >                db      14
 160+ 6AF6                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 6AF6             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 6AF6             >
 160+ 6AF6             >Dict_Ptr        defl    $
 160+ 6AF6             >
 160+ 6AF6             >//              ______________________________________________________________________
 160+ 6AF6             >//              Heap part
 160+ 6AF6             >
 160+ 6AF6             >
 160+ 6AF6             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E48F             >
 160+ E48F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E48F             >Latest_Definition defl  Heap_Ptr
 160+ E48F             >
 160+ E48F             >                // dummy db directives used to calculate length of namec
 160+ E48F 46 45 4E 43 >                db      "FENCE"
 160+ E493 45          >
 160+ E494             >len_NFA         defl    $ - temp_NFA
 160+ E494             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E48F             >
 160+ E48F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E490 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E494 45          >
 160+ E495             >                org     $-1                 // alter last byte of Name just above to set
 160+ E494 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E495             >
 160+ E495 83 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E497             >Prev_Ptr        defl    Heap_Ptr
 160+ E497             >
 160+ E497             >mirror_Ptr      defl    $
 160+ E497             >
 160+ E497 F8 6A       >                dw      Dict_Ptr + 2        // xt
 160+ E499             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E499             >
 160+ E499             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E499             >
 160+ E499             >//              ______________________________________________________________________
 160+ E499             >//              Dictionary part
 160+ E499             >
 160+ E499             >                org     Dict_Ptr
 160+ 6AF6             >
 160+ 6AF6 97 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 6AF8             >
 160+ 6AF8             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6AF8 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6AFB             >
 160+ 6AFB             >
 160+ 6AFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6AFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6AFB             >
 160+ 6AFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6AFB 10          >                db      16
 161+ 6AFC                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 6AFC             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 6AFC             >
 161+ 6AFC             >Dict_Ptr        defl    $
 161+ 6AFC             >
 161+ 6AFC             >//              ______________________________________________________________________
 161+ 6AFC             >//              Heap part
 161+ 6AFC             >
 161+ 6AFC             >
 161+ 6AFC             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E499             >
 161+ E499             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E499             >Latest_Definition defl  Heap_Ptr
 161+ E499             >
 161+ E499             >                // dummy db directives used to calculate length of namec
 161+ E499 44 50       >                db      "DP"
 161+ E49B             >len_NFA         defl    $ - temp_NFA
 161+ E49B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E499             >
 161+ E499 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E49A 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49C             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49B D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49C             >
 161+ E49C 8F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E49E             >Prev_Ptr        defl    Heap_Ptr
 161+ E49E             >
 161+ E49E             >mirror_Ptr      defl    $
 161+ E49E             >
 161+ E49E FE 6A       >                dw      Dict_Ptr + 2        // xt
 161+ E4A0             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E4A0             >
 161+ E4A0             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E4A0             >
 161+ E4A0             >//              ______________________________________________________________________
 161+ E4A0             >//              Dictionary part
 161+ E4A0             >
 161+ E4A0             >                org     Dict_Ptr
 161+ 6AFC             >
 161+ 6AFC 9E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 6AFE             >
 161+ 6AFE             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6AFE CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6B01             >
 161+ 6B01             >
 161+ 6B01             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6B01             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6B01             >
 161+ 6B01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6B01 12          >                db      18
 162+ 6B02                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 6B02             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 6B02             >
 162+ 6B02             >Dict_Ptr        defl    $
 162+ 6B02             >
 162+ 6B02             >//              ______________________________________________________________________
 162+ 6B02             >//              Heap part
 162+ 6B02             >
 162+ 6B02             >
 162+ 6B02             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E4A0             >
 162+ E4A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E4A0             >Latest_Definition defl  Heap_Ptr
 162+ E4A0             >
 162+ E4A0             >                // dummy db directives used to calculate length of namec
 162+ E4A0 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A4 4C 49 4E 4B >
 162+ E4A8             >len_NFA         defl    $ - temp_NFA
 162+ E4A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E4A0             >
 162+ E4A0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A1 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A5 4C 49 4E 4B >
 162+ E4A9             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4A8 CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4A9             >
 162+ E4A9 99 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AB             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AB             >
 162+ E4AB             >mirror_Ptr      defl    $
 162+ E4AB             >
 162+ E4AB 04 6B       >                dw      Dict_Ptr + 2        // xt
 162+ E4AD             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AD             >
 162+ E4AD             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AD             >
 162+ E4AD             >//              ______________________________________________________________________
 162+ E4AD             >//              Dictionary part
 162+ E4AD             >
 162+ E4AD             >                org     Dict_Ptr
 162+ 6B02             >
 162+ 6B02 AB 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6B04             >
 162+ 6B04             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6B04 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6B07             >
 162+ 6B07             >
 162+ 6B07             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6B07             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6B07             >
 162+ 6B07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6B07 14          >                db      20
 163+ 6B08                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 6B08             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 6B08             >
 163+ 6B08             >Dict_Ptr        defl    $
 163+ 6B08             >
 163+ 6B08             >//              ______________________________________________________________________
 163+ 6B08             >//              Heap part
 163+ 6B08             >
 163+ 6B08             >
 163+ 6B08             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AD             >
 163+ E4AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AD             >Latest_Definition defl  Heap_Ptr
 163+ E4AD             >
 163+ E4AD             >                // dummy db directives used to calculate length of namec
 163+ E4AD 46 49 52 53 >                db      "FIRST"
 163+ E4B1 54          >
 163+ E4B2             >len_NFA         defl    $ - temp_NFA
 163+ E4B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AD             >
 163+ E4AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4AE 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B2 54          >
 163+ E4B3             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B2 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B3             >
 163+ E4B3 A0 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B5             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B5             >
 163+ E4B5             >mirror_Ptr      defl    $
 163+ E4B5             >
 163+ E4B5 0A 6B       >                dw      Dict_Ptr + 2        // xt
 163+ E4B7             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B7             >
 163+ E4B7             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B7             >
 163+ E4B7             >//              ______________________________________________________________________
 163+ E4B7             >//              Dictionary part
 163+ E4B7             >
 163+ E4B7             >                org     Dict_Ptr
 163+ 6B08             >
 163+ 6B08 B5 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 6B0A             >
 163+ 6B0A             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6B0A CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6B0D             >
 163+ 6B0D             >
 163+ 6B0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6B0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6B0D             >
 163+ 6B0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6B0D 16          >                db      22
 164+ 6B0E                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 6B0E             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 6B0E             >
 164+ 6B0E             >Dict_Ptr        defl    $
 164+ 6B0E             >
 164+ 6B0E             >//              ______________________________________________________________________
 164+ 6B0E             >//              Heap part
 164+ 6B0E             >
 164+ 6B0E             >
 164+ 6B0E             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B7             >
 164+ E4B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B7             >Latest_Definition defl  Heap_Ptr
 164+ E4B7             >
 164+ E4B7             >                // dummy db directives used to calculate length of namec
 164+ E4B7 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BB 54          >
 164+ E4BC             >len_NFA         defl    $ - temp_NFA
 164+ E4BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B7             >
 164+ E4B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4B8 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BC 54          >
 164+ E4BD             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BC D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BD             >
 164+ E4BD AD 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4BF             >Prev_Ptr        defl    Heap_Ptr
 164+ E4BF             >
 164+ E4BF             >mirror_Ptr      defl    $
 164+ E4BF             >
 164+ E4BF 10 6B       >                dw      Dict_Ptr + 2        // xt
 164+ E4C1             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C1             >
 164+ E4C1             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C1             >
 164+ E4C1             >//              ______________________________________________________________________
 164+ E4C1             >//              Dictionary part
 164+ E4C1             >
 164+ E4C1             >                org     Dict_Ptr
 164+ 6B0E             >
 164+ 6B0E BF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 6B10             >
 164+ 6B10             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6B10 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6B13             >
 164+ 6B13             >
 164+ 6B13             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6B13             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6B13             >
 164+ 6B13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6B13 18          >                db      24
 165+ 6B14                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 6B14             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 6B14             >
 165+ 6B14             >Dict_Ptr        defl    $
 165+ 6B14             >
 165+ 6B14             >//              ______________________________________________________________________
 165+ 6B14             >//              Heap part
 165+ 6B14             >
 165+ 6B14             >
 165+ 6B14             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C1             >
 165+ E4C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C1             >Latest_Definition defl  Heap_Ptr
 165+ E4C1             >
 165+ E4C1             >                // dummy db directives used to calculate length of namec
 165+ E4C1 48 50       >                db      "HP"
 165+ E4C3             >len_NFA         defl    $ - temp_NFA
 165+ E4C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C1             >
 165+ E4C1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C2 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C4             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C3 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C4             >
 165+ E4C4 B7 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C6             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C6             >
 165+ E4C6             >mirror_Ptr      defl    $
 165+ E4C6             >
 165+ E4C6 16 6B       >                dw      Dict_Ptr + 2        // xt
 165+ E4C8             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4C8             >
 165+ E4C8             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4C8             >
 165+ E4C8             >//              ______________________________________________________________________
 165+ E4C8             >//              Dictionary part
 165+ E4C8             >
 165+ E4C8             >                org     Dict_Ptr
 165+ 6B14             >
 165+ 6B14 C6 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 6B16             >
 165+ 6B16             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6B16 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6B19             >
 165+ 6B19             >
 165+ 6B19             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6B19             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6B19             >
 165+ 6B19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6B19 1A          >                db      26
 166+ 6B1A                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 6B1A             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 6B1A             >
 166+ 6B1A             >Dict_Ptr        defl    $
 166+ 6B1A             >
 166+ 6B1A             >//              ______________________________________________________________________
 166+ 6B1A             >//              Heap part
 166+ 6B1A             >
 166+ 6B1A             >
 166+ 6B1A             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4C8             >
 166+ E4C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4C8             >Latest_Definition defl  Heap_Ptr
 166+ E4C8             >
 166+ E4C8             >                // dummy db directives used to calculate length of namec
 166+ E4C8 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CC 45          >
 166+ E4CD             >len_NFA         defl    $ - temp_NFA
 166+ E4CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4C8             >
 166+ E4C8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4C9 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CD 45          >
 166+ E4CE             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CD C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4CE             >
 166+ E4CE C1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4D0             >Prev_Ptr        defl    Heap_Ptr
 166+ E4D0             >
 166+ E4D0             >mirror_Ptr      defl    $
 166+ E4D0             >
 166+ E4D0 1C 6B       >                dw      Dict_Ptr + 2        // xt
 166+ E4D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D2             >
 166+ E4D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D2             >
 166+ E4D2             >//              ______________________________________________________________________
 166+ E4D2             >//              Dictionary part
 166+ E4D2             >
 166+ E4D2             >                org     Dict_Ptr
 166+ 6B1A             >
 166+ 6B1A D0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 6B1C             >
 166+ 6B1C             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6B1C CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6B1F             >
 166+ 6B1F             >
 166+ 6B1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6B1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6B1F             >
 166+ 6B1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6B1F 1C          >                db      28
 167+ 6B20                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 6B20             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 6B20             >
 167+ 6B20             >Dict_Ptr        defl    $
 167+ 6B20             >
 167+ 6B20             >//              ______________________________________________________________________
 167+ 6B20             >//              Heap part
 167+ 6B20             >
 167+ 6B20             >
 167+ 6B20             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D2             >
 167+ E4D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D2             >Latest_Definition defl  Heap_Ptr
 167+ E4D2             >
 167+ E4D2             >                // dummy db directives used to calculate length of namec
 167+ E4D2 42 4C 4B    >                db      "BLK"
 167+ E4D5             >len_NFA         defl    $ - temp_NFA
 167+ E4D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D2             >
 167+ E4D2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D3 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D6             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D5 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D6             >
 167+ E4D6 C8 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4D8             >Prev_Ptr        defl    Heap_Ptr
 167+ E4D8             >
 167+ E4D8             >mirror_Ptr      defl    $
 167+ E4D8             >
 167+ E4D8 22 6B       >                dw      Dict_Ptr + 2        // xt
 167+ E4DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4DA             >
 167+ E4DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4DA             >
 167+ E4DA             >//              ______________________________________________________________________
 167+ E4DA             >//              Dictionary part
 167+ E4DA             >
 167+ E4DA             >                org     Dict_Ptr
 167+ 6B20             >
 167+ 6B20 D8 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 6B22             >
 167+ 6B22             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6B22 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6B25             >
 167+ 6B25             >
 167+ 6B25             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6B25             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6B25             >
 167+ 6B25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6B25 1E          >                db      30
 168+ 6B26                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 6B26             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 6B26             >
 168+ 6B26             >Dict_Ptr        defl    $
 168+ 6B26             >
 168+ 6B26             >//              ______________________________________________________________________
 168+ 6B26             >//              Heap part
 168+ 6B26             >
 168+ 6B26             >
 168+ 6B26             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4DA             >
 168+ E4DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4DA             >Latest_Definition defl  Heap_Ptr
 168+ E4DA             >
 168+ E4DA             >                // dummy db directives used to calculate length of namec
 168+ E4DA 3E 49 4E    >                db      ">IN"
 168+ E4DD             >len_NFA         defl    $ - temp_NFA
 168+ E4DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4DA             >
 168+ E4DA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DB 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4DE             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DD CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4DE             >
 168+ E4DE D2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4E0             >Prev_Ptr        defl    Heap_Ptr
 168+ E4E0             >
 168+ E4E0             >mirror_Ptr      defl    $
 168+ E4E0             >
 168+ E4E0 28 6B       >                dw      Dict_Ptr + 2        // xt
 168+ E4E2             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E2             >
 168+ E4E2             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E2             >
 168+ E4E2             >//              ______________________________________________________________________
 168+ E4E2             >//              Dictionary part
 168+ E4E2             >
 168+ E4E2             >                org     Dict_Ptr
 168+ 6B26             >
 168+ 6B26 E0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 6B28             >
 168+ 6B28             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6B28 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6B2B             >
 168+ 6B2B             >
 168+ 6B2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6B2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6B2B             >
 168+ 6B2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6B2B 20          >                db      32
 169+ 6B2C                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 6B2C             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 6B2C             >
 169+ 6B2C             >Dict_Ptr        defl    $
 169+ 6B2C             >
 169+ 6B2C             >//              ______________________________________________________________________
 169+ 6B2C             >//              Heap part
 169+ 6B2C             >
 169+ 6B2C             >
 169+ 6B2C             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E2             >
 169+ E4E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E2             >Latest_Definition defl  Heap_Ptr
 169+ E4E2             >
 169+ E4E2             >                // dummy db directives used to calculate length of namec
 169+ E4E2 4F 55 54    >                db      "OUT"
 169+ E4E5             >len_NFA         defl    $ - temp_NFA
 169+ E4E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E2             >
 169+ E4E2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E3 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E6             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E5 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E6             >
 169+ E4E6 DA 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4E8             >Prev_Ptr        defl    Heap_Ptr
 169+ E4E8             >
 169+ E4E8             >mirror_Ptr      defl    $
 169+ E4E8             >
 169+ E4E8 2E 6B       >                dw      Dict_Ptr + 2        // xt
 169+ E4EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4EA             >
 169+ E4EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4EA             >
 169+ E4EA             >//              ______________________________________________________________________
 169+ E4EA             >//              Dictionary part
 169+ E4EA             >
 169+ E4EA             >                org     Dict_Ptr
 169+ 6B2C             >
 169+ 6B2C E8 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 6B2E             >
 169+ 6B2E             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6B2E CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6B31             >
 169+ 6B31             >
 169+ 6B31             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6B31             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6B31             >
 169+ 6B31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6B31 22          >                db      34
 170+ 6B32                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 6B32             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 6B32             >
 170+ 6B32             >Dict_Ptr        defl    $
 170+ 6B32             >
 170+ 6B32             >//              ______________________________________________________________________
 170+ 6B32             >//              Heap part
 170+ 6B32             >
 170+ 6B32             >
 170+ 6B32             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4EA             >
 170+ E4EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4EA             >Latest_Definition defl  Heap_Ptr
 170+ E4EA             >
 170+ E4EA             >                // dummy db directives used to calculate length of namec
 170+ E4EA 53 43 52    >                db      "SCR"
 170+ E4ED             >len_NFA         defl    $ - temp_NFA
 170+ E4ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4EA             >
 170+ E4EA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4EB 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4EE             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4ED D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4EE             >
 170+ E4EE E2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4F0             >Prev_Ptr        defl    Heap_Ptr
 170+ E4F0             >
 170+ E4F0             >mirror_Ptr      defl    $
 170+ E4F0             >
 170+ E4F0 34 6B       >                dw      Dict_Ptr + 2        // xt
 170+ E4F2             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F2             >
 170+ E4F2             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F2             >
 170+ E4F2             >//              ______________________________________________________________________
 170+ E4F2             >//              Dictionary part
 170+ E4F2             >
 170+ E4F2             >                org     Dict_Ptr
 170+ 6B32             >
 170+ 6B32 F0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 6B34             >
 170+ 6B34             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6B34 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6B37             >
 170+ 6B37             >
 170+ 6B37             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6B37             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6B37             >
 170+ 6B37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6B37 24          >                db      36
 171+ 6B38                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 6B38             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 6B38             >
 171+ 6B38             >Dict_Ptr        defl    $
 171+ 6B38             >
 171+ 6B38             >//              ______________________________________________________________________
 171+ 6B38             >//              Heap part
 171+ 6B38             >
 171+ 6B38             >
 171+ 6B38             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F2             >
 171+ E4F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F2             >Latest_Definition defl  Heap_Ptr
 171+ E4F2             >
 171+ E4F2             >                // dummy db directives used to calculate length of namec
 171+ E4F2 4F 46 46 53 >                db      "OFFSET"
 171+ E4F6 45 54       >
 171+ E4F8             >len_NFA         defl    $ - temp_NFA
 171+ E4F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F2             >
 171+ E4F2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F3 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F7 45 54       >
 171+ E4F9             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4F8 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4F9             >
 171+ E4F9 EA 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FB             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FB             >
 171+ E4FB             >mirror_Ptr      defl    $
 171+ E4FB             >
 171+ E4FB 3A 6B       >                dw      Dict_Ptr + 2        // xt
 171+ E4FD             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FD             >
 171+ E4FD             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FD             >
 171+ E4FD             >//              ______________________________________________________________________
 171+ E4FD             >//              Dictionary part
 171+ E4FD             >
 171+ E4FD             >                org     Dict_Ptr
 171+ 6B38             >
 171+ 6B38 FB 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 6B3A             >
 171+ 6B3A             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6B3A CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6B3D             >
 171+ 6B3D             >
 171+ 6B3D             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6B3D             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6B3D             >
 171+ 6B3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6B3D 26          >                db      38
 172+ 6B3E                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 6B3E             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 6B3E             >
 172+ 6B3E             >Dict_Ptr        defl    $
 172+ 6B3E             >
 172+ 6B3E             >//              ______________________________________________________________________
 172+ 6B3E             >//              Heap part
 172+ 6B3E             >
 172+ 6B3E             >
 172+ 6B3E             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FD             >
 172+ E4FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FD             >Latest_Definition defl  Heap_Ptr
 172+ E4FD             >
 172+ E4FD             >                // dummy db directives used to calculate length of namec
 172+ E4FD 43 4F 4E 54 >                db      "CONTEXT"
 172+ E501 45 58 54    >
 172+ E504             >len_NFA         defl    $ - temp_NFA
 172+ E504             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FD             >
 172+ E4FD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E4FE 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E502 45 58 54    >
 172+ E505             >                org     $-1                 // alter last byte of Name just above to set
 172+ E504 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E505             >
 172+ E505 F2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E507             >Prev_Ptr        defl    Heap_Ptr
 172+ E507             >
 172+ E507             >mirror_Ptr      defl    $
 172+ E507             >
 172+ E507 40 6B       >                dw      Dict_Ptr + 2        // xt
 172+ E509             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E509             >
 172+ E509             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E509             >
 172+ E509             >//              ______________________________________________________________________
 172+ E509             >//              Dictionary part
 172+ E509             >
 172+ E509             >                org     Dict_Ptr
 172+ 6B3E             >
 172+ 6B3E 07 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 6B40             >
 172+ 6B40             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6B40 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6B43             >
 172+ 6B43             >
 172+ 6B43             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6B43             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6B43             >
 172+ 6B43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6B43 28          >                db      40
 173+ 6B44                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 6B44             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 6B44             >
 173+ 6B44             >Dict_Ptr        defl    $
 173+ 6B44             >
 173+ 6B44             >//              ______________________________________________________________________
 173+ 6B44             >//              Heap part
 173+ 6B44             >
 173+ 6B44             >
 173+ 6B44             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E509             >
 173+ E509             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E509             >Latest_Definition defl  Heap_Ptr
 173+ E509             >
 173+ E509             >                // dummy db directives used to calculate length of namec
 173+ E509 43 55 52 52 >                db      "CURRENT"
 173+ E50D 45 4E 54    >
 173+ E510             >len_NFA         defl    $ - temp_NFA
 173+ E510             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E509             >
 173+ E509 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E50A 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E50E 45 4E 54    >
 173+ E511             >                org     $-1                 // alter last byte of Name just above to set
 173+ E510 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E511             >
 173+ E511 FD 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E513             >Prev_Ptr        defl    Heap_Ptr
 173+ E513             >
 173+ E513             >mirror_Ptr      defl    $
 173+ E513             >
 173+ E513 46 6B       >                dw      Dict_Ptr + 2        // xt
 173+ E515             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E515             >
 173+ E515             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E515             >
 173+ E515             >//              ______________________________________________________________________
 173+ E515             >//              Dictionary part
 173+ E515             >
 173+ E515             >                org     Dict_Ptr
 173+ 6B44             >
 173+ 6B44 13 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 6B46             >
 173+ 6B46             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6B46 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6B49             >
 173+ 6B49             >
 173+ 6B49             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6B49             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6B49             >
 173+ 6B49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6B49 2A          >                db      42
 174+ 6B4A                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 6B4A             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 6B4A             >
 174+ 6B4A             >Dict_Ptr        defl    $
 174+ 6B4A             >
 174+ 6B4A             >//              ______________________________________________________________________
 174+ 6B4A             >//              Heap part
 174+ 6B4A             >
 174+ 6B4A             >
 174+ 6B4A             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E515             >
 174+ E515             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E515             >Latest_Definition defl  Heap_Ptr
 174+ E515             >
 174+ E515             >                // dummy db directives used to calculate length of namec
 174+ E515 53 54 41 54 >                db      "STATE"
 174+ E519 45          >
 174+ E51A             >len_NFA         defl    $ - temp_NFA
 174+ E51A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E515             >
 174+ E515 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E516 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E51A 45          >
 174+ E51B             >                org     $-1                 // alter last byte of Name just above to set
 174+ E51A C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51B             >
 174+ E51B 09 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51D             >Prev_Ptr        defl    Heap_Ptr
 174+ E51D             >
 174+ E51D             >mirror_Ptr      defl    $
 174+ E51D             >
 174+ E51D 4C 6B       >                dw      Dict_Ptr + 2        // xt
 174+ E51F             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E51F             >
 174+ E51F             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E51F             >
 174+ E51F             >//              ______________________________________________________________________
 174+ E51F             >//              Dictionary part
 174+ E51F             >
 174+ E51F             >                org     Dict_Ptr
 174+ 6B4A             >
 174+ 6B4A 1D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 6B4C             >
 174+ 6B4C             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6B4C CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6B4F             >
 174+ 6B4F             >
 174+ 6B4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6B4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6B4F             >
 174+ 6B4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6B4F 2C          >                db      44
 175+ 6B50                              User_Def BASE       , "BASE"      , 46 //
 175+ 6B50             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 6B50             >
 175+ 6B50             >Dict_Ptr        defl    $
 175+ 6B50             >
 175+ 6B50             >//              ______________________________________________________________________
 175+ 6B50             >//              Heap part
 175+ 6B50             >
 175+ 6B50             >
 175+ 6B50             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E51F             >
 175+ E51F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E51F             >Latest_Definition defl  Heap_Ptr
 175+ E51F             >
 175+ E51F             >                // dummy db directives used to calculate length of namec
 175+ E51F 42 41 53 45 >                db      "BASE"
 175+ E523             >len_NFA         defl    $ - temp_NFA
 175+ E523             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E51F             >
 175+ E51F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E520 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E524             >                org     $-1                 // alter last byte of Name just above to set
 175+ E523 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E524             >
 175+ E524 15 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E526             >Prev_Ptr        defl    Heap_Ptr
 175+ E526             >
 175+ E526             >mirror_Ptr      defl    $
 175+ E526             >
 175+ E526 52 6B       >                dw      Dict_Ptr + 2        // xt
 175+ E528             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E528             >
 175+ E528             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E528             >
 175+ E528             >//              ______________________________________________________________________
 175+ E528             >//              Dictionary part
 175+ E528             >
 175+ E528             >                org     Dict_Ptr
 175+ 6B50             >
 175+ 6B50 26 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 6B52             >
 175+ 6B52             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6B52 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6B55             >
 175+ 6B55             >
 175+ 6B55             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6B55             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6B55             >
 175+ 6B55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6B55 2E          >                db      46
 176+ 6B56                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 6B56             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 6B56             >
 176+ 6B56             >Dict_Ptr        defl    $
 176+ 6B56             >
 176+ 6B56             >//              ______________________________________________________________________
 176+ 6B56             >//              Heap part
 176+ 6B56             >
 176+ 6B56             >
 176+ 6B56             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E528             >
 176+ E528             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E528             >Latest_Definition defl  Heap_Ptr
 176+ E528             >
 176+ E528             >                // dummy db directives used to calculate length of namec
 176+ E528 44 50 4C    >                db      "DPL"
 176+ E52B             >len_NFA         defl    $ - temp_NFA
 176+ E52B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E528             >
 176+ E528 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E529 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52C             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52B CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52C             >
 176+ E52C 1F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E52E             >Prev_Ptr        defl    Heap_Ptr
 176+ E52E             >
 176+ E52E             >mirror_Ptr      defl    $
 176+ E52E             >
 176+ E52E 58 6B       >                dw      Dict_Ptr + 2        // xt
 176+ E530             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E530             >
 176+ E530             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E530             >
 176+ E530             >//              ______________________________________________________________________
 176+ E530             >//              Dictionary part
 176+ E530             >
 176+ E530             >                org     Dict_Ptr
 176+ 6B56             >
 176+ 6B56 2E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 6B58             >
 176+ 6B58             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6B58 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6B5B             >
 176+ 6B5B             >
 176+ 6B5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6B5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6B5B             >
 176+ 6B5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6B5B 30          >                db      48
 177+ 6B5C                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 6B5C             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 6B5C             >
 177+ 6B5C             >Dict_Ptr        defl    $
 177+ 6B5C             >
 177+ 6B5C             >//              ______________________________________________________________________
 177+ 6B5C             >//              Heap part
 177+ 6B5C             >
 177+ 6B5C             >
 177+ 6B5C             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E530             >
 177+ E530             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E530             >Latest_Definition defl  Heap_Ptr
 177+ E530             >
 177+ E530             >                // dummy db directives used to calculate length of namec
 177+ E530 46 4C 44    >                db      "FLD"
 177+ E533             >len_NFA         defl    $ - temp_NFA
 177+ E533             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E530             >
 177+ E530 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E531 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E534             >                org     $-1                 // alter last byte of Name just above to set
 177+ E533 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E534             >
 177+ E534 28 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E536             >Prev_Ptr        defl    Heap_Ptr
 177+ E536             >
 177+ E536             >mirror_Ptr      defl    $
 177+ E536             >
 177+ E536 5E 6B       >                dw      Dict_Ptr + 2        // xt
 177+ E538             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E538             >
 177+ E538             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E538             >
 177+ E538             >//              ______________________________________________________________________
 177+ E538             >//              Dictionary part
 177+ E538             >
 177+ E538             >                org     Dict_Ptr
 177+ 6B5C             >
 177+ 6B5C 36 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 6B5E             >
 177+ 6B5E             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6B5E CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6B61             >
 177+ 6B61             >
 177+ 6B61             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6B61             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6B61             >
 177+ 6B61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6B61 32          >                db      50
 178+ 6B62                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 6B62             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 6B62             >
 178+ 6B62             >Dict_Ptr        defl    $
 178+ 6B62             >
 178+ 6B62             >//              ______________________________________________________________________
 178+ 6B62             >//              Heap part
 178+ 6B62             >
 178+ 6B62             >
 178+ 6B62             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E538             >
 178+ E538             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E538             >Latest_Definition defl  Heap_Ptr
 178+ E538             >
 178+ E538             >                // dummy db directives used to calculate length of namec
 178+ E538 43 53 50    >                db      "CSP"
 178+ E53B             >len_NFA         defl    $ - temp_NFA
 178+ E53B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E538             >
 178+ E538 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E539 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53C             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53B D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53C             >
 178+ E53C 30 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E53E             >Prev_Ptr        defl    Heap_Ptr
 178+ E53E             >
 178+ E53E             >mirror_Ptr      defl    $
 178+ E53E             >
 178+ E53E 64 6B       >                dw      Dict_Ptr + 2        // xt
 178+ E540             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E540             >
 178+ E540             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E540             >
 178+ E540             >//              ______________________________________________________________________
 178+ E540             >//              Dictionary part
 178+ E540             >
 178+ E540             >                org     Dict_Ptr
 178+ 6B62             >
 178+ 6B62 3E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 6B64             >
 178+ 6B64             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6B64 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6B67             >
 178+ 6B67             >
 178+ 6B67             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6B67             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6B67             >
 178+ 6B67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6B67 34          >                db      52
 179+ 6B68                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 6B68             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 6B68             >
 179+ 6B68             >Dict_Ptr        defl    $
 179+ 6B68             >
 179+ 6B68             >//              ______________________________________________________________________
 179+ 6B68             >//              Heap part
 179+ 6B68             >
 179+ 6B68             >
 179+ 6B68             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E540             >
 179+ E540             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E540             >Latest_Definition defl  Heap_Ptr
 179+ E540             >
 179+ E540             >                // dummy db directives used to calculate length of namec
 179+ E540 52 23       >                db      "R#"
 179+ E542             >len_NFA         defl    $ - temp_NFA
 179+ E542             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E540             >
 179+ E540 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E541 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E543             >                org     $-1                 // alter last byte of Name just above to set
 179+ E542 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E543             >
 179+ E543 38 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E545             >Prev_Ptr        defl    Heap_Ptr
 179+ E545             >
 179+ E545             >mirror_Ptr      defl    $
 179+ E545             >
 179+ E545 6A 6B       >                dw      Dict_Ptr + 2        // xt
 179+ E547             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E547             >
 179+ E547             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E547             >
 179+ E547             >//              ______________________________________________________________________
 179+ E547             >//              Dictionary part
 179+ E547             >
 179+ E547             >                org     Dict_Ptr
 179+ 6B68             >
 179+ 6B68 45 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 6B6A             >
 179+ 6B6A             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6B6A CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6B6D             >
 179+ 6B6D             >
 179+ 6B6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6B6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6B6D             >
 179+ 6B6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6B6D 36          >                db      54
 180+ 6B6E                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 6B6E             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 6B6E             >
 180+ 6B6E             >Dict_Ptr        defl    $
 180+ 6B6E             >
 180+ 6B6E             >//              ______________________________________________________________________
 180+ 6B6E             >//              Heap part
 180+ 6B6E             >
 180+ 6B6E             >
 180+ 6B6E             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E547             >
 180+ E547             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E547             >Latest_Definition defl  Heap_Ptr
 180+ E547             >
 180+ E547             >                // dummy db directives used to calculate length of namec
 180+ E547 48 4C 44    >                db      "HLD"
 180+ E54A             >len_NFA         defl    $ - temp_NFA
 180+ E54A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E547             >
 180+ E547 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E548 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54B             >                org     $-1                 // alter last byte of Name just above to set
 180+ E54A C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54B             >
 180+ E54B 40 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54D             >Prev_Ptr        defl    Heap_Ptr
 180+ E54D             >
 180+ E54D             >mirror_Ptr      defl    $
 180+ E54D             >
 180+ E54D 70 6B       >                dw      Dict_Ptr + 2        // xt
 180+ E54F             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E54F             >
 180+ E54F             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E54F             >
 180+ E54F             >//              ______________________________________________________________________
 180+ E54F             >//              Dictionary part
 180+ E54F             >
 180+ E54F             >                org     Dict_Ptr
 180+ 6B6E             >
 180+ 6B6E 4D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 6B70             >
 180+ 6B70             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6B70 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6B73             >
 180+ 6B73             >
 180+ 6B73             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6B73             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6B73             >
 180+ 6B73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6B73 38          >                db      56
 181+ 6B74                              User_Def USE        , "USE"       , 58 // address of last used block
 181+ 6B74             >                New_Def  USE, "USE", User_Ptr, is_normal
 181+ 6B74             >
 181+ 6B74             >Dict_Ptr        defl    $
 181+ 6B74             >
 181+ 6B74             >//              ______________________________________________________________________
 181+ 6B74             >//              Heap part
 181+ 6B74             >
 181+ 6B74             >
 181+ 6B74             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E54F             >
 181+ E54F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E54F             >Latest_Definition defl  Heap_Ptr
 181+ E54F             >
 181+ E54F             >                // dummy db directives used to calculate length of namec
 181+ E54F 55 53 45    >                db      "USE"
 181+ E552             >len_NFA         defl    $ - temp_NFA
 181+ E552             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E54F             >
 181+ E54F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E550 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 181+ E553             >                org     $-1                 // alter last byte of Name just above to set
 181+ E552 C5          >                db      {b $} | END_BIT     // msb as name end
 181+ E553             >
 181+ E553 47 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E555             >Prev_Ptr        defl    Heap_Ptr
 181+ E555             >
 181+ E555             >mirror_Ptr      defl    $
 181+ E555             >
 181+ E555 76 6B       >                dw      Dict_Ptr + 2        // xt
 181+ E557             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E557             >
 181+ E557             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E557             >
 181+ E557             >//              ______________________________________________________________________
 181+ E557             >//              Dictionary part
 181+ E557             >
 181+ E557             >                org     Dict_Ptr
 181+ 6B74             >
 181+ 6B74 55 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 6B76             >
 181+ 6B76             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6B76 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6B79             >
 181+ 6B79             >
 181+ 6B79             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6B79             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6B79             >
 181+ 6B79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6B79 3A          >                db      58
 182+ 6B7A                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 6B7A             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 6B7A             >
 182+ 6B7A             >Dict_Ptr        defl    $
 182+ 6B7A             >
 182+ 6B7A             >//              ______________________________________________________________________
 182+ 6B7A             >//              Heap part
 182+ 6B7A             >
 182+ 6B7A             >
 182+ 6B7A             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E557             >
 182+ E557             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E557             >Latest_Definition defl  Heap_Ptr
 182+ E557             >
 182+ E557             >                // dummy db directives used to calculate length of namec
 182+ E557 50 52 45 56 >                db      "PREV"
 182+ E55B             >len_NFA         defl    $ - temp_NFA
 182+ E55B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E557             >
 182+ E557 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E558 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55C             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55B D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55C             >
 182+ E55C 4F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E55E             >Prev_Ptr        defl    Heap_Ptr
 182+ E55E             >
 182+ E55E             >mirror_Ptr      defl    $
 182+ E55E             >
 182+ E55E 7C 6B       >                dw      Dict_Ptr + 2        // xt
 182+ E560             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E560             >
 182+ E560             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E560             >
 182+ E560             >//              ______________________________________________________________________
 182+ E560             >//              Dictionary part
 182+ E560             >
 182+ E560             >                org     Dict_Ptr
 182+ 6B7A             >
 182+ 6B7A 5E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 6B7C             >
 182+ 6B7C             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6B7C CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6B7F             >
 182+ 6B7F             >
 182+ 6B7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6B7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6B7F             >
 182+ 6B7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6B7F 3C          >                db      60
 183+ 6B80                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 6B80             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 6B80             >
 183+ 6B80             >Dict_Ptr        defl    $
 183+ 6B80             >
 183+ 6B80             >//              ______________________________________________________________________
 183+ 6B80             >//              Heap part
 183+ 6B80             >
 183+ 6B80             >
 183+ 6B80             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E560             >
 183+ E560             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E560             >Latest_Definition defl  Heap_Ptr
 183+ E560             >
 183+ E560             >                // dummy db directives used to calculate length of namec
 183+ E560 4C 50       >                db      "LP"
 183+ E562             >len_NFA         defl    $ - temp_NFA
 183+ E562             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E560             >
 183+ E560 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E561 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E563             >                org     $-1                 // alter last byte of Name just above to set
 183+ E562 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E563             >
 183+ E563 57 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E565             >Prev_Ptr        defl    Heap_Ptr
 183+ E565             >
 183+ E565             >mirror_Ptr      defl    $
 183+ E565             >
 183+ E565 82 6B       >                dw      Dict_Ptr + 2        // xt
 183+ E567             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E567             >
 183+ E567             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E567             >
 183+ E567             >//              ______________________________________________________________________
 183+ E567             >//              Dictionary part
 183+ E567             >
 183+ E567             >                org     Dict_Ptr
 183+ 6B80             >
 183+ 6B80 65 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 6B82             >
 183+ 6B82             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6B82 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6B85             >
 183+ 6B85             >
 183+ 6B85             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6B85             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6B85             >
 183+ 6B85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6B85 3E          >                db      62
 184+ 6B86                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 6B86             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 6B86             >
 184+ 6B86             >Dict_Ptr        defl    $
 184+ 6B86             >
 184+ 6B86             >//              ______________________________________________________________________
 184+ 6B86             >//              Heap part
 184+ 6B86             >
 184+ 6B86             >
 184+ 6B86             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E567             >
 184+ E567             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E567             >Latest_Definition defl  Heap_Ptr
 184+ E567             >
 184+ E567             >                // dummy db directives used to calculate length of namec
 184+ E567 50 4C 41 43 >                db      "PLACE"
 184+ E56B 45          >
 184+ E56C             >len_NFA         defl    $ - temp_NFA
 184+ E56C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E567             >
 184+ E567 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E568 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56C 45          >
 184+ E56D             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56C C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E56D             >
 184+ E56D 60 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E56F             >Prev_Ptr        defl    Heap_Ptr
 184+ E56F             >
 184+ E56F             >mirror_Ptr      defl    $
 184+ E56F             >
 184+ E56F 88 6B       >                dw      Dict_Ptr + 2        // xt
 184+ E571             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E571             >
 184+ E571             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E571             >
 184+ E571             >//              ______________________________________________________________________
 184+ E571             >//              Dictionary part
 184+ E571             >
 184+ E571             >                org     Dict_Ptr
 184+ 6B86             >
 184+ 6B86 6F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 6B88             >
 184+ 6B88             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6B88 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6B8B             >
 184+ 6B8B             >
 184+ 6B8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6B8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6B8B             >
 184+ 6B8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6B8B 40          >                db      64
 185+ 6B8C                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 6B8C             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 6B8C             >
 185+ 6B8C             >Dict_Ptr        defl    $
 185+ 6B8C             >
 185+ 6B8C             >//              ______________________________________________________________________
 185+ 6B8C             >//              Heap part
 185+ 6B8C             >
 185+ 6B8C             >
 185+ 6B8C             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E571             >
 185+ E571             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E571             >Latest_Definition defl  Heap_Ptr
 185+ E571             >
 185+ E571             >                // dummy db directives used to calculate length of namec
 185+ E571 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E575 43 45 2D 49 >
 185+ E579 44          >
 185+ E57A             >len_NFA         defl    $ - temp_NFA
 185+ E57A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E571             >
 185+ E571 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E572 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E576 43 45 2D 49 >
 185+ E57A 44          >
 185+ E57B             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57A C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57B             >
 185+ E57B 67 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E57D             >Prev_Ptr        defl    Heap_Ptr
 185+ E57D             >
 185+ E57D             >mirror_Ptr      defl    $
 185+ E57D             >
 185+ E57D 8E 6B       >                dw      Dict_Ptr + 2        // xt
 185+ E57F             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E57F             >
 185+ E57F             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E57F             >
 185+ E57F             >//              ______________________________________________________________________
 185+ E57F             >//              Dictionary part
 185+ E57F             >
 185+ E57F             >                org     Dict_Ptr
 185+ 6B8C             >
 185+ 6B8C 7D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 6B8E             >
 185+ 6B8E             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6B8E CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6B91             >
 185+ 6B91             >
 185+ 6B91             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6B91             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6B91             >
 185+ 6B91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6B91 42          >                db      66
 186+ 6B92                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 6B92             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 6B92             >
 186+ 6B92             >Dict_Ptr        defl    $
 186+ 6B92             >
 186+ 6B92             >//              ______________________________________________________________________
 186+ 6B92             >//              Heap part
 186+ 6B92             >
 186+ 6B92             >
 186+ 6B92             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E57F             >
 186+ E57F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E57F             >Latest_Definition defl  Heap_Ptr
 186+ E57F             >
 186+ E57F             >                // dummy db directives used to calculate length of namec
 186+ E57F 53 50 41 4E >                db      "SPAN"
 186+ E583             >len_NFA         defl    $ - temp_NFA
 186+ E583             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E57F             >
 186+ E57F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E580 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E584             >                org     $-1                 // alter last byte of Name just above to set
 186+ E583 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E584             >
 186+ E584 71 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E586             >Prev_Ptr        defl    Heap_Ptr
 186+ E586             >
 186+ E586             >mirror_Ptr      defl    $
 186+ E586             >
 186+ E586 94 6B       >                dw      Dict_Ptr + 2        // xt
 186+ E588             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E588             >
 186+ E588             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E588             >
 186+ E588             >//              ______________________________________________________________________
 186+ E588             >//              Dictionary part
 186+ E588             >
 186+ E588             >                org     Dict_Ptr
 186+ 6B92             >
 186+ 6B92 86 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 6B94             >
 186+ 6B94             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 6B94 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 6B97             >
 186+ 6B97             >
 186+ 6B97             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 6B97             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 6B97             >
 186+ 6B97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 6B97 44          >                db      68
 187+ 6B98                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 6B98             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 6B98             >
 187+ 6B98             >Dict_Ptr        defl    $
 187+ 6B98             >
 187+ 6B98             >//              ______________________________________________________________________
 187+ 6B98             >//              Heap part
 187+ 6B98             >
 187+ 6B98             >
 187+ 6B98             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E588             >
 187+ E588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E588             >Latest_Definition defl  Heap_Ptr
 187+ E588             >
 187+ E588             >                // dummy db directives used to calculate length of namec
 187+ E588 48 41 4E 44 >                db      "HANDLER"
 187+ E58C 4C 45 52    >
 187+ E58F             >len_NFA         defl    $ - temp_NFA
 187+ E58F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E588             >
 187+ E588 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E589 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E58D 4C 45 52    >
 187+ E590             >                org     $-1                 // alter last byte of Name just above to set
 187+ E58F D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E590             >
 187+ E590 7F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E592             >Prev_Ptr        defl    Heap_Ptr
 187+ E592             >
 187+ E592             >mirror_Ptr      defl    $
 187+ E592             >
 187+ E592 9A 6B       >                dw      Dict_Ptr + 2        // xt
 187+ E594             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E594             >
 187+ E594             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E594             >
 187+ E594             >//              ______________________________________________________________________
 187+ E594             >//              Dictionary part
 187+ E594             >
 187+ E594             >                org     Dict_Ptr
 187+ 6B98             >
 187+ 6B98 92 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 6B9A             >
 187+ 6B9A             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6B9A CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 6B9D             >
 187+ 6B9D             >
 187+ 6B9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6B9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6B9D             >
 187+ 6B9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 6B9D 46          >                db      70
 188+ 6B9E                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 6B9E             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 6B9E             >
 188+ 6B9E             >Dict_Ptr        defl    $
 188+ 6B9E             >
 188+ 6B9E             >//              ______________________________________________________________________
 188+ 6B9E             >//              Heap part
 188+ 6B9E             >
 188+ 6B9E             >
 188+ 6B9E             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E594             >
 188+ E594             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E594             >Latest_Definition defl  Heap_Ptr
 188+ E594             >
 188+ E594             >                // dummy db directives used to calculate length of namec
 188+ E594 45 58 50    >                db      "EXP"
 188+ E597             >len_NFA         defl    $ - temp_NFA
 188+ E597             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E594             >
 188+ E594 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E595 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E598             >                org     $-1                 // alter last byte of Name just above to set
 188+ E597 D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E598             >
 188+ E598 88 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59A             >Prev_Ptr        defl    Heap_Ptr
 188+ E59A             >
 188+ E59A             >mirror_Ptr      defl    $
 188+ E59A             >
 188+ E59A A0 6B       >                dw      Dict_Ptr + 2        // xt
 188+ E59C             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59C             >
 188+ E59C             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59C             >
 188+ E59C             >//              ______________________________________________________________________
 188+ E59C             >//              Dictionary part
 188+ E59C             >
 188+ E59C             >                org     Dict_Ptr
 188+ 6B9E             >
 188+ 6B9E 9A 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 6BA0             >
 188+ 6BA0             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6BA0 CD 75 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 6BA3             >
 188+ 6BA3             >
 188+ 6BA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6BA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6BA3             >
 188+ 6BA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 6BA3 48          >                db      72
 189+ 6BA4
 190+ 6BA4              //  ______________________________________________________________________
 191+ 6BA4              //
 192+ 6BA4              // here         -- a
 193+ 6BA4                              Colon_Def HERE, "HERE", is_normal
 193+ 6BA4             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 6BA4             >
 193+ 6BA4             >Dict_Ptr        defl    $
 193+ 6BA4             >
 193+ 6BA4             >//              ______________________________________________________________________
 193+ 6BA4             >//              Heap part
 193+ 6BA4             >
 193+ 6BA4             >
 193+ 6BA4             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59C             >
 193+ E59C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59C             >Latest_Definition defl  Heap_Ptr
 193+ E59C             >
 193+ E59C             >                // dummy db directives used to calculate length of namec
 193+ E59C 48 45 52 45 >                db      "HERE"
 193+ E5A0             >len_NFA         defl    $ - temp_NFA
 193+ E5A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59C             >
 193+ E59C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E59D 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A1             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A0 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A1             >
 193+ E5A1 94 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A3             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A3             >
 193+ E5A3             >mirror_Ptr      defl    $
 193+ E5A3             >
 193+ E5A3 A6 6B       >                dw      Dict_Ptr + 2        // xt
 193+ E5A5             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A5             >
 193+ E5A5             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A5             >
 193+ E5A5             >//              ______________________________________________________________________
 193+ E5A5             >//              Dictionary part
 193+ E5A5             >
 193+ E5A5             >                org     Dict_Ptr
 193+ 6BA4             >
 193+ 6BA4 A3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 6BA6             >
 193+ 6BA6             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 6BA6 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 6BA9             >
 193+ 6BA9             >
 193+ 6BA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 6BA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 6BA9             >
 193+ 6BA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 6BA9 FE 6A 89 69                  dw      DP, FETCH               // dp @
 195+ 6BAD 52 68                        dw      EXIT                    // ;
 196+ 6BAF
 197+ 6BAF              //  ______________________________________________________________________
 198+ 6BAF              //
 199+ 6BAF              // allot        n --
 200+ 6BAF                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 6BAF             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 6BAF             >
 200+ 6BAF             >Dict_Ptr        defl    $
 200+ 6BAF             >
 200+ 6BAF             >//              ______________________________________________________________________
 200+ 6BAF             >//              Heap part
 200+ 6BAF             >
 200+ 6BAF             >
 200+ 6BAF             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A5             >
 200+ E5A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A5             >Latest_Definition defl  Heap_Ptr
 200+ E5A5             >
 200+ E5A5             >                // dummy db directives used to calculate length of namec
 200+ E5A5 41 4C 4C 4F >                db      "ALLOT"
 200+ E5A9 54          >
 200+ E5AA             >len_NFA         defl    $ - temp_NFA
 200+ E5AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A5             >
 200+ E5A5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A6 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AA 54          >
 200+ E5AB             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AA D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AB             >
 200+ E5AB 9C 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5AD             >Prev_Ptr        defl    Heap_Ptr
 200+ E5AD             >
 200+ E5AD             >mirror_Ptr      defl    $
 200+ E5AD             >
 200+ E5AD B1 6B       >                dw      Dict_Ptr + 2        // xt
 200+ E5AF             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5AF             >
 200+ E5AF             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5AF             >
 200+ E5AF             >//              ______________________________________________________________________
 200+ E5AF             >//              Dictionary part
 200+ E5AF             >
 200+ E5AF             >                org     Dict_Ptr
 200+ 6BAF             >
 200+ 6BAF AD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 6BB1             >
 200+ 6BB1             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6BB1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 6BB4             >
 200+ 6BB4             >
 200+ 6BB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6BB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6BB4             >
 200+ 6BB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6BB4 FE 6A 71 69                  dw      DP,  PLUSSTORE          // dp +!
 202+ 6BB8 52 68                        dw      EXIT                    // ;
 203+ 6BBA
 204+ 6BBA              //  ______________________________________________________________________
 205+ 6BBA              //
 206+ 6BBA              // comma        n --
 207+ 6BBA                              Colon_Def COMMA, ",", is_normal
 207+ 6BBA             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 6BBA             >
 207+ 6BBA             >Dict_Ptr        defl    $
 207+ 6BBA             >
 207+ 6BBA             >//              ______________________________________________________________________
 207+ 6BBA             >//              Heap part
 207+ 6BBA             >
 207+ 6BBA             >
 207+ 6BBA             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5AF             >
 207+ E5AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5AF             >Latest_Definition defl  Heap_Ptr
 207+ E5AF             >
 207+ E5AF             >                // dummy db directives used to calculate length of namec
 207+ E5AF 2C          >                db      ","
 207+ E5B0             >len_NFA         defl    $ - temp_NFA
 207+ E5B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5AF             >
 207+ E5AF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B0 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B1             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B0 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B1             >
 207+ E5B1 A5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B3             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B3             >
 207+ E5B3             >mirror_Ptr      defl    $
 207+ E5B3             >
 207+ E5B3 BC 6B       >                dw      Dict_Ptr + 2        // xt
 207+ E5B5             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B5             >
 207+ E5B5             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B5             >
 207+ E5B5             >//              ______________________________________________________________________
 207+ E5B5             >//              Dictionary part
 207+ E5B5             >
 207+ E5B5             >                org     Dict_Ptr
 207+ 6BBA             >
 207+ 6BBA B3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 6BBC             >
 207+ 6BBC             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 6BBC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 6BBF             >
 207+ 6BBF             >
 207+ 6BBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 6BBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 6BBF             >
 207+ 6BBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 6BBF A6 6B 93 69                  dw      HERE, STORE             // here !
 209+ 6BC3 8F 6A B1 6B                  dw      TWO, ALLOT              // 2 allot
 210+ 6BC7 52 68                        dw      EXIT                    // ;
 211+ 6BC9
 212+ 6BC9              //  ______________________________________________________________________
 213+ 6BC9              //
 214+ 6BC9              // ccomma       c --
 215+ 6BC9                              Colon_Def CCOMMA, "C,", is_normal
 215+ 6BC9             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 6BC9             >
 215+ 6BC9             >Dict_Ptr        defl    $
 215+ 6BC9             >
 215+ 6BC9             >//              ______________________________________________________________________
 215+ 6BC9             >//              Heap part
 215+ 6BC9             >
 215+ 6BC9             >
 215+ 6BC9             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B5             >
 215+ E5B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B5             >Latest_Definition defl  Heap_Ptr
 215+ E5B5             >
 215+ E5B5             >                // dummy db directives used to calculate length of namec
 215+ E5B5 43 2C       >                db      "C,"
 215+ E5B7             >len_NFA         defl    $ - temp_NFA
 215+ E5B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B5             >
 215+ E5B5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B6 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5B8             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5B7 AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5B8             >
 215+ E5B8 AF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BA             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BA             >
 215+ E5BA             >mirror_Ptr      defl    $
 215+ E5BA             >
 215+ E5BA CB 6B       >                dw      Dict_Ptr + 2        // xt
 215+ E5BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BC             >
 215+ E5BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BC             >
 215+ E5BC             >//              ______________________________________________________________________
 215+ E5BC             >//              Dictionary part
 215+ E5BC             >
 215+ E5BC             >                org     Dict_Ptr
 215+ 6BC9             >
 215+ 6BC9 BA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 6BCB             >
 215+ 6BCB             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 6BCB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 6BCE             >
 215+ 6BCE             >
 215+ 6BCE             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 6BCE             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 6BCE             >
 215+ 6BCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 6BCE A6 6B A7 69                  dw      HERE, CSTORE            // here c!
 217+ 6BD2 88 6A B1 6B                  dw      ONE, ALLOT              // 1 allot
 218+ 6BD6 52 68                        dw      EXIT                    // ;
 219+ 6BD8
 220+ 6BD8              //  ______________________________________________________________________
 221+ 6BD8              //
 222+ 6BD8              // hpcomma      n --
 223+ 6BD8                              Colon_Def HCOMMA, "HP,", is_normal
 223+ 6BD8             >                New_Def  HCOMMA, "HP,", Enter_Ptr, is_normal ; ok
 223+ 6BD8             >
 223+ 6BD8             >Dict_Ptr        defl    $
 223+ 6BD8             >
 223+ 6BD8             >//              ______________________________________________________________________
 223+ 6BD8             >//              Heap part
 223+ 6BD8             >
 223+ 6BD8             >
 223+ 6BD8             >                org     (Heap_Ptr & $1FFF) + $E000
 223+ E5BC             >
 223+ E5BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ E5BC             >Latest_Definition defl  Heap_Ptr
 223+ E5BC             >
 223+ E5BC             >                // dummy db directives used to calculate length of namec
 223+ E5BC 48 50 2C    >                db      "HP,"
 223+ E5BF             >len_NFA         defl    $ - temp_NFA
 223+ E5BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ E5BC             >
 223+ E5BC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ E5BD 48 50 2C    >                db      "HP,"               // name string in 7-bit ascii, but
 223+ E5C0             >                org     $-1                 // alter last byte of Name just above to set
 223+ E5BF AC          >                db      {b $} | END_BIT     // msb as name end
 223+ E5C0             >
 223+ E5C0 B5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 223+ E5C2             >Prev_Ptr        defl    Heap_Ptr
 223+ E5C2             >
 223+ E5C2             >mirror_Ptr      defl    $
 223+ E5C2             >
 223+ E5C2 DA 6B       >                dw      Dict_Ptr + 2        // xt
 223+ E5C4             >Heap_Ptr        defl    $ - $E000           // save current HP
 223+ E5C4             >
 223+ E5C4             >Current_HP      defl  $ - $E000             // used to set HP once!
 223+ E5C4             >
 223+ E5C4             >//              ______________________________________________________________________
 223+ E5C4             >//              Dictionary part
 223+ E5C4             >
 223+ E5C4             >                org     Dict_Ptr
 223+ 6BD8             >
 223+ 6BD8 C2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 223+ 6BDA             >
 223+ 6BDA             >HCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 6BDA CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 6BDD             >
 223+ 6BDD             >
 223+ 6BDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 6BDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 6BDD             >
 223+ 6BDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 6BDD 2A 6D FB 6C                  dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 224+ 6BE1 93 69
 225+ 6BE3 8F 6A 16 6B                  dw      TWO, HP, PLUSSTORE      // 2 HP +!
 225+ 6BE7 71 69
 226+ 6BE9 52 68                        dw      EXIT                    // ;
 227+ 6BEB
 228+ 6BEB              //  ______________________________________________________________________
 229+ 6BEB              //
 230+ 6BEB              // s>d          n -- d
 231+ 6BEB              // converts a single precision integer in a double precision
 232+ 6BEB                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 6BEB             >
 232+ 6BEB             >Dict_Ptr        defl    $
 232+ 6BEB             >
 232+ 6BEB             >//              ______________________________________________________________________
 232+ 6BEB             >//              Heap part
 232+ 6BEB             >
 232+ 6BEB             >
 232+ 6BEB             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5C4             >
 232+ E5C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5C4             >Latest_Definition defl  Heap_Ptr
 232+ E5C4             >
 232+ E5C4             >                // dummy db directives used to calculate length of namec
 232+ E5C4 53 3E 44    >                db      "S>D"
 232+ E5C7             >len_NFA         defl    $ - temp_NFA
 232+ E5C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5C4             >
 232+ E5C4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5C5 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C8             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5C7 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C8             >
 232+ E5C8 BC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5CA             >Prev_Ptr        defl    Heap_Ptr
 232+ E5CA             >
 232+ E5CA             >mirror_Ptr      defl    $
 232+ E5CA             >
 232+ E5CA ED 6B       >                dw      Dict_Ptr + 2        // xt
 232+ E5CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5CC             >
 232+ E5CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5CC             >
 232+ E5CC             >//              ______________________________________________________________________
 232+ E5CC             >//              Dictionary part
 232+ E5CC             >
 232+ E5CC             >                org     Dict_Ptr
 232+ 6BEB             >
 232+ 6BEB CA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 6BED             >
 232+ 6BED             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 6BED ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 6BED ~           >
 232+ 6BED ~           >
 232+ 6BED             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 6BED             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 6BED             >
 232+ 6BED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 6BED E1                           pop     hl
 234+ 6BEE 7C                           ld      a, h
 235+ 6BEF E5                           push    hl
 236+ 6BF0 17                           rla
 237+ 6BF1 ED 62                        sbc     hl, hl
 238+ 6BF3 E5                           push    hl
 239+ 6BF4                              next
 239+ 6BF4 DD E9       >                jp      (ix)
 240+ 6BF6
 241+ 6BF6              //  ______________________________________________________________________
 242+ 6BF6              //
 243+ 6BF6              // -            n1 n2 -- n3
 244+ 6BF6              // subtraction
 245+ 6BF6                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 6BF6             >
 245+ 6BF6             >Dict_Ptr        defl    $
 245+ 6BF6             >
 245+ 6BF6             >//              ______________________________________________________________________
 245+ 6BF6             >//              Heap part
 245+ 6BF6             >
 245+ 6BF6             >
 245+ 6BF6             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5CC             >
 245+ E5CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5CC             >Latest_Definition defl  Heap_Ptr
 245+ E5CC             >
 245+ E5CC             >                // dummy db directives used to calculate length of namec
 245+ E5CC 2D          >                db      "-"
 245+ E5CD             >len_NFA         defl    $ - temp_NFA
 245+ E5CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5CC             >
 245+ E5CC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5CD 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5CE             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5CD AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5CE             >
 245+ E5CE C4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5D0             >Prev_Ptr        defl    Heap_Ptr
 245+ E5D0             >
 245+ E5D0             >mirror_Ptr      defl    $
 245+ E5D0             >
 245+ E5D0 F8 6B       >                dw      Dict_Ptr + 2        // xt
 245+ E5D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5D2             >
 245+ E5D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5D2             >
 245+ E5D2             >//              ______________________________________________________________________
 245+ E5D2             >//              Dictionary part
 245+ E5D2             >
 245+ E5D2             >                org     Dict_Ptr
 245+ 6BF6             >
 245+ 6BF6 D0 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 6BF8             >
 245+ 6BF8             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 6BF8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 6BF8 ~           >
 245+ 6BF8 ~           >
 245+ 6BF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 6BF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 6BF8             >
 245+ 6BF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 6BF8 D9                           exx
 247+ 6BF9 D1                           pop     de
 248+ 6BFA E1                           pop     hl
 249+ 6BFB A7                           and     a
 250+ 6BFC ED 52                        sbc     hl, de
 251+ 6BFE E5                           push    hl
 252+ 6BFF D9                           exx
 253+ 6C00                              next
 253+ 6C00 DD E9       >                jp      (ix)
 254+ 6C02
 255+ 6C02
 256+ 6C02              //  ______________________________________________________________________
 257+ 6C02              //
 258+ 6C02              // =            n1 n2 -- n3
 259+ 6C02              // equals
 260+ 6C02                              Colon_Def EQUALS, "=", is_normal
 260+ 6C02             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 6C02             >
 260+ 6C02             >Dict_Ptr        defl    $
 260+ 6C02             >
 260+ 6C02             >//              ______________________________________________________________________
 260+ 6C02             >//              Heap part
 260+ 6C02             >
 260+ 6C02             >
 260+ 6C02             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5D2             >
 260+ E5D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5D2             >Latest_Definition defl  Heap_Ptr
 260+ E5D2             >
 260+ E5D2             >                // dummy db directives used to calculate length of namec
 260+ E5D2 3D          >                db      "="
 260+ E5D3             >len_NFA         defl    $ - temp_NFA
 260+ E5D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5D2             >
 260+ E5D2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5D3 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5D4             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5D3 BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5D4             >
 260+ E5D4 CC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5D6             >Prev_Ptr        defl    Heap_Ptr
 260+ E5D6             >
 260+ E5D6             >mirror_Ptr      defl    $
 260+ E5D6             >
 260+ E5D6 04 6C       >                dw      Dict_Ptr + 2        // xt
 260+ E5D8             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D8             >
 260+ E5D8             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D8             >
 260+ E5D8             >//              ______________________________________________________________________
 260+ E5D8             >//              Dictionary part
 260+ E5D8             >
 260+ E5D8             >                org     Dict_Ptr
 260+ 6C02             >
 260+ 6C02 D6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6C04             >
 260+ 6C04             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6C04 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 6C07             >
 260+ 6C07             >
 260+ 6C07             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6C07             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6C07             >
 260+ 6C07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6C07 F8 6B 77 68                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 6C0B 52 68                        dw      EXIT                    // ;
 263+ 6C0D
 264+ 6C0D              //  ______________________________________________________________________
 265+ 6C0D              //
 266+ 6C0D              // u<           u1 u2 -- u3
 267+ 6C0D              // unsigned less-than
 268+ 6C0D                              New_Def ULESS, "U<", is_code, is_normal
 268+ 6C0D             >
 268+ 6C0D             >Dict_Ptr        defl    $
 268+ 6C0D             >
 268+ 6C0D             >//              ______________________________________________________________________
 268+ 6C0D             >//              Heap part
 268+ 6C0D             >
 268+ 6C0D             >
 268+ 6C0D             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D8             >
 268+ E5D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D8             >Latest_Definition defl  Heap_Ptr
 268+ E5D8             >
 268+ E5D8             >                // dummy db directives used to calculate length of namec
 268+ E5D8 55 3C       >                db      "U<"
 268+ E5DA             >len_NFA         defl    $ - temp_NFA
 268+ E5DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D8             >
 268+ E5D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D9 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5DB             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5DA BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5DB             >
 268+ E5DB D2 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5DD             >Prev_Ptr        defl    Heap_Ptr
 268+ E5DD             >
 268+ E5DD             >mirror_Ptr      defl    $
 268+ E5DD             >
 268+ E5DD 0F 6C       >                dw      Dict_Ptr + 2        // xt
 268+ E5DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5DF             >
 268+ E5DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5DF             >
 268+ E5DF             >//              ______________________________________________________________________
 268+ E5DF             >//              Dictionary part
 268+ E5DF             >
 268+ E5DF             >                org     Dict_Ptr
 268+ 6C0D             >
 268+ 6C0D DD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 6C0F             >
 268+ 6C0F             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 6C0F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 6C0F ~           >
 268+ 6C0F ~           >
 268+ 6C0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 6C0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 6C0F             >
 268+ 6C0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 6C0F D9                           exx
 270+ 6C10 D1                           pop     de
 271+ 6C11 E1                           pop     hl
 272+ 6C12 A7                           and     a
 273+ 6C13 ED 52                        sbc     hl, de
 274+ 6C15 ED 62                        sbc     hl, hl
 275+ 6C17 E5                           push    hl
 276+ 6C18 D9                           exx
 277+ 6C19                              next
 277+ 6C19 DD E9       >                jp      (ix)
 278+ 6C1B
 279+ 6C1B              //  ______________________________________________________________________
 280+ 6C1B              //
 281+ 6C1B              // <           n1 n2 -- n3
 282+ 6C1B              // less-than
 283+ 6C1B                              New_Def LESS, "<", is_code, is_normal
 283+ 6C1B             >
 283+ 6C1B             >Dict_Ptr        defl    $
 283+ 6C1B             >
 283+ 6C1B             >//              ______________________________________________________________________
 283+ 6C1B             >//              Heap part
 283+ 6C1B             >
 283+ 6C1B             >
 283+ 6C1B             >                org     (Heap_Ptr & $1FFF) + $E000
 283+ E5DF             >
 283+ E5DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 283+ E5DF             >Latest_Definition defl  Heap_Ptr
 283+ E5DF             >
 283+ E5DF             >                // dummy db directives used to calculate length of namec
 283+ E5DF 3C          >                db      "<"
 283+ E5E0             >len_NFA         defl    $ - temp_NFA
 283+ E5E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 283+ E5DF             >
 283+ E5DF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 283+ E5E0 3C          >                db      "<"               // name string in 7-bit ascii, but
 283+ E5E1             >                org     $-1                 // alter last byte of Name just above to set
 283+ E5E0 BC          >                db      {b $} | END_BIT     // msb as name end
 283+ E5E1             >
 283+ E5E1 D8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 283+ E5E3             >Prev_Ptr        defl    Heap_Ptr
 283+ E5E3             >
 283+ E5E3             >mirror_Ptr      defl    $
 283+ E5E3             >
 283+ E5E3 1D 6C       >                dw      Dict_Ptr + 2        // xt
 283+ E5E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 283+ E5E5             >
 283+ E5E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 283+ E5E5             >
 283+ E5E5             >//              ______________________________________________________________________
 283+ E5E5             >//              Dictionary part
 283+ E5E5             >
 283+ E5E5             >                org     Dict_Ptr
 283+ 6C1B             >
 283+ 6C1B E3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 283+ 6C1D             >
 283+ 6C1D             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 283+ 6C1D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 283+ 6C1D ~           >
 283+ 6C1D ~           >
 283+ 6C1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 283+ 6C1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 283+ 6C1D             >
 283+ 6C1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 284+ 6C1D D9                           exx
 285+ 6C1E D1                           pop     de
 286+ 6C1F E1                           pop     hl
 287+ 6C20 7C                           ld      a, h
 288+ 6C21 EE 80                        xor     $80
 289+ 6C23 67                           ld      h, a
 290+ 6C24 7A                           ld      a, d
 291+ 6C25 EE 80                        xor     $80
 292+ 6C27 57                           ld      d, a
 293+ 6C28              //              and     a
 294+ 6C28 ED 52                        sbc     hl, de
 295+ 6C2A ED 62                        sbc     hl, hl
 296+ 6C2C E5                           push    hl
 297+ 6C2D D9                           exx
 298+ 6C2E                              next
 298+ 6C2E DD E9       >                jp      (ix)
 299+ 6C30
 300+ 6C30              //  ______________________________________________________________________
 301+ 6C30              //
 302+ 6C30              // >            n1 n2 -- n3
 303+ 6C30              // greater than
 304+ 6C30                              Colon_Def GREATER, ">", is_normal
 304+ 6C30             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 6C30             >
 304+ 6C30             >Dict_Ptr        defl    $
 304+ 6C30             >
 304+ 6C30             >//              ______________________________________________________________________
 304+ 6C30             >//              Heap part
 304+ 6C30             >
 304+ 6C30             >
 304+ 6C30             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5E5             >
 304+ E5E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5E5             >Latest_Definition defl  Heap_Ptr
 304+ E5E5             >
 304+ E5E5             >                // dummy db directives used to calculate length of namec
 304+ E5E5 3E          >                db      ">"
 304+ E5E6             >len_NFA         defl    $ - temp_NFA
 304+ E5E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5E5             >
 304+ E5E5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5E6 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5E7             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5E6 BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5E7             >
 304+ E5E7 DF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E9             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E9             >
 304+ E5E9             >mirror_Ptr      defl    $
 304+ E5E9             >
 304+ E5E9 32 6C       >                dw      Dict_Ptr + 2        // xt
 304+ E5EB             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5EB             >
 304+ E5EB             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5EB             >
 304+ E5EB             >//              ______________________________________________________________________
 304+ E5EB             >//              Dictionary part
 304+ E5EB             >
 304+ E5EB             >                org     Dict_Ptr
 304+ 6C30             >
 304+ 6C30 E9 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 6C32             >
 304+ 6C32             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 6C32 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 6C35             >
 304+ 6C35             >
 304+ 6C35             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 6C35             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 6C35             >
 304+ 6C35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 6C35 24 69 1D 6C                  dw      SWAP, LESS              // swap <
 306+ 6C39 52 68                        dw      EXIT                    // ;
 307+ 6C3B              //  ______________________________________________________________________
 308+ 6C3B              //
 309+ 6C3B              // min          n1 n2 -- n3
 310+ 6C3B              // minimum between n1 and n2
 311+ 6C3B                              Colon_Def MIN, "MIN" , is_normal
 311+ 6C3B             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 6C3B             >
 311+ 6C3B             >Dict_Ptr        defl    $
 311+ 6C3B             >
 311+ 6C3B             >//              ______________________________________________________________________
 311+ 6C3B             >//              Heap part
 311+ 6C3B             >
 311+ 6C3B             >
 311+ 6C3B             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5EB             >
 311+ E5EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5EB             >Latest_Definition defl  Heap_Ptr
 311+ E5EB             >
 311+ E5EB             >                // dummy db directives used to calculate length of namec
 311+ E5EB 4D 49 4E    >                db      "MIN"
 311+ E5EE             >len_NFA         defl    $ - temp_NFA
 311+ E5EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5EB             >
 311+ E5EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5EC 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5EF             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5EE CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5EF             >
 311+ E5EF E5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5F1             >Prev_Ptr        defl    Heap_Ptr
 311+ E5F1             >
 311+ E5F1             >mirror_Ptr      defl    $
 311+ E5F1             >
 311+ E5F1 3D 6C       >                dw      Dict_Ptr + 2        // xt
 311+ E5F3             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5F3             >
 311+ E5F3             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5F3             >
 311+ E5F3             >//              ______________________________________________________________________
 311+ E5F3             >//              Dictionary part
 311+ E5F3             >
 311+ E5F3             >                org     Dict_Ptr
 311+ 6C3B             >
 311+ 6C3B F1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 6C3D             >
 311+ 6C3D             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 6C3D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 6C40             >
 311+ 6C40             >
 311+ 6C40             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 6C40             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 6C40             >
 311+ 6C40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 6C40 67 69                        dw      TWO_DUP                 // 2dup
 313+ 6C42 32 6C                        dw      GREATER                 // >
 314+ 6C44 F5 63                        dw      ZBRANCH
 315+ 6C46 04 00                        dw      Min_Skip - $   // if
 316+ 6C48 24 69                        dw          SWAP                //      swap
 317+ 6C4A              Min_Skip:                                       // endif
 318+ 6C4A 10 69                        dw      DROP                    // drop
 319+ 6C4C 52 68                        dw      EXIT                    // ;
 320+ 6C4E
 321+ 6C4E              //  ______________________________________________________________________
 322+ 6C4E              //
 323+ 6C4E              // max          n1 n2 -- n3
 324+ 6C4E              // maximum between n1 and n2
 325+ 6C4E                              Colon_Def MAX, "MAX", is_normal
 325+ 6C4E             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 6C4E             >
 325+ 6C4E             >Dict_Ptr        defl    $
 325+ 6C4E             >
 325+ 6C4E             >//              ______________________________________________________________________
 325+ 6C4E             >//              Heap part
 325+ 6C4E             >
 325+ 6C4E             >
 325+ 6C4E             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5F3             >
 325+ E5F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5F3             >Latest_Definition defl  Heap_Ptr
 325+ E5F3             >
 325+ E5F3             >                // dummy db directives used to calculate length of namec
 325+ E5F3 4D 41 58    >                db      "MAX"
 325+ E5F6             >len_NFA         defl    $ - temp_NFA
 325+ E5F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5F3             >
 325+ E5F3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5F4 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5F7             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5F6 D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5F7             >
 325+ E5F7 EB 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F9             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F9             >
 325+ E5F9             >mirror_Ptr      defl    $
 325+ E5F9             >
 325+ E5F9 50 6C       >                dw      Dict_Ptr + 2        // xt
 325+ E5FB             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5FB             >
 325+ E5FB             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5FB             >
 325+ E5FB             >//              ______________________________________________________________________
 325+ E5FB             >//              Dictionary part
 325+ E5FB             >
 325+ E5FB             >                org     Dict_Ptr
 325+ 6C4E             >
 325+ 6C4E F9 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 6C50             >
 325+ 6C50             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 6C50 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 6C53             >
 325+ 6C53             >
 325+ 6C53             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 6C53             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 6C53             >
 325+ 6C53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 6C53 67 69                        dw      TWO_DUP                 // 2dup
 327+ 6C55 1D 6C                        dw      LESS                    // <
 328+ 6C57 F5 63                        dw      ZBRANCH
 329+ 6C59 04 00                        dw      Max_Skip - $   // if
 330+ 6C5B 24 69                        dw          SWAP                //      swap
 331+ 6C5D              Max_Skip:                                       // endif
 332+ 6C5D 10 69                        dw      DROP                    // drop
 333+ 6C5F 52 68                        dw      EXIT                    // ;
 334+ 6C61
 335+ 6C61              //  ______________________________________________________________________
 336+ 6C61              //
 337+ 6C61              // ?dup         n -- 0 | n n
 338+ 6C61              // duplicate if not zero
 339+ 6C61                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 6C61             >
 339+ 6C61             >Dict_Ptr        defl    $
 339+ 6C61             >
 339+ 6C61             >//              ______________________________________________________________________
 339+ 6C61             >//              Heap part
 339+ 6C61             >
 339+ 6C61             >
 339+ 6C61             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5FB             >
 339+ E5FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5FB             >Latest_Definition defl  Heap_Ptr
 339+ E5FB             >
 339+ E5FB             >                // dummy db directives used to calculate length of namec
 339+ E5FB 3F 44 55 50 >                db      "?DUP"
 339+ E5FF             >len_NFA         defl    $ - temp_NFA
 339+ E5FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5FB             >
 339+ E5FB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5FC 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E600             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5FF D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E600             >
 339+ E600 F3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E602             >Prev_Ptr        defl    Heap_Ptr
 339+ E602             >
 339+ E602             >mirror_Ptr      defl    $
 339+ E602             >
 339+ E602 63 6C       >                dw      Dict_Ptr + 2        // xt
 339+ E604             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E604             >
 339+ E604             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E604             >
 339+ E604             >//              ______________________________________________________________________
 339+ E604             >//              Dictionary part
 339+ E604             >
 339+ E604             >                org     Dict_Ptr
 339+ 6C61             >
 339+ 6C61 02 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 6C63             >
 339+ 6C63             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 6C63 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 6C63 ~           >
 339+ 6C63 ~           >
 339+ 6C63             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 6C63             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 6C63             >
 339+ 6C63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 6C63              QDup_Ptr:
 341+ 6C63 E1                           pop     hl
 342+ 6C64 7C                           ld      a, h
 343+ 6C65 B5                           or      l
 344+ 6C66 28 01                        jr      z, QDup_Skip
 345+ 6C68 E5                               push    hl
 346+ 6C69              QDup_Skip:
 347+ 6C69                              psh1
 347+ 6C69 E5          >                push    hl
 347+ 6C6A DD E9       >                jp      (ix)
 348+ 6C6C
 349+ 6C6C              //  ______________________________________________________________________
 350+ 6C6C              //
 351+ 6C6C              // -dup         n -- 0 | n n
 352+ 6C6C              // duplicate if not zero
 353+ 6C6C                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 6C6C             >
 353+ 6C6C             >Dict_Ptr        defl    $
 353+ 6C6C             >
 353+ 6C6C             >//              ______________________________________________________________________
 353+ 6C6C             >//              Heap part
 353+ 6C6C             >
 353+ 6C6C             >
 353+ 6C6C             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E604             >
 353+ E604             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E604             >Latest_Definition defl  Heap_Ptr
 353+ E604             >
 353+ E604             >                // dummy db directives used to calculate length of namec
 353+ E604 2D 44 55 50 >                db      "-DUP"
 353+ E608             >len_NFA         defl    $ - temp_NFA
 353+ E608             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E604             >
 353+ E604 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E605 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E609             >                org     $-1                 // alter last byte of Name just above to set
 353+ E608 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E609             >
 353+ E609 FB 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E60B             >Prev_Ptr        defl    Heap_Ptr
 353+ E60B             >
 353+ E60B             >mirror_Ptr      defl    $
 353+ E60B             >
 353+ E60B 6E 6C       >                dw      Dict_Ptr + 2        // xt
 353+ E60D             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E60D             >
 353+ E60D             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E60D             >
 353+ E60D             >//              ______________________________________________________________________
 353+ E60D             >//              Dictionary part
 353+ E60D             >
 353+ E60D             >                org     Dict_Ptr
 353+ 6C6C             >
 353+ 6C6C 0B 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 6C6E             >
 353+ 6C6E             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 6C6E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 6C6E ~           >
 353+ 6C6E ~           >
 353+ 6C6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 6C6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 6C6E             >
 353+ 6C6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 6C6E C3 63 6C                     jp      QDup_Ptr
 355+ 6C71
 356+ 6C71              //  ______________________________________________________________________
 357+ 6C71              //
 358+ 6C71              // emit         c --
 359+ 6C71                              Colon_Def EMIT, "EMIT", is_normal
 359+ 6C71             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 6C71             >
 359+ 6C71             >Dict_Ptr        defl    $
 359+ 6C71             >
 359+ 6C71             >//              ______________________________________________________________________
 359+ 6C71             >//              Heap part
 359+ 6C71             >
 359+ 6C71             >
 359+ 6C71             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E60D             >
 359+ E60D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E60D             >Latest_Definition defl  Heap_Ptr
 359+ E60D             >
 359+ E60D             >                // dummy db directives used to calculate length of namec
 359+ E60D 45 4D 49 54 >                db      "EMIT"
 359+ E611             >len_NFA         defl    $ - temp_NFA
 359+ E611             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E60D             >
 359+ E60D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E60E 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E612             >                org     $-1                 // alter last byte of Name just above to set
 359+ E611 D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E612             >
 359+ E612 04 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E614             >Prev_Ptr        defl    Heap_Ptr
 359+ E614             >
 359+ E614             >mirror_Ptr      defl    $
 359+ E614             >
 359+ E614 73 6C       >                dw      Dict_Ptr + 2        // xt
 359+ E616             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E616             >
 359+ E616             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E616             >
 359+ E616             >//              ______________________________________________________________________
 359+ E616             >//              Dictionary part
 359+ E616             >
 359+ E616             >                org     Dict_Ptr
 359+ 6C71             >
 359+ 6C71 14 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 6C73             >
 359+ 6C73             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 6C73 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 6C76             >
 359+ 6C76             >
 359+ 6C76             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 6C76             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 6C76             >
 359+ 6C76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 6C76 D4 65                        dw      C_EMIT                      // (?emit)
 361+ 6C78 63 6C                        dw      QDUP                        // ?dup
 362+ 6C7A                                                                  // if
 363+ 6C7A F5 63                        dw      ZBRANCH
 364+ 6C7C 0A 00                        dw      Emit_Skip - $
 365+ 6C7E A2 65                        dw          EMITC                   //      emitc
 366+ 6C80 88 6A                        dw          ONE                     //      1
 367+ 6C82 2E 6B 71 69                  dw          OUT, PLUSSTORE        //      out +!
 368+ 6C86              Emit_Skip:                                          // endif
 369+ 6C86 52 68                        dw      EXIT                        // ;
 370+ 6C88
 371+ 6C88              //  ______________________________________________________________________
 372+ 6C88              //
 373+ 6C88              // space        --
 374+ 6C88                              Colon_Def SPACE, "SPACE", is_normal
 374+ 6C88             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 6C88             >
 374+ 6C88             >Dict_Ptr        defl    $
 374+ 6C88             >
 374+ 6C88             >//              ______________________________________________________________________
 374+ 6C88             >//              Heap part
 374+ 6C88             >
 374+ 6C88             >
 374+ 6C88             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E616             >
 374+ E616             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E616             >Latest_Definition defl  Heap_Ptr
 374+ E616             >
 374+ E616             >                // dummy db directives used to calculate length of namec
 374+ E616 53 50 41 43 >                db      "SPACE"
 374+ E61A 45          >
 374+ E61B             >len_NFA         defl    $ - temp_NFA
 374+ E61B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E616             >
 374+ E616 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E617 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E61B 45          >
 374+ E61C             >                org     $-1                 // alter last byte of Name just above to set
 374+ E61B C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E61C             >
 374+ E61C 0D 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E61E             >Prev_Ptr        defl    Heap_Ptr
 374+ E61E             >
 374+ E61E             >mirror_Ptr      defl    $
 374+ E61E             >
 374+ E61E 8A 6C       >                dw      Dict_Ptr + 2        // xt
 374+ E620             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E620             >
 374+ E620             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E620             >
 374+ E620             >//              ______________________________________________________________________
 374+ E620             >//              Dictionary part
 374+ E620             >
 374+ E620             >                org     Dict_Ptr
 374+ 6C88             >
 374+ 6C88 1E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 6C8A             >
 374+ 6C8A             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 6C8A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 6C8D             >
 374+ 6C8D             >
 374+ 6C8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 6C8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 6C8D             >
 374+ 6C8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 6C8D A4 6A 73 6C                  dw      BL, EMIT                // bl emit
 376+ 6C91 52 68                        dw      EXIT                    // ;
 377+ 6C93
 378+ 6C93              //  ______________________________________________________________________
 379+ 6C93              //
 380+ 6C93              // traverse     a n -- a
 381+ 6C93              // A dictionary entry is structured as follows
 382+ 6C93              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 6C93              //      +1   word name, last character is toggled with $80
 384+ 6C93              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 6C93              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 6C93              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 6C93              //
 388+ 6C93                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 6C93             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 6C93             >
 388+ 6C93             >Dict_Ptr        defl    $
 388+ 6C93             >
 388+ 6C93             >//              ______________________________________________________________________
 388+ 6C93             >//              Heap part
 388+ 6C93             >
 388+ 6C93             >
 388+ 6C93             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E620             >
 388+ E620             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E620             >Latest_Definition defl  Heap_Ptr
 388+ E620             >
 388+ E620             >                // dummy db directives used to calculate length of namec
 388+ E620 54 52 41 56 >                db      "TRAVERSE"
 388+ E624 45 52 53 45 >
 388+ E628             >len_NFA         defl    $ - temp_NFA
 388+ E628             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E620             >
 388+ E620 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E621 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E625 45 52 53 45 >
 388+ E629             >                org     $-1                 // alter last byte of Name just above to set
 388+ E628 C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E629             >
 388+ E629 16 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E62B             >Prev_Ptr        defl    Heap_Ptr
 388+ E62B             >
 388+ E62B             >mirror_Ptr      defl    $
 388+ E62B             >
 388+ E62B 95 6C       >                dw      Dict_Ptr + 2        // xt
 388+ E62D             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E62D             >
 388+ E62D             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E62D             >
 388+ E62D             >//              ______________________________________________________________________
 388+ E62D             >//              Dictionary part
 388+ E62D             >
 388+ E62D             >                org     Dict_Ptr
 388+ 6C93             >
 388+ 6C93 2B 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 6C95             >
 388+ 6C95             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 6C95 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 6C98             >
 388+ 6C98             >
 388+ 6C98             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 6C98             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 6C98             >
 388+ 6C98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 6C98 24 69                        dw      SWAP                    // swap
 390+ 6C9A              Traverse_Begin:                                 // begin
 391+ 6C9A 07 69 A5 68                  dw          OVER, PLUS          //      over +
 392+ 6C9E A3 63 7F 00                  dw          LIT, 127            //      127
 393+ 6CA2 07 69 9E 69                  dw          OVER, CFETCH        //      over @
 394+ 6CA6 1D 6C                        dw          LESS                //      <
 395+ 6CA8                                                              // until
 396+ 6CA8 F5 63                        dw      ZBRANCH
 397+ 6CAA F0 FF                        dw      Traverse_Begin - $
 398+ 6CAC 15 69                        dw      NIP                     //  nip
 399+ 6CAE 52 68                        dw      EXIT                    //  ;
 400+ 6CB0
 401+ 6CB0              //  ______________________________________________________________________
 402+ 6CB0              //
 403+ 6CB0              // mmu7@        -- n
 404+ 6CB0              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 6CB0
 406+ 6CB0                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 6CB0             >
 406+ 6CB0             >Dict_Ptr        defl    $
 406+ 6CB0             >
 406+ 6CB0             >//              ______________________________________________________________________
 406+ 6CB0             >//              Heap part
 406+ 6CB0             >
 406+ 6CB0             >
 406+ 6CB0             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E62D             >
 406+ E62D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E62D             >Latest_Definition defl  Heap_Ptr
 406+ E62D             >
 406+ E62D             >                // dummy db directives used to calculate length of namec
 406+ E62D 4D 4D 55 37 >                db      "MMU7@"
 406+ E631 40          >
 406+ E632             >len_NFA         defl    $ - temp_NFA
 406+ E632             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E62D             >
 406+ E62D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E62E 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E632 40          >
 406+ E633             >                org     $-1                 // alter last byte of Name just above to set
 406+ E632 C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E633             >
 406+ E633 20 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E635             >Prev_Ptr        defl    Heap_Ptr
 406+ E635             >
 406+ E635             >mirror_Ptr      defl    $
 406+ E635             >
 406+ E635 B2 6C       >                dw      Dict_Ptr + 2        // xt
 406+ E637             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E637             >
 406+ E637             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E637             >
 406+ E637             >//              ______________________________________________________________________
 406+ E637             >//              Dictionary part
 406+ E637             >
 406+ E637             >                org     Dict_Ptr
 406+ 6CB0             >
 406+ 6CB0 35 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 6CB2             >
 406+ 6CB2             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 6CB2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 6CB2 ~           >
 406+ 6CB2 ~           >
 406+ 6CB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 6CB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 6CB2             >
 406+ 6CB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 6CB2 D9                           exx
 408+ 6CB3 CD 9F 64                     call    MMU7_read
 409+ 6CB6 D9                           exx
 410+ 6CB7 6F                           ld      l, a
 411+ 6CB8 26 00                        ld      h, 0
 412+ 6CBA E5                           push    hl
 413+ 6CBB                              next
 413+ 6CBB DD E9       >                jp      (ix)
 414+ 6CBD
 415+ 6CBD              //  ______________________________________________________________________
 416+ 6CBD              //
 417+ 6CBD              // mmu7!        n --
 418+ 6CBD              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 6CBD              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 6CBD
 421+ 6CBD                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 6CBD             >
 421+ 6CBD             >Dict_Ptr        defl    $
 421+ 6CBD             >
 421+ 6CBD             >//              ______________________________________________________________________
 421+ 6CBD             >//              Heap part
 421+ 6CBD             >
 421+ 6CBD             >
 421+ 6CBD             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E637             >
 421+ E637             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E637             >Latest_Definition defl  Heap_Ptr
 421+ E637             >
 421+ E637             >                // dummy db directives used to calculate length of namec
 421+ E637 4D 4D 55 37 >                db      "MMU7!"
 421+ E63B 21          >
 421+ E63C             >len_NFA         defl    $ - temp_NFA
 421+ E63C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E637             >
 421+ E637 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E638 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E63C 21          >
 421+ E63D             >                org     $-1                 // alter last byte of Name just above to set
 421+ E63C A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E63D             >
 421+ E63D 2D 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E63F             >Prev_Ptr        defl    Heap_Ptr
 421+ E63F             >
 421+ E63F             >mirror_Ptr      defl    $
 421+ E63F             >
 421+ E63F BF 6C       >                dw      Dict_Ptr + 2        // xt
 421+ E641             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E641             >
 421+ E641             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E641             >
 421+ E641             >//              ______________________________________________________________________
 421+ E641             >//              Dictionary part
 421+ E641             >
 421+ E641             >                org     Dict_Ptr
 421+ 6CBD             >
 421+ 6CBD 3F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 6CBF             >
 421+ 6CBF             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6CBF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6CBF ~           >
 421+ 6CBF ~           >
 421+ 6CBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6CBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6CBF             >
 421+ 6CBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6CBF E1                           pop     hl
 423+ 6CC0 7D                           ld      a, l
 424+ 6CC1 ED 92 57                     nextreg 87, a
 425+ 6CC4
 426+ 6CC4                              next
 426+ 6CC4 DD E9       >                jp      (ix)
 427+ 6CC6
 428+ 6CC6              //  ______________________________________________________________________
 429+ 6CC6              //
 430+ 6CC6              // >far         ha -- a n
 431+ 6CC6              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 6CC6              // take lower bits of H and L as an offset from E000h
 433+ 6CC6              // then return address  a  between E000h-FFFFh
 434+ 6CC6              // and page number n  between 64-71 (40h-47h)
 435+ 6CC6              // For example, in hex:
 436+ 6CC6              //   0000 >FAR  gives  40.E000
 437+ 6CC6              //   1FFF >FAR  gives  40.FFFF
 438+ 6CC6              //   2000 >FAR  gives  41.E000
 439+ 6CC6              //   3FFF >FAR  gives  41.FFFF
 440+ 6CC6              //   EFFF >FAR  gives  47.EFFF
 441+ 6CC6              //   FFFF >FAR  gives  47.FFFF
 442+ 6CC6                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 6CC6             >
 442+ 6CC6             >Dict_Ptr        defl    $
 442+ 6CC6             >
 442+ 6CC6             >//              ______________________________________________________________________
 442+ 6CC6             >//              Heap part
 442+ 6CC6             >
 442+ 6CC6             >
 442+ 6CC6             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E641             >
 442+ E641             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E641             >Latest_Definition defl  Heap_Ptr
 442+ E641             >
 442+ E641             >                // dummy db directives used to calculate length of namec
 442+ E641 3E 46 41 52 >                db      ">FAR"
 442+ E645             >len_NFA         defl    $ - temp_NFA
 442+ E645             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E641             >
 442+ E641 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E642 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E646             >                org     $-1                 // alter last byte of Name just above to set
 442+ E645 D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E646             >
 442+ E646 37 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E648             >Prev_Ptr        defl    Heap_Ptr
 442+ E648             >
 442+ E648             >mirror_Ptr      defl    $
 442+ E648             >
 442+ E648 C8 6C       >                dw      Dict_Ptr + 2        // xt
 442+ E64A             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E64A             >
 442+ E64A             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E64A             >
 442+ E64A             >//              ______________________________________________________________________
 442+ E64A             >//              Dictionary part
 442+ E64A             >
 442+ E64A             >                org     Dict_Ptr
 442+ 6CC6             >
 442+ 6CC6 48 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 6CC8             >
 442+ 6CC8             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 6CC8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 6CC8 ~           >
 442+ 6CC8 ~           >
 442+ 6CC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 6CC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 6CC8             >
 442+ 6CC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 6CC8 E1                           pop     hl
 444+ 6CC9 CD AA 64                     call    TO_FAR_rout
 445+ 6CCC E5                           push    hl
 446+ 6CCD 6F                           ld      l, a
 447+ 6CCE 26 00                        ld      h, 0
 448+ 6CD0 E5                           push    hl
 449+ 6CD1                              next
 449+ 6CD1 DD E9       >                jp      (ix)
 450+ 6CD3
 451+ 6CD3              //  ______________________________________________________________________
 452+ 6CD3              //
 453+ 6CD3              // <far         a n  -- ha
 454+ 6CD3              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 455+ 6CD3              // reverse of >FAR: encodes a FAR address compressing
 456+ 6CD3              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 6CD3                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 6CD3             >
 457+ 6CD3             >Dict_Ptr        defl    $
 457+ 6CD3             >
 457+ 6CD3             >//              ______________________________________________________________________
 457+ 6CD3             >//              Heap part
 457+ 6CD3             >
 457+ 6CD3             >
 457+ 6CD3             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E64A             >
 457+ E64A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E64A             >Latest_Definition defl  Heap_Ptr
 457+ E64A             >
 457+ E64A             >                // dummy db directives used to calculate length of namec
 457+ E64A 3C 46 41 52 >                db      "<FAR"
 457+ E64E             >len_NFA         defl    $ - temp_NFA
 457+ E64E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E64A             >
 457+ E64A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E64B 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E64F             >                org     $-1                 // alter last byte of Name just above to set
 457+ E64E D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E64F             >
 457+ E64F 41 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E651             >Prev_Ptr        defl    Heap_Ptr
 457+ E651             >
 457+ E651             >mirror_Ptr      defl    $
 457+ E651             >
 457+ E651 D5 6C       >                dw      Dict_Ptr + 2        // xt
 457+ E653             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E653             >
 457+ E653             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E653             >
 457+ E653             >//              ______________________________________________________________________
 457+ E653             >//              Dictionary part
 457+ E653             >
 457+ E653             >                org     Dict_Ptr
 457+ 6CD3             >
 457+ 6CD3 51 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 6CD5             >
 457+ 6CD5             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 6CD5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 6CD5 ~           >
 457+ 6CD5 ~           >
 457+ 6CD5             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 6CD5             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 6CD5             >
 457+ 6CD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 6CD5 E1                           pop     hl                  // page number in e
 459+ 6CD6 7D                           ld      a, l
 460+ 6CD7 E6 07                        and     07
 461+ 6CD9 0F                           rrca
 462+ 6CDA 0F                           rrca
 463+ 6CDB 0F                           rrca
 464+ 6CDC 08                           ex      af, af
 465+ 6CDD E1                           pop     hl                  // address in hl
 466+ 6CDE 7C                           ld      a, h
 467+ 6CDF E6 1F                        and     $1F
 468+ 6CE1 67                           ld      h, a
 469+ 6CE2 08                           ex      af, af
 470+ 6CE3 B4                           or      h
 471+ 6CE4 67                           ld      h, a
 472+ 6CE5                              psh1
 472+ 6CE5 E5          >                push    hl
 472+ 6CE6 DD E9       >                jp      (ix)
 473+ 6CE8
 474+ 6CE8              //  ______________________________________________________________________
 475+ 6CE8              //
 476+ 6CE8              // ?mmu7        a -- f
 477+ 6CE8              // query current page in MMU7 8K-RAM : 0 and 223
 478+ 6CE8                              Colon_Def QMMU7, "?MMU7", is_normal
 478+ 6CE8             >                New_Def  QMMU7, "?MMU7", Enter_Ptr, is_normal ; ok
 478+ 6CE8             >
 478+ 6CE8             >Dict_Ptr        defl    $
 478+ 6CE8             >
 478+ 6CE8             >//              ______________________________________________________________________
 478+ 6CE8             >//              Heap part
 478+ 6CE8             >
 478+ 6CE8             >
 478+ 6CE8             >                org     (Heap_Ptr & $1FFF) + $E000
 478+ E653             >
 478+ E653             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ E653             >Latest_Definition defl  Heap_Ptr
 478+ E653             >
 478+ E653             >                // dummy db directives used to calculate length of namec
 478+ E653 3F 4D 4D 55 >                db      "?MMU7"
 478+ E657 37          >
 478+ E658             >len_NFA         defl    $ - temp_NFA
 478+ E658             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ E653             >
 478+ E653 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ E654 3F 4D 4D 55 >                db      "?MMU7"               // name string in 7-bit ascii, but
 478+ E658 37          >
 478+ E659             >                org     $-1                 // alter last byte of Name just above to set
 478+ E658 B7          >                db      {b $} | END_BIT     // msb as name end
 478+ E659             >
 478+ E659 4A 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 478+ E65B             >Prev_Ptr        defl    Heap_Ptr
 478+ E65B             >
 478+ E65B             >mirror_Ptr      defl    $
 478+ E65B             >
 478+ E65B EA 6C       >                dw      Dict_Ptr + 2        // xt
 478+ E65D             >Heap_Ptr        defl    $ - $E000           // save current HP
 478+ E65D             >
 478+ E65D             >Current_HP      defl  $ - $E000             // used to set HP once!
 478+ E65D             >
 478+ E65D             >//              ______________________________________________________________________
 478+ E65D             >//              Dictionary part
 478+ E65D             >
 478+ E65D             >                org     Dict_Ptr
 478+ 6CE8             >
 478+ 6CE8 5B 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 478+ 6CEA             >
 478+ 6CEA             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 6CEA CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 6CED             >
 478+ 6CED             >
 478+ 6CED             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 6CED             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 6CED             >
 478+ 6CED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 6CED 2B 69                        dw      DUP
 480+ 6CEF A3 63 00 E0                  dw      LIT, $E000
 481+ 6CF3 0F 6C                        dw      ULESS
 482+ 6CF5 85 68                        dw      NOT_OP
 483+ 6CF7 52 68                        dw      EXIT
 484+ 6CF9
 485+ 6CF9              //  ______________________________________________________________________
 486+ 6CF9              //
 487+ 6CF9              // far          hp -- ha
 488+ 6CF9              // query current page in MMU7 8K-RAM : 0 and 223
 489+ 6CF9                              Colon_Def FAR, "FAR", is_normal
 489+ 6CF9             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 489+ 6CF9             >
 489+ 6CF9             >Dict_Ptr        defl    $
 489+ 6CF9             >
 489+ 6CF9             >//              ______________________________________________________________________
 489+ 6CF9             >//              Heap part
 489+ 6CF9             >
 489+ 6CF9             >
 489+ 6CF9             >                org     (Heap_Ptr & $1FFF) + $E000
 489+ E65D             >
 489+ E65D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ E65D             >Latest_Definition defl  Heap_Ptr
 489+ E65D             >
 489+ E65D             >                // dummy db directives used to calculate length of namec
 489+ E65D 46 41 52    >                db      "FAR"
 489+ E660             >len_NFA         defl    $ - temp_NFA
 489+ E660             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ E65D             >
 489+ E65D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ E65E 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 489+ E661             >                org     $-1                 // alter last byte of Name just above to set
 489+ E660 D2          >                db      {b $} | END_BIT     // msb as name end
 489+ E661             >
 489+ E661 53 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 489+ E663             >Prev_Ptr        defl    Heap_Ptr
 489+ E663             >
 489+ E663             >mirror_Ptr      defl    $
 489+ E663             >
 489+ E663 FB 6C       >                dw      Dict_Ptr + 2        // xt
 489+ E665             >Heap_Ptr        defl    $ - $E000           // save current HP
 489+ E665             >
 489+ E665             >Current_HP      defl  $ - $E000             // used to set HP once!
 489+ E665             >
 489+ E665             >//              ______________________________________________________________________
 489+ E665             >//              Dictionary part
 489+ E665             >
 489+ E665             >                org     Dict_Ptr
 489+ 6CF9             >
 489+ 6CF9 63 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 489+ 6CFB             >
 489+ 6CFB             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 6CFB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 489+ 6CFE             >
 489+ 6CFE             >
 489+ 6CFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 6CFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 6CFE             >
 489+ 6CFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 6CFE C8 6C                        dw      TO_FAR
 491+ 6D00 BF 6C                        dw      MMU7_STORE
 492+ 6D02 52 68                        dw      EXIT
 493+ 6D04
 494+ 6D04              //  ______________________________________________________________________
 495+ 6D04              //
 496+ 6D04              // ?heapp       n -- n f
 497+ 6D04              // query current page in MMU7 8K-RAM : 0 and 223
 498+ 6D04                              Colon_Def QHEAPP, "?HEAPP", is_normal
 498+ 6D04             >                New_Def  QHEAPP, "?HEAPP", Enter_Ptr, is_normal ; ok
 498+ 6D04             >
 498+ 6D04             >Dict_Ptr        defl    $
 498+ 6D04             >
 498+ 6D04             >//              ______________________________________________________________________
 498+ 6D04             >//              Heap part
 498+ 6D04             >
 498+ 6D04             >
 498+ 6D04             >                org     (Heap_Ptr & $1FFF) + $E000
 498+ E665             >
 498+ E665             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ E665             >Latest_Definition defl  Heap_Ptr
 498+ E665             >
 498+ E665             >                // dummy db directives used to calculate length of namec
 498+ E665 3F 48 45 41 >                db      "?HEAPP"
 498+ E669 50 50       >
 498+ E66B             >len_NFA         defl    $ - temp_NFA
 498+ E66B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ E665             >
 498+ E665 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ E666 3F 48 45 41 >                db      "?HEAPP"               // name string in 7-bit ascii, but
 498+ E66A 50 50       >
 498+ E66C             >                org     $-1                 // alter last byte of Name just above to set
 498+ E66B D0          >                db      {b $} | END_BIT     // msb as name end
 498+ E66C             >
 498+ E66C 5D 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 498+ E66E             >Prev_Ptr        defl    Heap_Ptr
 498+ E66E             >
 498+ E66E             >mirror_Ptr      defl    $
 498+ E66E             >
 498+ E66E 06 6D       >                dw      Dict_Ptr + 2        // xt
 498+ E670             >Heap_Ptr        defl    $ - $E000           // save current HP
 498+ E670             >
 498+ E670             >Current_HP      defl  $ - $E000             // used to set HP once!
 498+ E670             >
 498+ E670             >//              ______________________________________________________________________
 498+ E670             >//              Dictionary part
 498+ E670             >
 498+ E670             >                org     Dict_Ptr
 498+ 6D04             >
 498+ 6D04 6E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 498+ 6D06             >
 498+ 6D06             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 6D06 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 498+ 6D09             >
 498+ 6D09             >
 498+ 6D09             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 6D09             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 6D09             >
 498+ 6D09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 6D09 2B 69                        dw      DUP
 500+ 6D0B F5 63                        dw      ZBRANCH
 501+ 6D0D 08 00                        dw      QHeap_Skip - $
 502+ 6D0F A3 63 00 60                  dw          LIT, $6000
 503+ 6D13 0F 6C                        dw          ULESS
 504+ 6D15              QHeap_Skip:                                          // endif
 505+ 6D15 52 68                        dw      EXIT                        // ;
 506+ 6D17
 507+ 6D17              //  ______________________________________________________________________
 508+ 6D17              //
 509+ 6D17              // ?>heap       n1 -- n2
 510+ 6D17              // query current page in MMU7 8K-RAM : 0 and 223
 511+ 6D17                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 511+ 6D17             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 511+ 6D17             >
 511+ 6D17             >Dict_Ptr        defl    $
 511+ 6D17             >
 511+ 6D17             >//              ______________________________________________________________________
 511+ 6D17             >//              Heap part
 511+ 6D17             >
 511+ 6D17             >
 511+ 6D17             >                org     (Heap_Ptr & $1FFF) + $E000
 511+ E670             >
 511+ E670             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ E670             >Latest_Definition defl  Heap_Ptr
 511+ E670             >
 511+ E670             >                // dummy db directives used to calculate length of namec
 511+ E670 3F 3E 48 45 >                db      "?>HEAP"
 511+ E674 41 50       >
 511+ E676             >len_NFA         defl    $ - temp_NFA
 511+ E676             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ E670             >
 511+ E670 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ E671 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 511+ E675 41 50       >
 511+ E677             >                org     $-1                 // alter last byte of Name just above to set
 511+ E676 D0          >                db      {b $} | END_BIT     // msb as name end
 511+ E677             >
 511+ E677 65 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 511+ E679             >Prev_Ptr        defl    Heap_Ptr
 511+ E679             >
 511+ E679             >mirror_Ptr      defl    $
 511+ E679             >
 511+ E679 19 6D       >                dw      Dict_Ptr + 2        // xt
 511+ E67B             >Heap_Ptr        defl    $ - $E000           // save current HP
 511+ E67B             >
 511+ E67B             >Current_HP      defl  $ - $E000             // used to set HP once!
 511+ E67B             >
 511+ E67B             >//              ______________________________________________________________________
 511+ E67B             >//              Dictionary part
 511+ E67B             >
 511+ E67B             >                org     Dict_Ptr
 511+ 6D17             >
 511+ 6D17 79 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 511+ 6D19             >
 511+ 6D19             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 6D19 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 6D1C             >
 511+ 6D1C             >
 511+ 6D1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 6D1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 6D1C             >
 511+ 6D1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 6D1C 2B 69                        dw      DUP
 513+ 6D1E 06 6D                        dw      QHEAPP
 514+ 6D20 F5 63                        dw      ZBRANCH
 515+ 6D22 04 00                        dw      Q2Heap_Skip - $
 516+ 6D24 FB 6C                        dw          FAR
 517+ 6D26              Q2Heap_Skip:                                          // endif
 518+ 6D26 52 68                        dw      EXIT                        // ;
 519+ 6D28
 520+ 6D28              //  ______________________________________________________________________
 521+ 6D28              //
 522+ 6D28              // hp_fetch     -- a
 523+ 6D28                              Colon_Def HP_FETCH, "HP@", is_normal
 523+ 6D28             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 523+ 6D28             >
 523+ 6D28             >Dict_Ptr        defl    $
 523+ 6D28             >
 523+ 6D28             >//              ______________________________________________________________________
 523+ 6D28             >//              Heap part
 523+ 6D28             >
 523+ 6D28             >
 523+ 6D28             >                org     (Heap_Ptr & $1FFF) + $E000
 523+ E67B             >
 523+ E67B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ E67B             >Latest_Definition defl  Heap_Ptr
 523+ E67B             >
 523+ E67B             >                // dummy db directives used to calculate length of namec
 523+ E67B 48 50 40    >                db      "HP@"
 523+ E67E             >len_NFA         defl    $ - temp_NFA
 523+ E67E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ E67B             >
 523+ E67B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ E67C 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 523+ E67F             >                org     $-1                 // alter last byte of Name just above to set
 523+ E67E C0          >                db      {b $} | END_BIT     // msb as name end
 523+ E67F             >
 523+ E67F 70 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 523+ E681             >Prev_Ptr        defl    Heap_Ptr
 523+ E681             >
 523+ E681             >mirror_Ptr      defl    $
 523+ E681             >
 523+ E681 2A 6D       >                dw      Dict_Ptr + 2        // xt
 523+ E683             >Heap_Ptr        defl    $ - $E000           // save current HP
 523+ E683             >
 523+ E683             >Current_HP      defl  $ - $E000             // used to set HP once!
 523+ E683             >
 523+ E683             >//              ______________________________________________________________________
 523+ E683             >//              Dictionary part
 523+ E683             >
 523+ E683             >                org     Dict_Ptr
 523+ 6D28             >
 523+ 6D28 81 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 523+ 6D2A             >
 523+ 6D2A             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 6D2A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 6D2D             >
 523+ 6D2D             >
 523+ 6D2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 6D2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 6D2D             >
 523+ 6D2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 6D2D 16 6B 89 69                  dw      HP, FETCH               // hp @
 525+ 6D31 52 68                        dw      EXIT                    // ;
 526+ 6D33
 527+ 6D33              //  ______________________________________________________________________
 528+ 6D33              //
 529+ 6D33              // page-watermark   -- n
 530+ 6D33              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 531+ 6D33                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 531+ 6D33             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 531+ 6D33             >
 531+ 6D33             >Dict_Ptr        defl    $
 531+ 6D33             >
 531+ 6D33             >//              ______________________________________________________________________
 531+ 6D33             >//              Heap part
 531+ 6D33             >
 531+ 6D33             >
 531+ 6D33             >                org     (Heap_Ptr & $1FFF) + $E000
 531+ E683             >
 531+ E683             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ E683             >Latest_Definition defl  Heap_Ptr
 531+ E683             >
 531+ E683             >                // dummy db directives used to calculate length of namec
 531+ E683 50 41 47 45 >                db      "PAGE-WATERMARK"
 531+ E687 2D 57 41 54 >
 531+ E68B 45 52 4D 41 >
 531+ E68F 52 4B       >
 531+ E691             >len_NFA         defl    $ - temp_NFA
 531+ E691             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ E683             >
 531+ E683 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ E684 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 531+ E688 2D 57 41 54 >
 531+ E68C 45 52 4D 41 >
 531+ E690 52 4B       >
 531+ E692             >                org     $-1                 // alter last byte of Name just above to set
 531+ E691 CB          >                db      {b $} | END_BIT     // msb as name end
 531+ E692             >
 531+ E692 7B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 531+ E694             >Prev_Ptr        defl    Heap_Ptr
 531+ E694             >
 531+ E694             >mirror_Ptr      defl    $
 531+ E694             >
 531+ E694 35 6D       >                dw      Dict_Ptr + 2        // xt
 531+ E696             >Heap_Ptr        defl    $ - $E000           // save current HP
 531+ E696             >
 531+ E696             >Current_HP      defl  $ - $E000             // used to set HP once!
 531+ E696             >
 531+ E696             >//              ______________________________________________________________________
 531+ E696             >//              Dictionary part
 531+ E696             >
 531+ E696             >                org     Dict_Ptr
 531+ 6D33             >
 531+ 6D33 94 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 531+ 6D35             >
 531+ 6D35             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 6D35 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 531+ 6D38             >
 531+ 6D38             >
 531+ 6D38             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 6D38             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 6D38             >
 531+ 6D38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 6D38 80 1F       >                dw      $1F80
 532+ 6D3A
 533+ 6D3A              //  ______________________________________________________________________
 534+ 6D3A              //
 535+ 6D3A              // skip-hp-page ha -- a
 536+ 6D3A                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 536+ 6D3A             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 536+ 6D3A             >
 536+ 6D3A             >Dict_Ptr        defl    $
 536+ 6D3A             >
 536+ 6D3A             >//              ______________________________________________________________________
 536+ 6D3A             >//              Heap part
 536+ 6D3A             >
 536+ 6D3A             >
 536+ 6D3A             >                org     (Heap_Ptr & $1FFF) + $E000
 536+ E696             >
 536+ E696             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ E696             >Latest_Definition defl  Heap_Ptr
 536+ E696             >
 536+ E696             >                // dummy db directives used to calculate length of namec
 536+ E696 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 536+ E69A 2D 48 50 2D >
 536+ E69E 50 41 47 45 >
 536+ E6A2             >len_NFA         defl    $ - temp_NFA
 536+ E6A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ E696             >
 536+ E696 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ E697 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 536+ E69B 2D 48 50 2D >
 536+ E69F 50 41 47 45 >
 536+ E6A3             >                org     $-1                 // alter last byte of Name just above to set
 536+ E6A2 C5          >                db      {b $} | END_BIT     // msb as name end
 536+ E6A3             >
 536+ E6A3 83 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 536+ E6A5             >Prev_Ptr        defl    Heap_Ptr
 536+ E6A5             >
 536+ E6A5             >mirror_Ptr      defl    $
 536+ E6A5             >
 536+ E6A5 3C 6D       >                dw      Dict_Ptr + 2        // xt
 536+ E6A7             >Heap_Ptr        defl    $ - $E000           // save current HP
 536+ E6A7             >
 536+ E6A7             >Current_HP      defl  $ - $E000             // used to set HP once!
 536+ E6A7             >
 536+ E6A7             >//              ______________________________________________________________________
 536+ E6A7             >//              Dictionary part
 536+ E6A7             >
 536+ E6A7             >                org     Dict_Ptr
 536+ 6D3A             >
 536+ 6D3A A5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 536+ 6D3C             >
 536+ 6D3C             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 6D3C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 536+ 6D3F             >
 536+ 6D3F             >
 536+ 6D3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 6D3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 6D3F             >
 536+ 6D3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 6D3F 2A 6D                        dw      HP_FETCH                // hp@
 538+ 6D41 A3 63 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 538+ 6D45 0C 68
 539+ 6D47 A5 68                        dw      PLUS
 540+ 6D49 35 6D                        dw      PAGE_WATERMARK
 541+ 6D4B 32 6C                        dw      GREATER
 542+ 6D4D F5 63                        dw      ZBRANCH
 543+ 6D4F 12 00                        dw      Skip_Skip - $   // if
 544+ 6D51 2A 6D                        dw      HP_FETCH
 545+ 6D53 A3 63 FF 1F                  dw      LIT, $1FFF, OR_OP
 545+ 6D57 1B 68
 546+ 6D59 BE 68 CC 68                  dw      ONE_PLUS, TWO_PLUS
 547+ 6D5D 16 6B 93 69                  dw      HP, STORE
 548+ 6D61              Skip_Skip:
 549+ 6D61 52 68                        dw      EXIT                    // ;
 550+ 6D63              //  ______________________________________________________________________
 551+ 6D63              //
 552+ 6D63              // latest       -- nfa
 553+ 6D63                              Colon_Def LATEST, "LATEST", is_normal
 553+ 6D63             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 553+ 6D63             >
 553+ 6D63             >Dict_Ptr        defl    $
 553+ 6D63             >
 553+ 6D63             >//              ______________________________________________________________________
 553+ 6D63             >//              Heap part
 553+ 6D63             >
 553+ 6D63             >
 553+ 6D63             >                org     (Heap_Ptr & $1FFF) + $E000
 553+ E6A7             >
 553+ E6A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 553+ E6A7             >Latest_Definition defl  Heap_Ptr
 553+ E6A7             >
 553+ E6A7             >                // dummy db directives used to calculate length of namec
 553+ E6A7 4C 41 54 45 >                db      "LATEST"
 553+ E6AB 53 54       >
 553+ E6AD             >len_NFA         defl    $ - temp_NFA
 553+ E6AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 553+ E6A7             >
 553+ E6A7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 553+ E6A8 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 553+ E6AC 53 54       >
 553+ E6AE             >                org     $-1                 // alter last byte of Name just above to set
 553+ E6AD D4          >                db      {b $} | END_BIT     // msb as name end
 553+ E6AE             >
 553+ E6AE 96 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 553+ E6B0             >Prev_Ptr        defl    Heap_Ptr
 553+ E6B0             >
 553+ E6B0             >mirror_Ptr      defl    $
 553+ E6B0             >
 553+ E6B0 65 6D       >                dw      Dict_Ptr + 2        // xt
 553+ E6B2             >Heap_Ptr        defl    $ - $E000           // save current HP
 553+ E6B2             >
 553+ E6B2             >Current_HP      defl  $ - $E000             // used to set HP once!
 553+ E6B2             >
 553+ E6B2             >//              ______________________________________________________________________
 553+ E6B2             >//              Dictionary part
 553+ E6B2             >
 553+ E6B2             >                org     Dict_Ptr
 553+ 6D63             >
 553+ 6D63 B0 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 553+ 6D65             >
 553+ 6D65             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 553+ 6D65 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 553+ 6D68             >
 553+ 6D68             >
 553+ 6D68             >                endif           ; ok        // for other definitions it "points" the correct handler
 553+ 6D68             >                // Use of "; ok" to suppress "warning[fwdref]"
 553+ 6D68             >
 553+ 6D68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 554+ 6D68 46 6B                        dw      CURRENT                 // current
 555+ 6D6A 89 69 89 69                  dw      FETCH, FETCH            // @ @
 556+ 6D6E FB 6C                        dw      FAR // Q TO HEAP
 557+ 6D70 52 68                        dw      EXIT                    // ;
 558+ 6D72
 559+ 6D72              //  ______________________________________________________________________
 560+ 6D72              //
 561+ 6D72              // >body        cfa -- pfa
 562+ 6D72                              Colon_Def TO_BODY, ">BODY", is_normal
 562+ 6D72             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 562+ 6D72             >
 562+ 6D72             >Dict_Ptr        defl    $
 562+ 6D72             >
 562+ 6D72             >//              ______________________________________________________________________
 562+ 6D72             >//              Heap part
 562+ 6D72             >
 562+ 6D72             >
 562+ 6D72             >                org     (Heap_Ptr & $1FFF) + $E000
 562+ E6B2             >
 562+ E6B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ E6B2             >Latest_Definition defl  Heap_Ptr
 562+ E6B2             >
 562+ E6B2             >                // dummy db directives used to calculate length of namec
 562+ E6B2 3E 42 4F 44 >                db      ">BODY"
 562+ E6B6 59          >
 562+ E6B7             >len_NFA         defl    $ - temp_NFA
 562+ E6B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ E6B2             >
 562+ E6B2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ E6B3 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 562+ E6B7 59          >
 562+ E6B8             >                org     $-1                 // alter last byte of Name just above to set
 562+ E6B7 D9          >                db      {b $} | END_BIT     // msb as name end
 562+ E6B8             >
 562+ E6B8 A7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 562+ E6BA             >Prev_Ptr        defl    Heap_Ptr
 562+ E6BA             >
 562+ E6BA             >mirror_Ptr      defl    $
 562+ E6BA             >
 562+ E6BA 74 6D       >                dw      Dict_Ptr + 2        // xt
 562+ E6BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 562+ E6BC             >
 562+ E6BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 562+ E6BC             >
 562+ E6BC             >//              ______________________________________________________________________
 562+ E6BC             >//              Dictionary part
 562+ E6BC             >
 562+ E6BC             >                org     Dict_Ptr
 562+ 6D72             >
 562+ 6D72 BA 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 562+ 6D74             >
 562+ 6D74             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 6D74 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 6D77             >
 562+ 6D77             >
 562+ 6D77             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 6D77             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 6D77             >
 562+ 6D77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 6D77 96 6A A5 68                  dw      THREE, PLUS             // cell+ --> 3 +
 564+ 6D7B 52 68                        dw      EXIT                    // ;
 565+ 6D7D
 566+ 6D7D              //  ______________________________________________________________________
 567+ 6D7D              //
 568+ 6D7D              // <name        cfa -- nfa
 569+ 6D7D                              Colon_Def TO_NAME, "<NAME", is_normal
 569+ 6D7D             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 569+ 6D7D             >
 569+ 6D7D             >Dict_Ptr        defl    $
 569+ 6D7D             >
 569+ 6D7D             >//              ______________________________________________________________________
 569+ 6D7D             >//              Heap part
 569+ 6D7D             >
 569+ 6D7D             >
 569+ 6D7D             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6BC             >
 569+ E6BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6BC             >Latest_Definition defl  Heap_Ptr
 569+ E6BC             >
 569+ E6BC             >                // dummy db directives used to calculate length of namec
 569+ E6BC 3C 4E 41 4D >                db      "<NAME"
 569+ E6C0 45          >
 569+ E6C1             >len_NFA         defl    $ - temp_NFA
 569+ E6C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6BC             >
 569+ E6BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6BD 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 569+ E6C1 45          >
 569+ E6C2             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6C1 C5          >                db      {b $} | END_BIT     // msb as name end
 569+ E6C2             >
 569+ E6C2 B2 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6C4             >Prev_Ptr        defl    Heap_Ptr
 569+ E6C4             >
 569+ E6C4             >mirror_Ptr      defl    $
 569+ E6C4             >
 569+ E6C4 7F 6D       >                dw      Dict_Ptr + 2        // xt
 569+ E6C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6C6             >
 569+ E6C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6C6             >
 569+ E6C6             >//              ______________________________________________________________________
 569+ E6C6             >//              Dictionary part
 569+ E6C6             >
 569+ E6C6             >                org     Dict_Ptr
 569+ 6D7D             >
 569+ 6D7D C4 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 6D7F             >
 569+ 6D7F             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 6D7F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 6D82             >
 569+ 6D82             >
 569+ 6D82             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 6D82             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 6D82             >
 569+ 6D82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 6D82 D9 68                        dw      CELL_MINUS              // cell-
 571+ 6D84 2B 69 89 69                  dw      DUP, FETCH
 572+ 6D88 06 6D                        dw      QHEAPP
 573+ 6D8A F5 63                        dw      ZBRANCH
 574+ 6D8C 08 00                        dw      ToName_Skip - $
 575+ 6D8E 89 69 FB 6C                  dw          FETCH, FAR
 576+ 6D92 D9 68                        dw          CELL_MINUS
 577+ 6D94              ToName_Skip:                                    // endif
 578+ 6D94
 579+ 6D94 C5 68                        dw      ONE_SUBTRACT            // 1-
 580+ 6D96 9D 6A                        dw      NEG_ONE                 // -1
 581+ 6D98 95 6C                        dw      TRAVERSE                // traverse
 582+ 6D9A 52 68                        dw      EXIT                    // ;
 583+ 6D9C
 584+ 6D9C              //  ______________________________________________________________________
 585+ 6D9C              //
 586+ 6D9C              // cfa          pfa -- cfa
 587+ 6D9C                              Colon_Def CFA, "CFA", is_normal
 587+ 6D9C             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 587+ 6D9C             >
 587+ 6D9C             >Dict_Ptr        defl    $
 587+ 6D9C             >
 587+ 6D9C             >//              ______________________________________________________________________
 587+ 6D9C             >//              Heap part
 587+ 6D9C             >
 587+ 6D9C             >
 587+ 6D9C             >                org     (Heap_Ptr & $1FFF) + $E000
 587+ E6C6             >
 587+ E6C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ E6C6             >Latest_Definition defl  Heap_Ptr
 587+ E6C6             >
 587+ E6C6             >                // dummy db directives used to calculate length of namec
 587+ E6C6 43 46 41    >                db      "CFA"
 587+ E6C9             >len_NFA         defl    $ - temp_NFA
 587+ E6C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ E6C6             >
 587+ E6C6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ E6C7 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 587+ E6CA             >                org     $-1                 // alter last byte of Name just above to set
 587+ E6C9 C1          >                db      {b $} | END_BIT     // msb as name end
 587+ E6CA             >
 587+ E6CA BC 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 587+ E6CC             >Prev_Ptr        defl    Heap_Ptr
 587+ E6CC             >
 587+ E6CC             >mirror_Ptr      defl    $
 587+ E6CC             >
 587+ E6CC 9E 6D       >                dw      Dict_Ptr + 2        // xt
 587+ E6CE             >Heap_Ptr        defl    $ - $E000           // save current HP
 587+ E6CE             >
 587+ E6CE             >Current_HP      defl  $ - $E000             // used to set HP once!
 587+ E6CE             >
 587+ E6CE             >//              ______________________________________________________________________
 587+ E6CE             >//              Dictionary part
 587+ E6CE             >
 587+ E6CE             >                org     Dict_Ptr
 587+ 6D9C             >
 587+ 6D9C CC 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 587+ 6D9E             >
 587+ 6D9E             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 6D9E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 587+ 6DA1             >
 587+ 6DA1             >
 587+ 6DA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 6DA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 6DA1             >
 587+ 6DA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 6DA1 96 6A F8 6B                  dw      THREE, SUBTRACT         // 3 -
 589+ 6DA5 52 68                        dw      EXIT                    // ;
 590+ 6DA7
 591+ 6DA7              //  ______________________________________________________________________
 592+ 6DA7              //
 593+ 6DA7              // nfa          pfa -- nfa
 594+ 6DA7                              Colon_Def NFA, "NFA", is_normal
 594+ 6DA7             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 594+ 6DA7             >
 594+ 6DA7             >Dict_Ptr        defl    $
 594+ 6DA7             >
 594+ 6DA7             >//              ______________________________________________________________________
 594+ 6DA7             >//              Heap part
 594+ 6DA7             >
 594+ 6DA7             >
 594+ 6DA7             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6CE             >
 594+ E6CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6CE             >Latest_Definition defl  Heap_Ptr
 594+ E6CE             >
 594+ E6CE             >                // dummy db directives used to calculate length of namec
 594+ E6CE 4E 46 41    >                db      "NFA"
 594+ E6D1             >len_NFA         defl    $ - temp_NFA
 594+ E6D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6CE             >
 594+ E6CE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6CF 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 594+ E6D2             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6D1 C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6D2             >
 594+ E6D2 C6 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6D4             >Prev_Ptr        defl    Heap_Ptr
 594+ E6D4             >
 594+ E6D4             >mirror_Ptr      defl    $
 594+ E6D4             >
 594+ E6D4 A9 6D       >                dw      Dict_Ptr + 2        // xt
 594+ E6D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6D6             >
 594+ E6D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6D6             >
 594+ E6D6             >//              ______________________________________________________________________
 594+ E6D6             >//              Dictionary part
 594+ E6D6             >
 594+ E6D6             >                org     Dict_Ptr
 594+ 6DA7             >
 594+ 6DA7 D4 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 6DA9             >
 594+ 6DA9             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 6DA9 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 6DAC             >
 594+ 6DAC             >
 594+ 6DAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 6DAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 6DAC             >
 594+ 6DAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 6DAC 9E 6D                        dw      CFA                     // cfa
 596+ 6DAE 7F 6D                        dw      TO_NAME                 // traverse
 597+ 6DB0 52 68                        dw      EXIT                    // ;
 598+ 6DB2
 599+ 6DB2              //  ______________________________________________________________________
 600+ 6DB2              //
 601+ 6DB2              // lfa          pfa -- lfa
 602+ 6DB2                              Colon_Def LFA, "LFA", is_normal
 602+ 6DB2             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 602+ 6DB2             >
 602+ 6DB2             >Dict_Ptr        defl    $
 602+ 6DB2             >
 602+ 6DB2             >//              ______________________________________________________________________
 602+ 6DB2             >//              Heap part
 602+ 6DB2             >
 602+ 6DB2             >
 602+ 6DB2             >                org     (Heap_Ptr & $1FFF) + $E000
 602+ E6D6             >
 602+ E6D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ E6D6             >Latest_Definition defl  Heap_Ptr
 602+ E6D6             >
 602+ E6D6             >                // dummy db directives used to calculate length of namec
 602+ E6D6 4C 46 41    >                db      "LFA"
 602+ E6D9             >len_NFA         defl    $ - temp_NFA
 602+ E6D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ E6D6             >
 602+ E6D6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ E6D7 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 602+ E6DA             >                org     $-1                 // alter last byte of Name just above to set
 602+ E6D9 C1          >                db      {b $} | END_BIT     // msb as name end
 602+ E6DA             >
 602+ E6DA CE 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 602+ E6DC             >Prev_Ptr        defl    Heap_Ptr
 602+ E6DC             >
 602+ E6DC             >mirror_Ptr      defl    $
 602+ E6DC             >
 602+ E6DC B4 6D       >                dw      Dict_Ptr + 2        // xt
 602+ E6DE             >Heap_Ptr        defl    $ - $E000           // save current HP
 602+ E6DE             >
 602+ E6DE             >Current_HP      defl  $ - $E000             // used to set HP once!
 602+ E6DE             >
 602+ E6DE             >//              ______________________________________________________________________
 602+ E6DE             >//              Dictionary part
 602+ E6DE             >
 602+ E6DE             >                org     Dict_Ptr
 602+ 6DB2             >
 602+ 6DB2 DC 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 602+ 6DB4             >
 602+ 6DB4             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 6DB4 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 6DB7             >
 602+ 6DB7             >
 602+ 6DB7             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 6DB7             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 6DB7             >
 602+ 6DB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 6DB7 A9 6D                        dw      NFA                     // nfa
 604+ 6DB9 88 6A                        dw      ONE                     // 1
 605+ 6DBB 95 6C                        dw      TRAVERSE                // traverse
 606+ 6DBD BE 68                        dw      ONE_PLUS                // 1+
 607+ 6DBF 52 68                        dw      EXIT                    // ;
 608+ 6DC1
 609+ 6DC1              //  ______________________________________________________________________
 610+ 6DC1              //
 611+ 6DC1              // pfa          nfa -- pfa
 612+ 6DC1                              Colon_Def PFA, "PFA", is_normal
 612+ 6DC1             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 612+ 6DC1             >
 612+ 6DC1             >Dict_Ptr        defl    $
 612+ 6DC1             >
 612+ 6DC1             >//              ______________________________________________________________________
 612+ 6DC1             >//              Heap part
 612+ 6DC1             >
 612+ 6DC1             >
 612+ 6DC1             >                org     (Heap_Ptr & $1FFF) + $E000
 612+ E6DE             >
 612+ E6DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 612+ E6DE             >Latest_Definition defl  Heap_Ptr
 612+ E6DE             >
 612+ E6DE             >                // dummy db directives used to calculate length of namec
 612+ E6DE 50 46 41    >                db      "PFA"
 612+ E6E1             >len_NFA         defl    $ - temp_NFA
 612+ E6E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 612+ E6DE             >
 612+ E6DE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 612+ E6DF 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 612+ E6E2             >                org     $-1                 // alter last byte of Name just above to set
 612+ E6E1 C1          >                db      {b $} | END_BIT     // msb as name end
 612+ E6E2             >
 612+ E6E2 D6 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 612+ E6E4             >Prev_Ptr        defl    Heap_Ptr
 612+ E6E4             >
 612+ E6E4             >mirror_Ptr      defl    $
 612+ E6E4             >
 612+ E6E4 C3 6D       >                dw      Dict_Ptr + 2        // xt
 612+ E6E6             >Heap_Ptr        defl    $ - $E000           // save current HP
 612+ E6E6             >
 612+ E6E6             >Current_HP      defl  $ - $E000             // used to set HP once!
 612+ E6E6             >
 612+ E6E6             >//              ______________________________________________________________________
 612+ E6E6             >//              Dictionary part
 612+ E6E6             >
 612+ E6E6             >                org     Dict_Ptr
 612+ 6DC1             >
 612+ 6DC1 E4 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 612+ 6DC3             >
 612+ 6DC3             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 612+ 6DC3 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 612+ 6DC6             >
 612+ 6DC6             >
 612+ 6DC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 612+ 6DC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 612+ 6DC6             >
 612+ 6DC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 613+ 6DC6 19 6D                        dw      QTOHEAP
 614+ 6DC8 88 6A                        dw      ONE                     // 1
 615+ 6DCA 95 6C                        dw      TRAVERSE                // traverse
 616+ 6DCC BE 68                        dw      ONE_PLUS                // 1+
 617+ 6DCE D4 68                        dw      CELL_PLUS               // cell+
 618+ 6DD0 EA 6C                        dw      QMMU7
 619+ 6DD2 F5 63                        dw      ZBRANCH
 620+ 6DD4 0E 00                        dw      PFA_Skip - $
 621+ 6DD6 B2 6C                        dw          MMU7_FETCH
 622+ 6DD8 88 6A F8 6B                  dw          ONE, SUBTRACT
 623+ 6DDC F5 63                        dw          ZBRANCH
 624+ 6DDE 04 00                        dw          PFA_Skip - $
 625+ 6DE0 89 69                        dw              FETCH
 626+ 6DE2              PFA_Skip:                                    // endif
 627+ 6DE2 74 6D                        dw      TO_BODY                 // >body
 628+ 6DE4 52 68                        dw      EXIT                    // ;
 629+ 6DE6
 630+ 6DE6              //  ______________________________________________________________________
 631+ 6DE6              //
 632+ 6DE6              // !csp         --
 633+ 6DE6              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 634+ 6DE6                              Colon_Def STORE_CSP, "!CSP", is_normal
 634+ 6DE6             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 634+ 6DE6             >
 634+ 6DE6             >Dict_Ptr        defl    $
 634+ 6DE6             >
 634+ 6DE6             >//              ______________________________________________________________________
 634+ 6DE6             >//              Heap part
 634+ 6DE6             >
 634+ 6DE6             >
 634+ 6DE6             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ E6E6             >
 634+ E6E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ E6E6             >Latest_Definition defl  Heap_Ptr
 634+ E6E6             >
 634+ E6E6             >                // dummy db directives used to calculate length of namec
 634+ E6E6 21 43 53 50 >                db      "!CSP"
 634+ E6EA             >len_NFA         defl    $ - temp_NFA
 634+ E6EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ E6E6             >
 634+ E6E6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ E6E7 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 634+ E6EB             >                org     $-1                 // alter last byte of Name just above to set
 634+ E6EA D0          >                db      {b $} | END_BIT     // msb as name end
 634+ E6EB             >
 634+ E6EB DE 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ E6ED             >Prev_Ptr        defl    Heap_Ptr
 634+ E6ED             >
 634+ E6ED             >mirror_Ptr      defl    $
 634+ E6ED             >
 634+ E6ED E8 6D       >                dw      Dict_Ptr + 2        // xt
 634+ E6EF             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ E6EF             >
 634+ E6EF             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ E6EF             >
 634+ E6EF             >//              ______________________________________________________________________
 634+ E6EF             >//              Dictionary part
 634+ E6EF             >
 634+ E6EF             >                org     Dict_Ptr
 634+ 6DE6             >
 634+ 6DE6 ED 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 6DE8             >
 634+ 6DE8             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 6DE8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 6DEB             >
 634+ 6DEB             >
 634+ 6DEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 6DEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 6DEB             >
 634+ 6DEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 6DEB 39 68                        dw      SPFETCH                 // sp@
 636+ 6DED 64 6B 93 69                  dw      CSP, STORE              // csp !
 637+ 6DF1 52 68                        dw      EXIT                    // ;
 638+ 6DF3
 639+ 6DF3              //  ______________________________________________________________________
 640+ 6DF3              //
 641+ 6DF3              // ?error       f n --
 642+ 6DF3              // rase error n if flag f it true
 643+ 6DF3                              Colon_Def QERROR, "?ERROR", is_normal
 643+ 6DF3             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 643+ 6DF3             >
 643+ 6DF3             >Dict_Ptr        defl    $
 643+ 6DF3             >
 643+ 6DF3             >//              ______________________________________________________________________
 643+ 6DF3             >//              Heap part
 643+ 6DF3             >
 643+ 6DF3             >
 643+ 6DF3             >                org     (Heap_Ptr & $1FFF) + $E000
 643+ E6EF             >
 643+ E6EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ E6EF             >Latest_Definition defl  Heap_Ptr
 643+ E6EF             >
 643+ E6EF             >                // dummy db directives used to calculate length of namec
 643+ E6EF 3F 45 52 52 >                db      "?ERROR"
 643+ E6F3 4F 52       >
 643+ E6F5             >len_NFA         defl    $ - temp_NFA
 643+ E6F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ E6EF             >
 643+ E6EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ E6F0 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 643+ E6F4 4F 52       >
 643+ E6F6             >                org     $-1                 // alter last byte of Name just above to set
 643+ E6F5 D2          >                db      {b $} | END_BIT     // msb as name end
 643+ E6F6             >
 643+ E6F6 E6 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 643+ E6F8             >Prev_Ptr        defl    Heap_Ptr
 643+ E6F8             >
 643+ E6F8             >mirror_Ptr      defl    $
 643+ E6F8             >
 643+ E6F8 F5 6D       >                dw      Dict_Ptr + 2        // xt
 643+ E6FA             >Heap_Ptr        defl    $ - $E000           // save current HP
 643+ E6FA             >
 643+ E6FA             >Current_HP      defl  $ - $E000             // used to set HP once!
 643+ E6FA             >
 643+ E6FA             >//              ______________________________________________________________________
 643+ E6FA             >//              Dictionary part
 643+ E6FA             >
 643+ E6FA             >                org     Dict_Ptr
 643+ 6DF3             >
 643+ 6DF3 F8 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 643+ 6DF5             >
 643+ 6DF5             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 6DF5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 6DF8             >
 643+ 6DF8             >
 643+ 6DF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 6DF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 6DF8             >
 643+ 6DF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 6DF8 24 69                        dw      SWAP                    // swap
 645+ 6DFA                                                              // if
 646+ 6DFA F5 63                        dw      ZBRANCH
 647+ 6DFC 08 00                        dw      QError_Else - $
 648+ 6DFE 17 73                        dw          ERROR               //      error  ( is a forward-ref )
 649+ 6E00                                                              // else
 650+ 6E00 E8 63                        dw      BRANCH
 651+ 6E02 04 00                        dw      QError_Endif - $
 652+ 6E04              QError_Else:
 653+ 6E04 10 69                        dw          DROP                //      drop
 654+ 6E06              QError_Endif:                                   // endif
 655+ 6E06 52 68                        dw      EXIT                    // ;
 656+ 6E08
 657+ 6E08              //  ______________________________________________________________________
 658+ 6E08              //
 659+ 6E08              // ?comp       --
 660+ 6E08              // raise msg #17 if not compiling
 661+ 6E08                              Colon_Def QCOMP, "?COMP", is_normal
 661+ 6E08             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 661+ 6E08             >
 661+ 6E08             >Dict_Ptr        defl    $
 661+ 6E08             >
 661+ 6E08             >//              ______________________________________________________________________
 661+ 6E08             >//              Heap part
 661+ 6E08             >
 661+ 6E08             >
 661+ 6E08             >                org     (Heap_Ptr & $1FFF) + $E000
 661+ E6FA             >
 661+ E6FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 661+ E6FA             >Latest_Definition defl  Heap_Ptr
 661+ E6FA             >
 661+ E6FA             >                // dummy db directives used to calculate length of namec
 661+ E6FA 3F 43 4F 4D >                db      "?COMP"
 661+ E6FE 50          >
 661+ E6FF             >len_NFA         defl    $ - temp_NFA
 661+ E6FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 661+ E6FA             >
 661+ E6FA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 661+ E6FB 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 661+ E6FF 50          >
 661+ E700             >                org     $-1                 // alter last byte of Name just above to set
 661+ E6FF D0          >                db      {b $} | END_BIT     // msb as name end
 661+ E700             >
 661+ E700 EF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 661+ E702             >Prev_Ptr        defl    Heap_Ptr
 661+ E702             >
 661+ E702             >mirror_Ptr      defl    $
 661+ E702             >
 661+ E702 0A 6E       >                dw      Dict_Ptr + 2        // xt
 661+ E704             >Heap_Ptr        defl    $ - $E000           // save current HP
 661+ E704             >
 661+ E704             >Current_HP      defl  $ - $E000             // used to set HP once!
 661+ E704             >
 661+ E704             >//              ______________________________________________________________________
 661+ E704             >//              Dictionary part
 661+ E704             >
 661+ E704             >                org     Dict_Ptr
 661+ 6E08             >
 661+ 6E08 02 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 661+ 6E0A             >
 661+ 6E0A             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 661+ 6E0A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 661+ 6E0D             >
 661+ 6E0D             >
 661+ 6E0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 661+ 6E0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 661+ 6E0D             >
 661+ 6E0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 662+ 6E0D 4C 6B 89 69                  dw      STATE, FETCH            // state @
 663+ 6E11 77 68                        dw      ZEQUAL                  // 0=
 664+ 6E13 A3 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 665+ 6E17 F5 6D                        dw      QERROR                  // ?error
 666+ 6E19 52 68                        dw      EXIT                    // ;
 667+ 6E1B
 668+ 6E1B              //  ______________________________________________________________________
 669+ 6E1B              //
 670+ 6E1B              // ?exec       --
 671+ 6E1B              // raise msg #18 if compiling
 672+ 6E1B                              Colon_Def QEXEC, "?EXEC", is_normal
 672+ 6E1B             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 672+ 6E1B             >
 672+ 6E1B             >Dict_Ptr        defl    $
 672+ 6E1B             >
 672+ 6E1B             >//              ______________________________________________________________________
 672+ 6E1B             >//              Heap part
 672+ 6E1B             >
 672+ 6E1B             >
 672+ 6E1B             >                org     (Heap_Ptr & $1FFF) + $E000
 672+ E704             >
 672+ E704             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ E704             >Latest_Definition defl  Heap_Ptr
 672+ E704             >
 672+ E704             >                // dummy db directives used to calculate length of namec
 672+ E704 3F 45 58 45 >                db      "?EXEC"
 672+ E708 43          >
 672+ E709             >len_NFA         defl    $ - temp_NFA
 672+ E709             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ E704             >
 672+ E704 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ E705 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 672+ E709 43          >
 672+ E70A             >                org     $-1                 // alter last byte of Name just above to set
 672+ E709 C3          >                db      {b $} | END_BIT     // msb as name end
 672+ E70A             >
 672+ E70A FA 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 672+ E70C             >Prev_Ptr        defl    Heap_Ptr
 672+ E70C             >
 672+ E70C             >mirror_Ptr      defl    $
 672+ E70C             >
 672+ E70C 1D 6E       >                dw      Dict_Ptr + 2        // xt
 672+ E70E             >Heap_Ptr        defl    $ - $E000           // save current HP
 672+ E70E             >
 672+ E70E             >Current_HP      defl  $ - $E000             // used to set HP once!
 672+ E70E             >
 672+ E70E             >//              ______________________________________________________________________
 672+ E70E             >//              Dictionary part
 672+ E70E             >
 672+ E70E             >                org     Dict_Ptr
 672+ 6E1B             >
 672+ 6E1B 0C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 672+ 6E1D             >
 672+ 6E1D             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 6E1D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 6E20             >
 672+ 6E20             >
 672+ 6E20             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 6E20             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 6E20             >
 672+ 6E20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 6E20 4C 6B 89 69                  dw      STATE, FETCH            // state @
 674+ 6E24 A3 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 675+ 6E28 F5 6D                        dw      QERROR                  // ?error
 676+ 6E2A 52 68                        dw      EXIT                    // ;
 677+ 6E2C
 678+ 6E2C              //  ______________________________________________________________________
 679+ 6E2C              //
 680+ 6E2C              // ?pairs       n1 n2 --
 681+ 6E2C              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 682+ 6E2C                              Colon_Def QPAIRS, "?PAIRS", is_normal
 682+ 6E2C             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 682+ 6E2C             >
 682+ 6E2C             >Dict_Ptr        defl    $
 682+ 6E2C             >
 682+ 6E2C             >//              ______________________________________________________________________
 682+ 6E2C             >//              Heap part
 682+ 6E2C             >
 682+ 6E2C             >
 682+ 6E2C             >                org     (Heap_Ptr & $1FFF) + $E000
 682+ E70E             >
 682+ E70E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ E70E             >Latest_Definition defl  Heap_Ptr
 682+ E70E             >
 682+ E70E             >                // dummy db directives used to calculate length of namec
 682+ E70E 3F 50 41 49 >                db      "?PAIRS"
 682+ E712 52 53       >
 682+ E714             >len_NFA         defl    $ - temp_NFA
 682+ E714             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ E70E             >
 682+ E70E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ E70F 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 682+ E713 52 53       >
 682+ E715             >                org     $-1                 // alter last byte of Name just above to set
 682+ E714 D3          >                db      {b $} | END_BIT     // msb as name end
 682+ E715             >
 682+ E715 04 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 682+ E717             >Prev_Ptr        defl    Heap_Ptr
 682+ E717             >
 682+ E717             >mirror_Ptr      defl    $
 682+ E717             >
 682+ E717 2E 6E       >                dw      Dict_Ptr + 2        // xt
 682+ E719             >Heap_Ptr        defl    $ - $E000           // save current HP
 682+ E719             >
 682+ E719             >Current_HP      defl  $ - $E000             // used to set HP once!
 682+ E719             >
 682+ E719             >//              ______________________________________________________________________
 682+ E719             >//              Dictionary part
 682+ E719             >
 682+ E719             >                org     Dict_Ptr
 682+ 6E2C             >
 682+ 6E2C 17 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 682+ 6E2E             >
 682+ 6E2E             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 6E2E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 6E31             >
 682+ 6E31             >
 682+ 6E31             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 6E31             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 6E31             >
 682+ 6E31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 6E31 F8 6B                        dw      SUBTRACT                // -
 684+ 6E33 A3 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 685+ 6E37 F5 6D                        dw      QERROR                  // ?error
 686+ 6E39 52 68                        dw      EXIT                    // ;
 687+ 6E3B
 688+ 6E3B              //  ______________________________________________________________________
 689+ 6E3B              //
 690+ 6E3B              // ?csp       --
 691+ 6E3B              // raise msg #20 if surrent SP in not what previously saved in CSP.
 692+ 6E3B              // Compiler relies on that for  syntax checking of structures
 693+ 6E3B                              Colon_Def QCSP, "?CSP", is_normal
 693+ 6E3B             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 693+ 6E3B             >
 693+ 6E3B             >Dict_Ptr        defl    $
 693+ 6E3B             >
 693+ 6E3B             >//              ______________________________________________________________________
 693+ 6E3B             >//              Heap part
 693+ 6E3B             >
 693+ 6E3B             >
 693+ 6E3B             >                org     (Heap_Ptr & $1FFF) + $E000
 693+ E719             >
 693+ E719             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ E719             >Latest_Definition defl  Heap_Ptr
 693+ E719             >
 693+ E719             >                // dummy db directives used to calculate length of namec
 693+ E719 3F 43 53 50 >                db      "?CSP"
 693+ E71D             >len_NFA         defl    $ - temp_NFA
 693+ E71D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ E719             >
 693+ E719 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ E71A 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 693+ E71E             >                org     $-1                 // alter last byte of Name just above to set
 693+ E71D D0          >                db      {b $} | END_BIT     // msb as name end
 693+ E71E             >
 693+ E71E 0E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 693+ E720             >Prev_Ptr        defl    Heap_Ptr
 693+ E720             >
 693+ E720             >mirror_Ptr      defl    $
 693+ E720             >
 693+ E720 3D 6E       >                dw      Dict_Ptr + 2        // xt
 693+ E722             >Heap_Ptr        defl    $ - $E000           // save current HP
 693+ E722             >
 693+ E722             >Current_HP      defl  $ - $E000             // used to set HP once!
 693+ E722             >
 693+ E722             >//              ______________________________________________________________________
 693+ E722             >//              Dictionary part
 693+ E722             >
 693+ E722             >                org     Dict_Ptr
 693+ 6E3B             >
 693+ 6E3B 20 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 693+ 6E3D             >
 693+ 6E3D             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 6E3D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ 6E40             >
 693+ 6E40             >
 693+ 6E40             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 6E40             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 6E40             >
 693+ 6E40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 6E40 39 68                        dw      SPFETCH                 // sp@
 695+ 6E42 64 6B 89 69                  dw      CSP, FETCH              // csp @
 696+ 6E46 F8 6B                        dw      SUBTRACT                // -
 697+ 6E48 A3 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 698+ 6E4C F5 6D                        dw      QERROR                  // ?error
 699+ 6E4E 52 68                        dw      EXIT                    // ;
 700+ 6E50
 701+ 6E50              //  ______________________________________________________________________
 702+ 6E50              //
 703+ 6E50              // ?loading      --
 704+ 6E50              // raise msg #22 if not loading
 705+ 6E50                              Colon_Def QLOADING, "?LOADING", is_normal
 705+ 6E50             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 705+ 6E50             >
 705+ 6E50             >Dict_Ptr        defl    $
 705+ 6E50             >
 705+ 6E50             >//              ______________________________________________________________________
 705+ 6E50             >//              Heap part
 705+ 6E50             >
 705+ 6E50             >
 705+ 6E50             >                org     (Heap_Ptr & $1FFF) + $E000
 705+ E722             >
 705+ E722             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ E722             >Latest_Definition defl  Heap_Ptr
 705+ E722             >
 705+ E722             >                // dummy db directives used to calculate length of namec
 705+ E722 3F 4C 4F 41 >                db      "?LOADING"
 705+ E726 44 49 4E 47 >
 705+ E72A             >len_NFA         defl    $ - temp_NFA
 705+ E72A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ E722             >
 705+ E722 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ E723 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 705+ E727 44 49 4E 47 >
 705+ E72B             >                org     $-1                 // alter last byte of Name just above to set
 705+ E72A C7          >                db      {b $} | END_BIT     // msb as name end
 705+ E72B             >
 705+ E72B 19 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 705+ E72D             >Prev_Ptr        defl    Heap_Ptr
 705+ E72D             >
 705+ E72D             >mirror_Ptr      defl    $
 705+ E72D             >
 705+ E72D 52 6E       >                dw      Dict_Ptr + 2        // xt
 705+ E72F             >Heap_Ptr        defl    $ - $E000           // save current HP
 705+ E72F             >
 705+ E72F             >Current_HP      defl  $ - $E000             // used to set HP once!
 705+ E72F             >
 705+ E72F             >//              ______________________________________________________________________
 705+ E72F             >//              Dictionary part
 705+ E72F             >
 705+ E72F             >                org     Dict_Ptr
 705+ 6E50             >
 705+ 6E50 2D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 705+ 6E52             >
 705+ 6E52             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 6E52 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 6E55             >
 705+ 6E55             >
 705+ 6E55             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 6E55             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 6E55             >
 705+ 6E55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 6E55 22 6B 89 69                  dw      BLK, FETCH              // blk @
 707+ 6E59 77 68                        dw      ZEQUAL                  // 0=
 708+ 6E5B A3 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 709+ 6E5F F5 6D                        dw      QERROR                  // ?error
 710+ 6E61 52 68                        dw      EXIT                    // ;
 711+ 6E63
 712+ 6E63              //  ______________________________________________________________________
 713+ 6E63              //
 714+ 6E63              // compile      --
 715+ 6E63              // compiles the following word
 716+ 6E63                              Colon_Def COMPILE, "COMPILE", is_normal
 716+ 6E63             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 716+ 6E63             >
 716+ 6E63             >Dict_Ptr        defl    $
 716+ 6E63             >
 716+ 6E63             >//              ______________________________________________________________________
 716+ 6E63             >//              Heap part
 716+ 6E63             >
 716+ 6E63             >
 716+ 6E63             >                org     (Heap_Ptr & $1FFF) + $E000
 716+ E72F             >
 716+ E72F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 716+ E72F             >Latest_Definition defl  Heap_Ptr
 716+ E72F             >
 716+ E72F             >                // dummy db directives used to calculate length of namec
 716+ E72F 43 4F 4D 50 >                db      "COMPILE"
 716+ E733 49 4C 45    >
 716+ E736             >len_NFA         defl    $ - temp_NFA
 716+ E736             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 716+ E72F             >
 716+ E72F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 716+ E730 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 716+ E734 49 4C 45    >
 716+ E737             >                org     $-1                 // alter last byte of Name just above to set
 716+ E736 C5          >                db      {b $} | END_BIT     // msb as name end
 716+ E737             >
 716+ E737 22 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 716+ E739             >Prev_Ptr        defl    Heap_Ptr
 716+ E739             >
 716+ E739             >mirror_Ptr      defl    $
 716+ E739             >
 716+ E739 65 6E       >                dw      Dict_Ptr + 2        // xt
 716+ E73B             >Heap_Ptr        defl    $ - $E000           // save current HP
 716+ E73B             >
 716+ E73B             >Current_HP      defl  $ - $E000             // used to set HP once!
 716+ E73B             >
 716+ E73B             >//              ______________________________________________________________________
 716+ E73B             >//              Dictionary part
 716+ E73B             >
 716+ E73B             >                org     Dict_Ptr
 716+ 6E63             >
 716+ 6E63 39 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 716+ 6E65             >
 716+ 6E65             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 716+ 6E65 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 716+ 6E68             >
 716+ 6E68             >
 716+ 6E68             >                endif           ; ok        // for other definitions it "points" the correct handler
 716+ 6E68             >                // Use of "; ok" to suppress "warning[fwdref]"
 716+ 6E68             >
 716+ 6E68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 717+ 6E68 0A 6E                        dw      QCOMP                   // ?comp
 718+ 6E6A 67 68                        dw      R_TO                    // r>
 719+ 6E6C 2B 69 D4 68                  dw      DUP, CELL_PLUS          // dup, cell+
 720+ 6E70 5C 68                        dw      TO_R                    // >r
 721+ 6E72 89 69 BC 6B                  dw      FETCH, COMMA            // @ ,
 722+ 6E76 52 68                        dw      EXIT                    // ;
 723+ 6E78
 724+ 6E78              //  ______________________________________________________________________
 725+ 6E78              //
 726+ 6E78              // compile,     --
 727+ 6E78              // compiles the following word
 728+ 6E78                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 728+ 6E78             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 728+ 6E78             >
 728+ 6E78             >Dict_Ptr        defl    $
 728+ 6E78             >
 728+ 6E78             >//              ______________________________________________________________________
 728+ 6E78             >//              Heap part
 728+ 6E78             >
 728+ 6E78             >
 728+ 6E78             >                org     (Heap_Ptr & $1FFF) + $E000
 728+ E73B             >
 728+ E73B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 728+ E73B             >Latest_Definition defl  Heap_Ptr
 728+ E73B             >
 728+ E73B             >                // dummy db directives used to calculate length of namec
 728+ E73B 43 4F 4D 50 >                db      "COMPILE,"
 728+ E73F 49 4C 45 2C >
 728+ E743             >len_NFA         defl    $ - temp_NFA
 728+ E743             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 728+ E73B             >
 728+ E73B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 728+ E73C 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 728+ E740 49 4C 45 2C >
 728+ E744             >                org     $-1                 // alter last byte of Name just above to set
 728+ E743 AC          >                db      {b $} | END_BIT     // msb as name end
 728+ E744             >
 728+ E744 2F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 728+ E746             >Prev_Ptr        defl    Heap_Ptr
 728+ E746             >
 728+ E746             >mirror_Ptr      defl    $
 728+ E746             >
 728+ E746 7A 6E       >                dw      Dict_Ptr + 2        // xt
 728+ E748             >Heap_Ptr        defl    $ - $E000           // save current HP
 728+ E748             >
 728+ E748             >Current_HP      defl  $ - $E000             // used to set HP once!
 728+ E748             >
 728+ E748             >//              ______________________________________________________________________
 728+ E748             >//              Dictionary part
 728+ E748             >
 728+ E748             >                org     Dict_Ptr
 728+ 6E78             >
 728+ 6E78 46 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 728+ 6E7A             >
 728+ 6E7A             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 728+ 6E7A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 728+ 6E7D             >
 728+ 6E7D             >
 728+ 6E7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 728+ 6E7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 728+ 6E7D             >
 728+ 6E7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 729+ 6E7D 0A 6E                        dw      QCOMP                   // ?comp
 730+ 6E7F BC 6B                        dw      COMMA                   // ,
 731+ 6E81 52 68                        dw      EXIT                    // ;
 732+ 6E83
 733+ 6E83              //  ______________________________________________________________________
 734+ 6E83              //
 735+ 6E83              // [            --
 736+ 6E83              // stop compilation
 737+ 6E83                              Colon_Def SQUARED_OPEN, "[", is_immediate
 737+ 6E83             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 737+ 6E83             >
 737+ 6E83             >Dict_Ptr        defl    $
 737+ 6E83             >
 737+ 6E83             >//              ______________________________________________________________________
 737+ 6E83             >//              Heap part
 737+ 6E83             >
 737+ 6E83             >
 737+ 6E83             >                org     (Heap_Ptr & $1FFF) + $E000
 737+ E748             >
 737+ E748             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 737+ E748             >Latest_Definition defl  Heap_Ptr
 737+ E748             >
 737+ E748             >                // dummy db directives used to calculate length of namec
 737+ E748 5B          >                db      "["
 737+ E749             >len_NFA         defl    $ - temp_NFA
 737+ E749             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 737+ E748             >
 737+ E748 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 737+ E749 5B          >                db      "["               // name string in 7-bit ascii, but
 737+ E74A             >                org     $-1                 // alter last byte of Name just above to set
 737+ E749 DB          >                db      {b $} | END_BIT     // msb as name end
 737+ E74A             >
 737+ E74A 3B 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 737+ E74C             >Prev_Ptr        defl    Heap_Ptr
 737+ E74C             >
 737+ E74C             >mirror_Ptr      defl    $
 737+ E74C             >
 737+ E74C 85 6E       >                dw      Dict_Ptr + 2        // xt
 737+ E74E             >Heap_Ptr        defl    $ - $E000           // save current HP
 737+ E74E             >
 737+ E74E             >Current_HP      defl  $ - $E000             // used to set HP once!
 737+ E74E             >
 737+ E74E             >//              ______________________________________________________________________
 737+ E74E             >//              Dictionary part
 737+ E74E             >
 737+ E74E             >                org     Dict_Ptr
 737+ 6E83             >
 737+ 6E83 4C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 737+ 6E85             >
 737+ 6E85             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 737+ 6E85 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 737+ 6E88             >
 737+ 6E88             >
 737+ 6E88             >                endif           ; ok        // for other definitions it "points" the correct handler
 737+ 6E88             >                // Use of "; ok" to suppress "warning[fwdref]"
 737+ 6E88             >
 737+ 6E88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 738+ 6E88 81 6A                        dw      ZERO                    // 0
 739+ 6E8A 4C 6B 93 69                  dw      STATE, STORE            // state !
 740+ 6E8E 52 68                        dw      EXIT                    // ; immediate
 741+ 6E90
 742+ 6E90              //  ______________________________________________________________________
 743+ 6E90              //
 744+ 6E90              // ]            --
 745+ 6E90              // start compilation
 746+ 6E90                              Colon_Def SQUARED_CLOSE, "]", is_normal
 746+ 6E90             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 746+ 6E90             >
 746+ 6E90             >Dict_Ptr        defl    $
 746+ 6E90             >
 746+ 6E90             >//              ______________________________________________________________________
 746+ 6E90             >//              Heap part
 746+ 6E90             >
 746+ 6E90             >
 746+ 6E90             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ E74E             >
 746+ E74E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ E74E             >Latest_Definition defl  Heap_Ptr
 746+ E74E             >
 746+ E74E             >                // dummy db directives used to calculate length of namec
 746+ E74E 5D          >                db      "]"
 746+ E74F             >len_NFA         defl    $ - temp_NFA
 746+ E74F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ E74E             >
 746+ E74E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ E74F 5D          >                db      "]"               // name string in 7-bit ascii, but
 746+ E750             >                org     $-1                 // alter last byte of Name just above to set
 746+ E74F DD          >                db      {b $} | END_BIT     // msb as name end
 746+ E750             >
 746+ E750 48 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ E752             >Prev_Ptr        defl    Heap_Ptr
 746+ E752             >
 746+ E752             >mirror_Ptr      defl    $
 746+ E752             >
 746+ E752 92 6E       >                dw      Dict_Ptr + 2        // xt
 746+ E754             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ E754             >
 746+ E754             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ E754             >
 746+ E754             >//              ______________________________________________________________________
 746+ E754             >//              Dictionary part
 746+ E754             >
 746+ E754             >                org     Dict_Ptr
 746+ 6E90             >
 746+ 6E90 52 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 6E92             >
 746+ 6E92             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 6E92 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 6E95             >
 746+ 6E95             >
 746+ 6E95             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 6E95             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 6E95             >
 746+ 6E95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 6E95 A3 63 C0 00                  dw      LIT, $C0                // 192
 748+ 6E99 4C 6B 93 69                  dw      STATE, STORE            // state !
 749+ 6E9D 52 68                        dw      EXIT                    // ;
 750+ 6E9F
 751+ 6E9F              //  ______________________________________________________________________
 752+ 6E9F              //
 753+ 6E9F              // smudge       --
 754+ 6E9F              // toggle smudge bit of latest definition
 755+ 6E9F                              Colon_Def SMUDGE, "SMUDGE", is_normal
 755+ 6E9F             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 755+ 6E9F             >
 755+ 6E9F             >Dict_Ptr        defl    $
 755+ 6E9F             >
 755+ 6E9F             >//              ______________________________________________________________________
 755+ 6E9F             >//              Heap part
 755+ 6E9F             >
 755+ 6E9F             >
 755+ 6E9F             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ E754             >
 755+ E754             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ E754             >Latest_Definition defl  Heap_Ptr
 755+ E754             >
 755+ E754             >                // dummy db directives used to calculate length of namec
 755+ E754 53 4D 55 44 >                db      "SMUDGE"
 755+ E758 47 45       >
 755+ E75A             >len_NFA         defl    $ - temp_NFA
 755+ E75A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ E754             >
 755+ E754 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ E755 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 755+ E759 47 45       >
 755+ E75B             >                org     $-1                 // alter last byte of Name just above to set
 755+ E75A C5          >                db      {b $} | END_BIT     // msb as name end
 755+ E75B             >
 755+ E75B 4E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ E75D             >Prev_Ptr        defl    Heap_Ptr
 755+ E75D             >
 755+ E75D             >mirror_Ptr      defl    $
 755+ E75D             >
 755+ E75D A1 6E       >                dw      Dict_Ptr + 2        // xt
 755+ E75F             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ E75F             >
 755+ E75F             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ E75F             >
 755+ E75F             >//              ______________________________________________________________________
 755+ E75F             >//              Dictionary part
 755+ E75F             >
 755+ E75F             >                org     Dict_Ptr
 755+ 6E9F             >
 755+ 6E9F 5D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 6EA1             >
 755+ 6EA1             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 6EA1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 6EA4             >
 755+ 6EA4             >
 755+ 6EA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 6EA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 6EA4             >
 755+ 6EA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 6EA4 65 6D                        dw      LATEST                  // latest
 757+ 6EA6 A3 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 758+ 6EAA 80 69                        dw      TOGGLE                  // toggle
 759+ 6EAC 52 68                        dw      EXIT                    // ;
 760+ 6EAE
 761+ 6EAE              //  ______________________________________________________________________
 762+ 6EAE              //
 763+ 6EAE              // immediate    --
 764+ 6EAE              // make immediate the latest definition
 765+ 6EAE                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 765+ 6EAE             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 765+ 6EAE             >
 765+ 6EAE             >Dict_Ptr        defl    $
 765+ 6EAE             >
 765+ 6EAE             >//              ______________________________________________________________________
 765+ 6EAE             >//              Heap part
 765+ 6EAE             >
 765+ 6EAE             >
 765+ 6EAE             >                org     (Heap_Ptr & $1FFF) + $E000
 765+ E75F             >
 765+ E75F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ E75F             >Latest_Definition defl  Heap_Ptr
 765+ E75F             >
 765+ E75F             >                // dummy db directives used to calculate length of namec
 765+ E75F 49 4D 4D 45 >                db      "IMMEDIATE"
 765+ E763 44 49 41 54 >
 765+ E767 45          >
 765+ E768             >len_NFA         defl    $ - temp_NFA
 765+ E768             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ E75F             >
 765+ E75F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ E760 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 765+ E764 44 49 41 54 >
 765+ E768 45          >
 765+ E769             >                org     $-1                 // alter last byte of Name just above to set
 765+ E768 C5          >                db      {b $} | END_BIT     // msb as name end
 765+ E769             >
 765+ E769 54 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 765+ E76B             >Prev_Ptr        defl    Heap_Ptr
 765+ E76B             >
 765+ E76B             >mirror_Ptr      defl    $
 765+ E76B             >
 765+ E76B B0 6E       >                dw      Dict_Ptr + 2        // xt
 765+ E76D             >Heap_Ptr        defl    $ - $E000           // save current HP
 765+ E76D             >
 765+ E76D             >Current_HP      defl  $ - $E000             // used to set HP once!
 765+ E76D             >
 765+ E76D             >//              ______________________________________________________________________
 765+ E76D             >//              Dictionary part
 765+ E76D             >
 765+ E76D             >                org     Dict_Ptr
 765+ 6EAE             >
 765+ 6EAE 6B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 765+ 6EB0             >
 765+ 6EB0             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 6EB0 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 6EB3             >
 765+ 6EB3             >
 765+ 6EB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 6EB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 6EB3             >
 765+ 6EB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 6EB3 65 6D                        dw      LATEST                  // latest
 767+ 6EB5 A3 63 40 00                  dw      LIT, $40                // 64
 768+ 6EB9 80 69                        dw      TOGGLE                  // toggle
 769+ 6EBB 52 68                        dw      EXIT                    // ;
 770+ 6EBD
 771+ 6EBD              //  ______________________________________________________________________
 772+ 6EBD              //
 773+ 6EBD              // hex          --
 774+ 6EBD              // change numeration base
 775+ 6EBD                              Colon_Def HEX, "HEX", is_normal
 775+ 6EBD             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 775+ 6EBD             >
 775+ 6EBD             >Dict_Ptr        defl    $
 775+ 6EBD             >
 775+ 6EBD             >//              ______________________________________________________________________
 775+ 6EBD             >//              Heap part
 775+ 6EBD             >
 775+ 6EBD             >
 775+ 6EBD             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ E76D             >
 775+ E76D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ E76D             >Latest_Definition defl  Heap_Ptr
 775+ E76D             >
 775+ E76D             >                // dummy db directives used to calculate length of namec
 775+ E76D 48 45 58    >                db      "HEX"
 775+ E770             >len_NFA         defl    $ - temp_NFA
 775+ E770             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ E76D             >
 775+ E76D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ E76E 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 775+ E771             >                org     $-1                 // alter last byte of Name just above to set
 775+ E770 D8          >                db      {b $} | END_BIT     // msb as name end
 775+ E771             >
 775+ E771 5F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ E773             >Prev_Ptr        defl    Heap_Ptr
 775+ E773             >
 775+ E773             >mirror_Ptr      defl    $
 775+ E773             >
 775+ E773 BF 6E       >                dw      Dict_Ptr + 2        // xt
 775+ E775             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ E775             >
 775+ E775             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ E775             >
 775+ E775             >//              ______________________________________________________________________
 775+ E775             >//              Dictionary part
 775+ E775             >
 775+ E775             >                org     Dict_Ptr
 775+ 6EBD             >
 775+ 6EBD 73 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 6EBF             >
 775+ 6EBF             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 6EBF CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 6EC2             >
 775+ 6EC2             >
 775+ 6EC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 6EC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 6EC2             >
 775+ 6EC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 6EC2 A3 63 10 00                  dw      LIT, 16                 // 16
 777+ 6EC6 52 6B 93 69                  dw      BASE, STORE             // base !
 778+ 6ECA 52 68                        dw      EXIT                    // ;
 779+ 6ECC
 780+ 6ECC              //  ______________________________________________________________________
 781+ 6ECC              //
 782+ 6ECC              // decimal      --
 783+ 6ECC              // change numeration base
 784+ 6ECC                              Colon_Def DECIMAL, "DECIMAL", is_normal
 784+ 6ECC             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 784+ 6ECC             >
 784+ 6ECC             >Dict_Ptr        defl    $
 784+ 6ECC             >
 784+ 6ECC             >//              ______________________________________________________________________
 784+ 6ECC             >//              Heap part
 784+ 6ECC             >
 784+ 6ECC             >
 784+ 6ECC             >                org     (Heap_Ptr & $1FFF) + $E000
 784+ E775             >
 784+ E775             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 784+ E775             >Latest_Definition defl  Heap_Ptr
 784+ E775             >
 784+ E775             >                // dummy db directives used to calculate length of namec
 784+ E775 44 45 43 49 >                db      "DECIMAL"
 784+ E779 4D 41 4C    >
 784+ E77C             >len_NFA         defl    $ - temp_NFA
 784+ E77C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 784+ E775             >
 784+ E775 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 784+ E776 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 784+ E77A 4D 41 4C    >
 784+ E77D             >                org     $-1                 // alter last byte of Name just above to set
 784+ E77C CC          >                db      {b $} | END_BIT     // msb as name end
 784+ E77D             >
 784+ E77D 6D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 784+ E77F             >Prev_Ptr        defl    Heap_Ptr
 784+ E77F             >
 784+ E77F             >mirror_Ptr      defl    $
 784+ E77F             >
 784+ E77F CE 6E       >                dw      Dict_Ptr + 2        // xt
 784+ E781             >Heap_Ptr        defl    $ - $E000           // save current HP
 784+ E781             >
 784+ E781             >Current_HP      defl  $ - $E000             // used to set HP once!
 784+ E781             >
 784+ E781             >//              ______________________________________________________________________
 784+ E781             >//              Dictionary part
 784+ E781             >
 784+ E781             >                org     Dict_Ptr
 784+ 6ECC             >
 784+ 6ECC 7F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 784+ 6ECE             >
 784+ 6ECE             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 784+ 6ECE CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 784+ 6ED1             >
 784+ 6ED1             >
 784+ 6ED1             >                endif           ; ok        // for other definitions it "points" the correct handler
 784+ 6ED1             >                // Use of "; ok" to suppress "warning[fwdref]"
 784+ 6ED1             >
 784+ 6ED1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 785+ 6ED1 A3 63 0A 00                  dw      LIT, 10                 // 10
 786+ 6ED5 52 6B 93 69                  dw      BASE, STORE             // base !
 787+ 6ED9 52 68                        dw      EXIT                    // ;
 788+ 6EDB
 789+ 6EDB              //  ______________________________________________________________________
 790+ 6EDB              //
 791+ 6EDB              // (;code)       --
 792+ 6EDB              // patch to CFA to call/jump to the "following code"
 793+ 6EDB                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 793+ 6EDB             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 793+ 6EDB             >
 793+ 6EDB             >Dict_Ptr        defl    $
 793+ 6EDB             >
 793+ 6EDB             >//              ______________________________________________________________________
 793+ 6EDB             >//              Heap part
 793+ 6EDB             >
 793+ 6EDB             >
 793+ 6EDB             >                org     (Heap_Ptr & $1FFF) + $E000
 793+ E781             >
 793+ E781             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ E781             >Latest_Definition defl  Heap_Ptr
 793+ E781             >
 793+ E781             >                // dummy db directives used to calculate length of namec
 793+ E781 28 3B 43 4F >                db      "(;CODE)"
 793+ E785 44 45 29    >
 793+ E788             >len_NFA         defl    $ - temp_NFA
 793+ E788             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ E781             >
 793+ E781 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ E782 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 793+ E786 44 45 29    >
 793+ E789             >                org     $-1                 // alter last byte of Name just above to set
 793+ E788 A9          >                db      {b $} | END_BIT     // msb as name end
 793+ E789             >
 793+ E789 75 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 793+ E78B             >Prev_Ptr        defl    Heap_Ptr
 793+ E78B             >
 793+ E78B             >mirror_Ptr      defl    $
 793+ E78B             >
 793+ E78B DD 6E       >                dw      Dict_Ptr + 2        // xt
 793+ E78D             >Heap_Ptr        defl    $ - $E000           // save current HP
 793+ E78D             >
 793+ E78D             >Current_HP      defl  $ - $E000             // used to set HP once!
 793+ E78D             >
 793+ E78D             >//              ______________________________________________________________________
 793+ E78D             >//              Dictionary part
 793+ E78D             >
 793+ E78D             >                org     Dict_Ptr
 793+ 6EDB             >
 793+ 6EDB 8B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 793+ 6EDD             >
 793+ 6EDD             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 6EDD CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 6EE0             >
 793+ 6EE0             >
 793+ 6EE0             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 6EE0             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 6EE0             >
 793+ 6EE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 6EE0 67 68                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 795+ 6EE2 65 6D                        dw      LATEST                  // latest   ( Word being defined in this moment )
 796+ 6EE4 C3 6D 9E 6D                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 797+ 6EE8
 798+ 6EE8 A3 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 799+ 6EEC 07 69 A7 69                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 800+ 6EF0 BE 68                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 801+ 6EF2
 802+ 6EF2 93 69                        dw      STORE                   // !
 803+ 6EF4 52 68                        dw      EXIT                    // ;
 804+ 6EF6
 805+ 6EF6              //  ______________________________________________________________________
 806+ 6EF6              //
 807+ 6EF6              // ;code        --
 808+ 6EF6                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 808+ 6EF6             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 808+ 6EF6             >
 808+ 6EF6             >Dict_Ptr        defl    $
 808+ 6EF6             >
 808+ 6EF6             >//              ______________________________________________________________________
 808+ 6EF6             >//              Heap part
 808+ 6EF6             >
 808+ 6EF6             >
 808+ 6EF6             >                org     (Heap_Ptr & $1FFF) + $E000
 808+ E78D             >
 808+ E78D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 808+ E78D             >Latest_Definition defl  Heap_Ptr
 808+ E78D             >
 808+ E78D             >                // dummy db directives used to calculate length of namec
 808+ E78D 3B 43 4F 44 >                db      ";CODE"
 808+ E791 45          >
 808+ E792             >len_NFA         defl    $ - temp_NFA
 808+ E792             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 808+ E78D             >
 808+ E78D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 808+ E78E 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 808+ E792 45          >
 808+ E793             >                org     $-1                 // alter last byte of Name just above to set
 808+ E792 C5          >                db      {b $} | END_BIT     // msb as name end
 808+ E793             >
 808+ E793 81 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 808+ E795             >Prev_Ptr        defl    Heap_Ptr
 808+ E795             >
 808+ E795             >mirror_Ptr      defl    $
 808+ E795             >
 808+ E795 F8 6E       >                dw      Dict_Ptr + 2        // xt
 808+ E797             >Heap_Ptr        defl    $ - $E000           // save current HP
 808+ E797             >
 808+ E797             >Current_HP      defl  $ - $E000             // used to set HP once!
 808+ E797             >
 808+ E797             >//              ______________________________________________________________________
 808+ E797             >//              Dictionary part
 808+ E797             >
 808+ E797             >                org     Dict_Ptr
 808+ 6EF6             >
 808+ 6EF6 95 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 808+ 6EF8             >
 808+ 6EF8             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 808+ 6EF8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 808+ 6EFB             >
 808+ 6EFB             >
 808+ 6EFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 808+ 6EFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 808+ 6EFB             >
 808+ 6EFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 809+ 6EFB 3D 6E                        dw      QCSP                    // ?csp
 810+ 6EFD 65 6E                        dw      COMPILE                 // compile
 811+ 6EFF DD 6E                        dw      C_SEMICOLON_CODE        // (;code)
 812+ 6F01 85 6E                        dw      SQUARED_OPEN            // [
 813+ 6F03 48 6A                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 814+ 6F05 52 68                        dw      EXIT                    // ; immediate
 815+ 6F07
 816+ 6F07              //  ______________________________________________________________________
 817+ 6F07              //
 818+ 6F07              // <builds      --
 819+ 6F07                              Colon_Def CBUILDS, "<BUILDS", is_normal
 819+ 6F07             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 819+ 6F07             >
 819+ 6F07             >Dict_Ptr        defl    $
 819+ 6F07             >
 819+ 6F07             >//              ______________________________________________________________________
 819+ 6F07             >//              Heap part
 819+ 6F07             >
 819+ 6F07             >
 819+ 6F07             >                org     (Heap_Ptr & $1FFF) + $E000
 819+ E797             >
 819+ E797             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 819+ E797             >Latest_Definition defl  Heap_Ptr
 819+ E797             >
 819+ E797             >                // dummy db directives used to calculate length of namec
 819+ E797 3C 42 55 49 >                db      "<BUILDS"
 819+ E79B 4C 44 53    >
 819+ E79E             >len_NFA         defl    $ - temp_NFA
 819+ E79E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 819+ E797             >
 819+ E797 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 819+ E798 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 819+ E79C 4C 44 53    >
 819+ E79F             >                org     $-1                 // alter last byte of Name just above to set
 819+ E79E D3          >                db      {b $} | END_BIT     // msb as name end
 819+ E79F             >
 819+ E79F 8D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 819+ E7A1             >Prev_Ptr        defl    Heap_Ptr
 819+ E7A1             >
 819+ E7A1             >mirror_Ptr      defl    $
 819+ E7A1             >
 819+ E7A1 09 6F       >                dw      Dict_Ptr + 2        // xt
 819+ E7A3             >Heap_Ptr        defl    $ - $E000           // save current HP
 819+ E7A3             >
 819+ E7A3             >Current_HP      defl  $ - $E000             // used to set HP once!
 819+ E7A3             >
 819+ E7A3             >//              ______________________________________________________________________
 819+ E7A3             >//              Dictionary part
 819+ E7A3             >
 819+ E7A3             >                org     Dict_Ptr
 819+ 6F07             >
 819+ 6F07 A1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 819+ 6F09             >
 819+ 6F09             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 819+ 6F09 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 819+ 6F0C             >
 819+ 6F0C             >
 819+ 6F0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 819+ 6F0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 819+ 6F0C             >
 819+ 6F0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 820+ 6F0C 81 6A                        dw      ZERO                    // 0
 821+ 6F0E 4C 6A                        dw      CONSTANT                // constant
 822+ 6F10 52 68                        dw      EXIT                    // ;
 823+ 6F12
 824+ 6F12              //  ______________________________________________________________________
 825+ 6F12              //
 826+ 6F12              // recurse      --
 827+ 6F12              //              Colon_Def RECURSE, "RECURSE", is_immediate
 828+ 6F12              //              dw      QCOMP                   // ?comp
 829+ 6F12              //              dw      LATEST                  // latest
 830+ 6F12              //              dw      PFA, CFA                // pfa cfa
 831+ 6F12              //              dw      COMMA                   // ,
 832+ 6F12              //              dw      EXIT                    // ; immediate
 833+ 6F12
 834+ 6F12              //  ______________________________________________________________________
 835+ 6F12              //
 836+ 6F12              // does>     --
 837+ 6F12                              Colon_Def DOES_TO, "DOES>", is_normal
 837+ 6F12             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 837+ 6F12             >
 837+ 6F12             >Dict_Ptr        defl    $
 837+ 6F12             >
 837+ 6F12             >//              ______________________________________________________________________
 837+ 6F12             >//              Heap part
 837+ 6F12             >
 837+ 6F12             >
 837+ 6F12             >                org     (Heap_Ptr & $1FFF) + $E000
 837+ E7A3             >
 837+ E7A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 837+ E7A3             >Latest_Definition defl  Heap_Ptr
 837+ E7A3             >
 837+ E7A3             >                // dummy db directives used to calculate length of namec
 837+ E7A3 44 4F 45 53 >                db      "DOES>"
 837+ E7A7 3E          >
 837+ E7A8             >len_NFA         defl    $ - temp_NFA
 837+ E7A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 837+ E7A3             >
 837+ E7A3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 837+ E7A4 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 837+ E7A8 3E          >
 837+ E7A9             >                org     $-1                 // alter last byte of Name just above to set
 837+ E7A8 BE          >                db      {b $} | END_BIT     // msb as name end
 837+ E7A9             >
 837+ E7A9 97 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 837+ E7AB             >Prev_Ptr        defl    Heap_Ptr
 837+ E7AB             >
 837+ E7AB             >mirror_Ptr      defl    $
 837+ E7AB             >
 837+ E7AB 14 6F       >                dw      Dict_Ptr + 2        // xt
 837+ E7AD             >Heap_Ptr        defl    $ - $E000           // save current HP
 837+ E7AD             >
 837+ E7AD             >Current_HP      defl  $ - $E000             // used to set HP once!
 837+ E7AD             >
 837+ E7AD             >//              ______________________________________________________________________
 837+ E7AD             >//              Dictionary part
 837+ E7AD             >
 837+ E7AD             >                org     Dict_Ptr
 837+ 6F12             >
 837+ 6F12 AB 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 837+ 6F14             >
 837+ 6F14             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 837+ 6F14 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 837+ 6F17             >
 837+ 6F17             >
 837+ 6F17             >                endif           ; ok        // for other definitions it "points" the correct handler
 837+ 6F17             >                // Use of "; ok" to suppress "warning[fwdref]"
 837+ 6F17             >
 837+ 6F17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 838+ 6F17 67 68                        dw      R_TO                    // r>
 839+ 6F19 65 6D                        dw      LATEST                  // latest
 840+ 6F1B C3 6D                        dw      PFA                     // pfa
 841+ 6F1D 93 69                        dw      STORE                   // !
 842+ 6F1F DD 6E                        dw      C_SEMICOLON_CODE        // ;code
 843+ 6F21              Does_Ptr:
 844+ 6F21                              // via call coded in CFA
 845+ 6F21 EB                           ex      de, hl //**
 846+ 6F22                              // *** ldhlrp
 847+ 6F22 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 848+ 6F23 70                           ld      (hl), b
 849+ 6F24 2B                           dec     hl
 850+ 6F25 71                           ld      (hl), c
 851+ 6F26                              // *** ldrphl
 852+ 6F26 EB                           ex      de, hl //**
 853+ 6F27 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 854+ 6F28
 855+ 6F28 4E                           ld      c, (hl)
 856+ 6F29 23                           inc     hl
 857+ 6F2A 46                           ld      b, (hl)
 858+ 6F2B 23                           inc     hl
 859+ 6F2C
 860+ 6F2C                              psh1
 860+ 6F2C E5          >                push    hl
 860+ 6F2D DD E9       >                jp      (ix)
 861+ 6F2F                              // SMUDGE !
 862+ 6F2F
 863+ 6F2F              //  ______________________________________________________________________
 864+ 6F2F              //
 865+ 6F2F              // count        a -- a2 n
 866+ 6F2F              // expects a counted string at address a, returns string address and counter
 867+ 6F2F                              New_Def COUNT, "COUNT", is_code, is_normal
 867+ 6F2F             >
 867+ 6F2F             >Dict_Ptr        defl    $
 867+ 6F2F             >
 867+ 6F2F             >//              ______________________________________________________________________
 867+ 6F2F             >//              Heap part
 867+ 6F2F             >
 867+ 6F2F             >
 867+ 6F2F             >                org     (Heap_Ptr & $1FFF) + $E000
 867+ E7AD             >
 867+ E7AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 867+ E7AD             >Latest_Definition defl  Heap_Ptr
 867+ E7AD             >
 867+ E7AD             >                // dummy db directives used to calculate length of namec
 867+ E7AD 43 4F 55 4E >                db      "COUNT"
 867+ E7B1 54          >
 867+ E7B2             >len_NFA         defl    $ - temp_NFA
 867+ E7B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 867+ E7AD             >
 867+ E7AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 867+ E7AE 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 867+ E7B2 54          >
 867+ E7B3             >                org     $-1                 // alter last byte of Name just above to set
 867+ E7B2 D4          >                db      {b $} | END_BIT     // msb as name end
 867+ E7B3             >
 867+ E7B3 A3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 867+ E7B5             >Prev_Ptr        defl    Heap_Ptr
 867+ E7B5             >
 867+ E7B5             >mirror_Ptr      defl    $
 867+ E7B5             >
 867+ E7B5 31 6F       >                dw      Dict_Ptr + 2        // xt
 867+ E7B7             >Heap_Ptr        defl    $ - $E000           // save current HP
 867+ E7B7             >
 867+ E7B7             >Current_HP      defl  $ - $E000             // used to set HP once!
 867+ E7B7             >
 867+ E7B7             >//              ______________________________________________________________________
 867+ E7B7             >//              Dictionary part
 867+ E7B7             >
 867+ E7B7             >                org     Dict_Ptr
 867+ 6F2F             >
 867+ 6F2F B5 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 867+ 6F31             >
 867+ 6F31             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 867+ 6F31 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 867+ 6F31 ~           >
 867+ 6F31 ~           >
 867+ 6F31             >                endif           ; ok        // for other definitions it "points" the correct handler
 867+ 6F31             >                // Use of "; ok" to suppress "warning[fwdref]"
 867+ 6F31             >
 867+ 6F31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 868+ 6F31 D9                           exx
 869+ 6F32 E1                           pop     hl
 870+ 6F33 5E                           ld      e, (hl)
 871+ 6F34 16 00                        ld      d, 0
 872+ 6F36 23                           inc     hl
 873+ 6F37              Count_Here:
 874+ 6F37 E5                           push    hl
 875+ 6F38 D5                           push    de
 876+ 6F39 D9                           exx
 877+ 6F3A                              next
 877+ 6F3A DD E9       >                jp      (ix)
 878+ 6F3C              //                pop     hl
 879+ 6F3C              //                ld      a, (hl)
 880+ 6F3C              //                inc     hl
 881+ 6F3C              //                push    hl
 882+ 6F3C              //                ld      h, 0
 883+ 6F3C              //                ld      l, a
 884+ 6F3C              //                push    hl
 885+ 6F3C              //                next
 886+ 6F3C
 887+ 6F3C              //  ______________________________________________________________________
 888+ 6F3C              //
 889+ 6F3C              // bounds       a n -- a+n n
 890+ 6F3C              // given an address and a length ( a n ) calculate the bound addresses
 891+ 6F3C              // suitable for DO-LOOP
 892+ 6F3C                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 892+ 6F3C             >
 892+ 6F3C             >Dict_Ptr        defl    $
 892+ 6F3C             >
 892+ 6F3C             >//              ______________________________________________________________________
 892+ 6F3C             >//              Heap part
 892+ 6F3C             >
 892+ 6F3C             >
 892+ 6F3C             >                org     (Heap_Ptr & $1FFF) + $E000
 892+ E7B7             >
 892+ E7B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 892+ E7B7             >Latest_Definition defl  Heap_Ptr
 892+ E7B7             >
 892+ E7B7             >                // dummy db directives used to calculate length of namec
 892+ E7B7 42 4F 55 4E >                db      "BOUNDS"
 892+ E7BB 44 53       >
 892+ E7BD             >len_NFA         defl    $ - temp_NFA
 892+ E7BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 892+ E7B7             >
 892+ E7B7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 892+ E7B8 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 892+ E7BC 44 53       >
 892+ E7BE             >                org     $-1                 // alter last byte of Name just above to set
 892+ E7BD D3          >                db      {b $} | END_BIT     // msb as name end
 892+ E7BE             >
 892+ E7BE AD 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 892+ E7C0             >Prev_Ptr        defl    Heap_Ptr
 892+ E7C0             >
 892+ E7C0             >mirror_Ptr      defl    $
 892+ E7C0             >
 892+ E7C0 3E 6F       >                dw      Dict_Ptr + 2        // xt
 892+ E7C2             >Heap_Ptr        defl    $ - $E000           // save current HP
 892+ E7C2             >
 892+ E7C2             >Current_HP      defl  $ - $E000             // used to set HP once!
 892+ E7C2             >
 892+ E7C2             >//              ______________________________________________________________________
 892+ E7C2             >//              Dictionary part
 892+ E7C2             >
 892+ E7C2             >                org     Dict_Ptr
 892+ 6F3C             >
 892+ 6F3C C0 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 892+ 6F3E             >
 892+ 6F3E             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 892+ 6F3E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 892+ 6F3E ~           >
 892+ 6F3E ~           >
 892+ 6F3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 892+ 6F3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 892+ 6F3E             >
 892+ 6F3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 893+ 6F3E D9                           exx
 894+ 6F3F E1                           pop     hl
 895+ 6F40 D1                           pop     de
 896+ 6F41 19                           add     hl, de
 897+ 6F42 18 F3                        jr      Count_Here
 898+ 6F44                              // push    hl
 899+ 6F44                              // push    de
 900+ 6F44                              // exx
 901+ 6F44                              // next
 902+ 6F44
 903+ 6F44              //  ______________________________________________________________________
 904+ 6F44              //
 905+ 6F44              // leave        --
 906+ 6F44              // Compile (leave) to leave current LOOP and jump just after it
 907+ 6F44                              Colon_Def LEAVE, "LEAVE", is_immediate
 907+ 6F44             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 907+ 6F44             >
 907+ 6F44             >Dict_Ptr        defl    $
 907+ 6F44             >
 907+ 6F44             >//              ______________________________________________________________________
 907+ 6F44             >//              Heap part
 907+ 6F44             >
 907+ 6F44             >
 907+ 6F44             >                org     (Heap_Ptr & $1FFF) + $E000
 907+ E7C2             >
 907+ E7C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 907+ E7C2             >Latest_Definition defl  Heap_Ptr
 907+ E7C2             >
 907+ E7C2             >                // dummy db directives used to calculate length of namec
 907+ E7C2 4C 45 41 56 >                db      "LEAVE"
 907+ E7C6 45          >
 907+ E7C7             >len_NFA         defl    $ - temp_NFA
 907+ E7C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 907+ E7C2             >
 907+ E7C2 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 907+ E7C3 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 907+ E7C7 45          >
 907+ E7C8             >                org     $-1                 // alter last byte of Name just above to set
 907+ E7C7 C5          >                db      {b $} | END_BIT     // msb as name end
 907+ E7C8             >
 907+ E7C8 B7 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 907+ E7CA             >Prev_Ptr        defl    Heap_Ptr
 907+ E7CA             >
 907+ E7CA             >mirror_Ptr      defl    $
 907+ E7CA             >
 907+ E7CA 46 6F       >                dw      Dict_Ptr + 2        // xt
 907+ E7CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 907+ E7CC             >
 907+ E7CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 907+ E7CC             >
 907+ E7CC             >//              ______________________________________________________________________
 907+ E7CC             >//              Dictionary part
 907+ E7CC             >
 907+ E7CC             >                org     Dict_Ptr
 907+ 6F44             >
 907+ 6F44 CA 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 907+ 6F46             >
 907+ 6F46             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 907+ 6F46 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 907+ 6F49             >
 907+ 6F49             >
 907+ 6F49             >                endif           ; ok        // for other definitions it "points" the correct handler
 907+ 6F49             >                // Use of "; ok" to suppress "warning[fwdref]"
 907+ 6F49             >
 907+ 6F49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 908+ 6F49 65 6E 00 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 909+ 6F4D A6 6B 5C 68                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 909+ 6F51 81 6A BC 6B
 910+ 6F55 81 6A 81 6A                  dw      ZERO, ZERO
 911+ 6F59 39 68 2B 69                  dw      SPFETCH, DUP
 912+ 6F5D D4 68 D4 68                  dw      CELL_PLUS, CELL_PLUS
 913+ 6F61 1B 69                        dw      TUCK
 914+ 6F63 64 6B 89 69                  dw      CSP, FETCH
 915+ 6F67 24 69 F8 6B                  dw      SWAP, SUBTRACT
 916+ 6F6B 8D 67                        dw      CMOVE
 917+ 6F6D 64 6B 89 69                  dw      CSP, FETCH, CELL_MINUS
 917+ 6F71 D9 68
 918+ 6F73 67 68 07 69                  dw      R_TO, OVER, STORE
 918+ 6F77 93 69
 919+ 6F79 D9 68 81 6A                  dw      CELL_MINUS, ZERO
 920+ 6F7D 24 69 93 69                  dw      SWAP, STORE
 921+ 6F81 52 68                        dw      EXIT                    // ;
 922+ 6F83
 923+ 6F83              //  ______________________________________________________________________
 924+ 6F83              //
 925+ 6F83              // type         a n --
 926+ 6F83              // Sends to current output channel n characters starting at address a.
 927+ 6F83                              Colon_Def TYPE, "TYPE", is_normal
 927+ 6F83             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 927+ 6F83             >
 927+ 6F83             >Dict_Ptr        defl    $
 927+ 6F83             >
 927+ 6F83             >//              ______________________________________________________________________
 927+ 6F83             >//              Heap part
 927+ 6F83             >
 927+ 6F83             >
 927+ 6F83             >                org     (Heap_Ptr & $1FFF) + $E000
 927+ E7CC             >
 927+ E7CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 927+ E7CC             >Latest_Definition defl  Heap_Ptr
 927+ E7CC             >
 927+ E7CC             >                // dummy db directives used to calculate length of namec
 927+ E7CC 54 59 50 45 >                db      "TYPE"
 927+ E7D0             >len_NFA         defl    $ - temp_NFA
 927+ E7D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 927+ E7CC             >
 927+ E7CC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 927+ E7CD 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 927+ E7D1             >                org     $-1                 // alter last byte of Name just above to set
 927+ E7D0 C5          >                db      {b $} | END_BIT     // msb as name end
 927+ E7D1             >
 927+ E7D1 C2 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 927+ E7D3             >Prev_Ptr        defl    Heap_Ptr
 927+ E7D3             >
 927+ E7D3             >mirror_Ptr      defl    $
 927+ E7D3             >
 927+ E7D3 85 6F       >                dw      Dict_Ptr + 2        // xt
 927+ E7D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 927+ E7D5             >
 927+ E7D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 927+ E7D5             >
 927+ E7D5             >//              ______________________________________________________________________
 927+ E7D5             >//              Dictionary part
 927+ E7D5             >
 927+ E7D5             >                org     Dict_Ptr
 927+ 6F83             >
 927+ 6F83 D3 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 927+ 6F85             >
 927+ 6F85             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 927+ 6F85 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 927+ 6F88             >
 927+ 6F88             >
 927+ 6F88             >                endif           ; ok        // for other definitions it "points" the correct handler
 927+ 6F88             >                // Use of "; ok" to suppress "warning[fwdref]"
 927+ 6F88             >
 927+ 6F88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 928+ 6F88 3E 6F                        dw      BOUNDS                  // bounds
 929+ 6F8A 0C 64                        dw      C_Q_DO                  // ?do
 930+ 6F8C 0C 00                        dw      Type_Skip - $
 931+ 6F8E              Type_Loop:
 932+ 6F8E 3A 64 9E 69                  dw          I, CFETCH           //      i c@
 933+ 6F92 73 6C                        dw          EMIT                //      emit
 934+ 6F94 E0 63                        dw      C_LOOP                  // loop
 935+ 6F96 F8 FF                        dw      Type_Loop - $
 936+ 6F98              Type_Skip:
 937+ 6F98 52 68                        dw      EXIT                    // ;
 938+ 6F9A
 939+ 6F9A              //  ______________________________________________________________________
 940+ 6F9A              //
 941+ 6F9A              // -trailing    a n1 -- a n2
 942+ 6F9A              // Assumes that an n1 bytes-long string is stored at address a
 943+ 6F9A              // and the string contains a space delimited word,
 944+ 6F9A              // Finds n2 as the position of the first character after the word.
 945+ 6F9A                              Colon_Def LTRAILING, "-TRAILING", is_normal
 945+ 6F9A             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 945+ 6F9A             >
 945+ 6F9A             >Dict_Ptr        defl    $
 945+ 6F9A             >
 945+ 6F9A             >//              ______________________________________________________________________
 945+ 6F9A             >//              Heap part
 945+ 6F9A             >
 945+ 6F9A             >
 945+ 6F9A             >                org     (Heap_Ptr & $1FFF) + $E000
 945+ E7D5             >
 945+ E7D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 945+ E7D5             >Latest_Definition defl  Heap_Ptr
 945+ E7D5             >
 945+ E7D5             >                // dummy db directives used to calculate length of namec
 945+ E7D5 2D 54 52 41 >                db      "-TRAILING"
 945+ E7D9 49 4C 49 4E >
 945+ E7DD 47          >
 945+ E7DE             >len_NFA         defl    $ - temp_NFA
 945+ E7DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 945+ E7D5             >
 945+ E7D5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 945+ E7D6 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 945+ E7DA 49 4C 49 4E >
 945+ E7DE 47          >
 945+ E7DF             >                org     $-1                 // alter last byte of Name just above to set
 945+ E7DE C7          >                db      {b $} | END_BIT     // msb as name end
 945+ E7DF             >
 945+ E7DF CC 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 945+ E7E1             >Prev_Ptr        defl    Heap_Ptr
 945+ E7E1             >
 945+ E7E1             >mirror_Ptr      defl    $
 945+ E7E1             >
 945+ E7E1 9C 6F       >                dw      Dict_Ptr + 2        // xt
 945+ E7E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 945+ E7E3             >
 945+ E7E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 945+ E7E3             >
 945+ E7E3             >//              ______________________________________________________________________
 945+ E7E3             >//              Dictionary part
 945+ E7E3             >
 945+ E7E3             >                org     Dict_Ptr
 945+ 6F9A             >
 945+ 6F9A E1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 945+ 6F9C             >
 945+ 6F9C             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 945+ 6F9C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 945+ 6F9F             >
 945+ 6F9F             >
 945+ 6F9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 945+ 6F9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 945+ 6F9F             >
 945+ 6F9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 946+ 6F9F 2B 69 81 6A                  dw      DUP, ZERO               // dup 0
 947+ 6FA3                                                              // do
 948+ 6FA3 0C 64                        dw      C_Q_DO
 949+ 6FA5 20 00                        dw      LTrailing_Leave - $
 950+ 6FA7              LTrailing_Loop:
 951+ 6FA7 67 69 A5 68                  dw          TWO_DUP, PLUS       //      2dup +
 952+ 6FAB C5 68                        dw          ONE_SUBTRACT        //      1-
 953+ 6FAD 9E 69                        dw          CFETCH              //      c@
 954+ 6FAF A4 6A F8 6B                  dw          BL, SUBTRACT        //      bl -
 955+ 6FB3                                                              //      if
 956+ 6FB3 F5 63                        dw          ZBRANCH
 957+ 6FB5 0A 00                        dw          LTrailing_Else - $
 958+ 6FB7 00 64                        dw              C_LEAVE         //          leave
 959+ 6FB9 0C 00                        dw              LTrailing_Leave - $
 960+ 6FBB E8 63                        dw          BRANCH              //      else
 961+ 6FBD 04 00                        dw          LTrailing_Endif - $
 962+ 6FBF              LTrailing_Else:
 963+ 6FBF C5 68                        dw              ONE_SUBTRACT    //          1-
 964+ 6FC1              LTrailing_Endif:                                //      endif
 965+ 6FC1                                                              // loop
 966+ 6FC1 E0 63                        dw      C_LOOP
 967+ 6FC3 E4 FF                        dw      LTrailing_Loop - $
 968+ 6FC5              LTrailing_Leave:
 969+ 6FC5 52 68                        dw      EXIT                    // ;
 970+ 6FC7
 971+ 6FC7              //  ______________________________________________________________________
 972+ 6FC7              //
 973+ 6FC7              // accept       a n1 -- n2
 974+ 6FC7              // Accepts at most n1 characters from terminal and stores them at address a
 975+ 6FC7              // CR stops input. A 'nul' is added as trailer.
 976+ 6FC7              // n2 is the string length. n2 is kept in span user variable also.
 977+ 6FC7                              Colon_Def ACCEPT, "ACCEPT", is_normal
 977+ 6FC7             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 977+ 6FC7             >
 977+ 6FC7             >Dict_Ptr        defl    $
 977+ 6FC7             >
 977+ 6FC7             >//              ______________________________________________________________________
 977+ 6FC7             >//              Heap part
 977+ 6FC7             >
 977+ 6FC7             >
 977+ 6FC7             >                org     (Heap_Ptr & $1FFF) + $E000
 977+ E7E3             >
 977+ E7E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 977+ E7E3             >Latest_Definition defl  Heap_Ptr
 977+ E7E3             >
 977+ E7E3             >                // dummy db directives used to calculate length of namec
 977+ E7E3 41 43 43 45 >                db      "ACCEPT"
 977+ E7E7 50 54       >
 977+ E7E9             >len_NFA         defl    $ - temp_NFA
 977+ E7E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 977+ E7E3             >
 977+ E7E3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 977+ E7E4 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 977+ E7E8 50 54       >
 977+ E7EA             >                org     $-1                 // alter last byte of Name just above to set
 977+ E7E9 D4          >                db      {b $} | END_BIT     // msb as name end
 977+ E7EA             >
 977+ E7EA D5 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 977+ E7EC             >Prev_Ptr        defl    Heap_Ptr
 977+ E7EC             >
 977+ E7EC             >mirror_Ptr      defl    $
 977+ E7EC             >
 977+ E7EC C9 6F       >                dw      Dict_Ptr + 2        // xt
 977+ E7EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 977+ E7EE             >
 977+ E7EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 977+ E7EE             >
 977+ E7EE             >//              ______________________________________________________________________
 977+ E7EE             >//              Dictionary part
 977+ E7EE             >
 977+ E7EE             >                org     Dict_Ptr
 977+ 6FC7             >
 977+ 6FC7 EC 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 977+ 6FC9             >
 977+ 6FC9             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 977+ 6FC9 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 977+ 6FCC             >
 977+ 6FCC             >
 977+ 6FCC             >                endif           ; ok        // for other definitions it "points" the correct handler
 977+ 6FCC             >                // Use of "; ok" to suppress "warning[fwdref]"
 977+ 6FCC             >
 977+ 6FCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 978+ 6FCC 07 69 A5 68                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 978+ 6FD0 07 69
 979+ 6FD2 81 6A 3D 69                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 980+ 6FD6                                                              // do
 981+ 6FD6 0C 64                        dw      C_Q_DO
 982+ 6FD8 8C 00                        dw      Accept_Leave - $
 983+ 6FDA              Accept_Loop:
 984+ 6FDA 38 66                        dw          CUR
 985+ 6FDC 10 69 80 66                  dw          DROP, KEY           //      drop key        ( a  c )
 986+ 6FE0 2B 69                        dw          DUP                 //      dup             ( a  c  c )
 987+ 6FE2 A3 63 0E 00                  dw          LIT, $0E            //      0E
 988+ 6FE6 C7 6A                        dw          PLUS_ORIGIN         //      +origin
 989+ 6FE8 89 69                        dw          FETCH               //      @               ( a  c  c  del )
 990+ 6FEA 04 6C                        dw          EQUALS              //      =               ( a  c  c==del )
 991+ 6FEC                                                              //      if
 992+ 6FEC F5 63                        dw          ZBRANCH
 993+ 6FEE 2C 00                        dw          Accept_Else_0 - $
 994+ 6FF0 10 69                        dw              DROP            //          drop        ( a  )
 995+ 6FF2 2B 69 3A 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 995+ 6FF6 04 6C
 996+ 6FF8 88 6A 0C 68                  dw              ONE, AND_OP     //          1 and
 997+ 6FFC 2B 69                        dw              DUP             //          dup         ( a  a==i  a==i )
 998+ 6FFE 67 68                        dw              R_TO            //          r> 2 - + r>
 999+ 7000 E1 68 A5 68                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1000+ 7004 5C 68                        dw              TO_R            //
1001+ 7006                                                              //          if
1002+ 7006 F5 63                        dw              ZBRANCH
1003+ 7008 0A 00                        dw              Accept_Else_1 - $
1004+ 700A A3 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1005+ 700E                                                              //          else
1006+ 700E E8 63                        dw              BRANCH
1007+ 7010 06 00                        dw              Accept_Endif_1 - $
1008+ 7012              Accept_Else_1:
1009+ 7012 A3 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1010+ 7016              Accept_Endif_1:                                 //          endif
1011+ 7016 E8 63                        dw          BRANCH
1012+ 7018 2E 00                        dw          Accept_Endif_0 - $
1013+ 701A              Accept_Else_0:                                  //      else
1014+ 701A 2B 69                        dw              DUP             //          dup         ( a  c  c )
1015+ 701C A3 63 0D 00                  dw              LIT, 13         //          13
1016+ 7020 04 6C                        dw              EQUALS          //          =           ( a  c  c==CR )
1017+ 7022                                                              //          if
1018+ 7022 F5 63                        dw              ZBRANCH
1019+ 7024 0C 00                        dw              Accept_Else_2 - $
1020+ 7026 10 69 A4 6A                  dw                  DROP, BL    //              drop bl ( a  bl )
1021+ 702A 81 6A                        dw                  ZERO        //              0       ( a  c  0 )
1022+ 702C                                                              //          else
1023+ 702C E8 63                        dw              BRANCH
1024+ 702E 04 00                        dw              Accept_Endif_2 - $
1025+ 7030              Accept_Else_2:
1026+ 7030 2B 69                        dw                  DUP         //              dup     ( a  c  c )
1027+ 7032                                                              //          endif
1028+ 7032              Accept_Endif_2:
1029+ 7032 3A 64 A7 69                  dw              I, CSTORE       //          i           ( a  c )
1030+ 7036 2B 69 A4 6A                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1030+ 703A 1D 6C
1031+ 703C                                                              //          if
1032+ 703C F5 63                        dw              ZBRANCH
1033+ 703E 08 00                        dw              Accept_Endif_3 - $
1034+ 7040 67 68                        dw                  R_TO        //              r>
1035+ 7042 C5 68                        dw                  ONE_SUBTRACT//              1-
1036+ 7044 5C 68                        dw                  TO_R        //              >r
1037+ 7046                                                              //          endif
1038+ 7046              Accept_Endif_3:
1039+ 7046              Accept_Endif_0:                                 //      endif
1040+ 7046 73 6C                        dw          EMIT                //      emit
1041+ 7048
1042+ 7048 81 6A 3A 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1042+ 704C BE 68
1043+ 704E 93 69                        dw          STORE               //          ( zero pad )
1044+ 7050 3A 64                        dw          I                   //      i
1045+ 7052 3A 64 9E 69                  dw          I, CFETCH, ZEQUAL   //      i 0= if
1045+ 7056 77 68
1046+ 7058 F5 63                        dw          ZBRANCH             //
1047+ 705A 06 00                        dw              Accept_Endif_4 - $
1048+ 705C 00 64                        dw                  C_LEAVE     //              leave
1049+ 705E 06 00                        dw                  Accept_Leave - $
1050+ 7060              Accept_Endif_4:                                 //      endif
1051+ 7060                                                              // loop
1052+ 7060 E0 63                        dw      C_LOOP
1053+ 7062 78 FF                        dw      Accept_Loop - $
1054+ 7064              Accept_Leave:
1055+ 7064 24 69 F8 6B                  dw      SWAP, SUBTRACT          // swap -
1056+ 7068 BE 68                        dw      ONE_PLUS                // 1+
1057+ 706A 2B 69 94 6B                  dw      DUP, SPAN, STORE        // dup span !
1057+ 706E 93 69
1058+ 7070 52 68                        dw      EXIT                    // ;
1059+ 7072
1060+ 7072              //  ______________________________________________________________________
1061+ 7072              //
1062+ 7072              // expect      a n --
1063+ 7072              // Accepts at most n1 characters from terminal and stores them at address a
1064+ 7072              // CR stops input. A 'nul' is added as trailer.
1065+ 7072              // n2 is the string length. n2 is kept in span user variable also.
1066+ 7072              //              Colon_Def EXPECT, "EXPECT", is_normal
1067+ 7072              //              dw      ACCEPT, DROP            // accept drop
1068+ 7072              //              dw      EXIT                    // ;
1069+ 7072
1070+ 7072              //  ______________________________________________________________________
1071+ 7072              //
1072+ 7072              // query        --
1073+ 7072              // Accept at most 80 character from console. CR stops.
1074+ 7072              // Text is stored in TIB. Variable IN is zeroed.
1075+ 7072                              Colon_Def QUERY, "QUERY", is_normal
1075+ 7072             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1075+ 7072             >
1075+ 7072             >Dict_Ptr        defl    $
1075+ 7072             >
1075+ 7072             >//              ______________________________________________________________________
1075+ 7072             >//              Heap part
1075+ 7072             >
1075+ 7072             >
1075+ 7072             >                org     (Heap_Ptr & $1FFF) + $E000
1075+ E7EE             >
1075+ E7EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1075+ E7EE             >Latest_Definition defl  Heap_Ptr
1075+ E7EE             >
1075+ E7EE             >                // dummy db directives used to calculate length of namec
1075+ E7EE 51 55 45 52 >                db      "QUERY"
1075+ E7F2 59          >
1075+ E7F3             >len_NFA         defl    $ - temp_NFA
1075+ E7F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1075+ E7EE             >
1075+ E7EE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1075+ E7EF 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1075+ E7F3 59          >
1075+ E7F4             >                org     $-1                 // alter last byte of Name just above to set
1075+ E7F3 D9          >                db      {b $} | END_BIT     // msb as name end
1075+ E7F4             >
1075+ E7F4 E3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1075+ E7F6             >Prev_Ptr        defl    Heap_Ptr
1075+ E7F6             >
1075+ E7F6             >mirror_Ptr      defl    $
1075+ E7F6             >
1075+ E7F6 74 70       >                dw      Dict_Ptr + 2        // xt
1075+ E7F8             >Heap_Ptr        defl    $ - $E000           // save current HP
1075+ E7F8             >
1075+ E7F8             >Current_HP      defl  $ - $E000             // used to set HP once!
1075+ E7F8             >
1075+ E7F8             >//              ______________________________________________________________________
1075+ E7F8             >//              Dictionary part
1075+ E7F8             >
1075+ E7F8             >                org     Dict_Ptr
1075+ 7072             >
1075+ 7072 F6 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1075+ 7074             >
1075+ 7074             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1075+ 7074 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1075+ 7077             >
1075+ 7077             >
1075+ 7077             >                endif           ; ok        // for other definitions it "points" the correct handler
1075+ 7077             >                // Use of "; ok" to suppress "warning[fwdref]"
1075+ 7077             >
1075+ 7077             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1076+ 7077 E6 6A 89 69                  dw      TIB, FETCH              // tib @
1077+ 707B A3 63 50 00                  dw      LIT, 80                 // 80
1078+ 707F C9 6F 10 69                  dw      ACCEPT, DROP            // accept drop
1079+ 7083 81 6A 28 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
1079+ 7087 93 69
1080+ 7089 52 68                        dw      EXIT                    // ;
1081+ 708B
1082+ 708B              //  ______________________________________________________________________
1083+ 708B              //
1084+ 708B              // fill        a n c --
1085+ 708B              // If n > 0, fills n locations starting from address a with the value c.
1086+ 708B                              New_Def FILL, "FILL", is_code, is_normal
1086+ 708B             >
1086+ 708B             >Dict_Ptr        defl    $
1086+ 708B             >
1086+ 708B             >//              ______________________________________________________________________
1086+ 708B             >//              Heap part
1086+ 708B             >
1086+ 708B             >
1086+ 708B             >                org     (Heap_Ptr & $1FFF) + $E000
1086+ E7F8             >
1086+ E7F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1086+ E7F8             >Latest_Definition defl  Heap_Ptr
1086+ E7F8             >
1086+ E7F8             >                // dummy db directives used to calculate length of namec
1086+ E7F8 46 49 4C 4C >                db      "FILL"
1086+ E7FC             >len_NFA         defl    $ - temp_NFA
1086+ E7FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1086+ E7F8             >
1086+ E7F8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1086+ E7F9 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1086+ E7FD             >                org     $-1                 // alter last byte of Name just above to set
1086+ E7FC CC          >                db      {b $} | END_BIT     // msb as name end
1086+ E7FD             >
1086+ E7FD EE 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1086+ E7FF             >Prev_Ptr        defl    Heap_Ptr
1086+ E7FF             >
1086+ E7FF             >mirror_Ptr      defl    $
1086+ E7FF             >
1086+ E7FF 8D 70       >                dw      Dict_Ptr + 2        // xt
1086+ E801             >Heap_Ptr        defl    $ - $E000           // save current HP
1086+ E801             >
1086+ E801             >Current_HP      defl  $ - $E000             // used to set HP once!
1086+ E801             >
1086+ E801             >//              ______________________________________________________________________
1086+ E801             >//              Dictionary part
1086+ E801             >
1086+ E801             >                org     Dict_Ptr
1086+ 708B             >
1086+ 708B FF 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1086+ 708D             >
1086+ 708D             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1086+ 708D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1086+ 708D ~           >
1086+ 708D ~           >
1086+ 708D             >                endif           ; ok        // for other definitions it "points" the correct handler
1086+ 708D             >                // Use of "; ok" to suppress "warning[fwdref]"
1086+ 708D             >
1086+ 708D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1087+ 708D D9                           exx
1088+ 708E D1                           pop     de                  // de has character
1089+ 708F C1                           pop     bc                  // bc has counter
1090+ 7090 E1                           pop     hl                  // hl has address, save Instruction Pointer
1091+ 7091              Fill_Loop:
1092+ 7091 78                               ld      a, b
1093+ 7092 B1                               or      c
1094+ 7093 28 05                        jr      z, Fill_While_End
1095+ 7095 73                               ld      (hl), e
1096+ 7096 0B                               dec     bc
1097+ 7097 23                               inc     hl
1098+ 7098 18 F7                        jr      Fill_Loop
1099+ 709A              Fill_While_End:
1100+ 709A D9                           exx
1101+ 709B                              next
1101+ 709B DD E9       >                jp      (ix)
1102+ 709D
1103+ 709D              //  ______________________________________________________________________
1104+ 709D              //
1105+ 709D              // erase        a n --
1106+ 709D              // If n > 0, fills n locations starting from address a with 'nul' characters.
1107+ 709D                              Colon_Def ERASE, "ERASE", is_normal
1107+ 709D             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1107+ 709D             >
1107+ 709D             >Dict_Ptr        defl    $
1107+ 709D             >
1107+ 709D             >//              ______________________________________________________________________
1107+ 709D             >//              Heap part
1107+ 709D             >
1107+ 709D             >
1107+ 709D             >                org     (Heap_Ptr & $1FFF) + $E000
1107+ E801             >
1107+ E801             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1107+ E801             >Latest_Definition defl  Heap_Ptr
1107+ E801             >
1107+ E801             >                // dummy db directives used to calculate length of namec
1107+ E801 45 52 41 53 >                db      "ERASE"
1107+ E805 45          >
1107+ E806             >len_NFA         defl    $ - temp_NFA
1107+ E806             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1107+ E801             >
1107+ E801 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1107+ E802 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1107+ E806 45          >
1107+ E807             >                org     $-1                 // alter last byte of Name just above to set
1107+ E806 C5          >                db      {b $} | END_BIT     // msb as name end
1107+ E807             >
1107+ E807 F8 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1107+ E809             >Prev_Ptr        defl    Heap_Ptr
1107+ E809             >
1107+ E809             >mirror_Ptr      defl    $
1107+ E809             >
1107+ E809 9F 70       >                dw      Dict_Ptr + 2        // xt
1107+ E80B             >Heap_Ptr        defl    $ - $E000           // save current HP
1107+ E80B             >
1107+ E80B             >Current_HP      defl  $ - $E000             // used to set HP once!
1107+ E80B             >
1107+ E80B             >//              ______________________________________________________________________
1107+ E80B             >//              Dictionary part
1107+ E80B             >
1107+ E80B             >                org     Dict_Ptr
1107+ 709D             >
1107+ 709D 09 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1107+ 709F             >
1107+ 709F             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1107+ 709F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1107+ 70A2             >
1107+ 70A2             >
1107+ 70A2             >                endif           ; ok        // for other definitions it "points" the correct handler
1107+ 70A2             >                // Use of "; ok" to suppress "warning[fwdref]"
1107+ 70A2             >
1107+ 70A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1108+ 70A2 81 6A 8D 70                  dw      ZERO, FILL              // 0 fill
1109+ 70A6 52 68                        dw      EXIT                    // ;
1110+ 70A8
1111+ 70A8              //  ______________________________________________________________________
1112+ 70A8              //
1113+ 70A8              // blank        a n --
1114+ 70A8              // If n > 0, fills n locations starting from address a with 'nul' characters.
1115+ 70A8                              Colon_Def BLANK, "BLANK", is_normal
1115+ 70A8             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1115+ 70A8             >
1115+ 70A8             >Dict_Ptr        defl    $
1115+ 70A8             >
1115+ 70A8             >//              ______________________________________________________________________
1115+ 70A8             >//              Heap part
1115+ 70A8             >
1115+ 70A8             >
1115+ 70A8             >                org     (Heap_Ptr & $1FFF) + $E000
1115+ E80B             >
1115+ E80B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1115+ E80B             >Latest_Definition defl  Heap_Ptr
1115+ E80B             >
1115+ E80B             >                // dummy db directives used to calculate length of namec
1115+ E80B 42 4C 41 4E >                db      "BLANK"
1115+ E80F 4B          >
1115+ E810             >len_NFA         defl    $ - temp_NFA
1115+ E810             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1115+ E80B             >
1115+ E80B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1115+ E80C 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1115+ E810 4B          >
1115+ E811             >                org     $-1                 // alter last byte of Name just above to set
1115+ E810 CB          >                db      {b $} | END_BIT     // msb as name end
1115+ E811             >
1115+ E811 01 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1115+ E813             >Prev_Ptr        defl    Heap_Ptr
1115+ E813             >
1115+ E813             >mirror_Ptr      defl    $
1115+ E813             >
1115+ E813 AA 70       >                dw      Dict_Ptr + 2        // xt
1115+ E815             >Heap_Ptr        defl    $ - $E000           // save current HP
1115+ E815             >
1115+ E815             >Current_HP      defl  $ - $E000             // used to set HP once!
1115+ E815             >
1115+ E815             >//              ______________________________________________________________________
1115+ E815             >//              Dictionary part
1115+ E815             >
1115+ E815             >                org     Dict_Ptr
1115+ 70A8             >
1115+ 70A8 13 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1115+ 70AA             >
1115+ 70AA             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1115+ 70AA CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1115+ 70AD             >
1115+ 70AD             >
1115+ 70AD             >                endif           ; ok        // for other definitions it "points" the correct handler
1115+ 70AD             >                // Use of "; ok" to suppress "warning[fwdref]"
1115+ 70AD             >
1115+ 70AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1116+ 70AD A4 6A 8D 70                  dw      BL, FILL                // bl fill
1117+ 70B1 52 68                        dw      EXIT                    // ;
1118+ 70B3
1119+ 70B3              //  ______________________________________________________________________
1120+ 70B3              //
1121+ 70B3              // hold         c --
1122+ 70B3              // Used between <# and #> to insert a character c in numeric formatting.
1123+ 70B3                              Colon_Def HOLD, "HOLD", is_normal
1123+ 70B3             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1123+ 70B3             >
1123+ 70B3             >Dict_Ptr        defl    $
1123+ 70B3             >
1123+ 70B3             >//              ______________________________________________________________________
1123+ 70B3             >//              Heap part
1123+ 70B3             >
1123+ 70B3             >
1123+ 70B3             >                org     (Heap_Ptr & $1FFF) + $E000
1123+ E815             >
1123+ E815             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1123+ E815             >Latest_Definition defl  Heap_Ptr
1123+ E815             >
1123+ E815             >                // dummy db directives used to calculate length of namec
1123+ E815 48 4F 4C 44 >                db      "HOLD"
1123+ E819             >len_NFA         defl    $ - temp_NFA
1123+ E819             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1123+ E815             >
1123+ E815 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1123+ E816 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1123+ E81A             >                org     $-1                 // alter last byte of Name just above to set
1123+ E819 C4          >                db      {b $} | END_BIT     // msb as name end
1123+ E81A             >
1123+ E81A 0B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1123+ E81C             >Prev_Ptr        defl    Heap_Ptr
1123+ E81C             >
1123+ E81C             >mirror_Ptr      defl    $
1123+ E81C             >
1123+ E81C B5 70       >                dw      Dict_Ptr + 2        // xt
1123+ E81E             >Heap_Ptr        defl    $ - $E000           // save current HP
1123+ E81E             >
1123+ E81E             >Current_HP      defl  $ - $E000             // used to set HP once!
1123+ E81E             >
1123+ E81E             >//              ______________________________________________________________________
1123+ E81E             >//              Dictionary part
1123+ E81E             >
1123+ E81E             >                org     Dict_Ptr
1123+ 70B3             >
1123+ 70B3 1C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1123+ 70B5             >
1123+ 70B5             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1123+ 70B5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1123+ 70B8             >
1123+ 70B8             >
1123+ 70B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1123+ 70B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1123+ 70B8             >
1123+ 70B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1124+ 70B8 9D 6A                        dw      NEG_ONE                 // -1
1125+ 70BA 70 6B 71 69                  dw      HLD, PLUSSTORE          // hld +!
1126+ 70BE 70 6B 89 69                  dw      HLD, FETCH, CSTORE      // hld @ c!
1126+ 70C2 A7 69
1127+ 70C4 52 68                        dw      EXIT                    // ;
1128+ 70C6
1129+ 70C6              //  ______________________________________________________________________
1130+ 70C6              //
1131+ 70C6              // pad         -- a
1132+ 70C6              // leaves the buffer text address. This is at a fixed distance over HERE.
1133+ 70C6                              Colon_Def PAD, "PAD", is_normal
1133+ 70C6             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1133+ 70C6             >
1133+ 70C6             >Dict_Ptr        defl    $
1133+ 70C6             >
1133+ 70C6             >//              ______________________________________________________________________
1133+ 70C6             >//              Heap part
1133+ 70C6             >
1133+ 70C6             >
1133+ 70C6             >                org     (Heap_Ptr & $1FFF) + $E000
1133+ E81E             >
1133+ E81E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1133+ E81E             >Latest_Definition defl  Heap_Ptr
1133+ E81E             >
1133+ E81E             >                // dummy db directives used to calculate length of namec
1133+ E81E 50 41 44    >                db      "PAD"
1133+ E821             >len_NFA         defl    $ - temp_NFA
1133+ E821             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1133+ E81E             >
1133+ E81E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1133+ E81F 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1133+ E822             >                org     $-1                 // alter last byte of Name just above to set
1133+ E821 C4          >                db      {b $} | END_BIT     // msb as name end
1133+ E822             >
1133+ E822 15 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1133+ E824             >Prev_Ptr        defl    Heap_Ptr
1133+ E824             >
1133+ E824             >mirror_Ptr      defl    $
1133+ E824             >
1133+ E824 C8 70       >                dw      Dict_Ptr + 2        // xt
1133+ E826             >Heap_Ptr        defl    $ - $E000           // save current HP
1133+ E826             >
1133+ E826             >Current_HP      defl  $ - $E000             // used to set HP once!
1133+ E826             >
1133+ E826             >//              ______________________________________________________________________
1133+ E826             >//              Dictionary part
1133+ E826             >
1133+ E826             >                org     Dict_Ptr
1133+ 70C6             >
1133+ 70C6 24 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1133+ 70C8             >
1133+ 70C8             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1133+ 70C8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1133+ 70CB             >
1133+ 70CB             >
1133+ 70CB             >                endif           ; ok        // for other definitions it "points" the correct handler
1133+ 70CB             >                // Use of "; ok" to suppress "warning[fwdref]"
1133+ 70CB             >
1133+ 70CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1134+ 70CB A6 6B                        dw      HERE                    // here
1135+ 70CD A3 63 44 00                  dw      LIT, 68                 // 68
1136+ 70D1 A5 68                        dw      PLUS                    // +
1137+ 70D3 52 68                        dw      EXIT                    // ;
1138+ 70D5
1139+ 70D5              //  ______________________________________________________________________
1140+ 70D5              //
1141+ 70D5              // word         c -- a
1142+ 70D5              // reads characters from input streams until it encouners a c delimiter.
1143+ 70D5              // Stores that packet so it starts from HERE
1144+ 70D5              // WORD leaves a counter as first byte and ends the packet with two spaces.
1145+ 70D5              // Other occurrences of c are ignored.
1146+ 70D5              // If BLK is zero, text is taken from terminal buffer TIB.
1147+ 70D5              // Otherwise text is taken from the disk-block given by BLK.
1148+ 70D5              // "in" variable is incremented of the number of character read.
1149+ 70D5              // The number of characters read is given by ENCLOSE.
1150+ 70D5                              Colon_Def WORD, "WORD", is_normal
1150+ 70D5             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1150+ 70D5             >
1150+ 70D5             >Dict_Ptr        defl    $
1150+ 70D5             >
1150+ 70D5             >//              ______________________________________________________________________
1150+ 70D5             >//              Heap part
1150+ 70D5             >
1150+ 70D5             >
1150+ 70D5             >                org     (Heap_Ptr & $1FFF) + $E000
1150+ E826             >
1150+ E826             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1150+ E826             >Latest_Definition defl  Heap_Ptr
1150+ E826             >
1150+ E826             >                // dummy db directives used to calculate length of namec
1150+ E826 57 4F 52 44 >                db      "WORD"
1150+ E82A             >len_NFA         defl    $ - temp_NFA
1150+ E82A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1150+ E826             >
1150+ E826 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1150+ E827 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1150+ E82B             >                org     $-1                 // alter last byte of Name just above to set
1150+ E82A C4          >                db      {b $} | END_BIT     // msb as name end
1150+ E82B             >
1150+ E82B 1E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1150+ E82D             >Prev_Ptr        defl    Heap_Ptr
1150+ E82D             >
1150+ E82D             >mirror_Ptr      defl    $
1150+ E82D             >
1150+ E82D D7 70       >                dw      Dict_Ptr + 2        // xt
1150+ E82F             >Heap_Ptr        defl    $ - $E000           // save current HP
1150+ E82F             >
1150+ E82F             >Current_HP      defl  $ - $E000             // used to set HP once!
1150+ E82F             >
1150+ E82F             >//              ______________________________________________________________________
1150+ E82F             >//              Dictionary part
1150+ E82F             >
1150+ E82F             >                org     Dict_Ptr
1150+ 70D5             >
1150+ 70D5 2D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1150+ 70D7             >
1150+ 70D7             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1150+ 70D7 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1150+ 70DA             >
1150+ 70DA             >
1150+ 70DA             >                endif           ; ok        // for other definitions it "points" the correct handler
1150+ 70DA             >                // Use of "; ok" to suppress "warning[fwdref]"
1150+ 70DA             >
1150+ 70DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1151+ 70DA 22 6B 89 69                  dw      BLK, FETCH              // blk @
1152+ 70DE                                                              // if
1153+ 70DE F5 63                        dw      ZBRANCH
1154+ 70E0 0C 00                        dw      Word_Else - $
1155+ 70E2 22 6B 89 69                  dw          BLK, FETCH          //      blk @
1156+ 70E6 63 79                        dw          BLOCK               //      block ( forward )
1157+ 70E8                                                              // else
1158+ 70E8 E8 63                        dw      BRANCH
1159+ 70EA 06 00                        dw      Word_Endif - $
1160+ 70EC              Word_Else:
1161+ 70EC E6 6A 89 69                  dw         TIB, FETCH           //      tib @
1162+ 70F0              Word_Endif:                                     // endif
1163+ 70F0 28 6B 89 69                  dw      TO_IN, FETCH, PLUS      // >in @ +
1163+ 70F4 A5 68
1164+ 70F6 24 69 29 65                  dw      SWAP, ENCLOSE           // swap enclose
1165+ 70FA A6 6B A3 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1165+ 70FE 22 00 AA 70
1166+ 7102 28 6B 71 69                  dw      TO_IN, PLUSSTORE        // >in @ +
1167+ 7106 07 69 F8 6B                  dw      OVER, SUBTRACT, TO_R    // over - >r
1167+ 710A 5C 68
1168+ 710C 72 68 A6 6B                  dw      R_OP, HERE, CSTORE      // r here c!
1168+ 7110 A7 69
1169+ 7112 A5 68                        dw      PLUS                    // +
1170+ 7114 A6 6B BE 68                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1170+ 7118 67 68
1171+ 711A 8D 67                        dw      CMOVE                   // cmove
1172+ 711C A6 6B                        dw      HERE                    // here
1173+ 711E 52 68                        dw      EXIT                    // ;
1174+ 7120
1175+ 7120              //  ______________________________________________________________________
1176+ 7120              //
1177+ 7120              // (.")         --
1178+ 7120              // Direct procedure compiled by ." and  .(  It executes TYPE.
1179+ 7120                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1179+ 7120             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1179+ 7120             >
1179+ 7120             >Dict_Ptr        defl    $
1179+ 7120             >
1179+ 7120             >//              ______________________________________________________________________
1179+ 7120             >//              Heap part
1179+ 7120             >
1179+ 7120             >
1179+ 7120             >                org     (Heap_Ptr & $1FFF) + $E000
1179+ E82F             >
1179+ E82F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1179+ E82F             >Latest_Definition defl  Heap_Ptr
1179+ E82F             >
1179+ E82F             >                // dummy db directives used to calculate length of namec
1179+ E82F 28 2E 22 29 >                db      '(.")'
1179+ E833             >len_NFA         defl    $ - temp_NFA
1179+ E833             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1179+ E82F             >
1179+ E82F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1179+ E830 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1179+ E834             >                org     $-1                 // alter last byte of Name just above to set
1179+ E833 A9          >                db      {b $} | END_BIT     // msb as name end
1179+ E834             >
1179+ E834 26 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1179+ E836             >Prev_Ptr        defl    Heap_Ptr
1179+ E836             >
1179+ E836             >mirror_Ptr      defl    $
1179+ E836             >
1179+ E836 22 71       >                dw      Dict_Ptr + 2        // xt
1179+ E838             >Heap_Ptr        defl    $ - $E000           // save current HP
1179+ E838             >
1179+ E838             >Current_HP      defl  $ - $E000             // used to set HP once!
1179+ E838             >
1179+ E838             >//              ______________________________________________________________________
1179+ E838             >//              Dictionary part
1179+ E838             >
1179+ E838             >                org     Dict_Ptr
1179+ 7120             >
1179+ 7120 36 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1179+ 7122             >
1179+ 7122             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1179+ 7122 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1179+ 7125             >
1179+ 7125             >
1179+ 7125             >                endif           ; ok        // for other definitions it "points" the correct handler
1179+ 7125             >                // Use of "; ok" to suppress "warning[fwdref]"
1179+ 7125             >
1179+ 7125             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1180+ 7125 72 68 31 6F                  dw      R_OP, COUNT             // r count
1181+ 7129 2B 69 BE 68                  dw      DUP, ONE_PLUS           // dup 1+
1182+ 712D 67 68 A5 68                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1182+ 7131 5C 68
1183+ 7133 85 6F                        dw      TYPE                    // type
1184+ 7135 52 68                        dw      EXIT                    // ;
1185+ 7137
1186+ 7137              //  ______________________________________________________________________
1187+ 7137              //
1188+ 7137              // char         -- c
1189+ 7137              // get first character from next input word
1190+ 7137                              Colon_Def CHAR,  "CHAR", is_normal
1190+ 7137             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1190+ 7137             >
1190+ 7137             >Dict_Ptr        defl    $
1190+ 7137             >
1190+ 7137             >//              ______________________________________________________________________
1190+ 7137             >//              Heap part
1190+ 7137             >
1190+ 7137             >
1190+ 7137             >                org     (Heap_Ptr & $1FFF) + $E000
1190+ E838             >
1190+ E838             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1190+ E838             >Latest_Definition defl  Heap_Ptr
1190+ E838             >
1190+ E838             >                // dummy db directives used to calculate length of namec
1190+ E838 43 48 41 52 >                db      "CHAR"
1190+ E83C             >len_NFA         defl    $ - temp_NFA
1190+ E83C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1190+ E838             >
1190+ E838 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1190+ E839 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1190+ E83D             >                org     $-1                 // alter last byte of Name just above to set
1190+ E83C D2          >                db      {b $} | END_BIT     // msb as name end
1190+ E83D             >
1190+ E83D 2F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1190+ E83F             >Prev_Ptr        defl    Heap_Ptr
1190+ E83F             >
1190+ E83F             >mirror_Ptr      defl    $
1190+ E83F             >
1190+ E83F 39 71       >                dw      Dict_Ptr + 2        // xt
1190+ E841             >Heap_Ptr        defl    $ - $E000           // save current HP
1190+ E841             >
1190+ E841             >Current_HP      defl  $ - $E000             // used to set HP once!
1190+ E841             >
1190+ E841             >//              ______________________________________________________________________
1190+ E841             >//              Dictionary part
1190+ E841             >
1190+ E841             >                org     Dict_Ptr
1190+ 7137             >
1190+ 7137 3F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1190+ 7139             >
1190+ 7139             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1190+ 7139 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1190+ 713C             >
1190+ 713C             >
1190+ 713C             >                endif           ; ok        // for other definitions it "points" the correct handler
1190+ 713C             >                // Use of "; ok" to suppress "warning[fwdref]"
1190+ 713C             >
1190+ 713C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1191+ 713C A4 6A D7 70                  dw      BL, WORD                // bl word
1192+ 7140 BE 68 9E 69                  dw      ONE_PLUS, CFETCH        // 1+ c@
1193+ 7144 52 68                        dw      EXIT                    // ;
1194+ 7146
1195+ 7146              //  ______________________________________________________________________
1196+ 7146              //
1197+ 7146              // ,"           --
1198+ 7146              // compiles a string terminated by " as a counted string from next input stream
1199+ 7146                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1199+ 7146             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1199+ 7146             >
1199+ 7146             >Dict_Ptr        defl    $
1199+ 7146             >
1199+ 7146             >//              ______________________________________________________________________
1199+ 7146             >//              Heap part
1199+ 7146             >
1199+ 7146             >
1199+ 7146             >                org     (Heap_Ptr & $1FFF) + $E000
1199+ E841             >
1199+ E841             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1199+ E841             >Latest_Definition defl  Heap_Ptr
1199+ E841             >
1199+ E841             >                // dummy db directives used to calculate length of namec
1199+ E841 2C 22       >                db      ',"'
1199+ E843             >len_NFA         defl    $ - temp_NFA
1199+ E843             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1199+ E841             >
1199+ E841 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1199+ E842 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1199+ E844             >                org     $-1                 // alter last byte of Name just above to set
1199+ E843 A2          >                db      {b $} | END_BIT     // msb as name end
1199+ E844             >
1199+ E844 38 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1199+ E846             >Prev_Ptr        defl    Heap_Ptr
1199+ E846             >
1199+ E846             >mirror_Ptr      defl    $
1199+ E846             >
1199+ E846 48 71       >                dw      Dict_Ptr + 2        // xt
1199+ E848             >Heap_Ptr        defl    $ - $E000           // save current HP
1199+ E848             >
1199+ E848             >Current_HP      defl  $ - $E000             // used to set HP once!
1199+ E848             >
1199+ E848             >//              ______________________________________________________________________
1199+ E848             >//              Dictionary part
1199+ E848             >
1199+ E848             >                org     Dict_Ptr
1199+ 7146             >
1199+ 7146 46 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1199+ 7148             >
1199+ 7148             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1199+ 7148 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1199+ 714B             >
1199+ 714B             >
1199+ 714B             >                endif           ; ok        // for other definitions it "points" the correct handler
1199+ 714B             >                // Use of "; ok" to suppress "warning[fwdref]"
1199+ 714B             >
1199+ 714B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1200+ 714B A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1201+ 714F D7 70                        dw      WORD                    // word
1202+ 7151 9E 69 BE 68                  dw      CFETCH, ONE_PLUS        // c@ 1+
1203+ 7155 B1 6B                        dw      ALLOT                   // allot
1204+ 7157 81 6A CB 6B                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1205+ 715B 52 68                        dw      EXIT
1206+ 715D
1207+ 715D              //  ______________________________________________________________________
1208+ 715D              //
1209+ 715D              // .c           c --
1210+ 715D              // intermediate general purpose string builder, used by ." and .(
1211+ 715D                              Colon_Def DOT_C,  ".C", is_immediate
1211+ 715D             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1211+ 715D             >
1211+ 715D             >Dict_Ptr        defl    $
1211+ 715D             >
1211+ 715D             >//              ______________________________________________________________________
1211+ 715D             >//              Heap part
1211+ 715D             >
1211+ 715D             >
1211+ 715D             >                org     (Heap_Ptr & $1FFF) + $E000
1211+ E848             >
1211+ E848             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1211+ E848             >Latest_Definition defl  Heap_Ptr
1211+ E848             >
1211+ E848             >                // dummy db directives used to calculate length of namec
1211+ E848 2E 43       >                db      ".C"
1211+ E84A             >len_NFA         defl    $ - temp_NFA
1211+ E84A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1211+ E848             >
1211+ E848 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1211+ E849 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1211+ E84B             >                org     $-1                 // alter last byte of Name just above to set
1211+ E84A C3          >                db      {b $} | END_BIT     // msb as name end
1211+ E84B             >
1211+ E84B 41 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1211+ E84D             >Prev_Ptr        defl    Heap_Ptr
1211+ E84D             >
1211+ E84D             >mirror_Ptr      defl    $
1211+ E84D             >
1211+ E84D 5F 71       >                dw      Dict_Ptr + 2        // xt
1211+ E84F             >Heap_Ptr        defl    $ - $E000           // save current HP
1211+ E84F             >
1211+ E84F             >Current_HP      defl  $ - $E000             // used to set HP once!
1211+ E84F             >
1211+ E84F             >//              ______________________________________________________________________
1211+ E84F             >//              Dictionary part
1211+ E84F             >
1211+ E84F             >                org     Dict_Ptr
1211+ 715D             >
1211+ 715D 4D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1211+ 715F             >
1211+ 715F             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1211+ 715F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1211+ 7162             >
1211+ 7162             >
1211+ 7162             >                endif           ; ok        // for other definitions it "points" the correct handler
1211+ 7162             >                // Use of "; ok" to suppress "warning[fwdref]"
1211+ 7162             >
1211+ 7162             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1212+ 7162 4C 6B 89 69                  dw      STATE, FETCH            // state @
1213+ 7166                                                              // if
1214+ 7166 F5 63                        dw      ZBRANCH
1215+ 7168 12 00                        dw      Dot_C_Else - $
1216+ 716A 65 6E 22 71                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1217+ 716E D7 70 9E 69                  dw          WORD, CFETCH        //      word c@
1218+ 7172 BE 68 B1 6B                  dw          ONE_PLUS, ALLOT     //      1+ allot
1219+ 7176                                                              // else
1220+ 7176 E8 63                        dw      BRANCH
1221+ 7178 08 00                        dw      Dot_C_Endif - $
1222+ 717A              Dot_C_Else:
1223+ 717A D7 70 31 6F                  dw          WORD, COUNT, TYPE   //      word count type
1223+ 717E 85 6F
1224+ 7180              Dot_C_Endif:                                    // endif
1225+ 7180 52 68                        dw      EXIT                    ;
1226+ 7182
1227+ 7182              //  ______________________________________________________________________
1228+ 7182              //
1229+ 7182              // ."           c --
1230+ 7182                              Colon_Def DOT_QUOTE,  '."', is_immediate
1230+ 7182             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1230+ 7182             >
1230+ 7182             >Dict_Ptr        defl    $
1230+ 7182             >
1230+ 7182             >//              ______________________________________________________________________
1230+ 7182             >//              Heap part
1230+ 7182             >
1230+ 7182             >
1230+ 7182             >                org     (Heap_Ptr & $1FFF) + $E000
1230+ E84F             >
1230+ E84F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1230+ E84F             >Latest_Definition defl  Heap_Ptr
1230+ E84F             >
1230+ E84F             >                // dummy db directives used to calculate length of namec
1230+ E84F 2E 22       >                db      '."'
1230+ E851             >len_NFA         defl    $ - temp_NFA
1230+ E851             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1230+ E84F             >
1230+ E84F C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1230+ E850 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1230+ E852             >                org     $-1                 // alter last byte of Name just above to set
1230+ E851 A2          >                db      {b $} | END_BIT     // msb as name end
1230+ E852             >
1230+ E852 48 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1230+ E854             >Prev_Ptr        defl    Heap_Ptr
1230+ E854             >
1230+ E854             >mirror_Ptr      defl    $
1230+ E854             >
1230+ E854 84 71       >                dw      Dict_Ptr + 2        // xt
1230+ E856             >Heap_Ptr        defl    $ - $E000           // save current HP
1230+ E856             >
1230+ E856             >Current_HP      defl  $ - $E000             // used to set HP once!
1230+ E856             >
1230+ E856             >//              ______________________________________________________________________
1230+ E856             >//              Dictionary part
1230+ E856             >
1230+ E856             >                org     Dict_Ptr
1230+ 7182             >
1230+ 7182 54 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1230+ 7184             >
1230+ 7184             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1230+ 7184 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1230+ 7187             >
1230+ 7187             >
1230+ 7187             >                endif           ; ok        // for other definitions it "points" the correct handler
1230+ 7187             >                // Use of "; ok" to suppress "warning[fwdref]"
1230+ 7187             >
1230+ 7187             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1231+ 7187 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1232+ 718B 5F 71                        dw      DOT_C                   // [compile] .c
1233+ 718D 52 68                        dw      EXIT                    // ; immediate
1234+ 718F
1235+ 718F              //  ______________________________________________________________________
1236+ 718F              //
1237+ 718F              // .(           c --
1238+ 718F                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1238+ 718F             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1238+ 718F             >
1238+ 718F             >Dict_Ptr        defl    $
1238+ 718F             >
1238+ 718F             >//              ______________________________________________________________________
1238+ 718F             >//              Heap part
1238+ 718F             >
1238+ 718F             >
1238+ 718F             >                org     (Heap_Ptr & $1FFF) + $E000
1238+ E856             >
1238+ E856             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1238+ E856             >Latest_Definition defl  Heap_Ptr
1238+ E856             >
1238+ E856             >                // dummy db directives used to calculate length of namec
1238+ E856 2E 28       >                db      ".("
1238+ E858             >len_NFA         defl    $ - temp_NFA
1238+ E858             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1238+ E856             >
1238+ E856 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1238+ E857 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1238+ E859             >                org     $-1                 // alter last byte of Name just above to set
1238+ E858 A8          >                db      {b $} | END_BIT     // msb as name end
1238+ E859             >
1238+ E859 4F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1238+ E85B             >Prev_Ptr        defl    Heap_Ptr
1238+ E85B             >
1238+ E85B             >mirror_Ptr      defl    $
1238+ E85B             >
1238+ E85B 91 71       >                dw      Dict_Ptr + 2        // xt
1238+ E85D             >Heap_Ptr        defl    $ - $E000           // save current HP
1238+ E85D             >
1238+ E85D             >Current_HP      defl  $ - $E000             // used to set HP once!
1238+ E85D             >
1238+ E85D             >//              ______________________________________________________________________
1238+ E85D             >//              Dictionary part
1238+ E85D             >
1238+ E85D             >                org     Dict_Ptr
1238+ 718F             >
1238+ 718F 5B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1238+ 7191             >
1238+ 7191             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1238+ 7191 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1238+ 7194             >
1238+ 7194             >
1238+ 7194             >                endif           ; ok        // for other definitions it "points" the correct handler
1238+ 7194             >                // Use of "; ok" to suppress "warning[fwdref]"
1238+ 7194             >
1238+ 7194             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1239+ 7194 A3 63 29 00                  dw      LIT, ")"                // [char] )
1240+ 7198 5F 71                        dw      DOT_C                   // [compile] .c
1241+ 719A 52 68                        dw      EXIT                    // ; immediate
1242+ 719C
1243+ 719C              //  ______________________________________________________________________
1244+ 719C              //
1245+ 719C              // (sgn)        a -- a f
1246+ 719C              // determines if char in addr a is a sign (+ or -), and in that case increments
1247+ 719C              // a flag. Returns f as the sign, true for negative, false for positive.
1248+ 719C              // called by NUMBER and (EXP)
1249+ 719C                              Colon_Def CSGN,  "(SGN)", is_normal
1249+ 719C             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1249+ 719C             >
1249+ 719C             >Dict_Ptr        defl    $
1249+ 719C             >
1249+ 719C             >//              ______________________________________________________________________
1249+ 719C             >//              Heap part
1249+ 719C             >
1249+ 719C             >
1249+ 719C             >                org     (Heap_Ptr & $1FFF) + $E000
1249+ E85D             >
1249+ E85D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1249+ E85D             >Latest_Definition defl  Heap_Ptr
1249+ E85D             >
1249+ E85D             >                // dummy db directives used to calculate length of namec
1249+ E85D 28 53 47 4E >                db      "(SGN)"
1249+ E861 29          >
1249+ E862             >len_NFA         defl    $ - temp_NFA
1249+ E862             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1249+ E85D             >
1249+ E85D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1249+ E85E 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1249+ E862 29          >
1249+ E863             >                org     $-1                 // alter last byte of Name just above to set
1249+ E862 A9          >                db      {b $} | END_BIT     // msb as name end
1249+ E863             >
1249+ E863 56 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1249+ E865             >Prev_Ptr        defl    Heap_Ptr
1249+ E865             >
1249+ E865             >mirror_Ptr      defl    $
1249+ E865             >
1249+ E865 9E 71       >                dw      Dict_Ptr + 2        // xt
1249+ E867             >Heap_Ptr        defl    $ - $E000           // save current HP
1249+ E867             >
1249+ E867             >Current_HP      defl  $ - $E000             // used to set HP once!
1249+ E867             >
1249+ E867             >//              ______________________________________________________________________
1249+ E867             >//              Dictionary part
1249+ E867             >
1249+ E867             >                org     Dict_Ptr
1249+ 719C             >
1249+ 719C 65 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1249+ 719E             >
1249+ 719E             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1249+ 719E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1249+ 71A1             >
1249+ 71A1             >
1249+ 71A1             >                endif           ; ok        // for other definitions it "points" the correct handler
1249+ 71A1             >                // Use of "; ok" to suppress "warning[fwdref]"
1249+ 71A1             >
1249+ 71A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1250+ 71A1 2B 69 BE 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1250+ 71A5 9E 69
1251+ 71A7 2B 69 A3 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1251+ 71AB 2D 00 04 6C
1252+ 71AF                                                              // if
1253+ 71AF F5 63                        dw      ZBRANCH
1254+ 71B1 12 00                        dw      CSgn_Else_0 - $
1255+ 71B3 10 69                        dw          DROP                //      drop
1256+ 71B5 BE 68                        dw          ONE_PLUS            //      1+
1257+ 71B7 88 6A 58 6B                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1257+ 71BB 71 69
1258+ 71BD 88 6A                        dw          ONE                 //      1
1259+ 71BF                                                              // else
1260+ 71BF E8 63                        dw      BRANCH
1261+ 71C1 16 00                        dw      CSgn_Endif_0 - $
1262+ 71C3              CSgn_Else_0:
1263+ 71C3 A3 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1263+ 71C7 04 6C
1264+ 71C9                                                              //      if
1265+ 71C9 F5 63                        dw          ZBRANCH
1266+ 71CB 0A 00                        dw          CSgn_Endif_1 - $
1267+ 71CD BE 68                        dw              ONE_PLUS        //          1+
1268+ 71CF 88 6A 58 6B                  dw              ONE, DPL        //          1 dpl
1269+ 71D3 71 69                        dw              PLUSSTORE       //          +!
1270+ 71D5              CSgn_Endif_1                                    //      endif
1271+ 71D5 81 6A                        dw          ZERO                //      0
1272+ 71D7              CSgn_Endif_0:                                   // endif
1273+ 71D7 52 68                        dw      EXIT
1274+ 71D9
1275+ 71D9              //  ______________________________________________________________________
1276+ 71D9              //
1277+ 71D9              // (number)     d a -- d1 a1
1278+ 71D9              // using the current BASE parse characters stored in address a
1279+ 71D9              // accumulating a double precision integer d
1280+ 71D9              // the process stops at the first not-convertible character
1281+ 71D9              // A double-number is kept in CPU registers as HLDE.
1282+ 71D9              // On the stack a double number is treated as two single numbers
1283+ 71D9              // where HL is on the top of the stack and DE is the second from top,
1284+ 71D9              // so in the stack memory it appears as LHED.
1285+ 71D9              // Instead, in 2VARIABLE a double number is stored as EDLH.
1286+ 71D9                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1286+ 71D9             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1286+ 71D9             >
1286+ 71D9             >Dict_Ptr        defl    $
1286+ 71D9             >
1286+ 71D9             >//              ______________________________________________________________________
1286+ 71D9             >//              Heap part
1286+ 71D9             >
1286+ 71D9             >
1286+ 71D9             >                org     (Heap_Ptr & $1FFF) + $E000
1286+ E867             >
1286+ E867             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1286+ E867             >Latest_Definition defl  Heap_Ptr
1286+ E867             >
1286+ E867             >                // dummy db directives used to calculate length of namec
1286+ E867 28 4E 55 4D >                db      "(NUMBER)"
1286+ E86B 42 45 52 29 >
1286+ E86F             >len_NFA         defl    $ - temp_NFA
1286+ E86F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1286+ E867             >
1286+ E867 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1286+ E868 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1286+ E86C 42 45 52 29 >
1286+ E870             >                org     $-1                 // alter last byte of Name just above to set
1286+ E86F A9          >                db      {b $} | END_BIT     // msb as name end
1286+ E870             >
1286+ E870 5D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1286+ E872             >Prev_Ptr        defl    Heap_Ptr
1286+ E872             >
1286+ E872             >mirror_Ptr      defl    $
1286+ E872             >
1286+ E872 DB 71       >                dw      Dict_Ptr + 2        // xt
1286+ E874             >Heap_Ptr        defl    $ - $E000           // save current HP
1286+ E874             >
1286+ E874             >Current_HP      defl  $ - $E000             // used to set HP once!
1286+ E874             >
1286+ E874             >//              ______________________________________________________________________
1286+ E874             >//              Dictionary part
1286+ E874             >
1286+ E874             >                org     Dict_Ptr
1286+ 71D9             >
1286+ 71D9 72 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1286+ 71DB             >
1286+ 71DB             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1286+ 71DB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1286+ 71DE             >
1286+ 71DE             >
1286+ 71DE             >                endif           ; ok        // for other definitions it "points" the correct handler
1286+ 71DE             >                // Use of "; ok" to suppress "warning[fwdref]"
1286+ 71DE             >
1286+ 71DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1287+ 71DE                                                              // begin
1288+ 71DE              CNumber_Begin:
1289+ 71DE BE 68                        dw          ONE_PLUS            //      1+
1290+ 71E0 2B 69 5C 68                  dw          DUP, TO_R           //      dup >r
1291+ 71E4 9E 69                        dw          CFETCH              //      @
1292+ 71E6 52 6B 89 69                  dw          BASE, FETCH         //      base @
1293+ 71EA 4D 64                        dw          DIGIT               //      digit
1294+ 71EC                                                              // while
1295+ 71EC F5 63                        dw      ZBRANCH
1296+ 71EE 2C 00                        dw      CNumber_While_end - $
1297+ 71F0 24 69                        dw          SWAP                //      swap
1298+ 71F2 52 6B 89 69                  dw          BASE, FETCH         //      base @
1299+ 71F6 B1 67                        dw          UM_MUL              //      um*
1300+ 71F8 10 69 32 69                  dw          DROP, ROT           //      drop rot
1301+ 71FC 52 6B 89 69                  dw          BASE, FETCH         //      base @
1302+ 7200 B1 67                        dw          UM_MUL              //      um*
1303+ 7202 AF 68                        dw          DPLUS               //      d+
1304+ 7204 58 6B 89 69                  dw          DPL, FETCH          //      dpl @
1305+ 7208 BE 68                        dw          ONE_PLUS            //      1+
1306+ 720A                                                              //      if
1307+ 720A F5 63                        dw          ZBRANCH
1308+ 720C 08 00                        dw          CNumber_Endif - $
1309+ 720E 88 6A 58 6B                  dw              ONE, DPL        //          1 dpl
1310+ 7212 71 69                        dw              PLUSSTORE       //          +!
1311+ 7214              CNumber_Endif:                                  //      endif
1312+ 7214 67 68                        dw             R_TO             //      r>  ( balance rp )
1313+ 7216 E8 63                        dw      BRANCH
1314+ 7218 C6 FF                        dw      CNumber_Begin - $
1315+ 721A              CNumber_While_end:                              // repeat
1316+ 721A 67 68                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1317+ 721C 52 68                        dw      EXIT                    // ;
1318+ 721E
1319+ 721E              //  ______________________________________________________________________
1320+ 721E              //
1321+ 721E              // (prefix)
1322+ 721E                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1322+ 721E             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1322+ 721E             >
1322+ 721E             >Dict_Ptr        defl    $
1322+ 721E             >
1322+ 721E             >//              ______________________________________________________________________
1322+ 721E             >//              Heap part
1322+ 721E             >
1322+ 721E             >
1322+ 721E             >                org     (Heap_Ptr & $1FFF) + $E000
1322+ E874             >
1322+ E874             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1322+ E874             >Latest_Definition defl  Heap_Ptr
1322+ E874             >
1322+ E874             >                // dummy db directives used to calculate length of namec
1322+ E874 28 50 52 45 >                db      "(PREFIX)"
1322+ E878 46 49 58 29 >
1322+ E87C             >len_NFA         defl    $ - temp_NFA
1322+ E87C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1322+ E874             >
1322+ E874 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1322+ E875 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1322+ E879 46 49 58 29 >
1322+ E87D             >                org     $-1                 // alter last byte of Name just above to set
1322+ E87C A9          >                db      {b $} | END_BIT     // msb as name end
1322+ E87D             >
1322+ E87D 67 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1322+ E87F             >Prev_Ptr        defl    Heap_Ptr
1322+ E87F             >
1322+ E87F             >mirror_Ptr      defl    $
1322+ E87F             >
1322+ E87F 20 72       >                dw      Dict_Ptr + 2        // xt
1322+ E881             >Heap_Ptr        defl    $ - $E000           // save current HP
1322+ E881             >
1322+ E881             >Current_HP      defl  $ - $E000             // used to set HP once!
1322+ E881             >
1322+ E881             >//              ______________________________________________________________________
1322+ E881             >//              Dictionary part
1322+ E881             >
1322+ E881             >                org     Dict_Ptr
1322+ 721E             >
1322+ 721E 7F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1322+ 7220             >
1322+ 7220             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1322+ 7220 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1322+ 7223             >
1322+ 7223             >
1322+ 7223             >                endif           ; ok        // for other definitions it "points" the correct handler
1322+ 7223             >                // Use of "; ok" to suppress "warning[fwdref]"
1322+ 7223             >
1322+ 7223             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1323+ 7223 2B 69 BE 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1323+ 7227 9E 69
1324+ 7229 2B 69 5C 68                  dw      DUP, TO_R               // dup >r
1325+ 722D A3 63 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1325+ 7231 04 6C
1326+ 7233                                                              // if
1327+ 7233 F5 63                        dw      ZBRANCH
1328+ 7235 0C 00                        dw      CPrefix_Endif_0 - $
1329+ 7237 BE 68                        dw          ONE_PLUS            //      1+
1330+ 7239 A3 63 10 00                  dw          LIT, 16
1331+ 723D 52 6B 93 69                  dw          BASE, STORE         //      16 base !
1332+ 7241              CPrefix_Endif_0:                                // endif
1333+ 7241 67 68                        dw      R_TO                    // r>
1334+ 7243 A3 63 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1334+ 7247 04 6C
1335+ 7249                                                              // if
1336+ 7249 F5 63                        dw      ZBRANCH
1337+ 724B 0A 00                        dw      CPrefix_Endif_1 - $
1338+ 724D BE 68                        dw          ONE_PLUS            //      1+
1339+ 724F 8F 6A                        dw          TWO
1340+ 7251 52 6B 93 69                  dw          BASE, STORE         //      2 base !
1341+ 7255              CPrefix_Endif_1:                                // endif
1342+ 7255 52 68                        dw      EXIT
1343+ 7257
1344+ 7257              //  ______________________________________________________________________
1345+ 7257
1346+ 7257                              New_Def PDOM,   "NDOM", Create_Ptr, is_normal
1346+ 7257             >
1346+ 7257             >Dict_Ptr        defl    $
1346+ 7257             >
1346+ 7257             >//              ______________________________________________________________________
1346+ 7257             >//              Heap part
1346+ 7257             >
1346+ 7257             >
1346+ 7257             >                org     (Heap_Ptr & $1FFF) + $E000
1346+ E881             >
1346+ E881             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1346+ E881             >Latest_Definition defl  Heap_Ptr
1346+ E881             >
1346+ E881             >                // dummy db directives used to calculate length of namec
1346+ E881 4E 44 4F 4D >                db      "NDOM"
1346+ E885             >len_NFA         defl    $ - temp_NFA
1346+ E885             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1346+ E881             >
1346+ E881 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1346+ E882 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
1346+ E886             >                org     $-1                 // alter last byte of Name just above to set
1346+ E885 CD          >                db      {b $} | END_BIT     // msb as name end
1346+ E886             >
1346+ E886 74 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1346+ E888             >Prev_Ptr        defl    Heap_Ptr
1346+ E888             >
1346+ E888             >mirror_Ptr      defl    $
1346+ E888             >
1346+ E888 59 72       >                dw      Dict_Ptr + 2        // xt
1346+ E88A             >Heap_Ptr        defl    $ - $E000           // save current HP
1346+ E88A             >
1346+ E88A             >Current_HP      defl  $ - $E000             // used to set HP once!
1346+ E88A             >
1346+ E88A             >//              ______________________________________________________________________
1346+ E88A             >//              Dictionary part
1346+ E88A             >
1346+ E88A             >                org     Dict_Ptr
1346+ 7257             >
1346+ 7257 88 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1346+ 7259             >
1346+ 7259             >PDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1346+ 7259 CD 08 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1346+ 725C             >
1346+ 725C             >
1346+ 725C             >                endif           ; ok        // for other definitions it "points" the correct handler
1346+ 725C             >                // Use of "; ok" to suppress "warning[fwdref]"
1346+ 725C             >
1346+ 725C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1347+ 725C 2C 2F 2D 3A                  db ',/-:'
1348+ 7260 00                           db 0
1349+ 7261
1350+ 7261                              New_Def PCDM,   "NCDM", Create_Ptr, is_normal
1350+ 7261             >
1350+ 7261             >Dict_Ptr        defl    $
1350+ 7261             >
1350+ 7261             >//              ______________________________________________________________________
1350+ 7261             >//              Heap part
1350+ 7261             >
1350+ 7261             >
1350+ 7261             >                org     (Heap_Ptr & $1FFF) + $E000
1350+ E88A             >
1350+ E88A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1350+ E88A             >Latest_Definition defl  Heap_Ptr
1350+ E88A             >
1350+ E88A             >                // dummy db directives used to calculate length of namec
1350+ E88A 4E 43 44 4D >                db      "NCDM"
1350+ E88E             >len_NFA         defl    $ - temp_NFA
1350+ E88E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1350+ E88A             >
1350+ E88A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1350+ E88B 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
1350+ E88F             >                org     $-1                 // alter last byte of Name just above to set
1350+ E88E CD          >                db      {b $} | END_BIT     // msb as name end
1350+ E88F             >
1350+ E88F 81 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1350+ E891             >Prev_Ptr        defl    Heap_Ptr
1350+ E891             >
1350+ E891             >mirror_Ptr      defl    $
1350+ E891             >
1350+ E891 63 72       >                dw      Dict_Ptr + 2        // xt
1350+ E893             >Heap_Ptr        defl    $ - $E000           // save current HP
1350+ E893             >
1350+ E893             >Current_HP      defl  $ - $E000             // used to set HP once!
1350+ E893             >
1350+ E893             >//              ______________________________________________________________________
1350+ E893             >//              Dictionary part
1350+ E893             >
1350+ E893             >                org     Dict_Ptr
1350+ 7261             >
1350+ 7261 91 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1350+ 7263             >
1350+ 7263             >PCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1350+ 7263 CD 08 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1350+ 7266             >
1350+ 7266             >
1350+ 7266             >                endif           ; ok        // for other definitions it "points" the correct handler
1350+ 7266             >                // Use of "; ok" to suppress "warning[fwdref]"
1350+ 7266             >
1350+ 7266             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1351+ 7266 2E 2E 2E 2E                  db '....'
1352+ 726A 00                           db 0
1353+ 726B
1354+ 726B              //  ______________________________________________________________________
1355+ 726B              //
1356+ 726B              // number       a -- d
1357+ 726B                              Colon_Def NUMBER,  "NUMBER", is_normal
1357+ 726B             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1357+ 726B             >
1357+ 726B             >Dict_Ptr        defl    $
1357+ 726B             >
1357+ 726B             >//              ______________________________________________________________________
1357+ 726B             >//              Heap part
1357+ 726B             >
1357+ 726B             >
1357+ 726B             >                org     (Heap_Ptr & $1FFF) + $E000
1357+ E893             >
1357+ E893             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1357+ E893             >Latest_Definition defl  Heap_Ptr
1357+ E893             >
1357+ E893             >                // dummy db directives used to calculate length of namec
1357+ E893 4E 55 4D 42 >                db      "NUMBER"
1357+ E897 45 52       >
1357+ E899             >len_NFA         defl    $ - temp_NFA
1357+ E899             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1357+ E893             >
1357+ E893 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1357+ E894 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1357+ E898 45 52       >
1357+ E89A             >                org     $-1                 // alter last byte of Name just above to set
1357+ E899 D2          >                db      {b $} | END_BIT     // msb as name end
1357+ E89A             >
1357+ E89A 8A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1357+ E89C             >Prev_Ptr        defl    Heap_Ptr
1357+ E89C             >
1357+ E89C             >mirror_Ptr      defl    $
1357+ E89C             >
1357+ E89C 6D 72       >                dw      Dict_Ptr + 2        // xt
1357+ E89E             >Heap_Ptr        defl    $ - $E000           // save current HP
1357+ E89E             >
1357+ E89E             >Current_HP      defl  $ - $E000             // used to set HP once!
1357+ E89E             >
1357+ E89E             >//              ______________________________________________________________________
1357+ E89E             >//              Dictionary part
1357+ E89E             >
1357+ E89E             >                org     Dict_Ptr
1357+ 726B             >
1357+ 726B 9C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1357+ 726D             >
1357+ 726D             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1357+ 726D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1357+ 7270             >
1357+ 7270             >
1357+ 7270             >                endif           ; ok        // for other definitions it "points" the correct handler
1357+ 7270             >                // Use of "; ok" to suppress "warning[fwdref]"
1357+ 7270             >
1357+ 7270             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1358+ 7270 81 6A 81 6A                  dw      ZERO, ZERO              // 0 0
1359+ 7274 32 69                        dw      ROT                     // rot
1360+ 7276 9E 71 5C 68                  dw      CSGN, TO_R              // (sgn) >r
1361+ 727A 52 6B 89 69                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1361+ 727E 5C 68
1362+ 7280 20 72                        dw      CPREFIX                 // (prefix)   // ***
1363+ 7282 9D 6A 58 6B                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1363+ 7286 93 69
1364+ 7288 DB 71                        dw      CNUMBER                 // (number)
1365+ 728A              Number_Begin:                                   // begin
1366+ 728A 2B 69 9E 69                  dw        DUP, CFETCH             // dup c@
1367+ 728E 5C 68                        dw        TO_R                    // >r
1368+ 7290 63 72 59 72                  dw        PCDM, PDOM, LIT, 4      // pcdm pdom 4
1368+ 7294 A3 63 04 00
1369+ 7298 67 68                        dw        R_TO                    // r>
1370+ 729A 5B 65                        dw        C_MAP                   // (map)
1371+ 729C 81 6A 24 69                  dw        ZERO, SWAP              // 0 swap
1372+ 72A0 A3 63 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1372+ 72A4 04 6C
1373+ 72A6
1374+ 72A6 F5 63                        dw        ZBRANCH                 // if
1375+ 72A8 0A 00                        dw        Number_Endif_1 - $
1376+ 72AA 81 6A 58 6B                  dw          ZERO, DPL, STORE        //      0 dpl !
1376+ 72AE 93 69
1377+ 72B0 BE 68                        dw          ONE_PLUS                //      1+
1378+ 72B2              Number_Endif_1:                                   // endif
1379+ 72B2
1380+ 72B2 F5 63                        dw      ZBRANCH                // while
1381+ 72B4 08 00                        dw      Number_While_end - $
1382+ 72B6 DB 71                        dw        CNUMBER                 // (number)
1383+ 72B8 E8 63                        dw      BRANCH
1384+ 72BA D0 FF                        dw      Number_Begin - $
1385+ 72BC              Number_While_end:                               // repeat
1386+ 72BC
1387+ 72BC 9E 69 A4 6A                  dw      CFETCH, BL              // c@ bl
1388+ 72C0 F8 6B 81 6A                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1388+ 72C4 F5 6D
1389+ 72C6 67 68 52 6B                  dw      R_TO, BASE, STORE       // r> base !  // ***
1389+ 72CA 93 69
1390+ 72CC 67 68                        dw      R_TO                    // r>
1391+ 72CE                                                              // if
1392+ 72CE F5 63                        dw      ZBRANCH
1393+ 72D0 04 00                        dw      Number_Endif_2 - $
1394+ 72D2 F4 68                        dw          DMINUS              //      dminus
1395+ 72D4              Number_Endif_2:                                 // endif
1396+ 72D4 52 68                        dw      EXIT                    // ;
1397+ 72D6
1398+ 72D6              //  ______________________________________________________________________
1399+ 72D6              //
1400+ 72D6              // twofind      a -- d
1401+ 72D6                              Colon_Def TWOFIND,  "2FIND", is_normal
1401+ 72D6             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1401+ 72D6             >
1401+ 72D6             >Dict_Ptr        defl    $
1401+ 72D6             >
1401+ 72D6             >//              ______________________________________________________________________
1401+ 72D6             >//              Heap part
1401+ 72D6             >
1401+ 72D6             >
1401+ 72D6             >                org     (Heap_Ptr & $1FFF) + $E000
1401+ E89E             >
1401+ E89E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1401+ E89E             >Latest_Definition defl  Heap_Ptr
1401+ E89E             >
1401+ E89E             >                // dummy db directives used to calculate length of namec
1401+ E89E 32 46 49 4E >                db      "2FIND"
1401+ E8A2 44          >
1401+ E8A3             >len_NFA         defl    $ - temp_NFA
1401+ E8A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1401+ E89E             >
1401+ E89E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1401+ E89F 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1401+ E8A3 44          >
1401+ E8A4             >                org     $-1                 // alter last byte of Name just above to set
1401+ E8A3 C4          >                db      {b $} | END_BIT     // msb as name end
1401+ E8A4             >
1401+ E8A4 93 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1401+ E8A6             >Prev_Ptr        defl    Heap_Ptr
1401+ E8A6             >
1401+ E8A6             >mirror_Ptr      defl    $
1401+ E8A6             >
1401+ E8A6 D8 72       >                dw      Dict_Ptr + 2        // xt
1401+ E8A8             >Heap_Ptr        defl    $ - $E000           // save current HP
1401+ E8A8             >
1401+ E8A8             >Current_HP      defl  $ - $E000             // used to set HP once!
1401+ E8A8             >
1401+ E8A8             >//              ______________________________________________________________________
1401+ E8A8             >//              Dictionary part
1401+ E8A8             >
1401+ E8A8             >                org     Dict_Ptr
1401+ 72D6             >
1401+ 72D6 A6 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1401+ 72D8             >
1401+ 72D8             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1401+ 72D8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1401+ 72DB             >
1401+ 72DB             >
1401+ 72DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1401+ 72DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1401+ 72DB             >
1401+ 72DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1402+ 72DB 5C 68 72 68                  dw      TO_R, R_OP              // >r r@
1403+ 72DF 40 6B 89 69                  dw      CONTEXT, FETCH, FETCH   // context @ @
1403+ 72E3 89 69
1404+ 72E5 BB 64                        dw      C_FIND                  // (find)
1405+ 72E7 63 6C                        dw      QDUP                    // ?dup
1406+ 72E9 77 68                        dw      ZEQUAL                  // 0=
1407+ 72EB                                                              // if
1408+ 72EB F5 63                        dw      ZBRANCH
1409+ 72ED 0C 00                        dw      LFind_Endif - $
1410+ 72EF 72 68                        dw          R_OP                //      r@
1411+ 72F1                              // dw          LATEST               //      latest
1412+ 72F1 46 6B 89 69                  dw          CURRENT, FETCH, FETCH   // context @ @
1412+ 72F5 89 69
1413+ 72F7 BB 64                        dw          C_FIND              //      (find)
1414+ 72F9              LFind_Endif:                                    // endif
1415+ 72F9 67 68 10 69                  dw      R_TO, DROP              // r> drop
1416+ 72FD 52 68                        dw      EXIT                    // ;
1417+ 72FF
1418+ 72FF              //  ______________________________________________________________________
1419+ 72FF              //
1420+ 72FF              // -find        a -- d
1421+ 72FF                              Colon_Def LFIND,  "-FIND", is_normal
1421+ 72FF             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1421+ 72FF             >
1421+ 72FF             >Dict_Ptr        defl    $
1421+ 72FF             >
1421+ 72FF             >//              ______________________________________________________________________
1421+ 72FF             >//              Heap part
1421+ 72FF             >
1421+ 72FF             >
1421+ 72FF             >                org     (Heap_Ptr & $1FFF) + $E000
1421+ E8A8             >
1421+ E8A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1421+ E8A8             >Latest_Definition defl  Heap_Ptr
1421+ E8A8             >
1421+ E8A8             >                // dummy db directives used to calculate length of namec
1421+ E8A8 2D 46 49 4E >                db      "-FIND"
1421+ E8AC 44          >
1421+ E8AD             >len_NFA         defl    $ - temp_NFA
1421+ E8AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1421+ E8A8             >
1421+ E8A8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1421+ E8A9 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1421+ E8AD 44          >
1421+ E8AE             >                org     $-1                 // alter last byte of Name just above to set
1421+ E8AD C4          >                db      {b $} | END_BIT     // msb as name end
1421+ E8AE             >
1421+ E8AE 9E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1421+ E8B0             >Prev_Ptr        defl    Heap_Ptr
1421+ E8B0             >
1421+ E8B0             >mirror_Ptr      defl    $
1421+ E8B0             >
1421+ E8B0 01 73       >                dw      Dict_Ptr + 2        // xt
1421+ E8B2             >Heap_Ptr        defl    $ - $E000           // save current HP
1421+ E8B2             >
1421+ E8B2             >Current_HP      defl  $ - $E000             // used to set HP once!
1421+ E8B2             >
1421+ E8B2             >//              ______________________________________________________________________
1421+ E8B2             >//              Dictionary part
1421+ E8B2             >
1421+ E8B2             >                org     Dict_Ptr
1421+ 72FF             >
1421+ 72FF B0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1421+ 7301             >
1421+ 7301             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1421+ 7301 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1421+ 7304             >
1421+ 7304             >
1421+ 7304             >                endif           ; ok        // for other definitions it "points" the correct handler
1421+ 7304             >                // Use of "; ok" to suppress "warning[fwdref]"
1421+ 7304             >
1421+ 7304             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1422+ 7304 A4 6A D7 70                  dw      BL, WORD                // bl word
1423+ 7308 D8 72                        dw      TWOFIND                 // 2find
1424+ 730A 52 68                        dw      EXIT                    // ;
1425+ 730C
1426+ 730C              //  ______________________________________________________________________
1427+ 730C              //
1428+ 730C              // (abort)      --
1429+ 730C                              Colon_Def CABORT,  "(ABORT)", is_normal
1429+ 730C             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1429+ 730C             >
1429+ 730C             >Dict_Ptr        defl    $
1429+ 730C             >
1429+ 730C             >//              ______________________________________________________________________
1429+ 730C             >//              Heap part
1429+ 730C             >
1429+ 730C             >
1429+ 730C             >                org     (Heap_Ptr & $1FFF) + $E000
1429+ E8B2             >
1429+ E8B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1429+ E8B2             >Latest_Definition defl  Heap_Ptr
1429+ E8B2             >
1429+ E8B2             >                // dummy db directives used to calculate length of namec
1429+ E8B2 28 41 42 4F >                db      "(ABORT)"
1429+ E8B6 52 54 29    >
1429+ E8B9             >len_NFA         defl    $ - temp_NFA
1429+ E8B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1429+ E8B2             >
1429+ E8B2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1429+ E8B3 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1429+ E8B7 52 54 29    >
1429+ E8BA             >                org     $-1                 // alter last byte of Name just above to set
1429+ E8B9 A9          >                db      {b $} | END_BIT     // msb as name end
1429+ E8BA             >
1429+ E8BA A8 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1429+ E8BC             >Prev_Ptr        defl    Heap_Ptr
1429+ E8BC             >
1429+ E8BC             >mirror_Ptr      defl    $
1429+ E8BC             >
1429+ E8BC 0E 73       >                dw      Dict_Ptr + 2        // xt
1429+ E8BE             >Heap_Ptr        defl    $ - $E000           // save current HP
1429+ E8BE             >
1429+ E8BE             >Current_HP      defl  $ - $E000             // used to set HP once!
1429+ E8BE             >
1429+ E8BE             >//              ______________________________________________________________________
1429+ E8BE             >//              Dictionary part
1429+ E8BE             >
1429+ E8BE             >                org     Dict_Ptr
1429+ 730C             >
1429+ 730C BC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1429+ 730E             >
1429+ 730E             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1429+ 730E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1429+ 7311             >
1429+ 7311             >
1429+ 7311             >                endif           ; ok        // for other definitions it "points" the correct handler
1429+ 7311             >                // Use of "; ok" to suppress "warning[fwdref]"
1429+ 7311             >
1429+ 7311             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1430+ 7311 A7 75                        dw      ABORT                   // abort
1431+ 7313 52 68                        dw      EXIT                    // ;
1432+ 7315
1433+ 7315              //  ______________________________________________________________________
1434+ 7315              //
1435+ 7315              // error        n --
1436+ 7315              // raise an error
1437+ 7315              // if WARNING is 0, prints "MSG#n".
1438+ 7315              // if WARNING is 1, prints line n of screen 4.
1439+ 7315              // if WARNING is -1 does (ABORT) that normally does ABORT
1440+ 7315              // value can be negative or beyond block 4.
1441+ 7315                              Colon_Def ERROR,  "ERROR", is_normal
1441+ 7315             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1441+ 7315             >
1441+ 7315             >Dict_Ptr        defl    $
1441+ 7315             >
1441+ 7315             >//              ______________________________________________________________________
1441+ 7315             >//              Heap part
1441+ 7315             >
1441+ 7315             >
1441+ 7315             >                org     (Heap_Ptr & $1FFF) + $E000
1441+ E8BE             >
1441+ E8BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1441+ E8BE             >Latest_Definition defl  Heap_Ptr
1441+ E8BE             >
1441+ E8BE             >                // dummy db directives used to calculate length of namec
1441+ E8BE 45 52 52 4F >                db      "ERROR"
1441+ E8C2 52          >
1441+ E8C3             >len_NFA         defl    $ - temp_NFA
1441+ E8C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1441+ E8BE             >
1441+ E8BE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1441+ E8BF 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1441+ E8C3 52          >
1441+ E8C4             >                org     $-1                 // alter last byte of Name just above to set
1441+ E8C3 D2          >                db      {b $} | END_BIT     // msb as name end
1441+ E8C4             >
1441+ E8C4 B2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1441+ E8C6             >Prev_Ptr        defl    Heap_Ptr
1441+ E8C6             >
1441+ E8C6             >mirror_Ptr      defl    $
1441+ E8C6             >
1441+ E8C6 17 73       >                dw      Dict_Ptr + 2        // xt
1441+ E8C8             >Heap_Ptr        defl    $ - $E000           // save current HP
1441+ E8C8             >
1441+ E8C8             >Current_HP      defl  $ - $E000             // used to set HP once!
1441+ E8C8             >
1441+ E8C8             >//              ______________________________________________________________________
1441+ E8C8             >//              Dictionary part
1441+ E8C8             >
1441+ E8C8             >                org     Dict_Ptr
1441+ 7315             >
1441+ 7315 C6 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1441+ 7317             >
1441+ 7317             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1441+ 7317 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1441+ 731A             >
1441+ 731A             >
1441+ 731A             >                endif           ; ok        // for other definitions it "points" the correct handler
1441+ 731A             >                // Use of "; ok" to suppress "warning[fwdref]"
1441+ 731A             >
1441+ 731A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1442+ 731A F2 6A 89 69                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1442+ 731E 8A 68
1443+ 7320                                                              // if
1444+ 7320 F5 63                        dw      ZBRANCH
1445+ 7322 04 00                        dw      Error_Endif_1 - $
1446+ 7324 0E 73                        dw          CABORT              //      (abort)
1447+ 7326              Error_Endif_1:                                  // endif
1448+ 7326 A6 6B 31 6F                  dw      HERE, COUNT, TYPE       // here count type
1448+ 732A 85 6F
1449+ 732C 22 71                        dw      C_DOT_QUOTE             // .( ? )
1450+ 732E 02 3F 20                     db      2, "? "
1451+ 7331 7C 77                        dw      MESSAGE                 // message  ( forward )
1452+ 7333 DA 6A 89 69                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1452+ 7337 42 68
1453+ 7339 22 6B 89 69                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1453+ 733D 63 6C
1454+ 733F                                                              // if
1455+ 733F F5 63                        dw      ZBRANCH
1456+ 7341 08 00                        dw      Error_Endif_2 - $
1457+ 7343 28 6B 89 69                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1457+ 7347 24 69
1458+ 7349              Error_Endif_2:                                  // endif
1459+ 7349 6B 75                        dw      QUIT                    // quit ( forward )
1460+ 734B 52 68                        dw      EXIT                    // ;
1461+ 734D              //  ______________________________________________________________________
1462+ 734D              //
1463+ 734D              // id.          nfa --
1464+ 734D                              Colon_Def ID_DOT,  "ID.", is_normal
1464+ 734D             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1464+ 734D             >
1464+ 734D             >Dict_Ptr        defl    $
1464+ 734D             >
1464+ 734D             >//              ______________________________________________________________________
1464+ 734D             >//              Heap part
1464+ 734D             >
1464+ 734D             >
1464+ 734D             >                org     (Heap_Ptr & $1FFF) + $E000
1464+ E8C8             >
1464+ E8C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1464+ E8C8             >Latest_Definition defl  Heap_Ptr
1464+ E8C8             >
1464+ E8C8             >                // dummy db directives used to calculate length of namec
1464+ E8C8 49 44 2E    >                db      "ID."
1464+ E8CB             >len_NFA         defl    $ - temp_NFA
1464+ E8CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1464+ E8C8             >
1464+ E8C8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1464+ E8C9 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1464+ E8CC             >                org     $-1                 // alter last byte of Name just above to set
1464+ E8CB AE          >                db      {b $} | END_BIT     // msb as name end
1464+ E8CC             >
1464+ E8CC BE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1464+ E8CE             >Prev_Ptr        defl    Heap_Ptr
1464+ E8CE             >
1464+ E8CE             >mirror_Ptr      defl    $
1464+ E8CE             >
1464+ E8CE 4F 73       >                dw      Dict_Ptr + 2        // xt
1464+ E8D0             >Heap_Ptr        defl    $ - $E000           // save current HP
1464+ E8D0             >
1464+ E8D0             >Current_HP      defl  $ - $E000             // used to set HP once!
1464+ E8D0             >
1464+ E8D0             >//              ______________________________________________________________________
1464+ E8D0             >//              Dictionary part
1464+ E8D0             >
1464+ E8D0             >                org     Dict_Ptr
1464+ 734D             >
1464+ 734D CE 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1464+ 734F             >
1464+ 734F             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1464+ 734F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1464+ 7352             >
1464+ 7352             >
1464+ 7352             >                endif           ; ok        // for other definitions it "points" the correct handler
1464+ 7352             >                // Use of "; ok" to suppress "warning[fwdref]"
1464+ 7352             >
1464+ 7352             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1465+ 7352 19 6D                        dw      QTOHEAP
1466+ 7354 2B 69 88 6A                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1466+ 7358 95 6C
1467+ 735A BE 68                        dw      ONE_PLUS                // 1+
1468+ 735C 07 69 F8 6B                  dw      OVER, SUBTRACT          // over -
1469+ 7360 2B 69 5C 68                  dw      DUP, TO_R               // >r
1470+ 7364 C8 70 24 69                  dw      PAD, SWAP               // pad swap
1471+ 7368 8D 67                        dw      CMOVE                   // cmove
1472+ 736A C8 70 BE 68                  dw      PAD, ONE_PLUS           // pad 1+
1473+ 736E 67 68 C5 68                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1474+ 7372 85 6F 8A 6C                  dw      TYPE, SPACE             // type
1475+ 7376 52 68                        dw      EXIT                    // ;
1476+ 7378
1477+ 7378              //  ______________________________________________________________________
1478+ 7378              //
1479+ 7378              // code         -- cccc
1480+ 7378                              Colon_Def CODE,  "CODE", is_normal
1480+ 7378             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1480+ 7378             >
1480+ 7378             >Dict_Ptr        defl    $
1480+ 7378             >
1480+ 7378             >//              ______________________________________________________________________
1480+ 7378             >//              Heap part
1480+ 7378             >
1480+ 7378             >
1480+ 7378             >                org     (Heap_Ptr & $1FFF) + $E000
1480+ E8D0             >
1480+ E8D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1480+ E8D0             >Latest_Definition defl  Heap_Ptr
1480+ E8D0             >
1480+ E8D0             >                // dummy db directives used to calculate length of namec
1480+ E8D0 43 4F 44 45 >                db      "CODE"
1480+ E8D4             >len_NFA         defl    $ - temp_NFA
1480+ E8D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1480+ E8D0             >
1480+ E8D0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1480+ E8D1 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1480+ E8D5             >                org     $-1                 // alter last byte of Name just above to set
1480+ E8D4 C5          >                db      {b $} | END_BIT     // msb as name end
1480+ E8D5             >
1480+ E8D5 C8 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1480+ E8D7             >Prev_Ptr        defl    Heap_Ptr
1480+ E8D7             >
1480+ E8D7             >mirror_Ptr      defl    $
1480+ E8D7             >
1480+ E8D7 7A 73       >                dw      Dict_Ptr + 2        // xt
1480+ E8D9             >Heap_Ptr        defl    $ - $E000           // save current HP
1480+ E8D9             >
1480+ E8D9             >Current_HP      defl  $ - $E000             // used to set HP once!
1480+ E8D9             >
1480+ E8D9             >//              ______________________________________________________________________
1480+ E8D9             >//              Dictionary part
1480+ E8D9             >
1480+ E8D9             >                org     Dict_Ptr
1480+ 7378             >
1480+ 7378 D7 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1480+ 737A             >
1480+ 737A             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1480+ 737A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1480+ 737D             >
1480+ 737D             >
1480+ 737D             >                endif           ; ok        // for other definitions it "points" the correct handler
1480+ 737D             >                // Use of "; ok" to suppress "warning[fwdref]"
1480+ 737D             >
1480+ 737D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1481+ 737D 01 73                        dw      LFIND                   // -find
1482+ 737F                                                              // if
1483+ 737F F5 63                        dw      ZBRANCH
1484+ 7381 10 00                        dw      Code_Endif - $
1485+ 7383 10 69                        dw          DROP                //      drop
1486+ 7385 7F 6D 4F 73                  dw          TO_NAME, ID_DOT     //      >name id.
1487+ 7389 A3 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1487+ 738D 7C 77
1488+ 738F 8A 6C                        dw          SPACE               //      space
1489+ 7391              Code_Endif:                                     // endif
1490+ 7391 A6 6B                        dw      HERE                    // here
1491+ 7393                                                              // ( ---- here begins NFA ---- )
1492+ 7393 2B 69 9E 69                  dw      DUP, CFETCH             // dup c@
1493+ 7397 EC 6A 89 69                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1493+ 739B 3D 6C
1494+ 739D BE 68                        dw      ONE_PLUS                // 1+
1495+ 739F 2B 69 B1 6B                  dw      DUP, ALLOT              // dup allot
1496+ 73A3 D4 68 D4 68                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1497+ 73A7 5C 68                        dw      TO_R                    // >r
1498+ 73A9 2B 69                        dw      DUP                     // dup
1499+ 73AB A3 63                        dw      LIT
1500+ 73AD A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1501+ 73AF 80 69                        dw      TOGGLE                  // toggle
1502+ 73B1 A6 6B C5 68                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1503+ 73B5 A3 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1503+ 73B9 80 69
1504+ 73BB                                                              // ( ---- here is LFA ---- )
1505+ 73BB 46 6B 89 69                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1505+ 73BF 89 69
1506+ 73C1 BC 6B                        dw      COMMA
1507+ 73C3 2B 69 D4 68                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1507+ 73C7 BC 6B
1508+ 73C9 2A 6D                        dw      HP_FETCH                // hp@
1509+ 73CB 46 6B 89 69                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1509+ 73CF 93 69
1510+ 73D1 2A 6D FB 6C                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1511+ 73D5 72 68 8D 67                  dw      R_OP, CMOVE
1512+ 73D9 72 68 E6 68                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1512+ 73DD B1 6B
1513+ 73DF 67 68 16 6B                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1513+ 73E3 71 69
1514+ 73E5 2A 6D D9 68                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1515+ 73E9 BC 6B                        dw      COMMA
1516+ 73EB 81 6A 3C 6D                  dw      ZERO, SKIP_HP_PAGE
1517+ 73EF                                                              // ( ---- here is LFA ---- )
1518+ 73EF 52 68                        dw      EXIT                    // ;
1519+ 73F1
1520+ 73F1              //  ______________________________________________________________________
1521+ 73F1              //
1522+ 73F1              // create       -- cccc     ( compile time )
1523+ 73F1              //              -- a        ( run time )
1524+ 73F1                              Colon_Def CREATE,  "CREATE", is_normal
1524+ 73F1             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1524+ 73F1             >
1524+ 73F1             >Dict_Ptr        defl    $
1524+ 73F1             >
1524+ 73F1             >//              ______________________________________________________________________
1524+ 73F1             >//              Heap part
1524+ 73F1             >
1524+ 73F1             >
1524+ 73F1             >                org     (Heap_Ptr & $1FFF) + $E000
1524+ E8D9             >
1524+ E8D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1524+ E8D9             >Latest_Definition defl  Heap_Ptr
1524+ E8D9             >
1524+ E8D9             >                // dummy db directives used to calculate length of namec
1524+ E8D9 43 52 45 41 >                db      "CREATE"
1524+ E8DD 54 45       >
1524+ E8DF             >len_NFA         defl    $ - temp_NFA
1524+ E8DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1524+ E8D9             >
1524+ E8D9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1524+ E8DA 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1524+ E8DE 54 45       >
1524+ E8E0             >                org     $-1                 // alter last byte of Name just above to set
1524+ E8DF C5          >                db      {b $} | END_BIT     // msb as name end
1524+ E8E0             >
1524+ E8E0 D0 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1524+ E8E2             >Prev_Ptr        defl    Heap_Ptr
1524+ E8E2             >
1524+ E8E2             >mirror_Ptr      defl    $
1524+ E8E2             >
1524+ E8E2 F3 73       >                dw      Dict_Ptr + 2        // xt
1524+ E8E4             >Heap_Ptr        defl    $ - $E000           // save current HP
1524+ E8E4             >
1524+ E8E4             >Current_HP      defl  $ - $E000             // used to set HP once!
1524+ E8E4             >
1524+ E8E4             >//              ______________________________________________________________________
1524+ E8E4             >//              Dictionary part
1524+ E8E4             >
1524+ E8E4             >                org     Dict_Ptr
1524+ 73F1             >
1524+ 73F1 E2 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1524+ 73F3             >
1524+ 73F3             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1524+ 73F3 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1524+ 73F6             >
1524+ 73F6             >
1524+ 73F6             >                endif           ; ok        // for other definitions it "points" the correct handler
1524+ 73F6             >                // Use of "; ok" to suppress "warning[fwdref]"
1524+ 73F6             >
1524+ 73F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1525+ 73F6 7A 73 A1 6E                  dw      CODE, SMUDGE            // code smudge
1526+ 73FA A3 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1526+ 73FE CB 6B
1527+ 7400 A3 63 68 6A                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1527+ 7404 BC 6B
1528+ 7406 DD 6E                        dw      C_SEMICOLON_CODE
1529+ 7408                              // this routine is called from the call coded in CFA
1530+ 7408              Create_Ptr:
1531+ 7408
1532+ 7408
1533+ 7408
1534+ 7408                              next
1534+ 7408 DD E9       >                jp      (ix)
1535+ 740A
1536+ 740A              //  ______________________________________________________________________
1537+ 740A              //
1538+ 740A              // [compile]    -- cccc     ( compile time )
1539+ 740A                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1539+ 740A             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1539+ 740A             >
1539+ 740A             >Dict_Ptr        defl    $
1539+ 740A             >
1539+ 740A             >//              ______________________________________________________________________
1539+ 740A             >//              Heap part
1539+ 740A             >
1539+ 740A             >
1539+ 740A             >                org     (Heap_Ptr & $1FFF) + $E000
1539+ E8E4             >
1539+ E8E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1539+ E8E4             >Latest_Definition defl  Heap_Ptr
1539+ E8E4             >
1539+ E8E4             >                // dummy db directives used to calculate length of namec
1539+ E8E4 5B 43 4F 4D >                db      "[COMPILE]"
1539+ E8E8 50 49 4C 45 >
1539+ E8EC 5D          >
1539+ E8ED             >len_NFA         defl    $ - temp_NFA
1539+ E8ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1539+ E8E4             >
1539+ E8E4 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1539+ E8E5 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1539+ E8E9 50 49 4C 45 >
1539+ E8ED 5D          >
1539+ E8EE             >                org     $-1                 // alter last byte of Name just above to set
1539+ E8ED DD          >                db      {b $} | END_BIT     // msb as name end
1539+ E8EE             >
1539+ E8EE D9 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1539+ E8F0             >Prev_Ptr        defl    Heap_Ptr
1539+ E8F0             >
1539+ E8F0             >mirror_Ptr      defl    $
1539+ E8F0             >
1539+ E8F0 0C 74       >                dw      Dict_Ptr + 2        // xt
1539+ E8F2             >Heap_Ptr        defl    $ - $E000           // save current HP
1539+ E8F2             >
1539+ E8F2             >Current_HP      defl  $ - $E000             // used to set HP once!
1539+ E8F2             >
1539+ E8F2             >//              ______________________________________________________________________
1539+ E8F2             >//              Dictionary part
1539+ E8F2             >
1539+ E8F2             >                org     Dict_Ptr
1539+ 740A             >
1539+ 740A F0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1539+ 740C             >
1539+ 740C             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1539+ 740C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1539+ 740F             >
1539+ 740F             >
1539+ 740F             >                endif           ; ok        // for other definitions it "points" the correct handler
1539+ 740F             >                // Use of "; ok" to suppress "warning[fwdref]"
1539+ 740F             >
1539+ 740F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1540+ 740F 01 73                        dw      LFIND                   // -find      (  cfa  b  f  )
1541+ 7411 77 68                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1542+ 7413 81 6A F5 6D                  dw      ZERO, QERROR            // 0 ?error
1543+ 7417 10 69                        dw      DROP                    // drop       (  cfa  )
1544+ 7419 BC 6B                        dw      COMMA                   // ,
1545+ 741B 52 68                        dw      EXIT                    // ; immediate
1546+ 741D
1547+ 741D              //  ______________________________________________________________________
1548+ 741D              //
1549+ 741D              // literal      n --      ( compile time )
1550+ 741D                              Colon_Def LITERAL,  "LITERAL", is_immediate
1550+ 741D             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1550+ 741D             >
1550+ 741D             >Dict_Ptr        defl    $
1550+ 741D             >
1550+ 741D             >//              ______________________________________________________________________
1550+ 741D             >//              Heap part
1550+ 741D             >
1550+ 741D             >
1550+ 741D             >                org     (Heap_Ptr & $1FFF) + $E000
1550+ E8F2             >
1550+ E8F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1550+ E8F2             >Latest_Definition defl  Heap_Ptr
1550+ E8F2             >
1550+ E8F2             >                // dummy db directives used to calculate length of namec
1550+ E8F2 4C 49 54 45 >                db      "LITERAL"
1550+ E8F6 52 41 4C    >
1550+ E8F9             >len_NFA         defl    $ - temp_NFA
1550+ E8F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1550+ E8F2             >
1550+ E8F2 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1550+ E8F3 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1550+ E8F7 52 41 4C    >
1550+ E8FA             >                org     $-1                 // alter last byte of Name just above to set
1550+ E8F9 CC          >                db      {b $} | END_BIT     // msb as name end
1550+ E8FA             >
1550+ E8FA E4 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1550+ E8FC             >Prev_Ptr        defl    Heap_Ptr
1550+ E8FC             >
1550+ E8FC             >mirror_Ptr      defl    $
1550+ E8FC             >
1550+ E8FC 1F 74       >                dw      Dict_Ptr + 2        // xt
1550+ E8FE             >Heap_Ptr        defl    $ - $E000           // save current HP
1550+ E8FE             >
1550+ E8FE             >Current_HP      defl  $ - $E000             // used to set HP once!
1550+ E8FE             >
1550+ E8FE             >//              ______________________________________________________________________
1550+ E8FE             >//              Dictionary part
1550+ E8FE             >
1550+ E8FE             >                org     Dict_Ptr
1550+ 741D             >
1550+ 741D FC 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1550+ 741F             >
1550+ 741F             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1550+ 741F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1550+ 7422             >
1550+ 7422             >
1550+ 7422             >                endif           ; ok        // for other definitions it "points" the correct handler
1550+ 7422             >                // Use of "; ok" to suppress "warning[fwdref]"
1550+ 7422             >
1550+ 7422             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1551+ 7422 4C 6B 89 69                  dw      STATE, FETCH            // state @
1552+ 7426                                                              // if
1553+ 7426 F5 63                        dw      ZBRANCH
1554+ 7428 08 00                        dw      Literal_Endif - $
1555+ 742A 65 6E A3 63                  dw          COMPILE, LIT        //      compile lit
1556+ 742E BC 6B                        dw          COMMA               //      ,
1557+ 7430              Literal_Endif:                                  // endif
1558+ 7430 52 68                        dw      EXIT                    // ; immediate
1559+ 7432
1560+ 7432              //  ______________________________________________________________________
1561+ 7432              //
1562+ 7432              // dliteral     n --      ( compile time )
1563+ 7432                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1563+ 7432             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1563+ 7432             >
1563+ 7432             >Dict_Ptr        defl    $
1563+ 7432             >
1563+ 7432             >//              ______________________________________________________________________
1563+ 7432             >//              Heap part
1563+ 7432             >
1563+ 7432             >
1563+ 7432             >                org     (Heap_Ptr & $1FFF) + $E000
1563+ E8FE             >
1563+ E8FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ E8FE             >Latest_Definition defl  Heap_Ptr
1563+ E8FE             >
1563+ E8FE             >                // dummy db directives used to calculate length of namec
1563+ E8FE 44 4C 49 54 >                db      "DLITERAL"
1563+ E902 45 52 41 4C >
1563+ E906             >len_NFA         defl    $ - temp_NFA
1563+ E906             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ E8FE             >
1563+ E8FE C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ E8FF 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1563+ E903 45 52 41 4C >
1563+ E907             >                org     $-1                 // alter last byte of Name just above to set
1563+ E906 CC          >                db      {b $} | END_BIT     // msb as name end
1563+ E907             >
1563+ E907 F2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1563+ E909             >Prev_Ptr        defl    Heap_Ptr
1563+ E909             >
1563+ E909             >mirror_Ptr      defl    $
1563+ E909             >
1563+ E909 34 74       >                dw      Dict_Ptr + 2        // xt
1563+ E90B             >Heap_Ptr        defl    $ - $E000           // save current HP
1563+ E90B             >
1563+ E90B             >Current_HP      defl  $ - $E000             // used to set HP once!
1563+ E90B             >
1563+ E90B             >//              ______________________________________________________________________
1563+ E90B             >//              Dictionary part
1563+ E90B             >
1563+ E90B             >                org     Dict_Ptr
1563+ 7432             >
1563+ 7432 09 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1563+ 7434             >
1563+ 7434             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 7434 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1563+ 7437             >
1563+ 7437             >
1563+ 7437             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 7437             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 7437             >
1563+ 7437             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 7437 4C 6B 89 69                  dw      STATE, FETCH            // state @
1565+ 743B                                                              // if
1566+ 743B F5 63                        dw      ZBRANCH
1567+ 743D 08 00                        dw      DLiteral_Endif - $
1568+ 743F 24 69                        dw          SWAP                //      swap
1569+ 7441 1F 74 1F 74                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1570+ 7445              DLiteral_Endif:                                 // endif
1571+ 7445 52 68                        dw      EXIT                    // ; immediate
1572+ 7447
1573+ 7447              //  ______________________________________________________________________
1574+ 7447              //
1575+ 7447              // [char]       n --      ( compile time )
1576+ 7447              // inside colon definition, gets first character from next input word
1577+ 7447              // and compiles it as literal.
1578+ 7447                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1578+ 7447             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1578+ 7447             >
1578+ 7447             >Dict_Ptr        defl    $
1578+ 7447             >
1578+ 7447             >//              ______________________________________________________________________
1578+ 7447             >//              Heap part
1578+ 7447             >
1578+ 7447             >
1578+ 7447             >                org     (Heap_Ptr & $1FFF) + $E000
1578+ E90B             >
1578+ E90B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1578+ E90B             >Latest_Definition defl  Heap_Ptr
1578+ E90B             >
1578+ E90B             >                // dummy db directives used to calculate length of namec
1578+ E90B 5B 43 48 41 >                db      "[CHAR]"
1578+ E90F 52 5D       >
1578+ E911             >len_NFA         defl    $ - temp_NFA
1578+ E911             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1578+ E90B             >
1578+ E90B C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1578+ E90C 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1578+ E910 52 5D       >
1578+ E912             >                org     $-1                 // alter last byte of Name just above to set
1578+ E911 DD          >                db      {b $} | END_BIT     // msb as name end
1578+ E912             >
1578+ E912 FE 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1578+ E914             >Prev_Ptr        defl    Heap_Ptr
1578+ E914             >
1578+ E914             >mirror_Ptr      defl    $
1578+ E914             >
1578+ E914 49 74       >                dw      Dict_Ptr + 2        // xt
1578+ E916             >Heap_Ptr        defl    $ - $E000           // save current HP
1578+ E916             >
1578+ E916             >Current_HP      defl  $ - $E000             // used to set HP once!
1578+ E916             >
1578+ E916             >//              ______________________________________________________________________
1578+ E916             >//              Dictionary part
1578+ E916             >
1578+ E916             >                org     Dict_Ptr
1578+ 7447             >
1578+ 7447 14 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1578+ 7449             >
1578+ 7449             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1578+ 7449 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1578+ 744C             >
1578+ 744C             >
1578+ 744C             >                endif           ; ok        // for other definitions it "points" the correct handler
1578+ 744C             >                // Use of "; ok" to suppress "warning[fwdref]"
1578+ 744C             >
1578+ 744C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1579+ 744C 39 71 1F 74                  dw      CHAR, LITERAL           // char [compile] literal
1580+ 7450 52 68                        dw      EXIT                    // ; immediate
1581+ 7452
1582+ 7452              //  ______________________________________________________________________
1583+ 7452              //
1584+ 7452              // 0x00         n --      ( compile time )
1585+ 7452                              Colon_Def NUL_WORD,  $00, is_immediate
1585+ 7452             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1585+ 7452             >
1585+ 7452             >Dict_Ptr        defl    $
1585+ 7452             >
1585+ 7452             >//              ______________________________________________________________________
1585+ 7452             >//              Heap part
1585+ 7452             >
1585+ 7452             >
1585+ 7452             >                org     (Heap_Ptr & $1FFF) + $E000
1585+ E916             >
1585+ E916             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1585+ E916             >Latest_Definition defl  Heap_Ptr
1585+ E916             >
1585+ E916             >                // dummy db directives used to calculate length of namec
1585+ E916 00          >                db      $00
1585+ E917             >len_NFA         defl    $ - temp_NFA
1585+ E917             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1585+ E916             >
1585+ E916 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1585+ E917 00          >                db      $00               // name string in 7-bit ascii, but
1585+ E918             >                org     $-1                 // alter last byte of Name just above to set
1585+ E917 80          >                db      {b $} | END_BIT     // msb as name end
1585+ E918             >
1585+ E918 0B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1585+ E91A             >Prev_Ptr        defl    Heap_Ptr
1585+ E91A             >
1585+ E91A             >mirror_Ptr      defl    $
1585+ E91A             >
1585+ E91A 54 74       >                dw      Dict_Ptr + 2        // xt
1585+ E91C             >Heap_Ptr        defl    $ - $E000           // save current HP
1585+ E91C             >
1585+ E91C             >Current_HP      defl  $ - $E000             // used to set HP once!
1585+ E91C             >
1585+ E91C             >//              ______________________________________________________________________
1585+ E91C             >//              Dictionary part
1585+ E91C             >
1585+ E91C             >                org     Dict_Ptr
1585+ 7452             >
1585+ 7452 1A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1585+ 7454             >
1585+ 7454             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1585+ 7454 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1585+ 7457             >
1585+ 7457             >
1585+ 7457             >                endif           ; ok        // for other definitions it "points" the correct handler
1585+ 7457             >                // Use of "; ok" to suppress "warning[fwdref]"
1585+ 7457             >
1585+ 7457             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1586+ 7457 22 6B 89 69                  dw      BLK, FETCH, ONE         // blk @ 1
1586+ 745B 88 6A
1587+ 745D 32 6C                        dw      GREATER                 // > if
1588+ 745F                                                              // if
1589+ 745F F5 63                        dw      ZBRANCH
1590+ 7461 28 00                        dw      Nul_Else_1 - $
1591+ 7463 88 6A 22 6B                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1591+ 7467 71 69
1592+ 7469 81 6A 28 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
1592+ 746D 93 69
1593+ 746F 22 6B 89 69                  dw          BLK, FETCH          //      blk @
1594+ 7473 B9 6A                        dw          BSCR                //      b/scr
1595+ 7475 C5 68                        dw          ONE_SUBTRACT        //      1 -
1596+ 7477 0C 68                        dw          AND_OP              //      and  ( this is tricky )
1597+ 7479 77 68                        dw          ZEQUAL              //      0=
1598+ 747B                                                              //      if
1599+ 747B F5 63                        dw          ZBRANCH
1600+ 747D 08 00                        dw          Nul_Endif_2 - $
1601+ 747F 1D 6E                        dw              QEXEC           //          ?exec
1602+ 7481 67 68 10 69                  dw              R_TO, DROP      //          r> drop
1603+ 7485              Nul_Endif_2:                                    //      endif
1604+ 7485 E8 63                        dw      BRANCH
1605+ 7487 06 00                        dw      Nul_Endif_1 - $
1606+ 7489              Nul_Else_1:                                     // else
1607+ 7489 67 68 10 69                  dw          R_TO, DROP          //      r> drop
1608+ 748D              Nul_Endif_1:                                    // endif
1609+ 748D 52 68                        dw      EXIT                    // ;
1610+ 748F
1611+ 748F              //  ______________________________________________________________________
1612+ 748F              //
1613+ 748F              // ?stack       --
1614+ 748F              // Raise error #1 if stack is empty and you pop it
1615+ 748F              // Raise error #7 if stack is full.
1616+ 748F              // This means SP must always stay between HERE and FFFF
1617+ 748F              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1618+ 748F              // for Next 8K MMU paging this is $DOE8
1619+ 748F                              Colon_Def QSTACK, "?STACK", is_normal
1619+ 748F             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1619+ 748F             >
1619+ 748F             >Dict_Ptr        defl    $
1619+ 748F             >
1619+ 748F             >//              ______________________________________________________________________
1619+ 748F             >//              Heap part
1619+ 748F             >
1619+ 748F             >
1619+ 748F             >                org     (Heap_Ptr & $1FFF) + $E000
1619+ E91C             >
1619+ E91C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1619+ E91C             >Latest_Definition defl  Heap_Ptr
1619+ E91C             >
1619+ E91C             >                // dummy db directives used to calculate length of namec
1619+ E91C 3F 53 54 41 >                db      "?STACK"
1619+ E920 43 4B       >
1619+ E922             >len_NFA         defl    $ - temp_NFA
1619+ E922             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1619+ E91C             >
1619+ E91C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1619+ E91D 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1619+ E921 43 4B       >
1619+ E923             >                org     $-1                 // alter last byte of Name just above to set
1619+ E922 CB          >                db      {b $} | END_BIT     // msb as name end
1619+ E923             >
1619+ E923 16 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1619+ E925             >Prev_Ptr        defl    Heap_Ptr
1619+ E925             >
1619+ E925             >mirror_Ptr      defl    $
1619+ E925             >
1619+ E925 91 74       >                dw      Dict_Ptr + 2        // xt
1619+ E927             >Heap_Ptr        defl    $ - $E000           // save current HP
1619+ E927             >
1619+ E927             >Current_HP      defl  $ - $E000             // used to set HP once!
1619+ E927             >
1619+ E927             >//              ______________________________________________________________________
1619+ E927             >//              Dictionary part
1619+ E927             >
1619+ E927             >                org     Dict_Ptr
1619+ 748F             >
1619+ 748F 25 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1619+ 7491             >
1619+ 7491             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1619+ 7491 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1619+ 7494             >
1619+ 7494             >
1619+ 7494             >                endif           ; ok        // for other definitions it "points" the correct handler
1619+ 7494             >                // Use of "; ok" to suppress "warning[fwdref]"
1619+ 7494             >
1619+ 7494             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1620+ 7494 39 68                        dw      SPFETCH                 // sp@
1621+ 7496 DA 6A 89 69                  dw      S0, FETCH               // s0 @
1622+ 749A 24 69 0F 6C                  dw      SWAP, ULESS             // swap u<
1623+ 749E 88 6A F5 6D                  dw      ONE, QERROR             // 1 ?error
1624+ 74A2 A6 6B                        dw      HERE                    // here
1625+ 74A4 DA 6A 89 69                  dw      S0, FETCH, LESS         // s0 @ <
1625+ 74A8 1D 6C
1626+ 74AA                                                              // if
1627+ 74AA F5 63                        dw      ZBRANCH
1628+ 74AC 14 00                        dw      QStack_Endif - $
1629+ 74AE 39 68                        dw          SPFETCH             //      sp@
1630+ 74B0 A6 6B A3 63                  dw          HERE, LIT, 128      //      here 128
1630+ 74B4 80 00
1631+ 74B6 A5 68 0F 6C                  dw          PLUS, ULESS         //      plus u<
1632+ 74BA A3 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1632+ 74BE F5 6D
1633+ 74C0              QStack_Endif:                                   // endif
1634+ 74C0 52 68                        dw      EXIT                    // ;
1635+ 74C2
1636+ 74C2
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
 122  74C2                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
   1+ 74C2              //  ______________________________________________________________________
   2+ 74C2              //
   3+ 74C2              //  L2.asm
   4+ 74C2              //
   5+ 74C2              //  Level-2 3dos
   6+ 74C2              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 74C2              //  ______________________________________________________________________
   8+ 74C2
   9+ 74C2
  10+ 74C2              //  ______________________________________________________________________
  11+ 74C2              //
  12+ 74C2              // interpret    --
  13+ 74C2              // This is the text interpreter.
  14+ 74C2              // It executes or compiles, depending on STATE, the text coming from
  15+ 74C2              // current input stream.
  16+ 74C2              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 74C2              // the word is interpreted as numeric and converted, using current BASE,
  18+ 74C2              // leaving on top of stack a single or double precision number, depending
  19+ 74C2              // on the presence of a decimal point.
  20+ 74C2              // If the number conversion fails, the terminal is notified with ? followed
  21+ 74C2              // by the offending word.
  22+ 74C2                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 74C2             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 74C2             >
  22+ 74C2             >Dict_Ptr        defl    $
  22+ 74C2             >
  22+ 74C2             >//              ______________________________________________________________________
  22+ 74C2             >//              Heap part
  22+ 74C2             >
  22+ 74C2             >
  22+ 74C2             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E927             >
  22+ E927             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E927             >Latest_Definition defl  Heap_Ptr
  22+ E927             >
  22+ E927             >                // dummy db directives used to calculate length of namec
  22+ E927 49 4E 54 45 >                db      "INTERPRET"
  22+ E92B 52 50 52 45 >
  22+ E92F 54          >
  22+ E930             >len_NFA         defl    $ - temp_NFA
  22+ E930             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E927             >
  22+ E927 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E928 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E92C 52 50 52 45 >
  22+ E930 54          >
  22+ E931             >                org     $-1                 // alter last byte of Name just above to set
  22+ E930 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E931             >
  22+ E931 1C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E933             >Prev_Ptr        defl    Heap_Ptr
  22+ E933             >
  22+ E933             >mirror_Ptr      defl    $
  22+ E933             >
  22+ E933 C4 74       >                dw      Dict_Ptr + 2        // xt
  22+ E935             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E935             >
  22+ E935             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E935             >
  22+ E935             >//              ______________________________________________________________________
  22+ E935             >//              Dictionary part
  22+ E935             >
  22+ E935             >                org     Dict_Ptr
  22+ 74C2             >
  22+ 74C2 33 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 74C4             >
  22+ 74C4             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 74C4 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 74C7             >
  22+ 74C7             >
  22+ 74C7             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 74C7             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 74C7             >
  22+ 74C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 74C7
  24+ 74C7              Interpret_Begin:                                        // begin
  25+ 74C7 01 73                        dw          LFIND                       //      -find
  26+ 74C9                                                                      //      if
  27+ 74C9 F5 63                        dw          ZBRANCH
  28+ 74CB 1A 00                        dw          Interpret_Else_1 - $
  29+ 74CD 4C 6B 89 69                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 74D1 1D 6C
  30+ 74D3                                                                      //          if
  31+ 74D3 F5 63                        dw              ZBRANCH
  32+ 74D5 08 00                        dw              Interpret_Else_2 - $
  33+ 74D7 7A 6E                        dw                  COMPILE_XT          //              compile,
  34+ 74D9                                                                      //          else
  35+ 74D9 E8 63                        dw              BRANCH
  36+ 74DB 06 00                        dw              Interpret_Endif_2 - $
  37+ 74DD              Interpret_Else_2:
  38+ 74DD AE 63 48 6A                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 74E1              Interpret_Endif_2:                                      //          endif
  40+ 74E1                                                                      //      else
  41+ 74E1 E8 63                        dw          BRANCH
  42+ 74E3 1A 00                        dw          Interpret_Endif_1 - $
  43+ 74E5              Interpret_Else_1:
  44+ 74E5 A6 6B 6D 72                  dw              HERE, NUMBER            //          here number
  45+ 74E9 58 6B 89 69                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 74ED BE 68
  46+ 74EF                                                                      //          if
  47+ 74EF F5 63                        dw              ZBRANCH
  48+ 74F1 08 00                        dw              Interpret_Else_3 - $
  49+ 74F3              //              dw                  NMODE, FETCH        //              nmode @
  50+ 74F3              //                                                      //              if
  51+ 74F3              //              dw                  ZBRANCH
  52+ 74F3              //              dw                  Interpret_Endif_4 - $
  53+ 74F3              //              dw                      ONE, ZERO       //                  1 0
  54+ 74F3              //              dw                      TWO_DROP        //                  2drop
  55+ 74F3              //Interpret_Endif_4:                                      //              endif
  56+ 74F3 34 74                        dw                  DLITERAL            //              [compile] dliteral
  57+ 74F5                                                                      //          else
  58+ 74F5 E8 63                        dw              BRANCH
  59+ 74F7 06 00                        dw              Interpret_Endif_3 - $
  60+ 74F9              Interpret_Else_3:
  61+ 74F9 10 69                        dw                  DROP                //              drop
  62+ 74FB 1F 74                        dw                  LITERAL             //              [compile]  literal
  63+ 74FD              Interpret_Endif_3:                                      //          endif
  64+ 74FD              Interpret_Endif_1:                                      //      endif
  65+ 74FD 91 74                        dw          QSTACK                      //      ?stack
  66+ 74FF B3 66                        dw          QTERMINAL                   //      ?terminal
  67+ 7501                                                                      //      if
  68+ 7501 F5 63                        dw          ZBRANCH
  69+ 7503 04 00                        dw          Interpret_Endif_5 - $
  70+ 7505 6B 75                        dw              QUIT                    //          quit
  71+ 7507              Interpret_Endif_5:                                      //      endif
  72+ 7507 E8 63                        dw      BRANCH
  73+ 7509 BE FF                        dw      Interpret_Begin - $
  74+ 750B 52 68                        dw      EXIT                            // ;
  75+ 750D
  76+ 750D              //  ______________________________________________________________________
  77+ 750D              //
  78+ 750D              // vocabulary   -- cccc     ( compile time )
  79+ 750D              // Defining word used in the form   VOCABULARY cccc
  80+ 750D              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 750D              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 750D              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 750D              // so new definitions can be inserted in that vocabulary.
  84+ 750D                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 750D             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 750D             >
  84+ 750D             >Dict_Ptr        defl    $
  84+ 750D             >
  84+ 750D             >//              ______________________________________________________________________
  84+ 750D             >//              Heap part
  84+ 750D             >
  84+ 750D             >
  84+ 750D             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E935             >
  84+ E935             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E935             >Latest_Definition defl  Heap_Ptr
  84+ E935             >
  84+ E935             >                // dummy db directives used to calculate length of namec
  84+ E935 56 4F 43 41 >                db      "VOCABULARY"
  84+ E939 42 55 4C 41 >
  84+ E93D 52 59       >
  84+ E93F             >len_NFA         defl    $ - temp_NFA
  84+ E93F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E935             >
  84+ E935 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E936 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E93A 42 55 4C 41 >
  84+ E93E 52 59       >
  84+ E940             >                org     $-1                 // alter last byte of Name just above to set
  84+ E93F D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E940             >
  84+ E940 27 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E942             >Prev_Ptr        defl    Heap_Ptr
  84+ E942             >
  84+ E942             >mirror_Ptr      defl    $
  84+ E942             >
  84+ E942 0F 75       >                dw      Dict_Ptr + 2        // xt
  84+ E944             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E944             >
  84+ E944             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E944             >
  84+ E944             >//              ______________________________________________________________________
  84+ E944             >//              Dictionary part
  84+ E944             >
  84+ E944             >                org     Dict_Ptr
  84+ 750D             >
  84+ 750D 42 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 750F             >
  84+ 750F             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 750F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7512             >
  84+ 7512             >
  84+ 7512             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7512             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7512             >
  84+ 7512             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7512
  86+ 7512 09 6F                        dw      CBUILDS
  87+ 7514
  88+ 7514                              // dummy word + link part
  89+ 7514 A3 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 7518 BC 6B
  90+ 751A
  91+ 751A A3 63 81 A0                  dw      LIT, $A081, HCOMMA      // $81A0 ,
  91+ 751E DA 6B
  92+ 7520
  93+ 7520 46 6B 89 69                  dw      CURRENT, FETCH          // current @
  94+ 7524 89 69                        dw      FETCH
  95+ 7526                          //  dw      CELL_MINUS              // cell-
  96+ 7526 BC 6B                        dw      COMMA                   // ,
  97+ 7528
  98+ 7528                              // voc-link part
  99+ 7528 A6 6B                        dw      HERE                    // here
 100+ 752A 04 6B 89 69                  dw      VOC_LINK, FETCH         // voc-link @
 101+ 752E BC 6B                        dw      COMMA                   // ,
 102+ 7530 04 6B 93 69                  dw      VOC_LINK, STORE         // voc-link !
 103+ 7534                              // DOES part
 104+ 7534 14 6F                        dw      DOES_TO                 // does>
 105+ 7536              Vocabulary_Does:
 106+ 7536 D4 68                        dw      CELL_PLUS               // cell+
 107+ 7538 40 6B 93 69                  dw      CONTEXT, STORE          // context !
 108+ 753C 52 68                        dw      EXIT                    // ;
 109+ 753E
 110+ 753E              //  ______________________________________________________________________
 111+ 753E              //
 112+ 753E              // forth        --
 113+ 753E              // Name of the first vocabulary.
 114+ 753E              // It makes FORTH the CONTEXT vocabulary.
 115+ 753E              // Until new user vocabulary are defined, new colon-definitions becomes
 116+ 753E              // part of FORTH. It is immediate, so it will executed during the creation
 117+ 753E              // of a colon definition to be able to select the vocabulary.
 118+ 753E
 119+ 753E                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 119+ 753E             >
 119+ 753E             >Dict_Ptr        defl    $
 119+ 753E             >
 119+ 753E             >//              ______________________________________________________________________
 119+ 753E             >//              Heap part
 119+ 753E             >
 119+ 753E             >
 119+ 753E             >                org     (Heap_Ptr & $1FFF) + $E000
 119+ E944             >
 119+ E944             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ E944             >Latest_Definition defl  Heap_Ptr
 119+ E944             >
 119+ E944             >                // dummy db directives used to calculate length of namec
 119+ E944 46 4F 52 54 >                db      "FORTH"
 119+ E948 48          >
 119+ E949             >len_NFA         defl    $ - temp_NFA
 119+ E949             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ E944             >
 119+ E944 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ E945 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 119+ E949 48          >
 119+ E94A             >                org     $-1                 // alter last byte of Name just above to set
 119+ E949 C8          >                db      {b $} | END_BIT     // msb as name end
 119+ E94A             >
 119+ E94A 35 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 119+ E94C             >Prev_Ptr        defl    Heap_Ptr
 119+ E94C             >
 119+ E94C             >mirror_Ptr      defl    $
 119+ E94C             >
 119+ E94C 40 75       >                dw      Dict_Ptr + 2        // xt
 119+ E94E             >Heap_Ptr        defl    $ - $E000           // save current HP
 119+ E94E             >
 119+ E94E             >Current_HP      defl  $ - $E000             // used to set HP once!
 119+ E94E             >
 119+ E94E             >//              ______________________________________________________________________
 119+ E94E             >//              Dictionary part
 119+ E94E             >
 119+ E94E             >                org     Dict_Ptr
 119+ 753E             >
 119+ 753E 4C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 119+ 7540             >
 119+ 7540             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 7540 CD 21 6F    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 119+ 7543             >
 119+ 7543             >
 119+ 7543             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 7543             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 7543             >
 119+ 7543             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 7543 36 75                        dw      Vocabulary_Does
 121+ 7545 81 A0                        db      $81, $A0
 122+ 7547              Forth_Latest_Ptr:
 123+ 7547 44 09                        dw      Latest_Definition
 124+ 7549              Voclink_Ptr:
 125+ 7549 00 00                        dw      0
 126+ 754B              // Any new vocabulary is structured as follow:
 127+ 754B              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 128+ 754B              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 129+ 754B              // PFA+4 always contains the LATEST word of this VOCABULARY.
 130+ 754B              //       at creations it points to the null-word of its parent vocabulary
 131+ 754B              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 132+ 754B              // PFA+6 is the pointer that builds up the vocabulary linked list.
 133+ 754B              //       FORTH has 0 here to signal the end of the list and user's variable
 134+ 754B              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 135+ 754B              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 136+ 754B              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 137+ 754B
 138+ 754B              //  ______________________________________________________________________
 139+ 754B              //
 140+ 754B              // definitions  --
 141+ 754B              // Used in the form  cccc DEFINITIONS
 142+ 754B              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 143+ 754B              // vocabulary cccc.
 144+ 754B                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 144+ 754B             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 144+ 754B             >
 144+ 754B             >Dict_Ptr        defl    $
 144+ 754B             >
 144+ 754B             >//              ______________________________________________________________________
 144+ 754B             >//              Heap part
 144+ 754B             >
 144+ 754B             >
 144+ 754B             >                org     (Heap_Ptr & $1FFF) + $E000
 144+ E94E             >
 144+ E94E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ E94E             >Latest_Definition defl  Heap_Ptr
 144+ E94E             >
 144+ E94E             >                // dummy db directives used to calculate length of namec
 144+ E94E 44 45 46 49 >                db      "DEFINITIONS"
 144+ E952 4E 49 54 49 >
 144+ E956 4F 4E 53    >
 144+ E959             >len_NFA         defl    $ - temp_NFA
 144+ E959             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ E94E             >
 144+ E94E 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ E94F 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 144+ E953 4E 49 54 49 >
 144+ E957 4F 4E 53    >
 144+ E95A             >                org     $-1                 // alter last byte of Name just above to set
 144+ E959 D3          >                db      {b $} | END_BIT     // msb as name end
 144+ E95A             >
 144+ E95A 44 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 144+ E95C             >Prev_Ptr        defl    Heap_Ptr
 144+ E95C             >
 144+ E95C             >mirror_Ptr      defl    $
 144+ E95C             >
 144+ E95C 4D 75       >                dw      Dict_Ptr + 2        // xt
 144+ E95E             >Heap_Ptr        defl    $ - $E000           // save current HP
 144+ E95E             >
 144+ E95E             >Current_HP      defl  $ - $E000             // used to set HP once!
 144+ E95E             >
 144+ E95E             >//              ______________________________________________________________________
 144+ E95E             >//              Dictionary part
 144+ E95E             >
 144+ E95E             >                org     Dict_Ptr
 144+ 754B             >
 144+ 754B 5C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 144+ 754D             >
 144+ 754D             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 754D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7550             >
 144+ 7550             >
 144+ 7550             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7550             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7550             >
 144+ 7550             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7550 40 6B 89 69                  dw      CONTEXT, FETCH          // context @
 146+ 7554 46 6B 93 69                  dw      CURRENT, STORE          // current !
 147+ 7558 52 68                        dw      EXIT                    // ;
 148+ 755A
 149+ 755A              //  ______________________________________________________________________
 150+ 755A              //
 151+ 755A              // (            -- cccc )
 152+ 755A              // the following text is interpreted as a comment until a closing )
 153+ 755A                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 153+ 755A             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 153+ 755A             >
 153+ 755A             >Dict_Ptr        defl    $
 153+ 755A             >
 153+ 755A             >//              ______________________________________________________________________
 153+ 755A             >//              Heap part
 153+ 755A             >
 153+ 755A             >
 153+ 755A             >                org     (Heap_Ptr & $1FFF) + $E000
 153+ E95E             >
 153+ E95E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ E95E             >Latest_Definition defl  Heap_Ptr
 153+ E95E             >
 153+ E95E             >                // dummy db directives used to calculate length of namec
 153+ E95E 28          >                db      "("
 153+ E95F             >len_NFA         defl    $ - temp_NFA
 153+ E95F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ E95E             >
 153+ E95E C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ E95F 28          >                db      "("               // name string in 7-bit ascii, but
 153+ E960             >                org     $-1                 // alter last byte of Name just above to set
 153+ E95F A8          >                db      {b $} | END_BIT     // msb as name end
 153+ E960             >
 153+ E960 4E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 153+ E962             >Prev_Ptr        defl    Heap_Ptr
 153+ E962             >
 153+ E962             >mirror_Ptr      defl    $
 153+ E962             >
 153+ E962 5C 75       >                dw      Dict_Ptr + 2        // xt
 153+ E964             >Heap_Ptr        defl    $ - $E000           // save current HP
 153+ E964             >
 153+ E964             >Current_HP      defl  $ - $E000             // used to set HP once!
 153+ E964             >
 153+ E964             >//              ______________________________________________________________________
 153+ E964             >//              Dictionary part
 153+ E964             >
 153+ E964             >                org     Dict_Ptr
 153+ 755A             >
 153+ 755A 62 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 153+ 755C             >
 153+ 755C             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 755C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 755F             >
 153+ 755F             >
 153+ 755F             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 755F             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 755F             >
 153+ 755F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 755F A3 63 29 00                  dw      LIT, ")"                // [char] )
 155+ 7563 D7 70 10 69                  dw      WORD, DROP              // word drop
 156+ 7567 52 68                        dw      EXIT                    // ;
 157+ 7569
 158+ 7569              //  ______________________________________________________________________
 159+ 7569              //
 160+ 7569              // quit         --
 161+ 7569              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 162+ 7569                              Colon_Def QUIT, "QUIT", is_normal
 162+ 7569             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 162+ 7569             >
 162+ 7569             >Dict_Ptr        defl    $
 162+ 7569             >
 162+ 7569             >//              ______________________________________________________________________
 162+ 7569             >//              Heap part
 162+ 7569             >
 162+ 7569             >
 162+ 7569             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E964             >
 162+ E964             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E964             >Latest_Definition defl  Heap_Ptr
 162+ E964             >
 162+ E964             >                // dummy db directives used to calculate length of namec
 162+ E964 51 55 49 54 >                db      "QUIT"
 162+ E968             >len_NFA         defl    $ - temp_NFA
 162+ E968             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E964             >
 162+ E964 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E965 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 162+ E969             >                org     $-1                 // alter last byte of Name just above to set
 162+ E968 D4          >                db      {b $} | END_BIT     // msb as name end
 162+ E969             >
 162+ E969 5E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E96B             >Prev_Ptr        defl    Heap_Ptr
 162+ E96B             >
 162+ E96B             >mirror_Ptr      defl    $
 162+ E96B             >
 162+ E96B 6B 75       >                dw      Dict_Ptr + 2        // xt
 162+ E96D             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E96D             >
 162+ E96D             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E96D             >
 162+ E96D             >//              ______________________________________________________________________
 162+ E96D             >//              Dictionary part
 162+ E96D             >
 162+ E96D             >                org     Dict_Ptr
 162+ 7569             >
 162+ 7569 6B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 756B             >
 162+ 756B             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 756B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 162+ 756E             >
 162+ 756E             >
 162+ 756E             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 756E             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 756E             >
 162+ 756E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 756E
 164+ 756E 8E 6B 89 69                  dw      SOURCE_ID, FETCH        // source-id @
 165+ 7572 FF 66 10 69                  dw      F_CLOSE, DROP           // f_close drop
 166+ 7576 81 6A 8E 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 166+ 757A 93 69
 167+ 757C 81 6A 22 6B                  dw      ZERO, BLK, STORE        // 0 blk !
 167+ 7580 93 69
 168+ 7582 85 6E                        dw      SQUARED_OPEN            // [compile] [
 169+ 7584                                                              // begin
 170+ 7584              Quit_Begin:
 171+ 7584 E0 6A 89 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 171+ 7588 4D 68
 172+ 758A B6 65                        dw      CR                      //      cr
 173+ 758C 74 70                        dw      QUERY                   //      query
 174+ 758E              Next_Breakpoint_1:
 175+ 758E C4 74                        dw      INTERPRET               //      interpret
 176+ 7590 4C 6B 89 69                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 176+ 7594 77 68
 177+ 7596                                                              //      if
 178+ 7596 F5 63                        dw      ZBRANCH
 179+ 7598 07 00                        dw      Quit_Endif - $
 180+ 759A 22 71                        dw          C_DOT_QUOTE
 181+ 759C 02 6F 6B                     db          2, "ok"             //          .( ok)
 182+ 759F              Quit_Endif:                                     //      else
 183+ 759F                                                              // again
 184+ 759F E8 63                        dw      BRANCH
 185+ 75A1 E3 FF                        dw      Quit_Begin - $
 186+ 75A3 52 68                        dw      EXIT                    // ;
 187+ 75A5
 188+ 75A5              //  ______________________________________________________________________
 189+ 75A5              //
 190+ 75A5              // abort        --
 191+ 75A5                              Colon_Def ABORT, "ABORT", is_normal
 191+ 75A5             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 191+ 75A5             >
 191+ 75A5             >Dict_Ptr        defl    $
 191+ 75A5             >
 191+ 75A5             >//              ______________________________________________________________________
 191+ 75A5             >//              Heap part
 191+ 75A5             >
 191+ 75A5             >
 191+ 75A5             >                org     (Heap_Ptr & $1FFF) + $E000
 191+ E96D             >
 191+ E96D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 191+ E96D             >Latest_Definition defl  Heap_Ptr
 191+ E96D             >
 191+ E96D             >                // dummy db directives used to calculate length of namec
 191+ E96D 41 42 4F 52 >                db      "ABORT"
 191+ E971 54          >
 191+ E972             >len_NFA         defl    $ - temp_NFA
 191+ E972             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 191+ E96D             >
 191+ E96D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 191+ E96E 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 191+ E972 54          >
 191+ E973             >                org     $-1                 // alter last byte of Name just above to set
 191+ E972 D4          >                db      {b $} | END_BIT     // msb as name end
 191+ E973             >
 191+ E973 64 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 191+ E975             >Prev_Ptr        defl    Heap_Ptr
 191+ E975             >
 191+ E975             >mirror_Ptr      defl    $
 191+ E975             >
 191+ E975 A7 75       >                dw      Dict_Ptr + 2        // xt
 191+ E977             >Heap_Ptr        defl    $ - $E000           // save current HP
 191+ E977             >
 191+ E977             >Current_HP      defl  $ - $E000             // used to set HP once!
 191+ E977             >
 191+ E977             >//              ______________________________________________________________________
 191+ E977             >//              Dictionary part
 191+ E977             >
 191+ E977             >                org     Dict_Ptr
 191+ 75A5             >
 191+ 75A5 75 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 191+ 75A7             >
 191+ 75A7             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 191+ 75A7 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 191+ 75AA             >
 191+ 75AA             >
 191+ 75AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 191+ 75AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 191+ 75AA             >
 191+ 75AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 192+ 75AA DA 6A 89 69                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 192+ 75AE 42 68
 193+ 75B0 CE 6E                        dw      DECIMAL                 // decimal
 194+ 75B2 40 75                        dw      FORTH                   // [compile] forth
 195+ 75B4 4D 75                        dw      DEFINITIONS             // definitions
 196+ 75B6              Autoexec_Ptr:
 197+ 75B6 B8 7F                        dw      AUTOEXEC                // autoexec, patched to noop
 198+ 75B8 6B 75                        dw      QUIT                    // quit
 199+ 75BA 52 68                        dw      EXIT                    // ;
 200+ 75BC
 201+ 75BC              //  ______________________________________________________________________
 202+ 75BC              //
 203+ 75BC              // warm         --
 204+ 75BC                              Colon_Def WARM, "WARM", is_normal
 204+ 75BC             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 204+ 75BC             >
 204+ 75BC             >Dict_Ptr        defl    $
 204+ 75BC             >
 204+ 75BC             >//              ______________________________________________________________________
 204+ 75BC             >//              Heap part
 204+ 75BC             >
 204+ 75BC             >
 204+ 75BC             >                org     (Heap_Ptr & $1FFF) + $E000
 204+ E977             >
 204+ E977             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ E977             >Latest_Definition defl  Heap_Ptr
 204+ E977             >
 204+ E977             >                // dummy db directives used to calculate length of namec
 204+ E977 57 41 52 4D >                db      "WARM"
 204+ E97B             >len_NFA         defl    $ - temp_NFA
 204+ E97B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ E977             >
 204+ E977 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ E978 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 204+ E97C             >                org     $-1                 // alter last byte of Name just above to set
 204+ E97B CD          >                db      {b $} | END_BIT     // msb as name end
 204+ E97C             >
 204+ E97C 6D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 204+ E97E             >Prev_Ptr        defl    Heap_Ptr
 204+ E97E             >
 204+ E97E             >mirror_Ptr      defl    $
 204+ E97E             >
 204+ E97E BE 75       >                dw      Dict_Ptr + 2        // xt
 204+ E980             >Heap_Ptr        defl    $ - $E000           // save current HP
 204+ E980             >
 204+ E980             >Current_HP      defl  $ - $E000             // used to set HP once!
 204+ E980             >
 204+ E980             >//              ______________________________________________________________________
 204+ E980             >//              Dictionary part
 204+ E980             >
 204+ E980             >                org     Dict_Ptr
 204+ 75BC             >
 204+ 75BC 7E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 204+ 75BE             >
 204+ 75BE             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 75BE CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 75C1             >
 204+ 75C1             >
 204+ 75C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 75C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 75C1             >
 204+ 75C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 75C1 74 78                        dw      BLK_INIT                // blk-init
 206+ 75C3 92 7F                        dw      SPLASH                  // splash
 207+ 75C5 A3 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 207+ 75C9 73 6C
 208+ 75CB A7 75                        dw      ABORT                   // abort
 209+ 75CD 52 68                        dw      EXIT                    // exit
 210+ 75CF
 211+ 75CF              //  ______________________________________________________________________
 212+ 75CF              //
 213+ 75CF              // cold         --
 214+ 75CF                              Colon_Def COLD, "COLD", is_normal
 214+ 75CF             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 214+ 75CF             >
 214+ 75CF             >Dict_Ptr        defl    $
 214+ 75CF             >
 214+ 75CF             >//              ______________________________________________________________________
 214+ 75CF             >//              Heap part
 214+ 75CF             >
 214+ 75CF             >
 214+ 75CF             >                org     (Heap_Ptr & $1FFF) + $E000
 214+ E980             >
 214+ E980             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 214+ E980             >Latest_Definition defl  Heap_Ptr
 214+ E980             >
 214+ E980             >                // dummy db directives used to calculate length of namec
 214+ E980 43 4F 4C 44 >                db      "COLD"
 214+ E984             >len_NFA         defl    $ - temp_NFA
 214+ E984             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 214+ E980             >
 214+ E980 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 214+ E981 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 214+ E985             >                org     $-1                 // alter last byte of Name just above to set
 214+ E984 C4          >                db      {b $} | END_BIT     // msb as name end
 214+ E985             >
 214+ E985 77 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 214+ E987             >Prev_Ptr        defl    Heap_Ptr
 214+ E987             >
 214+ E987             >mirror_Ptr      defl    $
 214+ E987             >
 214+ E987 D1 75       >                dw      Dict_Ptr + 2        // xt
 214+ E989             >Heap_Ptr        defl    $ - $E000           // save current HP
 214+ E989             >
 214+ E989             >Current_HP      defl  $ - $E000             // used to set HP once!
 214+ E989             >
 214+ E989             >//              ______________________________________________________________________
 214+ E989             >//              Dictionary part
 214+ E989             >
 214+ E989             >                org     Dict_Ptr
 214+ 75CF             >
 214+ 75CF 87 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 214+ 75D1             >
 214+ 75D1             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 214+ 75D1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 214+ 75D4             >
 214+ 75D4             >
 214+ 75D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 214+ 75D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 214+ 75D4             >
 214+ 75D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 215+ 75D4 A3 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 216+ 75D8 A3 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 217+ 75DC 89 69                        dw      FETCH                   // @
 218+ 75DE A3 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 218+ 75E2 A5 68
 219+ 75E4 A3 63 16 00                  dw      LIT, 22                 // 22
 220+ 75E8 8D 67                        dw      CMOVE
 221+ 75EA A3 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 222+ 75EE 89 69                        dw      FETCH                   // @
 223+ 75F0 A3 63 47 75                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 224+ 75F4 93 69                        dw      STORE                   // !
 225+ 75F6 81 6A 1C 6B                  dw      ZERO, NMODE, STORE      // 0 nmode !
 225+ 75FA 93 69
 226+ 75FC 0A 6B 89 69                  dw      FIRST, FETCH, DUP       // first @ dup
 226+ 7600 2B 69
 227+ 7602 76 6B 93 69                  dw      USE, STORE              // use !
 228+ 7606 7C 6B 93 69                  dw      PREV, STORE             // prev !
 229+ 760A A3 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 229+ 760E 88 6B 93 69
 230+ 7612              //              dw      LIT, 8
 231+ 7612              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 232+ 7612
 233+ 7612 BE 75        Warm_Start:     dw      WARM
 234+ 7614 D1 75        Cold_Start:     dw      COLD
 235+ 7616 52 68                        dw      EXIT
 236+ 7618
 237+ 7618              //  ______________________________________________________________________
 238+ 7618              WarmRoutine:
 239+ 7618              ColdRoutine:
 240+ 7618 DD 21 9A 63                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 241+ 761C
 242+ 761C D9                           exx
 243+ 761D E5                           push    hl                      // save Basic's return address
 244+ 761E D9                           exx
 245+ 761F ED 73 6E 63                  ld      (SP_Basic), sp
 246+ 7623
 247+ 7623                              // pre-set the four main 16-bit registers
 248+ 7623 ED 7B 78 63                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 249+ 7627 2A 7A 63                     ld      hl, (R0_origin)         // Return Stack Pointer
 250+ 762A                              // ld      de, (R0_origin)         // Return Stack Pointer
 251+ 762A                              ldrphl
 251+ 762A 22 96 63    >                ld      (RP_Pointer),hl
 252+ 762D EB                           ex      de, hl
 253+ 762E 01 12 76                     ld      bc, Warm_Start          // Instruction Pointer
 254+ 7631
 255+ 7631 38 02                        jr      c, Warm_Skip
 256+ 7633 03                           inc     bc
 257+ 7634 03                           inc     bc
 258+ 7635              Warm_Skip:
 259+ 7635                              next
 259+ 7635 DD E9       >                jp      (ix)
 260+ 7637
 261+ 7637              //  ______________________________________________________________________
 262+ 7637              //
 263+ 7637              // basic        --
 264+ 7637                              New_Def BASIC, "BASIC", is_code, is_normal
 264+ 7637             >
 264+ 7637             >Dict_Ptr        defl    $
 264+ 7637             >
 264+ 7637             >//              ______________________________________________________________________
 264+ 7637             >//              Heap part
 264+ 7637             >
 264+ 7637             >
 264+ 7637             >                org     (Heap_Ptr & $1FFF) + $E000
 264+ E989             >
 264+ E989             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 264+ E989             >Latest_Definition defl  Heap_Ptr
 264+ E989             >
 264+ E989             >                // dummy db directives used to calculate length of namec
 264+ E989 42 41 53 49 >                db      "BASIC"
 264+ E98D 43          >
 264+ E98E             >len_NFA         defl    $ - temp_NFA
 264+ E98E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 264+ E989             >
 264+ E989 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 264+ E98A 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 264+ E98E 43          >
 264+ E98F             >                org     $-1                 // alter last byte of Name just above to set
 264+ E98E C3          >                db      {b $} | END_BIT     // msb as name end
 264+ E98F             >
 264+ E98F 80 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 264+ E991             >Prev_Ptr        defl    Heap_Ptr
 264+ E991             >
 264+ E991             >mirror_Ptr      defl    $
 264+ E991             >
 264+ E991 39 76       >                dw      Dict_Ptr + 2        // xt
 264+ E993             >Heap_Ptr        defl    $ - $E000           // save current HP
 264+ E993             >
 264+ E993             >Current_HP      defl  $ - $E000             // used to set HP once!
 264+ E993             >
 264+ E993             >//              ______________________________________________________________________
 264+ E993             >//              Dictionary part
 264+ E993             >
 264+ E993             >                org     Dict_Ptr
 264+ 7637             >
 264+ 7637 91 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 264+ 7639             >
 264+ 7639             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 264+ 7639 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 264+ 7639 ~           >
 264+ 7639 ~           >
 264+ 7639             >                endif           ; ok        // for other definitions it "points" the correct handler
 264+ 7639             >                // Use of "; ok" to suppress "warning[fwdref]"
 264+ 7639             >
 264+ 7639             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 265+ 7639 C1                           pop     bc                      // return  TOS  value to Basic
 266+ 763A 21 00 00                     ld      hl, 0
 267+ 763D 39                           add     hl, sp
 268+ 763E ED 7B 6E 63                  ld      sp, (SP_Basic)          // restore Basic's SP
 269+ 7642              //              nop
 270+ 7642 22 6E 63                     ld      (SP_Basic),hl           // but also save Forth's
 271+ 7645 D9                           exx
 272+ 7646 E1                           pop     hl                      // restore h'l'
 273+ 7647 D9                           exx
 274+ 7648 C9                           ret                             // to where USR Basic was left
 275+ 7649
 276+ 7649              //  ______________________________________________________________________
 277+ 7649              //
 278+ 7649              // +-           n1 n2 -- n3
 279+ 7649              // leaves n1 with the sign of n2 as n3.
 280+ 7649                              Colon_Def PLUS_MINUS, "+-", is_normal
 280+ 7649             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 280+ 7649             >
 280+ 7649             >Dict_Ptr        defl    $
 280+ 7649             >
 280+ 7649             >//              ______________________________________________________________________
 280+ 7649             >//              Heap part
 280+ 7649             >
 280+ 7649             >
 280+ 7649             >                org     (Heap_Ptr & $1FFF) + $E000
 280+ E993             >
 280+ E993             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 280+ E993             >Latest_Definition defl  Heap_Ptr
 280+ E993             >
 280+ E993             >                // dummy db directives used to calculate length of namec
 280+ E993 2B 2D       >                db      "+-"
 280+ E995             >len_NFA         defl    $ - temp_NFA
 280+ E995             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 280+ E993             >
 280+ E993 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 280+ E994 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 280+ E996             >                org     $-1                 // alter last byte of Name just above to set
 280+ E995 AD          >                db      {b $} | END_BIT     // msb as name end
 280+ E996             >
 280+ E996 89 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 280+ E998             >Prev_Ptr        defl    Heap_Ptr
 280+ E998             >
 280+ E998             >mirror_Ptr      defl    $
 280+ E998             >
 280+ E998 4B 76       >                dw      Dict_Ptr + 2        // xt
 280+ E99A             >Heap_Ptr        defl    $ - $E000           // save current HP
 280+ E99A             >
 280+ E99A             >Current_HP      defl  $ - $E000             // used to set HP once!
 280+ E99A             >
 280+ E99A             >//              ______________________________________________________________________
 280+ E99A             >//              Dictionary part
 280+ E99A             >
 280+ E99A             >                org     Dict_Ptr
 280+ 7649             >
 280+ 7649 98 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 280+ 764B             >
 280+ 764B             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 280+ 764B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 280+ 764E             >
 280+ 764E             >
 280+ 764E             >                endif           ; ok        // for other definitions it "points" the correct handler
 280+ 764E             >                // Use of "; ok" to suppress "warning[fwdref]"
 280+ 764E             >
 280+ 764E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 281+ 764E 8A 68                        dw      ZLESS                   // 0<
 282+ 7650                                                              // if
 283+ 7650 F5 63                        dw      ZBRANCH
 284+ 7652 04 00                        dw      Plus_Minus_Endif - $
 285+ 7654 E6 68                        dw          MINUS               //      minus
 286+ 7656              Plus_Minus_Endif:                               // endif
 287+ 7656 52 68                        dw      EXIT                    // ;
 288+ 7658
 289+ 7658              //  ______________________________________________________________________
 290+ 7658              //
 291+ 7658              // d+-          d1 n -- d2
 292+ 7658              // leaves d1 with the sign of n as d2.
 293+ 7658                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 293+ 7658             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 293+ 7658             >
 293+ 7658             >Dict_Ptr        defl    $
 293+ 7658             >
 293+ 7658             >//              ______________________________________________________________________
 293+ 7658             >//              Heap part
 293+ 7658             >
 293+ 7658             >
 293+ 7658             >                org     (Heap_Ptr & $1FFF) + $E000
 293+ E99A             >
 293+ E99A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ E99A             >Latest_Definition defl  Heap_Ptr
 293+ E99A             >
 293+ E99A             >                // dummy db directives used to calculate length of namec
 293+ E99A 44 2B 2D    >                db      "D+-"
 293+ E99D             >len_NFA         defl    $ - temp_NFA
 293+ E99D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ E99A             >
 293+ E99A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ E99B 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 293+ E99E             >                org     $-1                 // alter last byte of Name just above to set
 293+ E99D AD          >                db      {b $} | END_BIT     // msb as name end
 293+ E99E             >
 293+ E99E 93 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 293+ E9A0             >Prev_Ptr        defl    Heap_Ptr
 293+ E9A0             >
 293+ E9A0             >mirror_Ptr      defl    $
 293+ E9A0             >
 293+ E9A0 5A 76       >                dw      Dict_Ptr + 2        // xt
 293+ E9A2             >Heap_Ptr        defl    $ - $E000           // save current HP
 293+ E9A2             >
 293+ E9A2             >Current_HP      defl  $ - $E000             // used to set HP once!
 293+ E9A2             >
 293+ E9A2             >//              ______________________________________________________________________
 293+ E9A2             >//              Dictionary part
 293+ E9A2             >
 293+ E9A2             >                org     Dict_Ptr
 293+ 7658             >
 293+ 7658 A0 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 293+ 765A             >
 293+ 765A             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 765A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 765D             >
 293+ 765D             >
 293+ 765D             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 765D             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 765D             >
 293+ 765D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 765D 8A 68                        dw      ZLESS                   // 0<
 295+ 765F                                                              // if
 296+ 765F F5 63                        dw      ZBRANCH
 297+ 7661 04 00                        dw      DPlus_Minus_Endif - $
 298+ 7663 F4 68                        dw          DMINUS              //      dminus
 299+ 7665              DPlus_Minus_Endif:                              // endif
 300+ 7665 52 68                        dw      EXIT                    // ;
 301+ 7667
 302+ 7667              //  ______________________________________________________________________
 303+ 7667              //
 304+ 7667              // abs          n1 -- n2
 305+ 7667                              Colon_Def ABS_OP, "ABS", is_normal
 305+ 7667             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 305+ 7667             >
 305+ 7667             >Dict_Ptr        defl    $
 305+ 7667             >
 305+ 7667             >//              ______________________________________________________________________
 305+ 7667             >//              Heap part
 305+ 7667             >
 305+ 7667             >
 305+ 7667             >                org     (Heap_Ptr & $1FFF) + $E000
 305+ E9A2             >
 305+ E9A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 305+ E9A2             >Latest_Definition defl  Heap_Ptr
 305+ E9A2             >
 305+ E9A2             >                // dummy db directives used to calculate length of namec
 305+ E9A2 41 42 53    >                db      "ABS"
 305+ E9A5             >len_NFA         defl    $ - temp_NFA
 305+ E9A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 305+ E9A2             >
 305+ E9A2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 305+ E9A3 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 305+ E9A6             >                org     $-1                 // alter last byte of Name just above to set
 305+ E9A5 D3          >                db      {b $} | END_BIT     // msb as name end
 305+ E9A6             >
 305+ E9A6 9A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 305+ E9A8             >Prev_Ptr        defl    Heap_Ptr
 305+ E9A8             >
 305+ E9A8             >mirror_Ptr      defl    $
 305+ E9A8             >
 305+ E9A8 69 76       >                dw      Dict_Ptr + 2        // xt
 305+ E9AA             >Heap_Ptr        defl    $ - $E000           // save current HP
 305+ E9AA             >
 305+ E9AA             >Current_HP      defl  $ - $E000             // used to set HP once!
 305+ E9AA             >
 305+ E9AA             >//              ______________________________________________________________________
 305+ E9AA             >//              Dictionary part
 305+ E9AA             >
 305+ E9AA             >                org     Dict_Ptr
 305+ 7667             >
 305+ 7667 A8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 305+ 7669             >
 305+ 7669             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 305+ 7669 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 305+ 766C             >
 305+ 766C             >
 305+ 766C             >                endif           ; ok        // for other definitions it "points" the correct handler
 305+ 766C             >                // Use of "; ok" to suppress "warning[fwdref]"
 305+ 766C             >
 305+ 766C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 306+ 766C 2B 69                        dw      DUP                     // dup
 307+ 766E 4B 76                        dw      PLUS_MINUS              // +-
 308+ 7670 52 68                        dw      EXIT                    // ;
 309+ 7672
 310+ 7672              //  ______________________________________________________________________
 311+ 7672              //
 312+ 7672              // dabs         d1 -- d2
 313+ 7672                              Colon_Def DABS, "DABS", is_normal
 313+ 7672             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 313+ 7672             >
 313+ 7672             >Dict_Ptr        defl    $
 313+ 7672             >
 313+ 7672             >//              ______________________________________________________________________
 313+ 7672             >//              Heap part
 313+ 7672             >
 313+ 7672             >
 313+ 7672             >                org     (Heap_Ptr & $1FFF) + $E000
 313+ E9AA             >
 313+ E9AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 313+ E9AA             >Latest_Definition defl  Heap_Ptr
 313+ E9AA             >
 313+ E9AA             >                // dummy db directives used to calculate length of namec
 313+ E9AA 44 41 42 53 >                db      "DABS"
 313+ E9AE             >len_NFA         defl    $ - temp_NFA
 313+ E9AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 313+ E9AA             >
 313+ E9AA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 313+ E9AB 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 313+ E9AF             >                org     $-1                 // alter last byte of Name just above to set
 313+ E9AE D3          >                db      {b $} | END_BIT     // msb as name end
 313+ E9AF             >
 313+ E9AF A2 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 313+ E9B1             >Prev_Ptr        defl    Heap_Ptr
 313+ E9B1             >
 313+ E9B1             >mirror_Ptr      defl    $
 313+ E9B1             >
 313+ E9B1 74 76       >                dw      Dict_Ptr + 2        // xt
 313+ E9B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 313+ E9B3             >
 313+ E9B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 313+ E9B3             >
 313+ E9B3             >//              ______________________________________________________________________
 313+ E9B3             >//              Dictionary part
 313+ E9B3             >
 313+ E9B3             >                org     Dict_Ptr
 313+ 7672             >
 313+ 7672 B1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 313+ 7674             >
 313+ 7674             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 313+ 7674 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 313+ 7677             >
 313+ 7677             >
 313+ 7677             >                endif           ; ok        // for other definitions it "points" the correct handler
 313+ 7677             >                // Use of "; ok" to suppress "warning[fwdref]"
 313+ 7677             >
 313+ 7677             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 314+ 7677 2B 69                        dw      DUP                     // dup
 315+ 7679 5A 76                        dw      DPLUS_MINUS             // d+-
 316+ 767B 52 68                        dw      EXIT                    // ;
 317+ 767D
 318+ 767D              //  ______________________________________________________________________
 319+ 767D              //
 320+ 767D              // m*           n1 n2 -- d
 321+ 767D              // multiply two integer giving a double
 322+ 767D                              Colon_Def MMUL, "M*", is_normal
 322+ 767D             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 322+ 767D             >
 322+ 767D             >Dict_Ptr        defl    $
 322+ 767D             >
 322+ 767D             >//              ______________________________________________________________________
 322+ 767D             >//              Heap part
 322+ 767D             >
 322+ 767D             >
 322+ 767D             >                org     (Heap_Ptr & $1FFF) + $E000
 322+ E9B3             >
 322+ E9B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ E9B3             >Latest_Definition defl  Heap_Ptr
 322+ E9B3             >
 322+ E9B3             >                // dummy db directives used to calculate length of namec
 322+ E9B3 4D 2A       >                db      "M*"
 322+ E9B5             >len_NFA         defl    $ - temp_NFA
 322+ E9B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ E9B3             >
 322+ E9B3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ E9B4 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 322+ E9B6             >                org     $-1                 // alter last byte of Name just above to set
 322+ E9B5 AA          >                db      {b $} | END_BIT     // msb as name end
 322+ E9B6             >
 322+ E9B6 AA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 322+ E9B8             >Prev_Ptr        defl    Heap_Ptr
 322+ E9B8             >
 322+ E9B8             >mirror_Ptr      defl    $
 322+ E9B8             >
 322+ E9B8 7F 76       >                dw      Dict_Ptr + 2        // xt
 322+ E9BA             >Heap_Ptr        defl    $ - $E000           // save current HP
 322+ E9BA             >
 322+ E9BA             >Current_HP      defl  $ - $E000             // used to set HP once!
 322+ E9BA             >
 322+ E9BA             >//              ______________________________________________________________________
 322+ E9BA             >//              Dictionary part
 322+ E9BA             >
 322+ E9BA             >                org     Dict_Ptr
 322+ 767D             >
 322+ 767D B8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 322+ 767F             >
 322+ 767F             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 767F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 7682             >
 322+ 7682             >
 322+ 7682             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 7682             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 7682             >
 322+ 7682             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 7682 67 69 2A 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 323+ 7686 5C 68
 324+ 7688 69 76 24 69                  dw      ABS_OP, SWAP            // abs swap
 325+ 768C 69 76 B1 67                  dw      ABS_OP, UM_MUL          // abs um*
 326+ 7690 67 68 5A 76                  dw      R_TO, DPLUS_MINUS       // r> d+-
 327+ 7694 52 68                        dw      EXIT                    // ;
 328+ 7696
 329+ 7696              //  ______________________________________________________________________
 330+ 7696              //
 331+ 7696              // sm/rem       d n -- q r
 332+ 7696              // Symmetric division: divides a double into n giving quotient q and remainder r
 333+ 7696              // the remainder has the sign of d.
 334+ 7696                              Colon_Def SMDIVM, "SM/REM", is_normal
 334+ 7696             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 334+ 7696             >
 334+ 7696             >Dict_Ptr        defl    $
 334+ 7696             >
 334+ 7696             >//              ______________________________________________________________________
 334+ 7696             >//              Heap part
 334+ 7696             >
 334+ 7696             >
 334+ 7696             >                org     (Heap_Ptr & $1FFF) + $E000
 334+ E9BA             >
 334+ E9BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ E9BA             >Latest_Definition defl  Heap_Ptr
 334+ E9BA             >
 334+ E9BA             >                // dummy db directives used to calculate length of namec
 334+ E9BA 53 4D 2F 52 >                db      "SM/REM"
 334+ E9BE 45 4D       >
 334+ E9C0             >len_NFA         defl    $ - temp_NFA
 334+ E9C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ E9BA             >
 334+ E9BA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ E9BB 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 334+ E9BF 45 4D       >
 334+ E9C1             >                org     $-1                 // alter last byte of Name just above to set
 334+ E9C0 CD          >                db      {b $} | END_BIT     // msb as name end
 334+ E9C1             >
 334+ E9C1 B3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 334+ E9C3             >Prev_Ptr        defl    Heap_Ptr
 334+ E9C3             >
 334+ E9C3             >mirror_Ptr      defl    $
 334+ E9C3             >
 334+ E9C3 98 76       >                dw      Dict_Ptr + 2        // xt
 334+ E9C5             >Heap_Ptr        defl    $ - $E000           // save current HP
 334+ E9C5             >
 334+ E9C5             >Current_HP      defl  $ - $E000             // used to set HP once!
 334+ E9C5             >
 334+ E9C5             >//              ______________________________________________________________________
 334+ E9C5             >//              Dictionary part
 334+ E9C5             >
 334+ E9C5             >                org     Dict_Ptr
 334+ 7696             >
 334+ 7696 C3 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 334+ 7698             >
 334+ 7698             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 7698 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 334+ 769B             >
 334+ 769B             >
 334+ 769B             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 769B             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 769B             >
 334+ 769B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 769B 07 69 5C 68                  dw      OVER, TO_R, TO_R        // over >r >r
 335+ 769F 5C 68
 336+ 76A1 74 76 72 68                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 336+ 76A5 69 76
 337+ 76A7 D9 67                        dw      UMDIVMOD                // um/mod
 338+ 76A9 67 68                        dw      R_TO                    // r>
 339+ 76AB 72 68 2A 68                  dw      R_OP, XOR_OP            // r xor
 340+ 76AF 4B 76 24 69                  dw      PLUS_MINUS, SWAP        // +- swap
 341+ 76B3 67 68                        dw      R_TO                    // r>
 342+ 76B5 4B 76 24 69                  dw      PLUS_MINUS, SWAP        // +- swap
 343+ 76B9 52 68                        dw      EXIT                    // ;
 344+ 76BB
 345+ 76BB              //  ______________________________________________________________________
 346+ 76BB              //
 347+ 76BB              // fm/mod       d n -- q r
 348+ 76BB              // Floored division: divides a double into n giving quotient q and remainder r
 349+ 76BB              // the remainder has the sign of d.
 350+ 76BB                              Colon_Def FMDIVM, "FM/MOD", is_normal
 350+ 76BB             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 350+ 76BB             >
 350+ 76BB             >Dict_Ptr        defl    $
 350+ 76BB             >
 350+ 76BB             >//              ______________________________________________________________________
 350+ 76BB             >//              Heap part
 350+ 76BB             >
 350+ 76BB             >
 350+ 76BB             >                org     (Heap_Ptr & $1FFF) + $E000
 350+ E9C5             >
 350+ E9C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 350+ E9C5             >Latest_Definition defl  Heap_Ptr
 350+ E9C5             >
 350+ E9C5             >                // dummy db directives used to calculate length of namec
 350+ E9C5 46 4D 2F 4D >                db      "FM/MOD"
 350+ E9C9 4F 44       >
 350+ E9CB             >len_NFA         defl    $ - temp_NFA
 350+ E9CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 350+ E9C5             >
 350+ E9C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 350+ E9C6 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 350+ E9CA 4F 44       >
 350+ E9CC             >                org     $-1                 // alter last byte of Name just above to set
 350+ E9CB C4          >                db      {b $} | END_BIT     // msb as name end
 350+ E9CC             >
 350+ E9CC BA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 350+ E9CE             >Prev_Ptr        defl    Heap_Ptr
 350+ E9CE             >
 350+ E9CE             >mirror_Ptr      defl    $
 350+ E9CE             >
 350+ E9CE BD 76       >                dw      Dict_Ptr + 2        // xt
 350+ E9D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 350+ E9D0             >
 350+ E9D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 350+ E9D0             >
 350+ E9D0             >//              ______________________________________________________________________
 350+ E9D0             >//              Dictionary part
 350+ E9D0             >
 350+ E9D0             >                org     Dict_Ptr
 350+ 76BB             >
 350+ 76BB CE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 350+ 76BD             >
 350+ 76BD             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 350+ 76BD CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 350+ 76C0             >
 350+ 76C0             >
 350+ 76C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 350+ 76C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 350+ 76C0             >
 350+ 76C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 351+ 76C0 2B 69 5C 68                  dw      DUP, TO_R               // dup >r
 352+ 76C4 98 76                        dw      SMDIVM
 353+ 76C6 07 69 2B 69                  dw      OVER, DUP
 354+ 76CA 77 68 77 68                  dw      ZEQUAL, ZEQUAL
 355+ 76CE 24 69 8A 68                  dw      SWAP, ZLESS
 356+ 76D2 72 68 8A 68                  dw      R_OP, ZLESS
 357+ 76D6 2A 68 0C 68                  dw      XOR_OP, AND_OP
 358+ 76DA F5 63                        dw      ZBRANCH
 359+ 76DC 10 00                        dw      Fm_Mod_Else - $
 360+ 76DE C5 68                        dw          ONE_SUBTRACT
 361+ 76E0 24 69 67 68                  dw          SWAP, R_TO
 362+ 76E4 A5 68 24 69                  dw          PLUS, SWAP
 363+ 76E8 E8 63                        dw      BRANCH
 364+ 76EA 06 00                        dw      Fm_Mod_Endif - $
 365+ 76EC              Fm_Mod_Else:
 366+ 76EC 67 68 10 69                  dw          R_TO, DROP
 367+ 76F0              Fm_Mod_Endif:
 368+ 76F0 52 68                        dw      EXIT
 369+ 76F2              //              dw      TWO_DUP                 // 2dup
 370+ 76F2              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 371+ 76F2              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 372+ 76F2              //              dw      UMDIVMOD                // um/mod
 373+ 76F2              //              dw      SWAP                    // swap
 374+ 76F2              //              dw      II, ZLESS               // i'
 375+ 76F2              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 376+ 76F2              //              dw      R_TO                    // r>
 377+ 76F2              //              dw      PLUS_MINUS, SWAP        // +- swap
 378+ 76F2              //              dw      R_OP                    // r@
 379+ 76F2              //              dw      ZLESS                   // i'
 380+ 76F2              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 381+ 76F2              //              dw      R_TO                    // r>
 382+ 76F2              //              dw      PLUS_MINUS              // +- swap
 383+ 76F2              //              dw      EXIT                    // ;
 384+ 76F2
 385+ 76F2              //  ______________________________________________________________________
 386+ 76F2              //
 387+ 76F2              // m/mod        d n -- q r
 388+ 76F2              // multiply two integer giving a double
 389+ 76F2                              Colon_Def MDIVM, "M/MOD", is_normal
 389+ 76F2             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 389+ 76F2             >
 389+ 76F2             >Dict_Ptr        defl    $
 389+ 76F2             >
 389+ 76F2             >//              ______________________________________________________________________
 389+ 76F2             >//              Heap part
 389+ 76F2             >
 389+ 76F2             >
 389+ 76F2             >                org     (Heap_Ptr & $1FFF) + $E000
 389+ E9D0             >
 389+ E9D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 389+ E9D0             >Latest_Definition defl  Heap_Ptr
 389+ E9D0             >
 389+ E9D0             >                // dummy db directives used to calculate length of namec
 389+ E9D0 4D 2F 4D 4F >                db      "M/MOD"
 389+ E9D4 44          >
 389+ E9D5             >len_NFA         defl    $ - temp_NFA
 389+ E9D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 389+ E9D0             >
 389+ E9D0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 389+ E9D1 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 389+ E9D5 44          >
 389+ E9D6             >                org     $-1                 // alter last byte of Name just above to set
 389+ E9D5 C4          >                db      {b $} | END_BIT     // msb as name end
 389+ E9D6             >
 389+ E9D6 C5 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 389+ E9D8             >Prev_Ptr        defl    Heap_Ptr
 389+ E9D8             >
 389+ E9D8             >mirror_Ptr      defl    $
 389+ E9D8             >
 389+ E9D8 F4 76       >                dw      Dict_Ptr + 2        // xt
 389+ E9DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 389+ E9DA             >
 389+ E9DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 389+ E9DA             >
 389+ E9DA             >//              ______________________________________________________________________
 389+ E9DA             >//              Dictionary part
 389+ E9DA             >
 389+ E9DA             >                org     Dict_Ptr
 389+ 76F2             >
 389+ 76F2 D8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 389+ 76F4             >
 389+ 76F4             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 389+ 76F4 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 389+ 76F7             >
 389+ 76F7             >
 389+ 76F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 389+ 76F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 389+ 76F7             >
 389+ 76F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 390+ 76F7 98 76                        dw      SMDIVM
 391+ 76F9 52 68                        dw      EXIT                    // ;
 392+ 76FB
 393+ 76FB              //  ______________________________________________________________________
 394+ 76FB              //
 395+ 76FB              // m/           d n -- q
 396+ 76FB              // multiply two integer giving a double
 397+ 76FB                              Colon_Def MDIV, "M/", is_normal
 397+ 76FB             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 397+ 76FB             >
 397+ 76FB             >Dict_Ptr        defl    $
 397+ 76FB             >
 397+ 76FB             >//              ______________________________________________________________________
 397+ 76FB             >//              Heap part
 397+ 76FB             >
 397+ 76FB             >
 397+ 76FB             >                org     (Heap_Ptr & $1FFF) + $E000
 397+ E9DA             >
 397+ E9DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 397+ E9DA             >Latest_Definition defl  Heap_Ptr
 397+ E9DA             >
 397+ E9DA             >                // dummy db directives used to calculate length of namec
 397+ E9DA 4D 2F       >                db      "M/"
 397+ E9DC             >len_NFA         defl    $ - temp_NFA
 397+ E9DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 397+ E9DA             >
 397+ E9DA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 397+ E9DB 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 397+ E9DD             >                org     $-1                 // alter last byte of Name just above to set
 397+ E9DC AF          >                db      {b $} | END_BIT     // msb as name end
 397+ E9DD             >
 397+ E9DD D0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 397+ E9DF             >Prev_Ptr        defl    Heap_Ptr
 397+ E9DF             >
 397+ E9DF             >mirror_Ptr      defl    $
 397+ E9DF             >
 397+ E9DF FD 76       >                dw      Dict_Ptr + 2        // xt
 397+ E9E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 397+ E9E1             >
 397+ E9E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 397+ E9E1             >
 397+ E9E1             >//              ______________________________________________________________________
 397+ E9E1             >//              Dictionary part
 397+ E9E1             >
 397+ E9E1             >                org     Dict_Ptr
 397+ 76FB             >
 397+ 76FB DF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 397+ 76FD             >
 397+ 76FD             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 397+ 76FD CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 397+ 7700             >
 397+ 7700             >
 397+ 7700             >                endif           ; ok        // for other definitions it "points" the correct handler
 397+ 7700             >                // Use of "; ok" to suppress "warning[fwdref]"
 397+ 7700             >
 397+ 7700             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 398+ 7700 F4 76 15 69                  dw      MDIVM, NIP
 399+ 7704 52 68                        dw      EXIT                    // ;
 400+ 7706
 401+ 7706              //  ______________________________________________________________________
 402+ 7706              //
 403+ 7706              // *            n1 n2 -- n3
 404+ 7706              // multiply two integer
 405+ 7706                              Colon_Def MUL, "*", is_normal
 405+ 7706             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 405+ 7706             >
 405+ 7706             >Dict_Ptr        defl    $
 405+ 7706             >
 405+ 7706             >//              ______________________________________________________________________
 405+ 7706             >//              Heap part
 405+ 7706             >
 405+ 7706             >
 405+ 7706             >                org     (Heap_Ptr & $1FFF) + $E000
 405+ E9E1             >
 405+ E9E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ E9E1             >Latest_Definition defl  Heap_Ptr
 405+ E9E1             >
 405+ E9E1             >                // dummy db directives used to calculate length of namec
 405+ E9E1 2A          >                db      "*"
 405+ E9E2             >len_NFA         defl    $ - temp_NFA
 405+ E9E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ E9E1             >
 405+ E9E1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ E9E2 2A          >                db      "*"               // name string in 7-bit ascii, but
 405+ E9E3             >                org     $-1                 // alter last byte of Name just above to set
 405+ E9E2 AA          >                db      {b $} | END_BIT     // msb as name end
 405+ E9E3             >
 405+ E9E3 DA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 405+ E9E5             >Prev_Ptr        defl    Heap_Ptr
 405+ E9E5             >
 405+ E9E5             >mirror_Ptr      defl    $
 405+ E9E5             >
 405+ E9E5 08 77       >                dw      Dict_Ptr + 2        // xt
 405+ E9E7             >Heap_Ptr        defl    $ - $E000           // save current HP
 405+ E9E7             >
 405+ E9E7             >Current_HP      defl  $ - $E000             // used to set HP once!
 405+ E9E7             >
 405+ E9E7             >//              ______________________________________________________________________
 405+ E9E7             >//              Dictionary part
 405+ E9E7             >
 405+ E9E7             >                org     Dict_Ptr
 405+ 7706             >
 405+ 7706 E5 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 405+ 7708             >
 405+ 7708             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 7708 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 770B             >
 405+ 770B             >
 405+ 770B             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 770B             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 770B             >
 405+ 770B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 770B 7F 76 10 69                  dw      MMUL, DROP              // m* drop
 407+ 770F 52 68                        dw      EXIT                    // ;
 408+ 7711
 409+ 7711              //  ______________________________________________________________________
 410+ 7711              //
 411+ 7711              // /mod         n1 n2 -- n3 n4
 412+ 7711              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 413+ 7711              // The remainder has the sign of n1
 414+ 7711                              Colon_Def DIVMOD, "/MOD", is_normal
 414+ 7711             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 414+ 7711             >
 414+ 7711             >Dict_Ptr        defl    $
 414+ 7711             >
 414+ 7711             >//              ______________________________________________________________________
 414+ 7711             >//              Heap part
 414+ 7711             >
 414+ 7711             >
 414+ 7711             >                org     (Heap_Ptr & $1FFF) + $E000
 414+ E9E7             >
 414+ E9E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 414+ E9E7             >Latest_Definition defl  Heap_Ptr
 414+ E9E7             >
 414+ E9E7             >                // dummy db directives used to calculate length of namec
 414+ E9E7 2F 4D 4F 44 >                db      "/MOD"
 414+ E9EB             >len_NFA         defl    $ - temp_NFA
 414+ E9EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 414+ E9E7             >
 414+ E9E7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 414+ E9E8 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 414+ E9EC             >                org     $-1                 // alter last byte of Name just above to set
 414+ E9EB C4          >                db      {b $} | END_BIT     // msb as name end
 414+ E9EC             >
 414+ E9EC E1 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 414+ E9EE             >Prev_Ptr        defl    Heap_Ptr
 414+ E9EE             >
 414+ E9EE             >mirror_Ptr      defl    $
 414+ E9EE             >
 414+ E9EE 13 77       >                dw      Dict_Ptr + 2        // xt
 414+ E9F0             >Heap_Ptr        defl    $ - $E000           // save current HP
 414+ E9F0             >
 414+ E9F0             >Current_HP      defl  $ - $E000             // used to set HP once!
 414+ E9F0             >
 414+ E9F0             >//              ______________________________________________________________________
 414+ E9F0             >//              Dictionary part
 414+ E9F0             >
 414+ E9F0             >                org     Dict_Ptr
 414+ 7711             >
 414+ 7711 EE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 414+ 7713             >
 414+ 7713             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 414+ 7713 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 414+ 7716             >
 414+ 7716             >
 414+ 7716             >                endif           ; ok        // for other definitions it "points" the correct handler
 414+ 7716             >                // Use of "; ok" to suppress "warning[fwdref]"
 414+ 7716             >
 414+ 7716             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 415+ 7716 5C 68 ED 6B                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 415+ 771A 67 68
 416+ 771C F4 76                        dw      MDIVM                   // m/mod
 417+ 771E 52 68                        dw      EXIT                    // ;
 418+ 7720
 419+ 7720              //  ______________________________________________________________________
 420+ 7720              //
 421+ 7720              // /            n1 n2 -- n3
 422+ 7720              // division
 423+ 7720                              Colon_Def DIV, "/", is_normal
 423+ 7720             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 423+ 7720             >
 423+ 7720             >Dict_Ptr        defl    $
 423+ 7720             >
 423+ 7720             >//              ______________________________________________________________________
 423+ 7720             >//              Heap part
 423+ 7720             >
 423+ 7720             >
 423+ 7720             >                org     (Heap_Ptr & $1FFF) + $E000
 423+ E9F0             >
 423+ E9F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 423+ E9F0             >Latest_Definition defl  Heap_Ptr
 423+ E9F0             >
 423+ E9F0             >                // dummy db directives used to calculate length of namec
 423+ E9F0 2F          >                db      "/"
 423+ E9F1             >len_NFA         defl    $ - temp_NFA
 423+ E9F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 423+ E9F0             >
 423+ E9F0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 423+ E9F1 2F          >                db      "/"               // name string in 7-bit ascii, but
 423+ E9F2             >                org     $-1                 // alter last byte of Name just above to set
 423+ E9F1 AF          >                db      {b $} | END_BIT     // msb as name end
 423+ E9F2             >
 423+ E9F2 E7 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 423+ E9F4             >Prev_Ptr        defl    Heap_Ptr
 423+ E9F4             >
 423+ E9F4             >mirror_Ptr      defl    $
 423+ E9F4             >
 423+ E9F4 22 77       >                dw      Dict_Ptr + 2        // xt
 423+ E9F6             >Heap_Ptr        defl    $ - $E000           // save current HP
 423+ E9F6             >
 423+ E9F6             >Current_HP      defl  $ - $E000             // used to set HP once!
 423+ E9F6             >
 423+ E9F6             >//              ______________________________________________________________________
 423+ E9F6             >//              Dictionary part
 423+ E9F6             >
 423+ E9F6             >                org     Dict_Ptr
 423+ 7720             >
 423+ 7720 F4 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 423+ 7722             >
 423+ 7722             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 423+ 7722 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 423+ 7725             >
 423+ 7725             >
 423+ 7725             >                endif           ; ok        // for other definitions it "points" the correct handler
 423+ 7725             >                // Use of "; ok" to suppress "warning[fwdref]"
 423+ 7725             >
 423+ 7725             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 424+ 7725 13 77 15 69                  dw      DIVMOD, NIP             // /mod nip
 425+ 7729 52 68                        dw      EXIT                    // ;
 426+ 772B
 427+ 772B              //  ______________________________________________________________________
 428+ 772B              //
 429+ 772B              // mod          n1 n2 -- n3
 430+ 772B                              Colon_Def MOD, "MOD", is_normal
 430+ 772B             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 430+ 772B             >
 430+ 772B             >Dict_Ptr        defl    $
 430+ 772B             >
 430+ 772B             >//              ______________________________________________________________________
 430+ 772B             >//              Heap part
 430+ 772B             >
 430+ 772B             >
 430+ 772B             >                org     (Heap_Ptr & $1FFF) + $E000
 430+ E9F6             >
 430+ E9F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 430+ E9F6             >Latest_Definition defl  Heap_Ptr
 430+ E9F6             >
 430+ E9F6             >                // dummy db directives used to calculate length of namec
 430+ E9F6 4D 4F 44    >                db      "MOD"
 430+ E9F9             >len_NFA         defl    $ - temp_NFA
 430+ E9F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 430+ E9F6             >
 430+ E9F6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 430+ E9F7 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 430+ E9FA             >                org     $-1                 // alter last byte of Name just above to set
 430+ E9F9 C4          >                db      {b $} | END_BIT     // msb as name end
 430+ E9FA             >
 430+ E9FA F0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 430+ E9FC             >Prev_Ptr        defl    Heap_Ptr
 430+ E9FC             >
 430+ E9FC             >mirror_Ptr      defl    $
 430+ E9FC             >
 430+ E9FC 2D 77       >                dw      Dict_Ptr + 2        // xt
 430+ E9FE             >Heap_Ptr        defl    $ - $E000           // save current HP
 430+ E9FE             >
 430+ E9FE             >Current_HP      defl  $ - $E000             // used to set HP once!
 430+ E9FE             >
 430+ E9FE             >//              ______________________________________________________________________
 430+ E9FE             >//              Dictionary part
 430+ E9FE             >
 430+ E9FE             >                org     Dict_Ptr
 430+ 772B             >
 430+ 772B FC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 430+ 772D             >
 430+ 772D             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 430+ 772D CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 430+ 7730             >
 430+ 7730             >
 430+ 7730             >                endif           ; ok        // for other definitions it "points" the correct handler
 430+ 7730             >                // Use of "; ok" to suppress "warning[fwdref]"
 430+ 7730             >
 430+ 7730             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 431+ 7730 13 77 10 69                  dw      DIVMOD, DROP            // /mod drop
 432+ 7734 52 68                        dw      EXIT                    // ;
 433+ 7736
 434+ 7736              //  ______________________________________________________________________
 435+ 7736              //
 436+ 7736              // */mod        n1 n2 n3 -- n4 n5
 437+ 7736              // leaves the quotient n5 and the remainder n4 of the operation
 438+ 7736              // (n1 * n2) / n3. The intermediate passage through a double number
 439+ 7736              // avoids loss of precision
 440+ 7736                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 440+ 7736             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 440+ 7736             >
 440+ 7736             >Dict_Ptr        defl    $
 440+ 7736             >
 440+ 7736             >//              ______________________________________________________________________
 440+ 7736             >//              Heap part
 440+ 7736             >
 440+ 7736             >
 440+ 7736             >                org     (Heap_Ptr & $1FFF) + $E000
 440+ E9FE             >
 440+ E9FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 440+ E9FE             >Latest_Definition defl  Heap_Ptr
 440+ E9FE             >
 440+ E9FE             >                // dummy db directives used to calculate length of namec
 440+ E9FE 2A 2F 4D 4F >                db      "*/MOD"
 440+ EA02 44          >
 440+ EA03             >len_NFA         defl    $ - temp_NFA
 440+ EA03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 440+ E9FE             >
 440+ E9FE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 440+ E9FF 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 440+ EA03 44          >
 440+ EA04             >                org     $-1                 // alter last byte of Name just above to set
 440+ EA03 C4          >                db      {b $} | END_BIT     // msb as name end
 440+ EA04             >
 440+ EA04 F6 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 440+ EA06             >Prev_Ptr        defl    Heap_Ptr
 440+ EA06             >
 440+ EA06             >mirror_Ptr      defl    $
 440+ EA06             >
 440+ EA06 38 77       >                dw      Dict_Ptr + 2        // xt
 440+ EA08             >Heap_Ptr        defl    $ - $E000           // save current HP
 440+ EA08             >
 440+ EA08             >Current_HP      defl  $ - $E000             // used to set HP once!
 440+ EA08             >
 440+ EA08             >//              ______________________________________________________________________
 440+ EA08             >//              Dictionary part
 440+ EA08             >
 440+ EA08             >                org     Dict_Ptr
 440+ 7736             >
 440+ 7736 06 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 440+ 7738             >
 440+ 7738             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 440+ 7738 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 440+ 773B             >
 440+ 773B             >
 440+ 773B             >                endif           ; ok        // for other definitions it "points" the correct handler
 440+ 773B             >                // Use of "; ok" to suppress "warning[fwdref]"
 440+ 773B             >
 440+ 773B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 441+ 773B 5C 68 7F 76                  dw      TO_R, MMUL              // >r  m*
 442+ 773F 67 68 F4 76                  dw      R_TO, MDIVM             // r>  m/mod
 443+ 7743 52 68                        dw      EXIT                    // ;
 444+ 7745
 445+ 7745              //  ______________________________________________________________________
 446+ 7745              //
 447+ 7745              // */          n1 n2 n3 -- n4
 448+ 7745              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 449+ 7745                              Colon_Def MUL_DIV, "*/", is_normal
 449+ 7745             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 449+ 7745             >
 449+ 7745             >Dict_Ptr        defl    $
 449+ 7745             >
 449+ 7745             >//              ______________________________________________________________________
 449+ 7745             >//              Heap part
 449+ 7745             >
 449+ 7745             >
 449+ 7745             >                org     (Heap_Ptr & $1FFF) + $E000
 449+ EA08             >
 449+ EA08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 449+ EA08             >Latest_Definition defl  Heap_Ptr
 449+ EA08             >
 449+ EA08             >                // dummy db directives used to calculate length of namec
 449+ EA08 2A 2F       >                db      "*/"
 449+ EA0A             >len_NFA         defl    $ - temp_NFA
 449+ EA0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 449+ EA08             >
 449+ EA08 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 449+ EA09 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 449+ EA0B             >                org     $-1                 // alter last byte of Name just above to set
 449+ EA0A AF          >                db      {b $} | END_BIT     // msb as name end
 449+ EA0B             >
 449+ EA0B FE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 449+ EA0D             >Prev_Ptr        defl    Heap_Ptr
 449+ EA0D             >
 449+ EA0D             >mirror_Ptr      defl    $
 449+ EA0D             >
 449+ EA0D 47 77       >                dw      Dict_Ptr + 2        // xt
 449+ EA0F             >Heap_Ptr        defl    $ - $E000           // save current HP
 449+ EA0F             >
 449+ EA0F             >Current_HP      defl  $ - $E000             // used to set HP once!
 449+ EA0F             >
 449+ EA0F             >//              ______________________________________________________________________
 449+ EA0F             >//              Dictionary part
 449+ EA0F             >
 449+ EA0F             >                org     Dict_Ptr
 449+ 7745             >
 449+ 7745 0D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 449+ 7747             >
 449+ 7747             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 449+ 7747 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 449+ 774A             >
 449+ 774A             >
 449+ 774A             >                endif           ; ok        // for other definitions it "points" the correct handler
 449+ 774A             >                // Use of "; ok" to suppress "warning[fwdref]"
 449+ 774A             >
 449+ 774A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 450+ 774A 38 77                        dw     MUL_DIV_MOD              // */mod
 451+ 774C 15 69                        dw     NIP                      // nip
 452+ 774E 52 68                        dw     EXIT                     // ;
 453+ 7750
 454+ 7750
 455+ 7750              //  ______________________________________________________________________
 456+ 7750              //
 457+ 7750              // m/mod        ud1 u2 -- u3 ud4
 458+ 7750              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 459+ 7750              // All terms are unsigned.
 460+ 7750              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 461+ 7750              //              dw      TO_R                    // >r           ( ud1 )
 462+ 7750              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 463+ 7750              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 464+ 7750              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 465+ 7750              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 466+ 7750              //              dw      EXIT                    // ;
 467+ 7750
 468+ 7750              //  ______________________________________________________________________
 469+ 7750              //
 470+ 7750              // (line)       n1 n2 -- a b
 471+ 7750              // sends the line n1 of block n2 to the disk buffer.
 472+ 7750              // it returns the address a and ca counter b = C/L meaning a whole line.
 473+ 7750                              Colon_Def CLINE, "(LINE)", is_normal
 473+ 7750             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 473+ 7750             >
 473+ 7750             >Dict_Ptr        defl    $
 473+ 7750             >
 473+ 7750             >//              ______________________________________________________________________
 473+ 7750             >//              Heap part
 473+ 7750             >
 473+ 7750             >
 473+ 7750             >                org     (Heap_Ptr & $1FFF) + $E000
 473+ EA0F             >
 473+ EA0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 473+ EA0F             >Latest_Definition defl  Heap_Ptr
 473+ EA0F             >
 473+ EA0F             >                // dummy db directives used to calculate length of namec
 473+ EA0F 28 4C 49 4E >                db      "(LINE)"
 473+ EA13 45 29       >
 473+ EA15             >len_NFA         defl    $ - temp_NFA
 473+ EA15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 473+ EA0F             >
 473+ EA0F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 473+ EA10 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 473+ EA14 45 29       >
 473+ EA16             >                org     $-1                 // alter last byte of Name just above to set
 473+ EA15 A9          >                db      {b $} | END_BIT     // msb as name end
 473+ EA16             >
 473+ EA16 08 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 473+ EA18             >Prev_Ptr        defl    Heap_Ptr
 473+ EA18             >
 473+ EA18             >mirror_Ptr      defl    $
 473+ EA18             >
 473+ EA18 52 77       >                dw      Dict_Ptr + 2        // xt
 473+ EA1A             >Heap_Ptr        defl    $ - $E000           // save current HP
 473+ EA1A             >
 473+ EA1A             >Current_HP      defl  $ - $E000             // used to set HP once!
 473+ EA1A             >
 473+ EA1A             >//              ______________________________________________________________________
 473+ EA1A             >//              Dictionary part
 473+ EA1A             >
 473+ EA1A             >                org     Dict_Ptr
 473+ 7750             >
 473+ 7750 18 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 473+ 7752             >
 473+ 7752             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 473+ 7752 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 473+ 7755             >
 473+ 7755             >
 473+ 7755             >                endif           ; ok        // for other definitions it "points" the correct handler
 473+ 7755             >                // Use of "; ok" to suppress "warning[fwdref]"
 473+ 7755             >
 473+ 7755             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 474+ 7755 5C 68                        dw      TO_R                    // >r
 475+ 7757 AB 6A                        dw      CL                      // c/l
 476+ 7759 B2 6A 38 77                  dw      BBUF, MUL_DIV_MOD       // */mod
 477+ 775D 67 68                        dw      R_TO                    // r>
 478+ 775F B9 6A 08 77                  dw      BSCR, MUL, PLUS         // b/scr * +
 478+ 7763 A5 68
 479+ 7765 63 79                        dw      BLOCK                   // block   ( forward )
 480+ 7767 A5 68                        dw      PLUS                    // +
 481+ 7769 AB 6A                        dw      CL                      // c/l
 482+ 776B 52 68                        dw      EXIT                    // ;
 483+ 776D
 484+ 776D              //  ______________________________________________________________________
 485+ 776D              //
 486+ 776D              // .line        n1 n2 --
 487+ 776D              // Sends to output line  n1  of screen n2.
 488+ 776D                              Colon_Def DOT_LINE, ".LINE", is_normal
 488+ 776D             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 488+ 776D             >
 488+ 776D             >Dict_Ptr        defl    $
 488+ 776D             >
 488+ 776D             >//              ______________________________________________________________________
 488+ 776D             >//              Heap part
 488+ 776D             >
 488+ 776D             >
 488+ 776D             >                org     (Heap_Ptr & $1FFF) + $E000
 488+ EA1A             >
 488+ EA1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 488+ EA1A             >Latest_Definition defl  Heap_Ptr
 488+ EA1A             >
 488+ EA1A             >                // dummy db directives used to calculate length of namec
 488+ EA1A 2E 4C 49 4E >                db      ".LINE"
 488+ EA1E 45          >
 488+ EA1F             >len_NFA         defl    $ - temp_NFA
 488+ EA1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 488+ EA1A             >
 488+ EA1A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 488+ EA1B 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 488+ EA1F 45          >
 488+ EA20             >                org     $-1                 // alter last byte of Name just above to set
 488+ EA1F C5          >                db      {b $} | END_BIT     // msb as name end
 488+ EA20             >
 488+ EA20 0F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 488+ EA22             >Prev_Ptr        defl    Heap_Ptr
 488+ EA22             >
 488+ EA22             >mirror_Ptr      defl    $
 488+ EA22             >
 488+ EA22 6F 77       >                dw      Dict_Ptr + 2        // xt
 488+ EA24             >Heap_Ptr        defl    $ - $E000           // save current HP
 488+ EA24             >
 488+ EA24             >Current_HP      defl  $ - $E000             // used to set HP once!
 488+ EA24             >
 488+ EA24             >//              ______________________________________________________________________
 488+ EA24             >//              Dictionary part
 488+ EA24             >
 488+ EA24             >                org     Dict_Ptr
 488+ 776D             >
 488+ 776D 22 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 488+ 776F             >
 488+ 776F             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 488+ 776F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 488+ 7772             >
 488+ 7772             >
 488+ 7772             >                endif           ; ok        // for other definitions it "points" the correct handler
 488+ 7772             >                // Use of "; ok" to suppress "warning[fwdref]"
 488+ 7772             >
 488+ 7772             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 489+ 7772 52 77 9C 6F                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 489+ 7776 85 6F
 490+ 7778 52 68                        dw      EXIT                    // ;
 491+ 777A
 492+ 777A              //  ______________________________________________________________________
 493+ 777A              //
 494+ 777A              // message       n1 n2 --
 495+ 777A              // prints error message to current channel.
 496+ 777A              // if WARNING is 0, prints "MSG#n".
 497+ 777A              // if WARNING is 1, prints line n of screen 4.
 498+ 777A              // if WARNING is -1, see ERROR
 499+ 777A              // value can be negative or beyond block 4.
 500+ 777A                              Colon_Def MESSAGE, "MESSAGE", is_normal
 500+ 777A             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 500+ 777A             >
 500+ 777A             >Dict_Ptr        defl    $
 500+ 777A             >
 500+ 777A             >//              ______________________________________________________________________
 500+ 777A             >//              Heap part
 500+ 777A             >
 500+ 777A             >
 500+ 777A             >                org     (Heap_Ptr & $1FFF) + $E000
 500+ EA24             >
 500+ EA24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 500+ EA24             >Latest_Definition defl  Heap_Ptr
 500+ EA24             >
 500+ EA24             >                // dummy db directives used to calculate length of namec
 500+ EA24 4D 45 53 53 >                db      "MESSAGE"
 500+ EA28 41 47 45    >
 500+ EA2B             >len_NFA         defl    $ - temp_NFA
 500+ EA2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 500+ EA24             >
 500+ EA24 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 500+ EA25 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 500+ EA29 41 47 45    >
 500+ EA2C             >                org     $-1                 // alter last byte of Name just above to set
 500+ EA2B C5          >                db      {b $} | END_BIT     // msb as name end
 500+ EA2C             >
 500+ EA2C 1A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 500+ EA2E             >Prev_Ptr        defl    Heap_Ptr
 500+ EA2E             >
 500+ EA2E             >mirror_Ptr      defl    $
 500+ EA2E             >
 500+ EA2E 7C 77       >                dw      Dict_Ptr + 2        // xt
 500+ EA30             >Heap_Ptr        defl    $ - $E000           // save current HP
 500+ EA30             >
 500+ EA30             >Current_HP      defl  $ - $E000             // used to set HP once!
 500+ EA30             >
 500+ EA30             >//              ______________________________________________________________________
 500+ EA30             >//              Dictionary part
 500+ EA30             >
 500+ EA30             >                org     Dict_Ptr
 500+ 777A             >
 500+ 777A 2E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 500+ 777C             >
 500+ 777C             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 500+ 777C CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 500+ 777F             >
 500+ 777F             >
 500+ 777F             >                endif           ; ok        // for other definitions it "points" the correct handler
 500+ 777F             >                // Use of "; ok" to suppress "warning[fwdref]"
 500+ 777F             >
 500+ 777F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 501+ 777F F2 6A 89 69                  dw      WARNING, FETCH          // warning @
 502+ 7783                                                              // if
 503+ 7783 F5 63                        dw      ZBRANCH
 504+ 7785 12 00                        dw      Message_Else - $
 505+ 7787 A3 63 20 00                  dw          LIT, 32, PLUS       //      32 +
 505+ 778B A5 68
 506+ 778D 8F 6A                        dw          TWO                 //      2
 507+ 778F 6F 77                        dw          DOT_LINE            //      .line
 508+ 7791 8A 6C                        dw          SPACE               //      space
 509+ 7793                                                              // else
 510+ 7793
 511+ 7793 E8 63                        dw      BRANCH
 512+ 7795 0B 00                        dw      Message_ENdif - $
 513+ 7797              Message_Else:
 514+ 7797 22 71                        dw          C_DOT_QUOTE         //      .( msg#)
 515+ 7799 04 6D 73 67                  db          4, "msg#"
 515+ 779D 23
 516+ 779E A1 7E                        dw          DOT                 //      .  ( forward )
 517+ 77A0              Message_ENdif:                                  // endif
 518+ 77A0 52 68                        dw      EXIT                    // ;
 519+ 77A2
 520+ 77A2
 521+ 77A2              //  ______________________________________________________________________
 522+ 77A2              //
 523+ 77A2              // device
 524+ 77A2                              Variable_Def DEVICE,   "DEVICE",   2
 524+ 77A2             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 524+ 77A2             >
 524+ 77A2             >Dict_Ptr        defl    $
 524+ 77A2             >
 524+ 77A2             >//              ______________________________________________________________________
 524+ 77A2             >//              Heap part
 524+ 77A2             >
 524+ 77A2             >
 524+ 77A2             >                org     (Heap_Ptr & $1FFF) + $E000
 524+ EA30             >
 524+ EA30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 524+ EA30             >Latest_Definition defl  Heap_Ptr
 524+ EA30             >
 524+ EA30             >                // dummy db directives used to calculate length of namec
 524+ EA30 44 45 56 49 >                db      "DEVICE"
 524+ EA34 43 45       >
 524+ EA36             >len_NFA         defl    $ - temp_NFA
 524+ EA36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 524+ EA30             >
 524+ EA30 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 524+ EA31 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 524+ EA35 43 45       >
 524+ EA37             >                org     $-1                 // alter last byte of Name just above to set
 524+ EA36 C5          >                db      {b $} | END_BIT     // msb as name end
 524+ EA37             >
 524+ EA37 24 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 524+ EA39             >Prev_Ptr        defl    Heap_Ptr
 524+ EA39             >
 524+ EA39             >mirror_Ptr      defl    $
 524+ EA39             >
 524+ EA39 A4 77       >                dw      Dict_Ptr + 2        // xt
 524+ EA3B             >Heap_Ptr        defl    $ - $E000           // save current HP
 524+ EA3B             >
 524+ EA3B             >Current_HP      defl  $ - $E000             // used to set HP once!
 524+ EA3B             >
 524+ EA3B             >//              ______________________________________________________________________
 524+ EA3B             >//              Dictionary part
 524+ EA3B             >
 524+ EA3B             >                org     Dict_Ptr
 524+ 77A2             >
 524+ 77A2 39 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 524+ 77A4             >
 524+ 77A4             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 524+ 77A4 CD 68 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 524+ 77A7             >
 524+ 77A7             >
 524+ 77A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 524+ 77A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 524+ 77A7             >
 524+ 77A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 77A7 02 00       >                dw      2
 525+ 77A9
 526+ 77A9              //  ______________________________________________________________________
 527+ 77A9
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
 123  77A9                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
   1+ 77A9              //  ______________________________________________________________________
   2+ 77A9              //
   3+ 77A9              //  next-opt.asm
   4+ 77A9              //
   5+ 77A9              //  ZX Spectrum Next - peculiar definitions
   6+ 77A9              //  ______________________________________________________________________
   7+ 77A9
   8+ 77A9              //  ______________________________________________________________________
   9+ 77A9              //
  10+ 77A9              // reg@         n -- b
  11+ 77A9              // read Next REGister n giving byte b
  12+ 77A9              //
  13+ 77A9              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 77A9              //              dw      LIT, $243B
  15+ 77A9              //              dw      PSTORE
  16+ 77A9              //              dw      LIT, $253B
  17+ 77A9              //              dw      PFETCH
  18+ 77A9              //              dw      EXIT
  19+ 77A9                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 77A9             >
  19+ 77A9             >Dict_Ptr        defl    $
  19+ 77A9             >
  19+ 77A9             >//              ______________________________________________________________________
  19+ 77A9             >//              Heap part
  19+ 77A9             >
  19+ 77A9             >
  19+ 77A9             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA3B             >
  19+ EA3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA3B             >Latest_Definition defl  Heap_Ptr
  19+ EA3B             >
  19+ EA3B             >                // dummy db directives used to calculate length of namec
  19+ EA3B 52 45 47 40 >                db      "REG@"
  19+ EA3F             >len_NFA         defl    $ - temp_NFA
  19+ EA3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA3B             >
  19+ EA3B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA3C 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA40             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA3F C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA40             >
  19+ EA40 30 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA42             >Prev_Ptr        defl    Heap_Ptr
  19+ EA42             >
  19+ EA42             >mirror_Ptr      defl    $
  19+ EA42             >
  19+ EA42 AB 77       >                dw      Dict_Ptr + 2        // xt
  19+ EA44             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA44             >
  19+ EA44             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA44             >
  19+ EA44             >//              ______________________________________________________________________
  19+ EA44             >//              Dictionary part
  19+ EA44             >
  19+ EA44             >                org     Dict_Ptr
  19+ 77A9             >
  19+ 77A9 42 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 77AB             >
  19+ 77AB             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 77AB ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 77AB ~           >
  19+ 77AB ~           >
  19+ 77AB             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 77AB             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 77AB             >
  19+ 77AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 77AB D9                           exx
  21+ 77AC 01 3B 24                     ld      bc, $243B
  22+ 77AF E1                           pop     hl
  23+ 77B0 ED 69                        out     (c), l
  24+ 77B2 04                           inc     b
  25+ 77B3 ED 68                        in      l, (c)
  26+ 77B5 E5                           push    hl
  27+ 77B6 D9                           exx
  28+ 77B7                              next
  28+ 77B7 DD E9       >                jp      (ix)
  29+ 77B9
  30+ 77B9
  31+ 77B9              //  ______________________________________________________________________
  32+ 77B9              //
  33+ 77B9              // reg!         b n --
  34+ 77B9              // write value b to Next REGister n
  35+ 77B9              //
  36+ 77B9              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 77B9              //              dw      LIT, $243B
  38+ 77B9              //              dw      PSTORE
  39+ 77B9              //              dw      LIT, $253B
  40+ 77B9              //              dw      PSTORE
  41+ 77B9              //              dw      EXIT
  42+ 77B9                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 77B9             >
  42+ 77B9             >Dict_Ptr        defl    $
  42+ 77B9             >
  42+ 77B9             >//              ______________________________________________________________________
  42+ 77B9             >//              Heap part
  42+ 77B9             >
  42+ 77B9             >
  42+ 77B9             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA44             >
  42+ EA44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA44             >Latest_Definition defl  Heap_Ptr
  42+ EA44             >
  42+ EA44             >                // dummy db directives used to calculate length of namec
  42+ EA44 52 45 47 21 >                db      "REG!"
  42+ EA48             >len_NFA         defl    $ - temp_NFA
  42+ EA48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA44             >
  42+ EA44 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA45 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA49             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA48 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA49             >
  42+ EA49 3B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA4B             >Prev_Ptr        defl    Heap_Ptr
  42+ EA4B             >
  42+ EA4B             >mirror_Ptr      defl    $
  42+ EA4B             >
  42+ EA4B BB 77       >                dw      Dict_Ptr + 2        // xt
  42+ EA4D             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA4D             >
  42+ EA4D             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA4D             >
  42+ EA4D             >//              ______________________________________________________________________
  42+ EA4D             >//              Dictionary part
  42+ EA4D             >
  42+ EA4D             >                org     Dict_Ptr
  42+ 77B9             >
  42+ 77B9 4B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 77BB             >
  42+ 77BB             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 77BB ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 77BB ~           >
  42+ 77BB ~           >
  42+ 77BB             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 77BB             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 77BB             >
  42+ 77BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 77BB D9                           exx
  44+ 77BC 01 3B 24                     ld      bc, $243B
  45+ 77BF E1                           pop     hl
  46+ 77C0 ED 69                        out     (c), l
  47+ 77C2 04                           inc     b
  48+ 77C3 E1                           pop     hl
  49+ 77C4 ED 69                        out     (c), l
  50+ 77C6 D9                           exx
  51+ 77C7                              next
  51+ 77C7 DD E9       >                jp      (ix)
  52+ 77C9
  53+ 77C9
  54+ 77C9              //  ______________________________________________________________________
  55+ 77C9              //
  56+ 77C9              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 77C9              // NextZXOS call wrapper.
  58+ 77C9              //  n1 = hl register parameter value
  59+ 77C9              //  n2 = de register parameter value
  60+ 77C9              //  n3 = bc register parameter value
  61+ 77C9              //  n4 =  a register parameter value
  62+ 77C9              //   a = routine address in ROM 3
  63+ 77C9              // ----
  64+ 77C9              //  n5 = hl returned value
  65+ 77C9              //  n6 = de returned value
  66+ 77C9              //  n7 = bc returned value
  67+ 77C9              //  n8 =  a returned value
  68+ 77C9              //   f
  69+ 77C9                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 77C9             >
  69+ 77C9             >Dict_Ptr        defl    $
  69+ 77C9             >
  69+ 77C9             >//              ______________________________________________________________________
  69+ 77C9             >//              Heap part
  69+ 77C9             >
  69+ 77C9             >
  69+ 77C9             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA4D             >
  69+ EA4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA4D             >Latest_Definition defl  Heap_Ptr
  69+ EA4D             >
  69+ EA4D             >                // dummy db directives used to calculate length of namec
  69+ EA4D 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA51 44 4F 53    >
  69+ EA54             >len_NFA         defl    $ - temp_NFA
  69+ EA54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA4D             >
  69+ EA4D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA4E 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA52 44 4F 53    >
  69+ EA55             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA54 D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA55             >
  69+ EA55 44 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA57             >Prev_Ptr        defl    Heap_Ptr
  69+ EA57             >
  69+ EA57             >mirror_Ptr      defl    $
  69+ EA57             >
  69+ EA57 CB 77       >                dw      Dict_Ptr + 2        // xt
  69+ EA59             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA59             >
  69+ EA59             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA59             >
  69+ EA59             >//              ______________________________________________________________________
  69+ EA59             >//              Dictionary part
  69+ EA59             >
  69+ EA59             >                org     Dict_Ptr
  69+ 77C9             >
  69+ 77C9 57 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 77CB             >
  69+ 77CB             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 77CB ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 77CB ~           >
  69+ 77CB ~           >
  69+ 77CB             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 77CB             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 77CB             >
  69+ 77CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 77CB D9                            exx
  71+ 77CC E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 77CD D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 77CE 7B                            ld      a, e
  74+ 77CF C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 77D0 D1                            pop     de                  // de' argument              //  n1
  76+ 77D1 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 77D2 D9                           exx
  78+ 77D3 E1                           pop     hl                  // entry address a
  79+ 77D4 DD E5                        push    ix
  80+ 77D6 D5                           push    de
  81+ 77D7 C5                           push    bc
  82+ 77D8 EB                           ex      de, hl              // de is entry address
  83+ 77D9              //              ld      (SP_Saved), sp
  84+ 77D9              //              ld      sp, Cold_origin - 5
  85+ 77D9 0E 07                        ld      c, 7                // use 7 RAM Bank
  86+ 77DB
  87+ 77DB CF                           rst     08
  88+ 77DC 94                           db      $94
  89+ 77DD
  90+ 77DD              //              ld      sp, (SP_Saved)
  91+ 77DD              //              push    ix
  92+ 77DD              //              pop     hl
  93+ 77DD              //              ld      (IX_Echo), hl
  94+ 77DD DD 22 98 63                  ld      (IX_Echo), ix
  95+ 77E1
  96+ 77E1 D9                           exx
  97+ 77E2 C1                           pop     bc
  98+ 77E3 D1                           pop     de
  99+ 77E4 DD E1                        pop     ix
 100+ 77E6 D9                            exx
 101+ 77E7 E5                            push    hl
 102+ 77E8 D5                            push    de
 103+ 77E9 C5                            push    bc
 104+ 77EA 26 00                         ld      h, 0
 105+ 77EC 6F                            ld      l, a
 106+ 77ED E5                            push    hl
 107+ 77EE D9                           exx
 108+ 77EF ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 109+ 77F1 23                           inc     hl                  //  0 for OK ; 1 for ko
 110+ 77F2 E5                           push    hl
 111+ 77F3                              next
 111+ 77F3 DD E9       >                jp      (ix)
 112+ 77F5
 113+ 77F5              //  ______________________________________________________________________
 114+ 77F5              //
 115+ 77F5              // blk-fh
 116+ 77F5                              Variable_Def BLK_FH,   "BLK-FH",   1
 116+ 77F5             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 116+ 77F5             >
 116+ 77F5             >Dict_Ptr        defl    $
 116+ 77F5             >
 116+ 77F5             >//              ______________________________________________________________________
 116+ 77F5             >//              Heap part
 116+ 77F5             >
 116+ 77F5             >
 116+ 77F5             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ EA59             >
 116+ EA59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ EA59             >Latest_Definition defl  Heap_Ptr
 116+ EA59             >
 116+ EA59             >                // dummy db directives used to calculate length of namec
 116+ EA59 42 4C 4B 2D >                db      "BLK-FH"
 116+ EA5D 46 48       >
 116+ EA5F             >len_NFA         defl    $ - temp_NFA
 116+ EA5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ EA59             >
 116+ EA59 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ EA5A 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 116+ EA5E 46 48       >
 116+ EA60             >                org     $-1                 // alter last byte of Name just above to set
 116+ EA5F C8          >                db      {b $} | END_BIT     // msb as name end
 116+ EA60             >
 116+ EA60 4D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ EA62             >Prev_Ptr        defl    Heap_Ptr
 116+ EA62             >
 116+ EA62             >mirror_Ptr      defl    $
 116+ EA62             >
 116+ EA62 F7 77       >                dw      Dict_Ptr + 2        // xt
 116+ EA64             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ EA64             >
 116+ EA64             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ EA64             >
 116+ EA64             >//              ______________________________________________________________________
 116+ EA64             >//              Dictionary part
 116+ EA64             >
 116+ EA64             >                org     Dict_Ptr
 116+ 77F5             >
 116+ 77F5 62 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 77F7             >
 116+ 77F7             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 77F7 CD 68 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 116+ 77FA             >
 116+ 77FA             >
 116+ 77FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 77FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 77FA             >
 116+ 77FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 116+ 77FA 01 00       >                dw      1
 117+ 77FC
 118+ 77FC                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 118+ 77FC             >
 118+ 77FC             >Dict_Ptr        defl    $
 118+ 77FC             >
 118+ 77FC             >//              ______________________________________________________________________
 118+ 77FC             >//              Heap part
 118+ 77FC             >
 118+ 77FC             >
 118+ 77FC             >                org     (Heap_Ptr & $1FFF) + $E000
 118+ EA64             >
 118+ EA64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ EA64             >Latest_Definition defl  Heap_Ptr
 118+ EA64             >
 118+ EA64             >                // dummy db directives used to calculate length of namec
 118+ EA64 42 4C 4B 2D >                db      "BLK-FNAME"
 118+ EA68 46 4E 41 4D >
 118+ EA6C 45          >
 118+ EA6D             >len_NFA         defl    $ - temp_NFA
 118+ EA6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ EA64             >
 118+ EA64 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ EA65 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 118+ EA69 46 4E 41 4D >
 118+ EA6D 45          >
 118+ EA6E             >                org     $-1                 // alter last byte of Name just above to set
 118+ EA6D C5          >                db      {b $} | END_BIT     // msb as name end
 118+ EA6E             >
 118+ EA6E 59 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 118+ EA70             >Prev_Ptr        defl    Heap_Ptr
 118+ EA70             >
 118+ EA70             >mirror_Ptr      defl    $
 118+ EA70             >
 118+ EA70 FE 77       >                dw      Dict_Ptr + 2        // xt
 118+ EA72             >Heap_Ptr        defl    $ - $E000           // save current HP
 118+ EA72             >
 118+ EA72             >Current_HP      defl  $ - $E000             // used to set HP once!
 118+ EA72             >
 118+ EA72             >//              ______________________________________________________________________
 118+ EA72             >//              Dictionary part
 118+ EA72             >
 118+ EA72             >                org     Dict_Ptr
 118+ 77FC             >
 118+ 77FC 70 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 118+ 77FE             >
 118+ 77FE             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 77FE CD 08 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 118+ 7801             >
 118+ 7801             >
 118+ 7801             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 7801             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 7801             >
 118+ 7801             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 7801 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 119+ 7805 6F 63 6B 73
 119+ 7809 2D 36 34 2E
 119+ 780D 62 69 6E 00
 120+ 7811 00 00 00...                  ds      24
 121+ 7829
 122+ 7829              //  ______________________________________________________________________
 123+ 7829              //
 124+ 7829              // blk-seek     n --
 125+ 7829              // seek block n  within blocks!.bin  file
 126+ 7829                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 126+ 7829             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 126+ 7829             >
 126+ 7829             >Dict_Ptr        defl    $
 126+ 7829             >
 126+ 7829             >//              ______________________________________________________________________
 126+ 7829             >//              Heap part
 126+ 7829             >
 126+ 7829             >
 126+ 7829             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ EA72             >
 126+ EA72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ EA72             >Latest_Definition defl  Heap_Ptr
 126+ EA72             >
 126+ EA72             >                // dummy db directives used to calculate length of namec
 126+ EA72 42 4C 4B 2D >                db      "BLK-SEEK"
 126+ EA76 53 45 45 4B >
 126+ EA7A             >len_NFA         defl    $ - temp_NFA
 126+ EA7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ EA72             >
 126+ EA72 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ EA73 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 126+ EA77 53 45 45 4B >
 126+ EA7B             >                org     $-1                 // alter last byte of Name just above to set
 126+ EA7A CB          >                db      {b $} | END_BIT     // msb as name end
 126+ EA7B             >
 126+ EA7B 64 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ EA7D             >Prev_Ptr        defl    Heap_Ptr
 126+ EA7D             >
 126+ EA7D             >mirror_Ptr      defl    $
 126+ EA7D             >
 126+ EA7D 2B 78       >                dw      Dict_Ptr + 2        // xt
 126+ EA7F             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ EA7F             >
 126+ EA7F             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ EA7F             >
 126+ EA7F             >//              ______________________________________________________________________
 126+ EA7F             >//              Dictionary part
 126+ EA7F             >
 126+ EA7F             >                org     Dict_Ptr
 126+ 7829             >
 126+ 7829 7D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 782B             >
 126+ 782B             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 782B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 126+ 782E             >
 126+ 782E             >
 126+ 782E             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 782E             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 782E             >
 126+ 782E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 782E B2 6A 7F 76                  dw  BBUF, MMUL
 128+ 7832 F7 77 89 69                  dw  BLK_FH, FETCH
 129+ 7836 E3 66                        dw  F_SEEK
 130+ 7838 A3 63 2D 00                  dw  LIT, $2D, QERROR
 130+ 783C F5 6D
 131+ 783E 52 68                        dw  EXIT
 132+ 7840
 133+ 7840              //  ______________________________________________________________________
 134+ 7840              //
 135+ 7840              // blk-read     n --
 136+ 7840              // seek block n  within blocks!.bin  file
 137+ 7840                              Colon_Def BLK_READ, "BLK-READ", is_normal
 137+ 7840             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 137+ 7840             >
 137+ 7840             >Dict_Ptr        defl    $
 137+ 7840             >
 137+ 7840             >//              ______________________________________________________________________
 137+ 7840             >//              Heap part
 137+ 7840             >
 137+ 7840             >
 137+ 7840             >                org     (Heap_Ptr & $1FFF) + $E000
 137+ EA7F             >
 137+ EA7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ EA7F             >Latest_Definition defl  Heap_Ptr
 137+ EA7F             >
 137+ EA7F             >                // dummy db directives used to calculate length of namec
 137+ EA7F 42 4C 4B 2D >                db      "BLK-READ"
 137+ EA83 52 45 41 44 >
 137+ EA87             >len_NFA         defl    $ - temp_NFA
 137+ EA87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ EA7F             >
 137+ EA7F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ EA80 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 137+ EA84 52 45 41 44 >
 137+ EA88             >                org     $-1                 // alter last byte of Name just above to set
 137+ EA87 C4          >                db      {b $} | END_BIT     // msb as name end
 137+ EA88             >
 137+ EA88 72 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 137+ EA8A             >Prev_Ptr        defl    Heap_Ptr
 137+ EA8A             >
 137+ EA8A             >mirror_Ptr      defl    $
 137+ EA8A             >
 137+ EA8A 42 78       >                dw      Dict_Ptr + 2        // xt
 137+ EA8C             >Heap_Ptr        defl    $ - $E000           // save current HP
 137+ EA8C             >
 137+ EA8C             >Current_HP      defl  $ - $E000             // used to set HP once!
 137+ EA8C             >
 137+ EA8C             >//              ______________________________________________________________________
 137+ EA8C             >//              Dictionary part
 137+ EA8C             >
 137+ EA8C             >                org     Dict_Ptr
 137+ 7840             >
 137+ 7840 8A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 137+ 7842             >
 137+ 7842             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 7842 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 137+ 7845             >
 137+ 7845             >
 137+ 7845             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 7845             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 7845             >
 137+ 7845             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 7845 2B 78                        dw  BLK_SEEK
 139+ 7847 B2 6A                        dw  BBUF
 140+ 7849 F7 77 89 69                  dw  BLK_FH, FETCH
 141+ 784D 2F 67                        dw  F_READ
 142+ 784F A3 63 2E 00                  dw  LIT, $2E, QERROR
 142+ 7853 F5 6D
 143+ 7855 10 69                        dw  DROP
 144+ 7857 52 68                        dw  EXIT
 145+ 7859
 146+ 7859              //  ______________________________________________________________________
 147+ 7859              //
 148+ 7859              // blk-write     n --
 149+ 7859              // seek block n  within blocks!.bin  file
 150+ 7859                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 150+ 7859             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 150+ 7859             >
 150+ 7859             >Dict_Ptr        defl    $
 150+ 7859             >
 150+ 7859             >//              ______________________________________________________________________
 150+ 7859             >//              Heap part
 150+ 7859             >
 150+ 7859             >
 150+ 7859             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ EA8C             >
 150+ EA8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ EA8C             >Latest_Definition defl  Heap_Ptr
 150+ EA8C             >
 150+ EA8C             >                // dummy db directives used to calculate length of namec
 150+ EA8C 42 4C 4B 2D >                db      "BLK-WRITE"
 150+ EA90 57 52 49 54 >
 150+ EA94 45          >
 150+ EA95             >len_NFA         defl    $ - temp_NFA
 150+ EA95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ EA8C             >
 150+ EA8C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ EA8D 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 150+ EA91 57 52 49 54 >
 150+ EA95 45          >
 150+ EA96             >                org     $-1                 // alter last byte of Name just above to set
 150+ EA95 C5          >                db      {b $} | END_BIT     // msb as name end
 150+ EA96             >
 150+ EA96 7F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ EA98             >Prev_Ptr        defl    Heap_Ptr
 150+ EA98             >
 150+ EA98             >mirror_Ptr      defl    $
 150+ EA98             >
 150+ EA98 5B 78       >                dw      Dict_Ptr + 2        // xt
 150+ EA9A             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ EA9A             >
 150+ EA9A             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ EA9A             >
 150+ EA9A             >//              ______________________________________________________________________
 150+ EA9A             >//              Dictionary part
 150+ EA9A             >
 150+ EA9A             >                org     Dict_Ptr
 150+ 7859             >
 150+ 7859 98 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 785B             >
 150+ 785B             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 785B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 150+ 785E             >
 150+ 785E             >
 150+ 785E             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 785E             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 785E             >
 150+ 785E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 785E 2B 78                        dw  BLK_SEEK
 152+ 7860 B2 6A                        dw  BBUF
 153+ 7862 F7 77 89 69                  dw  BLK_FH, FETCH
 154+ 7866 4A 67                        dw  F_WRITE
 155+ 7868 A3 63 2F 00                  dw  LIT, $2F, QERROR
 155+ 786C F5 6D
 156+ 786E 10 69                        dw  DROP
 157+ 7870 52 68                        dw  EXIT
 158+ 7872
 159+ 7872              //  ______________________________________________________________________
 160+ 7872              //
 161+ 7872              // blk-init     n --
 162+ 7872              // seek block n  within blocks!.bin  file
 163+ 7872                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 163+ 7872             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 163+ 7872             >
 163+ 7872             >Dict_Ptr        defl    $
 163+ 7872             >
 163+ 7872             >//              ______________________________________________________________________
 163+ 7872             >//              Heap part
 163+ 7872             >
 163+ 7872             >
 163+ 7872             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ EA9A             >
 163+ EA9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ EA9A             >Latest_Definition defl  Heap_Ptr
 163+ EA9A             >
 163+ EA9A             >                // dummy db directives used to calculate length of namec
 163+ EA9A 42 4C 4B 2D >                db      "BLK-INIT"
 163+ EA9E 49 4E 49 54 >
 163+ EAA2             >len_NFA         defl    $ - temp_NFA
 163+ EAA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ EA9A             >
 163+ EA9A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ EA9B 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 163+ EA9F 49 4E 49 54 >
 163+ EAA3             >                org     $-1                 // alter last byte of Name just above to set
 163+ EAA2 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ EAA3             >
 163+ EAA3 8C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ EAA5             >Prev_Ptr        defl    Heap_Ptr
 163+ EAA5             >
 163+ EAA5             >mirror_Ptr      defl    $
 163+ EAA5             >
 163+ EAA5 74 78       >                dw      Dict_Ptr + 2        // xt
 163+ EAA7             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ EAA7             >
 163+ EAA7             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ EAA7             >
 163+ EAA7             >//              ______________________________________________________________________
 163+ EAA7             >//              Dictionary part
 163+ EAA7             >
 163+ EAA7             >                org     Dict_Ptr
 163+ 7872             >
 163+ 7872 A5 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 7874             >
 163+ 7874             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 7874 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 163+ 7877             >
 163+ 7877             >
 163+ 7877             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 7877             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 7877             >
 163+ 7877             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 7877 F7 77 89 69                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 164+ 787B FF 66 10 69
 165+ 787F FE 77 BE 68                  dw  BLK_FNAME, ONE_PLUS
 166+ 7883 A6 6B 96 6A                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 166+ 7887 5A 67
 167+ 7889 A3 63 2C 00                  dw  LIT, $2C, QERROR
 167+ 788D F5 6D
 168+ 788F F7 77 93 69                  dw  BLK_FH, STORE
 169+ 7893 52 68                        dw  EXIT
 170+ 7895
 171+ 7895              //  ______________________________________________________________________
 172+ 7895              //
 173+ 7895              // #sec
 174+ 7895              // number of 512-Byte "sectors" available on thie sysstem.
 175+ 7895              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 176+ 7895
 177+ 7895                              Constant_Def NSEC , "#SEC", 32767
 177+ 7895             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 177+ 7895             >
 177+ 7895             >Dict_Ptr        defl    $
 177+ 7895             >
 177+ 7895             >//              ______________________________________________________________________
 177+ 7895             >//              Heap part
 177+ 7895             >
 177+ 7895             >
 177+ 7895             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ EAA7             >
 177+ EAA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ EAA7             >Latest_Definition defl  Heap_Ptr
 177+ EAA7             >
 177+ EAA7             >                // dummy db directives used to calculate length of namec
 177+ EAA7 23 53 45 43 >                db      "#SEC"
 177+ EAAB             >len_NFA         defl    $ - temp_NFA
 177+ EAAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ EAA7             >
 177+ EAA7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ EAA8 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 177+ EAAC             >                org     $-1                 // alter last byte of Name just above to set
 177+ EAAB C3          >                db      {b $} | END_BIT     // msb as name end
 177+ EAAC             >
 177+ EAAC 9A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ EAAE             >Prev_Ptr        defl    Heap_Ptr
 177+ EAAE             >
 177+ EAAE             >mirror_Ptr      defl    $
 177+ EAAE             >
 177+ EAAE 97 78       >                dw      Dict_Ptr + 2        // xt
 177+ EAB0             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ EAB0             >
 177+ EAB0             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ EAB0             >
 177+ EAB0             >//              ______________________________________________________________________
 177+ EAB0             >//              Dictionary part
 177+ EAB0             >
 177+ EAB0             >                org     Dict_Ptr
 177+ 7895             >
 177+ 7895 AE 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 7897             >
 177+ 7897             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 7897 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 177+ 789A             >
 177+ 789A             >
 177+ 789A             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 789A             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 789A             >
 177+ 789A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 789A FF 7F       >                dw      32767
 178+ 789C
 179+ 789C              //  ______________________________________________________________________
 180+ 789C
 181+ 789C
 182+ 789C
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
 124  789C                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
   1+ 789C              //  ______________________________________________________________________
   2+ 789C              //
   3+ 789C              //  L3.asm
   4+ 789C              //
   5+ 789C              //  Continuation of L2.asm
   6+ 789C              //  I/O Block definitions
   7+ 789C              //  ______________________________________________________________________
   8+ 789C
   9+ 789C
  10+ 789C              //  ______________________________________________________________________
  11+ 789C              //
  12+ 789C              // r/w          a n f --
  13+ 789C              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 789C                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 789C             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 789C             >
  14+ 789C             >Dict_Ptr        defl    $
  14+ 789C             >
  14+ 789C             >//              ______________________________________________________________________
  14+ 789C             >//              Heap part
  14+ 789C             >
  14+ 789C             >
  14+ 789C             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EAB0             >
  14+ EAB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EAB0             >Latest_Definition defl  Heap_Ptr
  14+ EAB0             >
  14+ EAB0             >                // dummy db directives used to calculate length of namec
  14+ EAB0 52 2F 57    >                db      "R/W"
  14+ EAB3             >len_NFA         defl    $ - temp_NFA
  14+ EAB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EAB0             >
  14+ EAB0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EAB1 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EAB4             >                org     $-1                 // alter last byte of Name just above to set
  14+ EAB3 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EAB4             >
  14+ EAB4 A7 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EAB6             >Prev_Ptr        defl    Heap_Ptr
  14+ EAB6             >
  14+ EAB6             >mirror_Ptr      defl    $
  14+ EAB6             >
  14+ EAB6 9E 78       >                dw      Dict_Ptr + 2        // xt
  14+ EAB8             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EAB8             >
  14+ EAB8             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EAB8             >
  14+ EAB8             >//              ______________________________________________________________________
  14+ EAB8             >//              Dictionary part
  14+ EAB8             >
  14+ EAB8             >                org     Dict_Ptr
  14+ 789C             >
  14+ 789C B6 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 789E             >
  14+ 789E             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 789E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 78A1             >
  14+ 78A1             >
  14+ 78A1             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 78A1             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 78A1             >
  14+ 78A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 78A1 5C 68                        dw      TO_R                    // >r
  16+ 78A3 C5 68                        dw      ONE_SUBTRACT            // 1-
  17+ 78A5 2B 69 8A 68                  dw      DUP, ZLESS              // dup 0<
  18+ 78A9 07 69 97 78                  dw      OVER, NSEC              // over #sec
  19+ 78AD C5 68 32 6C                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 78B1 1B 68                        dw      OR_OP                   // or
  21+ 78B3 A3 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 78B7 F5 6D
  22+ 78B9 67 68                        dw      R_TO                    // r>
  23+ 78BB                                                              // if
  24+ 78BB F5 63                        dw      ZBRANCH
  25+ 78BD 08 00                        dw      Read_Write_Else - $
  26+ 78BF 42 78                        dw          BLK_READ            //      blk-read
  27+ 78C1 E8 63                        dw      BRANCH
  28+ 78C3 04 00                        dw      Read_Write_Endif - $
  29+ 78C5              Read_Write_Else:                                // else
  30+ 78C5 5B 78                        dw          BLK_WRITE           //      blk-write
  31+ 78C7              Read_Write_Endif:                               // endif
  32+ 78C7 52 68                        dw      EXIT                    // ;
  33+ 78C9
  34+ 78C9
  35+ 78C9              //  ______________________________________________________________________
  36+ 78C9              //
  37+ 78C9              // +buf        a1 -- a2 f
  38+ 78C9              // advences to next buffer, cyclically rotating along them
  39+ 78C9                              Colon_Def PBUF, "+BUF", is_normal
  39+ 78C9             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 78C9             >
  39+ 78C9             >Dict_Ptr        defl    $
  39+ 78C9             >
  39+ 78C9             >//              ______________________________________________________________________
  39+ 78C9             >//              Heap part
  39+ 78C9             >
  39+ 78C9             >
  39+ 78C9             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EAB8             >
  39+ EAB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EAB8             >Latest_Definition defl  Heap_Ptr
  39+ EAB8             >
  39+ EAB8             >                // dummy db directives used to calculate length of namec
  39+ EAB8 2B 42 55 46 >                db      "+BUF"
  39+ EABC             >len_NFA         defl    $ - temp_NFA
  39+ EABC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EAB8             >
  39+ EAB8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EAB9 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EABD             >                org     $-1                 // alter last byte of Name just above to set
  39+ EABC C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EABD             >
  39+ EABD B0 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EABF             >Prev_Ptr        defl    Heap_Ptr
  39+ EABF             >
  39+ EABF             >mirror_Ptr      defl    $
  39+ EABF             >
  39+ EABF CB 78       >                dw      Dict_Ptr + 2        // xt
  39+ EAC1             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EAC1             >
  39+ EAC1             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EAC1             >
  39+ EAC1             >//              ______________________________________________________________________
  39+ EAC1             >//              Dictionary part
  39+ EAC1             >
  39+ EAC1             >                org     Dict_Ptr
  39+ 78C9             >
  39+ 78C9 BF 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 78CB             >
  39+ 78CB             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 78CB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 78CE             >
  39+ 78CE             >
  39+ 78CE             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 78CE             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 78CE             >
  39+ 78CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 78CE A3 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 78D2 A5 68
  41+ 78D4 2B 69 10 6B                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 78D8 89 69
  42+ 78DA 04 6C                        dw      EQUALS                  // =
  43+ 78DC                                                              // if
  44+ 78DC F5 63                        dw      ZBRANCH
  45+ 78DE 08 00                        dw      PBuf_Endif - $
  46+ 78E0 10 69                        dw          DROP                //      drop
  47+ 78E2 0A 6B 89 69                  dw          FIRST, FETCH        //      first @
  48+ 78E6              PBuf_Endif:                                     // endif
  49+ 78E6 2B 69 7C 6B                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 78EA 89 69
  50+ 78EC F8 6B                        dw      SUBTRACT                // -
  51+ 78EE 52 68                        dw      EXIT                    // ;
  52+ 78F0
  53+ 78F0              //  ______________________________________________________________________
  54+ 78F0              //
  55+ 78F0              // update       --
  56+ 78F0              // mark the last used block to be written to disk
  57+ 78F0                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 78F0             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 78F0             >
  57+ 78F0             >Dict_Ptr        defl    $
  57+ 78F0             >
  57+ 78F0             >//              ______________________________________________________________________
  57+ 78F0             >//              Heap part
  57+ 78F0             >
  57+ 78F0             >
  57+ 78F0             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EAC1             >
  57+ EAC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EAC1             >Latest_Definition defl  Heap_Ptr
  57+ EAC1             >
  57+ EAC1             >                // dummy db directives used to calculate length of namec
  57+ EAC1 55 50 44 41 >                db      "UPDATE"
  57+ EAC5 54 45       >
  57+ EAC7             >len_NFA         defl    $ - temp_NFA
  57+ EAC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EAC1             >
  57+ EAC1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EAC2 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EAC6 54 45       >
  57+ EAC8             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAC7 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAC8             >
  57+ EAC8 B8 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EACA             >Prev_Ptr        defl    Heap_Ptr
  57+ EACA             >
  57+ EACA             >mirror_Ptr      defl    $
  57+ EACA             >
  57+ EACA F2 78       >                dw      Dict_Ptr + 2        // xt
  57+ EACC             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EACC             >
  57+ EACC             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EACC             >
  57+ EACC             >//              ______________________________________________________________________
  57+ EACC             >//              Dictionary part
  57+ EACC             >
  57+ EACC             >                org     Dict_Ptr
  57+ 78F0             >
  57+ 78F0 CA 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 78F2             >
  57+ 78F2             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 78F2 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 78F5             >
  57+ 78F5             >
  57+ 78F5             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 78F5             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 78F5             >
  57+ 78F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 78F5 7C 6B 89 69                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 78F9 89 69
  59+ 78FB A3 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 78FF 1B 68
  60+ 7901 7C 6B 89 69                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7905 93 69
  61+ 7907 52 68                        dw      EXIT                    // ;
  62+ 7909
  63+ 7909
  64+ 7909              //  ______________________________________________________________________
  65+ 7909              //
  66+ 7909              // empty-buffers --
  67+ 7909                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7909             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7909             >
  67+ 7909             >Dict_Ptr        defl    $
  67+ 7909             >
  67+ 7909             >//              ______________________________________________________________________
  67+ 7909             >//              Heap part
  67+ 7909             >
  67+ 7909             >
  67+ 7909             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EACC             >
  67+ EACC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EACC             >Latest_Definition defl  Heap_Ptr
  67+ EACC             >
  67+ EACC             >                // dummy db directives used to calculate length of namec
  67+ EACC 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAD0 59 2D 42 55 >
  67+ EAD4 46 46 45 52 >
  67+ EAD8 53          >
  67+ EAD9             >len_NFA         defl    $ - temp_NFA
  67+ EAD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EACC             >
  67+ EACC 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EACD 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAD1 59 2D 42 55 >
  67+ EAD5 46 46 45 52 >
  67+ EAD9 53          >
  67+ EADA             >                org     $-1                 // alter last byte of Name just above to set
  67+ EAD9 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EADA             >
  67+ EADA C1 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EADC             >Prev_Ptr        defl    Heap_Ptr
  67+ EADC             >
  67+ EADC             >mirror_Ptr      defl    $
  67+ EADC             >
  67+ EADC 0B 79       >                dw      Dict_Ptr + 2        // xt
  67+ EADE             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EADE             >
  67+ EADE             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EADE             >
  67+ EADE             >//              ______________________________________________________________________
  67+ EADE             >//              Dictionary part
  67+ EADE             >
  67+ EADE             >                org     Dict_Ptr
  67+ 7909             >
  67+ 7909 DC 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 790B             >
  67+ 790B             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 790B CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 790E             >
  67+ 790E             >
  67+ 790E             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 790E             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 790E             >
  67+ 790E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 790E 0A 6B 89 69                  dw      FIRST, FETCH            // first @
  69+ 7912 10 6B 89 69                  dw      LIMIT, FETCH            // limit @
  70+ 7916 07 69 F8 6B                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 791A 9F 70
  71+ 791C 52 68                        dw      EXIT                    // ;
  72+ 791E
  73+ 791E              //  ______________________________________________________________________
  74+ 791E              //
  75+ 791E              // buffer       n -- a
  76+ 791E              // read block n and gives the address to a buffer
  77+ 791E              // any block previously inside the buffer, if modified, is rewritten to
  78+ 791E              // disk before reading the block n.
  79+ 791E
  80+ 791E                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 791E             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 791E             >
  80+ 791E             >Dict_Ptr        defl    $
  80+ 791E             >
  80+ 791E             >//              ______________________________________________________________________
  80+ 791E             >//              Heap part
  80+ 791E             >
  80+ 791E             >
  80+ 791E             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EADE             >
  80+ EADE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EADE             >Latest_Definition defl  Heap_Ptr
  80+ EADE             >
  80+ EADE             >                // dummy db directives used to calculate length of namec
  80+ EADE 42 55 46 46 >                db      "BUFFER"
  80+ EAE2 45 52       >
  80+ EAE4             >len_NFA         defl    $ - temp_NFA
  80+ EAE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EADE             >
  80+ EADE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EADF 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAE3 45 52       >
  80+ EAE5             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAE4 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EAE5             >
  80+ EAE5 CC 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EAE7             >Prev_Ptr        defl    Heap_Ptr
  80+ EAE7             >
  80+ EAE7             >mirror_Ptr      defl    $
  80+ EAE7             >
  80+ EAE7 20 79       >                dw      Dict_Ptr + 2        // xt
  80+ EAE9             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EAE9             >
  80+ EAE9             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EAE9             >
  80+ EAE9             >//              ______________________________________________________________________
  80+ EAE9             >//              Dictionary part
  80+ EAE9             >
  80+ EAE9             >                org     Dict_Ptr
  80+ 791E             >
  80+ 791E E7 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 7920             >
  80+ 7920             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7920 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7923             >
  80+ 7923             >
  80+ 7923             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7923             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7923             >
  80+ 7923             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7923 76 6B 89 69                  dw      USE, FETCH              // use @
  82+ 7927 2B 69 5C 68                  dw      DUP, TO_R               // dup >r
  83+ 792B                                                              // begin
  84+ 792B              Buffer_Begin:
  85+ 792B CB 78                        dw          PBUF                //      +buf
  86+ 792D                                                              // until
  87+ 792D F5 63                        dw      ZBRANCH
  88+ 792F FC FF                        dw      Buffer_Begin - $
  89+ 7931 76 6B 93 69                  dw      USE, STORE              // use !
  90+ 7935 72 68 89 69                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7939 8A 68
  91+ 793B                                                              // if
  92+ 793B F5 63                        dw      ZBRANCH
  93+ 793D 14 00                        dw      Buffer_Endif - $
  94+ 793F 72 68 D4 68                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7943 72 68 89 69                  dw          R_OP, FETCH         //      r fetch
  96+ 7947 A3 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 794B 0C 68                        dw          AND_OP              //      and
  98+ 794D 81 6A 9E 78                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7951              Buffer_Endif:                                   // endif
 100+ 7951 72 68 93 69                  dw      R_OP, STORE             // r !
 101+ 7955 72 68 7C 6B                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7959 93 69
 102+ 795B 67 68 D4 68                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 795F 52 68                        dw      EXIT                    // ;
 104+ 7961
 105+ 7961              //  ______________________________________________________________________
 106+ 7961              //
 107+ 7961              // block        n -- a
 108+ 7961              // Leaves the buffer address that contains the block n.
 109+ 7961              // If the block is not already present, it will be loaded from disk
 110+ 7961              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7961              // disk before reading the block n.
 112+ 7961              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7961
 114+ 7961                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7961             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7961             >
 114+ 7961             >Dict_Ptr        defl    $
 114+ 7961             >
 114+ 7961             >//              ______________________________________________________________________
 114+ 7961             >//              Heap part
 114+ 7961             >
 114+ 7961             >
 114+ 7961             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EAE9             >
 114+ EAE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EAE9             >Latest_Definition defl  Heap_Ptr
 114+ EAE9             >
 114+ EAE9             >                // dummy db directives used to calculate length of namec
 114+ EAE9 42 4C 4F 43 >                db      "BLOCK"
 114+ EAED 4B          >
 114+ EAEE             >len_NFA         defl    $ - temp_NFA
 114+ EAEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EAE9             >
 114+ EAE9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EAEA 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAEE 4B          >
 114+ EAEF             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAEE CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAEF             >
 114+ EAEF DE 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAF1             >Prev_Ptr        defl    Heap_Ptr
 114+ EAF1             >
 114+ EAF1             >mirror_Ptr      defl    $
 114+ EAF1             >
 114+ EAF1 63 79       >                dw      Dict_Ptr + 2        // xt
 114+ EAF3             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAF3             >
 114+ EAF3             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAF3             >
 114+ EAF3             >//              ______________________________________________________________________
 114+ EAF3             >//              Dictionary part
 114+ EAF3             >
 114+ EAF3             >                org     Dict_Ptr
 114+ 7961             >
 114+ 7961 F1 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 7963             >
 114+ 7963             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7963 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7966             >
 114+ 7966             >
 114+ 7966             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7966             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7966             >
 114+ 7966             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7966                          //  dw      OFFSET, FETCH           // offset @
 116+ 7966                          //  dw      PLUS
 117+ 7966 5C 68                        dw      TO_R                    // + >r
 118+ 7968 7C 6B 89 69                  dw      PREV, FETCH             // prev @
 119+ 796C 2B 69 89 69                  dw      DUP, FETCH              // dup @
 120+ 7970 72 68 F8 6B                  dw      R_OP, SUBTRACT          // r -
 121+ 7974 2B 69 A5 68                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 7978                                                              // if
 123+ 7978 F5 63                        dw        ZBRANCH
 124+ 797A 32 00                        dw        Block_Endif_1 - $
 125+ 797C              Block_Begin:                                    //      begin
 126+ 797C CB 78 77 68                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 7980                                                              //          if
 128+ 7980 F5 63                        dw          ZBRANCH
 129+ 7982 12 00                        dw          Block_Endif_2 - $
 130+ 7984 10 69                        dw              DROP            //              drop
 131+ 7986 72 68 20 79                  dw              R_OP, BUFFER    //              r buffer
 132+ 798A 2B 69                        dw              DUP             //              dup
 133+ 798C 72 68 88 6A                  dw              R_OP, ONE       //              r 1
 134+ 7990 9E 78                        dw              READ_WRITE      //              r/w
 135+ 7992 E1 68                        dw              TWO_MINUS       //              2-
 136+ 7994              Block_Endif_2:                                  //          endif
 137+ 7994 2B 69 89 69                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 7998 72 68
 138+ 799A F8 6B 2B 69                  dw          SUBTRACT, DUP       //          - dup
 139+ 799E A5 68 77 68                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 79A2                                                              //      until
 141+ 79A2 F5 63                        dw        ZBRANCH
 142+ 79A4 D8 FF                        dw        Block_Begin - $
 143+ 79A6 2B 69 7C 6B                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 79AA 93 69
 144+ 79AC              Block_Endif_1:                                  // endif
 145+ 79AC 67 68 10 69                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 79B0 D4 68
 146+ 79B2 52 68                        dw      EXIT                    // ;
 147+ 79B4
 148+ 79B4              //  ______________________________________________________________________
 149+ 79B4              //
 150+ 79B4              // #buff        -- n
 151+ 79B4              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 79B4                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 79B4             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 79B4             >
 152+ 79B4             >Dict_Ptr        defl    $
 152+ 79B4             >
 152+ 79B4             >//              ______________________________________________________________________
 152+ 79B4             >//              Heap part
 152+ 79B4             >
 152+ 79B4             >
 152+ 79B4             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAF3             >
 152+ EAF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAF3             >Latest_Definition defl  Heap_Ptr
 152+ EAF3             >
 152+ EAF3             >                // dummy db directives used to calculate length of namec
 152+ EAF3 23 42 55 46 >                db      "#BUFF"
 152+ EAF7 46          >
 152+ EAF8             >len_NFA         defl    $ - temp_NFA
 152+ EAF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAF3             >
 152+ EAF3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAF4 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EAF8 46          >
 152+ EAF9             >                org     $-1                 // alter last byte of Name just above to set
 152+ EAF8 C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EAF9             >
 152+ EAF9 E9 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EAFB             >Prev_Ptr        defl    Heap_Ptr
 152+ EAFB             >
 152+ EAFB             >mirror_Ptr      defl    $
 152+ EAFB             >
 152+ EAFB B6 79       >                dw      Dict_Ptr + 2        // xt
 152+ EAFD             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAFD             >
 152+ EAFD             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAFD             >
 152+ EAFD             >//              ______________________________________________________________________
 152+ EAFD             >//              Dictionary part
 152+ EAFD             >
 152+ EAFD             >                org     Dict_Ptr
 152+ 79B4             >
 152+ 79B4 FB 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 79B6             >
 152+ 79B6             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 79B6 CD 55 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 79B9             >
 152+ 79B9             >
 152+ 79B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 79B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 79B9             >
 152+ 79B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 79B9 07 00       >                dw      7
 153+ 79BB
 154+ 79BB              //  ______________________________________________________________________
 155+ 79BB              //
 156+ 79BB              // flush        --
 157+ 79BB                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 79BB             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 79BB             >
 157+ 79BB             >Dict_Ptr        defl    $
 157+ 79BB             >
 157+ 79BB             >//              ______________________________________________________________________
 157+ 79BB             >//              Heap part
 157+ 79BB             >
 157+ 79BB             >
 157+ 79BB             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAFD             >
 157+ EAFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAFD             >Latest_Definition defl  Heap_Ptr
 157+ EAFD             >
 157+ EAFD             >                // dummy db directives used to calculate length of namec
 157+ EAFD 46 4C 55 53 >                db      "FLUSH"
 157+ EB01 48          >
 157+ EB02             >len_NFA         defl    $ - temp_NFA
 157+ EB02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAFD             >
 157+ EAFD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAFE 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EB02 48          >
 157+ EB03             >                org     $-1                 // alter last byte of Name just above to set
 157+ EB02 C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EB03             >
 157+ EB03 F3 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EB05             >Prev_Ptr        defl    Heap_Ptr
 157+ EB05             >
 157+ EB05             >mirror_Ptr      defl    $
 157+ EB05             >
 157+ EB05 BD 79       >                dw      Dict_Ptr + 2        // xt
 157+ EB07             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EB07             >
 157+ EB07             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EB07             >
 157+ EB07             >//              ______________________________________________________________________
 157+ EB07             >//              Dictionary part
 157+ EB07             >
 157+ EB07             >                org     Dict_Ptr
 157+ 79BB             >
 157+ 79BB 05 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 79BD             >
 157+ 79BD             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 79BD CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 79C0             >
 157+ 79C0             >
 157+ 79C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 79C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 79C0             >
 157+ 79C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 79C0 B6 79 BE 68                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 79C4 81 6A
 159+ 79C6              Flush_Do:                                       // do
 160+ 79C6 34 64                        dw      C_DO
 161+ 79C8 81 6A 20 79                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 79CC 10 69
 162+ 79CE                                                              // loop
 163+ 79CE E0 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 79D2 F7 77 89 69                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 79D6 0B 67 10 69                  dw      F_SYNC, DROP            // f_sync drop
 166+ 79DA 52 68                        dw      EXIT                    // exit
 167+ 79DC
 168+ 79DC              //  ______________________________________________________________________
 169+ 79DC              //
 170+ 79DC              // f_getline    a m fh -- n
 171+ 79DC              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 79DC              // Address a is left for subsequent processing
 173+ 79DC              // and n as the actual number of byte read, that is the length of line
 174+ 79DC                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 79DC             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 79DC             >
 174+ 79DC             >Dict_Ptr        defl    $
 174+ 79DC             >
 174+ 79DC             >//              ______________________________________________________________________
 174+ 79DC             >//              Heap part
 174+ 79DC             >
 174+ 79DC             >
 174+ 79DC             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EB07             >
 174+ EB07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EB07             >Latest_Definition defl  Heap_Ptr
 174+ EB07             >
 174+ EB07             >                // dummy db directives used to calculate length of namec
 174+ EB07 46 5F 47 45 >                db      "F_GETLINE"
 174+ EB0B 54 4C 49 4E >
 174+ EB0F 45          >
 174+ EB10             >len_NFA         defl    $ - temp_NFA
 174+ EB10             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EB07             >
 174+ EB07 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EB08 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EB0C 54 4C 49 4E >
 174+ EB10 45          >
 174+ EB11             >                org     $-1                 // alter last byte of Name just above to set
 174+ EB10 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EB11             >
 174+ EB11 FD 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EB13             >Prev_Ptr        defl    Heap_Ptr
 174+ EB13             >
 174+ EB13             >mirror_Ptr      defl    $
 174+ EB13             >
 174+ EB13 DE 79       >                dw      Dict_Ptr + 2        // xt
 174+ EB15             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EB15             >
 174+ EB15             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EB15             >
 174+ EB15             >//              ______________________________________________________________________
 174+ EB15             >//              Dictionary part
 174+ EB15             >
 174+ EB15             >                org     Dict_Ptr
 174+ 79DC             >
 174+ 79DC 13 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 79DE             >
 174+ 79DE             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 79DE CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 79E1             >
 174+ 79E1             >
 174+ 79E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 79E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 79E1             >
 174+ 79E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 79E1 5C 68                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 79E3 1B 69                        dw      TUCK                    // tuck             ( m a m )
 177+ 79E5 72 68 17 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 79E9 A3 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 178+ 79ED F5 6D
 179+ 79EF
 180+ 79EF 5A 69 07 69                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 79F3 BE 68 24 69                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 79F7
 183+ 79F7 72 68 2F 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 79FB A3 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 184+ 79FF F5 6D
 185+ 7A01                                                              // if ( at least 1 chr was read )  \  fh
 186+ 7A01 F5 63                        dw      ZBRANCH
 187+ 7A03 3C 00                        dw      FGetline_Else - $
 188+ 7A05 A3 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 7A09 29 65
 189+ 7A0B 10 69 15 69                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 7A0F 24 69                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 7A11 A3 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 7A15 29 65
 192+ 7A17 10 69 15 69                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 7A1B 32 69 3D 6C                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 7A1F 2B 69 94 6B                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 7A23 93 69
 195+ 7A25 2B 69 5C 68                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 7A29 5A 69 67 68                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 7A2D 81 6A AF 68                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 7A31 67 68 E3 66                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 7A35 A3 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 199+ 7A39 F5 6D
 200+ 7A3B                                                              // else
 201+ 7A3B E8 63                        dw      BRANCH
 202+ 7A3D 0C 00                        dw      FGetline_Endif - $
 203+ 7A3F              FGetline_Else:
 204+ 7A3F 67 68                        dw          R_TO                //      r>              ( m d a fh )
 205+ 7A41 5A 69 54 69                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 7A45 10 69 81 6A                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 7A49              FGetline_Endif:                                 // endif
 208+ 7A49 5C 68 2B 69                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 7A4D 2B 69
 209+ 7A4F BE 68 24 69                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 7A53 72 68 8D 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 7A57 67 69 A5 68                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 7A5B 81 6A 24 69                  dw      ZERO, SWAP              // 0 swap
 213+ 7A5F D9 68 93 69                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 7A63 72 68 A5 68                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 7A67 C5 68
 215+ 7A69 24 69 72 68                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 7A6D F8 6B
 216+ 7A6F AA 70                        dw      BLANK                   // blank
 217+ 7A71 67 68                        dw      R_TO                    // r>                   ( n )
 218+ 7A73 52 68                        dw      EXIT                    // ;
 219+ 7A75
 220+ 7A75              //  ______________________________________________________________________
 221+ 7A75              //
 222+ 7A75              // f_include    fh --
 223+ 7A75              // Given a filehandle includes the source from file
 224+ 7A75                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 7A75             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 7A75             >
 224+ 7A75             >Dict_Ptr        defl    $
 224+ 7A75             >
 224+ 7A75             >//              ______________________________________________________________________
 224+ 7A75             >//              Heap part
 224+ 7A75             >
 224+ 7A75             >
 224+ 7A75             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EB15             >
 224+ EB15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EB15             >Latest_Definition defl  Heap_Ptr
 224+ EB15             >
 224+ EB15             >                // dummy db directives used to calculate length of namec
 224+ EB15 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EB19 43 4C 55 44 >
 224+ EB1D 45          >
 224+ EB1E             >len_NFA         defl    $ - temp_NFA
 224+ EB1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EB15             >
 224+ EB15 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EB16 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EB1A 43 4C 55 44 >
 224+ EB1E 45          >
 224+ EB1F             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB1E C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB1F             >
 224+ EB1F 07 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB21             >Prev_Ptr        defl    Heap_Ptr
 224+ EB21             >
 224+ EB21             >mirror_Ptr      defl    $
 224+ EB21             >
 224+ EB21 77 7A       >                dw      Dict_Ptr + 2        // xt
 224+ EB23             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB23             >
 224+ EB23             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB23             >
 224+ EB23             >//              ______________________________________________________________________
 224+ EB23             >//              Dictionary part
 224+ EB23             >
 224+ EB23             >                org     Dict_Ptr
 224+ 7A75             >
 224+ 7A75 21 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 7A77             >
 224+ 7A77             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 7A77 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 7A7A             >
 224+ 7A7A             >
 224+ 7A7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 7A7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 7A7A             >
 224+ 7A7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 7A7A 22 6B 89 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 7A7E 5C 68
 226+ 7A80 28 6B 89 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 7A84 5C 68
 227+ 7A86 8E 6B 89 69                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 7A8A 5C 68
 228+ 7A8C 72 68                        dw      R_OP                    // r
 229+ 7A8E                                                              // if
 230+ 7A8E F5 63                        dw      ZBRANCH
 231+ 7A90 20 00                        dw      FInclude_Else_1 - $
 232+ 7A92 72 68 17 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 233+ 7A96 A3 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 233+ 7A9A F5 6D
 234+ 7A9C 28 6B 89 69                  dw          TO_IN, FETCH        //      >in @ 2-
 235+ 7AA0 E1 68                        dw          TWO_MINUS
 236+ 7AA2 94 6B 89 69                  dw          SPAN, FETCH         //      span @ -
 237+ 7AA6 F8 6B                        dw          SUBTRACT
 238+ 7AA8 ED 6B AF 68                  dw          S_TO_D, DPLUS       //      s>d d+
 239+ 7AAC                                                              // else
 240+ 7AAC E8 63                        dw      BRANCH
 241+ 7AAE 06 00                        dw      FInclude_Endif_1 - $
 242+ 7AB0              FInclude_Else_1:
 243+ 7AB0 81 6A 81 6A                  dw          ZERO, ZERO          //      0 0
 244+ 7AB4                                                              // endif
 245+ 7AB4              FInclude_Endif_1:
 246+ 7AB4 5C 68 5C 68                  dw      TO_R, TO_R              // >r >r
 247+ 7AB8 8E 6B 93 69                  dw      SOURCE_ID, STORE        // source-id !
 248+ 7ABC              FInclude_Begin:                                 // begin
 249+ 7ABC 88 6A 63 79                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 249+ 7AC0 B2 6A
 250+ 7AC2 67 69 AA 70                  dw          TWO_DUP, BLANK      //      2dup blank
 251+ 7AC6 24 69 BE 68                  dw          SWAP, ONE_PLUS      //      swap 1+
 252+ 7ACA 24 69 D9 68                  dw          SWAP, CELL_MINUS    //      swap cell-
 253+ 7ACE 8E 6B 89 69                  dw          SOURCE_ID, FETCH    //      source-id @
 254+ 7AD2 DE 79                        dw          F_GETLINE           //      f_getline
 255+ 7AD4                                                              // while
 256+ 7AD4 F5 63                        dw      ZBRANCH
 257+ 7AD6 14 00                        dw      FInclude_Repeat - $
 258+ 7AD8 88 6A 22 6B                  dw          ONE, BLK, STORE     //      1 blk !
 258+ 7ADC 93 69
 259+ 7ADE 81 6A 28 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
 259+ 7AE2 93 69
 260+ 7AE4 C4 74                        dw          INTERPRET           //      interpret
 261+ 7AE6 E8 63                        dw      BRANCH
 262+ 7AE8 D4 FF                        dw      FInclude_Begin - $
 263+ 7AEA              FInclude_Repeat:                                // repeat
 264+ 7AEA 8E 6B 89 69                  dw      SOURCE_ID, FETCH        // source-id @
 265+ 7AEE 81 6A 8E 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 265+ 7AF2 93 69
 266+ 7AF4 FF 66                        dw      F_CLOSE                 // f_close
 267+ 7AF6 A3 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 267+ 7AFA F5 6D
 268+ 7AFC 67 68 67 68                  dw      R_TO, R_TO, R_TO        // r> r> r>
 268+ 7B00 67 68
 269+ 7B02 2B 69 8E 6B                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 269+ 7B06 93 69
 270+ 7B08                                                              // if
 271+ 7B08 F5 63                        dw      ZBRANCH
 272+ 7B0A 12 00                        dw      FInclude_Else_2 - $
 273+ 7B0C 8E 6B 89 69                  dw          SOURCE_ID, FETCH    //      source-id @
 274+ 7B10 E3 66                        dw          F_SEEK              //      f_seek
 275+ 7B12 A3 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 275+ 7B16 F5 6D
 276+ 7B18                                                              // else
 277+ 7B18 E8 63                        dw      BRANCH
 278+ 7B1A 04 00                        dw      FInclude_Endif_2 - $
 279+ 7B1C              FInclude_Else_2:
 280+ 7B1C 54 69                        dw          TWO_DROP            //      2drop
 281+ 7B1E              FInclude_Endif_2:                               // endif
 282+ 7B1E 67 68 28 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 282+ 7B22 93 69
 283+ 7B24 67 68 22 6B                  dw      R_TO, BLK, STORE        // r> blk !
 283+ 7B28 93 69
 284+ 7B2A 52 68                        dw      EXIT                    // ;
 285+ 7B2C
 286+ 7B2C              //  ______________________________________________________________________
 287+ 7B2C              //
 288+ 7B2C              // open<         -- fh
 289+ 7B2C              // Open the following filename and return it file-handle
 290+ 7B2C              // Used in the form OPEN CCCC
 291+ 7B2C                              Colon_Def OPEN_FH, "OPEN<", is_normal
 291+ 7B2C             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 291+ 7B2C             >
 291+ 7B2C             >Dict_Ptr        defl    $
 291+ 7B2C             >
 291+ 7B2C             >//              ______________________________________________________________________
 291+ 7B2C             >//              Heap part
 291+ 7B2C             >
 291+ 7B2C             >
 291+ 7B2C             >                org     (Heap_Ptr & $1FFF) + $E000
 291+ EB23             >
 291+ EB23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ EB23             >Latest_Definition defl  Heap_Ptr
 291+ EB23             >
 291+ EB23             >                // dummy db directives used to calculate length of namec
 291+ EB23 4F 50 45 4E >                db      "OPEN<"
 291+ EB27 3C          >
 291+ EB28             >len_NFA         defl    $ - temp_NFA
 291+ EB28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ EB23             >
 291+ EB23 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ EB24 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 291+ EB28 3C          >
 291+ EB29             >                org     $-1                 // alter last byte of Name just above to set
 291+ EB28 BC          >                db      {b $} | END_BIT     // msb as name end
 291+ EB29             >
 291+ EB29 15 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 291+ EB2B             >Prev_Ptr        defl    Heap_Ptr
 291+ EB2B             >
 291+ EB2B             >mirror_Ptr      defl    $
 291+ EB2B             >
 291+ EB2B 2E 7B       >                dw      Dict_Ptr + 2        // xt
 291+ EB2D             >Heap_Ptr        defl    $ - $E000           // save current HP
 291+ EB2D             >
 291+ EB2D             >Current_HP      defl  $ - $E000             // used to set HP once!
 291+ EB2D             >
 291+ EB2D             >//              ______________________________________________________________________
 291+ EB2D             >//              Dictionary part
 291+ EB2D             >
 291+ EB2D             >                org     Dict_Ptr
 291+ 7B2C             >
 291+ 7B2C 2B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 291+ 7B2E             >
 291+ 7B2E             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 7B2E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 7B31             >
 291+ 7B31             >
 291+ 7B31             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 7B31             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 7B31             >
 291+ 7B31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 7B31 A4 6A                        dw      BL
 293+ 7B33 D7 70 31 6F                  dw      WORD, COUNT, OVER       // bl word count over
 293+ 7B37 07 69
 294+ 7B39 A5 68 81 6A                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 294+ 7B3D 24 69 93 69
 295+ 7B41 C8 70 88 6A                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 295+ 7B45 5A 67
 296+ 7B47 A3 63 2B 00                  dw      LIT, 43                 // 43
 297+ 7B4B F5 6D                        dw      QERROR                  // ?error
 298+ 7B4D 52 68                        dw      EXIT                    // ;
 299+ 7B4F
 300+ 7B4F              //  ______________________________________________________________________
 301+ 7B4F              //
 302+ 7B4F              // include      -- cccc
 303+ 7B4F              // Include the following filename
 304+ 7B4F                              Colon_Def INCLUDE, "INCLUDE", is_normal
 304+ 7B4F             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 304+ 7B4F             >
 304+ 7B4F             >Dict_Ptr        defl    $
 304+ 7B4F             >
 304+ 7B4F             >//              ______________________________________________________________________
 304+ 7B4F             >//              Heap part
 304+ 7B4F             >
 304+ 7B4F             >
 304+ 7B4F             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ EB2D             >
 304+ EB2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ EB2D             >Latest_Definition defl  Heap_Ptr
 304+ EB2D             >
 304+ EB2D             >                // dummy db directives used to calculate length of namec
 304+ EB2D 49 4E 43 4C >                db      "INCLUDE"
 304+ EB31 55 44 45    >
 304+ EB34             >len_NFA         defl    $ - temp_NFA
 304+ EB34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ EB2D             >
 304+ EB2D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ EB2E 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 304+ EB32 55 44 45    >
 304+ EB35             >                org     $-1                 // alter last byte of Name just above to set
 304+ EB34 C5          >                db      {b $} | END_BIT     // msb as name end
 304+ EB35             >
 304+ EB35 23 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ EB37             >Prev_Ptr        defl    Heap_Ptr
 304+ EB37             >
 304+ EB37             >mirror_Ptr      defl    $
 304+ EB37             >
 304+ EB37 51 7B       >                dw      Dict_Ptr + 2        // xt
 304+ EB39             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ EB39             >
 304+ EB39             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ EB39             >
 304+ EB39             >//              ______________________________________________________________________
 304+ EB39             >//              Dictionary part
 304+ EB39             >
 304+ EB39             >                org     Dict_Ptr
 304+ 7B4F             >
 304+ 7B4F 37 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 7B51             >
 304+ 7B51             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 7B51 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 7B54             >
 304+ 7B54             >
 304+ 7B54             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 7B54             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 7B54             >
 304+ 7B54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 7B54 2E 7B                        dw      OPEN_FH                 // open
 306+ 7B56 2B 69 77 7A                  dw      DUP, F_INCLUDE          // dup f_include
 307+ 7B5A FF 66 10 69                  dw      F_CLOSE, DROP           // f_close drop
 308+ 7B5E 52 68                        dw      EXIT                    // ;
 309+ 7B60
 310+ 7B60              //  ______________________________________________________________________
 311+ 7B60              //
 312+ 7B60              // needs
 313+ 7B60              // check for cccc exists in vocabulary
 314+ 7B60              // if it doesn't then  INCLUDE  inc/cccc.F
 315+ 7B60
 316+ 7B60              // temp filename cccc.f as counted string zero-padded
 317+ 7B60                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 317+ 7B60             >
 317+ 7B60             >Dict_Ptr        defl    $
 317+ 7B60             >
 317+ 7B60             >//              ______________________________________________________________________
 317+ 7B60             >//              Heap part
 317+ 7B60             >
 317+ 7B60             >
 317+ 7B60             >                org     (Heap_Ptr & $1FFF) + $E000
 317+ EB39             >
 317+ EB39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 317+ EB39             >Latest_Definition defl  Heap_Ptr
 317+ EB39             >
 317+ EB39             >                // dummy db directives used to calculate length of namec
 317+ EB39 4E 45 45 44 >                db      "NEEDS-W"
 317+ EB3D 53 2D 57    >
 317+ EB40             >len_NFA         defl    $ - temp_NFA
 317+ EB40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 317+ EB39             >
 317+ EB39 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 317+ EB3A 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 317+ EB3E 53 2D 57    >
 317+ EB41             >                org     $-1                 // alter last byte of Name just above to set
 317+ EB40 D7          >                db      {b $} | END_BIT     // msb as name end
 317+ EB41             >
 317+ EB41 2D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 317+ EB43             >Prev_Ptr        defl    Heap_Ptr
 317+ EB43             >
 317+ EB43             >mirror_Ptr      defl    $
 317+ EB43             >
 317+ EB43 62 7B       >                dw      Dict_Ptr + 2        // xt
 317+ EB45             >Heap_Ptr        defl    $ - $E000           // save current HP
 317+ EB45             >
 317+ EB45             >Current_HP      defl  $ - $E000             // used to set HP once!
 317+ EB45             >
 317+ EB45             >//              ______________________________________________________________________
 317+ EB45             >//              Dictionary part
 317+ EB45             >
 317+ EB45             >                org     Dict_Ptr
 317+ 7B60             >
 317+ 7B60 43 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 317+ 7B62             >
 317+ 7B62             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 317+ 7B62 CD 08 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 317+ 7B65             >
 317+ 7B65             >
 317+ 7B65             >                endif           ; ok        // for other definitions it "points" the correct handler
 317+ 7B65             >                // Use of "; ok" to suppress "warning[fwdref]"
 317+ 7B65             >
 317+ 7B65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 318+ 7B65 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 319+ 7B88              // temp complete path+filename
 320+ 7B88                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 320+ 7B88             >
 320+ 7B88             >Dict_Ptr        defl    $
 320+ 7B88             >
 320+ 7B88             >//              ______________________________________________________________________
 320+ 7B88             >//              Heap part
 320+ 7B88             >
 320+ 7B88             >
 320+ 7B88             >                org     (Heap_Ptr & $1FFF) + $E000
 320+ EB45             >
 320+ EB45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 320+ EB45             >Latest_Definition defl  Heap_Ptr
 320+ EB45             >
 320+ EB45             >                // dummy db directives used to calculate length of namec
 320+ EB45 4E 45 45 44 >                db      "NEEDS-FN"
 320+ EB49 53 2D 46 4E >
 320+ EB4D             >len_NFA         defl    $ - temp_NFA
 320+ EB4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 320+ EB45             >
 320+ EB45 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 320+ EB46 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 320+ EB4A 53 2D 46 4E >
 320+ EB4E             >                org     $-1                 // alter last byte of Name just above to set
 320+ EB4D CE          >                db      {b $} | END_BIT     // msb as name end
 320+ EB4E             >
 320+ EB4E 39 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 320+ EB50             >Prev_Ptr        defl    Heap_Ptr
 320+ EB50             >
 320+ EB50             >mirror_Ptr      defl    $
 320+ EB50             >
 320+ EB50 8A 7B       >                dw      Dict_Ptr + 2        // xt
 320+ EB52             >Heap_Ptr        defl    $ - $E000           // save current HP
 320+ EB52             >
 320+ EB52             >Current_HP      defl  $ - $E000             // used to set HP once!
 320+ EB52             >
 320+ EB52             >//              ______________________________________________________________________
 320+ EB52             >//              Dictionary part
 320+ EB52             >
 320+ EB52             >                org     Dict_Ptr
 320+ 7B88             >
 320+ 7B88 50 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 320+ 7B8A             >
 320+ 7B8A             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 320+ 7B8A CD 08 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 320+ 7B8D             >
 320+ 7B8D             >
 320+ 7B8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 320+ 7B8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 320+ 7B8D             >
 320+ 7B8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 321+ 7B8D 00 00 00...                  ds      40
 322+ 7BB5              // constant path
 323+ 7BB5                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 323+ 7BB5             >
 323+ 7BB5             >Dict_Ptr        defl    $
 323+ 7BB5             >
 323+ 7BB5             >//              ______________________________________________________________________
 323+ 7BB5             >//              Heap part
 323+ 7BB5             >
 323+ 7BB5             >
 323+ 7BB5             >                org     (Heap_Ptr & $1FFF) + $E000
 323+ EB52             >
 323+ EB52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 323+ EB52             >Latest_Definition defl  Heap_Ptr
 323+ EB52             >
 323+ EB52             >                // dummy db directives used to calculate length of namec
 323+ EB52 4E 45 45 44 >                db      "NEEDS-INC"
 323+ EB56 53 2D 49 4E >
 323+ EB5A 43          >
 323+ EB5B             >len_NFA         defl    $ - temp_NFA
 323+ EB5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 323+ EB52             >
 323+ EB52 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 323+ EB53 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 323+ EB57 53 2D 49 4E >
 323+ EB5B 43          >
 323+ EB5C             >                org     $-1                 // alter last byte of Name just above to set
 323+ EB5B C3          >                db      {b $} | END_BIT     // msb as name end
 323+ EB5C             >
 323+ EB5C 45 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 323+ EB5E             >Prev_Ptr        defl    Heap_Ptr
 323+ EB5E             >
 323+ EB5E             >mirror_Ptr      defl    $
 323+ EB5E             >
 323+ EB5E B7 7B       >                dw      Dict_Ptr + 2        // xt
 323+ EB60             >Heap_Ptr        defl    $ - $E000           // save current HP
 323+ EB60             >
 323+ EB60             >Current_HP      defl  $ - $E000             // used to set HP once!
 323+ EB60             >
 323+ EB60             >//              ______________________________________________________________________
 323+ EB60             >//              Dictionary part
 323+ EB60             >
 323+ EB60             >                org     Dict_Ptr
 323+ 7BB5             >
 323+ 7BB5 5E 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 323+ 7BB7             >
 323+ 7BB7             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 323+ 7BB7 CD 08 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 323+ 7BBA             >
 323+ 7BBA             >
 323+ 7BBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 323+ 7BBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 323+ 7BBA             >
 323+ 7BBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 324+ 7BBA 04 69 6E 63                  db      4, "inc/", 0
 324+ 7BBE 2F 00
 325+ 7BC0                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 325+ 7BC0             >
 325+ 7BC0             >Dict_Ptr        defl    $
 325+ 7BC0             >
 325+ 7BC0             >//              ______________________________________________________________________
 325+ 7BC0             >//              Heap part
 325+ 7BC0             >
 325+ 7BC0             >
 325+ 7BC0             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ EB60             >
 325+ EB60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ EB60             >Latest_Definition defl  Heap_Ptr
 325+ EB60             >
 325+ EB60             >                // dummy db directives used to calculate length of namec
 325+ EB60 4E 45 45 44 >                db      "NEEDS-LIB"
 325+ EB64 53 2D 4C 49 >
 325+ EB68 42          >
 325+ EB69             >len_NFA         defl    $ - temp_NFA
 325+ EB69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ EB60             >
 325+ EB60 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ EB61 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 325+ EB65 53 2D 4C 49 >
 325+ EB69 42          >
 325+ EB6A             >                org     $-1                 // alter last byte of Name just above to set
 325+ EB69 C2          >                db      {b $} | END_BIT     // msb as name end
 325+ EB6A             >
 325+ EB6A 52 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ EB6C             >Prev_Ptr        defl    Heap_Ptr
 325+ EB6C             >
 325+ EB6C             >mirror_Ptr      defl    $
 325+ EB6C             >
 325+ EB6C C2 7B       >                dw      Dict_Ptr + 2        // xt
 325+ EB6E             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ EB6E             >
 325+ EB6E             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ EB6E             >
 325+ EB6E             >//              ______________________________________________________________________
 325+ EB6E             >//              Dictionary part
 325+ EB6E             >
 325+ EB6E             >                org     Dict_Ptr
 325+ 7BC0             >
 325+ 7BC0 6C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 7BC2             >
 325+ 7BC2             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 7BC2 CD 08 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 325+ 7BC5             >
 325+ 7BC5             >
 325+ 7BC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 7BC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 7BC5             >
 325+ 7BC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 7BC5 04 6C 69 62                  db      4, "lib/", 0
 326+ 7BC9 2F 00
 327+ 7BCB
 328+ 7BCB              // Concatenate path at a and filename and include it
 329+ 7BCB              // No error is issued if filename doesn't exist.
 330+ 7BCB                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 330+ 7BCB             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 330+ 7BCB             >
 330+ 7BCB             >Dict_Ptr        defl    $
 330+ 7BCB             >
 330+ 7BCB             >//              ______________________________________________________________________
 330+ 7BCB             >//              Heap part
 330+ 7BCB             >
 330+ 7BCB             >
 330+ 7BCB             >                org     (Heap_Ptr & $1FFF) + $E000
 330+ EB6E             >
 330+ EB6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ EB6E             >Latest_Definition defl  Heap_Ptr
 330+ EB6E             >
 330+ EB6E             >                // dummy db directives used to calculate length of namec
 330+ EB6E 4E 45 45 44 >                db      "NEEDS/"
 330+ EB72 53 2F       >
 330+ EB74             >len_NFA         defl    $ - temp_NFA
 330+ EB74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ EB6E             >
 330+ EB6E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ EB6F 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 330+ EB73 53 2F       >
 330+ EB75             >                org     $-1                 // alter last byte of Name just above to set
 330+ EB74 AF          >                db      {b $} | END_BIT     // msb as name end
 330+ EB75             >
 330+ EB75 60 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 330+ EB77             >Prev_Ptr        defl    Heap_Ptr
 330+ EB77             >
 330+ EB77             >mirror_Ptr      defl    $
 330+ EB77             >
 330+ EB77 CD 7B       >                dw      Dict_Ptr + 2        // xt
 330+ EB79             >Heap_Ptr        defl    $ - $E000           // save current HP
 330+ EB79             >
 330+ EB79             >Current_HP      defl  $ - $E000             // used to set HP once!
 330+ EB79             >
 330+ EB79             >//              ______________________________________________________________________
 330+ EB79             >//              Dictionary part
 330+ EB79             >
 330+ EB79             >                org     Dict_Ptr
 330+ 7BCB             >
 330+ 7BCB 77 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 330+ 7BCD             >
 330+ 7BCD             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 7BCD CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 330+ 7BD0             >
 330+ 7BD0             >
 330+ 7BD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 7BD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 7BD0             >
 330+ 7BD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 7BD0 31 6F 1B 69                  dw      COUNT, TUCK             // n a n
 332+ 7BD4 8A 7B 24 69                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 332+ 7BD8 8D 67
 333+ 7BDA 8A 7B A5 68                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 334+ 7BDE 62 7B BE 68                  dw      NEEDS_W, ONE_PLUS, SWAP
 334+ 7BE2 24 69
 335+ 7BE4 A3 63 23 00                  dw      LIT, 35
 336+ 7BE8 8D 67                        dw      CMOVE
 337+ 7BEA 8A 7B                        dw      NEEDS_FN
 338+ 7BEC C8 70 88 6A                  dw      PAD, ONE, F_OPEN
 338+ 7BF0 5A 67
 339+ 7BF2 77 68                        dw      ZEQUAL
 340+ 7BF4 F5 63                        dw      ZBRANCH
 341+ 7BF6 08 00                        dw      Needs_1 - $
 342+ 7BF8 77 7A                        dw          F_INCLUDE
 343+ 7BFA E8 63                        dw      BRANCH
 344+ 7BFC 04 00                        dw      Needs_2 - $
 345+ 7BFE              Needs_1:
 346+ 7BFE              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 347+ 7BFE              //              dw          LIT, 43, MESSAGE
 348+ 7BFE 10 69                        dw          DROP
 349+ 7C00              Needs_2:
 350+ 7C00 52 68                        dw      EXIT                    // ;
 351+ 7C02
 352+ 7C02
 353+ 7C02                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 353+ 7C02             >
 353+ 7C02             >Dict_Ptr        defl    $
 353+ 7C02             >
 353+ 7C02             >//              ______________________________________________________________________
 353+ 7C02             >//              Heap part
 353+ 7C02             >
 353+ 7C02             >
 353+ 7C02             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ EB79             >
 353+ EB79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ EB79             >Latest_Definition defl  Heap_Ptr
 353+ EB79             >
 353+ EB79             >                // dummy db directives used to calculate length of namec
 353+ EB79 4E 44 4F 4D >                db      "NDOM"
 353+ EB7D             >len_NFA         defl    $ - temp_NFA
 353+ EB7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ EB79             >
 353+ EB79 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ EB7A 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 353+ EB7E             >                org     $-1                 // alter last byte of Name just above to set
 353+ EB7D CD          >                db      {b $} | END_BIT     // msb as name end
 353+ EB7E             >
 353+ EB7E 6E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ EB80             >Prev_Ptr        defl    Heap_Ptr
 353+ EB80             >
 353+ EB80             >mirror_Ptr      defl    $
 353+ EB80             >
 353+ EB80 04 7C       >                dw      Dict_Ptr + 2        // xt
 353+ EB82             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ EB82             >
 353+ EB82             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ EB82             >
 353+ EB82             >//              ______________________________________________________________________
 353+ EB82             >//              Dictionary part
 353+ EB82             >
 353+ EB82             >                org     Dict_Ptr
 353+ 7C02             >
 353+ 7C02 80 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 7C04             >
 353+ 7C04             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 7C04 CD 08 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 353+ 7C07             >
 353+ 7C07             >
 353+ 7C07             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 7C07             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 7C07             >
 353+ 7C07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 7C07              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 355+ 7C07 3A 3F 2F 2A                  db ':?/*|\<>"'
 355+ 7C0B 7C 5C 3C 3E
 355+ 7C0F 22
 356+ 7C10 00                           db 0
 357+ 7C11
 358+ 7C11                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 358+ 7C11             >
 358+ 7C11             >Dict_Ptr        defl    $
 358+ 7C11             >
 358+ 7C11             >//              ______________________________________________________________________
 358+ 7C11             >//              Heap part
 358+ 7C11             >
 358+ 7C11             >
 358+ 7C11             >                org     (Heap_Ptr & $1FFF) + $E000
 358+ EB82             >
 358+ EB82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 358+ EB82             >Latest_Definition defl  Heap_Ptr
 358+ EB82             >
 358+ EB82             >                // dummy db directives used to calculate length of namec
 358+ EB82 4E 43 44 4D >                db      "NCDM"
 358+ EB86             >len_NFA         defl    $ - temp_NFA
 358+ EB86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 358+ EB82             >
 358+ EB82 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 358+ EB83 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 358+ EB87             >                org     $-1                 // alter last byte of Name just above to set
 358+ EB86 CD          >                db      {b $} | END_BIT     // msb as name end
 358+ EB87             >
 358+ EB87 79 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 358+ EB89             >Prev_Ptr        defl    Heap_Ptr
 358+ EB89             >
 358+ EB89             >mirror_Ptr      defl    $
 358+ EB89             >
 358+ EB89 13 7C       >                dw      Dict_Ptr + 2        // xt
 358+ EB8B             >Heap_Ptr        defl    $ - $E000           // save current HP
 358+ EB8B             >
 358+ EB8B             >Current_HP      defl  $ - $E000             // used to set HP once!
 358+ EB8B             >
 358+ EB8B             >//              ______________________________________________________________________
 358+ EB8B             >//              Dictionary part
 358+ EB8B             >
 358+ EB8B             >                org     Dict_Ptr
 358+ 7C11             >
 358+ 7C11 89 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 358+ 7C13             >
 358+ 7C13             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 358+ 7C13 CD 08 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 358+ 7C16             >
 358+ 7C16             >
 358+ 7C16             >                endif           ; ok        // for other definitions it "points" the correct handler
 358+ 7C16             >                // Use of "; ok" to suppress "warning[fwdref]"
 358+ 7C16             >
 358+ 7C16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 359+ 7C16              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 360+ 7C16 5F 5E 25 26                  db '_^%&$_{}~'
 360+ 7C1A 24 5F 7B 7D
 360+ 7C1E 7E
 361+ 7C1F 00                           db 0
 362+ 7C20
 363+ 7C20              // Replace illegal character in filename using the map here above
 364+ 7C20              // at the moment we need only  "
 365+ 7C20                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 365+ 7C20             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 365+ 7C20             >
 365+ 7C20             >Dict_Ptr        defl    $
 365+ 7C20             >
 365+ 7C20             >//              ______________________________________________________________________
 365+ 7C20             >//              Heap part
 365+ 7C20             >
 365+ 7C20             >
 365+ 7C20             >                org     (Heap_Ptr & $1FFF) + $E000
 365+ EB8B             >
 365+ EB8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 365+ EB8B             >Latest_Definition defl  Heap_Ptr
 365+ EB8B             >
 365+ EB8B             >                // dummy db directives used to calculate length of namec
 365+ EB8B 4D 41 50 2D >                db      "MAP-FN"
 365+ EB8F 46 4E       >
 365+ EB91             >len_NFA         defl    $ - temp_NFA
 365+ EB91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 365+ EB8B             >
 365+ EB8B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 365+ EB8C 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 365+ EB90 46 4E       >
 365+ EB92             >                org     $-1                 // alter last byte of Name just above to set
 365+ EB91 CE          >                db      {b $} | END_BIT     // msb as name end
 365+ EB92             >
 365+ EB92 82 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 365+ EB94             >Prev_Ptr        defl    Heap_Ptr
 365+ EB94             >
 365+ EB94             >mirror_Ptr      defl    $
 365+ EB94             >
 365+ EB94 22 7C       >                dw      Dict_Ptr + 2        // xt
 365+ EB96             >Heap_Ptr        defl    $ - $E000           // save current HP
 365+ EB96             >
 365+ EB96             >Current_HP      defl  $ - $E000             // used to set HP once!
 365+ EB96             >
 365+ EB96             >//              ______________________________________________________________________
 365+ EB96             >//              Dictionary part
 365+ EB96             >
 365+ EB96             >                org     Dict_Ptr
 365+ 7C20             >
 365+ 7C20 94 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 365+ 7C22             >
 365+ 7C22             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 365+ 7C22 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 365+ 7C25             >
 365+ 7C25             >
 365+ 7C25             >                endif           ; ok        // for other definitions it "points" the correct handler
 365+ 7C25             >                // Use of "; ok" to suppress "warning[fwdref]"
 365+ 7C25             >
 365+ 7C25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 366+ 7C25 31 6F 3E 6F                  dw      COUNT, BOUNDS
 367+ 7C29 34 64                        dw      C_DO
 368+ 7C2B              Needs_3:
 369+ 7C2B 13 7C 04 7C                  dw          NCDM, NDOM, LIT, 10
 369+ 7C2F A3 63 0A 00
 370+ 7C33 3A 64 9E 69                  dw          I, CFETCH
 371+ 7C37 5B 65                        dw          C_MAP
 372+ 7C39 3A 64 A7 69                  dw          I, CSTORE
 373+ 7C3D              Needs_4:
 374+ 7C3D E0 63                        dw      C_LOOP
 375+ 7C3F EC FF                        dw      Needs_3 - $
 376+ 7C41 52 68                        dw      EXIT
 377+ 7C43
 378+ 7C43
 379+ 7C43              // include  "path/cccc.f" if cccc is not defined
 380+ 7C43              // filename cccc.f is temporary stored at NEEDS-W
 381+ 7C43                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 381+ 7C43             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 381+ 7C43             >
 381+ 7C43             >Dict_Ptr        defl    $
 381+ 7C43             >
 381+ 7C43             >//              ______________________________________________________________________
 381+ 7C43             >//              Heap part
 381+ 7C43             >
 381+ 7C43             >
 381+ 7C43             >                org     (Heap_Ptr & $1FFF) + $E000
 381+ EB96             >
 381+ EB96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 381+ EB96             >Latest_Definition defl  Heap_Ptr
 381+ EB96             >
 381+ EB96             >                // dummy db directives used to calculate length of namec
 381+ EB96 4E 45 45 44 >                db      "NEEDS-F"
 381+ EB9A 53 2D 46    >
 381+ EB9D             >len_NFA         defl    $ - temp_NFA
 381+ EB9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 381+ EB96             >
 381+ EB96 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 381+ EB97 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 381+ EB9B 53 2D 46    >
 381+ EB9E             >                org     $-1                 // alter last byte of Name just above to set
 381+ EB9D C6          >                db      {b $} | END_BIT     // msb as name end
 381+ EB9E             >
 381+ EB9E 8B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 381+ EBA0             >Prev_Ptr        defl    Heap_Ptr
 381+ EBA0             >
 381+ EBA0             >mirror_Ptr      defl    $
 381+ EBA0             >
 381+ EBA0 45 7C       >                dw      Dict_Ptr + 2        // xt
 381+ EBA2             >Heap_Ptr        defl    $ - $E000           // save current HP
 381+ EBA2             >
 381+ EBA2             >Current_HP      defl  $ - $E000             // used to set HP once!
 381+ EBA2             >
 381+ EBA2             >//              ______________________________________________________________________
 381+ EBA2             >//              Dictionary part
 381+ EBA2             >
 381+ EBA2             >                org     Dict_Ptr
 381+ 7C43             >
 381+ 7C43 A0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 381+ 7C45             >
 381+ 7C45             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 381+ 7C45 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 381+ 7C48             >
 381+ 7C48             >
 381+ 7C48             >                endif           ; ok        // for other definitions it "points" the correct handler
 381+ 7C48             >                // Use of "; ok" to suppress "warning[fwdref]"
 381+ 7C48             >
 381+ 7C48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 382+ 7C48 01 73                        dw      LFIND
 383+ 7C4A F5 63                        dw      ZBRANCH
 384+ 7C4C 0A 00                        dw      Needs_5 - $
 385+ 7C4E
 386+ 7C4E 10 69 54 69                  dw          DROP, TWO_DROP
 387+ 7C52 E8 63                        dw      BRANCH
 388+ 7C54 2C 00                        dw      Needs_6 - $
 389+ 7C56              Needs_5:
 390+ 7C56 62 7B                        dw          NEEDS_W
 391+ 7C58 A3 63 23 00                  dw          LIT, 35
 392+ 7C5C 9F 70                        dw          ERASE                   // a
 393+ 7C5E A6 6B 9E 69                  dw          HERE, CFETCH, ONE_PLUS  // a n
 393+ 7C62 BE 68
 394+ 7C64 A6 6B 07 69                  dw          HERE, OVER              // a n here n
 395+ 7C68 62 7B 24 69                  dw          NEEDS_W, SWAP, CMOVE    // a n
 395+ 7C6C 8D 67
 396+ 7C6E 62 7B 22 7C                  dw          NEEDS_W, NEEDS_CHECK
 397+ 7C72 62 7B A5 68                  dw          NEEDS_W, PLUS           // a a1+1
 398+ 7C76 A3 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 399+ 7C7A 24 69 93 69                  dw          SWAP, STORE             // a
 400+ 7C7E CD 7B                        dw          NEEDS_SLASH
 401+ 7C80              Needs_6:
 402+ 7C80 52 68                        dw      EXIT
 403+ 7C82
 404+ 7C82
 405+ 7C82              // check for cccc exists in vocabulary
 406+ 7C82              // if it doesn't then  INCLUDE  inc/cccc.F
 407+ 7C82              // search in inc subdirectory
 408+ 7C82                              Colon_Def NEEDS, "NEEDS", is_normal
 408+ 7C82             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 408+ 7C82             >
 408+ 7C82             >Dict_Ptr        defl    $
 408+ 7C82             >
 408+ 7C82             >//              ______________________________________________________________________
 408+ 7C82             >//              Heap part
 408+ 7C82             >
 408+ 7C82             >
 408+ 7C82             >                org     (Heap_Ptr & $1FFF) + $E000
 408+ EBA2             >
 408+ EBA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 408+ EBA2             >Latest_Definition defl  Heap_Ptr
 408+ EBA2             >
 408+ EBA2             >                // dummy db directives used to calculate length of namec
 408+ EBA2 4E 45 45 44 >                db      "NEEDS"
 408+ EBA6 53          >
 408+ EBA7             >len_NFA         defl    $ - temp_NFA
 408+ EBA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 408+ EBA2             >
 408+ EBA2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 408+ EBA3 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 408+ EBA7 53          >
 408+ EBA8             >                org     $-1                 // alter last byte of Name just above to set
 408+ EBA7 D3          >                db      {b $} | END_BIT     // msb as name end
 408+ EBA8             >
 408+ EBA8 96 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 408+ EBAA             >Prev_Ptr        defl    Heap_Ptr
 408+ EBAA             >
 408+ EBAA             >mirror_Ptr      defl    $
 408+ EBAA             >
 408+ EBAA 84 7C       >                dw      Dict_Ptr + 2        // xt
 408+ EBAC             >Heap_Ptr        defl    $ - $E000           // save current HP
 408+ EBAC             >
 408+ EBAC             >Current_HP      defl  $ - $E000             // used to set HP once!
 408+ EBAC             >
 408+ EBAC             >//              ______________________________________________________________________
 408+ EBAC             >//              Dictionary part
 408+ EBAC             >
 408+ EBAC             >                org     Dict_Ptr
 408+ 7C82             >
 408+ 7C82 AA 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 408+ 7C84             >
 408+ 7C84             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 408+ 7C84 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 408+ 7C87             >
 408+ 7C87             >
 408+ 7C87             >                endif           ; ok        // for other definitions it "points" the correct handler
 408+ 7C87             >                // Use of "; ok" to suppress "warning[fwdref]"
 408+ 7C87             >
 408+ 7C87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 409+ 7C87 28 6B 89 69                  dw      TO_IN, FETCH
 410+ 7C8B 2B 69                        dw      DUP
 411+ 7C8D B7 7B 45 7C                  dw      NEEDS_INC, NEEDS_PATH
 412+ 7C91 28 6B 93 69                  dw      TO_IN, STORE
 413+ 7C95 C2 7B 45 7C                  dw      NEEDS_LIB, NEEDS_PATH
 414+ 7C99 28 6B 93 69                  dw      TO_IN, STORE
 415+ 7C9D 01 73                        dw      LFIND
 416+ 7C9F F5 63                        dw      ZBRANCH
 417+ 7CA1 08 00                        dw      Needs_10 - $
 418+ 7CA3 54 69                        dw          TWO_DROP
 419+ 7CA5 E8 63                        dw      BRANCH
 420+ 7CA7 10 00                        dw      Needs_11 - $
 421+ 7CA9              Needs_10:
 422+ 7CA9 62 7B 31 6F                  dw      NEEDS_W, COUNT, TYPE, SPACE
 422+ 7CAD 85 6F 8A 6C
 423+ 7CB1 A3 63 2B 00                  dw      LIT, 43, MESSAGE
 423+ 7CB5 7C 77
 424+ 7CB7              Needs_11:
 425+ 7CB7 52 68                        dw      EXIT
 426+ 7CB9
 427+ 7CB9
 428+ 7CB9              //  ______________________________________________________________________
 429+ 7CB9              //
 430+ 7CB9              // load         n --
 431+ 7CB9                              Colon_Def LOAD, "LOAD", is_normal
 431+ 7CB9             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 431+ 7CB9             >
 431+ 7CB9             >Dict_Ptr        defl    $
 431+ 7CB9             >
 431+ 7CB9             >//              ______________________________________________________________________
 431+ 7CB9             >//              Heap part
 431+ 7CB9             >
 431+ 7CB9             >
 431+ 7CB9             >                org     (Heap_Ptr & $1FFF) + $E000
 431+ EBAC             >
 431+ EBAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 431+ EBAC             >Latest_Definition defl  Heap_Ptr
 431+ EBAC             >
 431+ EBAC             >                // dummy db directives used to calculate length of namec
 431+ EBAC 4C 4F 41 44 >                db      "LOAD"
 431+ EBB0             >len_NFA         defl    $ - temp_NFA
 431+ EBB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 431+ EBAC             >
 431+ EBAC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 431+ EBAD 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 431+ EBB1             >                org     $-1                 // alter last byte of Name just above to set
 431+ EBB0 C4          >                db      {b $} | END_BIT     // msb as name end
 431+ EBB1             >
 431+ EBB1 A2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 431+ EBB3             >Prev_Ptr        defl    Heap_Ptr
 431+ EBB3             >
 431+ EBB3             >mirror_Ptr      defl    $
 431+ EBB3             >
 431+ EBB3 BB 7C       >                dw      Dict_Ptr + 2        // xt
 431+ EBB5             >Heap_Ptr        defl    $ - $E000           // save current HP
 431+ EBB5             >
 431+ EBB5             >Current_HP      defl  $ - $E000             // used to set HP once!
 431+ EBB5             >
 431+ EBB5             >//              ______________________________________________________________________
 431+ EBB5             >//              Dictionary part
 431+ EBB5             >
 431+ EBB5             >                org     Dict_Ptr
 431+ 7CB9             >
 431+ 7CB9 B3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 431+ 7CBB             >
 431+ 7CBB             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 431+ 7CBB CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 431+ 7CBE             >
 431+ 7CBE             >
 431+ 7CBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 431+ 7CBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 431+ 7CBE             >
 431+ 7CBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 432+ 7CBE 22 6B 89 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 432+ 7CC2 5C 68
 433+ 7CC4 28 6B 89 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 433+ 7CC8 5C 68
 434+ 7CCA
 435+ 7CCA 81 6A 28 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 435+ 7CCE 93 69
 436+ 7CD0 B9 6A 08 77                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 436+ 7CD4 22 6B 93 69
 437+ 7CD8 C4 74                        dw      INTERPRET               // interpret
 438+ 7CDA
 439+ 7CDA 67 68 28 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 439+ 7CDE 93 69
 440+ 7CE0 67 68 22 6B                  dw      R_TO, BLK, STORE        // r> blk !
 440+ 7CE4 93 69
 441+ 7CE6 52 68                        dw      EXIT                    // ;
 442+ 7CE8
 443+ 7CE8              //  ______________________________________________________________________
 444+ 7CE8              //
 445+ 7CE8              // -->          --
 446+ 7CE8                              Colon_Def LOAD_NEXT, "-->", is_immediate
 446+ 7CE8             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 446+ 7CE8             >
 446+ 7CE8             >Dict_Ptr        defl    $
 446+ 7CE8             >
 446+ 7CE8             >//              ______________________________________________________________________
 446+ 7CE8             >//              Heap part
 446+ 7CE8             >
 446+ 7CE8             >
 446+ 7CE8             >                org     (Heap_Ptr & $1FFF) + $E000
 446+ EBB5             >
 446+ EBB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ EBB5             >Latest_Definition defl  Heap_Ptr
 446+ EBB5             >
 446+ EBB5             >                // dummy db directives used to calculate length of namec
 446+ EBB5 2D 2D 3E    >                db      "-->"
 446+ EBB8             >len_NFA         defl    $ - temp_NFA
 446+ EBB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ EBB5             >
 446+ EBB5 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ EBB6 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 446+ EBB9             >                org     $-1                 // alter last byte of Name just above to set
 446+ EBB8 BE          >                db      {b $} | END_BIT     // msb as name end
 446+ EBB9             >
 446+ EBB9 AC 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 446+ EBBB             >Prev_Ptr        defl    Heap_Ptr
 446+ EBBB             >
 446+ EBBB             >mirror_Ptr      defl    $
 446+ EBBB             >
 446+ EBBB EA 7C       >                dw      Dict_Ptr + 2        // xt
 446+ EBBD             >Heap_Ptr        defl    $ - $E000           // save current HP
 446+ EBBD             >
 446+ EBBD             >Current_HP      defl  $ - $E000             // used to set HP once!
 446+ EBBD             >
 446+ EBBD             >//              ______________________________________________________________________
 446+ EBBD             >//              Dictionary part
 446+ EBBD             >
 446+ EBBD             >                org     Dict_Ptr
 446+ 7CE8             >
 446+ 7CE8 BB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 446+ 7CEA             >
 446+ 7CEA             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 7CEA CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 446+ 7CED             >
 446+ 7CED             >
 446+ 7CED             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 7CED             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 7CED             >
 446+ 7CED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 7CED 52 6E                        dw      QLOADING                // ?loading
 448+ 7CEF 81 6A 28 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 448+ 7CF3 93 69
 449+ 7CF5 B9 6A                        dw      BSCR                    // b/scr
 450+ 7CF7 22 6B 89 69                  dw      BLK, FETCH              // blk @
 451+ 7CFB 07 69                        dw      OVER                    // over
 452+ 7CFD 2D 77                        dw      MOD                     // mod
 453+ 7CFF F8 6B                        dw      SUBTRACT                // -
 454+ 7D01 22 6B 71 69                  dw      BLK, PLUSSTORE          // +!
 455+ 7D05 52 68                        dw      EXIT                    // ;
 456+ 7D07
 457+ 7D07              //  ______________________________________________________________________
 458+ 7D07              //
 459+ 7D07              // '            -- xt
 460+ 7D07                              Colon_Def TICK, "'", is_normal
 460+ 7D07             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 460+ 7D07             >
 460+ 7D07             >Dict_Ptr        defl    $
 460+ 7D07             >
 460+ 7D07             >//              ______________________________________________________________________
 460+ 7D07             >//              Heap part
 460+ 7D07             >
 460+ 7D07             >
 460+ 7D07             >                org     (Heap_Ptr & $1FFF) + $E000
 460+ EBBD             >
 460+ EBBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ EBBD             >Latest_Definition defl  Heap_Ptr
 460+ EBBD             >
 460+ EBBD             >                // dummy db directives used to calculate length of namec
 460+ EBBD 27          >                db      "'"
 460+ EBBE             >len_NFA         defl    $ - temp_NFA
 460+ EBBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ EBBD             >
 460+ EBBD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ EBBE 27          >                db      "'"               // name string in 7-bit ascii, but
 460+ EBBF             >                org     $-1                 // alter last byte of Name just above to set
 460+ EBBE A7          >                db      {b $} | END_BIT     // msb as name end
 460+ EBBF             >
 460+ EBBF B5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 460+ EBC1             >Prev_Ptr        defl    Heap_Ptr
 460+ EBC1             >
 460+ EBC1             >mirror_Ptr      defl    $
 460+ EBC1             >
 460+ EBC1 09 7D       >                dw      Dict_Ptr + 2        // xt
 460+ EBC3             >Heap_Ptr        defl    $ - $E000           // save current HP
 460+ EBC3             >
 460+ EBC3             >Current_HP      defl  $ - $E000             // used to set HP once!
 460+ EBC3             >
 460+ EBC3             >//              ______________________________________________________________________
 460+ EBC3             >//              Dictionary part
 460+ EBC3             >
 460+ EBC3             >                org     Dict_Ptr
 460+ 7D07             >
 460+ 7D07 C1 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 460+ 7D09             >
 460+ 7D09             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 7D09 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 7D0C             >
 460+ 7D0C             >
 460+ 7D0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 7D0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 7D0C             >
 460+ 7D0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 7D0C 01 73                        dw      LFIND                   // -find
 462+ 7D0E 77 68                        dw      ZEQUAL                  // 0=
 463+ 7D10 81 6A F5 6D                  dw      ZERO, QERROR            // 0 ?error
 464+ 7D14 10 69                        dw      DROP                    // drop
 465+ 7D16 52 68                        dw      EXIT                    // ;
 466+ 7D18
 467+ 7D18              //  ______________________________________________________________________
 468+ 7D18              //
 469+ 7D18              // forget       -- cccc
 470+ 7D18                              Colon_Def FORGET, "FORGET", is_normal
 470+ 7D18             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 470+ 7D18             >
 470+ 7D18             >Dict_Ptr        defl    $
 470+ 7D18             >
 470+ 7D18             >//              ______________________________________________________________________
 470+ 7D18             >//              Heap part
 470+ 7D18             >
 470+ 7D18             >
 470+ 7D18             >                org     (Heap_Ptr & $1FFF) + $E000
 470+ EBC3             >
 470+ EBC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 470+ EBC3             >Latest_Definition defl  Heap_Ptr
 470+ EBC3             >
 470+ EBC3             >                // dummy db directives used to calculate length of namec
 470+ EBC3 46 4F 52 47 >                db      "FORGET"
 470+ EBC7 45 54       >
 470+ EBC9             >len_NFA         defl    $ - temp_NFA
 470+ EBC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 470+ EBC3             >
 470+ EBC3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 470+ EBC4 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 470+ EBC8 45 54       >
 470+ EBCA             >                org     $-1                 // alter last byte of Name just above to set
 470+ EBC9 D4          >                db      {b $} | END_BIT     // msb as name end
 470+ EBCA             >
 470+ EBCA BD 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 470+ EBCC             >Prev_Ptr        defl    Heap_Ptr
 470+ EBCC             >
 470+ EBCC             >mirror_Ptr      defl    $
 470+ EBCC             >
 470+ EBCC 1A 7D       >                dw      Dict_Ptr + 2        // xt
 470+ EBCE             >Heap_Ptr        defl    $ - $E000           // save current HP
 470+ EBCE             >
 470+ EBCE             >Current_HP      defl  $ - $E000             // used to set HP once!
 470+ EBCE             >
 470+ EBCE             >//              ______________________________________________________________________
 470+ EBCE             >//              Dictionary part
 470+ EBCE             >
 470+ EBCE             >                org     Dict_Ptr
 470+ 7D18             >
 470+ 7D18 CC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 470+ 7D1A             >
 470+ 7D1A             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 470+ 7D1A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 470+ 7D1D             >
 470+ 7D1D             >
 470+ 7D1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 470+ 7D1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 470+ 7D1D             >
 470+ 7D1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 471+ 7D1D 46 6B 89 69                  dw      CURRENT, FETCH          // current @
 472+ 7D21 40 6B 89 69                  dw      CONTEXT, FETCH          // context @
 473+ 7D25 F8 6B A3 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 473+ 7D29 17 00 F5 6D
 474+ 7D2D 09 7D 74 6D                  dw      TICK, TO_BODY           // ' >body
 475+ 7D31 2B 69 F8 6A                  dw      DUP, FENCE, FETCH       // dup fence @
 475+ 7D35 89 69
 476+ 7D37 0F 6C A3 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 476+ 7D3B 15 00 F5 6D
 477+ 7D3F 2B 69 A9 6D                  dw      DUP, NFA                // dup nfa
 478+ 7D43
 479+ 7D43                          //  dw      DUP
 480+ 7D43                          //  dw      LIT, $E000, LESS
 481+ 7D43                          //  dw      MMU7_FETCH, ONE, EQUALS
 482+ 7D43                          //  dw      OR_OP, NOT_OP
 483+ 7D43                          //  dw      ZBRANCH
 484+ 7D43                          //  dw      Forget_then - $
 485+ 7D43
 486+ 7D43 B2 6C D5 6C                  dw      MMU7_FETCH, FROM_FAR
 487+ 7D47 16 6B 93 69                  dw      HP, STORE
 488+ 7D4B 2B 69 9E 6D                  dw      DUP, CFA, CELL_MINUS
 488+ 7D4F D9 68
 489+ 7D51              // Forget_then:
 490+ 7D51 FE 6A 93 69                  dw      DP, STORE               // dp !
 491+ 7D55 B4 6D 89 69                  dw      LFA, FETCH              // lfa @
 492+ 7D59 40 6B 89 69                  dw      CONTEXT, FETCH, STORE   // context @ !
 492+ 7D5D 93 69
 493+ 7D5F 52 68                        dw      EXIT                    // ;
 494+ 7D61
 495+ 7D61              //  ______________________________________________________________________
 496+ 7D61              //
 497+ 7D61              // marker       -- cccc
 498+ 7D61                              Colon_Def MARKER, "MARKER", is_immediate
 498+ 7D61             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 498+ 7D61             >
 498+ 7D61             >Dict_Ptr        defl    $
 498+ 7D61             >
 498+ 7D61             >//              ______________________________________________________________________
 498+ 7D61             >//              Heap part
 498+ 7D61             >
 498+ 7D61             >
 498+ 7D61             >                org     (Heap_Ptr & $1FFF) + $E000
 498+ EBCE             >
 498+ EBCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ EBCE             >Latest_Definition defl  Heap_Ptr
 498+ EBCE             >
 498+ EBCE             >                // dummy db directives used to calculate length of namec
 498+ EBCE 4D 41 52 4B >                db      "MARKER"
 498+ EBD2 45 52       >
 498+ EBD4             >len_NFA         defl    $ - temp_NFA
 498+ EBD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ EBCE             >
 498+ EBCE C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ EBCF 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 498+ EBD3 45 52       >
 498+ EBD5             >                org     $-1                 // alter last byte of Name just above to set
 498+ EBD4 D2          >                db      {b $} | END_BIT     // msb as name end
 498+ EBD5             >
 498+ EBD5 C3 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 498+ EBD7             >Prev_Ptr        defl    Heap_Ptr
 498+ EBD7             >
 498+ EBD7             >mirror_Ptr      defl    $
 498+ EBD7             >
 498+ EBD7 63 7D       >                dw      Dict_Ptr + 2        // xt
 498+ EBD9             >Heap_Ptr        defl    $ - $E000           // save current HP
 498+ EBD9             >
 498+ EBD9             >Current_HP      defl  $ - $E000             // used to set HP once!
 498+ EBD9             >
 498+ EBD9             >//              ______________________________________________________________________
 498+ EBD9             >//              Dictionary part
 498+ EBD9             >
 498+ EBD9             >                org     Dict_Ptr
 498+ 7D61             >
 498+ 7D61 D7 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 498+ 7D63             >
 498+ 7D63             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 7D63 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 498+ 7D66             >
 498+ 7D66             >
 498+ 7D66             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 7D66             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 7D66             >
 498+ 7D66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 7D66 09 6F                        dw      CBUILDS
 500+ 7D68 04 6B 89 69                  dw      VOC_LINK, FETCH, COMMA
 500+ 7D6C BC 6B
 501+ 7D6E 46 6B 89 69                  dw      CURRENT, FETCH, COMMA
 501+ 7D72 BC 6B
 502+ 7D74 40 6B 89 69                  dw      CONTEXT, FETCH, COMMA
 502+ 7D78 BC 6B
 503+ 7D7A 46 6B 89 69                  dw      CURRENT, FETCH, FETCH,  COMMA
 503+ 7D7E 89 69 BC 6B
 504+ 7D82 65 6D C3 6D                  dw      LATEST, PFA, LFA, FETCH, COMMA
 504+ 7D86 B4 6D 89 69
 504+ 7D8A BC 6B
 505+ 7D8C 14 6F                        dw      DOES_TO
 506+ 7D8E 2B 69 89 69                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 506+ 7D92 04 6B 93 69
 506+ 7D96 D4 68
 507+ 7D98 2B 69 89 69                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 507+ 7D9C 46 6B 93 69
 507+ 7DA0 D4 68
 508+ 7DA2 2B 69 89 69                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 508+ 7DA6 40 6B 93 69
 508+ 7DAA D4 68
 509+ 7DAC 2B 69 89 69                  dw      DUP, FETCH
 510+ 7DB0                          //  dw      DUP, QHEAPP
 511+ 7DB0                          //  dw      ZBRANCH
 512+ 7DB0                          //  dw      Marker_then - $
 513+ 7DB0 2B 69 16 6B                  dw          DUP, HP, STORE
 513+ 7DB4 93 69
 514+ 7DB6 C3 6D 9E 6D                  dw          PFA, CFA, CELL_MINUS
 514+ 7DBA D9 68
 515+ 7DBC              // Marker_then:
 516+ 7DBC FE 6A 93 69                  dw      DP, STORE, CELL_PLUS
 516+ 7DC0 D4 68
 517+ 7DC2 89 69 46 6B                  dw      FETCH, CURRENT, FETCH, STORE
 517+ 7DC6 89 69 93 69
 518+ 7DCA 52 68                        dw      EXIT
 519+ 7DCC
 520+ 7DCC              //  ______________________________________________________________________
 521+ 7DCC              //
 522+ 7DCC              // spaces       n --
 523+ 7DCC                              Colon_Def SPACES, "SPACES", is_normal
 523+ 7DCC             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 523+ 7DCC             >
 523+ 7DCC             >Dict_Ptr        defl    $
 523+ 7DCC             >
 523+ 7DCC             >//              ______________________________________________________________________
 523+ 7DCC             >//              Heap part
 523+ 7DCC             >
 523+ 7DCC             >
 523+ 7DCC             >                org     (Heap_Ptr & $1FFF) + $E000
 523+ EBD9             >
 523+ EBD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ EBD9             >Latest_Definition defl  Heap_Ptr
 523+ EBD9             >
 523+ EBD9             >                // dummy db directives used to calculate length of namec
 523+ EBD9 53 50 41 43 >                db      "SPACES"
 523+ EBDD 45 53       >
 523+ EBDF             >len_NFA         defl    $ - temp_NFA
 523+ EBDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ EBD9             >
 523+ EBD9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ EBDA 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 523+ EBDE 45 53       >
 523+ EBE0             >                org     $-1                 // alter last byte of Name just above to set
 523+ EBDF D3          >                db      {b $} | END_BIT     // msb as name end
 523+ EBE0             >
 523+ EBE0 CE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 523+ EBE2             >Prev_Ptr        defl    Heap_Ptr
 523+ EBE2             >
 523+ EBE2             >mirror_Ptr      defl    $
 523+ EBE2             >
 523+ EBE2 CE 7D       >                dw      Dict_Ptr + 2        // xt
 523+ EBE4             >Heap_Ptr        defl    $ - $E000           // save current HP
 523+ EBE4             >
 523+ EBE4             >Current_HP      defl  $ - $E000             // used to set HP once!
 523+ EBE4             >
 523+ EBE4             >//              ______________________________________________________________________
 523+ EBE4             >//              Dictionary part
 523+ EBE4             >
 523+ EBE4             >                org     Dict_Ptr
 523+ 7DCC             >
 523+ 7DCC E2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 523+ 7DCE             >
 523+ 7DCE             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 7DCE CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 7DD1             >
 523+ 7DD1             >
 523+ 7DD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 7DD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 7DD1             >
 523+ 7DD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 7DD1 81 6A 50 6C                  dw      ZERO, MAX
 525+ 7DD5 81 6A 0C 64                  dw      ZERO, C_Q_DO
 526+ 7DD9 08 00                        dw      Spaces_Leave - $
 527+ 7DDB              Spaces_Loop:
 528+ 7DDB 8A 6C                        dw          SPACE
 529+ 7DDD E0 63                        dw      C_LOOP
 530+ 7DDF FC FF                        dw      Spaces_Loop - $
 531+ 7DE1              Spaces_Leave:
 532+ 7DE1 52 68                        dw      EXIT                    // ;
 533+ 7DE3
 534+ 7DE3              //  ______________________________________________________________________
 535+ 7DE3              //
 536+ 7DE3              // <#           --
 537+ 7DE3                              Colon_Def BEGIN_DASH, "<#", is_normal
 537+ 7DE3             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 537+ 7DE3             >
 537+ 7DE3             >Dict_Ptr        defl    $
 537+ 7DE3             >
 537+ 7DE3             >//              ______________________________________________________________________
 537+ 7DE3             >//              Heap part
 537+ 7DE3             >
 537+ 7DE3             >
 537+ 7DE3             >                org     (Heap_Ptr & $1FFF) + $E000
 537+ EBE4             >
 537+ EBE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 537+ EBE4             >Latest_Definition defl  Heap_Ptr
 537+ EBE4             >
 537+ EBE4             >                // dummy db directives used to calculate length of namec
 537+ EBE4 3C 23       >                db      "<#"
 537+ EBE6             >len_NFA         defl    $ - temp_NFA
 537+ EBE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 537+ EBE4             >
 537+ EBE4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 537+ EBE5 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 537+ EBE7             >                org     $-1                 // alter last byte of Name just above to set
 537+ EBE6 A3          >                db      {b $} | END_BIT     // msb as name end
 537+ EBE7             >
 537+ EBE7 D9 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 537+ EBE9             >Prev_Ptr        defl    Heap_Ptr
 537+ EBE9             >
 537+ EBE9             >mirror_Ptr      defl    $
 537+ EBE9             >
 537+ EBE9 E5 7D       >                dw      Dict_Ptr + 2        // xt
 537+ EBEB             >Heap_Ptr        defl    $ - $E000           // save current HP
 537+ EBEB             >
 537+ EBEB             >Current_HP      defl  $ - $E000             // used to set HP once!
 537+ EBEB             >
 537+ EBEB             >//              ______________________________________________________________________
 537+ EBEB             >//              Dictionary part
 537+ EBEB             >
 537+ EBEB             >                org     Dict_Ptr
 537+ 7DE3             >
 537+ 7DE3 E9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 537+ 7DE5             >
 537+ 7DE5             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 537+ 7DE5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 537+ 7DE8             >
 537+ 7DE8             >
 537+ 7DE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 537+ 7DE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 537+ 7DE8             >
 537+ 7DE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 7DE8 C8 70 70 6B                  dw      PAD, HLD, STORE
 538+ 7DEC 93 69
 539+ 7DEE 52 68                        dw      EXIT
 540+ 7DF0
 541+ 7DF0              //  ______________________________________________________________________
 542+ 7DF0              //
 543+ 7DF0              // #>           --
 544+ 7DF0                              Colon_Def DASH_END, "#>", is_normal
 544+ 7DF0             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 544+ 7DF0             >
 544+ 7DF0             >Dict_Ptr        defl    $
 544+ 7DF0             >
 544+ 7DF0             >//              ______________________________________________________________________
 544+ 7DF0             >//              Heap part
 544+ 7DF0             >
 544+ 7DF0             >
 544+ 7DF0             >                org     (Heap_Ptr & $1FFF) + $E000
 544+ EBEB             >
 544+ EBEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 544+ EBEB             >Latest_Definition defl  Heap_Ptr
 544+ EBEB             >
 544+ EBEB             >                // dummy db directives used to calculate length of namec
 544+ EBEB 23 3E       >                db      "#>"
 544+ EBED             >len_NFA         defl    $ - temp_NFA
 544+ EBED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 544+ EBEB             >
 544+ EBEB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 544+ EBEC 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 544+ EBEE             >                org     $-1                 // alter last byte of Name just above to set
 544+ EBED BE          >                db      {b $} | END_BIT     // msb as name end
 544+ EBEE             >
 544+ EBEE E4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 544+ EBF0             >Prev_Ptr        defl    Heap_Ptr
 544+ EBF0             >
 544+ EBF0             >mirror_Ptr      defl    $
 544+ EBF0             >
 544+ EBF0 F2 7D       >                dw      Dict_Ptr + 2        // xt
 544+ EBF2             >Heap_Ptr        defl    $ - $E000           // save current HP
 544+ EBF2             >
 544+ EBF2             >Current_HP      defl  $ - $E000             // used to set HP once!
 544+ EBF2             >
 544+ EBF2             >//              ______________________________________________________________________
 544+ EBF2             >//              Dictionary part
 544+ EBF2             >
 544+ EBF2             >                org     Dict_Ptr
 544+ 7DF0             >
 544+ 7DF0 F0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 544+ 7DF2             >
 544+ 7DF2             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 544+ 7DF2 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 544+ 7DF5             >
 544+ 7DF5             >
 544+ 7DF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 544+ 7DF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 544+ 7DF5             >
 544+ 7DF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 545+ 7DF5 54 69                        dw      TWO_DROP
 546+ 7DF7 70 6B 89 69                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 546+ 7DFB C8 70 07 69
 546+ 7DFF F8 6B
 547+ 7E01 52 68                        dw      EXIT
 548+ 7E03
 549+ 7E03              //  ______________________________________________________________________
 550+ 7E03              //
 551+ 7E03              // sign         n d -- d
 552+ 7E03                              Colon_Def SIGN, "SIGN", is_normal
 552+ 7E03             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 552+ 7E03             >
 552+ 7E03             >Dict_Ptr        defl    $
 552+ 7E03             >
 552+ 7E03             >//              ______________________________________________________________________
 552+ 7E03             >//              Heap part
 552+ 7E03             >
 552+ 7E03             >
 552+ 7E03             >                org     (Heap_Ptr & $1FFF) + $E000
 552+ EBF2             >
 552+ EBF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 552+ EBF2             >Latest_Definition defl  Heap_Ptr
 552+ EBF2             >
 552+ EBF2             >                // dummy db directives used to calculate length of namec
 552+ EBF2 53 49 47 4E >                db      "SIGN"
 552+ EBF6             >len_NFA         defl    $ - temp_NFA
 552+ EBF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 552+ EBF2             >
 552+ EBF2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 552+ EBF3 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 552+ EBF7             >                org     $-1                 // alter last byte of Name just above to set
 552+ EBF6 CE          >                db      {b $} | END_BIT     // msb as name end
 552+ EBF7             >
 552+ EBF7 EB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 552+ EBF9             >Prev_Ptr        defl    Heap_Ptr
 552+ EBF9             >
 552+ EBF9             >mirror_Ptr      defl    $
 552+ EBF9             >
 552+ EBF9 05 7E       >                dw      Dict_Ptr + 2        // xt
 552+ EBFB             >Heap_Ptr        defl    $ - $E000           // save current HP
 552+ EBFB             >
 552+ EBFB             >Current_HP      defl  $ - $E000             // used to set HP once!
 552+ EBFB             >
 552+ EBFB             >//              ______________________________________________________________________
 552+ EBFB             >//              Dictionary part
 552+ EBFB             >
 552+ EBFB             >                org     Dict_Ptr
 552+ 7E03             >
 552+ 7E03 F9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 552+ 7E05             >
 552+ 7E05             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 552+ 7E05 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 552+ 7E08             >
 552+ 7E08             >
 552+ 7E08             >                endif           ; ok        // for other definitions it "points" the correct handler
 552+ 7E08             >                // Use of "; ok" to suppress "warning[fwdref]"
 552+ 7E08             >
 552+ 7E08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 553+ 7E08 8A 68                        dw      ZLESS
 554+ 7E0A F5 63                        dw      ZBRANCH
 555+ 7E0C 08 00                        dw      Sign_Endif - $
 556+ 7E0E A3 63 2D 00                  dw          LIT, 45, HOLD
 556+ 7E12 B5 70
 557+ 7E14              Sign_Endif:
 558+ 7E14 52 68                        dw      EXIT
 559+ 7E16
 560+ 7E16              //  ______________________________________________________________________
 561+ 7E16              //
 562+ 7E16              // #           d1 -- d2
 563+ 7E16                              Colon_Def DASH, "#", is_normal
 563+ 7E16             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 563+ 7E16             >
 563+ 7E16             >Dict_Ptr        defl    $
 563+ 7E16             >
 563+ 7E16             >//              ______________________________________________________________________
 563+ 7E16             >//              Heap part
 563+ 7E16             >
 563+ 7E16             >
 563+ 7E16             >                org     (Heap_Ptr & $1FFF) + $E000
 563+ EBFB             >
 563+ EBFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ EBFB             >Latest_Definition defl  Heap_Ptr
 563+ EBFB             >
 563+ EBFB             >                // dummy db directives used to calculate length of namec
 563+ EBFB 23          >                db      "#"
 563+ EBFC             >len_NFA         defl    $ - temp_NFA
 563+ EBFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ EBFB             >
 563+ EBFB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ EBFC 23          >                db      "#"               // name string in 7-bit ascii, but
 563+ EBFD             >                org     $-1                 // alter last byte of Name just above to set
 563+ EBFC A3          >                db      {b $} | END_BIT     // msb as name end
 563+ EBFD             >
 563+ EBFD F2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 563+ EBFF             >Prev_Ptr        defl    Heap_Ptr
 563+ EBFF             >
 563+ EBFF             >mirror_Ptr      defl    $
 563+ EBFF             >
 563+ EBFF 18 7E       >                dw      Dict_Ptr + 2        // xt
 563+ EC01             >Heap_Ptr        defl    $ - $E000           // save current HP
 563+ EC01             >
 563+ EC01             >Current_HP      defl  $ - $E000             // used to set HP once!
 563+ EC01             >
 563+ EC01             >//              ______________________________________________________________________
 563+ EC01             >//              Dictionary part
 563+ EC01             >
 563+ EC01             >                org     Dict_Ptr
 563+ 7E16             >
 563+ 7E16 FF 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 563+ 7E18             >
 563+ 7E18             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 7E18 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 7E1B             >
 563+ 7E1B             >
 563+ 7E1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 7E1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 7E1B             >
 563+ 7E1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 7E1B 52 6B 89 69                  dw      BASE, FETCH
 565+ 7E1F
 566+ 7E1F 5C 68                        dw      TO_R                    // >r           ( ud1 )
 567+ 7E21 81 6A 72 68                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 567+ 7E25 D9 67
 568+ 7E27 67 68 24 69                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 568+ 7E2B 5C 68
 569+ 7E2D D9 67                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 570+ 7E2F 67 68                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 571+ 7E31
 572+ 7E31 32 69                        dw      ROT
 573+ 7E33 A3 63 09 00                  dw      LIT, 9, OVER, LESS
 573+ 7E37 07 69 1D 6C
 574+ 7E3B F5 63                        dw      ZBRANCH
 575+ 7E3D 08 00                        dw      Dash_Endif - $
 576+ 7E3F A3 63 07 00                  dw          LIT, 7, PLUS
 576+ 7E43 A5 68
 577+ 7E45              Dash_Endif:
 578+ 7E45
 579+ 7E45 A3 63 30 00                  dw      LIT, 48, PLUS, HOLD
 579+ 7E49 A5 68 B5 70
 580+ 7E4D 52 68                        dw      EXIT
 581+ 7E4F
 582+ 7E4F              //  ______________________________________________________________________
 583+ 7E4F              //
 584+ 7E4F              // #s           d1 -- d2
 585+ 7E4F                              Colon_Def DASHES, "#S", is_normal
 585+ 7E4F             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 585+ 7E4F             >
 585+ 7E4F             >Dict_Ptr        defl    $
 585+ 7E4F             >
 585+ 7E4F             >//              ______________________________________________________________________
 585+ 7E4F             >//              Heap part
 585+ 7E4F             >
 585+ 7E4F             >
 585+ 7E4F             >                org     (Heap_Ptr & $1FFF) + $E000
 585+ EC01             >
 585+ EC01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ EC01             >Latest_Definition defl  Heap_Ptr
 585+ EC01             >
 585+ EC01             >                // dummy db directives used to calculate length of namec
 585+ EC01 23 53       >                db      "#S"
 585+ EC03             >len_NFA         defl    $ - temp_NFA
 585+ EC03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ EC01             >
 585+ EC01 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ EC02 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 585+ EC04             >                org     $-1                 // alter last byte of Name just above to set
 585+ EC03 D3          >                db      {b $} | END_BIT     // msb as name end
 585+ EC04             >
 585+ EC04 FB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 585+ EC06             >Prev_Ptr        defl    Heap_Ptr
 585+ EC06             >
 585+ EC06             >mirror_Ptr      defl    $
 585+ EC06             >
 585+ EC06 51 7E       >                dw      Dict_Ptr + 2        // xt
 585+ EC08             >Heap_Ptr        defl    $ - $E000           // save current HP
 585+ EC08             >
 585+ EC08             >Current_HP      defl  $ - $E000             // used to set HP once!
 585+ EC08             >
 585+ EC08             >//              ______________________________________________________________________
 585+ EC08             >//              Dictionary part
 585+ EC08             >
 585+ EC08             >                org     Dict_Ptr
 585+ 7E4F             >
 585+ 7E4F 06 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 585+ 7E51             >
 585+ 7E51             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 7E51 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 7E54             >
 585+ 7E54             >
 585+ 7E54             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 7E54             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 7E54             >
 585+ 7E54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 7E54              Dashes_Begin:
 587+ 7E54 18 7E 67 69                  dw      DASH, TWO_DUP
 588+ 7E58 1B 68 77 68                  dw          OR_OP, ZEQUAL
 589+ 7E5C F5 63                        dw      ZBRANCH
 590+ 7E5E F6 FF                        dw      Dashes_Begin - $
 591+ 7E60 52 68                        dw      EXIT
 592+ 7E62
 593+ 7E62              //  ______________________________________________________________________
 594+ 7E62              //
 595+ 7E62              // d.r          d n --
 596+ 7E62                              Colon_Def D_DOT_R, "D.R", is_normal
 596+ 7E62             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 596+ 7E62             >
 596+ 7E62             >Dict_Ptr        defl    $
 596+ 7E62             >
 596+ 7E62             >//              ______________________________________________________________________
 596+ 7E62             >//              Heap part
 596+ 7E62             >
 596+ 7E62             >
 596+ 7E62             >                org     (Heap_Ptr & $1FFF) + $E000
 596+ EC08             >
 596+ EC08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 596+ EC08             >Latest_Definition defl  Heap_Ptr
 596+ EC08             >
 596+ EC08             >                // dummy db directives used to calculate length of namec
 596+ EC08 44 2E 52    >                db      "D.R"
 596+ EC0B             >len_NFA         defl    $ - temp_NFA
 596+ EC0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 596+ EC08             >
 596+ EC08 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 596+ EC09 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 596+ EC0C             >                org     $-1                 // alter last byte of Name just above to set
 596+ EC0B D2          >                db      {b $} | END_BIT     // msb as name end
 596+ EC0C             >
 596+ EC0C 01 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 596+ EC0E             >Prev_Ptr        defl    Heap_Ptr
 596+ EC0E             >
 596+ EC0E             >mirror_Ptr      defl    $
 596+ EC0E             >
 596+ EC0E 64 7E       >                dw      Dict_Ptr + 2        // xt
 596+ EC10             >Heap_Ptr        defl    $ - $E000           // save current HP
 596+ EC10             >
 596+ EC10             >Current_HP      defl  $ - $E000             // used to set HP once!
 596+ EC10             >
 596+ EC10             >//              ______________________________________________________________________
 596+ EC10             >//              Dictionary part
 596+ EC10             >
 596+ EC10             >                org     Dict_Ptr
 596+ 7E62             >
 596+ 7E62 0E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 596+ 7E64             >
 596+ 7E64             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 596+ 7E64 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 596+ 7E67             >
 596+ 7E67             >
 596+ 7E67             >                endif           ; ok        // for other definitions it "points" the correct handler
 596+ 7E67             >                // Use of "; ok" to suppress "warning[fwdref]"
 596+ 7E67             >
 596+ 7E67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 597+ 7E67 5C 68                        dw      TO_R
 598+ 7E69 1B 69 74 76                  dw      TUCK, DABS
 599+ 7E6D E5 7D 51 7E                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 599+ 7E71 32 69 05 7E
 599+ 7E75 F2 7D
 600+ 7E77 67 68                        dw      R_TO
 601+ 7E79 07 69 F8 6B                  dw      OVER, SUBTRACT, SPACES, TYPE
 601+ 7E7D CE 7D 85 6F
 602+ 7E81 52 68                        dw      EXIT
 603+ 7E83
 604+ 7E83              //  ______________________________________________________________________
 605+ 7E83              //
 606+ 7E83              // .r           n1 n2 --
 607+ 7E83                              Colon_Def DOT_R, ".R", is_normal
 607+ 7E83             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 607+ 7E83             >
 607+ 7E83             >Dict_Ptr        defl    $
 607+ 7E83             >
 607+ 7E83             >//              ______________________________________________________________________
 607+ 7E83             >//              Heap part
 607+ 7E83             >
 607+ 7E83             >
 607+ 7E83             >                org     (Heap_Ptr & $1FFF) + $E000
 607+ EC10             >
 607+ EC10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ EC10             >Latest_Definition defl  Heap_Ptr
 607+ EC10             >
 607+ EC10             >                // dummy db directives used to calculate length of namec
 607+ EC10 2E 52       >                db      ".R"
 607+ EC12             >len_NFA         defl    $ - temp_NFA
 607+ EC12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ EC10             >
 607+ EC10 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ EC11 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 607+ EC13             >                org     $-1                 // alter last byte of Name just above to set
 607+ EC12 D2          >                db      {b $} | END_BIT     // msb as name end
 607+ EC13             >
 607+ EC13 08 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 607+ EC15             >Prev_Ptr        defl    Heap_Ptr
 607+ EC15             >
 607+ EC15             >mirror_Ptr      defl    $
 607+ EC15             >
 607+ EC15 85 7E       >                dw      Dict_Ptr + 2        // xt
 607+ EC17             >Heap_Ptr        defl    $ - $E000           // save current HP
 607+ EC17             >
 607+ EC17             >Current_HP      defl  $ - $E000             // used to set HP once!
 607+ EC17             >
 607+ EC17             >//              ______________________________________________________________________
 607+ EC17             >//              Dictionary part
 607+ EC17             >
 607+ EC17             >                org     Dict_Ptr
 607+ 7E83             >
 607+ 7E83 15 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 607+ 7E85             >
 607+ 7E85             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 7E85 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 7E88             >
 607+ 7E88             >
 607+ 7E88             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 7E88             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 7E88             >
 607+ 7E88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 7E88 5C 68                        dw      TO_R
 609+ 7E8A ED 6B 67 68                  dw      S_TO_D, R_TO
 610+ 7E8E 64 7E                        dw      D_DOT_R
 611+ 7E90 52 68                        dw      EXIT
 612+ 7E92
 613+ 7E92              //  ______________________________________________________________________
 614+ 7E92              //
 615+ 7E92              // d.           d --
 616+ 7E92                              Colon_Def D_DOT, "D.", is_normal
 616+ 7E92             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 616+ 7E92             >
 616+ 7E92             >Dict_Ptr        defl    $
 616+ 7E92             >
 616+ 7E92             >//              ______________________________________________________________________
 616+ 7E92             >//              Heap part
 616+ 7E92             >
 616+ 7E92             >
 616+ 7E92             >                org     (Heap_Ptr & $1FFF) + $E000
 616+ EC17             >
 616+ EC17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ EC17             >Latest_Definition defl  Heap_Ptr
 616+ EC17             >
 616+ EC17             >                // dummy db directives used to calculate length of namec
 616+ EC17 44 2E       >                db      "D."
 616+ EC19             >len_NFA         defl    $ - temp_NFA
 616+ EC19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ EC17             >
 616+ EC17 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ EC18 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 616+ EC1A             >                org     $-1                 // alter last byte of Name just above to set
 616+ EC19 AE          >                db      {b $} | END_BIT     // msb as name end
 616+ EC1A             >
 616+ EC1A 10 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 616+ EC1C             >Prev_Ptr        defl    Heap_Ptr
 616+ EC1C             >
 616+ EC1C             >mirror_Ptr      defl    $
 616+ EC1C             >
 616+ EC1C 94 7E       >                dw      Dict_Ptr + 2        // xt
 616+ EC1E             >Heap_Ptr        defl    $ - $E000           // save current HP
 616+ EC1E             >
 616+ EC1E             >Current_HP      defl  $ - $E000             // used to set HP once!
 616+ EC1E             >
 616+ EC1E             >//              ______________________________________________________________________
 616+ EC1E             >//              Dictionary part
 616+ EC1E             >
 616+ EC1E             >                org     Dict_Ptr
 616+ 7E92             >
 616+ 7E92 1C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 616+ 7E94             >
 616+ 7E94             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 7E94 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 616+ 7E97             >
 616+ 7E97             >
 616+ 7E97             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 7E97             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 7E97             >
 616+ 7E97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 7E97 81 6A 64 7E                  dw      ZERO, D_DOT_R, SPACE
 617+ 7E9B 8A 6C
 618+ 7E9D 52 68                        dw      EXIT
 619+ 7E9F
 620+ 7E9F              //  ______________________________________________________________________
 621+ 7E9F              //
 622+ 7E9F              // .            n --
 623+ 7E9F                              Colon_Def DOT, ".", is_normal
 623+ 7E9F             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 623+ 7E9F             >
 623+ 7E9F             >Dict_Ptr        defl    $
 623+ 7E9F             >
 623+ 7E9F             >//              ______________________________________________________________________
 623+ 7E9F             >//              Heap part
 623+ 7E9F             >
 623+ 7E9F             >
 623+ 7E9F             >                org     (Heap_Ptr & $1FFF) + $E000
 623+ EC1E             >
 623+ EC1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 623+ EC1E             >Latest_Definition defl  Heap_Ptr
 623+ EC1E             >
 623+ EC1E             >                // dummy db directives used to calculate length of namec
 623+ EC1E 2E          >                db      "."
 623+ EC1F             >len_NFA         defl    $ - temp_NFA
 623+ EC1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 623+ EC1E             >
 623+ EC1E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 623+ EC1F 2E          >                db      "."               // name string in 7-bit ascii, but
 623+ EC20             >                org     $-1                 // alter last byte of Name just above to set
 623+ EC1F AE          >                db      {b $} | END_BIT     // msb as name end
 623+ EC20             >
 623+ EC20 17 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 623+ EC22             >Prev_Ptr        defl    Heap_Ptr
 623+ EC22             >
 623+ EC22             >mirror_Ptr      defl    $
 623+ EC22             >
 623+ EC22 A1 7E       >                dw      Dict_Ptr + 2        // xt
 623+ EC24             >Heap_Ptr        defl    $ - $E000           // save current HP
 623+ EC24             >
 623+ EC24             >Current_HP      defl  $ - $E000             // used to set HP once!
 623+ EC24             >
 623+ EC24             >//              ______________________________________________________________________
 623+ EC24             >//              Dictionary part
 623+ EC24             >
 623+ EC24             >                org     Dict_Ptr
 623+ 7E9F             >
 623+ 7E9F 22 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 623+ 7EA1             >
 623+ 7EA1             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 623+ 7EA1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 623+ 7EA4             >
 623+ 7EA4             >
 623+ 7EA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 623+ 7EA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 623+ 7EA4             >
 623+ 7EA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 624+ 7EA4 ED 6B 94 7E                  dw      S_TO_D, D_DOT
 625+ 7EA8 52 68                        dw      EXIT
 626+ 7EAA
 627+ 7EAA              //  ______________________________________________________________________
 628+ 7EAA              //
 629+ 7EAA              // ?            n --
 630+ 7EAA                              Colon_Def QUESTION, "?", is_normal
 630+ 7EAA             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 630+ 7EAA             >
 630+ 7EAA             >Dict_Ptr        defl    $
 630+ 7EAA             >
 630+ 7EAA             >//              ______________________________________________________________________
 630+ 7EAA             >//              Heap part
 630+ 7EAA             >
 630+ 7EAA             >
 630+ 7EAA             >                org     (Heap_Ptr & $1FFF) + $E000
 630+ EC24             >
 630+ EC24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ EC24             >Latest_Definition defl  Heap_Ptr
 630+ EC24             >
 630+ EC24             >                // dummy db directives used to calculate length of namec
 630+ EC24 3F          >                db      "?"
 630+ EC25             >len_NFA         defl    $ - temp_NFA
 630+ EC25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ EC24             >
 630+ EC24 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ EC25 3F          >                db      "?"               // name string in 7-bit ascii, but
 630+ EC26             >                org     $-1                 // alter last byte of Name just above to set
 630+ EC25 BF          >                db      {b $} | END_BIT     // msb as name end
 630+ EC26             >
 630+ EC26 1E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 630+ EC28             >Prev_Ptr        defl    Heap_Ptr
 630+ EC28             >
 630+ EC28             >mirror_Ptr      defl    $
 630+ EC28             >
 630+ EC28 AC 7E       >                dw      Dict_Ptr + 2        // xt
 630+ EC2A             >Heap_Ptr        defl    $ - $E000           // save current HP
 630+ EC2A             >
 630+ EC2A             >Current_HP      defl  $ - $E000             // used to set HP once!
 630+ EC2A             >
 630+ EC2A             >//              ______________________________________________________________________
 630+ EC2A             >//              Dictionary part
 630+ EC2A             >
 630+ EC2A             >                org     Dict_Ptr
 630+ 7EAA             >
 630+ 7EAA 28 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 630+ 7EAC             >
 630+ 7EAC             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 7EAC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 630+ 7EAF             >
 630+ 7EAF             >
 630+ 7EAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 7EAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 7EAF             >
 630+ 7EAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 7EAF 89 69 A1 7E                  dw      FETCH, DOT
 632+ 7EB3 52 68                        dw      EXIT
 633+ 7EB5
 634+ 7EB5              //  ______________________________________________________________________
 635+ 7EB5              //
 636+ 7EB5              // u.           u --
 637+ 7EB5                              Colon_Def U_DOT, "U.", is_normal
 637+ 7EB5             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 637+ 7EB5             >
 637+ 7EB5             >Dict_Ptr        defl    $
 637+ 7EB5             >
 637+ 7EB5             >//              ______________________________________________________________________
 637+ 7EB5             >//              Heap part
 637+ 7EB5             >
 637+ 7EB5             >
 637+ 7EB5             >                org     (Heap_Ptr & $1FFF) + $E000
 637+ EC2A             >
 637+ EC2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 637+ EC2A             >Latest_Definition defl  Heap_Ptr
 637+ EC2A             >
 637+ EC2A             >                // dummy db directives used to calculate length of namec
 637+ EC2A 55 2E       >                db      "U."
 637+ EC2C             >len_NFA         defl    $ - temp_NFA
 637+ EC2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 637+ EC2A             >
 637+ EC2A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 637+ EC2B 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 637+ EC2D             >                org     $-1                 // alter last byte of Name just above to set
 637+ EC2C AE          >                db      {b $} | END_BIT     // msb as name end
 637+ EC2D             >
 637+ EC2D 24 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 637+ EC2F             >Prev_Ptr        defl    Heap_Ptr
 637+ EC2F             >
 637+ EC2F             >mirror_Ptr      defl    $
 637+ EC2F             >
 637+ EC2F B7 7E       >                dw      Dict_Ptr + 2        // xt
 637+ EC31             >Heap_Ptr        defl    $ - $E000           // save current HP
 637+ EC31             >
 637+ EC31             >Current_HP      defl  $ - $E000             // used to set HP once!
 637+ EC31             >
 637+ EC31             >//              ______________________________________________________________________
 637+ EC31             >//              Dictionary part
 637+ EC31             >
 637+ EC31             >                org     Dict_Ptr
 637+ 7EB5             >
 637+ 7EB5 2F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 637+ 7EB7             >
 637+ 7EB7             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 637+ 7EB7 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 637+ 7EBA             >
 637+ 7EBA             >
 637+ 7EBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 637+ 7EBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 637+ 7EBA             >
 637+ 7EBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 638+ 7EBA 81 6A 94 7E                  dw      ZERO, D_DOT
 639+ 7EBE 52 68                        dw      EXIT
 640+ 7EC0
 641+ 7EC0              //  ______________________________________________________________________
 642+ 7EC0              //
 643+ 7EC0              // words        --
 644+ 7EC0                              Colon_Def WORDS, "WORDS", is_normal
 644+ 7EC0             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 644+ 7EC0             >
 644+ 7EC0             >Dict_Ptr        defl    $
 644+ 7EC0             >
 644+ 7EC0             >//              ______________________________________________________________________
 644+ 7EC0             >//              Heap part
 644+ 7EC0             >
 644+ 7EC0             >
 644+ 7EC0             >                org     (Heap_Ptr & $1FFF) + $E000
 644+ EC31             >
 644+ EC31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 644+ EC31             >Latest_Definition defl  Heap_Ptr
 644+ EC31             >
 644+ EC31             >                // dummy db directives used to calculate length of namec
 644+ EC31 57 4F 52 44 >                db      "WORDS"
 644+ EC35 53          >
 644+ EC36             >len_NFA         defl    $ - temp_NFA
 644+ EC36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 644+ EC31             >
 644+ EC31 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 644+ EC32 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 644+ EC36 53          >
 644+ EC37             >                org     $-1                 // alter last byte of Name just above to set
 644+ EC36 D3          >                db      {b $} | END_BIT     // msb as name end
 644+ EC37             >
 644+ EC37 2A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 644+ EC39             >Prev_Ptr        defl    Heap_Ptr
 644+ EC39             >
 644+ EC39             >mirror_Ptr      defl    $
 644+ EC39             >
 644+ EC39 C2 7E       >                dw      Dict_Ptr + 2        // xt
 644+ EC3B             >Heap_Ptr        defl    $ - $E000           // save current HP
 644+ EC3B             >
 644+ EC3B             >Current_HP      defl  $ - $E000             // used to set HP once!
 644+ EC3B             >
 644+ EC3B             >//              ______________________________________________________________________
 644+ EC3B             >//              Dictionary part
 644+ EC3B             >
 644+ EC3B             >                org     Dict_Ptr
 644+ 7EC0             >
 644+ 7EC0 39 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 644+ 7EC2             >
 644+ 7EC2             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 644+ 7EC2 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 644+ 7EC5             >
 644+ 7EC5             >
 644+ 7EC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 644+ 7EC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 644+ 7EC5             >
 644+ 7EC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 645+ 7EC5 A3 63 80 00                  dw      LIT, 128, OUT, STORE
 645+ 7EC9 2E 6B 93 69
 646+ 7ECD 40 6B 89 69                  dw      CONTEXT, FETCH, FETCH
 646+ 7ED1 89 69
 647+ 7ED3              Words_Begin:
 648+ 7ED3 FB 6C                        dw          FAR // Q TO HEAP
 649+ 7ED5 2B 69 9E 69                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 649+ 7ED9 A3 63 1F 00
 649+ 7EDD 0C 68
 650+ 7EDF 2E 6B 89 69                  dw          OUT, FETCH, PLUS
 650+ 7EE3 A5 68
 651+ 7EE5 AB 6A 1D 6C                  dw          CL, LESS, ZEQUAL
 651+ 7EE9 77 68
 652+ 7EEB F5 63                        dw          ZBRANCH
 653+ 7EED 0A 00                        dw          Words_Endif - $
 654+ 7EEF B6 65 81 6A                  dw              CR, ZERO, OUT, STORE
 654+ 7EF3 2E 6B 93 69
 655+ 7EF7              Words_Endif:
 656+ 7EF7 2B 69 4F 73                  dw          DUP, ID_DOT
 657+ 7EFB 88 6A 95 6C                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 657+ 7EFF BE 68 89 69
 658+ 7F03 2B 69 77 68                  dw          DUP, ZEQUAL
 659+ 7F07 B3 66 1B 68                  dw          QTERMINAL, OR_OP
 660+ 7F0B F5 63                        dw      ZBRANCH
 661+ 7F0D C6 FF                        dw      Words_Begin - $
 662+ 7F0F 10 69                        dw      DROP
 663+ 7F11 52 68                        dw      EXIT
 664+ 7F13
 665+ 7F13              //  ______________________________________________________________________
 666+ 7F13              //
 667+ 7F13              // list         n --
 668+ 7F13                              Colon_Def LIST, "LIST", is_normal
 668+ 7F13             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 668+ 7F13             >
 668+ 7F13             >Dict_Ptr        defl    $
 668+ 7F13             >
 668+ 7F13             >//              ______________________________________________________________________
 668+ 7F13             >//              Heap part
 668+ 7F13             >
 668+ 7F13             >
 668+ 7F13             >                org     (Heap_Ptr & $1FFF) + $E000
 668+ EC3B             >
 668+ EC3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 668+ EC3B             >Latest_Definition defl  Heap_Ptr
 668+ EC3B             >
 668+ EC3B             >                // dummy db directives used to calculate length of namec
 668+ EC3B 4C 49 53 54 >                db      "LIST"
 668+ EC3F             >len_NFA         defl    $ - temp_NFA
 668+ EC3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 668+ EC3B             >
 668+ EC3B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 668+ EC3C 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 668+ EC40             >                org     $-1                 // alter last byte of Name just above to set
 668+ EC3F D4          >                db      {b $} | END_BIT     // msb as name end
 668+ EC40             >
 668+ EC40 31 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 668+ EC42             >Prev_Ptr        defl    Heap_Ptr
 668+ EC42             >
 668+ EC42             >mirror_Ptr      defl    $
 668+ EC42             >
 668+ EC42 15 7F       >                dw      Dict_Ptr + 2        // xt
 668+ EC44             >Heap_Ptr        defl    $ - $E000           // save current HP
 668+ EC44             >
 668+ EC44             >Current_HP      defl  $ - $E000             // used to set HP once!
 668+ EC44             >
 668+ EC44             >//              ______________________________________________________________________
 668+ EC44             >//              Dictionary part
 668+ EC44             >
 668+ EC44             >                org     Dict_Ptr
 668+ 7F13             >
 668+ 7F13 42 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 668+ 7F15             >
 668+ 7F15             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 668+ 7F15 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 668+ 7F18             >
 668+ 7F18             >
 668+ 7F18             >                endif           ; ok        // for other definitions it "points" the correct handler
 668+ 7F18             >                // Use of "; ok" to suppress "warning[fwdref]"
 668+ 7F18             >
 668+ 7F18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 669+ 7F18 CE 6E B6 65                  dw      DECIMAL, CR
 670+ 7F1C 2B 69 34 6B                  dw      DUP, SCR, STORE
 670+ 7F20 93 69
 671+ 7F22 22 71                        dw      C_DOT_QUOTE
 672+ 7F24 05 53 63 72                  db      5, "Scr# "
 672+ 7F28 23 20
 673+ 7F2A A1 7E                        dw      DOT
 674+ 7F2C C0 6A 81 6A                  dw      LSCR, ZERO, C_DO
 674+ 7F30 34 64
 675+ 7F32              List_Loop:
 676+ 7F32 B6 65                        dw          CR
 677+ 7F34 3A 64 96 6A                  dw          I, THREE
 678+ 7F38 85 7E 8A 6C                  dw          DOT_R, SPACE
 679+ 7F3C 3A 64 34 6B                  dw          I, SCR, FETCH, DOT_LINE
 679+ 7F40 89 69 6F 77
 680+ 7F44 B3 66                        dw          QTERMINAL
 681+ 7F46 F5 63                        dw          ZBRANCH
 682+ 7F48 06 00                        dw          List_Endif - $
 683+ 7F4A 00 64                        dw              C_LEAVE
 684+ 7F4C 06 00                        dw              List_Leave - $
 685+ 7F4E              List_Endif:
 686+ 7F4E E0 63                        dw      C_LOOP
 687+ 7F50 E2 FF                        dw      List_Loop - $
 688+ 7F52              List_Leave:
 689+ 7F52 B6 65                        dw      CR
 690+ 7F54 52 68                        dw      EXIT
 691+ 7F56
 692+ 7F56              //  ______________________________________________________________________
 693+ 7F56              //
 694+ 7F56              // index        n1 n2 --
 695+ 7F56                              Colon_Def INDEX, "INDEX", is_normal
 695+ 7F56             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 695+ 7F56             >
 695+ 7F56             >Dict_Ptr        defl    $
 695+ 7F56             >
 695+ 7F56             >//              ______________________________________________________________________
 695+ 7F56             >//              Heap part
 695+ 7F56             >
 695+ 7F56             >
 695+ 7F56             >                org     (Heap_Ptr & $1FFF) + $E000
 695+ EC44             >
 695+ EC44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 695+ EC44             >Latest_Definition defl  Heap_Ptr
 695+ EC44             >
 695+ EC44             >                // dummy db directives used to calculate length of namec
 695+ EC44 49 4E 44 45 >                db      "INDEX"
 695+ EC48 58          >
 695+ EC49             >len_NFA         defl    $ - temp_NFA
 695+ EC49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 695+ EC44             >
 695+ EC44 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 695+ EC45 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 695+ EC49 58          >
 695+ EC4A             >                org     $-1                 // alter last byte of Name just above to set
 695+ EC49 D8          >                db      {b $} | END_BIT     // msb as name end
 695+ EC4A             >
 695+ EC4A 3B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 695+ EC4C             >Prev_Ptr        defl    Heap_Ptr
 695+ EC4C             >
 695+ EC4C             >mirror_Ptr      defl    $
 695+ EC4C             >
 695+ EC4C 58 7F       >                dw      Dict_Ptr + 2        // xt
 695+ EC4E             >Heap_Ptr        defl    $ - $E000           // save current HP
 695+ EC4E             >
 695+ EC4E             >Current_HP      defl  $ - $E000             // used to set HP once!
 695+ EC4E             >
 695+ EC4E             >//              ______________________________________________________________________
 695+ EC4E             >//              Dictionary part
 695+ EC4E             >
 695+ EC4E             >                org     Dict_Ptr
 695+ 7F56             >
 695+ 7F56 4C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 695+ 7F58             >
 695+ 7F58             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 695+ 7F58 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 695+ 7F5B             >
 695+ 7F5B             >
 695+ 7F5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 695+ 7F5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 695+ 7F5B             >
 695+ 7F5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 696+ 7F5B BE 68 24 69                  dw      ONE_PLUS, SWAP, C_DO
 696+ 7F5F 34 64
 697+ 7F61              Index_Loop:
 698+ 7F61 B6 65 3A 64                  dw          CR, I, THREE
 698+ 7F65 96 6A
 699+ 7F67 85 7E 8A 6C                  dw          DOT_R, SPACE
 700+ 7F6B 81 6A 3A 64                  dw          ZERO, I, DOT_LINE
 700+ 7F6F 6F 77
 701+ 7F71 B3 66                        dw          QTERMINAL
 702+ 7F73 F5 63                        dw          ZBRANCH
 703+ 7F75 06 00                        dw          Index_Endif - $
 704+ 7F77 00 64                        dw              C_LEAVE
 705+ 7F79 06 00                        dw              Index_Leave - $
 706+ 7F7B              Index_Endif:
 707+ 7F7B E0 63                        dw      C_LOOP
 708+ 7F7D E4 FF                        dw      Index_Loop - $
 709+ 7F7F              Index_Leave:
 710+ 7F7F B6 65                        dw      CR
 711+ 7F81 52 68                        dw      EXIT
 712+ 7F83
 713+ 7F83              //  ______________________________________________________________________
 714+ 7F83              //
 715+ 7F83              // cls          --
 716+ 7F83                              Colon_Def CLS, "CLS", is_normal
 716+ 7F83             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 716+ 7F83             >
 716+ 7F83             >Dict_Ptr        defl    $
 716+ 7F83             >
 716+ 7F83             >//              ______________________________________________________________________
 716+ 7F83             >//              Heap part
 716+ 7F83             >
 716+ 7F83             >
 716+ 7F83             >                org     (Heap_Ptr & $1FFF) + $E000
 716+ EC4E             >
 716+ EC4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 716+ EC4E             >Latest_Definition defl  Heap_Ptr
 716+ EC4E             >
 716+ EC4E             >                // dummy db directives used to calculate length of namec
 716+ EC4E 43 4C 53    >                db      "CLS"
 716+ EC51             >len_NFA         defl    $ - temp_NFA
 716+ EC51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 716+ EC4E             >
 716+ EC4E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 716+ EC4F 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 716+ EC52             >                org     $-1                 // alter last byte of Name just above to set
 716+ EC51 D3          >                db      {b $} | END_BIT     // msb as name end
 716+ EC52             >
 716+ EC52 44 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 716+ EC54             >Prev_Ptr        defl    Heap_Ptr
 716+ EC54             >
 716+ EC54             >mirror_Ptr      defl    $
 716+ EC54             >
 716+ EC54 85 7F       >                dw      Dict_Ptr + 2        // xt
 716+ EC56             >Heap_Ptr        defl    $ - $E000           // save current HP
 716+ EC56             >
 716+ EC56             >Current_HP      defl  $ - $E000             // used to set HP once!
 716+ EC56             >
 716+ EC56             >//              ______________________________________________________________________
 716+ EC56             >//              Dictionary part
 716+ EC56             >
 716+ EC56             >                org     Dict_Ptr
 716+ 7F83             >
 716+ 7F83 54 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 716+ 7F85             >
 716+ 7F85             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 716+ 7F85 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 716+ 7F88             >
 716+ 7F88             >
 716+ 7F88             >                endif           ; ok        // for other definitions it "points" the correct handler
 716+ 7F88             >                // Use of "; ok" to suppress "warning[fwdref]"
 716+ 7F88             >
 716+ 7F88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 717+ 7F88 A3 63 0E 00                  dw      LIT, $0E, EMITC
 717+ 7F8C A2 65
 718+ 7F8E 52 68                        dw      EXIT
 719+ 7F90
 720+ 7F90              //  ______________________________________________________________________
 721+ 7F90              //
 722+ 7F90              // splash       --
 723+ 7F90              //              Colon_Def SPLASH, "SPLASH", is_normal
 724+ 7F90              //              dw      CLS
 725+ 7F90              //              dw      C_DOT_QUOTE
 726+ 7F90              //              db      87
 727+ 7F90              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 728+ 7F90              //              db      "Heap Vocabulary - build 20230809", 13  // 33
 729+ 7F90              //              db      "1990-2023 Matteo Vitturi", 13        // 25
 730+ 7F90              //              dw      EXIT
 731+ 7F90
 732+ 7F90              //  ______________________________________________________________________
 733+ 7F90              //
 734+ 7F90              // splash       --
 735+ 7F90                              Colon_Def SPLASH, "SPLASH", is_normal
 735+ 7F90             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 735+ 7F90             >
 735+ 7F90             >Dict_Ptr        defl    $
 735+ 7F90             >
 735+ 7F90             >//              ______________________________________________________________________
 735+ 7F90             >//              Heap part
 735+ 7F90             >
 735+ 7F90             >
 735+ 7F90             >                org     (Heap_Ptr & $1FFF) + $E000
 735+ EC56             >
 735+ EC56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 735+ EC56             >Latest_Definition defl  Heap_Ptr
 735+ EC56             >
 735+ EC56             >                // dummy db directives used to calculate length of namec
 735+ EC56 53 50 4C 41 >                db      "SPLASH"
 735+ EC5A 53 48       >
 735+ EC5C             >len_NFA         defl    $ - temp_NFA
 735+ EC5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 735+ EC56             >
 735+ EC56 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 735+ EC57 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 735+ EC5B 53 48       >
 735+ EC5D             >                org     $-1                 // alter last byte of Name just above to set
 735+ EC5C C8          >                db      {b $} | END_BIT     // msb as name end
 735+ EC5D             >
 735+ EC5D 4E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 735+ EC5F             >Prev_Ptr        defl    Heap_Ptr
 735+ EC5F             >
 735+ EC5F             >mirror_Ptr      defl    $
 735+ EC5F             >
 735+ EC5F 92 7F       >                dw      Dict_Ptr + 2        // xt
 735+ EC61             >Heap_Ptr        defl    $ - $E000           // save current HP
 735+ EC61             >
 735+ EC61             >Current_HP      defl  $ - $E000             // used to set HP once!
 735+ EC61             >
 735+ EC61             >//              ______________________________________________________________________
 735+ EC61             >//              Dictionary part
 735+ EC61             >
 735+ EC61             >                org     Dict_Ptr
 735+ 7F90             >
 735+ 7F90 5F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 735+ 7F92             >
 735+ 7F92             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 735+ 7F92 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 735+ 7F95             >
 735+ 7F95             >
 735+ 7F95             >                endif           ; ok        // for other definitions it "points" the correct handler
 735+ 7F95             >                // Use of "; ok" to suppress "warning[fwdref]"
 735+ 7F95             >
 735+ 7F95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 736+ 7F95 85 7F                        dw      CLS
 737+ 7F97 A3 63 02 00                  dw      LIT, Splash_Ptr
 738+ 7F9B C8 6C BF 6C                  dw      TO_FAR, MMU7_STORE
 739+ 7F9F 31 6F 85 6F                  dw      COUNT, TYPE
 740+ 7FA3 52 68                        dw      EXIT
 741+ 7FA5
 742+ 7FA5              //  ______________________________________________________________________
 743+ 7FA5              //
 744+ 7FA5              // video        --
 745+ 7FA5                              Colon_Def VIDEO, "VIDEO", is_normal
 745+ 7FA5             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 745+ 7FA5             >
 745+ 7FA5             >Dict_Ptr        defl    $
 745+ 7FA5             >
 745+ 7FA5             >//              ______________________________________________________________________
 745+ 7FA5             >//              Heap part
 745+ 7FA5             >
 745+ 7FA5             >
 745+ 7FA5             >                org     (Heap_Ptr & $1FFF) + $E000
 745+ EC61             >
 745+ EC61             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 745+ EC61             >Latest_Definition defl  Heap_Ptr
 745+ EC61             >
 745+ EC61             >                // dummy db directives used to calculate length of namec
 745+ EC61 56 49 44 45 >                db      "VIDEO"
 745+ EC65 4F          >
 745+ EC66             >len_NFA         defl    $ - temp_NFA
 745+ EC66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 745+ EC61             >
 745+ EC61 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 745+ EC62 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 745+ EC66 4F          >
 745+ EC67             >                org     $-1                 // alter last byte of Name just above to set
 745+ EC66 CF          >                db      {b $} | END_BIT     // msb as name end
 745+ EC67             >
 745+ EC67 56 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 745+ EC69             >Prev_Ptr        defl    Heap_Ptr
 745+ EC69             >
 745+ EC69             >mirror_Ptr      defl    $
 745+ EC69             >
 745+ EC69 A7 7F       >                dw      Dict_Ptr + 2        // xt
 745+ EC6B             >Heap_Ptr        defl    $ - $E000           // save current HP
 745+ EC6B             >
 745+ EC6B             >Current_HP      defl  $ - $E000             // used to set HP once!
 745+ EC6B             >
 745+ EC6B             >//              ______________________________________________________________________
 745+ EC6B             >//              Dictionary part
 745+ EC6B             >
 745+ EC6B             >                org     Dict_Ptr
 745+ 7FA5             >
 745+ 7FA5 69 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 745+ 7FA7             >
 745+ 7FA7             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 745+ 7FA7 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 745+ 7FAA             >
 745+ 7FAA             >
 745+ 7FAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 745+ 7FAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 745+ 7FAA             >
 745+ 7FAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 746+ 7FAA 8F 6A 2B 69                  dw      TWO, DUP, DEVICE, STORE
 746+ 7FAE A4 77 93 69
 747+ 7FB2 C7 66                        dw      SELECT
 748+ 7FB4 52 68                        dw      EXIT
 749+ 7FB6
 750+ 7FB6              //  ______________________________________________________________________
 751+ 7FB6              //
 752+ 7FB6              // autoexec     --
 753+ 7FB6              // this word is called the first time the Forth system boot to
 754+ 7FB6              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 755+ 7FB6                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 755+ 7FB6             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 755+ 7FB6             >
 755+ 7FB6             >Dict_Ptr        defl    $
 755+ 7FB6             >
 755+ 7FB6             >//              ______________________________________________________________________
 755+ 7FB6             >//              Heap part
 755+ 7FB6             >
 755+ 7FB6             >
 755+ 7FB6             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ EC6B             >
 755+ EC6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ EC6B             >Latest_Definition defl  Heap_Ptr
 755+ EC6B             >
 755+ EC6B             >                // dummy db directives used to calculate length of namec
 755+ EC6B 41 55 54 4F >                db      "AUTOEXEC"
 755+ EC6F 45 58 45 43 >
 755+ EC73             >len_NFA         defl    $ - temp_NFA
 755+ EC73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ EC6B             >
 755+ EC6B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ EC6C 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 755+ EC70 45 58 45 43 >
 755+ EC74             >                org     $-1                 // alter last byte of Name just above to set
 755+ EC73 C3          >                db      {b $} | END_BIT     // msb as name end
 755+ EC74             >
 755+ EC74 61 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ EC76             >Prev_Ptr        defl    Heap_Ptr
 755+ EC76             >
 755+ EC76             >mirror_Ptr      defl    $
 755+ EC76             >
 755+ EC76 B8 7F       >                dw      Dict_Ptr + 2        // xt
 755+ EC78             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ EC78             >
 755+ EC78             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ EC78             >
 755+ EC78             >//              ______________________________________________________________________
 755+ EC78             >//              Dictionary part
 755+ EC78             >
 755+ EC78             >                org     Dict_Ptr
 755+ 7FB6             >
 755+ 7FB6 76 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 7FB8             >
 755+ 7FB8             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 7FB8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 7FBB             >
 755+ 7FBB             >
 755+ 7FBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 7FBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 7FBB             >
 755+ 7FBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 7FBB A3 63 0B 00                  dw      LIT, 11
 757+ 7FBF A3 63 48 6A                  dw      LIT, NOOP
 758+ 7FC3 A3 63 B6 75                  dw      LIT, Autoexec_Ptr
 759+ 7FC7 93 69                        dw      STORE
 760+ 7FC9 BB 7C                        dw      LOAD
 761+ 7FCB 6B 75                        dw      QUIT
 762+ 7FCD 52 68                        dw      EXIT
 763+ 7FCF
 764+ 7FCF
 765+ 7FCF              //  ______________________________________________________________________
 766+ 7FCF              //
 767+ 7FCF              // bye     --
 768+ 7FCF              //
 769+ 7FCF                              Colon_Def BYE, "BYE", is_normal
 769+ 7FCF             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 769+ 7FCF             >
 769+ 7FCF             >Dict_Ptr        defl    $
 769+ 7FCF             >
 769+ 7FCF             >//              ______________________________________________________________________
 769+ 7FCF             >//              Heap part
 769+ 7FCF             >
 769+ 7FCF             >
 769+ 7FCF             >                org     (Heap_Ptr & $1FFF) + $E000
 769+ EC78             >
 769+ EC78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 769+ EC78             >Latest_Definition defl  Heap_Ptr
 769+ EC78             >
 769+ EC78             >                // dummy db directives used to calculate length of namec
 769+ EC78 42 59 45    >                db      "BYE"
 769+ EC7B             >len_NFA         defl    $ - temp_NFA
 769+ EC7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 769+ EC78             >
 769+ EC78 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 769+ EC79 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 769+ EC7C             >                org     $-1                 // alter last byte of Name just above to set
 769+ EC7B C5          >                db      {b $} | END_BIT     // msb as name end
 769+ EC7C             >
 769+ EC7C 6B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 769+ EC7E             >Prev_Ptr        defl    Heap_Ptr
 769+ EC7E             >
 769+ EC7E             >mirror_Ptr      defl    $
 769+ EC7E             >
 769+ EC7E D1 7F       >                dw      Dict_Ptr + 2        // xt
 769+ EC80             >Heap_Ptr        defl    $ - $E000           // save current HP
 769+ EC80             >
 769+ EC80             >Current_HP      defl  $ - $E000             // used to set HP once!
 769+ EC80             >
 769+ EC80             >//              ______________________________________________________________________
 769+ EC80             >//              Dictionary part
 769+ EC80             >
 769+ EC80             >                org     Dict_Ptr
 769+ 7FCF             >
 769+ 7FCF 7E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 769+ 7FD1             >
 769+ 7FD1             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 769+ 7FD1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 769+ 7FD4             >
 769+ 7FD4             >
 769+ 7FD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 769+ 7FD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 769+ 7FD4             >
 769+ 7FD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 770+ 7FD4 BD 79                        dw      FLUSH
 771+ 7FD6 0B 79                        dw      EMPTY_BUFFERS
 772+ 7FD8 F7 77 89 69                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 772+ 7FDC FF 66 10 69
 773+ 7FE0 81 6A C7 6A                  dw      ZERO, PLUS_ORIGIN
 774+ 7FE4 39 76                        dw      BASIC
 775+ 7FE6
 776+ 7FE6              //  ______________________________________________________________________
 777+ 7FE6              //
 778+ 7FE6              // invv     --
 779+ 7FE6              //
 780+ 7FE6              //              Colon_Def INVV, "INVV", is_normal
 781+ 7FE6              //              dw      LIT, 20, EMITC, ONE, EMITC
 782+ 7FE6              //              dw      EXIT
 783+ 7FE6
 784+ 7FE6              //  ______________________________________________________________________
 785+ 7FE6              //
 786+ 7FE6              // truv     --
 787+ 7FE6              //
 788+ 7FE6              //              Colon_Def TRUV, "TRUV", is_normal
 789+ 7FE6              //              dw      LIT, 20, EMITC, ZERO, EMITC
 790+ 7FE6              //              dw      EXIT
 791+ 7FE6
 792+ 7FE6              //  ______________________________________________________________________
 793+ 7FE6              //
 794+ 7FE6              // mark     --
 795+ 7FE6              //
 796+ 7FE6              //              Colon_Def MARK, "MARK", is_normal
 797+ 7FE6              //              dw      INVV, TYPE, TRUV
 798+ 7FE6              //              dw      EXIT
 799+ 7FE6
 800+ 7FE6              //  ______________________________________________________________________
 801+ 7FE6              //
 802+ 7FE6              // back     --
 803+ 7FE6              //
 804+ 7FE6                              Colon_Def BACK, "BACK", is_normal
 804+ 7FE6             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 804+ 7FE6             >
 804+ 7FE6             >Dict_Ptr        defl    $
 804+ 7FE6             >
 804+ 7FE6             >//              ______________________________________________________________________
 804+ 7FE6             >//              Heap part
 804+ 7FE6             >
 804+ 7FE6             >
 804+ 7FE6             >                org     (Heap_Ptr & $1FFF) + $E000
 804+ EC80             >
 804+ EC80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 804+ EC80             >Latest_Definition defl  Heap_Ptr
 804+ EC80             >
 804+ EC80             >                // dummy db directives used to calculate length of namec
 804+ EC80 42 41 43 4B >                db      "BACK"
 804+ EC84             >len_NFA         defl    $ - temp_NFA
 804+ EC84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 804+ EC80             >
 804+ EC80 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 804+ EC81 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 804+ EC85             >                org     $-1                 // alter last byte of Name just above to set
 804+ EC84 CB          >                db      {b $} | END_BIT     // msb as name end
 804+ EC85             >
 804+ EC85 78 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 804+ EC87             >Prev_Ptr        defl    Heap_Ptr
 804+ EC87             >
 804+ EC87             >mirror_Ptr      defl    $
 804+ EC87             >
 804+ EC87 E8 7F       >                dw      Dict_Ptr + 2        // xt
 804+ EC89             >Heap_Ptr        defl    $ - $E000           // save current HP
 804+ EC89             >
 804+ EC89             >Current_HP      defl  $ - $E000             // used to set HP once!
 804+ EC89             >
 804+ EC89             >//              ______________________________________________________________________
 804+ EC89             >//              Dictionary part
 804+ EC89             >
 804+ EC89             >                org     Dict_Ptr
 804+ 7FE6             >
 804+ 7FE6 87 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 804+ 7FE8             >
 804+ 7FE8             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 804+ 7FE8 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 804+ 7FEB             >
 804+ 7FEB             >
 804+ 7FEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 804+ 7FEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 804+ 7FEB             >
 804+ 7FEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 805+ 7FEB A6 6B F8 6B                  dw      HERE, SUBTRACT, COMMA
 805+ 7FEF BC 6B
 806+ 7FF1 52 68                        dw      EXIT
 807+ 7FF3
 808+ 7FF3              //  ______________________________________________________________________
 809+ 7FF3              //
 810+ 7FF3              // if          ( -- a 2 ) \ compile-time
 811+ 7FF3              // IF ... THEN
 812+ 7FF3              // IF ... ELSE ... ENDIF
 813+ 7FF3                              Colon_Def IF, "IF", is_immediate
 813+ 7FF3             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 813+ 7FF3             >
 813+ 7FF3             >Dict_Ptr        defl    $
 813+ 7FF3             >
 813+ 7FF3             >//              ______________________________________________________________________
 813+ 7FF3             >//              Heap part
 813+ 7FF3             >
 813+ 7FF3             >
 813+ 7FF3             >                org     (Heap_Ptr & $1FFF) + $E000
 813+ EC89             >
 813+ EC89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 813+ EC89             >Latest_Definition defl  Heap_Ptr
 813+ EC89             >
 813+ EC89             >                // dummy db directives used to calculate length of namec
 813+ EC89 49 46       >                db      "IF"
 813+ EC8B             >len_NFA         defl    $ - temp_NFA
 813+ EC8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 813+ EC89             >
 813+ EC89 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 813+ EC8A 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 813+ EC8C             >                org     $-1                 // alter last byte of Name just above to set
 813+ EC8B C6          >                db      {b $} | END_BIT     // msb as name end
 813+ EC8C             >
 813+ EC8C 80 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 813+ EC8E             >Prev_Ptr        defl    Heap_Ptr
 813+ EC8E             >
 813+ EC8E             >mirror_Ptr      defl    $
 813+ EC8E             >
 813+ EC8E F5 7F       >                dw      Dict_Ptr + 2        // xt
 813+ EC90             >Heap_Ptr        defl    $ - $E000           // save current HP
 813+ EC90             >
 813+ EC90             >Current_HP      defl  $ - $E000             // used to set HP once!
 813+ EC90             >
 813+ EC90             >//              ______________________________________________________________________
 813+ EC90             >//              Dictionary part
 813+ EC90             >
 813+ EC90             >                org     Dict_Ptr
 813+ 7FF3             >
 813+ 7FF3 8E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 813+ 7FF5             >
 813+ 7FF5             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 813+ 7FF5 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 813+ 7FF8             >
 813+ 7FF8             >
 813+ 7FF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 813+ 7FF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 813+ 7FF8             >
 813+ 7FF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 814+ 7FF8 65 6E F5 63                  dw      COMPILE, ZBRANCH
 815+ 7FFC A6 6B 81 6A                  dw      HERE, ZERO, COMMA
 815+ 8000 BC 6B
 816+ 8002 8F 6A                        dw      TWO
 817+ 8004 52 68                        dw      EXIT
 818+ 8006
 819+ 8006              //  ______________________________________________________________________
 820+ 8006              //
 821+ 8006              // then        ( a 2 -- ) \ compile-time
 822+ 8006              //
 823+ 8006                              Colon_Def THEN, "THEN", is_immediate
 823+ 8006             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 823+ 8006             >
 823+ 8006             >Dict_Ptr        defl    $
 823+ 8006             >
 823+ 8006             >//              ______________________________________________________________________
 823+ 8006             >//              Heap part
 823+ 8006             >
 823+ 8006             >
 823+ 8006             >                org     (Heap_Ptr & $1FFF) + $E000
 823+ EC90             >
 823+ EC90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 823+ EC90             >Latest_Definition defl  Heap_Ptr
 823+ EC90             >
 823+ EC90             >                // dummy db directives used to calculate length of namec
 823+ EC90 54 48 45 4E >                db      "THEN"
 823+ EC94             >len_NFA         defl    $ - temp_NFA
 823+ EC94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 823+ EC90             >
 823+ EC90 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 823+ EC91 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 823+ EC95             >                org     $-1                 // alter last byte of Name just above to set
 823+ EC94 CE          >                db      {b $} | END_BIT     // msb as name end
 823+ EC95             >
 823+ EC95 89 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 823+ EC97             >Prev_Ptr        defl    Heap_Ptr
 823+ EC97             >
 823+ EC97             >mirror_Ptr      defl    $
 823+ EC97             >
 823+ EC97 08 80       >                dw      Dict_Ptr + 2        // xt
 823+ EC99             >Heap_Ptr        defl    $ - $E000           // save current HP
 823+ EC99             >
 823+ EC99             >Current_HP      defl  $ - $E000             // used to set HP once!
 823+ EC99             >
 823+ EC99             >//              ______________________________________________________________________
 823+ EC99             >//              Dictionary part
 823+ EC99             >
 823+ EC99             >                org     Dict_Ptr
 823+ 8006             >
 823+ 8006 97 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 823+ 8008             >
 823+ 8008             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 823+ 8008 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 823+ 800B             >
 823+ 800B             >
 823+ 800B             >                endif           ; ok        // for other definitions it "points" the correct handler
 823+ 800B             >                // Use of "; ok" to suppress "warning[fwdref]"
 823+ 800B             >
 823+ 800B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 824+ 800B 0A 6E                        dw      QCOMP
 825+ 800D 8F 6A 2E 6E                  dw      TWO, QPAIRS
 826+ 8011 A6 6B 07 69                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 826+ 8015 F8 6B 24 69
 826+ 8019 93 69
 827+ 801B 52 68                        dw      EXIT
 828+ 801D
 829+ 801D              //  ______________________________________________________________________
 830+ 801D              //
 831+ 801D              // endif       ( a 2 -- ) \ compile-time
 832+ 801D              //
 833+ 801D                              Colon_Def ENDIF, "ENDIF", is_immediate
 833+ 801D             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 833+ 801D             >
 833+ 801D             >Dict_Ptr        defl    $
 833+ 801D             >
 833+ 801D             >//              ______________________________________________________________________
 833+ 801D             >//              Heap part
 833+ 801D             >
 833+ 801D             >
 833+ 801D             >                org     (Heap_Ptr & $1FFF) + $E000
 833+ EC99             >
 833+ EC99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 833+ EC99             >Latest_Definition defl  Heap_Ptr
 833+ EC99             >
 833+ EC99             >                // dummy db directives used to calculate length of namec
 833+ EC99 45 4E 44 49 >                db      "ENDIF"
 833+ EC9D 46          >
 833+ EC9E             >len_NFA         defl    $ - temp_NFA
 833+ EC9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 833+ EC99             >
 833+ EC99 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 833+ EC9A 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 833+ EC9E 46          >
 833+ EC9F             >                org     $-1                 // alter last byte of Name just above to set
 833+ EC9E C6          >                db      {b $} | END_BIT     // msb as name end
 833+ EC9F             >
 833+ EC9F 90 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 833+ ECA1             >Prev_Ptr        defl    Heap_Ptr
 833+ ECA1             >
 833+ ECA1             >mirror_Ptr      defl    $
 833+ ECA1             >
 833+ ECA1 1F 80       >                dw      Dict_Ptr + 2        // xt
 833+ ECA3             >Heap_Ptr        defl    $ - $E000           // save current HP
 833+ ECA3             >
 833+ ECA3             >Current_HP      defl  $ - $E000             // used to set HP once!
 833+ ECA3             >
 833+ ECA3             >//              ______________________________________________________________________
 833+ ECA3             >//              Dictionary part
 833+ ECA3             >
 833+ ECA3             >                org     Dict_Ptr
 833+ 801D             >
 833+ 801D A1 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 833+ 801F             >
 833+ 801F             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 833+ 801F CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 833+ 8022             >
 833+ 8022             >
 833+ 8022             >                endif           ; ok        // for other definitions it "points" the correct handler
 833+ 8022             >                // Use of "; ok" to suppress "warning[fwdref]"
 833+ 8022             >
 833+ 8022             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 834+ 8022 08 80                        dw      THEN
 835+ 8024 52 68                        dw      EXIT
 836+ 8026
 837+ 8026              //  ______________________________________________________________________
 838+ 8026              //
 839+ 8026              // else        ( a1 2 -- a2 2 ) \ compile-time
 840+ 8026              //
 841+ 8026                              Colon_Def ELSE, "ELSE", is_immediate
 841+ 8026             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 841+ 8026             >
 841+ 8026             >Dict_Ptr        defl    $
 841+ 8026             >
 841+ 8026             >//              ______________________________________________________________________
 841+ 8026             >//              Heap part
 841+ 8026             >
 841+ 8026             >
 841+ 8026             >                org     (Heap_Ptr & $1FFF) + $E000
 841+ ECA3             >
 841+ ECA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 841+ ECA3             >Latest_Definition defl  Heap_Ptr
 841+ ECA3             >
 841+ ECA3             >                // dummy db directives used to calculate length of namec
 841+ ECA3 45 4C 53 45 >                db      "ELSE"
 841+ ECA7             >len_NFA         defl    $ - temp_NFA
 841+ ECA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 841+ ECA3             >
 841+ ECA3 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 841+ ECA4 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 841+ ECA8             >                org     $-1                 // alter last byte of Name just above to set
 841+ ECA7 C5          >                db      {b $} | END_BIT     // msb as name end
 841+ ECA8             >
 841+ ECA8 99 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 841+ ECAA             >Prev_Ptr        defl    Heap_Ptr
 841+ ECAA             >
 841+ ECAA             >mirror_Ptr      defl    $
 841+ ECAA             >
 841+ ECAA 28 80       >                dw      Dict_Ptr + 2        // xt
 841+ ECAC             >Heap_Ptr        defl    $ - $E000           // save current HP
 841+ ECAC             >
 841+ ECAC             >Current_HP      defl  $ - $E000             // used to set HP once!
 841+ ECAC             >
 841+ ECAC             >//              ______________________________________________________________________
 841+ ECAC             >//              Dictionary part
 841+ ECAC             >
 841+ ECAC             >                org     Dict_Ptr
 841+ 8026             >
 841+ 8026 AA 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 841+ 8028             >
 841+ 8028             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 841+ 8028 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 841+ 802B             >
 841+ 802B             >
 841+ 802B             >                endif           ; ok        // for other definitions it "points" the correct handler
 841+ 802B             >                // Use of "; ok" to suppress "warning[fwdref]"
 841+ 802B             >
 841+ 802B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 842+ 802B 0A 6E                        dw      QCOMP
 843+ 802D 8F 6A 2E 6E                  dw      TWO, QPAIRS
 844+ 8031 65 6E E8 63                  dw      COMPILE, BRANCH
 845+ 8035 A6 6B 81 6A                  dw      HERE, ZERO, COMMA
 845+ 8039 BC 6B
 846+ 803B 24 69 8F 6A                  dw      SWAP, TWO, THEN
 846+ 803F 08 80
 847+ 8041 8F 6A                        dw      TWO
 848+ 8043 52 68                        dw      EXIT
 849+ 8045
 850+ 8045              //  ______________________________________________________________________
 851+ 8045              //
 852+ 8045              // begin        ( -- a 1 ) \ compile-time
 853+ 8045              // BEGIN ... AGAIN
 854+ 8045              // BEGIN ... f UNTIL
 855+ 8045              // BEGIN ... f WHILE ... REPEAT
 856+ 8045                              Colon_Def BEGIN, "BEGIN", is_immediate
 856+ 8045             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 856+ 8045             >
 856+ 8045             >Dict_Ptr        defl    $
 856+ 8045             >
 856+ 8045             >//              ______________________________________________________________________
 856+ 8045             >//              Heap part
 856+ 8045             >
 856+ 8045             >
 856+ 8045             >                org     (Heap_Ptr & $1FFF) + $E000
 856+ ECAC             >
 856+ ECAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 856+ ECAC             >Latest_Definition defl  Heap_Ptr
 856+ ECAC             >
 856+ ECAC             >                // dummy db directives used to calculate length of namec
 856+ ECAC 42 45 47 49 >                db      "BEGIN"
 856+ ECB0 4E          >
 856+ ECB1             >len_NFA         defl    $ - temp_NFA
 856+ ECB1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 856+ ECAC             >
 856+ ECAC C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 856+ ECAD 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 856+ ECB1 4E          >
 856+ ECB2             >                org     $-1                 // alter last byte of Name just above to set
 856+ ECB1 CE          >                db      {b $} | END_BIT     // msb as name end
 856+ ECB2             >
 856+ ECB2 A3 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 856+ ECB4             >Prev_Ptr        defl    Heap_Ptr
 856+ ECB4             >
 856+ ECB4             >mirror_Ptr      defl    $
 856+ ECB4             >
 856+ ECB4 47 80       >                dw      Dict_Ptr + 2        // xt
 856+ ECB6             >Heap_Ptr        defl    $ - $E000           // save current HP
 856+ ECB6             >
 856+ ECB6             >Current_HP      defl  $ - $E000             // used to set HP once!
 856+ ECB6             >
 856+ ECB6             >//              ______________________________________________________________________
 856+ ECB6             >//              Dictionary part
 856+ ECB6             >
 856+ ECB6             >                org     Dict_Ptr
 856+ 8045             >
 856+ 8045 B4 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 856+ 8047             >
 856+ 8047             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 856+ 8047 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 856+ 804A             >
 856+ 804A             >
 856+ 804A             >                endif           ; ok        // for other definitions it "points" the correct handler
 856+ 804A             >                // Use of "; ok" to suppress "warning[fwdref]"
 856+ 804A             >
 856+ 804A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 857+ 804A 0A 6E                        dw      QCOMP
 858+ 804C A6 6B                        dw      HERE
 859+ 804E 8F 6A                        dw      TWO
 860+ 8050 52 68                        dw      EXIT
 861+ 8052
 862+ 8052              //  ______________________________________________________________________
 863+ 8052              //
 864+ 8052              // again        ( a 1 -- ) \ compile-time
 865+ 8052                              Colon_Def AGAIN, "AGAIN", is_immediate
 865+ 8052             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 865+ 8052             >
 865+ 8052             >Dict_Ptr        defl    $
 865+ 8052             >
 865+ 8052             >//              ______________________________________________________________________
 865+ 8052             >//              Heap part
 865+ 8052             >
 865+ 8052             >
 865+ 8052             >                org     (Heap_Ptr & $1FFF) + $E000
 865+ ECB6             >
 865+ ECB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 865+ ECB6             >Latest_Definition defl  Heap_Ptr
 865+ ECB6             >
 865+ ECB6             >                // dummy db directives used to calculate length of namec
 865+ ECB6 41 47 41 49 >                db      "AGAIN"
 865+ ECBA 4E          >
 865+ ECBB             >len_NFA         defl    $ - temp_NFA
 865+ ECBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 865+ ECB6             >
 865+ ECB6 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 865+ ECB7 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 865+ ECBB 4E          >
 865+ ECBC             >                org     $-1                 // alter last byte of Name just above to set
 865+ ECBB CE          >                db      {b $} | END_BIT     // msb as name end
 865+ ECBC             >
 865+ ECBC AC 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 865+ ECBE             >Prev_Ptr        defl    Heap_Ptr
 865+ ECBE             >
 865+ ECBE             >mirror_Ptr      defl    $
 865+ ECBE             >
 865+ ECBE 54 80       >                dw      Dict_Ptr + 2        // xt
 865+ ECC0             >Heap_Ptr        defl    $ - $E000           // save current HP
 865+ ECC0             >
 865+ ECC0             >Current_HP      defl  $ - $E000             // used to set HP once!
 865+ ECC0             >
 865+ ECC0             >//              ______________________________________________________________________
 865+ ECC0             >//              Dictionary part
 865+ ECC0             >
 865+ ECC0             >                org     Dict_Ptr
 865+ 8052             >
 865+ 8052 BE 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 865+ 8054             >
 865+ 8054             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 865+ 8054 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 865+ 8057             >
 865+ 8057             >
 865+ 8057             >                endif           ; ok        // for other definitions it "points" the correct handler
 865+ 8057             >                // Use of "; ok" to suppress "warning[fwdref]"
 865+ 8057             >
 865+ 8057             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 866+ 8057 0A 6E                        dw      QCOMP
 867+ 8059 8F 6A 2E 6E                  dw      TWO, QPAIRS
 868+ 805D 65 6E E8 63                  dw      COMPILE, BRANCH
 869+ 8061 E8 7F                        dw      BACK
 870+ 8063 52 68                        dw      EXIT
 871+ 8065
 872+ 8065              //  ______________________________________________________________________
 873+ 8065              //
 874+ 8065              // until        ( a 1 -- ) \ compile-time
 875+ 8065                              Colon_Def UNTIL, "UNTIL", is_immediate
 875+ 8065             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 875+ 8065             >
 875+ 8065             >Dict_Ptr        defl    $
 875+ 8065             >
 875+ 8065             >//              ______________________________________________________________________
 875+ 8065             >//              Heap part
 875+ 8065             >
 875+ 8065             >
 875+ 8065             >                org     (Heap_Ptr & $1FFF) + $E000
 875+ ECC0             >
 875+ ECC0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ ECC0             >Latest_Definition defl  Heap_Ptr
 875+ ECC0             >
 875+ ECC0             >                // dummy db directives used to calculate length of namec
 875+ ECC0 55 4E 54 49 >                db      "UNTIL"
 875+ ECC4 4C          >
 875+ ECC5             >len_NFA         defl    $ - temp_NFA
 875+ ECC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ ECC0             >
 875+ ECC0 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ ECC1 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 875+ ECC5 4C          >
 875+ ECC6             >                org     $-1                 // alter last byte of Name just above to set
 875+ ECC5 CC          >                db      {b $} | END_BIT     // msb as name end
 875+ ECC6             >
 875+ ECC6 B6 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 875+ ECC8             >Prev_Ptr        defl    Heap_Ptr
 875+ ECC8             >
 875+ ECC8             >mirror_Ptr      defl    $
 875+ ECC8             >
 875+ ECC8 67 80       >                dw      Dict_Ptr + 2        // xt
 875+ ECCA             >Heap_Ptr        defl    $ - $E000           // save current HP
 875+ ECCA             >
 875+ ECCA             >Current_HP      defl  $ - $E000             // used to set HP once!
 875+ ECCA             >
 875+ ECCA             >//              ______________________________________________________________________
 875+ ECCA             >//              Dictionary part
 875+ ECCA             >
 875+ ECCA             >                org     Dict_Ptr
 875+ 8065             >
 875+ 8065 C8 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 875+ 8067             >
 875+ 8067             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 8067 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 875+ 806A             >
 875+ 806A             >
 875+ 806A             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 806A             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 806A             >
 875+ 806A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 806A 0A 6E                        dw      QCOMP
 877+ 806C 8F 6A 2E 6E                  dw      TWO, QPAIRS
 878+ 8070 65 6E F5 63                  dw      COMPILE, ZBRANCH
 879+ 8074 E8 7F                        dw      BACK
 880+ 8076 52 68                        dw      EXIT
 881+ 8078
 882+ 8078              //  ______________________________________________________________________
 883+ 8078              //
 884+ 8078              // end          ( a 1 -- ) \ compile-time
 885+ 8078                              Colon_Def END, "END", is_immediate
 885+ 8078             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 885+ 8078             >
 885+ 8078             >Dict_Ptr        defl    $
 885+ 8078             >
 885+ 8078             >//              ______________________________________________________________________
 885+ 8078             >//              Heap part
 885+ 8078             >
 885+ 8078             >
 885+ 8078             >                org     (Heap_Ptr & $1FFF) + $E000
 885+ ECCA             >
 885+ ECCA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 885+ ECCA             >Latest_Definition defl  Heap_Ptr
 885+ ECCA             >
 885+ ECCA             >                // dummy db directives used to calculate length of namec
 885+ ECCA 45 4E 44    >                db      "END"
 885+ ECCD             >len_NFA         defl    $ - temp_NFA
 885+ ECCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 885+ ECCA             >
 885+ ECCA C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 885+ ECCB 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 885+ ECCE             >                org     $-1                 // alter last byte of Name just above to set
 885+ ECCD C4          >                db      {b $} | END_BIT     // msb as name end
 885+ ECCE             >
 885+ ECCE C0 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 885+ ECD0             >Prev_Ptr        defl    Heap_Ptr
 885+ ECD0             >
 885+ ECD0             >mirror_Ptr      defl    $
 885+ ECD0             >
 885+ ECD0 7A 80       >                dw      Dict_Ptr + 2        // xt
 885+ ECD2             >Heap_Ptr        defl    $ - $E000           // save current HP
 885+ ECD2             >
 885+ ECD2             >Current_HP      defl  $ - $E000             // used to set HP once!
 885+ ECD2             >
 885+ ECD2             >//              ______________________________________________________________________
 885+ ECD2             >//              Dictionary part
 885+ ECD2             >
 885+ ECD2             >                org     Dict_Ptr
 885+ 8078             >
 885+ 8078 D0 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 885+ 807A             >
 885+ 807A             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 885+ 807A CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 885+ 807D             >
 885+ 807D             >
 885+ 807D             >                endif           ; ok        // for other definitions it "points" the correct handler
 885+ 807D             >                // Use of "; ok" to suppress "warning[fwdref]"
 885+ 807D             >
 885+ 807D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 886+ 807D 67 80                        dw      UNTIL
 887+ 807F 52 68                        dw      EXIT
 888+ 8081
 889+ 8081              //  ______________________________________________________________________
 890+ 8081              //
 891+ 8081              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 892+ 8081                              Colon_Def WHILE, "WHILE", is_immediate
 892+ 8081             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 892+ 8081             >
 892+ 8081             >Dict_Ptr        defl    $
 892+ 8081             >
 892+ 8081             >//              ______________________________________________________________________
 892+ 8081             >//              Heap part
 892+ 8081             >
 892+ 8081             >
 892+ 8081             >                org     (Heap_Ptr & $1FFF) + $E000
 892+ ECD2             >
 892+ ECD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 892+ ECD2             >Latest_Definition defl  Heap_Ptr
 892+ ECD2             >
 892+ ECD2             >                // dummy db directives used to calculate length of namec
 892+ ECD2 57 48 49 4C >                db      "WHILE"
 892+ ECD6 45          >
 892+ ECD7             >len_NFA         defl    $ - temp_NFA
 892+ ECD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 892+ ECD2             >
 892+ ECD2 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 892+ ECD3 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 892+ ECD7 45          >
 892+ ECD8             >                org     $-1                 // alter last byte of Name just above to set
 892+ ECD7 C5          >                db      {b $} | END_BIT     // msb as name end
 892+ ECD8             >
 892+ ECD8 CA 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 892+ ECDA             >Prev_Ptr        defl    Heap_Ptr
 892+ ECDA             >
 892+ ECDA             >mirror_Ptr      defl    $
 892+ ECDA             >
 892+ ECDA 83 80       >                dw      Dict_Ptr + 2        // xt
 892+ ECDC             >Heap_Ptr        defl    $ - $E000           // save current HP
 892+ ECDC             >
 892+ ECDC             >Current_HP      defl  $ - $E000             // used to set HP once!
 892+ ECDC             >
 892+ ECDC             >//              ______________________________________________________________________
 892+ ECDC             >//              Dictionary part
 892+ ECDC             >
 892+ ECDC             >                org     Dict_Ptr
 892+ 8081             >
 892+ 8081 DA 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 892+ 8083             >
 892+ 8083             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 892+ 8083 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 892+ 8086             >
 892+ 8086             >
 892+ 8086             >                endif           ; ok        // for other definitions it "points" the correct handler
 892+ 8086             >                // Use of "; ok" to suppress "warning[fwdref]"
 892+ 8086             >
 892+ 8086             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 893+ 8086 F5 7F                        dw      IF
 894+ 8088              //              dw      TWO_PLUS // ( that is 4 )
 895+ 8088 5A 69                        dw      TWO_SWAP
 896+ 808A 52 68                        dw      EXIT
 897+ 808C
 898+ 808C              //  ______________________________________________________________________
 899+ 808C              //
 900+ 808C              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 901+ 808C                              Colon_Def REPEAT, "REPEAT", is_immediate
 901+ 808C             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 901+ 808C             >
 901+ 808C             >Dict_Ptr        defl    $
 901+ 808C             >
 901+ 808C             >//              ______________________________________________________________________
 901+ 808C             >//              Heap part
 901+ 808C             >
 901+ 808C             >
 901+ 808C             >                org     (Heap_Ptr & $1FFF) + $E000
 901+ ECDC             >
 901+ ECDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 901+ ECDC             >Latest_Definition defl  Heap_Ptr
 901+ ECDC             >
 901+ ECDC             >                // dummy db directives used to calculate length of namec
 901+ ECDC 52 45 50 45 >                db      "REPEAT"
 901+ ECE0 41 54       >
 901+ ECE2             >len_NFA         defl    $ - temp_NFA
 901+ ECE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 901+ ECDC             >
 901+ ECDC C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 901+ ECDD 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 901+ ECE1 41 54       >
 901+ ECE3             >                org     $-1                 // alter last byte of Name just above to set
 901+ ECE2 D4          >                db      {b $} | END_BIT     // msb as name end
 901+ ECE3             >
 901+ ECE3 D2 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 901+ ECE5             >Prev_Ptr        defl    Heap_Ptr
 901+ ECE5             >
 901+ ECE5             >mirror_Ptr      defl    $
 901+ ECE5             >
 901+ ECE5 8E 80       >                dw      Dict_Ptr + 2        // xt
 901+ ECE7             >Heap_Ptr        defl    $ - $E000           // save current HP
 901+ ECE7             >
 901+ ECE7             >Current_HP      defl  $ - $E000             // used to set HP once!
 901+ ECE7             >
 901+ ECE7             >//              ______________________________________________________________________
 901+ ECE7             >//              Dictionary part
 901+ ECE7             >
 901+ ECE7             >                org     Dict_Ptr
 901+ 808C             >
 901+ 808C E5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 901+ 808E             >
 901+ 808E             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 901+ 808E CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 901+ 8091             >
 901+ 8091             >
 901+ 8091             >                endif           ; ok        // for other definitions it "points" the correct handler
 901+ 8091             >                // Use of "; ok" to suppress "warning[fwdref]"
 901+ 8091             >
 901+ 8091             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 902+ 8091 54 80                        dw      AGAIN
 903+ 8093              //              dw      TWO_MINUS
 904+ 8093 08 80                        dw      THEN
 905+ 8095 52 68                        dw      EXIT
 906+ 8097
 907+ 8097              //  ______________________________________________________________________
 908+ 8097              //
 909+ 8097              // ?do-
 910+ 8097              // special version of "BACK" used by ?DO and LOOP
 911+ 8097                              Colon_Def C_DO_BACK, "?DO-", is_normal
 911+ 8097             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 911+ 8097             >
 911+ 8097             >Dict_Ptr        defl    $
 911+ 8097             >
 911+ 8097             >//              ______________________________________________________________________
 911+ 8097             >//              Heap part
 911+ 8097             >
 911+ 8097             >
 911+ 8097             >                org     (Heap_Ptr & $1FFF) + $E000
 911+ ECE7             >
 911+ ECE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 911+ ECE7             >Latest_Definition defl  Heap_Ptr
 911+ ECE7             >
 911+ ECE7             >                // dummy db directives used to calculate length of namec
 911+ ECE7 3F 44 4F 2D >                db      "?DO-"
 911+ ECEB             >len_NFA         defl    $ - temp_NFA
 911+ ECEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 911+ ECE7             >
 911+ ECE7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 911+ ECE8 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 911+ ECEC             >                org     $-1                 // alter last byte of Name just above to set
 911+ ECEB AD          >                db      {b $} | END_BIT     // msb as name end
 911+ ECEC             >
 911+ ECEC DC 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 911+ ECEE             >Prev_Ptr        defl    Heap_Ptr
 911+ ECEE             >
 911+ ECEE             >mirror_Ptr      defl    $
 911+ ECEE             >
 911+ ECEE 99 80       >                dw      Dict_Ptr + 2        // xt
 911+ ECF0             >Heap_Ptr        defl    $ - $E000           // save current HP
 911+ ECF0             >
 911+ ECF0             >Current_HP      defl  $ - $E000             // used to set HP once!
 911+ ECF0             >
 911+ ECF0             >//              ______________________________________________________________________
 911+ ECF0             >//              Dictionary part
 911+ ECF0             >
 911+ ECF0             >                org     Dict_Ptr
 911+ 8097             >
 911+ 8097 EE 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 911+ 8099             >
 911+ 8099             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 911+ 8099 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 911+ 809C             >
 911+ 809C             >
 911+ 809C             >                endif           ; ok        // for other definitions it "points" the correct handler
 911+ 809C             >                // Use of "; ok" to suppress "warning[fwdref]"
 911+ 809C             >
 911+ 809C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 912+ 809C E8 7F                        dw      BACK
 913+ 809E              CDoBack_Begin:
 914+ 809E 39 68 64 6B                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 914+ 80A2 89 69 F8 6B
 915+ 80A6 F5 63                        dw      ZBRANCH
 916+ 80A8 0A 00                        dw      CDoBack_While - $
 917+ 80AA CC 68 08 80                  dw          TWO_PLUS, THEN
 918+ 80AE E8 63                        dw      BRANCH
 919+ 80B0 EE FF                        dw      CDoBack_Begin - $
 920+ 80B2              CDoBack_While:
 921+ 80B2 3D 6E 64 6B                  dw      QCSP, CSP, STORE
 921+ 80B6 93 69
 922+ 80B8 52 68                        dw      EXIT
 923+ 80BA
 924+ 80BA              //  ______________________________________________________________________
 925+ 80BA              //
 926+ 80BA              // do
 927+ 80BA              // DO  ... LOOP
 928+ 80BA              // DO  ... n +LOOP
 929+ 80BA              // ?DO ... LOOP
 930+ 80BA              // ?DO ... n +LOOP
 931+ 80BA                              Colon_Def DO, "DO", is_immediate
 931+ 80BA             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 931+ 80BA             >
 931+ 80BA             >Dict_Ptr        defl    $
 931+ 80BA             >
 931+ 80BA             >//              ______________________________________________________________________
 931+ 80BA             >//              Heap part
 931+ 80BA             >
 931+ 80BA             >
 931+ 80BA             >                org     (Heap_Ptr & $1FFF) + $E000
 931+ ECF0             >
 931+ ECF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ ECF0             >Latest_Definition defl  Heap_Ptr
 931+ ECF0             >
 931+ ECF0             >                // dummy db directives used to calculate length of namec
 931+ ECF0 44 4F       >                db      "DO"
 931+ ECF2             >len_NFA         defl    $ - temp_NFA
 931+ ECF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ ECF0             >
 931+ ECF0 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ ECF1 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 931+ ECF3             >                org     $-1                 // alter last byte of Name just above to set
 931+ ECF2 CF          >                db      {b $} | END_BIT     // msb as name end
 931+ ECF3             >
 931+ ECF3 E7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 931+ ECF5             >Prev_Ptr        defl    Heap_Ptr
 931+ ECF5             >
 931+ ECF5             >mirror_Ptr      defl    $
 931+ ECF5             >
 931+ ECF5 BC 80       >                dw      Dict_Ptr + 2        // xt
 931+ ECF7             >Heap_Ptr        defl    $ - $E000           // save current HP
 931+ ECF7             >
 931+ ECF7             >Current_HP      defl  $ - $E000             // used to set HP once!
 931+ ECF7             >
 931+ ECF7             >//              ______________________________________________________________________
 931+ ECF7             >//              Dictionary part
 931+ ECF7             >
 931+ ECF7             >                org     Dict_Ptr
 931+ 80BA             >
 931+ 80BA F5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 931+ 80BC             >
 931+ 80BC             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 80BC CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 80BF             >
 931+ 80BF             >
 931+ 80BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 80BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 80BF             >
 931+ 80BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 80BF 65 6E 34 64                  dw      COMPILE, C_DO
 933+ 80C3 64 6B 89 69                  dw      CSP, FETCH, STORE_CSP
 933+ 80C7 E8 6D
 934+ 80C9 A6 6B 96 6A                  dw      HERE, THREE
 935+ 80CD 52 68                        dw      EXIT
 936+ 80CF
 937+ 80CF              //  ______________________________________________________________________
 938+ 80CF              //
 939+ 80CF              // loop
 940+ 80CF                              Colon_Def LOOP, "LOOP", is_immediate
 940+ 80CF             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 940+ 80CF             >
 940+ 80CF             >Dict_Ptr        defl    $
 940+ 80CF             >
 940+ 80CF             >//              ______________________________________________________________________
 940+ 80CF             >//              Heap part
 940+ 80CF             >
 940+ 80CF             >
 940+ 80CF             >                org     (Heap_Ptr & $1FFF) + $E000
 940+ ECF7             >
 940+ ECF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 940+ ECF7             >Latest_Definition defl  Heap_Ptr
 940+ ECF7             >
 940+ ECF7             >                // dummy db directives used to calculate length of namec
 940+ ECF7 4C 4F 4F 50 >                db      "LOOP"
 940+ ECFB             >len_NFA         defl    $ - temp_NFA
 940+ ECFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 940+ ECF7             >
 940+ ECF7 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 940+ ECF8 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 940+ ECFC             >                org     $-1                 // alter last byte of Name just above to set
 940+ ECFB D0          >                db      {b $} | END_BIT     // msb as name end
 940+ ECFC             >
 940+ ECFC F0 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 940+ ECFE             >Prev_Ptr        defl    Heap_Ptr
 940+ ECFE             >
 940+ ECFE             >mirror_Ptr      defl    $
 940+ ECFE             >
 940+ ECFE D1 80       >                dw      Dict_Ptr + 2        // xt
 940+ ED00             >Heap_Ptr        defl    $ - $E000           // save current HP
 940+ ED00             >
 940+ ED00             >Current_HP      defl  $ - $E000             // used to set HP once!
 940+ ED00             >
 940+ ED00             >//              ______________________________________________________________________
 940+ ED00             >//              Dictionary part
 940+ ED00             >
 940+ ED00             >                org     Dict_Ptr
 940+ 80CF             >
 940+ 80CF FE 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 940+ 80D1             >
 940+ 80D1             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 940+ 80D1 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 940+ 80D4             >
 940+ 80D4             >
 940+ 80D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 940+ 80D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 940+ 80D4             >
 940+ 80D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 941+ 80D4 96 6A 2E 6E                  dw      THREE, QPAIRS
 942+ 80D8 65 6E E0 63                  dw      COMPILE, C_LOOP
 943+ 80DC 99 80                        dw      C_DO_BACK
 944+ 80DE 52 68                        dw      EXIT
 945+ 80E0
 946+ 80E0              //  ______________________________________________________________________
 947+ 80E0              //
 948+ 80E0              // +loop
 949+ 80E0                              Colon_Def PLOOP, "+LOOP", is_immediate
 949+ 80E0             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 949+ 80E0             >
 949+ 80E0             >Dict_Ptr        defl    $
 949+ 80E0             >
 949+ 80E0             >//              ______________________________________________________________________
 949+ 80E0             >//              Heap part
 949+ 80E0             >
 949+ 80E0             >
 949+ 80E0             >                org     (Heap_Ptr & $1FFF) + $E000
 949+ ED00             >
 949+ ED00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ ED00             >Latest_Definition defl  Heap_Ptr
 949+ ED00             >
 949+ ED00             >                // dummy db directives used to calculate length of namec
 949+ ED00 2B 4C 4F 4F >                db      "+LOOP"
 949+ ED04 50          >
 949+ ED05             >len_NFA         defl    $ - temp_NFA
 949+ ED05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ ED00             >
 949+ ED00 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ ED01 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 949+ ED05 50          >
 949+ ED06             >                org     $-1                 // alter last byte of Name just above to set
 949+ ED05 D0          >                db      {b $} | END_BIT     // msb as name end
 949+ ED06             >
 949+ ED06 F7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 949+ ED08             >Prev_Ptr        defl    Heap_Ptr
 949+ ED08             >
 949+ ED08             >mirror_Ptr      defl    $
 949+ ED08             >
 949+ ED08 E2 80       >                dw      Dict_Ptr + 2        // xt
 949+ ED0A             >Heap_Ptr        defl    $ - $E000           // save current HP
 949+ ED0A             >
 949+ ED0A             >Current_HP      defl  $ - $E000             // used to set HP once!
 949+ ED0A             >
 949+ ED0A             >//              ______________________________________________________________________
 949+ ED0A             >//              Dictionary part
 949+ ED0A             >
 949+ ED0A             >                org     Dict_Ptr
 949+ 80E0             >
 949+ 80E0 08 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 949+ 80E2             >
 949+ 80E2             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 80E2 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 949+ 80E5             >
 949+ 80E5             >
 949+ 80E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 80E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 80E5             >
 949+ 80E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 80E5 96 6A 2E 6E                  dw      THREE, QPAIRS
 951+ 80E9 65 6E B1 63                  dw      COMPILE, C_PLOOP
 952+ 80ED 99 80                        dw      C_DO_BACK
 953+ 80EF 52 68                        dw      EXIT
 954+ 80F1
 955+ 80F1              //  ______________________________________________________________________
 956+ 80F1              //
 957+ 80F1              // ?do
 958+ 80F1                              Colon_Def QDO, "?DO", is_immediate
 958+ 80F1             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 958+ 80F1             >
 958+ 80F1             >Dict_Ptr        defl    $
 958+ 80F1             >
 958+ 80F1             >//              ______________________________________________________________________
 958+ 80F1             >//              Heap part
 958+ 80F1             >
 958+ 80F1             >
 958+ 80F1             >                org     (Heap_Ptr & $1FFF) + $E000
 958+ ED0A             >
 958+ ED0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 958+ ED0A             >Latest_Definition defl  Heap_Ptr
 958+ ED0A             >
 958+ ED0A             >                // dummy db directives used to calculate length of namec
 958+ ED0A 3F 44 4F    >                db      "?DO"
 958+ ED0D             >len_NFA         defl    $ - temp_NFA
 958+ ED0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 958+ ED0A             >
 958+ ED0A C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 958+ ED0B 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 958+ ED0E             >                org     $-1                 // alter last byte of Name just above to set
 958+ ED0D CF          >                db      {b $} | END_BIT     // msb as name end
 958+ ED0E             >
 958+ ED0E 00 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 958+ ED10             >Prev_Ptr        defl    Heap_Ptr
 958+ ED10             >
 958+ ED10             >mirror_Ptr      defl    $
 958+ ED10             >
 958+ ED10 F3 80       >                dw      Dict_Ptr + 2        // xt
 958+ ED12             >Heap_Ptr        defl    $ - $E000           // save current HP
 958+ ED12             >
 958+ ED12             >Current_HP      defl  $ - $E000             // used to set HP once!
 958+ ED12             >
 958+ ED12             >//              ______________________________________________________________________
 958+ ED12             >//              Dictionary part
 958+ ED12             >
 958+ ED12             >                org     Dict_Ptr
 958+ 80F1             >
 958+ 80F1 10 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 958+ 80F3             >
 958+ 80F3             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 958+ 80F3 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 958+ 80F6             >
 958+ 80F6             >
 958+ 80F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 958+ 80F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 958+ 80F6             >
 958+ 80F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 959+ 80F6 65 6E 0C 64                  dw      COMPILE, C_Q_DO
 960+ 80FA 64 6B 89 69                  dw      CSP, FETCH, STORE_CSP
 960+ 80FE E8 6D
 961+ 8100 A6 6B 81 6A                  dw      HERE, ZERO, COMMA, ZERO
 961+ 8104 BC 6B 81 6A
 962+ 8108 A6 6B 96 6A                  dw      HERE, THREE
 963+ 810C 52 68                        dw      EXIT
 964+ 810E
 965+ 810E              //  ______________________________________________________________________
 966+ 810E              //
 967+ 810E              // \
 968+ 810E                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 968+ 810E             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 968+ 810E             >
 968+ 810E             >Dict_Ptr        defl    $
 968+ 810E             >
 968+ 810E             >//              ______________________________________________________________________
 968+ 810E             >//              Heap part
 968+ 810E             >
 968+ 810E             >
 968+ 810E             >                org     (Heap_Ptr & $1FFF) + $E000
 968+ ED12             >
 968+ ED12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 968+ ED12             >Latest_Definition defl  Heap_Ptr
 968+ ED12             >
 968+ ED12             >                // dummy db directives used to calculate length of namec
 968+ ED12 5C          >                db      "\\"
 968+ ED13             >len_NFA         defl    $ - temp_NFA
 968+ ED13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 968+ ED12             >
 968+ ED12 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 968+ ED13 5C          >                db      "\\"               // name string in 7-bit ascii, but
 968+ ED14             >                org     $-1                 // alter last byte of Name just above to set
 968+ ED13 DC          >                db      {b $} | END_BIT     // msb as name end
 968+ ED14             >
 968+ ED14 0A 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 968+ ED16             >Prev_Ptr        defl    Heap_Ptr
 968+ ED16             >
 968+ ED16             >mirror_Ptr      defl    $
 968+ ED16             >
 968+ ED16 10 81       >                dw      Dict_Ptr + 2        // xt
 968+ ED18             >Heap_Ptr        defl    $ - $E000           // save current HP
 968+ ED18             >
 968+ ED18             >Current_HP      defl  $ - $E000             // used to set HP once!
 968+ ED18             >
 968+ ED18             >//              ______________________________________________________________________
 968+ ED18             >//              Dictionary part
 968+ ED18             >
 968+ ED18             >                org     Dict_Ptr
 968+ 810E             >
 968+ 810E 16 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 968+ 8110             >
 968+ 8110             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 968+ 8110 CD 2C 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 968+ 8113             >
 968+ 8113             >
 968+ 8113             >                endif           ; ok        // for other definitions it "points" the correct handler
 968+ 8113             >                // Use of "; ok" to suppress "warning[fwdref]"
 968+ 8113             >
 968+ 8113             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 969+ 8113 22 6B 89 69                  dw      BLK, FETCH
 970+ 8117 F5 63                        dw      ZBRANCH
 971+ 8119 30 00                        dw      Backslash_Else_1 - $
 972+ 811B 22 6B 89 69                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 972+ 811F 88 6A 32 6C
 973+ 8123 F5 63                        dw          ZBRANCH
 974+ 8125 18 00                        dw          Backslash_Else_2 - $
 975+ 8127 28 6B 89 69                  dw              TO_IN, FETCH, CL, MOD, CL
 975+ 812B AB 6A 2D 77
 975+ 812F AB 6A
 976+ 8131 24 69 F8 6B                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 976+ 8135 28 6B 71 69
 977+ 8139 E8 63                        dw          BRANCH
 978+ 813B 0A 00                        dw          Backslash_Endif_2 - $
 979+ 813D              Backslash_Else_2:
 980+ 813D B2 6A D9 68                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 980+ 8141 28 6B 93 69
 981+ 8145              Backslash_Endif_2:
 982+ 8145 E8 63                        dw      BRANCH
 983+ 8147 10 00                        dw      Backslash_Endif_1 - $
 984+ 8149              Backslash_Else_1:
 985+ 8149 81 6A E6 6A                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
 985+ 814D 89 69 28 6B
 985+ 8151 89 69 A5 68
 985+ 8155 93 69
 986+ 8157              Backslash_Endif_1:
 987+ 8157 52 68                        dw      EXIT
 988+ 8159
 989+ 8159              Fence_Word:
 990+ 8159              //  ______________________________________________________________________
 991+ 8159              //
 992+ 8159
 993+ 8159 00           Here_Dictionary db      0
 994+ 815A
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
 125  815A
 126  815A              // now we save the compiled file so we can either run it or debug it
 127  815A                              SAVENEX OPEN "output/main.nex", ORIGIN
 128  815A                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 129  815A                              SAVENEX CFG  0
 130  815A                              SAVENEX BANK 2, 0
 131  815A                              SAVENEX AUTO
 132  815A                              SAVENEX CLOSE
 133  815A
 134  815A              //              PAGE 7 ;set 7 page to current slot
 135  815A              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 136  815A              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 137  815A
 138  815A                              SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, 9999
 139  815A                              SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 140  815A
 141  815A                              SAVEBIN "output/forth17d.bin", ORIGIN, 9999
 142  815A                              SAVEBIN "output/ram7.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 143  815A
 144  815A                              // To load on ZX Spectrum Next you have to type
 145  815A                              //      LOAD "ram7.bin" BANK 16
 146  815A                              //      LOAD "forth17d.bin" CODE
 147  815A
 148  815A                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
