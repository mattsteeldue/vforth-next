# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  build 20231119
   8  0000              //
   9  0000              //  Direct-Threaded version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2023
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     0
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  68  0000 ~            ORIGIN          equ     $9B75   -$80                   // for binary comparison with single compilation
  69  0000 ~            Heap_Ptr        defl    $1FF0 - $68                    // HP before compilation
  70  0000 ~            Heap_offset     defl    $2000
  71  0000 ~
  72  0000                              endif
  73  0000              //  ______________________________________________________________________
  74  0000
  75  0000                              if (  0 == DEBUGGING )
  76  0000              ORIGIN          equ     $6366                   // binary and Tape
  77  0000              // ORIGIN          equ     $9A93                // binary and Tape
  78  0000              Heap_Ptr        defl    $0002
  79  0000              Heap_offset     defl     0
  80  0000
  81  0000                              endif
  82  0000              //  ______________________________________________________________________
  83  0000
  84  0000                              if (  1 == DEBUGGING )
  85  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  86  0000 ~            Heap_Ptr        defl    $0002
  87  0000 ~            Heap_offset     defl     0
  88  0000 ~
  89  0000                              endif
  90  0000              //  ______________________________________________________________________
  91  0000
  92  0000                              DEVICE  ZXSPECTRUMNEXT
  93  0000
  94  0000                              ORG     ORIGIN
  95  6366
  96  6366                              if ( -1 == DEBUGGING )
  97  6366 ~                            ds 128                            // for binary comparison
  98  6366                              endif
  99  6366
 100  6366              //  ______________________________________________________________________
 101  6366              //
 102  6366              //  Naming convention for Label vs Forth correspondance
 103  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 104  6366              //    - Leading "0" is converted into "Z_"
 105  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
 106  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 107  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 108  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 109  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 110  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 111  6366              //    - Equal sign "=" is converted in EQUAL
 112  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 113  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 114  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 115  6366              //    - Exclamation mark "!" is converted in STORE
 116  6366              //    - At-Sign "@" is converted in FETCH
 117  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 118  6366
 119  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE: Return Stack Pointer
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              Dict_Ptr        defl    0
  94+ 6366              // Heap_Ptr        defl    $0002
  95+ 6366              Prev_Ptr        defl    0
  96+ 6366              mirror_Ptr      defl    0
  97+ 6366
  98+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  99+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
 100+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 101+ 6366
 102+ 6366
 103+ 6366              Behave          macro   xp
 104+ 6366 ~            temp_PTR        defl    $                   // save this org
 105+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 106+ 6366 ~                            dw      xp
 107+ 6366 ~                            org     temp_PTR
 108+ 6366                              endm
 109+ 6366
 110+ 6366              //  ______________________________________________________________________
 111+ 6366              //
 112+ 6366              //  Create a new "low-level" definition
 113+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 114+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 115+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 116+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 117+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 118+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 119+ 6366              //  This macro acts much like the standard Forth definition CREATE
 120+ 6366
 121+ 6366              New_Def         macro   label, namec, runcode, bits
 122+ 6366 ~
 123+ 6366 ~            Dict_Ptr        defl    $
 124+ 6366 ~
 125+ 6366 ~            //              ______________________________________________________________________
 126+ 6366 ~            //              Heap part
 127+ 6366 ~
 128+ 6366 ~
 129+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 130+ 6366 ~
 131+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 6366 ~            Latest_Definition defl  Heap_Ptr
 133+ 6366 ~
 134+ 6366 ~                            // dummy db directives used to calculate length of namec
 135+ 6366 ~                            db      namec
 136+ 6366 ~            len_NFA         defl    $ - temp_NFA
 137+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 6366 ~
 139+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 141+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 142+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 143+ 6366 ~
 144+ 6366 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 145+ 6366 ~            Prev_Ptr        defl    Heap_Ptr
 146+ 6366 ~
 147+ 6366 ~            mirror_Ptr      defl    $
 148+ 6366 ~
 149+ 6366 ~                            dw      Dict_Ptr + 2        // xt
 150+ 6366 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 151+ 6366 ~
 152+ 6366 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 153+ 6366 ~
 154+ 6366 ~            //              ______________________________________________________________________
 155+ 6366 ~            //              Dictionary part
 156+ 6366 ~
 157+ 6366 ~                            org     Dict_Ptr
 158+ 6366 ~
 159+ 6366 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 160+ 6366 ~
 161+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 163+ 6366 ~
 164+ 6366 ~
 165+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6366 ~
 168+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6366                              endm
 170+ 6366
 171+ 6366              //  ______________________________________________________________________
 172+ 6366              //
 173+ 6366              // Create a "constant"
 174+ 6366              // The constant value is compiled in first PFA cell
 175+ 6366              Constant_Def    macro   label, namec, constant_value
 176+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 177+ 6366 ~                            dw      constant_value
 178+ 6366                              endm
 179+ 6366
 180+ 6366              //  ______________________________________________________________________
 181+ 6366              //
 182+ 6366              // Create a "variable"
 183+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 184+ 6366              // this allow creation of "variables" which content is  of any length
 185+ 6366              Variable_Def    macro   label, namec, initial_value
 186+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 187+ 6366 ~                            dw      initial_value // ?
 188+ 6366                              endm
 189+ 6366
 190+ 6366              //  ______________________________________________________________________
 191+ 6366              //
 192+ 6366              // Create a "user"
 193+ 6366              // It uses a single byte as offset to calculate the address of the variable
 194+ 6366              User_Def        macro   label, namec, offset_value
 195+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 196+ 6366 ~                            db      offset_value
 197+ 6366                              endm
 198+ 6366
 199+ 6366              //  ______________________________________________________________________
 200+ 6366              //
 201+ 6366              // Create a "colon-definition"
 202+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 203+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 204+ 6366              Colon_Def       macro   label, namec, bits
 205+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 206+ 6366                              endm
 207+ 6366
 208+ 6366              //  ______________________________________________________________________
 209+ 6366              //
 210+ 6366              // Create a "heap-string"
 211+ 6366              Start_Heap      macro
 212+ 6366 ~            temp_ORG        defl    $                   // save this ORG
 213+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 214+ 6366 ~
 215+ 6366                              endm
 216+ 6366
 217+ 6366              End_Heap        macro
 218+ 6366 ~            Heap_Ptr        defl    $ - $E000
 219+ 6366 ~                            org     temp_ORG
 220+ 6366 ~
 221+ 6366                              endm
 222+ 6366
 223+ 6366
 224+ 6366              //  ______________________________________________________________________
 225+ 6366              //
 226+ 6366
 227+ 6366
 228+ 6366
 229+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 230+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 231+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 232+ 6366              USER_system:    equ     $D188               // User variables zone.
 233+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 234+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 235+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
 120  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366              Cold_origin:
   9+ 6366 A7                           and     a
  10+ 6367 C3 40 76                     jp      ColdRoutine
  11+ 636A              Warm_origin:
  12+ 636A 37                           scf
  13+ 636B C3 40 76                     jp      WarmRoutine
  14+ 636E
  15+ 636E              // +008
  16+ 636E E4 D0        SP_Basic:       dw      $D0E4               // These are bits with some "standard" meaning... 0101
  17+ 6370
  18+ 6370              // +00A
  19+ 6370 00 0E                        dw      $0E00
  20+ 6372
  21+ 6372              // +00C
  22+ 6372 1B 0D        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 6374
  24+ 6374              // +00E
  25+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 6376
  27+ 6376              // +010
  28+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 6378
  30+ 6378              // +012
  31+ 6378 E8 D0        S0_origin:      dw      S0_system
  32+ 637A 88 D1        R0_origin:      dw      R0_system
  33+ 637C E8 D0        TIB_origin:     dw      TIB_system
  34+ 637E 1F 00        WIDTH_origin:   dw      31
  35+ 6380 01 00        WARNING_origin: dw      1
  36+ 6382 96 81        FENCE_origin:   dw      Fence_Word
  37+ 6384 96 81        DP_origin       dw      Fence_Word
  38+ 6386 57 75        VOCLINK_origin: dw      Voclink_Ptr
  39+ 6388 E4 D1                        dw      FIRST_system
  40+ 638A 00 E0                        dw      LIMIT_system
  41+ 638C 21 0D        HP_origin:      dw      Current_HP
  42+ 638E
  43+ 638E              // +028
  44+ 638E 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638F 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6390 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6391 00                           db      0
  48+ 6392
  49+ 6392              // +02C
  50+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  51+ 6394
  52+ 6394              // +02E
  53+ 6394 88 D1        USER_Pointer:   dw      USER_system
  54+ 6396
  55+ 6396              // +030
  56+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 6398
  58+ 6398              // +32
  59+ 6398 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 639A
  61+ 639A
  62+ 639A                              Start_Heap
  62+ 639A             >temp_ORG        defl    $                   // save this ORG
  62+ 639A             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002 71                           db      113
  65+ E003 20 76 2D 46                  db      " v-Forth 1.7 - NextZXOS version ", $0D      // 33
  65+ E007 6F 72 74 68
  65+ E00B 20 31 2E 37
  65+ E00F 20 2D 20 4E
  65+ E013 65 78 74 5A
  65+ E017 58 4F 53 20
  65+ E01B 76 65 72 73
  65+ E01F 69 6F 6E 20
  65+ E023 0D
  66+ E024 20 48 65 61                  db      " Heap Vocabulary - build 2023-11-19 ", $0D  // 37
  66+ E028 70 20 56 6F
  66+ E02C 63 61 62 75
  66+ E030 6C 61 72 79
  66+ E034 20 2D 20 62
  66+ E038 75 69 6C 64
  66+ E03C 20 32 30 32
  66+ E040 33 2D 31 31
  66+ E044 2D 31 39 20
  66+ E048 0D
  67+ E049 20 4D 49 54                  db      " MIT License ", 127                         // 14
  67+ E04D 20 4C 69 63
  67+ E051 65 6E 73 65
  67+ E055 20 7F
  68+ E057 20 31 39 39                  db      " 1990-2023 Matteo Vitturi ", $0D            // 27
  68+ E05B 30 2D 32 30
  68+ E05F 32 33 20 4D
  68+ E063 61 74 74 65
  68+ E067 6F 20 56 69
  68+ E06B 74 74 75 72
  68+ E06F 69 20 0D
  69+ E072 07 00                        db      7,0
  70+ E074                              End_Heap
  70+ E074             >Heap_Ptr        defl    $ - $E000
  70+ E074             >                org     temp_ORG
  70+ 639A             >
  71+ 639A
  72+ 639A              //  ______________________________________________________________________
  73+ 639A
  74+ 639A              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 639A              // instead of their equivalent long sequences.
  76+ 639A
  77+ 639A              //  ______________________________________________________________________
  78+ 639A
  79+ 639A              // address for "next" - inner interpreter
  80+ 639A              // This address must always be pointed by IX
  81+ 639A              // "next" macro simply does a  jp(ix)  instruction
  82+ 639A
  83+ 639A              // Psh2_Ptr:       push    de
  84+ 639A              // Psh1_Ptr:       push    hl
  85+ 639A
  86+ 639A              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 639A
  88+ 639A                              if ( 1 == DEBUGGING )
  89+ 639A ~                            ld      hl, Next_Breakpoint_1
  90+ 639A ~                            and     a
  91+ 639A ~                            sbc     hl, bc
  92+ 639A ~                            jr      nz, Next_Continue
  93+ 639A ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 639A                              endif
  95+ 639A
  96+ 639A              Next_Continue:
  97+ 639A 0A                           ld      a, (bc)
  98+ 639B 03                           inc     bc
  99+ 639C 6F                           ld      l, a
 100+ 639D 0A                           ld      a, (bc)
 101+ 639E 03                           inc     bc
 102+ 639F 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 63A0
 104+ 63A0              // Execute xt i.e. CFA held in HL
 105+ 63A0              Exec_Ptr:
 106+ 63A0
 107+ 63A0
 108+ 63A0
 109+ 63A0
 110+ 63A0 E9                           jp      (hl)                // and jump to it
 111+ 63A1                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 63A1
 113+ 63A1              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 63A1              // 0x00         n --      ( compile time )
 115+ 63A1              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 63A1              //              next
 117+ 63A1
 118+ 63A1              //  ______________________________________________________________________
 119+ 63A1              //
 120+ 63A1              // lit          -- x
 121+ 63A1              // puts on top of stack the value of the following word.
 122+ 63A1              // it is compiled in colon definition before a literal number
 123+ 63A1
 124+ 63A1                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 63A1             >
 124+ 63A1             >Dict_Ptr        defl    $
 124+ 63A1             >
 124+ 63A1             >//              ______________________________________________________________________
 124+ 63A1             >//              Heap part
 124+ 63A1             >
 124+ 63A1             >
 124+ 63A1             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E074             >
 124+ E074             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E074             >Latest_Definition defl  Heap_Ptr
 124+ E074             >
 124+ E074             >                // dummy db directives used to calculate length of namec
 124+ E074 4C 49 54    >                db      "LIT"
 124+ E077             >len_NFA         defl    $ - temp_NFA
 124+ E077             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E074             >
 124+ E074 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E075 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E078             >                org     $-1                 // alter last byte of Name just above to set
 124+ E077 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E078             >
 124+ E078 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E07A             >Prev_Ptr        defl    Heap_Ptr
 124+ E07A             >
 124+ E07A             >mirror_Ptr      defl    $
 124+ E07A             >
 124+ E07A A3 63       >                dw      Dict_Ptr + 2        // xt
 124+ E07C             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E07C             >
 124+ E07C             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E07C             >
 124+ E07C             >//              ______________________________________________________________________
 124+ E07C             >//              Dictionary part
 124+ E07C             >
 124+ E07C             >                org     Dict_Ptr
 124+ 63A1             >
 124+ 63A1 7A 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 63A3             >
 124+ 63A3             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 63A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 63A3 ~           >
 124+ 63A3 ~           >
 124+ 63A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 63A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 63A3             >
 124+ 63A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 63A3
 126+ 63A3 0A                           ld      a, (bc)
 127+ 63A4 03                           inc     bc
 128+ 63A5 6F                           ld      l, a
 129+ 63A6 0A                           ld      a, (bc)
 130+ 63A7 03                           inc     bc
 131+ 63A8 67                           ld      h, a
 132+ 63A9 E5                           push    hl
 133+ 63AA                              next
 133+ 63AA DD E9       >                jp      (ix)
 134+ 63AC
 135+ 63AC              //  ______________________________________________________________________
 136+ 63AC              //
 137+ 63AC              // execute      i*x xt -- j*x
 138+ 63AC              // execution token. usually xt is given by CFA
 139+ 63AC
 140+ 63AC                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 63AC             >
 140+ 63AC             >Dict_Ptr        defl    $
 140+ 63AC             >
 140+ 63AC             >//              ______________________________________________________________________
 140+ 63AC             >//              Heap part
 140+ 63AC             >
 140+ 63AC             >
 140+ 63AC             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E07C             >
 140+ E07C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E07C             >Latest_Definition defl  Heap_Ptr
 140+ E07C             >
 140+ E07C             >                // dummy db directives used to calculate length of namec
 140+ E07C 45 58 45 43 >                db      "EXECUTE"
 140+ E080 55 54 45    >
 140+ E083             >len_NFA         defl    $ - temp_NFA
 140+ E083             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E07C             >
 140+ E07C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E07D 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E081 55 54 45    >
 140+ E084             >                org     $-1                 // alter last byte of Name just above to set
 140+ E083 C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E084             >
 140+ E084 74 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E086             >Prev_Ptr        defl    Heap_Ptr
 140+ E086             >
 140+ E086             >mirror_Ptr      defl    $
 140+ E086             >
 140+ E086 AE 63       >                dw      Dict_Ptr + 2        // xt
 140+ E088             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E088             >
 140+ E088             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E088             >
 140+ E088             >//              ______________________________________________________________________
 140+ E088             >//              Dictionary part
 140+ E088             >
 140+ E088             >                org     Dict_Ptr
 140+ 63AC             >
 140+ 63AC 86 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 63AE             >
 140+ 63AE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 63AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 63AE ~           >
 140+ 63AE ~           >
 140+ 63AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 63AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 63AE             >
 140+ 63AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 63AE C9                           ret
 142+ 63AF
 143+ 63AF              //  ______________________________________________________________________
 144+ 63AF              //
 145+ 63AF              // brk
 146+ 63AF              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 63AF              //              next
 148+ 63AF
 149+ 63AF
 150+ 63AF
 151+ 63AF              //  ______________________________________________________________________
 152+ 63AF              //
 153+ 63AF              // (+loop)      n --
 154+ 63AF              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 63AF              // keep track of index and limit, they are accessed via I and I'
 156+ 63AF              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 63AF              // between the loop limit minus one and the loop limit, continue execution
 158+ 63AF              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 63AF              // parameters and continue execution immediately following the loop.
 160+ 63AF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 63AF             >
 160+ 63AF             >Dict_Ptr        defl    $
 160+ 63AF             >
 160+ 63AF             >//              ______________________________________________________________________
 160+ 63AF             >//              Heap part
 160+ 63AF             >
 160+ 63AF             >
 160+ 63AF             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E088             >
 160+ E088             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E088             >Latest_Definition defl  Heap_Ptr
 160+ E088             >
 160+ E088             >                // dummy db directives used to calculate length of namec
 160+ E088 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E08C 4F 50 29    >
 160+ E08F             >len_NFA         defl    $ - temp_NFA
 160+ E08F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E088             >
 160+ E088 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E089 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E08D 4F 50 29    >
 160+ E090             >                org     $-1                 // alter last byte of Name just above to set
 160+ E08F A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E090             >
 160+ E090 7C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E092             >Prev_Ptr        defl    Heap_Ptr
 160+ E092             >
 160+ E092             >mirror_Ptr      defl    $
 160+ E092             >
 160+ E092 B1 63       >                dw      Dict_Ptr + 2        // xt
 160+ E094             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E094             >
 160+ E094             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E094             >
 160+ E094             >//              ______________________________________________________________________
 160+ E094             >//              Dictionary part
 160+ E094             >
 160+ E094             >                org     Dict_Ptr
 160+ 63AF             >
 160+ 63AF 92 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 63B1             >
 160+ 63B1             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 63B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 63B1 ~           >
 160+ 63B1 ~           >
 160+ 63B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 63B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 63B1             >
 160+ 63B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 63B1
 162+ 63B1              Loop_Ptr:
 163+ 63B1 E1                           pop     hl                  // get increment
 164+ 63B2 EB                           ex      de, hl
 165+ 63B3                              // *** ldhlrp
 166+ 63B3 C5                           push    bc                  // Save IP
 167+ 63B4 42                           ld      b, d                // bc is increment
 168+ 63B5 4B                           ld      c, e
 169+ 63B6 E5                           push    hl
 170+ 63B7 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 63B8 7B                           ld      a, e                // de keeps index before increment.
 172+ 63B9 81                           add     c
 173+ 63BA 77                           ld      (hl), a
 174+ 63BB 23                           inc     hl
 175+ 63BC 56                           ld      d, (hl)
 176+ 63BD 7A                           ld      a, d
 177+ 63BE 88                           adc     b
 178+ 63BF 77                           ld      (hl),a
 179+ 63C0 23                           inc     hl
 180+ 63C1
 181+ 63C1 7B                           ld      a, e
 182+ 63C2 96                           sub     (hl)
 183+ 63C3 5F                           ld      e, a
 184+ 63C4 23                           inc     hl
 185+ 63C5 7A                           ld      a, d
 186+ 63C6 9E                           sbc     (hl)
 187+ 63C7 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 63C8
 189+ 63C8 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 63C9 09                           add     hl, bc
 191+ 63CA CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 63CC 28 01                        jr      z, Loop_NegativeIncrement
 193+ 63CE 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 63CF              Loop_NegativeIncrement:
 195+ 63CF 38 04                        jr      c, Loop_Endif
 196+ 63D1 D1                               pop     de              // Discard RP+3, retrieve original RP
 197+ 63D2 C1                               pop     bc                  // Retrieve IP
 198+ 63D3 18 13                            jr      Branch_Ptr      // perform branch consuming following cell
 199+ 63D5              Loop_Endif:
 200+ 63D5 C1                           pop     bc                  // discard original RP
 201+ 63D6 EB                           ex      de, hl
 202+ 63D7 23                           inc     hl                  // keep    RP+4 (exit from loop)
 203+ 63D8                              // *** ldrphl                      // ld rp,hl macro 30h +Origin
 204+ 63D8 EB                           ex      de, hl
 205+ 63D9 C1                           pop     bc                  // Retrieve IP
 206+ 63DA 03                           inc     bc                  // skip branch-style offset
 207+ 63DB 03                           inc     bc
 208+ 63DC                              next
 208+ 63DC DD E9       >                jp      (ix)
 209+ 63DE
 210+ 63DE              //  ______________________________________________________________________
 211+ 63DE              //
 212+ 63DE              // (loop)       n --
 213+ 63DE              // same as (LOOP) but index is incremented by 1
 214+ 63DE              // compiled by LOOP.
 215+ 63DE                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 215+ 63DE             >
 215+ 63DE             >Dict_Ptr        defl    $
 215+ 63DE             >
 215+ 63DE             >//              ______________________________________________________________________
 215+ 63DE             >//              Heap part
 215+ 63DE             >
 215+ 63DE             >
 215+ 63DE             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E094             >
 215+ E094             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E094             >Latest_Definition defl  Heap_Ptr
 215+ E094             >
 215+ E094             >                // dummy db directives used to calculate length of namec
 215+ E094 28 4C 4F 4F >                db      "(LOOP)"
 215+ E098 50 29       >
 215+ E09A             >len_NFA         defl    $ - temp_NFA
 215+ E09A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E094             >
 215+ E094 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E095 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 215+ E099 50 29       >
 215+ E09B             >                org     $-1                 // alter last byte of Name just above to set
 215+ E09A A9          >                db      {b $} | END_BIT     // msb as name end
 215+ E09B             >
 215+ E09B 88 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E09D             >Prev_Ptr        defl    Heap_Ptr
 215+ E09D             >
 215+ E09D             >mirror_Ptr      defl    $
 215+ E09D             >
 215+ E09D E0 63       >                dw      Dict_Ptr + 2        // xt
 215+ E09F             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E09F             >
 215+ E09F             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E09F             >
 215+ E09F             >//              ______________________________________________________________________
 215+ E09F             >//              Dictionary part
 215+ E09F             >
 215+ E09F             >                org     Dict_Ptr
 215+ 63DE             >
 215+ 63DE 9D 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 63E0             >
 215+ 63E0             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 63E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 215+ 63E0 ~           >
 215+ 63E0 ~           >
 215+ 63E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 63E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 63E0             >
 215+ 63E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 63E0 ED 8A 00 01                  push    1
 217+ 63E4 18 CB                        jr      Loop_Ptr
 218+ 63E6
 219+ 63E6              //  ______________________________________________________________________
 220+ 63E6              //
 221+ 63E6              // branch       --
 222+ 63E6              // unconditional branch in colon definition using the following cell as an offset from current IP value
 223+ 63E6              // compiled by ELSE, AGAIN and some other immediate words
 224+ 63E6
 225+ 63E6                              New_Def BRANCH, "BRANCH", is_code, is_normal
 225+ 63E6             >
 225+ 63E6             >Dict_Ptr        defl    $
 225+ 63E6             >
 225+ 63E6             >//              ______________________________________________________________________
 225+ 63E6             >//              Heap part
 225+ 63E6             >
 225+ 63E6             >
 225+ 63E6             >                org     (Heap_Ptr & $1FFF) + $E000
 225+ E09F             >
 225+ E09F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ E09F             >Latest_Definition defl  Heap_Ptr
 225+ E09F             >
 225+ E09F             >                // dummy db directives used to calculate length of namec
 225+ E09F 42 52 41 4E >                db      "BRANCH"
 225+ E0A3 43 48       >
 225+ E0A5             >len_NFA         defl    $ - temp_NFA
 225+ E0A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ E09F             >
 225+ E09F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ E0A0 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 225+ E0A4 43 48       >
 225+ E0A6             >                org     $-1                 // alter last byte of Name just above to set
 225+ E0A5 C8          >                db      {b $} | END_BIT     // msb as name end
 225+ E0A6             >
 225+ E0A6 94 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 225+ E0A8             >Prev_Ptr        defl    Heap_Ptr
 225+ E0A8             >
 225+ E0A8             >mirror_Ptr      defl    $
 225+ E0A8             >
 225+ E0A8 E8 63       >                dw      Dict_Ptr + 2        // xt
 225+ E0AA             >Heap_Ptr        defl    $ - $E000           // save current HP
 225+ E0AA             >
 225+ E0AA             >Current_HP      defl  $ - $E000             // used to set HP once!
 225+ E0AA             >
 225+ E0AA             >//              ______________________________________________________________________
 225+ E0AA             >//              Dictionary part
 225+ E0AA             >
 225+ E0AA             >                org     Dict_Ptr
 225+ 63E6             >
 225+ 63E6 A8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 225+ 63E8             >
 225+ 63E8             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 63E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 63E8 ~           >
 225+ 63E8 ~           >
 225+ 63E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 63E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 63E8             >
 225+ 63E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 63E8              Branch_Ptr:
 227+ 63E8 0A                           ld      a, (bc)
 228+ 63E9 6F                           ld      l, a
 229+ 63EA 03                           inc     bc
 230+ 63EB 0A                           ld      a, (bc)
 231+ 63EC 67                           ld      h, a
 232+ 63ED 0B                           dec     bc
 233+ 63EE 09                           add     hl, bc
 234+ 63EF 4D                           ld      c, l
 235+ 63F0 44                           ld      b, h
 236+ 63F1                              next
 236+ 63F1 DD E9       >                jp      (ix)
 237+ 63F3
 238+ 63F3
 239+ 63F3              //  ______________________________________________________________________
 240+ 63F3              //
 241+ 63F3              // 0branch      f --
 242+ 63F3              // conditional branch if the top-of-stack is ZERO or FALSE.
 243+ 63F3              // compiled by IF, UNTIL and some other immediate words
 244+ 63F3
 245+ 63F3                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 245+ 63F3             >
 245+ 63F3             >Dict_Ptr        defl    $
 245+ 63F3             >
 245+ 63F3             >//              ______________________________________________________________________
 245+ 63F3             >//              Heap part
 245+ 63F3             >
 245+ 63F3             >
 245+ 63F3             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E0AA             >
 245+ E0AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E0AA             >Latest_Definition defl  Heap_Ptr
 245+ E0AA             >
 245+ E0AA             >                // dummy db directives used to calculate length of namec
 245+ E0AA 30 42 52 41 >                db      "0BRANCH"
 245+ E0AE 4E 43 48    >
 245+ E0B1             >len_NFA         defl    $ - temp_NFA
 245+ E0B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E0AA             >
 245+ E0AA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E0AB 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 245+ E0AF 4E 43 48    >
 245+ E0B2             >                org     $-1                 // alter last byte of Name just above to set
 245+ E0B1 C8          >                db      {b $} | END_BIT     // msb as name end
 245+ E0B2             >
 245+ E0B2 9F 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E0B4             >Prev_Ptr        defl    Heap_Ptr
 245+ E0B4             >
 245+ E0B4             >mirror_Ptr      defl    $
 245+ E0B4             >
 245+ E0B4 F5 63       >                dw      Dict_Ptr + 2        // xt
 245+ E0B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E0B6             >
 245+ E0B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E0B6             >
 245+ E0B6             >//              ______________________________________________________________________
 245+ E0B6             >//              Dictionary part
 245+ E0B6             >
 245+ E0B6             >                org     Dict_Ptr
 245+ 63F3             >
 245+ 63F3 B4 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 63F5             >
 245+ 63F5             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 63F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 63F5 ~           >
 245+ 63F5 ~           >
 245+ 63F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 63F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 63F5             >
 245+ 63F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 63F5              ZBranch_Ptr:
 247+ 63F5 E1                           pop     hl
 248+ 63F6 7D                           ld      a, l
 249+ 63F7 B4                           or      h
 250+ 63F8 28 EE                        jr      z, Branch_Ptr
 251+ 63FA 03                           inc     bc                  // if not branch, skip offset cell.
 252+ 63FB 03                           inc     bc
 253+ 63FC                              next
 253+ 63FC DD E9       >                jp      (ix)
 254+ 63FE
 255+ 63FE              //  ______________________________________________________________________
 256+ 63FE              //
 257+ 63FE              // (leave)        --
 258+ 63FE              // compiled by LEAVE
 259+ 63FE              // this forces to exit from loop and jump past
 260+ 63FE                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 260+ 63FE             >
 260+ 63FE             >Dict_Ptr        defl    $
 260+ 63FE             >
 260+ 63FE             >//              ______________________________________________________________________
 260+ 63FE             >//              Heap part
 260+ 63FE             >
 260+ 63FE             >
 260+ 63FE             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E0B6             >
 260+ E0B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E0B6             >Latest_Definition defl  Heap_Ptr
 260+ E0B6             >
 260+ E0B6             >                // dummy db directives used to calculate length of namec
 260+ E0B6 28 4C 45 41 >                db      "(LEAVE)"
 260+ E0BA 56 45 29    >
 260+ E0BD             >len_NFA         defl    $ - temp_NFA
 260+ E0BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E0B6             >
 260+ E0B6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E0B7 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 260+ E0BB 56 45 29    >
 260+ E0BE             >                org     $-1                 // alter last byte of Name just above to set
 260+ E0BD A9          >                db      {b $} | END_BIT     // msb as name end
 260+ E0BE             >
 260+ E0BE AA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E0C0             >Prev_Ptr        defl    Heap_Ptr
 260+ E0C0             >
 260+ E0C0             >mirror_Ptr      defl    $
 260+ E0C0             >
 260+ E0C0 00 64       >                dw      Dict_Ptr + 2        // xt
 260+ E0C2             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E0C2             >
 260+ E0C2             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E0C2             >
 260+ E0C2             >//              ______________________________________________________________________
 260+ E0C2             >//              Dictionary part
 260+ E0C2             >
 260+ E0C2             >                org     Dict_Ptr
 260+ 63FE             >
 260+ 63FE C0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6400             >
 260+ 6400             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6400 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 6400 ~           >
 260+ 6400 ~           >
 260+ 6400             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6400             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6400             >
 260+ 6400             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6400 EB                           ex      de, hl
 262+ 6401                              // *** ldhlrp
 263+ 6401 3E 04                        ld      a, 4
 264+ 6403 ED 31                        add     hl, a
 265+ 6405                              // *** ldrphl
 266+ 6405 EB                           ex      de, hl
 267+ 6406 18 E0                        jr      Branch_Ptr       // perform branch consuming following cell
 268+ 6408                              next
 268+ 6408 DD E9       >                jp      (ix)
 269+ 640A
 270+ 640A              //  ______________________________________________________________________
 271+ 640A              //
 272+ 640A              // (?do)        lim ind --
 273+ 640A              // compiled by ?DO to make a loop checking for lim == ind first
 274+ 640A              // at run-time (?DO) must be followed by a BRANCH offset
 275+ 640A              // used to skip the loop if lim == ind
 276+ 640A                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 276+ 640A             >
 276+ 640A             >Dict_Ptr        defl    $
 276+ 640A             >
 276+ 640A             >//              ______________________________________________________________________
 276+ 640A             >//              Heap part
 276+ 640A             >
 276+ 640A             >
 276+ 640A             >                org     (Heap_Ptr & $1FFF) + $E000
 276+ E0C2             >
 276+ E0C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ E0C2             >Latest_Definition defl  Heap_Ptr
 276+ E0C2             >
 276+ E0C2             >                // dummy db directives used to calculate length of namec
 276+ E0C2 28 3F 44 4F >                db      "(?DO)"
 276+ E0C6 29          >
 276+ E0C7             >len_NFA         defl    $ - temp_NFA
 276+ E0C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ E0C2             >
 276+ E0C2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ E0C3 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 276+ E0C7 29          >
 276+ E0C8             >                org     $-1                 // alter last byte of Name just above to set
 276+ E0C7 A9          >                db      {b $} | END_BIT     // msb as name end
 276+ E0C8             >
 276+ E0C8 B6 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 276+ E0CA             >Prev_Ptr        defl    Heap_Ptr
 276+ E0CA             >
 276+ E0CA             >mirror_Ptr      defl    $
 276+ E0CA             >
 276+ E0CA 0C 64       >                dw      Dict_Ptr + 2        // xt
 276+ E0CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 276+ E0CC             >
 276+ E0CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 276+ E0CC             >
 276+ E0CC             >//              ______________________________________________________________________
 276+ E0CC             >//              Dictionary part
 276+ E0CC             >
 276+ E0CC             >                org     Dict_Ptr
 276+ 640A             >
 276+ 640A CA 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 276+ 640C             >
 276+ 640C             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 640C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 276+ 640C ~           >
 276+ 640C ~           >
 276+ 640C             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 640C             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 640C             >
 276+ 640C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 640C D9                           exx
 278+ 640D D1                            pop     de                  // de has the index
 279+ 640E E1                            pop     hl                  // hl has the limit
 280+ 640F 44                            ld      b, h
 281+ 6410 4D                            ld      c, l
 282+ 6411 E5                            push    hl                  // put them back to stack for later
 283+ 6412 D5                            push    de
 284+ 6413 A7                            and     a                   // reset carry flag
 285+ 6414 ED 52                         sbc     hl, de              // compute limit - index
 286+ 6416 D9                           exx
 287+ 6417 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 288+ 6419 E1                               pop     hl
 289+ 641A E1                               pop     hl
 290+ 641B 18 CB                            jr      Branch_Ptr          // perform branch consuming following cell
 291+ 641D              Do_Ptr:
 292+ 641D                              // *** ldhlrp                 // prepare RP
 293+ 641D                              // *** ex      de, hl
 294+ 641D                              // dec     de
 295+ 641D                              // dec     de
 296+ 641D                              // dec     de
 297+ 641D                              // dec     de
 298+ 641D ED 35 FC FF                  add     de, -4
 299+ 6421 D5                           push    de                  // pass it to h'l'
 300+ 6422                              // *** ex      de, hl
 301+ 6422                              // *** ldrphl
 302+ 6422 D9                           exx
 303+ 6423 E1                            pop     hl
 304+ 6424
 305+ 6424                               // store index as top RP
 306+ 6424 D1                            pop     de
 307+ 6425 73                            ld      (hl), e
 308+ 6426 23                            inc     hl
 309+ 6427 72                            ld      (hl), d
 310+ 6428 23                            inc     hl
 311+ 6429                               // stores lim as second from top RP
 312+ 6429 D1                            pop     de
 313+ 642A 73                            ld      (hl), e
 314+ 642B 23                            inc     hl
 315+ 642C 72                            ld      (hl), d
 316+ 642D D9                           exx
 317+ 642E                              // skip branch-style offseet
 318+ 642E 03                           inc     bc
 319+ 642F 03                           inc     bc
 320+ 6430                              next
 320+ 6430 DD E9       >                jp      (ix)
 321+ 6432
 322+ 6432              //  ______________________________________________________________________
 323+ 6432              //
 324+ 6432              // (do)        lim ind --
 325+ 6432              // compiled by DO to make a loop checking for lim == ind first
 326+ 6432              // this is a simpler version of (?DO)
 327+ 6432                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 6432             >
 327+ 6432             >Dict_Ptr        defl    $
 327+ 6432             >
 327+ 6432             >//              ______________________________________________________________________
 327+ 6432             >//              Heap part
 327+ 6432             >
 327+ 6432             >
 327+ 6432             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0CC             >
 327+ E0CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0CC             >Latest_Definition defl  Heap_Ptr
 327+ E0CC             >
 327+ E0CC             >                // dummy db directives used to calculate length of namec
 327+ E0CC 28 44 4F 29 >                db      "(DO)"
 327+ E0D0             >len_NFA         defl    $ - temp_NFA
 327+ E0D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0CC             >
 327+ E0CC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0CD 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0D1             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0D0 A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0D1             >
 327+ E0D1 C2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0D3             >Prev_Ptr        defl    Heap_Ptr
 327+ E0D3             >
 327+ E0D3             >mirror_Ptr      defl    $
 327+ E0D3             >
 327+ E0D3 34 64       >                dw      Dict_Ptr + 2        // xt
 327+ E0D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0D5             >
 327+ E0D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0D5             >
 327+ E0D5             >//              ______________________________________________________________________
 327+ E0D5             >//              Dictionary part
 327+ E0D5             >
 327+ E0D5             >                org     Dict_Ptr
 327+ 6432             >
 327+ 6432 D3 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 6434             >
 327+ 6434             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 6434 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 6434 ~           >
 327+ 6434 ~           >
 327+ 6434             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 6434             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 6434             >
 327+ 6434             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 6434 0B                           dec     bc                  // prepare IP beforehand
 329+ 6435 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 330+ 6436 18 E5                        jr      Do_Ptr
 331+ 6438
 332+ 6438              //  ______________________________________________________________________
 333+ 6438              //
 334+ 6438              // i            -- n
 335+ 6438              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 6438              // the current value of the index-loop
 337+ 6438                              New_Def I, "I", is_code, is_normal
 337+ 6438             >
 337+ 6438             >Dict_Ptr        defl    $
 337+ 6438             >
 337+ 6438             >//              ______________________________________________________________________
 337+ 6438             >//              Heap part
 337+ 6438             >
 337+ 6438             >
 337+ 6438             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0D5             >
 337+ E0D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0D5             >Latest_Definition defl  Heap_Ptr
 337+ E0D5             >
 337+ E0D5             >                // dummy db directives used to calculate length of namec
 337+ E0D5 49          >                db      "I"
 337+ E0D6             >len_NFA         defl    $ - temp_NFA
 337+ E0D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0D5             >
 337+ E0D5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D6 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D7             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D6 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D7             >
 337+ E0D7 CC 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D9             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D9             >
 337+ E0D9             >mirror_Ptr      defl    $
 337+ E0D9             >
 337+ E0D9 3A 64       >                dw      Dict_Ptr + 2        // xt
 337+ E0DB             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0DB             >
 337+ E0DB             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0DB             >
 337+ E0DB             >//              ______________________________________________________________________
 337+ E0DB             >//              Dictionary part
 337+ E0DB             >
 337+ E0DB             >                org     Dict_Ptr
 337+ 6438             >
 337+ 6438 D9 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 643A             >
 337+ 643A             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 643A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 643A ~           >
 337+ 643A ~           >
 337+ 643A             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 643A             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 643A             >
 337+ 643A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 643A              I_Ptr:
 339+ 643A 62                           ld      h, d
 340+ 643B 6B                           ld      l, e
 341+ 643C                              // *** ldhlrp
 342+ 643C              I_Ptr_prime:
 343+ 643C 7E                           ld      a, (hl)
 344+ 643D 23                           inc     hl
 345+ 643E 66                           ld      h, (hl)
 346+ 643F 6F                           ld      l, a
 347+ 6440 E5                           push    hl
 348+ 6441                              next
 348+ 6441 DD E9       >                jp      (ix)
 349+ 6443
 350+ 6443
 351+ 6443              //  ______________________________________________________________________
 352+ 6443              //
 353+ 6443              // i'            -- n
 354+ 6443              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 6443              // the limit of the index-loop
 356+ 6443
 357+ 6443                              New_Def II, "I'", is_code, is_normal
 357+ 6443             >
 357+ 6443             >Dict_Ptr        defl    $
 357+ 6443             >
 357+ 6443             >//              ______________________________________________________________________
 357+ 6443             >//              Heap part
 357+ 6443             >
 357+ 6443             >
 357+ 6443             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0DB             >
 357+ E0DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0DB             >Latest_Definition defl  Heap_Ptr
 357+ E0DB             >
 357+ E0DB             >                // dummy db directives used to calculate length of namec
 357+ E0DB 49 27       >                db      "I'"
 357+ E0DD             >len_NFA         defl    $ - temp_NFA
 357+ E0DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0DB             >
 357+ E0DB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0DC 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0DE             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0DD A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0DE             >
 357+ E0DE D5 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0E0             >Prev_Ptr        defl    Heap_Ptr
 357+ E0E0             >
 357+ E0E0             >mirror_Ptr      defl    $
 357+ E0E0             >
 357+ E0E0 45 64       >                dw      Dict_Ptr + 2        // xt
 357+ E0E2             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0E2             >
 357+ E0E2             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0E2             >
 357+ E0E2             >//              ______________________________________________________________________
 357+ E0E2             >//              Dictionary part
 357+ E0E2             >
 357+ E0E2             >                org     Dict_Ptr
 357+ 6443             >
 357+ 6443 E0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 6445             >
 357+ 6445             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 6445 ~           >
 357+ 6445 ~           >
 357+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 6445             >
 357+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 6445 62                           ld      h, d
 359+ 6446 6B                           ld      l, e
 360+ 6447                              // *** ldhlrp
 361+ 6447 23                           inc     hl
 362+ 6448 23                           inc     hl
 363+ 6449 18 F1                        jr      I_Ptr_prime
 364+ 644B
 365+ 644B
 366+ 644B              //  ______________________________________________________________________
 367+ 644B              //
 368+ 644B              // digit        c n -- u tf  |  ff
 369+ 644B              // convert a character c using base n
 370+ 644B              // returns a unsigned number and a true flag
 371+ 644B              // or just a false flag if the conversion fails
 372+ 644B                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 644B             >
 372+ 644B             >Dict_Ptr        defl    $
 372+ 644B             >
 372+ 644B             >//              ______________________________________________________________________
 372+ 644B             >//              Heap part
 372+ 644B             >
 372+ 644B             >
 372+ 644B             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0E2             >
 372+ E0E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0E2             >Latest_Definition defl  Heap_Ptr
 372+ E0E2             >
 372+ E0E2             >                // dummy db directives used to calculate length of namec
 372+ E0E2 44 49 47 49 >                db      "DIGIT"
 372+ E0E6 54          >
 372+ E0E7             >len_NFA         defl    $ - temp_NFA
 372+ E0E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0E2             >
 372+ E0E2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0E3 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E7 54          >
 372+ E0E8             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E7 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E8             >
 372+ E0E8 DB 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0EA             >Prev_Ptr        defl    Heap_Ptr
 372+ E0EA             >
 372+ E0EA             >mirror_Ptr      defl    $
 372+ E0EA             >
 372+ E0EA 4D 64       >                dw      Dict_Ptr + 2        // xt
 372+ E0EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0EC             >
 372+ E0EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0EC             >
 372+ E0EC             >//              ______________________________________________________________________
 372+ E0EC             >//              Dictionary part
 372+ E0EC             >
 372+ E0EC             >                org     Dict_Ptr
 372+ 644B             >
 372+ 644B EA 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 644D             >
 372+ 644D             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 644D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 644D ~           >
 372+ 644D ~           >
 372+ 644D             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 644D             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 644D             >
 372+ 644D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 644D D9                           exx
 374+ 644E E1                           pop     hl                  // l has the base
 375+ 644F D1                           pop     de                  // e has the digit
 376+ 6450 7B                           ld      a, e
 377+ 6451 FE 60                        cp      $60                 // check if lowercase
 378+ 6453 38 02                        jr      c, Digit_Uppercase
 379+ 6455 D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 6457              Digit_Uppercase:
 381+ 6457 D6 30                        sub     $30
 382+ 6459 38 16                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 645B FE 0A                            cp      $0A
 384+ 645D 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 645F D6 07                                sub     7                   // try hex and subtract 7
 386+ 6461 FE 0A                                cp      $0A
 387+ 6463 38 0C                                jr      c,  Digit_Fail      // it is not hex !
 388+ 6465
 389+ 6465              Digit_Decimal:
 390+ 6465                              // compare digit
 391+ 6465 BD                           cp      l                   // compare with base
 392+ 6466 30 09                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 6468 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 6469 21 01 00                         ld      hl, 1
 395+ 646C D5                               push    de
 396+ 646D E5                               push    hl
 397+ 646E D9                               exx
 398+ 646F                                  next
 398+ 646F DD E9       >                jp      (ix)
 399+ 6471              Digit_Fail:
 400+ 6471 21 00 00                     ld      hl, 0
 401+ 6474 E5                           push    hl
 402+ 6475 D9                           exx
 403+ 6476                              next
 403+ 6476 DD E9       >                jp      (ix)
 404+ 6478
 405+ 6478              //  ______________________________________________________________________
 406+ 6478              //
 407+ 6478              //  parametric uppercase routine
 408+ 6478              //  depending on the following op-code the routine can be by-passed
 409+ 6478              //  changing the behaviour of some callers.
 410+ 6478              //  If it is "ret" then the system is Case-Sensitive
 411+ 6478              //  If it is "Nop" then the system is Case-Insensitive
 412+ 6478              //  Only A register is touched.
 413+ 6478 00           Case_Sensitive: nop                         // Default is case-insensitive.
 414+ 6479              Case_Upper:
 415+ 6479 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 416+ 647B D8                           ret     c                   // no change if A < "a"
 417+ 647C FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 418+ 647E D0                           ret     nc                  // no change if A > "z"
 419+ 647F D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 420+ 6481 C9                           ret
 421+ 6482
 422+ 6482              //  ______________________________________________________________________
 423+ 6482              //
 424+ 6482              //  caseon      --
 425+ 6482              // set system case-sensitivity on
 426+ 6482              // it patches a RET/NOP at the beginning of the uppercase-routine
 427+ 6482                              New_Def CASEON, "CASEON", is_code, is_normal
 427+ 6482             >
 427+ 6482             >Dict_Ptr        defl    $
 427+ 6482             >
 427+ 6482             >//              ______________________________________________________________________
 427+ 6482             >//              Heap part
 427+ 6482             >
 427+ 6482             >
 427+ 6482             >                org     (Heap_Ptr & $1FFF) + $E000
 427+ E0EC             >
 427+ E0EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ E0EC             >Latest_Definition defl  Heap_Ptr
 427+ E0EC             >
 427+ E0EC             >                // dummy db directives used to calculate length of namec
 427+ E0EC 43 41 53 45 >                db      "CASEON"
 427+ E0F0 4F 4E       >
 427+ E0F2             >len_NFA         defl    $ - temp_NFA
 427+ E0F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ E0EC             >
 427+ E0EC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ E0ED 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 427+ E0F1 4F 4E       >
 427+ E0F3             >                org     $-1                 // alter last byte of Name just above to set
 427+ E0F2 CE          >                db      {b $} | END_BIT     // msb as name end
 427+ E0F3             >
 427+ E0F3 E2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 427+ E0F5             >Prev_Ptr        defl    Heap_Ptr
 427+ E0F5             >
 427+ E0F5             >mirror_Ptr      defl    $
 427+ E0F5             >
 427+ E0F5 84 64       >                dw      Dict_Ptr + 2        // xt
 427+ E0F7             >Heap_Ptr        defl    $ - $E000           // save current HP
 427+ E0F7             >
 427+ E0F7             >Current_HP      defl  $ - $E000             // used to set HP once!
 427+ E0F7             >
 427+ E0F7             >//              ______________________________________________________________________
 427+ E0F7             >//              Dictionary part
 427+ E0F7             >
 427+ E0F7             >                org     Dict_Ptr
 427+ 6482             >
 427+ 6482 F5 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 427+ 6484             >
 427+ 6484             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 6484 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 427+ 6484 ~           >
 427+ 6484 ~           >
 427+ 6484             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 6484             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 6484             >
 427+ 6484             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 6484 3E C9                        ld      a, $C9              // "ret"
 429+ 6486 32 78 64                     ld      (Case_Sensitive), a
 430+ 6489                              next
 430+ 6489 DD E9       >                jp      (ix)
 431+ 648B
 432+ 648B              //  ______________________________________________________________________
 433+ 648B              //
 434+ 648B              //  caseoff     --
 435+ 648B              // set system case-sensitivity on
 436+ 648B              // it patches a RET/NOP at the beginning of the uppercase-routine
 437+ 648B                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 437+ 648B             >
 437+ 648B             >Dict_Ptr        defl    $
 437+ 648B             >
 437+ 648B             >//              ______________________________________________________________________
 437+ 648B             >//              Heap part
 437+ 648B             >
 437+ 648B             >
 437+ 648B             >                org     (Heap_Ptr & $1FFF) + $E000
 437+ E0F7             >
 437+ E0F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ E0F7             >Latest_Definition defl  Heap_Ptr
 437+ E0F7             >
 437+ E0F7             >                // dummy db directives used to calculate length of namec
 437+ E0F7 43 41 53 45 >                db      "CASEOFF"
 437+ E0FB 4F 46 46    >
 437+ E0FE             >len_NFA         defl    $ - temp_NFA
 437+ E0FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ E0F7             >
 437+ E0F7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ E0F8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 437+ E0FC 4F 46 46    >
 437+ E0FF             >                org     $-1                 // alter last byte of Name just above to set
 437+ E0FE C6          >                db      {b $} | END_BIT     // msb as name end
 437+ E0FF             >
 437+ E0FF EC 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 437+ E101             >Prev_Ptr        defl    Heap_Ptr
 437+ E101             >
 437+ E101             >mirror_Ptr      defl    $
 437+ E101             >
 437+ E101 8D 64       >                dw      Dict_Ptr + 2        // xt
 437+ E103             >Heap_Ptr        defl    $ - $E000           // save current HP
 437+ E103             >
 437+ E103             >Current_HP      defl  $ - $E000             // used to set HP once!
 437+ E103             >
 437+ E103             >//              ______________________________________________________________________
 437+ E103             >//              Dictionary part
 437+ E103             >
 437+ E103             >                org     Dict_Ptr
 437+ 648B             >
 437+ 648B 01 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 437+ 648D             >
 437+ 648D             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 648D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 437+ 648D ~           >
 437+ 648D ~           >
 437+ 648D             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 648D             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 648D             >
 437+ 648D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 648D 3E 00                        ld      a, $00              // "nop"
 439+ 648F 32 78 64                     ld      (Case_Sensitive), a
 440+ 6492                              next
 440+ 6492 DD E9       >                jp      (ix)
 441+ 6494
 442+ 6494              //  ______________________________________________________________________
 443+ 6494              //
 444+ 6494              //  upper       c1 -- c1 | c2
 445+ 6494              // character on top of stack is forced to Uppercase.
 446+ 6494                              New_Def UPPER, "UPPER", is_code, is_normal
 446+ 6494             >
 446+ 6494             >Dict_Ptr        defl    $
 446+ 6494             >
 446+ 6494             >//              ______________________________________________________________________
 446+ 6494             >//              Heap part
 446+ 6494             >
 446+ 6494             >
 446+ 6494             >                org     (Heap_Ptr & $1FFF) + $E000
 446+ E103             >
 446+ E103             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ E103             >Latest_Definition defl  Heap_Ptr
 446+ E103             >
 446+ E103             >                // dummy db directives used to calculate length of namec
 446+ E103 55 50 50 45 >                db      "UPPER"
 446+ E107 52          >
 446+ E108             >len_NFA         defl    $ - temp_NFA
 446+ E108             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ E103             >
 446+ E103 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ E104 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 446+ E108 52          >
 446+ E109             >                org     $-1                 // alter last byte of Name just above to set
 446+ E108 D2          >                db      {b $} | END_BIT     // msb as name end
 446+ E109             >
 446+ E109 F7 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 446+ E10B             >Prev_Ptr        defl    Heap_Ptr
 446+ E10B             >
 446+ E10B             >mirror_Ptr      defl    $
 446+ E10B             >
 446+ E10B 96 64       >                dw      Dict_Ptr + 2        // xt
 446+ E10D             >Heap_Ptr        defl    $ - $E000           // save current HP
 446+ E10D             >
 446+ E10D             >Current_HP      defl  $ - $E000             // used to set HP once!
 446+ E10D             >
 446+ E10D             >//              ______________________________________________________________________
 446+ E10D             >//              Dictionary part
 446+ E10D             >
 446+ E10D             >                org     Dict_Ptr
 446+ 6494             >
 446+ 6494 0B 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 446+ 6496             >
 446+ 6496             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 6496 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 446+ 6496 ~           >
 446+ 6496 ~           >
 446+ 6496             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 6496             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 6496             >
 446+ 6496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 6496 E1                           pop     hl
 448+ 6497 7D                           ld      a, l
 449+ 6498 CD 79 64                     call    Case_Upper
 450+ 649B 6F                           ld      l, a
 451+ 649C
 452+ 649C                              psh1
 452+ 649C E5          >                push    hl
 452+ 649D DD E9       >                jp      (ix)
 453+ 649F
 454+ 649F              //  ______________________________________________________________________
 455+ 649F
 456+ 649F              MMU7_read:
 457+ 649F 01 3B 24                     ld      bc, $243B
 458+ 64A2 3E 57                        ld      a, 87
 459+ 64A4 ED 79                        out     (c), a
 460+ 64A6 04                           inc     b
 461+ 64A7 ED 78                        in      a, (c)
 462+ 64A9 C9                           ret
 463+ 64AA
 464+ 64AA              //  ______________________________________________________________________
 465+ 64AA
 466+ 64AA              TO_FAR_rout:
 467+ 64AA 7C                           ld      a, h
 468+ 64AB 08                           ex      af, af
 469+ 64AC 7C                           ld      a, h
 470+ 64AD F6 E0                        or      $E0
 471+ 64AF 67                           ld      h, a
 472+ 64B0 08                           ex      af, af
 473+ 64B1 07                           rlca
 474+ 64B2 07                           rlca
 475+ 64B3 07                           rlca
 476+ 64B4 E6 07                        and     $07
 477+ 64B6 C6 20                        add     $20
 478+ 64B8 C9                           ret
 479+ 64B9
 480+ 64B9
 481+ 64B9              //  ______________________________________________________________________
 482+ 64B9              //
 483+ 64B9              // (find)       addr voc -- 0 | cfa b 1
 484+ 64B9              // vocabulary search,
 485+ 64B9              // - voc is starting word's NFA
 486+ 64B9              // - addr is the string to be searched for
 487+ 64B9              // On success, it returns the CFA of found word, the first NFA byte
 488+ 64B9              // (which contains length and some flags) and a true flag.
 489+ 64B9              // On fail, a false flag  (no more: leaves addr unchanged)
 490+ 64B9                              New_Def C_FIND, "(FIND)", is_code, is_normal
 490+ 64B9             >
 490+ 64B9             >Dict_Ptr        defl    $
 490+ 64B9             >
 490+ 64B9             >//              ______________________________________________________________________
 490+ 64B9             >//              Heap part
 490+ 64B9             >
 490+ 64B9             >
 490+ 64B9             >                org     (Heap_Ptr & $1FFF) + $E000
 490+ E10D             >
 490+ E10D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ E10D             >Latest_Definition defl  Heap_Ptr
 490+ E10D             >
 490+ E10D             >                // dummy db directives used to calculate length of namec
 490+ E10D 28 46 49 4E >                db      "(FIND)"
 490+ E111 44 29       >
 490+ E113             >len_NFA         defl    $ - temp_NFA
 490+ E113             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ E10D             >
 490+ E10D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ E10E 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 490+ E112 44 29       >
 490+ E114             >                org     $-1                 // alter last byte of Name just above to set
 490+ E113 A9          >                db      {b $} | END_BIT     // msb as name end
 490+ E114             >
 490+ E114 03 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 490+ E116             >Prev_Ptr        defl    Heap_Ptr
 490+ E116             >
 490+ E116             >mirror_Ptr      defl    $
 490+ E116             >
 490+ E116 BB 64       >                dw      Dict_Ptr + 2        // xt
 490+ E118             >Heap_Ptr        defl    $ - $E000           // save current HP
 490+ E118             >
 490+ E118             >Current_HP      defl  $ - $E000             // used to set HP once!
 490+ E118             >
 490+ E118             >//              ______________________________________________________________________
 490+ E118             >//              Dictionary part
 490+ E118             >
 490+ E118             >                org     Dict_Ptr
 490+ 64B9             >
 490+ 64B9 16 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 490+ 64BB             >
 490+ 64BB             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 64BB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 490+ 64BB ~           >
 490+ 64BB ~           >
 490+ 64BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 64BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 64BB             >
 490+ 64BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 64BB D9                           exx
 492+ 64BC CD 9F 64                     call    MMU7_read
 493+ 64BF D9                           exx
 494+ 64C0 6F                           ld      l, a
 495+ 64C1 D9                           exx
 496+ 64C2
 497+ 64C2 D1                           pop     de                      // de has dictionary pointer
 498+ 64C3              Find_VocabularyLoop:
 499+ 64C3 7A                               ld      a, d
 500+ 64C4 D6 60                            sub     $60
 501+ 64C6 30 08                            jr      nc, Find_far_endif
 502+ 64C8 EB                                   ex      de, hl
 503+ 64C9 CD AA 64                             call    TO_FAR_rout
 504+ 64CC EB                                   ex      de, hl
 505+ 64CD ED 92 57                             nextreg 87, a
 506+ 64D0              Find_far_endif:
 507+ 64D0 E1                               pop     hl                  // string pointer to search for
 508+ 64D1 E5                               push    hl                  // keep it on stack too for the end.
 509+ 64D2 1A                               ld      a, (de)             // save NFA length byte
 510+ 64D3 08                               ex      af,af'              // for later use (!)
 511+ 64D4 1A                               ld      a, (de)             // reload NFA length byte
 512+ 64D5 AE                               xor     (hl)                // check if same length
 513+ 64D6 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 514+ 64D8                                  // word and text haven't the same length, skip to next vocabulary entry
 515+ 64D8 20 33                            jr      nz, Find_DifferentLenght
 516+ 64DA
 517+ 64DA              Find_ThisWord:      // begin loop
 518+ 64DA 23                                   inc     hl
 519+ 64DB 13                                   inc     de
 520+ 64DC 1A                                   ld      a, (de)
 521+ 64DD                                      // case insensitive option - begin
 522+ 64DD                                      // push    bc
 523+ 64DD E6 80                                and     $80                 // split A in msb and the rest
 524+ 64DF 47                                   ld      b, a
 525+ 64E0 1A                                   ld      a, (de)
 526+ 64E1 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 527+ 64E3 CD 78 64                             call    Case_Sensitive      // uppercase routine
 528+ 64E6 4F                                   ld      c, a
 529+ 64E7 7E                                   ld      a, (hl)
 530+ 64E8 CD 78 64                             call    Case_Sensitive      // uppercase routine
 531+ 64EB A9                                   xor     c
 532+ 64EC A8                                   xor     b
 533+ 64ED                                      // pop     bc
 534+ 64ED                                      // case insensitive option - end
 535+ 64ED 87                                   add     a                   // ignore msb during compare
 536+ 64EE 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 537+ 64F0
 538+ 64F0                                  // loop back until last byte msb is found set
 539+ 64F0                                  // that bit marks the ending char of this word
 540+ 64F0 30 E8                            jr      nc, Find_ThisWord
 541+ 64F2
 542+ 64F2                                  // match found !
 543+ 64F2 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 544+ 64F5 19                               add     hl, de
 545+ 64F6
 546+ 64F6                              //  ld      a, h
 547+ 64F6                              //  and     $E0
 548+ 64F6                              //  xor     h
 549+ 64F6                              //  jr      nz, Non_MMU7
 550+ 64F6                                  //  call    MMU7_read
 551+ 64F6                                  //  dec     a
 552+ 64F6                                  //  jr      z, Non_MMU7
 553+ 64F6 5E                                       ld      e, (hl)
 554+ 64F7 23                                       inc     hl
 555+ 64F8 56                                       ld      d, (hl)
 556+ 64F9 EB                                       ex      de, hl
 557+ 64FA              //Non_MMU7:
 558+ 64FA E3                               ex      (sp), hl            // CFA on stack and drop addr
 559+ 64FB 08                               ex      af, af'             // retrieve NFA byte (!)
 560+ 64FC 5F                               ld      e, a
 561+ 64FD 16 00                            ld      d, 0
 562+ 64FF 21 FF FF                         ld      hl, -1
 563+ 6502 D5                               push    de
 564+ 6503 E5                               push    hl
 565+ 6504 D9                               exx
 566+ 6505 7D                               ld      a, l
 567+ 6506 ED 92 57                         nextreg 87, a
 568+ 6509                                  next
 568+ 6509 DD E9       >                jp      (ix)
 569+ 650B
 570+ 650B              Find_DidntMatch: // didn't match (*)
 571+ 650B 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 572+ 650D
 573+ 650D              Find_DifferentLenght:
 574+ 650D                                  // consume chars until the end of the word
 575+ 650D                                  // that is last byte msb is found set
 576+ 650D 13                                   inc     de
 577+ 650E 1A                                   ld      a, (de)
 578+ 650F 87                                   add     a, a
 579+ 6510 30 FB                            jr      nc, Find_DifferentLenght
 580+ 6512
 581+ 6512              Find_WordEnd:   // word-end  found (**)
 582+ 6512                                  // take LFA and use it
 583+ 6512 13                               inc     de
 584+ 6513 EB                               ex      de, hl
 585+ 6514 5E                               ld      e, (hl)
 586+ 6515 23                               inc     hl
 587+ 6516 56                               ld      d, (hl)
 588+ 6517 7A                               ld      a, d
 589+ 6518 B3                               or      e
 590+ 6519
 591+ 6519                              // loop until end of vocabulary
 592+ 6519 20 A8                        jr      nz, Find_VocabularyLoop
 593+ 651B
 594+ 651B E1                           pop     hl              // without this, leaves addr unchanged
 595+ 651C 21 00 00                     ld      hl, 0
 596+ 651F E5                           push    hl
 597+ 6520 D9                           exx
 598+ 6521 7D                           ld      a, l
 599+ 6522 ED 92 57                     nextreg 87, a
 600+ 6525                              next
 600+ 6525 DD E9       >                jp      (ix)
 601+ 6527
 602+ 6527              //  ______________________________________________________________________
 603+ 6527              //
 604+ 6527              // enclose      a c -- a  n1 n2 n3
 605+ 6527              // starting from a, using delimiter c, determines the offsets:
 606+ 6527              //   n1   the first character non-delimiter
 607+ 6527              //   n2   the first delimiter after the text
 608+ 6527              //   n3   the first character non enclosed.
 609+ 6527              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 610+ 6527              // an uncoditional delimiter.
 611+ 6527              // Examples:
 612+ 6527              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 613+ 6527              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 614+ 6527              // iii:	c  c  'nul'          -- 2  3  2
 615+ 6527                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 615+ 6527             >
 615+ 6527             >Dict_Ptr        defl    $
 615+ 6527             >
 615+ 6527             >//              ______________________________________________________________________
 615+ 6527             >//              Heap part
 615+ 6527             >
 615+ 6527             >
 615+ 6527             >                org     (Heap_Ptr & $1FFF) + $E000
 615+ E118             >
 615+ E118             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ E118             >Latest_Definition defl  Heap_Ptr
 615+ E118             >
 615+ E118             >                // dummy db directives used to calculate length of namec
 615+ E118 45 4E 43 4C >                db      "ENCLOSE"
 615+ E11C 4F 53 45    >
 615+ E11F             >len_NFA         defl    $ - temp_NFA
 615+ E11F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ E118             >
 615+ E118 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ E119 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 615+ E11D 4F 53 45    >
 615+ E120             >                org     $-1                 // alter last byte of Name just above to set
 615+ E11F C5          >                db      {b $} | END_BIT     // msb as name end
 615+ E120             >
 615+ E120 0D 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 615+ E122             >Prev_Ptr        defl    Heap_Ptr
 615+ E122             >
 615+ E122             >mirror_Ptr      defl    $
 615+ E122             >
 615+ E122 29 65       >                dw      Dict_Ptr + 2        // xt
 615+ E124             >Heap_Ptr        defl    $ - $E000           // save current HP
 615+ E124             >
 615+ E124             >Current_HP      defl  $ - $E000             // used to set HP once!
 615+ E124             >
 615+ E124             >//              ______________________________________________________________________
 615+ E124             >//              Dictionary part
 615+ E124             >
 615+ E124             >                org     Dict_Ptr
 615+ 6527             >
 615+ 6527 22 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 615+ 6529             >
 615+ 6529             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 6529 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 615+ 6529 ~           >
 615+ 6529 ~           >
 615+ 6529             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 6529             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 6529             >
 615+ 6529             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 6529 D9                           exx
 617+ 652A D1                           pop     de                  //  e has the character
 618+ 652B E1                           pop     hl                  // hl has the string address
 619+ 652C E5                           push    hl
 620+ 652D 7B                           ld      a, e
 621+ 652E 11 FF FF                     ld      de, -1              // let's start from -1
 622+ 6531 2B                           dec     hl
 623+ 6532              Enclose_NonDelimiter:
 624+ 6532                              // find first non delimiter
 625+ 6532 23                               inc     hl
 626+ 6533 13                               inc     de
 627+ 6534 BE                               cp      (hl)
 628+ 6535 28 FB                        jr      z, Enclose_NonDelimiter
 629+ 6537 D5                           push    de
 630+ 6538
 631+ 6538                              // push    bc                  // save Instruction Pointer
 632+ 6538
 633+ 6538 4F                           ld      c, a                // save char
 634+ 6539 7E                           ld      a, (hl)
 635+ 653A A7                           and     a                   // stop if 0x00
 636+ 653B 20 07                        jr      nz, Enclose_NextChar
 637+ 653D                              /// case iii. no more character in string
 638+ 653D                                  // pop     bc                  // restore Instruction Pointer
 639+ 653D 13                               inc     de
 640+ 653E D5                               push    de
 641+ 653F 1B                               dec     de
 642+ 6540 D5                               push    de
 643+ 6541 D9                               exx
 644+ 6542                                  next
 644+ 6542 DD E9       >                jp      (ix)
 645+ 6544              Enclose_NextChar:
 646+ 6544 79                               ld      a, c
 647+ 6545 23                               inc     hl
 648+ 6546 13                               inc     de
 649+ 6547 BE                               cp      (hl)
 650+ 6548 20 06                            jr      nz, Enclose_NonSeparator
 651+ 654A                                      // case i. first non enclosed
 652+ 654A                                      // pop     bc                  // restore Instruction Pointer
 653+ 654A D5                                   push    de
 654+ 654B 13                                   inc     de
 655+ 654C D5                                   push    de
 656+ 654D D9                                   exx
 657+ 654E                                      next
 657+ 654E DD E9       >                jp      (ix)
 658+ 6550              Enclose_NonSeparator:
 659+ 6550 7E                               ld      a, (hl)
 660+ 6551 A7                               and     a
 661+ 6552 20 F0                        jr      nz, Enclose_NextChar
 662+ 6554
 663+ 6554                              // case ii. separator & terminator
 664+ 6554                              // pop     bc                  // restore Instruction Pointer
 665+ 6554 D5                           push    de
 666+ 6555 D5                           push    de
 667+ 6556 D9                           exx
 668+ 6557                              next
 668+ 6557 DD E9       >                jp      (ix)
 669+ 6559
 670+ 6559              //  ______________________________________________________________________
 671+ 6559              //
 672+ 6559              // (map)        a2 a1 n c1 -- c2
 673+ 6559              // translate character c1 using mapping string a2 and a2
 674+ 6559              // if c1 is not present within string a1 then
 675+ 6559              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 676+ 6559                              New_Def C_MAP, "(MAP)", is_code, is_normal
 676+ 6559             >
 676+ 6559             >Dict_Ptr        defl    $
 676+ 6559             >
 676+ 6559             >//              ______________________________________________________________________
 676+ 6559             >//              Heap part
 676+ 6559             >
 676+ 6559             >
 676+ 6559             >                org     (Heap_Ptr & $1FFF) + $E000
 676+ E124             >
 676+ E124             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 676+ E124             >Latest_Definition defl  Heap_Ptr
 676+ E124             >
 676+ E124             >                // dummy db directives used to calculate length of namec
 676+ E124 28 4D 41 50 >                db      "(MAP)"
 676+ E128 29          >
 676+ E129             >len_NFA         defl    $ - temp_NFA
 676+ E129             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 676+ E124             >
 676+ E124 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 676+ E125 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 676+ E129 29          >
 676+ E12A             >                org     $-1                 // alter last byte of Name just above to set
 676+ E129 A9          >                db      {b $} | END_BIT     // msb as name end
 676+ E12A             >
 676+ E12A 18 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 676+ E12C             >Prev_Ptr        defl    Heap_Ptr
 676+ E12C             >
 676+ E12C             >mirror_Ptr      defl    $
 676+ E12C             >
 676+ E12C 5B 65       >                dw      Dict_Ptr + 2        // xt
 676+ E12E             >Heap_Ptr        defl    $ - $E000           // save current HP
 676+ E12E             >
 676+ E12E             >Current_HP      defl  $ - $E000             // used to set HP once!
 676+ E12E             >
 676+ E12E             >//              ______________________________________________________________________
 676+ E12E             >//              Dictionary part
 676+ E12E             >
 676+ E12E             >                org     Dict_Ptr
 676+ 6559             >
 676+ 6559 2C 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 676+ 655B             >
 676+ 655B             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 676+ 655B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 676+ 655B ~           >
 676+ 655B ~           >
 676+ 655B             >                endif           ; ok        // for other definitions it "points" the correct handler
 676+ 655B             >                // Use of "; ok" to suppress "warning[fwdref]"
 676+ 655B             >
 676+ 655B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 677+ 655B D9                           exx
 678+ 655C E1                           pop     hl
 679+ 655D 7D                           ld      a, l
 680+ 655E C1                           pop     bc
 681+ 655F E1                           pop     hl
 682+ 6560 50                           ld      d, b
 683+ 6561 59                           ld      e, c
 684+ 6562 ED B1                        cpir
 685+ 6564 E1                           pop     hl
 686+ 6565 20 05                        jr      nz, C_Map_Then
 686+ 6567
 687+ 6567 19                               add     hl, de
 688+ 6568 2B                               dec     hl
 689+ 6569 ED 42                            sbc     hl, bc
 690+ 656B 7E                               ld      a, (hl)
 691+ 656C              C_Map_Then:
 692+ 656C 6F                           ld      l, a
 693+ 656D 26 00                        ld      h, 0
 694+ 656F E5                           push    hl
 695+ 6570 D9                           exx
 696+ 6571                              next
 696+ 6571 DD E9       >                jp      (ix)
 697+ 6573
 698+ 6573              //  ______________________________________________________________________
 699+ 6573              //
 700+ 6573              // (compare)    a1 a2 n -- b
 701+ 6573              // this word performs a lexicographic compare of n bytes of text at address a1
 702+ 6573              // with n bytes of text at address a2. It returns numeric a value:
 703+ 6573              //  0 : if strings are equal
 704+ 6573              // +1 : if string at a1 greater than string at a2
 705+ 6573              // -1 : if string at a1 less than string at a2
 706+ 6573              // strings can be 256 bytes in length at most.
 707+ 6573                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 707+ 6573             >
 707+ 6573             >Dict_Ptr        defl    $
 707+ 6573             >
 707+ 6573             >//              ______________________________________________________________________
 707+ 6573             >//              Heap part
 707+ 6573             >
 707+ 6573             >
 707+ 6573             >                org     (Heap_Ptr & $1FFF) + $E000
 707+ E12E             >
 707+ E12E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 707+ E12E             >Latest_Definition defl  Heap_Ptr
 707+ E12E             >
 707+ E12E             >                // dummy db directives used to calculate length of namec
 707+ E12E 28 43 4F 4D >                db      "(COMPARE)"
 707+ E132 50 41 52 45 >
 707+ E136 29          >
 707+ E137             >len_NFA         defl    $ - temp_NFA
 707+ E137             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 707+ E12E             >
 707+ E12E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 707+ E12F 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 707+ E133 50 41 52 45 >
 707+ E137 29          >
 707+ E138             >                org     $-1                 // alter last byte of Name just above to set
 707+ E137 A9          >                db      {b $} | END_BIT     // msb as name end
 707+ E138             >
 707+ E138 24 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 707+ E13A             >Prev_Ptr        defl    Heap_Ptr
 707+ E13A             >
 707+ E13A             >mirror_Ptr      defl    $
 707+ E13A             >
 707+ E13A 75 65       >                dw      Dict_Ptr + 2        // xt
 707+ E13C             >Heap_Ptr        defl    $ - $E000           // save current HP
 707+ E13C             >
 707+ E13C             >Current_HP      defl  $ - $E000             // used to set HP once!
 707+ E13C             >
 707+ E13C             >//              ______________________________________________________________________
 707+ E13C             >//              Dictionary part
 707+ E13C             >
 707+ E13C             >                org     Dict_Ptr
 707+ 6573             >
 707+ 6573 3A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 707+ 6575             >
 707+ 6575             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 707+ 6575 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 707+ 6575 ~           >
 707+ 6575 ~           >
 707+ 6575             >                endif           ; ok        // for other definitions it "points" the correct handler
 707+ 6575             >                // Use of "; ok" to suppress "warning[fwdref]"
 707+ 6575             >
 707+ 6575             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 708+ 6575 D9                           exx
 709+ 6576 E1                           pop     hl                  // Number of bytes
 710+ 6577 7D                           ld      a, l
 711+ 6578 E1                           pop     hl                  // hl points string a2
 712+ 6579 D1                           pop     de                  // hl points string a1
 713+ 657A              //              push    bc                  // Instruction pointer on stack
 714+ 657A 47                           ld      b, a
 715+ 657B              C_Compare_Loop:
 716+ 657B 7E                               ld      a, (hl)
 717+ 657C CD 78 64                         call    Case_Sensitive
 718+ 657F 4F                               ld      c, a
 719+ 6580 1A                               ld      a, (de)
 720+ 6581 CD 78 64                         call    Case_Sensitive
 721+ 6584 B9                               cp      c
 722+ 6585 13                               inc     de
 723+ 6586 23                               inc     hl
 724+ 6587 28 0E                            jr      z, C_Compare_Equal
 725+ 6589 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 726+ 658B 21 01 00                                 ld      hl, 1               // a1 gt a2
 727+ 658E 18 03                                jr      C_Compare_Then      // Else
 728+ 6590              C_Compare_NotLessThan:
 729+ 6590 21 FF FF                                 ld      hl, -1              // a1 lt a2
 730+ 6593              C_Compare_Then:                                 // Endif
 731+ 6593              //                      pop     bc              // restore Instruction Pointer
 732+ 6593 E5                                   push    hl
 733+ 6594 D9                                   exx
 734+ 6595
 735+ 6595                                      next
 735+ 6595 DD E9       >                jp      (ix)
 736+ 6597
 737+ 6597              C_Compare_Equal:
 738+ 6597 10 E2                        djnz    C_Compare_Loop
 739+ 6599 21 00 00                     ld      hl, 0               // a1 eq a2
 740+ 659C              //              pop     bc                  // restore Instruction Pointer
 741+ 659C E5                           push    hl
 742+ 659D D9                           exx
 743+ 659E
 744+ 659E                              next
 744+ 659E DD E9       >                jp      (ix)
 745+ 65A0
 746+ 65A0              //  ______________________________________________________________________
 747+ 65A0              //
 748+ 65A0              // emitc        c --
 749+ 65A0              // low level emit, calls ROM routine at #10 to send a character to
 750+ 65A0              // the the current channel (see SELECT to change stream-channel)
 751+ 65A0                              New_Def EMITC, "EMITC", is_code, is_normal
 751+ 65A0             >
 751+ 65A0             >Dict_Ptr        defl    $
 751+ 65A0             >
 751+ 65A0             >//              ______________________________________________________________________
 751+ 65A0             >//              Heap part
 751+ 65A0             >
 751+ 65A0             >
 751+ 65A0             >                org     (Heap_Ptr & $1FFF) + $E000
 751+ E13C             >
 751+ E13C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 751+ E13C             >Latest_Definition defl  Heap_Ptr
 751+ E13C             >
 751+ E13C             >                // dummy db directives used to calculate length of namec
 751+ E13C 45 4D 49 54 >                db      "EMITC"
 751+ E140 43          >
 751+ E141             >len_NFA         defl    $ - temp_NFA
 751+ E141             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 751+ E13C             >
 751+ E13C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 751+ E13D 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 751+ E141 43          >
 751+ E142             >                org     $-1                 // alter last byte of Name just above to set
 751+ E141 C3          >                db      {b $} | END_BIT     // msb as name end
 751+ E142             >
 751+ E142 2E 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 751+ E144             >Prev_Ptr        defl    Heap_Ptr
 751+ E144             >
 751+ E144             >mirror_Ptr      defl    $
 751+ E144             >
 751+ E144 A2 65       >                dw      Dict_Ptr + 2        // xt
 751+ E146             >Heap_Ptr        defl    $ - $E000           // save current HP
 751+ E146             >
 751+ E146             >Current_HP      defl  $ - $E000             // used to set HP once!
 751+ E146             >
 751+ E146             >//              ______________________________________________________________________
 751+ E146             >//              Dictionary part
 751+ E146             >
 751+ E146             >                org     Dict_Ptr
 751+ 65A0             >
 751+ 65A0 44 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 751+ 65A2             >
 751+ 65A2             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 751+ 65A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 751+ 65A2 ~           >
 751+ 65A2 ~           >
 751+ 65A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 751+ 65A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 751+ 65A2             >
 751+ 65A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 752+ 65A2 E1                           pop     hl
 753+ 65A3 7D                           ld      a, l
 754+ 65A4              Emitc_Ptr:
 755+ 65A4 C5                           push    bc
 756+ 65A5 D5                           push    de
 757+ 65A6 DD E5                        push    ix
 758+ 65A8 D7                           rst     $10
 759+ 65A9 DD E1                        pop     ix
 760+ 65AB D1                           pop     de
 761+ 65AC C1                           pop     bc
 762+ 65AD 3E FF                        ld      a, 255            // max possible
 763+ 65AF 32 8C 5C                     ld      (SCR_CT), a
 764+ 65B2                              next
 764+ 65B2 DD E9       >                jp      (ix)
 765+ 65B4
 766+ 65B4              //  ______________________________________________________________________
 767+ 65B4              //
 768+ 65B4              // cr           --
 769+ 65B4              // send a CR via EMITC
 770+ 65B4                              New_Def CR, "CR", is_code, is_normal
 770+ 65B4             >
 770+ 65B4             >Dict_Ptr        defl    $
 770+ 65B4             >
 770+ 65B4             >//              ______________________________________________________________________
 770+ 65B4             >//              Heap part
 770+ 65B4             >
 770+ 65B4             >
 770+ 65B4             >                org     (Heap_Ptr & $1FFF) + $E000
 770+ E146             >
 770+ E146             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 770+ E146             >Latest_Definition defl  Heap_Ptr
 770+ E146             >
 770+ E146             >                // dummy db directives used to calculate length of namec
 770+ E146 43 52       >                db      "CR"
 770+ E148             >len_NFA         defl    $ - temp_NFA
 770+ E148             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 770+ E146             >
 770+ E146 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 770+ E147 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 770+ E149             >                org     $-1                 // alter last byte of Name just above to set
 770+ E148 D2          >                db      {b $} | END_BIT     // msb as name end
 770+ E149             >
 770+ E149 3C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 770+ E14B             >Prev_Ptr        defl    Heap_Ptr
 770+ E14B             >
 770+ E14B             >mirror_Ptr      defl    $
 770+ E14B             >
 770+ E14B B6 65       >                dw      Dict_Ptr + 2        // xt
 770+ E14D             >Heap_Ptr        defl    $ - $E000           // save current HP
 770+ E14D             >
 770+ E14D             >Current_HP      defl  $ - $E000             // used to set HP once!
 770+ E14D             >
 770+ E14D             >//              ______________________________________________________________________
 770+ E14D             >//              Dictionary part
 770+ E14D             >
 770+ E14D             >                org     Dict_Ptr
 770+ 65B4             >
 770+ 65B4 4B 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 770+ 65B6             >
 770+ 65B6             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 770+ 65B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 770+ 65B6 ~           >
 770+ 65B6 ~           >
 770+ 65B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 770+ 65B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 770+ 65B6             >
 770+ 65B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 771+ 65B6
 772+ 65B6 3E 0D                        ld      a, CR_CHAR
 773+ 65B8 18 EA                        jr      Emitc_Ptr
 774+ 65BA
 775+ 65BA              Emitc_Vec:
 776+ 65BA F3 65                        dw      C_Emit_Printable  // comma
 777+ 65BC FA 65                        dw      C_Emit_Bel        // bel
 778+ 65BE F3 65                        dw      C_Emit_Printable  // bs
 779+ 65C0 12 66                        dw      C_Emit_Tab        // tab
 780+ 65C2 F3 65                        dw      C_Emit_Printable  // cr
 781+ 65C4 16 66                        dw      C_Emit_NL         // lf (unix newline)
 782+ 65C6 F3 65                        dw      C_Emit_Printable  // blank
 783+ 65C8 F3 65                        dw      C_Emit_Printable  // blank
 784+ 65CA
 785+ 65CA              Emit_Selector_Start:
 786+ 65CA 06                           db      $06                 // comma
 787+ 65CB 07                           db      $07                 // bel
 788+ 65CC 08                           db      $08                 // bs
 789+ 65CD 09                           db      $09                 // tab
 790+ 65CE 0D                           db      $0D                 // cr
 791+ 65CF 0A                           db      $0A                 // lf (unix newline)
 792+ 65D0 20                           db      $20
 793+ 65D1              Emit_Selector_End:
 794+ 65D1 20                           db      $20
 795+ 65D2
 796+ 65D2              //  ______________________________________________________________________
 797+ 65D2              //
 798+ 65D2              // (?emit)      c1 -- c2 | c1
 799+ 65D2              // decode a character to be sent via EMIT
 800+ 65D2              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 801+ 65D2              // the routine should resolve anything and convert the character anyway.
 802+ 65D2                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 802+ 65D2             >
 802+ 65D2             >Dict_Ptr        defl    $
 802+ 65D2             >
 802+ 65D2             >//              ______________________________________________________________________
 802+ 65D2             >//              Heap part
 802+ 65D2             >
 802+ 65D2             >
 802+ 65D2             >                org     (Heap_Ptr & $1FFF) + $E000
 802+ E14D             >
 802+ E14D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 802+ E14D             >Latest_Definition defl  Heap_Ptr
 802+ E14D             >
 802+ E14D             >                // dummy db directives used to calculate length of namec
 802+ E14D 28 3F 45 4D >                db      "(?EMIT)"
 802+ E151 49 54 29    >
 802+ E154             >len_NFA         defl    $ - temp_NFA
 802+ E154             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 802+ E14D             >
 802+ E14D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 802+ E14E 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 802+ E152 49 54 29    >
 802+ E155             >                org     $-1                 // alter last byte of Name just above to set
 802+ E154 A9          >                db      {b $} | END_BIT     // msb as name end
 802+ E155             >
 802+ E155 46 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 802+ E157             >Prev_Ptr        defl    Heap_Ptr
 802+ E157             >
 802+ E157             >mirror_Ptr      defl    $
 802+ E157             >
 802+ E157 D4 65       >                dw      Dict_Ptr + 2        // xt
 802+ E159             >Heap_Ptr        defl    $ - $E000           // save current HP
 802+ E159             >
 802+ E159             >Current_HP      defl  $ - $E000             // used to set HP once!
 802+ E159             >
 802+ E159             >//              ______________________________________________________________________
 802+ E159             >//              Dictionary part
 802+ E159             >
 802+ E159             >                org     Dict_Ptr
 802+ 65D2             >
 802+ 65D2 57 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 802+ 65D4             >
 802+ 65D4             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 802+ 65D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 802+ 65D4 ~           >
 802+ 65D4 ~           >
 802+ 65D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 802+ 65D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 802+ 65D4             >
 802+ 65D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 803+ 65D4 D9                           exx
 804+ 65D5 D1                           pop     de
 805+ 65D6 7B                           ld      a, e                //  de has c1
 806+ 65D7 E6 7F                        and     $7F                 // 7-bit ascii only
 807+ 65D9                              // push    bc                  // save Instruction Pointer
 808+ 65D9 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 809+ 65DC 21 D1 65                     ld      hl, Emit_Selector_End
 810+ 65DF ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 811+ 65E1 20 0A                        jr      nz, C_Emit_Not_Found
 812+ 65E3                                  // Found then decode it
 813+ 65E3 21 BA 65                         ld      hl, Emitc_Vec
 814+ 65E6 09                               add     hl, bc
 815+ 65E7 09                               add     hl, bc
 816+ 65E8 5E                               ld      e, (hl)
 817+ 65E9 23                               inc     hl
 818+ 65EA 56                               ld      d, (hl)
 819+ 65EB EB                               ex      de, hl
 820+ 65EC                                  // pop     bc                  // restore Instruction Pointer
 821+ 65EC E9                               jp      (hl)                // one of the following labels
 822+ 65ED              C_Emit_Not_Found:
 823+ 65ED                              // pop     bc                  // restore Instruction Pointer
 824+ 65ED FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 825+ 65EF 30 02                        jr      nc, C_Emit_Printable
 826+ 65F1 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 827+ 65F3              C_Emit_Printable:
 828+ 65F3 6F                           ld      l, a
 829+ 65F4 26 00                        ld      h, 0
 830+ 65F6 E5                           push    hl
 831+ 65F7 D9                           exx
 832+ 65F8                              next
 832+ 65F8 DD E9       >                jp      (ix)
 833+ 65FA
 834+ 65FA              C_Emit_Bel:
 835+ 65FA D9                            exx
 836+ 65FB C5                           push    bc                  // save Instruction Pointer
 837+ 65FC D5                           push    de
 838+ 65FD 11 00 01                     ld      de, $0100
 839+ 6600 21 00 02                     ld      hl, $0200
 840+ 6603 DD E5                        push    ix                  // save Next Pointer
 841+ 6605 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 842+ 6608 DD E1                        pop     ix                  // restore Next Pointer
 843+ 660A D1                           pop     de
 844+ 660B C1                           pop     bc                  // restore Instruction Pointer
 845+ 660C 21 00 00                     ld      hl, NUL_CHAR
 846+ 660F E5                           push    hl
 847+ 6610                              next
 847+ 6610 DD E9       >                jp      (ix)
 848+ 6612
 849+ 6612 3E 06        C_Emit_Tab:     ld      a, COMMA_CHAR
 850+ 6614 18 DD                        jr      C_Emit_Printable
 851+ 6616                          //  push    hl
 852+ 6616                          //  exx
 853+ 6616                          //  next
 854+ 6616
 855+ 6616 3E 0D        C_Emit_NL       ld      a, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 856+ 6618 18 D9                        jr      C_Emit_Printable
 857+ 661A                          //  push    hl
 858+ 661A                          //  exx
 859+ 661A                          //  next
 860+ 661A
 861+ 661A              //  ______________________________________________________________________
 862+ 661A
 863+ 661A              Key_Table:
 864+ 661A E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 865+ 661B C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 866+ 661C CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 867+ 661D CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 868+ 661E CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 869+ 661F C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 870+ 6620 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 871+ 6621 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 872+ 6622 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 873+ 6623 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 874+ 6624 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 875+ 6625              Key_MapTo:
 876+ 6625 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 877+ 6626 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 878+ 6627 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 879+ 6628 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 880+ 6629 5D                           db      $5D                 //  6: SYMBOL+U : ]
 881+ 662A 5B                           db      $5B                 //  5: SYMBOL+Y : [
 882+ 662B 7D                           db      $7D                 //  4: SYMBOL+G : }
 883+ 662C 7B                           db      $7B                 //  3: SYMBOL+F : {
 884+ 662D 5C                           db      $5C                 //  2: SYMBOl+D : //
 885+ 662E 7C                           db      $7C                 //  1: SYMBOL+S : |
 886+ 662F 7E                           db      $7E                 //  0: SYMBOL+A : ~
 887+ 6630
 888+ 6630              //  ______________________________________________________________________
 889+ 6630              //
 890+ 6630              // curs         -- c
 891+ 6630              // wait for a keypress
 892+ 6630              // This definition need Standard ROM Interrupt to be served
 893+ 6630
 894+ 6630                              New_Def CUR, "CURS", is_code, is_normal
 894+ 6630             >
 894+ 6630             >Dict_Ptr        defl    $
 894+ 6630             >
 894+ 6630             >//              ______________________________________________________________________
 894+ 6630             >//              Heap part
 894+ 6630             >
 894+ 6630             >
 894+ 6630             >                org     (Heap_Ptr & $1FFF) + $E000
 894+ E159             >
 894+ E159             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 894+ E159             >Latest_Definition defl  Heap_Ptr
 894+ E159             >
 894+ E159             >                // dummy db directives used to calculate length of namec
 894+ E159 43 55 52 53 >                db      "CURS"
 894+ E15D             >len_NFA         defl    $ - temp_NFA
 894+ E15D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 894+ E159             >
 894+ E159 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 894+ E15A 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 894+ E15E             >                org     $-1                 // alter last byte of Name just above to set
 894+ E15D D3          >                db      {b $} | END_BIT     // msb as name end
 894+ E15E             >
 894+ E15E 4D 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 894+ E160             >Prev_Ptr        defl    Heap_Ptr
 894+ E160             >
 894+ E160             >mirror_Ptr      defl    $
 894+ E160             >
 894+ E160 32 66       >                dw      Dict_Ptr + 2        // xt
 894+ E162             >Heap_Ptr        defl    $ - $E000           // save current HP
 894+ E162             >
 894+ E162             >Current_HP      defl  $ - $E000             // used to set HP once!
 894+ E162             >
 894+ E162             >//              ______________________________________________________________________
 894+ E162             >//              Dictionary part
 894+ E162             >
 894+ E162             >                org     Dict_Ptr
 894+ 6630             >
 894+ 6630 60 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 894+ 6632             >
 894+ 6632             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 894+ 6632 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 894+ 6632 ~           >
 894+ 6632 ~           >
 894+ 6632             >                endif           ; ok        // for other definitions it "points" the correct handler
 894+ 6632             >                // Use of "; ok" to suppress "warning[fwdref]"
 894+ 6632             >
 894+ 6632             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 895+ 6632
 896+ 6632 C5                           push    bc                  // save Instruction Pointer
 897+ 6633 D5                           push    de                  // save Return Stack Pointer
 898+ 6634 DD E5                        push    ix
 899+ 6636 ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 900+ 663A 31 61 63                     ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 901+ 663D FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 902+ 6641
 903+ 6641              Cur_Wait:
 904+ 6641 76                               halt
 905+ 6642 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 906+ 6644 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 907+ 6647
 908+ 6647                                  // software-flash: flips face every 320 ms
 909+ 6647 3E 20                            ld      a, $20              // Timing based
 910+ 6649 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 911+ 664C
 912+ 664C 3A 8E 63                         ld      a, (Block_Face)     // see origin.asm
 913+ 664F 20 0C                            jr      nz, Cur_Cursor
 914+ 6651 3A 8F 63                             ld      a, (Half_Face)      // see origin.asm
 915+ 6654 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 916+ 6658 28 03                                jr      z, Cur_Cursor
 917+ 665A 3A 90 63                                 ld      a, (Underscore_Face) // see origin
 918+ 665D              Cur_Cursor:
 919+ 665D D7                               rst     $10
 920+ 665E 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 921+ 6660 D7                               rst     $10
 922+ 6661
 923+ 6661 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 924+ 6665 28 DA                        jr      z, Cur_Wait
 925+ 6667
 926+ 6667 76                           halt    // this is to sync flashing cursor.
 927+ 6668
 928+ 6668 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 929+ 666A D7                           rst     $10
 930+ 666B 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 931+ 666D D7                           rst     $10
 932+ 666E
 933+ 666E ED 7B 92 63                  ld      sp, (SP_Saved)
 934+ 6672
 935+ 6672 DD E1                        pop     ix
 936+ 6674 D1                           pop     de                  // Restore Return Stack Pointer
 937+ 6675 C1                           pop     bc                  // Restore Instruction Pointer
 938+ 6676                              next
 938+ 6676 DD E9       >                jp      (ix)
 939+ 6678
 940+ 6678
 941+ 6678              //  ______________________________________________________________________
 942+ 6678              //
 943+ 6678              // key          -- c
 944+ 6678              // This definition need Standard ROM Interrupt to be served
 945+ 6678
 946+ 6678                              New_Def KEY, "KEY", is_code, is_normal
 946+ 6678             >
 946+ 6678             >Dict_Ptr        defl    $
 946+ 6678             >
 946+ 6678             >//              ______________________________________________________________________
 946+ 6678             >//              Heap part
 946+ 6678             >
 946+ 6678             >
 946+ 6678             >                org     (Heap_Ptr & $1FFF) + $E000
 946+ E162             >
 946+ E162             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ E162             >Latest_Definition defl  Heap_Ptr
 946+ E162             >
 946+ E162             >                // dummy db directives used to calculate length of namec
 946+ E162 4B 45 59    >                db      "KEY"
 946+ E165             >len_NFA         defl    $ - temp_NFA
 946+ E165             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ E162             >
 946+ E162 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ E163 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 946+ E166             >                org     $-1                 // alter last byte of Name just above to set
 946+ E165 D9          >                db      {b $} | END_BIT     // msb as name end
 946+ E166             >
 946+ E166 59 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 946+ E168             >Prev_Ptr        defl    Heap_Ptr
 946+ E168             >
 946+ E168             >mirror_Ptr      defl    $
 946+ E168             >
 946+ E168 7A 66       >                dw      Dict_Ptr + 2        // xt
 946+ E16A             >Heap_Ptr        defl    $ - $E000           // save current HP
 946+ E16A             >
 946+ E16A             >Current_HP      defl  $ - $E000             // used to set HP once!
 946+ E16A             >
 946+ E16A             >//              ______________________________________________________________________
 946+ E16A             >//              Dictionary part
 946+ E16A             >
 946+ E16A             >                org     Dict_Ptr
 946+ 6678             >
 946+ 6678 68 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 946+ 667A             >
 946+ 667A             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 667A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 946+ 667A ~           >
 946+ 667A ~           >
 946+ 667A             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 667A             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 667A             >
 946+ 667A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 667A
 948+ 667A C5                           push    bc                  // Save Instruction Pointer
 949+ 667B
 950+ 667B              Key_Wait:
 951+ 667B FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 952+ 667F 28 FA                        jr      z, Key_Wait
 953+ 6681
 954+ 6681 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 955+ 6684
 956+ 6684                              // decode character from above table
 957+ 6684 21 1A 66                     ld      hl, Key_Table
 958+ 6687 01 0B 00                     ld      bc, $000B
 959+ 668A ED B1                        cpir
 960+ 668C 20 05                        jr      nz, Key_DontMap
 961+ 668E 21 25 66                         ld      hl, Key_MapTo
 962+ 6691 09                               add     hl, bc
 963+ 6692 7E                               ld      a, (hl)
 964+ 6693 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 965+ 6695 20 09                        jr      nz, Key_NoCapsLock
 966+ 6697 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 967+ 669A 7E                               ld      a, (hl)
 968+ 669B EE 08                            xor     $08
 969+ 669D 77                               ld      (hl), a
 970+ 669E 3E 00                            ld      a, NUL_CHAR
 971+ 66A0 6F           Key_NoCapsLock: ld      l, a
 972+ 66A1 26 00                        ld      h, 0                // Prepare TOS
 973+ 66A3
 974+ 66A3 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 975+ 66A7
 976+ 66A7 C1                           pop     bc                  // Restore Instruction Pointer
 977+ 66A8
 978+ 66A8                              psh1
 978+ 66A8 E5          >                push    hl
 978+ 66A9 DD E9       >                jp      (ix)
 979+ 66AB
 980+ 66AB
 981+ 66AB              //  ______________________________________________________________________
 982+ 66AB              //
 983+ 66AB              // click        --
 984+ 66AB              // This definition need Standard ROM Interrupt to be served
 985+ 66AB              //
 986+ 66AB              //              New_Def CLICK, "CLICK", is_code, is_normal
 987+ 66AB              //
 988+ 66AB              //                push    bc
 989+ 66AB              //              ld      a, ($5C48)          // BORDCR system variable
 990+ 66AB              //              rra
 991+ 66AB              //              rra
 992+ 66AB              //              rra
 993+ 66AB              //              or      $18                 // quick'n'dirty click
 994+ 66AB              //              out     ($fe), a
 995+ 66AB              //              ld      b, 0
 996+ 66AB              //              djnz    $                   // wait loop
 997+ 66AB              //              xor     $18
 998+ 66AB              //              out     ($fe), a
 999+ 66AB              //                pop     bc
1000+ 66AB
1001+ 66AB              //              next
1002+ 66AB
1003+ 66AB              //  ______________________________________________________________________
1004+ 66AB              //
1005+ 66AB              // key?         -- f
1006+ 66AB              // key available
1007+ 66AB              //
1008+ 66AB              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1009+ 66AB              //
1010+ 66AB              //              ld      hl, 0000
1011+ 66AB              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1012+ 66AB              //              jr      z, Key_Q
1013+ 66AB              //                  dec     hl
1014+ 66AB              // Key_Q:
1015+ 66AB              //                psh1
1016+ 66AB              //              next
1017+ 66AB
1018+ 66AB              //  ______________________________________________________________________
1019+ 66AB              //
1020+ 66AB              // ?terminal    -- FALSE | TRUE
1021+ 66AB              // test for BREAK keypress
1022+ 66AB                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1022+ 66AB             >
1022+ 66AB             >Dict_Ptr        defl    $
1022+ 66AB             >
1022+ 66AB             >//              ______________________________________________________________________
1022+ 66AB             >//              Heap part
1022+ 66AB             >
1022+ 66AB             >
1022+ 66AB             >                org     (Heap_Ptr & $1FFF) + $E000
1022+ E16A             >
1022+ E16A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1022+ E16A             >Latest_Definition defl  Heap_Ptr
1022+ E16A             >
1022+ E16A             >                // dummy db directives used to calculate length of namec
1022+ E16A 3F 54 45 52 >                db      "?TERMINAL"
1022+ E16E 4D 49 4E 41 >
1022+ E172 4C          >
1022+ E173             >len_NFA         defl    $ - temp_NFA
1022+ E173             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1022+ E16A             >
1022+ E16A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1022+ E16B 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1022+ E16F 4D 49 4E 41 >
1022+ E173 4C          >
1022+ E174             >                org     $-1                 // alter last byte of Name just above to set
1022+ E173 CC          >                db      {b $} | END_BIT     // msb as name end
1022+ E174             >
1022+ E174 62 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1022+ E176             >Prev_Ptr        defl    Heap_Ptr
1022+ E176             >
1022+ E176             >mirror_Ptr      defl    $
1022+ E176             >
1022+ E176 AD 66       >                dw      Dict_Ptr + 2        // xt
1022+ E178             >Heap_Ptr        defl    $ - $E000           // save current HP
1022+ E178             >
1022+ E178             >Current_HP      defl  $ - $E000             // used to set HP once!
1022+ E178             >
1022+ E178             >//              ______________________________________________________________________
1022+ E178             >//              Dictionary part
1022+ E178             >
1022+ E178             >                org     Dict_Ptr
1022+ 66AB             >
1022+ 66AB 76 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1022+ 66AD             >
1022+ 66AD             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1022+ 66AD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1022+ 66AD ~           >
1022+ 66AD ~           >
1022+ 66AD             >                endif           ; ok        // for other definitions it "points" the correct handler
1022+ 66AD             >                // Use of "; ok" to suppress "warning[fwdref]"
1022+ 66AD             >
1022+ 66AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1023+ 66AD D9                           exx
1024+ 66AE 01 FE 7F                     ld      bc, $7ffe
1025+ 66B1 ED 50                        in      d, (c)
1026+ 66B3 41                           ld      b, c
1027+ 66B4 ED 78                        in      a, (c)
1028+ 66B6 B2                           or       d
1029+ 66B7 1F                           rra
1030+ 66B8 3F                           ccf
1031+ 66B9 ED 62                        sbc     hl, hl
1032+ 66BB E5                           push    hl
1033+ 66BC D9                           exx
1034+ 66BD                              next
1034+ 66BD DD E9       >                jp      (ix)
1035+ 66BF
1036+ 66BF
1037+ 66BF              //  ______________________________________________________________________
1038+ 66BF              //
1039+ 66BF              // inkey        -- c | 0
1040+ 66BF              // call ROM inkey$ routine, returns c or "zero".
1041+ 66BF              //
1042+ 66BF              //              New_Def INKEY, "INKEY", is_code, is_normal
1043+ 66BF              //              push    bc
1044+ 66BF              //              push    de
1045+ 66BF              //              ld      (SP_Saved), sp
1046+ 66BF              //              ld      sp, Cold_origin - 5
1047+ 66BF              //              push    ix
1048+ 66BF              //              call    $15E6                   // instead of 15E9
1049+ 66BF              //              pop     ix
1050+ 66BF              //              ld      sp, (SP_Saved)
1051+ 66BF              //              ld      l, a
1052+ 66BF              //              ld      h, 0
1053+ 66BF              //              pop     de
1054+ 66BF              //              pop     bc
1055+ 66BF              //              psh1
1056+ 66BF
1057+ 66BF              //  ______________________________________________________________________
1058+ 66BF              //
1059+ 66BF              // select      n --
1060+ 66BF              // selects the given channel number
1061+ 66BF
1062+ 66BF                              New_Def SELECT, "SELECT", is_code, is_normal
1062+ 66BF             >
1062+ 66BF             >Dict_Ptr        defl    $
1062+ 66BF             >
1062+ 66BF             >//              ______________________________________________________________________
1062+ 66BF             >//              Heap part
1062+ 66BF             >
1062+ 66BF             >
1062+ 66BF             >                org     (Heap_Ptr & $1FFF) + $E000
1062+ E178             >
1062+ E178             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1062+ E178             >Latest_Definition defl  Heap_Ptr
1062+ E178             >
1062+ E178             >                // dummy db directives used to calculate length of namec
1062+ E178 53 45 4C 45 >                db      "SELECT"
1062+ E17C 43 54       >
1062+ E17E             >len_NFA         defl    $ - temp_NFA
1062+ E17E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1062+ E178             >
1062+ E178 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1062+ E179 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1062+ E17D 43 54       >
1062+ E17F             >                org     $-1                 // alter last byte of Name just above to set
1062+ E17E D4          >                db      {b $} | END_BIT     // msb as name end
1062+ E17F             >
1062+ E17F 6A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1062+ E181             >Prev_Ptr        defl    Heap_Ptr
1062+ E181             >
1062+ E181             >mirror_Ptr      defl    $
1062+ E181             >
1062+ E181 C1 66       >                dw      Dict_Ptr + 2        // xt
1062+ E183             >Heap_Ptr        defl    $ - $E000           // save current HP
1062+ E183             >
1062+ E183             >Current_HP      defl  $ - $E000             // used to set HP once!
1062+ E183             >
1062+ E183             >//              ______________________________________________________________________
1062+ E183             >//              Dictionary part
1062+ E183             >
1062+ E183             >                org     Dict_Ptr
1062+ 66BF             >
1062+ 66BF 81 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1062+ 66C1             >
1062+ 66C1             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1062+ 66C1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1062+ 66C1 ~           >
1062+ 66C1 ~           >
1062+ 66C1             >                endif           ; ok        // for other definitions it "points" the correct handler
1062+ 66C1             >                // Use of "; ok" to suppress "warning[fwdref]"
1062+ 66C1             >
1062+ 66C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1063+ 66C1 E1                           pop     hl
1064+ 66C2 C5                           push    bc
1065+ 66C3 D5                           push    de
1066+ 66C4 7D                           ld      a, l
1067+ 66C5 ED 73 92 63                  ld      (SP_Saved), sp
1068+ 66C9 31 61 63                     ld      sp, Cold_origin - 5
1069+ 66CC DD E5                        push    ix
1070+ 66CE CD 01 16                     call    $1601
1071+ 66D1 DD E1                        pop     ix
1072+ 66D3 ED 7B 92 63                  ld      sp, (SP_Saved)
1073+ 66D7 D1                           pop     de
1074+ 66D8 C1                           pop     bc
1075+ 66D9                              next
1075+ 66D9 DD E9       >                jp      (ix)
1076+ 66DB
1077+ 66DB              //  ______________________________________________________________________
1078+ 66DB              //
1079+ 66DB              // ZX Spectrum Next - Low Level disk primitives.
1080+ 66DB              // this include is "here" for backward compatibility
1081+ 66DB
1082+ 66DB                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
   1++66DB              //  ______________________________________________________________________
   2++66DB              //
   3++66DB              //  next-opt.asm
   4++66DB              //
   5++66DB              //  ZX Spectrum Next - peculiar definitions
   6++66DB              //  ______________________________________________________________________
   7++66DB
   8++66DB              //  ______________________________________________________________________
   9++66DB              //
  10++66DB              // f_seek       d u -- f
  11++66DB              // Seek to position d in file-handle u.
  12++66DB              // Return a false-flag 0 on success, True flag on error
  13++66DB                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++66DB             >
  13++66DB             >Dict_Ptr        defl    $
  13++66DB             >
  13++66DB             >//              ______________________________________________________________________
  13++66DB             >//              Heap part
  13++66DB             >
  13++66DB             >
  13++66DB             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E183             >
  13++E183             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E183             >Latest_Definition defl  Heap_Ptr
  13++E183             >
  13++E183             >                // dummy db directives used to calculate length of namec
  13++E183 46 5F 53 45 >                db      "F_SEEK"
  13++E187 45 4B       >
  13++E189             >len_NFA         defl    $ - temp_NFA
  13++E189             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E183             >
  13++E183 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E184 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E188 45 4B       >
  13++E18A             >                org     $-1                 // alter last byte of Name just above to set
  13++E189 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E18A             >
  13++E18A 78 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E18C             >Prev_Ptr        defl    Heap_Ptr
  13++E18C             >
  13++E18C             >mirror_Ptr      defl    $
  13++E18C             >
  13++E18C DD 66       >                dw      Dict_Ptr + 2        // xt
  13++E18E             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E18E             >
  13++E18E             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E18E             >
  13++E18E             >//              ______________________________________________________________________
  13++E18E             >//              Dictionary part
  13++E18E             >
  13++E18E             >                org     Dict_Ptr
  13++66DB             >
  13++66DB 8C 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++66DD             >
  13++66DD             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++66DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++66DD ~           >
  13++66DD ~           >
  13++66DD             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++66DD             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++66DD             >
  13++66DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++66DD D9                            exx
  15++66DE E1                            pop     hl                  // file-handle
  16++66DF 7D                            ld      a, l
  17++66E0 C1                            pop     bc                  // bc has high-word of d
  18++66E1 D1                            pop     de
  19++66E2 D9                           exx
  20++66E3 DD E5                        push    ix
  21++66E5 D5                           push    de
  22++66E6 C5                           push    bc                  // save Instruction Pointer
  23++66E7 D9                            exx
  24++66E8 DD 21 00 00                   ld      ix, 0
  25++66EC F3                            di
  26++66ED CF                            rst     $08
  27++66EE 9F                            db      $9F
  28++66EF              F_Seek_Exit:
  29++66EF FB                           ei
  30++66F0 C1                           pop     bc                  // restore Instruction Pointer
  31++66F1 D1                           pop     de
  32++66F2 DD E1                        pop     ix
  33++66F4 ED 62                        sbc     hl, hl              // to get 0 or -1
  34++66F6                              psh1
  34++66F6 E5          >                push    hl
  34++66F7 DD E9       >                jp      (ix)
  35++66F9
  36++66F9              //  ______________________________________________________________________
  37++66F9              //
  38++66F9              // f_close      u -- f
  39++66F9              // Close file-handle u.
  40++66F9              // Return 0 on success, True flag on error
  41++66F9
  42++66F9                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  42++66F9             >
  42++66F9             >Dict_Ptr        defl    $
  42++66F9             >
  42++66F9             >//              ______________________________________________________________________
  42++66F9             >//              Heap part
  42++66F9             >
  42++66F9             >
  42++66F9             >                org     (Heap_Ptr & $1FFF) + $E000
  42++E18E             >
  42++E18E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42++E18E             >Latest_Definition defl  Heap_Ptr
  42++E18E             >
  42++E18E             >                // dummy db directives used to calculate length of namec
  42++E18E 46 5F 43 4C >                db      "F_CLOSE"
  42++E192 4F 53 45    >
  42++E195             >len_NFA         defl    $ - temp_NFA
  42++E195             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42++E18E             >
  42++E18E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42++E18F 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  42++E193 4F 53 45    >
  42++E196             >                org     $-1                 // alter last byte of Name just above to set
  42++E195 C5          >                db      {b $} | END_BIT     // msb as name end
  42++E196             >
  42++E196 83 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42++E198             >Prev_Ptr        defl    Heap_Ptr
  42++E198             >
  42++E198             >mirror_Ptr      defl    $
  42++E198             >
  42++E198 FB 66       >                dw      Dict_Ptr + 2        // xt
  42++E19A             >Heap_Ptr        defl    $ - $E000           // save current HP
  42++E19A             >
  42++E19A             >Current_HP      defl  $ - $E000             // used to set HP once!
  42++E19A             >
  42++E19A             >//              ______________________________________________________________________
  42++E19A             >//              Dictionary part
  42++E19A             >
  42++E19A             >                org     Dict_Ptr
  42++66F9             >
  42++66F9 98 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  42++66FB             >
  42++66FB             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42++66FB ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42++66FB ~           >
  42++66FB ~           >
  42++66FB             >                endif           ; ok        // for other definitions it "points" the correct handler
  42++66FB             >                // Use of "; ok" to suppress "warning[fwdref]"
  42++66FB             >
  42++66FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43++66FB
  44++66FB E1                           pop     hl
  45++66FC 7D                           ld      a, l                // file-handle
  46++66FD DD E5                        push    ix
  47++66FF D5                           push    de
  48++6700 C5                           push    bc                  // Save Instruction pointer
  49++6701 F3                           di
  50++6702 CF                           rst     $08
  51++6703 9B                           db      $9B
  52++6704 18 E9                        jr      F_Seek_Exit
  53++6706              //              ei
  54++6706              //              pop     de
  55++6706              //              pop     bc
  56++6706              //              pop     ix
  57++6706              //              sbc     hl, hl
  58++6706              //              psh1
  59++6706
  60++6706              //  ______________________________________________________________________
  61++6706              //
  62++6706              // f_sync      u -- f
  63++6706              // Close file-handle u.
  64++6706              // Return 0 on success, True flag on error
  65++6706
  66++6706                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  66++6706             >
  66++6706             >Dict_Ptr        defl    $
  66++6706             >
  66++6706             >//              ______________________________________________________________________
  66++6706             >//              Heap part
  66++6706             >
  66++6706             >
  66++6706             >                org     (Heap_Ptr & $1FFF) + $E000
  66++E19A             >
  66++E19A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  66++E19A             >Latest_Definition defl  Heap_Ptr
  66++E19A             >
  66++E19A             >                // dummy db directives used to calculate length of namec
  66++E19A 46 5F 53 59 >                db      "F_SYNC"
  66++E19E 4E 43       >
  66++E1A0             >len_NFA         defl    $ - temp_NFA
  66++E1A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  66++E19A             >
  66++E19A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  66++E19B 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  66++E19F 4E 43       >
  66++E1A1             >                org     $-1                 // alter last byte of Name just above to set
  66++E1A0 C3          >                db      {b $} | END_BIT     // msb as name end
  66++E1A1             >
  66++E1A1 8E 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  66++E1A3             >Prev_Ptr        defl    Heap_Ptr
  66++E1A3             >
  66++E1A3             >mirror_Ptr      defl    $
  66++E1A3             >
  66++E1A3 08 67       >                dw      Dict_Ptr + 2        // xt
  66++E1A5             >Heap_Ptr        defl    $ - $E000           // save current HP
  66++E1A5             >
  66++E1A5             >Current_HP      defl  $ - $E000             // used to set HP once!
  66++E1A5             >
  66++E1A5             >//              ______________________________________________________________________
  66++E1A5             >//              Dictionary part
  66++E1A5             >
  66++E1A5             >                org     Dict_Ptr
  66++6706             >
  66++6706 A3 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  66++6708             >
  66++6708             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  66++6708 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  66++6708 ~           >
  66++6708 ~           >
  66++6708             >                endif           ; ok        // for other definitions it "points" the correct handler
  66++6708             >                // Use of "; ok" to suppress "warning[fwdref]"
  66++6708             >
  66++6708             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  67++6708 E1                           pop     hl
  68++6709 7D                           ld      a, l                // file-handle
  69++670A DD E5                        push    ix
  70++670C D5                           push    de
  71++670D C5                           push    bc
  72++670E F3                           di
  73++670F CF                           rst     $08
  74++6710 9C                           db      $9C
  75++6711 18 DC                        jr      F_Seek_Exit
  76++6713              //              ei
  77++6713              //              pop     de
  78++6713              //              pop     bc
  79++6713              //              pop     ix
  80++6713              //              sbc     hl, hl
  81++6713              //              psh1
  82++6713
  83++6713              //  ______________________________________________________________________
  84++6713              //
  85++6713              // f_fgetpos    u -- d f
  86++6713              // Seek to position d in file-handle u.
  87++6713              // Return a false-flag 0 on success, True flag on error
  88++6713                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  88++6713             >
  88++6713             >Dict_Ptr        defl    $
  88++6713             >
  88++6713             >//              ______________________________________________________________________
  88++6713             >//              Heap part
  88++6713             >
  88++6713             >
  88++6713             >                org     (Heap_Ptr & $1FFF) + $E000
  88++E1A5             >
  88++E1A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  88++E1A5             >Latest_Definition defl  Heap_Ptr
  88++E1A5             >
  88++E1A5             >                // dummy db directives used to calculate length of namec
  88++E1A5 46 5F 46 47 >                db      "F_FGETPOS"
  88++E1A9 45 54 50 4F >
  88++E1AD 53          >
  88++E1AE             >len_NFA         defl    $ - temp_NFA
  88++E1AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  88++E1A5             >
  88++E1A5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  88++E1A6 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  88++E1AA 45 54 50 4F >
  88++E1AE 53          >
  88++E1AF             >                org     $-1                 // alter last byte of Name just above to set
  88++E1AE D3          >                db      {b $} | END_BIT     // msb as name end
  88++E1AF             >
  88++E1AF 9A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  88++E1B1             >Prev_Ptr        defl    Heap_Ptr
  88++E1B1             >
  88++E1B1             >mirror_Ptr      defl    $
  88++E1B1             >
  88++E1B1 15 67       >                dw      Dict_Ptr + 2        // xt
  88++E1B3             >Heap_Ptr        defl    $ - $E000           // save current HP
  88++E1B3             >
  88++E1B3             >Current_HP      defl  $ - $E000             // used to set HP once!
  88++E1B3             >
  88++E1B3             >//              ______________________________________________________________________
  88++E1B3             >//              Dictionary part
  88++E1B3             >
  88++E1B3             >                org     Dict_Ptr
  88++6713             >
  88++6713 B1 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  88++6715             >
  88++6715             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  88++6715 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  88++6715 ~           >
  88++6715 ~           >
  88++6715             >                endif           ; ok        // for other definitions it "points" the correct handler
  88++6715             >                // Use of "; ok" to suppress "warning[fwdref]"
  88++6715             >
  88++6715             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  89++6715 E1                            pop     hl
  90++6716 7D                            ld      a, l                // file-handle
  91++6717 DD E5                         push    ix
  92++6719 D5                            push    de
  93++671A C5                            push    bc
  94++671B F3                            di
  95++671C CF                            rst     $08
  96++671D A0                            db      $A0
  97++671E FB                            ei
  98++671F D9                           exx
  99++6720 C1                           pop     bc                  // IP
 100++6721 D1                           pop     de                  // Return Stack Pointer
 101++6722 DD E1                        pop     ix
 102++6724 D9                            exx
 103++6725 D5                            push    de
 104++6726 C5                            push    bc
 105++6727 ED 62                         sbc     hl, hl
 106++6729 E5                            push    hl
 107++672A D9                           exx
 108++672B                              next
 108++672B DD E9       >                jp      (ix)
 109++672D
 110++672D              //  ______________________________________________________________________
 111++672D              //
 112++672D              // f_read       a n u -- n f
 113++672D              // Read b bytes from file-handle u to address a
 114++672D              // Return the actual number n of bytes read
 115++672D              // Return 0 on success, True flag on error
 116++672D                              New_Def F_READ, "F_READ", is_code, is_normal
 116++672D             >
 116++672D             >Dict_Ptr        defl    $
 116++672D             >
 116++672D             >//              ______________________________________________________________________
 116++672D             >//              Heap part
 116++672D             >
 116++672D             >
 116++672D             >                org     (Heap_Ptr & $1FFF) + $E000
 116++E1B3             >
 116++E1B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116++E1B3             >Latest_Definition defl  Heap_Ptr
 116++E1B3             >
 116++E1B3             >                // dummy db directives used to calculate length of namec
 116++E1B3 46 5F 52 45 >                db      "F_READ"
 116++E1B7 41 44       >
 116++E1B9             >len_NFA         defl    $ - temp_NFA
 116++E1B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116++E1B3             >
 116++E1B3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116++E1B4 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 116++E1B8 41 44       >
 116++E1BA             >                org     $-1                 // alter last byte of Name just above to set
 116++E1B9 C4          >                db      {b $} | END_BIT     // msb as name end
 116++E1BA             >
 116++E1BA A5 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116++E1BC             >Prev_Ptr        defl    Heap_Ptr
 116++E1BC             >
 116++E1BC             >mirror_Ptr      defl    $
 116++E1BC             >
 116++E1BC 2F 67       >                dw      Dict_Ptr + 2        // xt
 116++E1BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 116++E1BE             >
 116++E1BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 116++E1BE             >
 116++E1BE             >//              ______________________________________________________________________
 116++E1BE             >//              Dictionary part
 116++E1BE             >
 116++E1BE             >                org     Dict_Ptr
 116++672D             >
 116++672D BC 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 116++672F             >
 116++672F             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 116++672F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 116++672F ~           >
 116++672F ~           >
 116++672F             >                endif           ; ok        // for other definitions it "points" the correct handler
 116++672F             >                // Use of "; ok" to suppress "warning[fwdref]"
 116++672F             >
 116++672F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117++672F D9                            exx
 118++6730 E1                            pop     hl
 119++6731 7D                            ld      a, l                // file-handle
 120++6732 C1                            pop     bc                  // bc has bytes to read
 121++6733 DD E3                         ex      (sp), ix            // ix has address
 122++6735 D9                           exx
 123++6736 D5                           push    de                  // Save Return Stack pointer
 124++6737 C5                           push    bc                  // Save Instruction pointer
 125++6738 D9                            exx
 126++6739 F3                            di
 127++673A CF                            rst     $08
 128++673B 9D                            db      $9D
 129++673C              F_Read_Exit:
 130++673C FB                           ei
 131++673D D9                           exx
 132++673E C1                           pop     bc                  // Restore Instruction pointer
 133++673F D1                           pop     de                  // Restore Return Stack pointer
 134++6740 DD E1                        pop     ix                  // Restore ix
 135++6742 D9                            exx
 136++6743 D5                            push    de                  // bytes involved in i/o operation
 137++6744 ED 62                         sbc     hl, hl
 138++6746 E5                            push    hl
 139++6747 D9                           exx
 140++6748                              next
 140++6748 DD E9       >                jp      (ix)
 141++674A
 142++674A              //  ______________________________________________________________________
 143++674A              //
 144++674A              // f_write      a n u -- n f
 145++674A              // Write bytes currently stored at address a to file-handle u.
 146++674A              // Return the actual n bytes written and 0 on success, True flag on error.
 147++674A                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 147++674A             >
 147++674A             >Dict_Ptr        defl    $
 147++674A             >
 147++674A             >//              ______________________________________________________________________
 147++674A             >//              Heap part
 147++674A             >
 147++674A             >
 147++674A             >                org     (Heap_Ptr & $1FFF) + $E000
 147++E1BE             >
 147++E1BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147++E1BE             >Latest_Definition defl  Heap_Ptr
 147++E1BE             >
 147++E1BE             >                // dummy db directives used to calculate length of namec
 147++E1BE 46 5F 57 52 >                db      "F_WRITE"
 147++E1C2 49 54 45    >
 147++E1C5             >len_NFA         defl    $ - temp_NFA
 147++E1C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147++E1BE             >
 147++E1BE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147++E1BF 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 147++E1C3 49 54 45    >
 147++E1C6             >                org     $-1                 // alter last byte of Name just above to set
 147++E1C5 C5          >                db      {b $} | END_BIT     // msb as name end
 147++E1C6             >
 147++E1C6 B3 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147++E1C8             >Prev_Ptr        defl    Heap_Ptr
 147++E1C8             >
 147++E1C8             >mirror_Ptr      defl    $
 147++E1C8             >
 147++E1C8 4C 67       >                dw      Dict_Ptr + 2        // xt
 147++E1CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 147++E1CA             >
 147++E1CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 147++E1CA             >
 147++E1CA             >//              ______________________________________________________________________
 147++E1CA             >//              Dictionary part
 147++E1CA             >
 147++E1CA             >                org     Dict_Ptr
 147++674A             >
 147++674A C8 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 147++674C             >
 147++674C             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 147++674C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 147++674C ~           >
 147++674C ~           >
 147++674C             >                endif           ; ok        // for other definitions it "points" the correct handler
 147++674C             >                // Use of "; ok" to suppress "warning[fwdref]"
 147++674C             >
 147++674C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148++674C D9                            exx
 149++674D E1                            pop     hl
 150++674E 7D                            ld      a, l                // file-handle
 151++674F C1                            pop     bc                  // bc has bytes to read
 152++6750 DD E3                         ex      (sp), ix            // ix has address
 153++6752 D9                           exx
 154++6753 D5                           push    de                  // Save Return Stack pointer
 155++6754 C5                           push    bc                  // Save Instruction pointer
 156++6755 D9                            exx
 157++6756 F3                            di
 158++6757 CF                            rst     $08
 159++6758 9E                            db      $9E
 160++6759 18 E1                         jr F_Read_Exit
 161++675B              //                ei
 162++675B              //                exx
 163++675B              //                pop     de                  // Restore Return Stack pointer
 164++675B              //                pop     bc                  // Restore Instruction pointer
 165++675B              //                pop     ix                  // Restore ix
 166++675B              //                 exx
 167++675B              //                 push    de                  // bytes involved in i/o operation
 168++675B              //                 sbc     hl, hl
 169++675B              //                 push    hl
 170++675B              //                exx
 171++675B              //                next
 172++675B
 173++675B              //  ______________________________________________________________________
 174++675B              //
 175++675B              // f_open       a1 a2 b -- u f
 176++675B              // open a file
 177++675B              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 178++675B              // a2 is address to an 8-byte header data used in some cases.
 179++675B              // b is access mode-byte, that is a combination of:
 180++675B              // any/all of:
 181++675B              //   esx_mode_read          $01 request read access
 182++675B              //   esx_mode_write         $02 request write access
 183++675B              //   esx_mode_use_header    $40 read/write +3DOS header
 184++675B              // plus one of:
 185++675B              //   esx_mode_open_exist    $00 only open existing file
 186++675B              //   esx_mode_open_creat    $08 open existing or create file
 187++675B              //   esx_mode_creat_noexist $04 create new file, error if exists
 188++675B              //   esx_mode_creat_trunc   $0c create new file, delete existing
 189++675B              // Return file-handle u and 0 on success, True flag on error
 190++675B                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 190++675B             >
 190++675B             >Dict_Ptr        defl    $
 190++675B             >
 190++675B             >//              ______________________________________________________________________
 190++675B             >//              Heap part
 190++675B             >
 190++675B             >
 190++675B             >                org     (Heap_Ptr & $1FFF) + $E000
 190++E1CA             >
 190++E1CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++E1CA             >Latest_Definition defl  Heap_Ptr
 190++E1CA             >
 190++E1CA             >                // dummy db directives used to calculate length of namec
 190++E1CA 46 5F 4F 50 >                db      "F_OPEN"
 190++E1CE 45 4E       >
 190++E1D0             >len_NFA         defl    $ - temp_NFA
 190++E1D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++E1CA             >
 190++E1CA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++E1CB 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 190++E1CF 45 4E       >
 190++E1D1             >                org     $-1                 // alter last byte of Name just above to set
 190++E1D0 CE          >                db      {b $} | END_BIT     // msb as name end
 190++E1D1             >
 190++E1D1 BE 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 190++E1D3             >Prev_Ptr        defl    Heap_Ptr
 190++E1D3             >
 190++E1D3             >mirror_Ptr      defl    $
 190++E1D3             >
 190++E1D3 5D 67       >                dw      Dict_Ptr + 2        // xt
 190++E1D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 190++E1D5             >
 190++E1D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 190++E1D5             >
 190++E1D5             >//              ______________________________________________________________________
 190++E1D5             >//              Dictionary part
 190++E1D5             >
 190++E1D5             >                org     Dict_Ptr
 190++675B             >
 190++675B D3 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 190++675D             >
 190++675D             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++675D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190++675D ~           >
 190++675D ~           >
 190++675D             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++675D             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++675D             >
 190++675D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++675D D9                            exx
 192++675E C1                            pop     bc                  // file-mode
 193++675F 41                            ld      b, c                // file-mode
 194++6760 D1                            pop     de                  // 8-bytes buffer if any
 195++6761 DD E3                         ex      (sp), ix            // filespec nul-terminated
 196++6763 D9                           exx
 197++6764 D5                           push    de                  // Save Return Stack pointer
 198++6765 C5                           push    bc                  // Save Instruction pointer
 199++6766 D9                            exx
 200++6767 3E 2A                         ld      a, "*"
 201++6769 F3                            di
 202++676A CF                            rst     $08
 203++676B 9A                            db      $9A
 204++676C              F_Open_Exit:
 205++676C FB                            ei
 206++676D 5F                            ld      e, a                // return the handle-number
 207++676E 16 00                         ld      d, 0
 208++6770 18 CA                        jr F_Read_Exit
 209++6772
 210++6772              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 211++6772              //   \ FILENAME 1+ PAD 1 F_OPEN
 212++6772              //   \ DROP
 213++6772              //   \ F_CLOSE
 214++6772
 215++6772
 216++6772              //  ______________________________________________________________________
 217++6772              //
 218++6772              // f_opendir    a1 -- u f
 219++6772              // open a file
 220++6772                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 220++6772             >
 220++6772             >Dict_Ptr        defl    $
 220++6772             >
 220++6772             >//              ______________________________________________________________________
 220++6772             >//              Heap part
 220++6772             >
 220++6772             >
 220++6772             >                org     (Heap_Ptr & $1FFF) + $E000
 220++E1D5             >
 220++E1D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220++E1D5             >Latest_Definition defl  Heap_Ptr
 220++E1D5             >
 220++E1D5             >                // dummy db directives used to calculate length of namec
 220++E1D5 46 5F 4F 50 >                db      "F_OPENDIR"
 220++E1D9 45 4E 44 49 >
 220++E1DD 52          >
 220++E1DE             >len_NFA         defl    $ - temp_NFA
 220++E1DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220++E1D5             >
 220++E1D5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220++E1D6 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 220++E1DA 45 4E 44 49 >
 220++E1DE 52          >
 220++E1DF             >                org     $-1                 // alter last byte of Name just above to set
 220++E1DE D2          >                db      {b $} | END_BIT     // msb as name end
 220++E1DF             >
 220++E1DF CA 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 220++E1E1             >Prev_Ptr        defl    Heap_Ptr
 220++E1E1             >
 220++E1E1             >mirror_Ptr      defl    $
 220++E1E1             >
 220++E1E1 74 67       >                dw      Dict_Ptr + 2        // xt
 220++E1E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 220++E1E3             >
 220++E1E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 220++E1E3             >
 220++E1E3             >//              ______________________________________________________________________
 220++E1E3             >//              Dictionary part
 220++E1E3             >
 220++E1E3             >                org     Dict_Ptr
 220++6772             >
 220++6772 E1 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 220++6774             >
 220++6774             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220++6774 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220++6774 ~           >
 220++6774 ~           >
 220++6774             >                endif           ; ok        // for other definitions it "points" the correct handler
 220++6774             >                // Use of "; ok" to suppress "warning[fwdref]"
 220++6774             >
 220++6774             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221++6774 DD E3                        ex      (sp), ix            // filespec nul-terminated
 222++6776 D5                           push    de                  // Save Return Stack pointer
 223++6777 C5                           push    bc                  // Save Instruction pointer
 224++6778 06 10                        ld      b, $10              // file-mode
 225++677A 3E 43                        ld      a, "C"
 226++677C F3                           di
 227++677D CF                           rst     $08
 228++677E A3                           db      $A3
 229++677F 18 EB                        jr      F_Open_Exit
 230++6781
 231++6781
 232++6781              //  ______________________________________________________________________
 233++6781              //
 234++6781              // f_readdir    a1 a2 b -- u f
 235++6781              // open a file
 236++6781                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 236++6781             >
 236++6781             >Dict_Ptr        defl    $
 236++6781             >
 236++6781             >//              ______________________________________________________________________
 236++6781             >//              Heap part
 236++6781             >
 236++6781             >
 236++6781             >                org     (Heap_Ptr & $1FFF) + $E000
 236++E1E3             >
 236++E1E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236++E1E3             >Latest_Definition defl  Heap_Ptr
 236++E1E3             >
 236++E1E3             >                // dummy db directives used to calculate length of namec
 236++E1E3 46 5F 52 45 >                db      "F_READDIR"
 236++E1E7 41 44 44 49 >
 236++E1EB 52          >
 236++E1EC             >len_NFA         defl    $ - temp_NFA
 236++E1EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236++E1E3             >
 236++E1E3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236++E1E4 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 236++E1E8 41 44 44 49 >
 236++E1EC 52          >
 236++E1ED             >                org     $-1                 // alter last byte of Name just above to set
 236++E1EC D2          >                db      {b $} | END_BIT     // msb as name end
 236++E1ED             >
 236++E1ED D5 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 236++E1EF             >Prev_Ptr        defl    Heap_Ptr
 236++E1EF             >
 236++E1EF             >mirror_Ptr      defl    $
 236++E1EF             >
 236++E1EF 83 67       >                dw      Dict_Ptr + 2        // xt
 236++E1F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 236++E1F1             >
 236++E1F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 236++E1F1             >
 236++E1F1             >//              ______________________________________________________________________
 236++E1F1             >//              Dictionary part
 236++E1F1             >
 236++E1F1             >                org     Dict_Ptr
 236++6781             >
 236++6781 EF 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 236++6783             >
 236++6783             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236++6783 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 236++6783 ~           >
 236++6783 ~           >
 236++6783             >                endif           ; ok        // for other definitions it "points" the correct handler
 236++6783             >                // Use of "; ok" to suppress "warning[fwdref]"
 236++6783             >
 236++6783             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237++6783 D9                            exx
 238++6784 E1                            pop     hl
 239++6785 7D                            ld      a, l
 240++6786 D1                            pop     de
 241++6787 DD E3                         ex      (sp), ix            // filespec nul-terminated
 242++6789 D9                           exx
 243++678A D5                           push    de                  // Save Return Stack pointer
 244++678B C5                           push    bc                  // Save Instruction pointer
 245++678C D9                            exx
 246++678D F3                            di
 247++678E CF                            rst     $08
 248++678F A4                            db      $A4
 249++6790 18 DA                         jr      F_Open_Exit
 250++6792
 251++6792
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
1083+ 6792
1084+ 6792
1085+ 6792              //  ______________________________________________________________________
1086+ 6792              //
1087+ 6792              // cmove    a1 a2 u --
1088+ 6792              // If u > 0, moves memory content starting at address a1 for n bytes long
1089+ 6792              // storing then starting at address addr2.
1090+ 6792              // The content of a1 is moved first. See CMOVE> also.
1091+ 6792                              New_Def CMOVE, "CMOVE", is_code, is_normal
1091+ 6792             >
1091+ 6792             >Dict_Ptr        defl    $
1091+ 6792             >
1091+ 6792             >//              ______________________________________________________________________
1091+ 6792             >//              Heap part
1091+ 6792             >
1091+ 6792             >
1091+ 6792             >                org     (Heap_Ptr & $1FFF) + $E000
1091+ E1F1             >
1091+ E1F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1091+ E1F1             >Latest_Definition defl  Heap_Ptr
1091+ E1F1             >
1091+ E1F1             >                // dummy db directives used to calculate length of namec
1091+ E1F1 43 4D 4F 56 >                db      "CMOVE"
1091+ E1F5 45          >
1091+ E1F6             >len_NFA         defl    $ - temp_NFA
1091+ E1F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1091+ E1F1             >
1091+ E1F1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1091+ E1F2 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1091+ E1F6 45          >
1091+ E1F7             >                org     $-1                 // alter last byte of Name just above to set
1091+ E1F6 C5          >                db      {b $} | END_BIT     // msb as name end
1091+ E1F7             >
1091+ E1F7 E3 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1091+ E1F9             >Prev_Ptr        defl    Heap_Ptr
1091+ E1F9             >
1091+ E1F9             >mirror_Ptr      defl    $
1091+ E1F9             >
1091+ E1F9 94 67       >                dw      Dict_Ptr + 2        // xt
1091+ E1FB             >Heap_Ptr        defl    $ - $E000           // save current HP
1091+ E1FB             >
1091+ E1FB             >Current_HP      defl  $ - $E000             // used to set HP once!
1091+ E1FB             >
1091+ E1FB             >//              ______________________________________________________________________
1091+ E1FB             >//              Dictionary part
1091+ E1FB             >
1091+ E1FB             >                org     Dict_Ptr
1091+ 6792             >
1091+ 6792 F9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1091+ 6794             >
1091+ 6794             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1091+ 6794 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1091+ 6794 ~           >
1091+ 6794 ~           >
1091+ 6794             >                endif           ; ok        // for other definitions it "points" the correct handler
1091+ 6794             >                // Use of "; ok" to suppress "warning[fwdref]"
1091+ 6794             >
1091+ 6794             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1092+ 6794 D9                           exx
1093+ 6795
1094+ 6795 C1                           pop     bc                  // bc has counter
1095+ 6796 D1                           pop     de                  // de now has dest
1096+ 6797 E1                           pop     hl                 // hl has source, save Instruction Pointer
1097+ 6798 78                           ld      a, b
1098+ 6799 B1                           or      c
1099+ 679A 28 02                        jr      z, Cmove_NoMove
1100+ 679C ED B0                            ldir
1101+ 679E              Cmove_NoMove:
1102+ 679E D9                           exx
1103+ 679F
1104+ 679F                              next
1104+ 679F DD E9       >                jp      (ix)
1105+ 67A1
1106+ 67A1              //  ______________________________________________________________________
1107+ 67A1              //
1108+ 67A1              // cmove>    a1 a2 u --
1109+ 67A1              // If u > 0, moves memory content starting at address a1 for n bytes long
1110+ 67A1              // storing then starting at address addr2.
1111+ 67A1              // The content of a1 is moved last. See cmove.
1112+ 67A1                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1112+ 67A1             >
1112+ 67A1             >Dict_Ptr        defl    $
1112+ 67A1             >
1112+ 67A1             >//              ______________________________________________________________________
1112+ 67A1             >//              Heap part
1112+ 67A1             >
1112+ 67A1             >
1112+ 67A1             >                org     (Heap_Ptr & $1FFF) + $E000
1112+ E1FB             >
1112+ E1FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1112+ E1FB             >Latest_Definition defl  Heap_Ptr
1112+ E1FB             >
1112+ E1FB             >                // dummy db directives used to calculate length of namec
1112+ E1FB 43 4D 4F 56 >                db      "CMOVE>"
1112+ E1FF 45 3E       >
1112+ E201             >len_NFA         defl    $ - temp_NFA
1112+ E201             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1112+ E1FB             >
1112+ E1FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1112+ E1FC 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1112+ E200 45 3E       >
1112+ E202             >                org     $-1                 // alter last byte of Name just above to set
1112+ E201 BE          >                db      {b $} | END_BIT     // msb as name end
1112+ E202             >
1112+ E202 F1 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1112+ E204             >Prev_Ptr        defl    Heap_Ptr
1112+ E204             >
1112+ E204             >mirror_Ptr      defl    $
1112+ E204             >
1112+ E204 A3 67       >                dw      Dict_Ptr + 2        // xt
1112+ E206             >Heap_Ptr        defl    $ - $E000           // save current HP
1112+ E206             >
1112+ E206             >Current_HP      defl  $ - $E000             // used to set HP once!
1112+ E206             >
1112+ E206             >//              ______________________________________________________________________
1112+ E206             >//              Dictionary part
1112+ E206             >
1112+ E206             >                org     Dict_Ptr
1112+ 67A1             >
1112+ 67A1 04 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1112+ 67A3             >
1112+ 67A3             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1112+ 67A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1112+ 67A3 ~           >
1112+ 67A3 ~           >
1112+ 67A3             >                endif           ; ok        // for other definitions it "points" the correct handler
1112+ 67A3             >                // Use of "; ok" to suppress "warning[fwdref]"
1112+ 67A3             >
1112+ 67A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1113+ 67A3 D9                           exx
1114+ 67A4
1115+ 67A4 C1                           pop     bc                  // bc has counter
1116+ 67A5 D1                           pop     de                  // de has dest
1117+ 67A6 E1                           pop     hl                  // hl has source, save Instruction Pointer
1118+ 67A7 78                           ld      a, b
1119+ 67A8 B1                           or      c
1120+ 67A9 28 08                        jr      z, CmoveV_NoMove
1121+ 67AB EB                               ex      de, hl              // compute address to
1122+ 67AC 09                               add     hl, bc              // operate backward
1123+ 67AD 2B                               dec     hl
1124+ 67AE EB                               ex      de, hl
1125+ 67AF 09                               add     hl, bc
1126+ 67B0 2B                               dec     hl
1127+ 67B1 ED B8                            lddr                        // backward
1128+ 67B3              CmoveV_NoMove:
1129+ 67B3 D9                           exx
1130+ 67B4
1131+ 67B4                              next
1131+ 67B4 DD E9       >                jp      (ix)
1132+ 67B6
1133+ 67B6              //  ______________________________________________________________________
1134+ 67B6              //
1135+ 67B6              // um*      u1 u2 -- ud
1136+ 67B6              // Unsigned multiplication
1137+ 67B6              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1138+ 67B6              // On the stack a double number is treated as two single numbers
1139+ 67B6              // where DE is on the top of the stack and HL is the second from top,
1140+ 67B6              // Instead, in 2VARIABLE a double number is stored as EDLH.
1141+ 67B6              // this definition could use "MUL" Z80N new op-code.
1142+ 67B6                              New_Def UM_MUL, "UM*", is_code, is_normal
1142+ 67B6             >
1142+ 67B6             >Dict_Ptr        defl    $
1142+ 67B6             >
1142+ 67B6             >//              ______________________________________________________________________
1142+ 67B6             >//              Heap part
1142+ 67B6             >
1142+ 67B6             >
1142+ 67B6             >                org     (Heap_Ptr & $1FFF) + $E000
1142+ E206             >
1142+ E206             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1142+ E206             >Latest_Definition defl  Heap_Ptr
1142+ E206             >
1142+ E206             >                // dummy db directives used to calculate length of namec
1142+ E206 55 4D 2A    >                db      "UM*"
1142+ E209             >len_NFA         defl    $ - temp_NFA
1142+ E209             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1142+ E206             >
1142+ E206 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1142+ E207 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1142+ E20A             >                org     $-1                 // alter last byte of Name just above to set
1142+ E209 AA          >                db      {b $} | END_BIT     // msb as name end
1142+ E20A             >
1142+ E20A FB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1142+ E20C             >Prev_Ptr        defl    Heap_Ptr
1142+ E20C             >
1142+ E20C             >mirror_Ptr      defl    $
1142+ E20C             >
1142+ E20C B8 67       >                dw      Dict_Ptr + 2        // xt
1142+ E20E             >Heap_Ptr        defl    $ - $E000           // save current HP
1142+ E20E             >
1142+ E20E             >Current_HP      defl  $ - $E000             // used to set HP once!
1142+ E20E             >
1142+ E20E             >//              ______________________________________________________________________
1142+ E20E             >//              Dictionary part
1142+ E20E             >
1142+ E20E             >                org     Dict_Ptr
1142+ 67B6             >
1142+ 67B6 0C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1142+ 67B8             >
1142+ 67B8             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1142+ 67B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1142+ 67B8 ~           >
1142+ 67B8 ~           >
1142+ 67B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1142+ 67B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1142+ 67B8             >
1142+ 67B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1143+ 67B8 D9                           exx
1144+ 67B9 D1                           pop     de                    // de has u2 operand
1145+ 67BA E1                           pop     hl                    // hl has u1 operand
1146+ 67BB 45                           ld      b, l
1147+ 67BC 4B                           ld      c, e
1148+ 67BD 5D                           ld      e, l
1149+ 67BE 6A                           ld      l, d
1150+ 67BF E5                           push    hl
1151+ 67C0 69                           ld      l, c
1152+ 67C1 ED 30                        mul
1153+ 67C3 EB                           ex      de, hl
1154+ 67C4 ED 30                        mul
1155+ 67C6 AF                           xor     a
1156+ 67C7 19                           add     hl, de
1157+ 67C8 8F                           adc     a
1158+ 67C9 59                           ld      e, c
1159+ 67CA 50                           ld      d, b
1160+ 67CB ED 30                        mul
1161+ 67CD 47                           ld      b, a
1162+ 67CE 4C                           ld      c, h
1163+ 67CF 7A                           ld      a, d
1164+ 67D0 85                           add     l
1165+ 67D1 67                           ld      h, a
1166+ 67D2 6B                           ld      l, e
1167+ 67D3 D1                           pop     de
1168+ 67D4 ED 30                        mul
1169+ 67D6 EB                           ex      de, hl
1170+ 67D7 ED 4A                        adc     hl, bc
1171+ 67D9 D5                           push    de
1172+ 67DA E5                           push    hl
1173+ 67DB D9                           exx
1174+ 67DC                              next
1174+ 67DC DD E9       >                jp      (ix)
1175+ 67DE
1176+ 67DE              //  ______________________________________________________________________
1177+ 67DE              //
1178+ 67DE              // um/mod      ud u1 -- q r
1179+ 67DE              // divides ud into u1 giving quotient q and remainder r
1180+ 67DE              // algorithm takes 16 bit at a time starting from msb
1181+ 67DE              // DE grows from lsb upward with quotient result
1182+ 67DE              // HL keeps the remainder at each stage of division
1183+ 67DE              // each loop 'lowers' the next binary digit to form the current dividend
1184+ 67DE                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1184+ 67DE             >
1184+ 67DE             >Dict_Ptr        defl    $
1184+ 67DE             >
1184+ 67DE             >//              ______________________________________________________________________
1184+ 67DE             >//              Heap part
1184+ 67DE             >
1184+ 67DE             >
1184+ 67DE             >                org     (Heap_Ptr & $1FFF) + $E000
1184+ E20E             >
1184+ E20E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1184+ E20E             >Latest_Definition defl  Heap_Ptr
1184+ E20E             >
1184+ E20E             >                // dummy db directives used to calculate length of namec
1184+ E20E 55 4D 2F 4D >                db      "UM/MOD"
1184+ E212 4F 44       >
1184+ E214             >len_NFA         defl    $ - temp_NFA
1184+ E214             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1184+ E20E             >
1184+ E20E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1184+ E20F 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1184+ E213 4F 44       >
1184+ E215             >                org     $-1                 // alter last byte of Name just above to set
1184+ E214 C4          >                db      {b $} | END_BIT     // msb as name end
1184+ E215             >
1184+ E215 06 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1184+ E217             >Prev_Ptr        defl    Heap_Ptr
1184+ E217             >
1184+ E217             >mirror_Ptr      defl    $
1184+ E217             >
1184+ E217 E0 67       >                dw      Dict_Ptr + 2        // xt
1184+ E219             >Heap_Ptr        defl    $ - $E000           // save current HP
1184+ E219             >
1184+ E219             >Current_HP      defl  $ - $E000             // used to set HP once!
1184+ E219             >
1184+ E219             >//              ______________________________________________________________________
1184+ E219             >//              Dictionary part
1184+ E219             >
1184+ E219             >                org     Dict_Ptr
1184+ 67DE             >
1184+ 67DE 17 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1184+ 67E0             >
1184+ 67E0             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1184+ 67E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1184+ 67E0 ~           >
1184+ 67E0 ~           >
1184+ 67E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1184+ 67E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1184+ 67E0             >
1184+ 67E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1185+ 67E0 D9                           exx
1186+ 67E1 C1                           pop     bc                      // divisor
1187+ 67E2
1188+ 67E2 E1                           pop     hl                      // < high part
1189+ 67E3 D1                           pop     de                      // < low part and
1190+ 67E4
1191+ 67E4 7D                           ld      a, l                    // check without changing arguments
1192+ 67E5 91                           sub     c                       // if divisor is greater than high part
1193+ 67E6 7C                           ld      a, h                    // so quotient will be in range
1194+ 67E7 98                           sbc     a, b
1195+ 67E8 30 20                        jr      nc, Um_DivMod_OutOfRange
1196+ 67EA 3E 10                            ld      a, 16
1197+ 67EC              Um_DivMod_Loop:
1198+ 67EC CB 23                                sla     e
1199+ 67EE CB 12                                rl      d
1200+ 67F0 ED 6A                                adc     hl, hl
1201+ 67F2 30 05                                jr      nc, Um_DivMod_Carry
1202+ 67F4 A7                                       and     a
1203+ 67F5 ED 42                                    sbc     hl, bc
1204+ 67F7 18 07                                jr      Um_DivMod_Endif    // else
1205+ 67F9              Um_DivMod_Carry:
1206+ 67F9 A7                                       and     a
1207+ 67FA ED 42                                    sbc     hl, bc
1208+ 67FC 30 02                                    jr      nc, Um_DivMod_Endif
1209+ 67FE 09                                           add     hl, bc
1210+ 67FF 1B                                           dec     de
1211+ 6800              Um_DivMod_Endif:                                   // endif
1212+ 6800 13                                   inc     de
1213+ 6801 3D                                   dec     a
1214+ 6802 20 E8                            jr      nz, Um_DivMod_Loop
1215+ 6804 EB                               ex      de, hl
1216+ 6805              Um_DivMod_Bailout:
1217+ 6805 D5                               push    de                  // de := remanider
1218+ 6806 E5                               push    hl                  // hl := quotient
1219+ 6807 D9                               exx
1220+ 6808                                  next
1220+ 6808 DD E9       >                jp      (ix)
1221+ 680A
1222+ 680A              Um_DivMod_OutOfRange:
1223+ 680A 21 FF FF                     ld      hl, -1
1224+ 680D 54                           ld      d, h
1225+ 680E 5D                           ld      e, l
1226+ 680F 18 F4                        jr      Um_DivMod_Bailout
1227+ 6811
1228+ 6811              //  ______________________________________________________________________
1229+ 6811              //
1230+ 6811              // and          n1 n2 -- n3
1231+ 6811              // bit logical AND. Returns n3 as n1 & n2
1232+ 6811                              New_Def AND_OP, "AND", is_code, is_normal
1232+ 6811             >
1232+ 6811             >Dict_Ptr        defl    $
1232+ 6811             >
1232+ 6811             >//              ______________________________________________________________________
1232+ 6811             >//              Heap part
1232+ 6811             >
1232+ 6811             >
1232+ 6811             >                org     (Heap_Ptr & $1FFF) + $E000
1232+ E219             >
1232+ E219             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1232+ E219             >Latest_Definition defl  Heap_Ptr
1232+ E219             >
1232+ E219             >                // dummy db directives used to calculate length of namec
1232+ E219 41 4E 44    >                db      "AND"
1232+ E21C             >len_NFA         defl    $ - temp_NFA
1232+ E21C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1232+ E219             >
1232+ E219 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1232+ E21A 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1232+ E21D             >                org     $-1                 // alter last byte of Name just above to set
1232+ E21C C4          >                db      {b $} | END_BIT     // msb as name end
1232+ E21D             >
1232+ E21D 0E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1232+ E21F             >Prev_Ptr        defl    Heap_Ptr
1232+ E21F             >
1232+ E21F             >mirror_Ptr      defl    $
1232+ E21F             >
1232+ E21F 13 68       >                dw      Dict_Ptr + 2        // xt
1232+ E221             >Heap_Ptr        defl    $ - $E000           // save current HP
1232+ E221             >
1232+ E221             >Current_HP      defl  $ - $E000             // used to set HP once!
1232+ E221             >
1232+ E221             >//              ______________________________________________________________________
1232+ E221             >//              Dictionary part
1232+ E221             >
1232+ E221             >                org     Dict_Ptr
1232+ 6811             >
1232+ 6811 1F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1232+ 6813             >
1232+ 6813             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1232+ 6813 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1232+ 6813 ~           >
1232+ 6813 ~           >
1232+ 6813             >                endif           ; ok        // for other definitions it "points" the correct handler
1232+ 6813             >                // Use of "; ok" to suppress "warning[fwdref]"
1232+ 6813             >
1232+ 6813             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1233+ 6813 D9                           exx
1234+ 6814 D1                           pop     de
1235+ 6815 E1                           pop     hl
1236+ 6816 7B                           ld      a, e
1237+ 6817 A5                           and     l
1238+ 6818 6F                           ld      l, a
1239+ 6819 7A                           ld      a, d
1240+ 681A A4                           and     h
1241+ 681B              Boolean_exit:
1242+ 681B 67                           ld      h, a
1243+ 681C E5                           push    hl
1244+ 681D D9                           exx
1245+ 681E                              next
1245+ 681E DD E9       >                jp      (ix)
1246+ 6820
1247+ 6820              //  ______________________________________________________________________
1248+ 6820              //
1249+ 6820              // or           n1 n2 -- n3
1250+ 6820              // bit logical OR. Returns n3 as n1 | n2
1251+ 6820                              New_Def OR_OP, "OR", is_code, is_normal
1251+ 6820             >
1251+ 6820             >Dict_Ptr        defl    $
1251+ 6820             >
1251+ 6820             >//              ______________________________________________________________________
1251+ 6820             >//              Heap part
1251+ 6820             >
1251+ 6820             >
1251+ 6820             >                org     (Heap_Ptr & $1FFF) + $E000
1251+ E221             >
1251+ E221             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1251+ E221             >Latest_Definition defl  Heap_Ptr
1251+ E221             >
1251+ E221             >                // dummy db directives used to calculate length of namec
1251+ E221 4F 52       >                db      "OR"
1251+ E223             >len_NFA         defl    $ - temp_NFA
1251+ E223             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1251+ E221             >
1251+ E221 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1251+ E222 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1251+ E224             >                org     $-1                 // alter last byte of Name just above to set
1251+ E223 D2          >                db      {b $} | END_BIT     // msb as name end
1251+ E224             >
1251+ E224 19 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1251+ E226             >Prev_Ptr        defl    Heap_Ptr
1251+ E226             >
1251+ E226             >mirror_Ptr      defl    $
1251+ E226             >
1251+ E226 22 68       >                dw      Dict_Ptr + 2        // xt
1251+ E228             >Heap_Ptr        defl    $ - $E000           // save current HP
1251+ E228             >
1251+ E228             >Current_HP      defl  $ - $E000             // used to set HP once!
1251+ E228             >
1251+ E228             >//              ______________________________________________________________________
1251+ E228             >//              Dictionary part
1251+ E228             >
1251+ E228             >                org     Dict_Ptr
1251+ 6820             >
1251+ 6820 26 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1251+ 6822             >
1251+ 6822             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1251+ 6822 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1251+ 6822 ~           >
1251+ 6822 ~           >
1251+ 6822             >                endif           ; ok        // for other definitions it "points" the correct handler
1251+ 6822             >                // Use of "; ok" to suppress "warning[fwdref]"
1251+ 6822             >
1251+ 6822             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1252+ 6822 D9                           exx
1253+ 6823 D1                           pop     de
1254+ 6824 E1                           pop     hl
1255+ 6825 7B                           ld      a, e
1256+ 6826 B5                           or      l
1257+ 6827 6F                           ld      l, a
1258+ 6828 7A                           ld      a, d
1259+ 6829 B4                           or      h
1260+ 682A 18 EF                        jr      Boolean_exit
1261+ 682C                        //    ld      h, a
1262+ 682C                        //    push    hl
1263+ 682C                        //    exx
1264+ 682C                        //    next
1265+ 682C
1266+ 682C              //  ______________________________________________________________________
1267+ 682C              //
1268+ 682C              // xor          n1 n2 -- n3
1269+ 682C              // bit logical OR. Returns n3 as n1 ^ n2
1270+ 682C                              New_Def XOR_OP, "XOR", is_code, is_normal
1270+ 682C             >
1270+ 682C             >Dict_Ptr        defl    $
1270+ 682C             >
1270+ 682C             >//              ______________________________________________________________________
1270+ 682C             >//              Heap part
1270+ 682C             >
1270+ 682C             >
1270+ 682C             >                org     (Heap_Ptr & $1FFF) + $E000
1270+ E228             >
1270+ E228             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1270+ E228             >Latest_Definition defl  Heap_Ptr
1270+ E228             >
1270+ E228             >                // dummy db directives used to calculate length of namec
1270+ E228 58 4F 52    >                db      "XOR"
1270+ E22B             >len_NFA         defl    $ - temp_NFA
1270+ E22B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1270+ E228             >
1270+ E228 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1270+ E229 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1270+ E22C             >                org     $-1                 // alter last byte of Name just above to set
1270+ E22B D2          >                db      {b $} | END_BIT     // msb as name end
1270+ E22C             >
1270+ E22C 21 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1270+ E22E             >Prev_Ptr        defl    Heap_Ptr
1270+ E22E             >
1270+ E22E             >mirror_Ptr      defl    $
1270+ E22E             >
1270+ E22E 2E 68       >                dw      Dict_Ptr + 2        // xt
1270+ E230             >Heap_Ptr        defl    $ - $E000           // save current HP
1270+ E230             >
1270+ E230             >Current_HP      defl  $ - $E000             // used to set HP once!
1270+ E230             >
1270+ E230             >//              ______________________________________________________________________
1270+ E230             >//              Dictionary part
1270+ E230             >
1270+ E230             >                org     Dict_Ptr
1270+ 682C             >
1270+ 682C 2E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1270+ 682E             >
1270+ 682E             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1270+ 682E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1270+ 682E ~           >
1270+ 682E ~           >
1270+ 682E             >                endif           ; ok        // for other definitions it "points" the correct handler
1270+ 682E             >                // Use of "; ok" to suppress "warning[fwdref]"
1270+ 682E             >
1270+ 682E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1271+ 682E D9                           exx
1272+ 682F D1                           pop     de
1273+ 6830 E1                           pop     hl
1274+ 6831 7B                           ld      a, e
1275+ 6832 AD                           xor     l
1276+ 6833 6F                           ld      l, a
1277+ 6834 7A                           ld      a, d
1278+ 6835 AC                           xor     h
1279+ 6836 18 E3                        jr      Boolean_exit
1280+ 6838                        //    ld      h, a
1281+ 6838                        //    push    hl
1282+ 6838                        //    exx
1283+ 6838                        //    next
1284+ 6838
1285+ 6838              //  ______________________________________________________________________
1286+ 6838              //
1287+ 6838              // sp@      -- a
1288+ 6838              // returns on top of stack the value of SP before execution
1289+ 6838                              New_Def SPFETCH, "SP@", is_code, is_normal
1289+ 6838             >
1289+ 6838             >Dict_Ptr        defl    $
1289+ 6838             >
1289+ 6838             >//              ______________________________________________________________________
1289+ 6838             >//              Heap part
1289+ 6838             >
1289+ 6838             >
1289+ 6838             >                org     (Heap_Ptr & $1FFF) + $E000
1289+ E230             >
1289+ E230             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1289+ E230             >Latest_Definition defl  Heap_Ptr
1289+ E230             >
1289+ E230             >                // dummy db directives used to calculate length of namec
1289+ E230 53 50 40    >                db      "SP@"
1289+ E233             >len_NFA         defl    $ - temp_NFA
1289+ E233             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1289+ E230             >
1289+ E230 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1289+ E231 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1289+ E234             >                org     $-1                 // alter last byte of Name just above to set
1289+ E233 C0          >                db      {b $} | END_BIT     // msb as name end
1289+ E234             >
1289+ E234 28 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1289+ E236             >Prev_Ptr        defl    Heap_Ptr
1289+ E236             >
1289+ E236             >mirror_Ptr      defl    $
1289+ E236             >
1289+ E236 3A 68       >                dw      Dict_Ptr + 2        // xt
1289+ E238             >Heap_Ptr        defl    $ - $E000           // save current HP
1289+ E238             >
1289+ E238             >Current_HP      defl  $ - $E000             // used to set HP once!
1289+ E238             >
1289+ E238             >//              ______________________________________________________________________
1289+ E238             >//              Dictionary part
1289+ E238             >
1289+ E238             >                org     Dict_Ptr
1289+ 6838             >
1289+ 6838 36 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1289+ 683A             >
1289+ 683A             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1289+ 683A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1289+ 683A ~           >
1289+ 683A ~           >
1289+ 683A             >                endif           ; ok        // for other definitions it "points" the correct handler
1289+ 683A             >                // Use of "; ok" to suppress "warning[fwdref]"
1289+ 683A             >
1289+ 683A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1290+ 683A
1291+ 683A 21 00 00                     ld      hl, 0
1292+ 683D 39                           add     hl, sp
1293+ 683E
1294+ 683E                              psh1
1294+ 683E E5          >                push    hl
1294+ 683F DD E9       >                jp      (ix)
1295+ 6841
1296+ 6841              //  ______________________________________________________________________
1297+ 6841              //
1298+ 6841              // sp!      a --
1299+ 6841              // restore SP to the initial value passed
1300+ 6841              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1301+ 6841                              New_Def SPSTORE, "SP!", is_code, is_normal
1301+ 6841             >
1301+ 6841             >Dict_Ptr        defl    $
1301+ 6841             >
1301+ 6841             >//              ______________________________________________________________________
1301+ 6841             >//              Heap part
1301+ 6841             >
1301+ 6841             >
1301+ 6841             >                org     (Heap_Ptr & $1FFF) + $E000
1301+ E238             >
1301+ E238             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1301+ E238             >Latest_Definition defl  Heap_Ptr
1301+ E238             >
1301+ E238             >                // dummy db directives used to calculate length of namec
1301+ E238 53 50 21    >                db      "SP!"
1301+ E23B             >len_NFA         defl    $ - temp_NFA
1301+ E23B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1301+ E238             >
1301+ E238 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1301+ E239 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1301+ E23C             >                org     $-1                 // alter last byte of Name just above to set
1301+ E23B A1          >                db      {b $} | END_BIT     // msb as name end
1301+ E23C             >
1301+ E23C 30 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1301+ E23E             >Prev_Ptr        defl    Heap_Ptr
1301+ E23E             >
1301+ E23E             >mirror_Ptr      defl    $
1301+ E23E             >
1301+ E23E 43 68       >                dw      Dict_Ptr + 2        // xt
1301+ E240             >Heap_Ptr        defl    $ - $E000           // save current HP
1301+ E240             >
1301+ E240             >Current_HP      defl  $ - $E000             // used to set HP once!
1301+ E240             >
1301+ E240             >//              ______________________________________________________________________
1301+ E240             >//              Dictionary part
1301+ E240             >
1301+ E240             >                org     Dict_Ptr
1301+ 6841             >
1301+ 6841 3E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1301+ 6843             >
1301+ 6843             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1301+ 6843 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1301+ 6843 ~           >
1301+ 6843 ~           >
1301+ 6843             >                endif           ; ok        // for other definitions it "points" the correct handler
1301+ 6843             >                // Use of "; ok" to suppress "warning[fwdref]"
1301+ 6843             >
1301+ 6843             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1302+ 6843 E1                           pop     hl
1303+ 6844 F9                           ld      sp, hl
1304+ 6845
1305+ 6845                              next
1305+ 6845 DD E9       >                jp      (ix)
1306+ 6847
1307+ 6847              //  ______________________________________________________________________
1308+ 6847              //
1309+ 6847              // rp@      -- a
1310+ 6847              // returns on top of stack the value of Return-Pointer
1311+ 6847                              New_Def RPFETCH, "RP@", is_code, is_normal
1311+ 6847             >
1311+ 6847             >Dict_Ptr        defl    $
1311+ 6847             >
1311+ 6847             >//              ______________________________________________________________________
1311+ 6847             >//              Heap part
1311+ 6847             >
1311+ 6847             >
1311+ 6847             >                org     (Heap_Ptr & $1FFF) + $E000
1311+ E240             >
1311+ E240             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1311+ E240             >Latest_Definition defl  Heap_Ptr
1311+ E240             >
1311+ E240             >                // dummy db directives used to calculate length of namec
1311+ E240 52 50 40    >                db      "RP@"
1311+ E243             >len_NFA         defl    $ - temp_NFA
1311+ E243             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1311+ E240             >
1311+ E240 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1311+ E241 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1311+ E244             >                org     $-1                 // alter last byte of Name just above to set
1311+ E243 C0          >                db      {b $} | END_BIT     // msb as name end
1311+ E244             >
1311+ E244 38 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1311+ E246             >Prev_Ptr        defl    Heap_Ptr
1311+ E246             >
1311+ E246             >mirror_Ptr      defl    $
1311+ E246             >
1311+ E246 49 68       >                dw      Dict_Ptr + 2        // xt
1311+ E248             >Heap_Ptr        defl    $ - $E000           // save current HP
1311+ E248             >
1311+ E248             >Current_HP      defl  $ - $E000             // used to set HP once!
1311+ E248             >
1311+ E248             >//              ______________________________________________________________________
1311+ E248             >//              Dictionary part
1311+ E248             >
1311+ E248             >                org     Dict_Ptr
1311+ 6847             >
1311+ 6847 46 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1311+ 6849             >
1311+ 6849             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1311+ 6849 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1311+ 6849 ~           >
1311+ 6849 ~           >
1311+ 6849             >                endif           ; ok        // for other definitions it "points" the correct handler
1311+ 6849             >                // Use of "; ok" to suppress "warning[fwdref]"
1311+ 6849             >
1311+ 6849             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1312+ 6849
1313+ 6849                              // *** ldhlrp
1314+ 6849                              // *** ex      de, hl
1315+ 6849 D5                           push de
1316+ 684A
1317+ 684A                              next
1317+ 684A DD E9       >                jp      (ix)
1318+ 684C
1319+ 684C              //  ______________________________________________________________________
1320+ 684C              //
1321+ 684C              // rp!      a --
1322+ 684C              // restore RP to the initial value passed
1323+ 684C              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1324+ 684C                              New_Def RPSTORE, "RP!", is_code, is_normal
1324+ 684C             >
1324+ 684C             >Dict_Ptr        defl    $
1324+ 684C             >
1324+ 684C             >//              ______________________________________________________________________
1324+ 684C             >//              Heap part
1324+ 684C             >
1324+ 684C             >
1324+ 684C             >                org     (Heap_Ptr & $1FFF) + $E000
1324+ E248             >
1324+ E248             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1324+ E248             >Latest_Definition defl  Heap_Ptr
1324+ E248             >
1324+ E248             >                // dummy db directives used to calculate length of namec
1324+ E248 52 50 21    >                db      "RP!"
1324+ E24B             >len_NFA         defl    $ - temp_NFA
1324+ E24B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1324+ E248             >
1324+ E248 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1324+ E249 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1324+ E24C             >                org     $-1                 // alter last byte of Name just above to set
1324+ E24B A1          >                db      {b $} | END_BIT     // msb as name end
1324+ E24C             >
1324+ E24C 40 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1324+ E24E             >Prev_Ptr        defl    Heap_Ptr
1324+ E24E             >
1324+ E24E             >mirror_Ptr      defl    $
1324+ E24E             >
1324+ E24E 4E 68       >                dw      Dict_Ptr + 2        // xt
1324+ E250             >Heap_Ptr        defl    $ - $E000           // save current HP
1324+ E250             >
1324+ E250             >Current_HP      defl  $ - $E000             // used to set HP once!
1324+ E250             >
1324+ E250             >//              ______________________________________________________________________
1324+ E250             >//              Dictionary part
1324+ E250             >
1324+ E250             >                org     Dict_Ptr
1324+ 684C             >
1324+ 684C 4E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1324+ 684E             >
1324+ 684E             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1324+ 684E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1324+ 684E ~           >
1324+ 684E ~           >
1324+ 684E             >                endif           ; ok        // for other definitions it "points" the correct handler
1324+ 684E             >                // Use of "; ok" to suppress "warning[fwdref]"
1324+ 684E             >
1324+ 684E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1325+ 684E D1                           pop     de
1326+ 684F                              // *** ex      de, hl
1327+ 684F                              // *** ldrphl
1328+ 684F
1329+ 684F                              next
1329+ 684F DD E9       >                jp      (ix)
1330+ 6851
1331+ 6851              //  ______________________________________________________________________
1332+ 6851              //
1333+ 6851              // exit       --
1334+ 6851              // exits back to the caller word
1335+ 6851                              New_Def EXIT, "EXIT", is_code, is_normal
1335+ 6851             >
1335+ 6851             >Dict_Ptr        defl    $
1335+ 6851             >
1335+ 6851             >//              ______________________________________________________________________
1335+ 6851             >//              Heap part
1335+ 6851             >
1335+ 6851             >
1335+ 6851             >                org     (Heap_Ptr & $1FFF) + $E000
1335+ E250             >
1335+ E250             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1335+ E250             >Latest_Definition defl  Heap_Ptr
1335+ E250             >
1335+ E250             >                // dummy db directives used to calculate length of namec
1335+ E250 45 58 49 54 >                db      "EXIT"
1335+ E254             >len_NFA         defl    $ - temp_NFA
1335+ E254             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1335+ E250             >
1335+ E250 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1335+ E251 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1335+ E255             >                org     $-1                 // alter last byte of Name just above to set
1335+ E254 D4          >                db      {b $} | END_BIT     // msb as name end
1335+ E255             >
1335+ E255 48 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1335+ E257             >Prev_Ptr        defl    Heap_Ptr
1335+ E257             >
1335+ E257             >mirror_Ptr      defl    $
1335+ E257             >
1335+ E257 53 68       >                dw      Dict_Ptr + 2        // xt
1335+ E259             >Heap_Ptr        defl    $ - $E000           // save current HP
1335+ E259             >
1335+ E259             >Current_HP      defl  $ - $E000             // used to set HP once!
1335+ E259             >
1335+ E259             >//              ______________________________________________________________________
1335+ E259             >//              Dictionary part
1335+ E259             >
1335+ E259             >                org     Dict_Ptr
1335+ 6851             >
1335+ 6851 57 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1335+ 6853             >
1335+ 6853             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1335+ 6853 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1335+ 6853 ~           >
1335+ 6853 ~           >
1335+ 6853             >                endif           ; ok        // for other definitions it "points" the correct handler
1335+ 6853             >                // Use of "; ok" to suppress "warning[fwdref]"
1335+ 6853             >
1335+ 6853             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1336+ 6853 EB                           ex      de, hl
1337+ 6854                              // *** ldhlrp                      // Get Return Stack Pointer
1338+ 6854 4E                           ld      c, (hl)             // pop Instruction Pointer
1339+ 6855 23                           inc     hl                  // from Return Stack
1340+ 6856 46                           ld      b, (hl)
1341+ 6857 23                           inc     hl
1342+ 6858                              // *** ldrphl                      // Set Return Stack Pointer
1343+ 6858 EB                           ex      de, hl
1344+ 6859                              next
1344+ 6859 DD E9       >                jp      (ix)
1345+ 685B
1346+ 685B              //  ______________________________________________________________________
1347+ 685B              //
1348+ 685B              // lastl      --
1349+ 685B              // exits back to the caller word
1350+ 685B              //              New_Def EXIT, "LASTL", is_code, is_normal
1351+ 685B              //              push    de
1352+ 685B              //              ex      de, hl //**
1353+ 685B              //              // *** ldhlrp                      // Get Return Stack Pointer
1354+ 685B              //              ld      e, (hl)             // pop Instruction Pointer
1355+ 685B              //              inc     hl                  // from Return Stack
1356+ 685B              //              ld      d, (hl)
1357+ 685B              //              inc     hl
1358+ 685B              //              ld      (hl), e
1359+ 685B              //              inc     hl
1360+ 685B              //              ld      (hl), d
1361+ 685B              //              add     hl, -3
1362+ 685B              //              pop     de
1363+ 685B              //              next
1364+ 685B
1365+ 685B              //  ______________________________________________________________________
1366+ 685B              //
1367+ 685B              // >r      n --
1368+ 685B              // pop from calculator-stack and push into return-stack
1369+ 685B                              New_Def TO_R, ">R", is_code, is_normal
1369+ 685B             >
1369+ 685B             >Dict_Ptr        defl    $
1369+ 685B             >
1369+ 685B             >//              ______________________________________________________________________
1369+ 685B             >//              Heap part
1369+ 685B             >
1369+ 685B             >
1369+ 685B             >                org     (Heap_Ptr & $1FFF) + $E000
1369+ E259             >
1369+ E259             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1369+ E259             >Latest_Definition defl  Heap_Ptr
1369+ E259             >
1369+ E259             >                // dummy db directives used to calculate length of namec
1369+ E259 3E 52       >                db      ">R"
1369+ E25B             >len_NFA         defl    $ - temp_NFA
1369+ E25B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1369+ E259             >
1369+ E259 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1369+ E25A 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1369+ E25C             >                org     $-1                 // alter last byte of Name just above to set
1369+ E25B D2          >                db      {b $} | END_BIT     // msb as name end
1369+ E25C             >
1369+ E25C 50 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1369+ E25E             >Prev_Ptr        defl    Heap_Ptr
1369+ E25E             >
1369+ E25E             >mirror_Ptr      defl    $
1369+ E25E             >
1369+ E25E 5D 68       >                dw      Dict_Ptr + 2        // xt
1369+ E260             >Heap_Ptr        defl    $ - $E000           // save current HP
1369+ E260             >
1369+ E260             >Current_HP      defl  $ - $E000             // used to set HP once!
1369+ E260             >
1369+ E260             >//              ______________________________________________________________________
1369+ E260             >//              Dictionary part
1369+ E260             >
1369+ E260             >                org     Dict_Ptr
1369+ 685B             >
1369+ 685B 5E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1369+ 685D             >
1369+ 685D             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1369+ 685D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1369+ 685D ~           >
1369+ 685D ~           >
1369+ 685D             >                endif           ; ok        // for other definitions it "points" the correct handler
1369+ 685D             >                // Use of "; ok" to suppress "warning[fwdref]"
1369+ 685D             >
1369+ 685D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1370+ 685D E1                           pop     hl
1371+ 685E EB                           ex      de, hl //**
1372+ 685F                              // *** ldhlrp
1373+ 685F 2B                           dec     hl
1374+ 6860 72                           ld      (hl), d             // store current TOS
1375+ 6861 2B                           dec     hl                  // to Return Stack
1376+ 6862 73                           ld      (hl), e
1377+ 6863                              // *** ldrphl
1378+ 6863 EB                           ex      de, hl //**
1379+ 6864                              next
1379+ 6864 DD E9       >                jp      (ix)
1380+ 6866
1381+ 6866              //  ______________________________________________________________________
1382+ 6866              //
1383+ 6866              // r>      -- n
1384+ 6866              // pop from return-stack and push into calculator-stack
1385+ 6866                              New_Def R_TO, "R>", is_code, is_normal
1385+ 6866             >
1385+ 6866             >Dict_Ptr        defl    $
1385+ 6866             >
1385+ 6866             >//              ______________________________________________________________________
1385+ 6866             >//              Heap part
1385+ 6866             >
1385+ 6866             >
1385+ 6866             >                org     (Heap_Ptr & $1FFF) + $E000
1385+ E260             >
1385+ E260             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1385+ E260             >Latest_Definition defl  Heap_Ptr
1385+ E260             >
1385+ E260             >                // dummy db directives used to calculate length of namec
1385+ E260 52 3E       >                db      "R>"
1385+ E262             >len_NFA         defl    $ - temp_NFA
1385+ E262             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1385+ E260             >
1385+ E260 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1385+ E261 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1385+ E263             >                org     $-1                 // alter last byte of Name just above to set
1385+ E262 BE          >                db      {b $} | END_BIT     // msb as name end
1385+ E263             >
1385+ E263 59 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1385+ E265             >Prev_Ptr        defl    Heap_Ptr
1385+ E265             >
1385+ E265             >mirror_Ptr      defl    $
1385+ E265             >
1385+ E265 68 68       >                dw      Dict_Ptr + 2        // xt
1385+ E267             >Heap_Ptr        defl    $ - $E000           // save current HP
1385+ E267             >
1385+ E267             >Current_HP      defl  $ - $E000             // used to set HP once!
1385+ E267             >
1385+ E267             >//              ______________________________________________________________________
1385+ E267             >//              Dictionary part
1385+ E267             >
1385+ E267             >                org     Dict_Ptr
1385+ 6866             >
1385+ 6866 65 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1385+ 6868             >
1385+ 6868             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1385+ 6868 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1385+ 6868 ~           >
1385+ 6868 ~           >
1385+ 6868             >                endif           ; ok        // for other definitions it "points" the correct handler
1385+ 6868             >                // Use of "; ok" to suppress "warning[fwdref]"
1385+ 6868             >
1385+ 6868             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1386+ 6868
1387+ 6868 EB                           ex      de, hl //**
1388+ 6869                              // *** ldhlrp
1389+ 6869 5E                           ld      e, (hl)             // retrieve from Return Stack
1390+ 686A 23                           inc     hl
1391+ 686B 56                           ld      d, (hl)
1392+ 686C 23                           inc     hl
1393+ 686D                              // *** ldrphl
1394+ 686D EB                           ex      de, hl //**
1395+ 686E E5                           push    hl
1396+ 686F                              next
1396+ 686F DD E9       >                jp      (ix)
1397+ 6871
1398+ 6871              //  ______________________________________________________________________
1399+ 6871              //
1400+ 6871              // r@           -- n
1401+ 6871              // return on top of stack the value of top of return-stack
1402+ 6871              // Since this is the same as I, we alter R's CFA to jump there
1403+ 6871                              New_Def R_OP, "R@", is_code, is_normal
1403+ 6871             >
1403+ 6871             >Dict_Ptr        defl    $
1403+ 6871             >
1403+ 6871             >//              ______________________________________________________________________
1403+ 6871             >//              Heap part
1403+ 6871             >
1403+ 6871             >
1403+ 6871             >                org     (Heap_Ptr & $1FFF) + $E000
1403+ E267             >
1403+ E267             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1403+ E267             >Latest_Definition defl  Heap_Ptr
1403+ E267             >
1403+ E267             >                // dummy db directives used to calculate length of namec
1403+ E267 52 40       >                db      "R@"
1403+ E269             >len_NFA         defl    $ - temp_NFA
1403+ E269             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1403+ E267             >
1403+ E267 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1403+ E268 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1403+ E26A             >                org     $-1                 // alter last byte of Name just above to set
1403+ E269 C0          >                db      {b $} | END_BIT     // msb as name end
1403+ E26A             >
1403+ E26A 60 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1403+ E26C             >Prev_Ptr        defl    Heap_Ptr
1403+ E26C             >
1403+ E26C             >mirror_Ptr      defl    $
1403+ E26C             >
1403+ E26C 73 68       >                dw      Dict_Ptr + 2        // xt
1403+ E26E             >Heap_Ptr        defl    $ - $E000           // save current HP
1403+ E26E             >
1403+ E26E             >Current_HP      defl  $ - $E000             // used to set HP once!
1403+ E26E             >
1403+ E26E             >//              ______________________________________________________________________
1403+ E26E             >//              Dictionary part
1403+ E26E             >
1403+ E26E             >                org     Dict_Ptr
1403+ 6871             >
1403+ 6871 6C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1403+ 6873             >
1403+ 6873             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1403+ 6873 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1403+ 6873 ~           >
1403+ 6873 ~           >
1403+ 6873             >                endif           ; ok        // for other definitions it "points" the correct handler
1403+ 6873             >                // Use of "; ok" to suppress "warning[fwdref]"
1403+ 6873             >
1403+ 6873             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1404+ 6873                          //  Behave  I_Ptr
1405+ 6873 C3 3A 64                     jp      I_Ptr
1406+ 6876
1407+ 6876              //  ______________________________________________________________________
1408+ 6876              //
1409+ 6876              // r            -- n
1410+ 6876              // return on top of stack the value of top of return-stack
1411+ 6876              // Since this is the same as I, we alter R's CFA to jump there
1412+ 6876              //              New_Def R_OLD, "R", is_code, is_normal
1413+ 6876              //              jp      I_Ptr
1414+ 6876
1415+ 6876              //  ______________________________________________________________________
1416+ 6876              //
1417+ 6876              // 0=           n -- f
1418+ 6876              // true (non zero) if n is zero, false (0) elsewere
1419+ 6876                              New_Def ZEQUAL, "0=", is_code, is_normal
1419+ 6876             >
1419+ 6876             >Dict_Ptr        defl    $
1419+ 6876             >
1419+ 6876             >//              ______________________________________________________________________
1419+ 6876             >//              Heap part
1419+ 6876             >
1419+ 6876             >
1419+ 6876             >                org     (Heap_Ptr & $1FFF) + $E000
1419+ E26E             >
1419+ E26E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1419+ E26E             >Latest_Definition defl  Heap_Ptr
1419+ E26E             >
1419+ E26E             >                // dummy db directives used to calculate length of namec
1419+ E26E 30 3D       >                db      "0="
1419+ E270             >len_NFA         defl    $ - temp_NFA
1419+ E270             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1419+ E26E             >
1419+ E26E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1419+ E26F 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1419+ E271             >                org     $-1                 // alter last byte of Name just above to set
1419+ E270 BD          >                db      {b $} | END_BIT     // msb as name end
1419+ E271             >
1419+ E271 67 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1419+ E273             >Prev_Ptr        defl    Heap_Ptr
1419+ E273             >
1419+ E273             >mirror_Ptr      defl    $
1419+ E273             >
1419+ E273 78 68       >                dw      Dict_Ptr + 2        // xt
1419+ E275             >Heap_Ptr        defl    $ - $E000           // save current HP
1419+ E275             >
1419+ E275             >Current_HP      defl  $ - $E000             // used to set HP once!
1419+ E275             >
1419+ E275             >//              ______________________________________________________________________
1419+ E275             >//              Dictionary part
1419+ E275             >
1419+ E275             >                org     Dict_Ptr
1419+ 6876             >
1419+ 6876 73 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1419+ 6878             >
1419+ 6878             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1419+ 6878 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1419+ 6878 ~           >
1419+ 6878 ~           >
1419+ 6878             >                endif           ; ok        // for other definitions it "points" the correct handler
1419+ 6878             >                // Use of "; ok" to suppress "warning[fwdref]"
1419+ 6878             >
1419+ 6878             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1420+ 6878              Zero_Equal:
1421+ 6878 E1                           pop     hl
1422+ 6879 7D                           ld      a, l
1423+ 687A B4                           or      h
1424+ 687B 21 00 00                     ld      hl, FALSE_FLAG
1425+ 687E 20 01                        jr      nz, ZEqual_Skip
1426+ 6880 2B                               dec     hl
1427+ 6881              ZEqual_Skip:
1428+ 6881                              psh1
1428+ 6881 E5          >                push    hl
1428+ 6882 DD E9       >                jp      (ix)
1429+ 6884
1430+ 6884              //  ______________________________________________________________________
1431+ 6884              //
1432+ 6884              // not         a1 -- a2
1433+ 6884              // increment by 2 top of stack
1434+ 6884                              New_Def NOT_OP, "NOT", is_code, is_normal
1434+ 6884             >
1434+ 6884             >Dict_Ptr        defl    $
1434+ 6884             >
1434+ 6884             >//              ______________________________________________________________________
1434+ 6884             >//              Heap part
1434+ 6884             >
1434+ 6884             >
1434+ 6884             >                org     (Heap_Ptr & $1FFF) + $E000
1434+ E275             >
1434+ E275             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1434+ E275             >Latest_Definition defl  Heap_Ptr
1434+ E275             >
1434+ E275             >                // dummy db directives used to calculate length of namec
1434+ E275 4E 4F 54    >                db      "NOT"
1434+ E278             >len_NFA         defl    $ - temp_NFA
1434+ E278             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1434+ E275             >
1434+ E275 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1434+ E276 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1434+ E279             >                org     $-1                 // alter last byte of Name just above to set
1434+ E278 D4          >                db      {b $} | END_BIT     // msb as name end
1434+ E279             >
1434+ E279 6E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1434+ E27B             >Prev_Ptr        defl    Heap_Ptr
1434+ E27B             >
1434+ E27B             >mirror_Ptr      defl    $
1434+ E27B             >
1434+ E27B 86 68       >                dw      Dict_Ptr + 2        // xt
1434+ E27D             >Heap_Ptr        defl    $ - $E000           // save current HP
1434+ E27D             >
1434+ E27D             >Current_HP      defl  $ - $E000             // used to set HP once!
1434+ E27D             >
1434+ E27D             >//              ______________________________________________________________________
1434+ E27D             >//              Dictionary part
1434+ E27D             >
1434+ E27D             >                org     Dict_Ptr
1434+ 6884             >
1434+ 6884 7B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1434+ 6886             >
1434+ 6886             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1434+ 6886 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1434+ 6886 ~           >
1434+ 6886 ~           >
1434+ 6886             >                endif           ; ok        // for other definitions it "points" the correct handler
1434+ 6886             >                // Use of "; ok" to suppress "warning[fwdref]"
1434+ 6886             >
1434+ 6886             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1435+ 6886                          //  Behave  Zero_Equal
1436+ 6886 18 F0                        jr      Zero_Equal
1437+ 6888
1438+ 6888              //  ______________________________________________________________________
1439+ 6888              //
1440+ 6888              // 0<           n -- f
1441+ 6888              // true (non zero) if n is less than zero, false (0) elsewere
1442+ 6888                              New_Def ZLESS, "0<", is_code, is_normal
1442+ 6888             >
1442+ 6888             >Dict_Ptr        defl    $
1442+ 6888             >
1442+ 6888             >//              ______________________________________________________________________
1442+ 6888             >//              Heap part
1442+ 6888             >
1442+ 6888             >
1442+ 6888             >                org     (Heap_Ptr & $1FFF) + $E000
1442+ E27D             >
1442+ E27D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1442+ E27D             >Latest_Definition defl  Heap_Ptr
1442+ E27D             >
1442+ E27D             >                // dummy db directives used to calculate length of namec
1442+ E27D 30 3C       >                db      "0<"
1442+ E27F             >len_NFA         defl    $ - temp_NFA
1442+ E27F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1442+ E27D             >
1442+ E27D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1442+ E27E 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1442+ E280             >                org     $-1                 // alter last byte of Name just above to set
1442+ E27F BC          >                db      {b $} | END_BIT     // msb as name end
1442+ E280             >
1442+ E280 75 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1442+ E282             >Prev_Ptr        defl    Heap_Ptr
1442+ E282             >
1442+ E282             >mirror_Ptr      defl    $
1442+ E282             >
1442+ E282 8A 68       >                dw      Dict_Ptr + 2        // xt
1442+ E284             >Heap_Ptr        defl    $ - $E000           // save current HP
1442+ E284             >
1442+ E284             >Current_HP      defl  $ - $E000             // used to set HP once!
1442+ E284             >
1442+ E284             >//              ______________________________________________________________________
1442+ E284             >//              Dictionary part
1442+ E284             >
1442+ E284             >                org     Dict_Ptr
1442+ 6888             >
1442+ 6888 82 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1442+ 688A             >
1442+ 688A             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1442+ 688A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1442+ 688A ~           >
1442+ 688A ~           >
1442+ 688A             >                endif           ; ok        // for other definitions it "points" the correct handler
1442+ 688A             >                // Use of "; ok" to suppress "warning[fwdref]"
1442+ 688A             >
1442+ 688A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1443+ 688A E1                           pop     hl
1444+ 688B 29                           add     hl, hl
1445+ 688C ED 62                        sbc     hl, hl
1446+ 688E                              psh1
1446+ 688E E5          >                push    hl
1446+ 688F DD E9       >                jp      (ix)
1447+ 6891
1448+ 6891              //  ______________________________________________________________________
1449+ 6891              //
1450+ 6891              // 0>           n -- f
1451+ 6891              // true (non zero) if n is less than zero, false (0) elsewere
1452+ 6891                              New_Def ZGREATER, "0>", is_code, is_normal
1452+ 6891             >
1452+ 6891             >Dict_Ptr        defl    $
1452+ 6891             >
1452+ 6891             >//              ______________________________________________________________________
1452+ 6891             >//              Heap part
1452+ 6891             >
1452+ 6891             >
1452+ 6891             >                org     (Heap_Ptr & $1FFF) + $E000
1452+ E284             >
1452+ E284             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1452+ E284             >Latest_Definition defl  Heap_Ptr
1452+ E284             >
1452+ E284             >                // dummy db directives used to calculate length of namec
1452+ E284 30 3E       >                db      "0>"
1452+ E286             >len_NFA         defl    $ - temp_NFA
1452+ E286             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1452+ E284             >
1452+ E284 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1452+ E285 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1452+ E287             >                org     $-1                 // alter last byte of Name just above to set
1452+ E286 BE          >                db      {b $} | END_BIT     // msb as name end
1452+ E287             >
1452+ E287 7D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1452+ E289             >Prev_Ptr        defl    Heap_Ptr
1452+ E289             >
1452+ E289             >mirror_Ptr      defl    $
1452+ E289             >
1452+ E289 93 68       >                dw      Dict_Ptr + 2        // xt
1452+ E28B             >Heap_Ptr        defl    $ - $E000           // save current HP
1452+ E28B             >
1452+ E28B             >Current_HP      defl  $ - $E000             // used to set HP once!
1452+ E28B             >
1452+ E28B             >//              ______________________________________________________________________
1452+ E28B             >//              Dictionary part
1452+ E28B             >
1452+ E28B             >                org     Dict_Ptr
1452+ 6891             >
1452+ 6891 89 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1452+ 6893             >
1452+ 6893             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1452+ 6893 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1452+ 6893 ~           >
1452+ 6893 ~           >
1452+ 6893             >                endif           ; ok        // for other definitions it "points" the correct handler
1452+ 6893             >                // Use of "; ok" to suppress "warning[fwdref]"
1452+ 6893             >
1452+ 6893             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1453+ 6893 E1                           pop     hl
1454+ 6894 7D                           ld      a, l
1455+ 6895 B4                           or      h
1456+ 6896 29                           add     hl, hl
1457+ 6897 21 00 00                     ld      hl, FALSE_FLAG
1458+ 689A 38 04                        jr      c, ZGreater_Skip
1459+ 689C A7                               and     a
1460+ 689D 28 01                            jr      z, ZGreater_Skip
1461+ 689F 2B                                   dec     hl
1462+ 68A0              ZGreater_Skip:
1463+ 68A0                              psh1
1463+ 68A0 E5          >                push    hl
1463+ 68A1 DD E9       >                jp      (ix)
1464+ 68A3
1465+ 68A3              //  ______________________________________________________________________
1466+ 68A3              //
1467+ 68A3              // +            n1 n2 -- n3
1468+ 68A3              // returns the unsigned sum of two top values
1469+ 68A3                              New_Def PLUS, "+", is_code, is_normal
1469+ 68A3             >
1469+ 68A3             >Dict_Ptr        defl    $
1469+ 68A3             >
1469+ 68A3             >//              ______________________________________________________________________
1469+ 68A3             >//              Heap part
1469+ 68A3             >
1469+ 68A3             >
1469+ 68A3             >                org     (Heap_Ptr & $1FFF) + $E000
1469+ E28B             >
1469+ E28B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1469+ E28B             >Latest_Definition defl  Heap_Ptr
1469+ E28B             >
1469+ E28B             >                // dummy db directives used to calculate length of namec
1469+ E28B 2B          >                db      "+"
1469+ E28C             >len_NFA         defl    $ - temp_NFA
1469+ E28C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1469+ E28B             >
1469+ E28B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1469+ E28C 2B          >                db      "+"               // name string in 7-bit ascii, but
1469+ E28D             >                org     $-1                 // alter last byte of Name just above to set
1469+ E28C AB          >                db      {b $} | END_BIT     // msb as name end
1469+ E28D             >
1469+ E28D 84 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1469+ E28F             >Prev_Ptr        defl    Heap_Ptr
1469+ E28F             >
1469+ E28F             >mirror_Ptr      defl    $
1469+ E28F             >
1469+ E28F A5 68       >                dw      Dict_Ptr + 2        // xt
1469+ E291             >Heap_Ptr        defl    $ - $E000           // save current HP
1469+ E291             >
1469+ E291             >Current_HP      defl  $ - $E000             // used to set HP once!
1469+ E291             >
1469+ E291             >//              ______________________________________________________________________
1469+ E291             >//              Dictionary part
1469+ E291             >
1469+ E291             >                org     Dict_Ptr
1469+ 68A3             >
1469+ 68A3 8F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1469+ 68A5             >
1469+ 68A5             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1469+ 68A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1469+ 68A5 ~           >
1469+ 68A5 ~           >
1469+ 68A5             >                endif           ; ok        // for other definitions it "points" the correct handler
1469+ 68A5             >                // Use of "; ok" to suppress "warning[fwdref]"
1469+ 68A5             >
1469+ 68A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1470+ 68A5 D9                           exx
1471+ 68A6 E1                           pop     hl
1472+ 68A7 D1                           pop     de
1473+ 68A8 19                           add     hl, de
1474+ 68A9 E5                           push    hl
1475+ 68AA D9                           exx
1476+ 68AB                              next
1476+ 68AB DD E9       >                jp      (ix)
1477+ 68AD
1478+ 68AD
1479+ 68AD              //  ______________________________________________________________________
1480+ 68AD              //
1481+ 68AD              // d+           d1 d2 -- d3
1482+ 68AD              // returns the unsigned sum of two top double-numbers
1483+ 68AD              //      d2  d1
1484+ 68AD              //      h l h l
1485+ 68AD              // SP   LHEDLHED
1486+ 68AD              // SP  +01234567
1487+ 68AD                              New_Def DPLUS, "D+", is_code, is_normal
1487+ 68AD             >
1487+ 68AD             >Dict_Ptr        defl    $
1487+ 68AD             >
1487+ 68AD             >//              ______________________________________________________________________
1487+ 68AD             >//              Heap part
1487+ 68AD             >
1487+ 68AD             >
1487+ 68AD             >                org     (Heap_Ptr & $1FFF) + $E000
1487+ E291             >
1487+ E291             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1487+ E291             >Latest_Definition defl  Heap_Ptr
1487+ E291             >
1487+ E291             >                // dummy db directives used to calculate length of namec
1487+ E291 44 2B       >                db      "D+"
1487+ E293             >len_NFA         defl    $ - temp_NFA
1487+ E293             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1487+ E291             >
1487+ E291 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1487+ E292 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1487+ E294             >                org     $-1                 // alter last byte of Name just above to set
1487+ E293 AB          >                db      {b $} | END_BIT     // msb as name end
1487+ E294             >
1487+ E294 8B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1487+ E296             >Prev_Ptr        defl    Heap_Ptr
1487+ E296             >
1487+ E296             >mirror_Ptr      defl    $
1487+ E296             >
1487+ E296 AF 68       >                dw      Dict_Ptr + 2        // xt
1487+ E298             >Heap_Ptr        defl    $ - $E000           // save current HP
1487+ E298             >
1487+ E298             >Current_HP      defl  $ - $E000             // used to set HP once!
1487+ E298             >
1487+ E298             >//              ______________________________________________________________________
1487+ E298             >//              Dictionary part
1487+ E298             >
1487+ E298             >                org     Dict_Ptr
1487+ 68AD             >
1487+ 68AD 96 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1487+ 68AF             >
1487+ 68AF             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1487+ 68AF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1487+ 68AF ~           >
1487+ 68AF ~           >
1487+ 68AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1487+ 68AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1487+ 68AF             >
1487+ 68AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1488+ 68AF
1489+ 68AF D9                           exx
1490+ 68B0 C1                           pop     bc                  // bc := d2.H
1491+ 68B1 D1                           pop     de                  // hl := d2.L
1492+ 68B2 E1                           pop     hl                  // d1.H
1493+ 68B3 E3                           ex      (sp), hl            // d1.L
1494+ 68B4 19                           add     hl, de              // hl := d2.L + d1.L
1495+ 68B5 E3                           ex      (sp), hl            // d1.H
1496+ 68B6 ED 4A                        adc     hl, bc              // d1.H + d2.H
1497+ 68B8 E5                           push    hl
1498+ 68B9 D9                           exx
1499+ 68BA                              next
1499+ 68BA DD E9       >                jp      (ix)
1500+ 68BC
1501+ 68BC              //  ______________________________________________________________________
1502+ 68BC              //
1503+ 68BC              // 1+           n1 -- n2
1504+ 68BC              // increment by 1 top of stack
1505+ 68BC                              New_Def ONE_PLUS, "1+", is_code, is_normal
1505+ 68BC             >
1505+ 68BC             >Dict_Ptr        defl    $
1505+ 68BC             >
1505+ 68BC             >//              ______________________________________________________________________
1505+ 68BC             >//              Heap part
1505+ 68BC             >
1505+ 68BC             >
1505+ 68BC             >                org     (Heap_Ptr & $1FFF) + $E000
1505+ E298             >
1505+ E298             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1505+ E298             >Latest_Definition defl  Heap_Ptr
1505+ E298             >
1505+ E298             >                // dummy db directives used to calculate length of namec
1505+ E298 31 2B       >                db      "1+"
1505+ E29A             >len_NFA         defl    $ - temp_NFA
1505+ E29A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1505+ E298             >
1505+ E298 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1505+ E299 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1505+ E29B             >                org     $-1                 // alter last byte of Name just above to set
1505+ E29A AB          >                db      {b $} | END_BIT     // msb as name end
1505+ E29B             >
1505+ E29B 91 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1505+ E29D             >Prev_Ptr        defl    Heap_Ptr
1505+ E29D             >
1505+ E29D             >mirror_Ptr      defl    $
1505+ E29D             >
1505+ E29D BE 68       >                dw      Dict_Ptr + 2        // xt
1505+ E29F             >Heap_Ptr        defl    $ - $E000           // save current HP
1505+ E29F             >
1505+ E29F             >Current_HP      defl  $ - $E000             // used to set HP once!
1505+ E29F             >
1505+ E29F             >//              ______________________________________________________________________
1505+ E29F             >//              Dictionary part
1505+ E29F             >
1505+ E29F             >                org     Dict_Ptr
1505+ 68BC             >
1505+ 68BC 9D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1505+ 68BE             >
1505+ 68BE             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1505+ 68BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1505+ 68BE ~           >
1505+ 68BE ~           >
1505+ 68BE             >                endif           ; ok        // for other definitions it "points" the correct handler
1505+ 68BE             >                // Use of "; ok" to suppress "warning[fwdref]"
1505+ 68BE             >
1505+ 68BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1506+ 68BE E1                           pop     hl
1507+ 68BF 23                           inc     hl
1508+ 68C0
1509+ 68C0                              psh1
1509+ 68C0 E5          >                push    hl
1509+ 68C1 DD E9       >                jp      (ix)
1510+ 68C3
1511+ 68C3              //  ______________________________________________________________________
1512+ 68C3              //
1513+ 68C3              // 1-           n1 -- n2
1514+ 68C3              // decrement by 1 top of stack
1515+ 68C3                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1515+ 68C3             >
1515+ 68C3             >Dict_Ptr        defl    $
1515+ 68C3             >
1515+ 68C3             >//              ______________________________________________________________________
1515+ 68C3             >//              Heap part
1515+ 68C3             >
1515+ 68C3             >
1515+ 68C3             >                org     (Heap_Ptr & $1FFF) + $E000
1515+ E29F             >
1515+ E29F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1515+ E29F             >Latest_Definition defl  Heap_Ptr
1515+ E29F             >
1515+ E29F             >                // dummy db directives used to calculate length of namec
1515+ E29F 31 2D       >                db      "1-"
1515+ E2A1             >len_NFA         defl    $ - temp_NFA
1515+ E2A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1515+ E29F             >
1515+ E29F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1515+ E2A0 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1515+ E2A2             >                org     $-1                 // alter last byte of Name just above to set
1515+ E2A1 AD          >                db      {b $} | END_BIT     // msb as name end
1515+ E2A2             >
1515+ E2A2 98 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1515+ E2A4             >Prev_Ptr        defl    Heap_Ptr
1515+ E2A4             >
1515+ E2A4             >mirror_Ptr      defl    $
1515+ E2A4             >
1515+ E2A4 C5 68       >                dw      Dict_Ptr + 2        // xt
1515+ E2A6             >Heap_Ptr        defl    $ - $E000           // save current HP
1515+ E2A6             >
1515+ E2A6             >Current_HP      defl  $ - $E000             // used to set HP once!
1515+ E2A6             >
1515+ E2A6             >//              ______________________________________________________________________
1515+ E2A6             >//              Dictionary part
1515+ E2A6             >
1515+ E2A6             >                org     Dict_Ptr
1515+ 68C3             >
1515+ 68C3 A4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1515+ 68C5             >
1515+ 68C5             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1515+ 68C5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1515+ 68C5 ~           >
1515+ 68C5 ~           >
1515+ 68C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1515+ 68C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1515+ 68C5             >
1515+ 68C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1516+ 68C5 E1                           pop     hl
1517+ 68C6 2B                           dec     hl
1518+ 68C7
1519+ 68C7                              psh1
1519+ 68C7 E5          >                push    hl
1519+ 68C8 DD E9       >                jp      (ix)
1520+ 68CA
1521+ 68CA              //  ______________________________________________________________________
1522+ 68CA              //
1523+ 68CA              // 2+           n1 -- n2
1524+ 68CA              // increment by 2 top of stack
1525+ 68CA                              New_Def TWO_PLUS, "2+", is_code, is_normal
1525+ 68CA             >
1525+ 68CA             >Dict_Ptr        defl    $
1525+ 68CA             >
1525+ 68CA             >//              ______________________________________________________________________
1525+ 68CA             >//              Heap part
1525+ 68CA             >
1525+ 68CA             >
1525+ 68CA             >                org     (Heap_Ptr & $1FFF) + $E000
1525+ E2A6             >
1525+ E2A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1525+ E2A6             >Latest_Definition defl  Heap_Ptr
1525+ E2A6             >
1525+ E2A6             >                // dummy db directives used to calculate length of namec
1525+ E2A6 32 2B       >                db      "2+"
1525+ E2A8             >len_NFA         defl    $ - temp_NFA
1525+ E2A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1525+ E2A6             >
1525+ E2A6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1525+ E2A7 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1525+ E2A9             >                org     $-1                 // alter last byte of Name just above to set
1525+ E2A8 AB          >                db      {b $} | END_BIT     // msb as name end
1525+ E2A9             >
1525+ E2A9 9F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1525+ E2AB             >Prev_Ptr        defl    Heap_Ptr
1525+ E2AB             >
1525+ E2AB             >mirror_Ptr      defl    $
1525+ E2AB             >
1525+ E2AB CC 68       >                dw      Dict_Ptr + 2        // xt
1525+ E2AD             >Heap_Ptr        defl    $ - $E000           // save current HP
1525+ E2AD             >
1525+ E2AD             >Current_HP      defl  $ - $E000             // used to set HP once!
1525+ E2AD             >
1525+ E2AD             >//              ______________________________________________________________________
1525+ E2AD             >//              Dictionary part
1525+ E2AD             >
1525+ E2AD             >                org     Dict_Ptr
1525+ 68CA             >
1525+ 68CA AB 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1525+ 68CC             >
1525+ 68CC             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1525+ 68CC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1525+ 68CC ~           >
1525+ 68CC ~           >
1525+ 68CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1525+ 68CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1525+ 68CC             >
1525+ 68CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1526+ 68CC              Two_Plus:
1527+ 68CC E1                           pop     hl
1528+ 68CD 23                           inc     hl
1529+ 68CE 23                           inc     hl
1530+ 68CF
1531+ 68CF                              psh1
1531+ 68CF E5          >                push    hl
1531+ 68D0 DD E9       >                jp      (ix)
1532+ 68D2
1533+ 68D2              //  ______________________________________________________________________
1534+ 68D2              //
1535+ 68D2              // cell+        a1 -- a2
1536+ 68D2              // increment by 2 top of stack
1537+ 68D2                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1537+ 68D2             >
1537+ 68D2             >Dict_Ptr        defl    $
1537+ 68D2             >
1537+ 68D2             >//              ______________________________________________________________________
1537+ 68D2             >//              Heap part
1537+ 68D2             >
1537+ 68D2             >
1537+ 68D2             >                org     (Heap_Ptr & $1FFF) + $E000
1537+ E2AD             >
1537+ E2AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1537+ E2AD             >Latest_Definition defl  Heap_Ptr
1537+ E2AD             >
1537+ E2AD             >                // dummy db directives used to calculate length of namec
1537+ E2AD 43 45 4C 4C >                db      "CELL+"
1537+ E2B1 2B          >
1537+ E2B2             >len_NFA         defl    $ - temp_NFA
1537+ E2B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1537+ E2AD             >
1537+ E2AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1537+ E2AE 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1537+ E2B2 2B          >
1537+ E2B3             >                org     $-1                 // alter last byte of Name just above to set
1537+ E2B2 AB          >                db      {b $} | END_BIT     // msb as name end
1537+ E2B3             >
1537+ E2B3 A6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1537+ E2B5             >Prev_Ptr        defl    Heap_Ptr
1537+ E2B5             >
1537+ E2B5             >mirror_Ptr      defl    $
1537+ E2B5             >
1537+ E2B5 D4 68       >                dw      Dict_Ptr + 2        // xt
1537+ E2B7             >Heap_Ptr        defl    $ - $E000           // save current HP
1537+ E2B7             >
1537+ E2B7             >Current_HP      defl  $ - $E000             // used to set HP once!
1537+ E2B7             >
1537+ E2B7             >//              ______________________________________________________________________
1537+ E2B7             >//              Dictionary part
1537+ E2B7             >
1537+ E2B7             >                org     Dict_Ptr
1537+ 68D2             >
1537+ 68D2 B5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1537+ 68D4             >
1537+ 68D4             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1537+ 68D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1537+ 68D4 ~           >
1537+ 68D4 ~           >
1537+ 68D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1537+ 68D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1537+ 68D4             >
1537+ 68D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1538+ 68D4 18 F6                        jr      Two_Plus
1539+ 68D6
1540+ 68D6              //  ______________________________________________________________________
1541+ 68D6              //
1542+ 68D6              // align        a1 -- a2
1543+ 68D6              // align memory : not used
1544+ 68D6              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1545+ 68D6              //            next
1546+ 68D6
1547+ 68D6              //  ______________________________________________________________________
1548+ 68D6              //
1549+ 68D6              // cell-        a1 -- a2
1550+ 68D6              // decrement by 2 top of stack
1551+ 68D6                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1551+ 68D6             >
1551+ 68D6             >Dict_Ptr        defl    $
1551+ 68D6             >
1551+ 68D6             >//              ______________________________________________________________________
1551+ 68D6             >//              Heap part
1551+ 68D6             >
1551+ 68D6             >
1551+ 68D6             >                org     (Heap_Ptr & $1FFF) + $E000
1551+ E2B7             >
1551+ E2B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1551+ E2B7             >Latest_Definition defl  Heap_Ptr
1551+ E2B7             >
1551+ E2B7             >                // dummy db directives used to calculate length of namec
1551+ E2B7 43 45 4C 4C >                db      "CELL-"
1551+ E2BB 2D          >
1551+ E2BC             >len_NFA         defl    $ - temp_NFA
1551+ E2BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1551+ E2B7             >
1551+ E2B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1551+ E2B8 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1551+ E2BC 2D          >
1551+ E2BD             >                org     $-1                 // alter last byte of Name just above to set
1551+ E2BC AD          >                db      {b $} | END_BIT     // msb as name end
1551+ E2BD             >
1551+ E2BD AD 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1551+ E2BF             >Prev_Ptr        defl    Heap_Ptr
1551+ E2BF             >
1551+ E2BF             >mirror_Ptr      defl    $
1551+ E2BF             >
1551+ E2BF D8 68       >                dw      Dict_Ptr + 2        // xt
1551+ E2C1             >Heap_Ptr        defl    $ - $E000           // save current HP
1551+ E2C1             >
1551+ E2C1             >Current_HP      defl  $ - $E000             // used to set HP once!
1551+ E2C1             >
1551+ E2C1             >//              ______________________________________________________________________
1551+ E2C1             >//              Dictionary part
1551+ E2C1             >
1551+ E2C1             >                org     Dict_Ptr
1551+ 68D6             >
1551+ 68D6 BF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1551+ 68D8             >
1551+ 68D8             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1551+ 68D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1551+ 68D8 ~           >
1551+ 68D8 ~           >
1551+ 68D8             >                endif           ; ok        // for other definitions it "points" the correct handler
1551+ 68D8             >                // Use of "; ok" to suppress "warning[fwdref]"
1551+ 68D8             >
1551+ 68D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1552+ 68D8              CellMinus:
1553+ 68D8 E1                           pop     hl
1554+ 68D9 2B                           dec     hl
1555+ 68DA 2B                           dec     hl
1556+ 68DB
1557+ 68DB                              psh1
1557+ 68DB E5          >                push    hl
1557+ 68DC DD E9       >                jp      (ix)
1558+ 68DE
1559+ 68DE              //  ______________________________________________________________________
1560+ 68DE              //
1561+ 68DE              // 2-           a1 -- a2
1562+ 68DE              // decrement by 2 top of stack
1563+ 68DE                              New_Def TWO_MINUS, "2-", is_code, is_normal
1563+ 68DE             >
1563+ 68DE             >Dict_Ptr        defl    $
1563+ 68DE             >
1563+ 68DE             >//              ______________________________________________________________________
1563+ 68DE             >//              Heap part
1563+ 68DE             >
1563+ 68DE             >
1563+ 68DE             >                org     (Heap_Ptr & $1FFF) + $E000
1563+ E2C1             >
1563+ E2C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ E2C1             >Latest_Definition defl  Heap_Ptr
1563+ E2C1             >
1563+ E2C1             >                // dummy db directives used to calculate length of namec
1563+ E2C1 32 2D       >                db      "2-"
1563+ E2C3             >len_NFA         defl    $ - temp_NFA
1563+ E2C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ E2C1             >
1563+ E2C1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ E2C2 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1563+ E2C4             >                org     $-1                 // alter last byte of Name just above to set
1563+ E2C3 AD          >                db      {b $} | END_BIT     // msb as name end
1563+ E2C4             >
1563+ E2C4 B7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1563+ E2C6             >Prev_Ptr        defl    Heap_Ptr
1563+ E2C6             >
1563+ E2C6             >mirror_Ptr      defl    $
1563+ E2C6             >
1563+ E2C6 E0 68       >                dw      Dict_Ptr + 2        // xt
1563+ E2C8             >Heap_Ptr        defl    $ - $E000           // save current HP
1563+ E2C8             >
1563+ E2C8             >Current_HP      defl  $ - $E000             // used to set HP once!
1563+ E2C8             >
1563+ E2C8             >//              ______________________________________________________________________
1563+ E2C8             >//              Dictionary part
1563+ E2C8             >
1563+ E2C8             >                org     Dict_Ptr
1563+ 68DE             >
1563+ 68DE C6 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1563+ 68E0             >
1563+ 68E0             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 68E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1563+ 68E0 ~           >
1563+ 68E0 ~           >
1563+ 68E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 68E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 68E0             >
1563+ 68E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 68E0 C3 D8 68                     jp      CellMinus
1565+ 68E3
1566+ 68E3              //  ______________________________________________________________________
1567+ 68E3              //
1568+ 68E3              // negate       n1 -- n2
1569+ 68E3              // change the sign of number
1570+ 68E3                              New_Def MINUS, "NEGATE", is_code, is_normal
1570+ 68E3             >
1570+ 68E3             >Dict_Ptr        defl    $
1570+ 68E3             >
1570+ 68E3             >//              ______________________________________________________________________
1570+ 68E3             >//              Heap part
1570+ 68E3             >
1570+ 68E3             >
1570+ 68E3             >                org     (Heap_Ptr & $1FFF) + $E000
1570+ E2C8             >
1570+ E2C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1570+ E2C8             >Latest_Definition defl  Heap_Ptr
1570+ E2C8             >
1570+ E2C8             >                // dummy db directives used to calculate length of namec
1570+ E2C8 4E 45 47 41 >                db      "NEGATE"
1570+ E2CC 54 45       >
1570+ E2CE             >len_NFA         defl    $ - temp_NFA
1570+ E2CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1570+ E2C8             >
1570+ E2C8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1570+ E2C9 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1570+ E2CD 54 45       >
1570+ E2CF             >                org     $-1                 // alter last byte of Name just above to set
1570+ E2CE C5          >                db      {b $} | END_BIT     // msb as name end
1570+ E2CF             >
1570+ E2CF C1 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1570+ E2D1             >Prev_Ptr        defl    Heap_Ptr
1570+ E2D1             >
1570+ E2D1             >mirror_Ptr      defl    $
1570+ E2D1             >
1570+ E2D1 E5 68       >                dw      Dict_Ptr + 2        // xt
1570+ E2D3             >Heap_Ptr        defl    $ - $E000           // save current HP
1570+ E2D3             >
1570+ E2D3             >Current_HP      defl  $ - $E000             // used to set HP once!
1570+ E2D3             >
1570+ E2D3             >//              ______________________________________________________________________
1570+ E2D3             >//              Dictionary part
1570+ E2D3             >
1570+ E2D3             >                org     Dict_Ptr
1570+ 68E3             >
1570+ 68E3 D1 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1570+ 68E5             >
1570+ 68E5             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1570+ 68E5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1570+ 68E5 ~           >
1570+ 68E5 ~           >
1570+ 68E5             >                endif           ; ok        // for other definitions it "points" the correct handler
1570+ 68E5             >                // Use of "; ok" to suppress "warning[fwdref]"
1570+ 68E5             >
1570+ 68E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1571+ 68E5 D9                           exx
1572+ 68E6 21 00 00                     ld      hl, 0               // subtract from 0
1573+ 68E9 D1                           pop     de
1574+ 68EA B7                           or      a
1575+ 68EB ED 52                        sbc     hl, de
1576+ 68ED E5                           push    hl
1577+ 68EE D9                           exx
1578+ 68EF                              next
1578+ 68EF DD E9       >                jp      (ix)
1579+ 68F1
1580+ 68F1              //  ______________________________________________________________________
1581+ 68F1              //
1582+ 68F1              // dnegate      d1 -- d2
1583+ 68F1              // change the sign of a double number
1584+ 68F1                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1584+ 68F1             >
1584+ 68F1             >Dict_Ptr        defl    $
1584+ 68F1             >
1584+ 68F1             >//              ______________________________________________________________________
1584+ 68F1             >//              Heap part
1584+ 68F1             >
1584+ 68F1             >
1584+ 68F1             >                org     (Heap_Ptr & $1FFF) + $E000
1584+ E2D3             >
1584+ E2D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1584+ E2D3             >Latest_Definition defl  Heap_Ptr
1584+ E2D3             >
1584+ E2D3             >                // dummy db directives used to calculate length of namec
1584+ E2D3 44 4E 45 47 >                db      "DNEGATE"
1584+ E2D7 41 54 45    >
1584+ E2DA             >len_NFA         defl    $ - temp_NFA
1584+ E2DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1584+ E2D3             >
1584+ E2D3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1584+ E2D4 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1584+ E2D8 41 54 45    >
1584+ E2DB             >                org     $-1                 // alter last byte of Name just above to set
1584+ E2DA C5          >                db      {b $} | END_BIT     // msb as name end
1584+ E2DB             >
1584+ E2DB C8 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1584+ E2DD             >Prev_Ptr        defl    Heap_Ptr
1584+ E2DD             >
1584+ E2DD             >mirror_Ptr      defl    $
1584+ E2DD             >
1584+ E2DD F3 68       >                dw      Dict_Ptr + 2        // xt
1584+ E2DF             >Heap_Ptr        defl    $ - $E000           // save current HP
1584+ E2DF             >
1584+ E2DF             >Current_HP      defl  $ - $E000             // used to set HP once!
1584+ E2DF             >
1584+ E2DF             >//              ______________________________________________________________________
1584+ E2DF             >//              Dictionary part
1584+ E2DF             >
1584+ E2DF             >                org     Dict_Ptr
1584+ 68F1             >
1584+ 68F1 DD 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1584+ 68F3             >
1584+ 68F3             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1584+ 68F3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1584+ 68F3 ~           >
1584+ 68F3 ~           >
1584+ 68F3             >                endif           ; ok        // for other definitions it "points" the correct handler
1584+ 68F3             >                // Use of "; ok" to suppress "warning[fwdref]"
1584+ 68F3             >
1584+ 68F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1585+ 68F3 D9                           exx
1586+ 68F4 C1                           pop     bc                  // d1.H
1587+ 68F5 D1                           pop     de                  // d1.L
1588+ 68F6 AF                           xor     a
1589+ 68F7 67                           ld      h, a
1590+ 68F8 6F                           ld      l, a
1591+ 68F9 ED 52                        sbc     hl, de              // subtact from zero
1592+ 68FB E5                           push    hl                  // > d2-L
1593+ 68FC 67                           ld      h, a
1594+ 68FD 6F                           ld      l, a
1595+ 68FE ED 42                        sbc     hl, bc              // subtract from zero with carry
1596+ 6900                                                          // > d2-H
1597+ 6900 E5                           push    hl
1598+ 6901 D9                           exx
1599+ 6902                              next
1599+ 6902 DD E9       >                jp      (ix)
1600+ 6904
1601+ 6904              //  ______________________________________________________________________
1602+ 6904              //
1603+ 6904              // over         n1 n2 -- n1 n2 n1
1604+ 6904              // copy the second value of stack and put it on top.
1605+ 6904                              New_Def OVER, "OVER", is_code, is_normal
1605+ 6904             >
1605+ 6904             >Dict_Ptr        defl    $
1605+ 6904             >
1605+ 6904             >//              ______________________________________________________________________
1605+ 6904             >//              Heap part
1605+ 6904             >
1605+ 6904             >
1605+ 6904             >                org     (Heap_Ptr & $1FFF) + $E000
1605+ E2DF             >
1605+ E2DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1605+ E2DF             >Latest_Definition defl  Heap_Ptr
1605+ E2DF             >
1605+ E2DF             >                // dummy db directives used to calculate length of namec
1605+ E2DF 4F 56 45 52 >                db      "OVER"
1605+ E2E3             >len_NFA         defl    $ - temp_NFA
1605+ E2E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1605+ E2DF             >
1605+ E2DF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1605+ E2E0 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1605+ E2E4             >                org     $-1                 // alter last byte of Name just above to set
1605+ E2E3 D2          >                db      {b $} | END_BIT     // msb as name end
1605+ E2E4             >
1605+ E2E4 D3 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1605+ E2E6             >Prev_Ptr        defl    Heap_Ptr
1605+ E2E6             >
1605+ E2E6             >mirror_Ptr      defl    $
1605+ E2E6             >
1605+ E2E6 06 69       >                dw      Dict_Ptr + 2        // xt
1605+ E2E8             >Heap_Ptr        defl    $ - $E000           // save current HP
1605+ E2E8             >
1605+ E2E8             >Current_HP      defl  $ - $E000             // used to set HP once!
1605+ E2E8             >
1605+ E2E8             >//              ______________________________________________________________________
1605+ E2E8             >//              Dictionary part
1605+ E2E8             >
1605+ E2E8             >                org     Dict_Ptr
1605+ 6904             >
1605+ 6904 E6 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1605+ 6906             >
1605+ 6906             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1605+ 6906 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1605+ 6906 ~           >
1605+ 6906 ~           >
1605+ 6906             >                endif           ; ok        // for other definitions it "points" the correct handler
1605+ 6906             >                // Use of "; ok" to suppress "warning[fwdref]"
1605+ 6906             >
1605+ 6906             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1606+ 6906                              // exx     // we can use af instead OPTIMIZATION possible
1607+ 6906 F1                           pop     af                  //   n2
1608+ 6907 E1                           pop     hl                  // < n1
1609+ 6908 E5                           push    hl                  // > n1
1610+ 6909 F5                           push    af                  // > n2
1611+ 690A E5                           push    hl                  // > n1
1612+ 690B                              // exx
1613+ 690B                              next
1613+ 690B DD E9       >                jp      (ix)
1614+ 690D
1615+ 690D              //  ______________________________________________________________________
1616+ 690D              //
1617+ 690D              // drop         n1 --
1618+ 690D              // drops the top of stack
1619+ 690D                              New_Def DROP, "DROP", is_code, is_normal
1619+ 690D             >
1619+ 690D             >Dict_Ptr        defl    $
1619+ 690D             >
1619+ 690D             >//              ______________________________________________________________________
1619+ 690D             >//              Heap part
1619+ 690D             >
1619+ 690D             >
1619+ 690D             >                org     (Heap_Ptr & $1FFF) + $E000
1619+ E2E8             >
1619+ E2E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1619+ E2E8             >Latest_Definition defl  Heap_Ptr
1619+ E2E8             >
1619+ E2E8             >                // dummy db directives used to calculate length of namec
1619+ E2E8 44 52 4F 50 >                db      "DROP"
1619+ E2EC             >len_NFA         defl    $ - temp_NFA
1619+ E2EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1619+ E2E8             >
1619+ E2E8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1619+ E2E9 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1619+ E2ED             >                org     $-1                 // alter last byte of Name just above to set
1619+ E2EC D0          >                db      {b $} | END_BIT     // msb as name end
1619+ E2ED             >
1619+ E2ED DF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1619+ E2EF             >Prev_Ptr        defl    Heap_Ptr
1619+ E2EF             >
1619+ E2EF             >mirror_Ptr      defl    $
1619+ E2EF             >
1619+ E2EF 0F 69       >                dw      Dict_Ptr + 2        // xt
1619+ E2F1             >Heap_Ptr        defl    $ - $E000           // save current HP
1619+ E2F1             >
1619+ E2F1             >Current_HP      defl  $ - $E000             // used to set HP once!
1619+ E2F1             >
1619+ E2F1             >//              ______________________________________________________________________
1619+ E2F1             >//              Dictionary part
1619+ E2F1             >
1619+ E2F1             >                org     Dict_Ptr
1619+ 690D             >
1619+ 690D EF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1619+ 690F             >
1619+ 690F             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1619+ 690F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1619+ 690F ~           >
1619+ 690F ~           >
1619+ 690F             >                endif           ; ok        // for other definitions it "points" the correct handler
1619+ 690F             >                // Use of "; ok" to suppress "warning[fwdref]"
1619+ 690F             >
1619+ 690F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1620+ 690F E1                           pop     hl                  // < n1 and discard previous TOS
1621+ 6910                              next
1621+ 6910 DD E9       >                jp      (ix)
1622+ 6912
1623+ 6912              //  ______________________________________________________________________
1624+ 6912              //
1625+ 6912              // nip          n1 n2 -- n2
1626+ 6912              // drops the second elemento on the stack
1627+ 6912                              New_Def NIP, "NIP", is_code, is_normal
1627+ 6912             >
1627+ 6912             >Dict_Ptr        defl    $
1627+ 6912             >
1627+ 6912             >//              ______________________________________________________________________
1627+ 6912             >//              Heap part
1627+ 6912             >
1627+ 6912             >
1627+ 6912             >                org     (Heap_Ptr & $1FFF) + $E000
1627+ E2F1             >
1627+ E2F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1627+ E2F1             >Latest_Definition defl  Heap_Ptr
1627+ E2F1             >
1627+ E2F1             >                // dummy db directives used to calculate length of namec
1627+ E2F1 4E 49 50    >                db      "NIP"
1627+ E2F4             >len_NFA         defl    $ - temp_NFA
1627+ E2F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1627+ E2F1             >
1627+ E2F1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1627+ E2F2 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1627+ E2F5             >                org     $-1                 // alter last byte of Name just above to set
1627+ E2F4 D0          >                db      {b $} | END_BIT     // msb as name end
1627+ E2F5             >
1627+ E2F5 E8 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1627+ E2F7             >Prev_Ptr        defl    Heap_Ptr
1627+ E2F7             >
1627+ E2F7             >mirror_Ptr      defl    $
1627+ E2F7             >
1627+ E2F7 14 69       >                dw      Dict_Ptr + 2        // xt
1627+ E2F9             >Heap_Ptr        defl    $ - $E000           // save current HP
1627+ E2F9             >
1627+ E2F9             >Current_HP      defl  $ - $E000             // used to set HP once!
1627+ E2F9             >
1627+ E2F9             >//              ______________________________________________________________________
1627+ E2F9             >//              Dictionary part
1627+ E2F9             >
1627+ E2F9             >                org     Dict_Ptr
1627+ 6912             >
1627+ 6912 F7 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1627+ 6914             >
1627+ 6914             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1627+ 6914 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1627+ 6914 ~           >
1627+ 6914 ~           >
1627+ 6914             >                endif           ; ok        // for other definitions it "points" the correct handler
1627+ 6914             >                // Use of "; ok" to suppress "warning[fwdref]"
1627+ 6914             >
1627+ 6914             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1628+ 6914
1629+ 6914 E1                           pop     hl                  // < n1 discarded
1630+ 6915 E3                           ex      (sp), hl
1631+ 6916                              next
1631+ 6916 DD E9       >                jp      (ix)
1632+ 6918
1633+ 6918              //  ______________________________________________________________________
1634+ 6918              //
1635+ 6918              // tuck         n1 n2 -- n2 n1 n2
1636+ 6918              // copy the top element after the second.
1637+ 6918                              New_Def TUCK, "TUCK", is_code, is_normal
1637+ 6918             >
1637+ 6918             >Dict_Ptr        defl    $
1637+ 6918             >
1637+ 6918             >//              ______________________________________________________________________
1637+ 6918             >//              Heap part
1637+ 6918             >
1637+ 6918             >
1637+ 6918             >                org     (Heap_Ptr & $1FFF) + $E000
1637+ E2F9             >
1637+ E2F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1637+ E2F9             >Latest_Definition defl  Heap_Ptr
1637+ E2F9             >
1637+ E2F9             >                // dummy db directives used to calculate length of namec
1637+ E2F9 54 55 43 4B >                db      "TUCK"
1637+ E2FD             >len_NFA         defl    $ - temp_NFA
1637+ E2FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1637+ E2F9             >
1637+ E2F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1637+ E2FA 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1637+ E2FE             >                org     $-1                 // alter last byte of Name just above to set
1637+ E2FD CB          >                db      {b $} | END_BIT     // msb as name end
1637+ E2FE             >
1637+ E2FE F1 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1637+ E300             >Prev_Ptr        defl    Heap_Ptr
1637+ E300             >
1637+ E300             >mirror_Ptr      defl    $
1637+ E300             >
1637+ E300 1A 69       >                dw      Dict_Ptr + 2        // xt
1637+ E302             >Heap_Ptr        defl    $ - $E000           // save current HP
1637+ E302             >
1637+ E302             >Current_HP      defl  $ - $E000             // used to set HP once!
1637+ E302             >
1637+ E302             >//              ______________________________________________________________________
1637+ E302             >//              Dictionary part
1637+ E302             >
1637+ E302             >                org     Dict_Ptr
1637+ 6918             >
1637+ 6918 00 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1637+ 691A             >
1637+ 691A             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1637+ 691A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1637+ 691A ~           >
1637+ 691A ~           >
1637+ 691A             >                endif           ; ok        // for other definitions it "points" the correct handler
1637+ 691A             >                // Use of "; ok" to suppress "warning[fwdref]"
1637+ 691A             >
1637+ 691A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1638+ 691A E1                           pop     hl
1639+ 691B F1                           pop     af                  // < n1
1640+ 691C E5                           push    hl                  // > n2  and TOS
1641+ 691D F5                           push    af                  // > n1
1642+ 691E E5                           push    hl
1643+ 691F                              next
1643+ 691F DD E9       >                jp      (ix)
1644+ 6921
1645+ 6921              //  ______________________________________________________________________
1646+ 6921              //
1647+ 6921              // swap         n1 n2 -- n2 n1
1648+ 6921              // swaps the two values on top of stack
1649+ 6921                              New_Def SWAP, "SWAP", is_code, is_normal
1649+ 6921             >
1649+ 6921             >Dict_Ptr        defl    $
1649+ 6921             >
1649+ 6921             >//              ______________________________________________________________________
1649+ 6921             >//              Heap part
1649+ 6921             >
1649+ 6921             >
1649+ 6921             >                org     (Heap_Ptr & $1FFF) + $E000
1649+ E302             >
1649+ E302             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1649+ E302             >Latest_Definition defl  Heap_Ptr
1649+ E302             >
1649+ E302             >                // dummy db directives used to calculate length of namec
1649+ E302 53 57 41 50 >                db      "SWAP"
1649+ E306             >len_NFA         defl    $ - temp_NFA
1649+ E306             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1649+ E302             >
1649+ E302 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1649+ E303 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1649+ E307             >                org     $-1                 // alter last byte of Name just above to set
1649+ E306 D0          >                db      {b $} | END_BIT     // msb as name end
1649+ E307             >
1649+ E307 F9 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1649+ E309             >Prev_Ptr        defl    Heap_Ptr
1649+ E309             >
1649+ E309             >mirror_Ptr      defl    $
1649+ E309             >
1649+ E309 23 69       >                dw      Dict_Ptr + 2        // xt
1649+ E30B             >Heap_Ptr        defl    $ - $E000           // save current HP
1649+ E30B             >
1649+ E30B             >Current_HP      defl  $ - $E000             // used to set HP once!
1649+ E30B             >
1649+ E30B             >//              ______________________________________________________________________
1649+ E30B             >//              Dictionary part
1649+ E30B             >
1649+ E30B             >                org     Dict_Ptr
1649+ 6921             >
1649+ 6921 09 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1649+ 6923             >
1649+ 6923             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1649+ 6923 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1649+ 6923 ~           >
1649+ 6923 ~           >
1649+ 6923             >                endif           ; ok        // for other definitions it "points" the correct handler
1649+ 6923             >                // Use of "; ok" to suppress "warning[fwdref]"
1649+ 6923             >
1649+ 6923             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1650+ 6923 E1                           pop     hl                  // < n1
1651+ 6924 E3                           ex      (sp),hl             // > n2
1652+ 6925 E5                           push    hl                  // copy n1 to TOS
1653+ 6926                              next
1653+ 6926 DD E9       >                jp      (ix)
1654+ 6928
1655+ 6928              //  ______________________________________________________________________
1656+ 6928              //
1657+ 6928              // dup         n -- n n
1658+ 6928              // duplicates the top value of stack
1659+ 6928                              New_Def DUP, "DUP", is_code, is_normal
1659+ 6928             >
1659+ 6928             >Dict_Ptr        defl    $
1659+ 6928             >
1659+ 6928             >//              ______________________________________________________________________
1659+ 6928             >//              Heap part
1659+ 6928             >
1659+ 6928             >
1659+ 6928             >                org     (Heap_Ptr & $1FFF) + $E000
1659+ E30B             >
1659+ E30B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1659+ E30B             >Latest_Definition defl  Heap_Ptr
1659+ E30B             >
1659+ E30B             >                // dummy db directives used to calculate length of namec
1659+ E30B 44 55 50    >                db      "DUP"
1659+ E30E             >len_NFA         defl    $ - temp_NFA
1659+ E30E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1659+ E30B             >
1659+ E30B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1659+ E30C 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1659+ E30F             >                org     $-1                 // alter last byte of Name just above to set
1659+ E30E D0          >                db      {b $} | END_BIT     // msb as name end
1659+ E30F             >
1659+ E30F 02 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1659+ E311             >Prev_Ptr        defl    Heap_Ptr
1659+ E311             >
1659+ E311             >mirror_Ptr      defl    $
1659+ E311             >
1659+ E311 2A 69       >                dw      Dict_Ptr + 2        // xt
1659+ E313             >Heap_Ptr        defl    $ - $E000           // save current HP
1659+ E313             >
1659+ E313             >Current_HP      defl  $ - $E000             // used to set HP once!
1659+ E313             >
1659+ E313             >//              ______________________________________________________________________
1659+ E313             >//              Dictionary part
1659+ E313             >
1659+ E313             >                org     Dict_Ptr
1659+ 6928             >
1659+ 6928 11 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1659+ 692A             >
1659+ 692A             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1659+ 692A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1659+ 692A ~           >
1659+ 692A ~           >
1659+ 692A             >                endif           ; ok        // for other definitions it "points" the correct handler
1659+ 692A             >                // Use of "; ok" to suppress "warning[fwdref]"
1659+ 692A             >
1659+ 692A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1660+ 692A E1                           pop     hl
1661+ 692B E5                           push    hl                  // > n duplicate TOS
1662+ 692C E5                           push    hl
1663+ 692D                              next
1663+ 692D DD E9       >                jp      (ix)
1664+ 692F
1665+ 692F              //  ______________________________________________________________________
1666+ 692F              //
1667+ 692F              // rot         n1 n2 n3 -- n2 n3 n1
1668+ 692F              // Rotates the 3 top values of stack by picking the 3rd in access-order
1669+ 692F              // and putting it on top. The other two are shifted down one place.
1670+ 692F                              New_Def ROT, "ROT", is_code, is_normal
1670+ 692F             >
1670+ 692F             >Dict_Ptr        defl    $
1670+ 692F             >
1670+ 692F             >//              ______________________________________________________________________
1670+ 692F             >//              Heap part
1670+ 692F             >
1670+ 692F             >
1670+ 692F             >                org     (Heap_Ptr & $1FFF) + $E000
1670+ E313             >
1670+ E313             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1670+ E313             >Latest_Definition defl  Heap_Ptr
1670+ E313             >
1670+ E313             >                // dummy db directives used to calculate length of namec
1670+ E313 52 4F 54    >                db      "ROT"
1670+ E316             >len_NFA         defl    $ - temp_NFA
1670+ E316             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1670+ E313             >
1670+ E313 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1670+ E314 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1670+ E317             >                org     $-1                 // alter last byte of Name just above to set
1670+ E316 D4          >                db      {b $} | END_BIT     // msb as name end
1670+ E317             >
1670+ E317 0B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1670+ E319             >Prev_Ptr        defl    Heap_Ptr
1670+ E319             >
1670+ E319             >mirror_Ptr      defl    $
1670+ E319             >
1670+ E319 31 69       >                dw      Dict_Ptr + 2        // xt
1670+ E31B             >Heap_Ptr        defl    $ - $E000           // save current HP
1670+ E31B             >
1670+ E31B             >Current_HP      defl  $ - $E000             // used to set HP once!
1670+ E31B             >
1670+ E31B             >//              ______________________________________________________________________
1670+ E31B             >//              Dictionary part
1670+ E31B             >
1670+ E31B             >                org     Dict_Ptr
1670+ 692F             >
1670+ 692F 19 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1670+ 6931             >
1670+ 6931             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1670+ 6931 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1670+ 6931 ~           >
1670+ 6931 ~           >
1670+ 6931             >                endif           ; ok        // for other definitions it "points" the correct handler
1670+ 6931             >                // Use of "; ok" to suppress "warning[fwdref]"
1670+ 6931             >
1670+ 6931             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1671+ 6931 D9                           exx
1672+ 6932 D1                           pop     de                  // < n3
1673+ 6933 E1                           pop     hl                  // < n2
1674+ 6934 E3                           ex      (sp),hl             // > n2 < n1
1675+ 6935 D5                           push    de                  // > n3
1676+ 6936 E5                           push    hl                  // copy n1 to TOS
1677+ 6937 D9                           exx
1678+ 6938                              next
1678+ 6938 DD E9       >                jp      (ix)
1679+ 693A
1680+ 693A              //  ______________________________________________________________________
1681+ 693A              //
1682+ 693A              // -rot         n1 n2 n3 -- n3 n1 n2
1683+ 693A              // Rotates the 3 top values of stack by picking the 1st in access-order
1684+ 693A              // and putting back to 3rd place. The other two are shifted down one place.
1685+ 693A                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1685+ 693A             >
1685+ 693A             >Dict_Ptr        defl    $
1685+ 693A             >
1685+ 693A             >//              ______________________________________________________________________
1685+ 693A             >//              Heap part
1685+ 693A             >
1685+ 693A             >
1685+ 693A             >                org     (Heap_Ptr & $1FFF) + $E000
1685+ E31B             >
1685+ E31B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1685+ E31B             >Latest_Definition defl  Heap_Ptr
1685+ E31B             >
1685+ E31B             >                // dummy db directives used to calculate length of namec
1685+ E31B 2D 52 4F 54 >                db      "-ROT"
1685+ E31F             >len_NFA         defl    $ - temp_NFA
1685+ E31F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1685+ E31B             >
1685+ E31B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1685+ E31C 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1685+ E320             >                org     $-1                 // alter last byte of Name just above to set
1685+ E31F D4          >                db      {b $} | END_BIT     // msb as name end
1685+ E320             >
1685+ E320 13 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1685+ E322             >Prev_Ptr        defl    Heap_Ptr
1685+ E322             >
1685+ E322             >mirror_Ptr      defl    $
1685+ E322             >
1685+ E322 3C 69       >                dw      Dict_Ptr + 2        // xt
1685+ E324             >Heap_Ptr        defl    $ - $E000           // save current HP
1685+ E324             >
1685+ E324             >Current_HP      defl  $ - $E000             // used to set HP once!
1685+ E324             >
1685+ E324             >//              ______________________________________________________________________
1685+ E324             >//              Dictionary part
1685+ E324             >
1685+ E324             >                org     Dict_Ptr
1685+ 693A             >
1685+ 693A 22 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1685+ 693C             >
1685+ 693C             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1685+ 693C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1685+ 693C ~           >
1685+ 693C ~           >
1685+ 693C             >                endif           ; ok        // for other definitions it "points" the correct handler
1685+ 693C             >                // Use of "; ok" to suppress "warning[fwdref]"
1685+ 693C             >
1685+ 693C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1686+ 693C D9                           exx
1687+ 693D E1                           pop     hl                  // < n3
1688+ 693E D1                           pop     de                  // < n2
1689+ 693F E3                           ex      (sp),hl             // > n3 < n1
1690+ 6940 E5                           push    hl                  // > n1
1691+ 6941 D5                           push    de                  // copy n3 to TOS
1692+ 6942 D9                           exx
1693+ 6943                              next
1693+ 6943 DD E9       >                jp      (ix)
1694+ 6945
1695+ 6945              //  ______________________________________________________________________
1696+ 6945              //
1697+ 6945              // pick        n1 -- nx
1698+ 6945              // picks the nth element from TOS
1699+ 6945                              New_Def PICK, "PICK", is_code, is_normal
1699+ 6945             >
1699+ 6945             >Dict_Ptr        defl    $
1699+ 6945             >
1699+ 6945             >//              ______________________________________________________________________
1699+ 6945             >//              Heap part
1699+ 6945             >
1699+ 6945             >
1699+ 6945             >                org     (Heap_Ptr & $1FFF) + $E000
1699+ E324             >
1699+ E324             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1699+ E324             >Latest_Definition defl  Heap_Ptr
1699+ E324             >
1699+ E324             >                // dummy db directives used to calculate length of namec
1699+ E324 50 49 43 4B >                db      "PICK"
1699+ E328             >len_NFA         defl    $ - temp_NFA
1699+ E328             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1699+ E324             >
1699+ E324 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1699+ E325 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1699+ E329             >                org     $-1                 // alter last byte of Name just above to set
1699+ E328 CB          >                db      {b $} | END_BIT     // msb as name end
1699+ E329             >
1699+ E329 1B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1699+ E32B             >Prev_Ptr        defl    Heap_Ptr
1699+ E32B             >
1699+ E32B             >mirror_Ptr      defl    $
1699+ E32B             >
1699+ E32B 47 69       >                dw      Dict_Ptr + 2        // xt
1699+ E32D             >Heap_Ptr        defl    $ - $E000           // save current HP
1699+ E32D             >
1699+ E32D             >Current_HP      defl  $ - $E000             // used to set HP once!
1699+ E32D             >
1699+ E32D             >//              ______________________________________________________________________
1699+ E32D             >//              Dictionary part
1699+ E32D             >
1699+ E32D             >                org     Dict_Ptr
1699+ 6945             >
1699+ 6945 2B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1699+ 6947             >
1699+ 6947             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1699+ 6947 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1699+ 6947 ~           >
1699+ 6947 ~           >
1699+ 6947             >                endif           ; ok        // for other definitions it "points" the correct handler
1699+ 6947             >                // Use of "; ok" to suppress "warning[fwdref]"
1699+ 6947             >
1699+ 6947             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1700+ 6947 E1                           pop     hl                  // take TOS as index
1701+ 6948 29                           add     hl, hl              // as cells
1702+ 6949 39                           add     hl, sp              // from Stack Pointer
1703+ 694A 7E                           ld      a, (hl)             // replace TOS
1704+ 694B 23                           inc     hl
1705+ 694C 66                           ld      h, (hl)
1706+ 694D 6F                           ld      l, a
1707+ 694E E5                           push    hl
1708+ 694F                              next
1708+ 694F DD E9       >                jp      (ix)
1709+ 6951
1710+ 6951
1711+ 6951              //  ______________________________________________________________________
1712+ 6951              //
1713+ 6951              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1714+ 6951              // picks the nth element from TOS
1715+ 6951              //              New_Def ROLL, "ROLL", is_code, is_normal
1716+ 6951              //              exx                     // we need all registers free
1717+ 6951              //              pop     hl              // number of cells to roll
1718+ 6951              //              ld      a, h
1719+ 6951              //              or       l
1720+ 6951              //              jr      z, Roll_Zero
1721+ 6951              //                  add     hl, hl              // number of bytes to move
1722+ 6951              //                  ld      b, h
1723+ 6951              //                  ld      c, l
1724+ 6951              //                  add     hl, sp          // address of n1
1725+ 6951              //                  ld      a, (hl)         // take n1 into a and a,
1726+ 6951              //                  inc     hl
1727+ 6951              //                  ex      af, af'
1728+ 6951              //                  ld      a, (hl)         // take n1 into a and a,
1729+ 6951              //                  ld      d, h
1730+ 6951              //                  ld      e, l
1731+ 6951              //                  dec     hl
1732+ 6951              //                  dec     hl
1733+ 6951              //                  lddr
1734+ 6951              //                  ex      de, hl
1735+ 6951              //                  ld      (hl), a
1736+ 6951              //                  dec     hl
1737+ 6951              //                  ex      af, af'
1738+ 6951              //                  ld      (hl), a
1739+ 6951              //Roll_Zero:
1740+ 6951              //              exx
1741+ 6951              //              next
1742+ 6951
1743+ 6951
1744+ 6951              //  ______________________________________________________________________
1745+ 6951              //
1746+ 6951              // 2over        d1 d2 -- d1 d2 d1
1747+ 6951              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1748+ 6951              // copy the second double of stack and put on top.
1749+ 6951                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1749+ 6951             >
1749+ 6951             >Dict_Ptr        defl    $
1749+ 6951             >
1749+ 6951             >//              ______________________________________________________________________
1749+ 6951             >//              Heap part
1749+ 6951             >
1749+ 6951             >
1749+ 6951             >                org     (Heap_Ptr & $1FFF) + $E000
1749+ E32D             >
1749+ E32D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1749+ E32D             >Latest_Definition defl  Heap_Ptr
1749+ E32D             >
1749+ E32D             >                // dummy db directives used to calculate length of namec
1749+ E32D 32 4F 56 45 >                db      "2OVER"
1749+ E331 52          >
1749+ E332             >len_NFA         defl    $ - temp_NFA
1749+ E332             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1749+ E32D             >
1749+ E32D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1749+ E32E 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1749+ E332 52          >
1749+ E333             >                org     $-1                 // alter last byte of Name just above to set
1749+ E332 D2          >                db      {b $} | END_BIT     // msb as name end
1749+ E333             >
1749+ E333 24 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1749+ E335             >Prev_Ptr        defl    Heap_Ptr
1749+ E335             >
1749+ E335             >mirror_Ptr      defl    $
1749+ E335             >
1749+ E335 53 69       >                dw      Dict_Ptr + 2        // xt
1749+ E337             >Heap_Ptr        defl    $ - $E000           // save current HP
1749+ E337             >
1749+ E337             >Current_HP      defl  $ - $E000             // used to set HP once!
1749+ E337             >
1749+ E337             >//              ______________________________________________________________________
1749+ E337             >//              Dictionary part
1749+ E337             >
1749+ E337             >                org     Dict_Ptr
1749+ 6951             >
1749+ 6951 35 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1749+ 6953             >
1749+ 6953             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1749+ 6953 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1749+ 6953 ~           >
1749+ 6953 ~           >
1749+ 6953             >                endif           ; ok        // for other definitions it "points" the correct handler
1749+ 6953             >                // Use of "; ok" to suppress "warning[fwdref]"
1749+ 6953             >
1749+ 6953             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1750+ 6953 D9                           exx
1751+ 6954 21 07 00                     ld      hl, 7
1752+ 6957 39                           add     hl, sp
1753+ 6958 56                           ld      d, (hl)
1754+ 6959 2B                           dec     hl
1755+ 695A 5E                           ld      e, (hl)             // d1-L
1756+ 695B D5                           push    de
1757+ 695C 2B                           dec     hl
1758+ 695D 56                           ld      d, (hl)
1759+ 695E 2B                           dec     hl
1760+ 695F 5E                           ld      e, (hl)             // d1-H
1761+ 6960 D5                           push    de
1762+ 6961 D9                           exx
1763+ 6962                              next
1763+ 6962 DD E9       >                jp      (ix)
1764+ 6964
1765+ 6964              //  ______________________________________________________________________
1766+ 6964              //
1767+ 6964              // 2drop        d --
1768+ 6964              //              n1 n2 --
1769+ 6964              // drops the top double from stack
1770+ 6964                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1770+ 6964             >
1770+ 6964             >Dict_Ptr        defl    $
1770+ 6964             >
1770+ 6964             >//              ______________________________________________________________________
1770+ 6964             >//              Heap part
1770+ 6964             >
1770+ 6964             >
1770+ 6964             >                org     (Heap_Ptr & $1FFF) + $E000
1770+ E337             >
1770+ E337             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1770+ E337             >Latest_Definition defl  Heap_Ptr
1770+ E337             >
1770+ E337             >                // dummy db directives used to calculate length of namec
1770+ E337 32 44 52 4F >                db      "2DROP"
1770+ E33B 50          >
1770+ E33C             >len_NFA         defl    $ - temp_NFA
1770+ E33C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1770+ E337             >
1770+ E337 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1770+ E338 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1770+ E33C 50          >
1770+ E33D             >                org     $-1                 // alter last byte of Name just above to set
1770+ E33C D0          >                db      {b $} | END_BIT     // msb as name end
1770+ E33D             >
1770+ E33D 2D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1770+ E33F             >Prev_Ptr        defl    Heap_Ptr
1770+ E33F             >
1770+ E33F             >mirror_Ptr      defl    $
1770+ E33F             >
1770+ E33F 66 69       >                dw      Dict_Ptr + 2        // xt
1770+ E341             >Heap_Ptr        defl    $ - $E000           // save current HP
1770+ E341             >
1770+ E341             >Current_HP      defl  $ - $E000             // used to set HP once!
1770+ E341             >
1770+ E341             >//              ______________________________________________________________________
1770+ E341             >//              Dictionary part
1770+ E341             >
1770+ E341             >                org     Dict_Ptr
1770+ 6964             >
1770+ 6964 3F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1770+ 6966             >
1770+ 6966             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1770+ 6966 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1770+ 6966 ~           >
1770+ 6966 ~           >
1770+ 6966             >                endif           ; ok        // for other definitions it "points" the correct handler
1770+ 6966             >                // Use of "; ok" to suppress "warning[fwdref]"
1770+ 6966             >
1770+ 6966             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1771+ 6966 E1                           pop     hl
1772+ 6967 E1                           pop     hl
1773+ 6968                              next
1773+ 6968 DD E9       >                jp      (ix)
1774+ 696A
1775+ 696A              //  ______________________________________________________________________
1776+ 696A              //
1777+ 696A              // 2nip         d1 d2 -- d2
1778+ 696A              //              n1 n2 n3 n4 -- n3 n4
1779+ 696A              // drops the second double on the stack
1780+ 696A              //              New_Def TWO_NIP, 4, "2nip"
1781+ 696A              //              ...
1782+ 696A
1783+ 696A              //  ______________________________________________________________________
1784+ 696A              //
1785+ 696A              // 2tuck         d1 d2 -- d2 d1 d2
1786+ 696A              // copy the top element after the second.
1787+ 696A              //              New_Def TWO_TUCK, 5, "2tuck"
1788+ 696A              //              ...
1789+ 696A
1790+ 696A              //  ______________________________________________________________________
1791+ 696A              //
1792+ 696A              // 2swap         d1 d2 -- d2 d1
1793+ 696A              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1794+ 696A              // swaps the two doubles on top of stack
1795+ 696A                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1795+ 696A             >
1795+ 696A             >Dict_Ptr        defl    $
1795+ 696A             >
1795+ 696A             >//              ______________________________________________________________________
1795+ 696A             >//              Heap part
1795+ 696A             >
1795+ 696A             >
1795+ 696A             >                org     (Heap_Ptr & $1FFF) + $E000
1795+ E341             >
1795+ E341             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1795+ E341             >Latest_Definition defl  Heap_Ptr
1795+ E341             >
1795+ E341             >                // dummy db directives used to calculate length of namec
1795+ E341 32 53 57 41 >                db      "2SWAP"
1795+ E345 50          >
1795+ E346             >len_NFA         defl    $ - temp_NFA
1795+ E346             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1795+ E341             >
1795+ E341 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1795+ E342 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1795+ E346 50          >
1795+ E347             >                org     $-1                 // alter last byte of Name just above to set
1795+ E346 D0          >                db      {b $} | END_BIT     // msb as name end
1795+ E347             >
1795+ E347 37 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1795+ E349             >Prev_Ptr        defl    Heap_Ptr
1795+ E349             >
1795+ E349             >mirror_Ptr      defl    $
1795+ E349             >
1795+ E349 6C 69       >                dw      Dict_Ptr + 2        // xt
1795+ E34B             >Heap_Ptr        defl    $ - $E000           // save current HP
1795+ E34B             >
1795+ E34B             >Current_HP      defl  $ - $E000             // used to set HP once!
1795+ E34B             >
1795+ E34B             >//              ______________________________________________________________________
1795+ E34B             >//              Dictionary part
1795+ E34B             >
1795+ E34B             >                org     Dict_Ptr
1795+ 696A             >
1795+ 696A 49 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1795+ 696C             >
1795+ 696C             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1795+ 696C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1795+ 696C ~           >
1795+ 696C ~           >
1795+ 696C             >                endif           ; ok        // for other definitions it "points" the correct handler
1795+ 696C             >                // Use of "; ok" to suppress "warning[fwdref]"
1795+ 696C             >
1795+ 696C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1796+ 696C D9                           exx
1797+ 696D F1                           pop     af                  //   d2-H
1798+ 696E E1                           pop     hl                  // < d2-L
1799+ 696F D1                           pop     de                  // < d1-H
1800+ 6970 E3                           ex      (sp), hl            // < d1-L > d2-L
1801+ 6971 F5                           push    af                  // > d2-H
1802+ 6972 E5                           push    hl                  // > d1-L
1803+ 6973 D5                           push    de
1804+ 6974 D9                           exx
1805+ 6975                              next
1805+ 6975 DD E9       >                jp      (ix)
1806+ 6977
1807+ 6977              //  ______________________________________________________________________
1808+ 6977              //
1809+ 6977              // 2dup         d -- d d
1810+ 6977              //              n1 n2 -- n1 n2 n1 n2
1811+ 6977              // duplicates the top double of stack
1812+ 6977                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1812+ 6977             >
1812+ 6977             >Dict_Ptr        defl    $
1812+ 6977             >
1812+ 6977             >//              ______________________________________________________________________
1812+ 6977             >//              Heap part
1812+ 6977             >
1812+ 6977             >
1812+ 6977             >                org     (Heap_Ptr & $1FFF) + $E000
1812+ E34B             >
1812+ E34B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1812+ E34B             >Latest_Definition defl  Heap_Ptr
1812+ E34B             >
1812+ E34B             >                // dummy db directives used to calculate length of namec
1812+ E34B 32 44 55 50 >                db      "2DUP"
1812+ E34F             >len_NFA         defl    $ - temp_NFA
1812+ E34F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1812+ E34B             >
1812+ E34B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1812+ E34C 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1812+ E350             >                org     $-1                 // alter last byte of Name just above to set
1812+ E34F D0          >                db      {b $} | END_BIT     // msb as name end
1812+ E350             >
1812+ E350 41 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1812+ E352             >Prev_Ptr        defl    Heap_Ptr
1812+ E352             >
1812+ E352             >mirror_Ptr      defl    $
1812+ E352             >
1812+ E352 79 69       >                dw      Dict_Ptr + 2        // xt
1812+ E354             >Heap_Ptr        defl    $ - $E000           // save current HP
1812+ E354             >
1812+ E354             >Current_HP      defl  $ - $E000             // used to set HP once!
1812+ E354             >
1812+ E354             >//              ______________________________________________________________________
1812+ E354             >//              Dictionary part
1812+ E354             >
1812+ E354             >                org     Dict_Ptr
1812+ 6977             >
1812+ 6977 52 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1812+ 6979             >
1812+ 6979             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1812+ 6979 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1812+ 6979 ~           >
1812+ 6979 ~           >
1812+ 6979             >                endif           ; ok        // for other definitions it "points" the correct handler
1812+ 6979             >                // Use of "; ok" to suppress "warning[fwdref]"
1812+ 6979             >
1812+ 6979             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1813+ 6979 E1                           pop     hl                  // < d-H
1814+ 697A F1                           pop     af                  // < d-L
1815+ 697B F5                           push    af                  // < d-L
1816+ 697C E5                           push    hl                  // > d-H
1817+ 697D F5                           push    af                  // > d-L
1818+ 697E E5                           push    hl                  // > d-H
1819+ 697F                              next
1819+ 697F DD E9       >                jp      (ix)
1820+ 6981
1821+ 6981              //  ______________________________________________________________________
1822+ 6981              //
1823+ 6981              // 2rot         d1 d2 d3 -- d2 d3 d1
1824+ 6981              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1825+ 6981              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1826+ 6981              // and putting it on top. The other two are shifted down one place.
1827+ 6981              //              New_Def TWO?ROT, 4, "2rot"
1828+ 6981              //              ...
1829+ 6981              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1830+ 6981              //
1831+ 6981              //      d3  |d2  |d1  |
1832+ 6981              //      h l |h l |h l |
1833+ 6981              // SP   LHED|LHED|LHED|
1834+ 6981              // SP  +0123|4567|89ab|
1835+ 6981              //              ld      hl, $000B
1836+ 6981              //              add     hl, sp
1837+ 6981              //              ld      d, (hl)
1838+ 6981              //              dec     hl
1839+ 6981              //              ld      e, (hl)
1840+ 6981              //              dec     hl
1841+ 6981              //              push    de
1842+ 6981              //              ld      d, (hl)
1843+ 6981              //              dec     hl
1844+ 6981              //              ld      e, (hl)
1845+ 6981              //              dec     hl
1846+ 6981              //              push    de
1847+ 6981
1848+ 6981              //      d1  |d3  |d2  |d1  |
1849+ 6981              //      h l |h l |h l |h l |
1850+ 6981              // SP   LHED|LHED|LHED|LHED|
1851+ 6981              // SP       +0123|4567|89ab|
1852+ 6981
1853+ 6981              //              ld      d, h
1854+ 6981              //              ld      e, l
1855+ 6981              //              inc     de
1856+ 6981              //              inc     de
1857+ 6981              //              inc     de
1858+ 6981              //              inc     de
1859+ 6981              //              push    bc
1860+ 6981              //              ld      bc, $000C
1861+ 6981              //              lddr
1862+ 6981              //              pop     bc
1863+ 6981              //              pop     de
1864+ 6981              //              pop     de
1865+ 6981              //
1866+ 6981              //              next
1867+ 6981
1868+ 6981
1869+ 6981              //  ______________________________________________________________________
1870+ 6981              //
1871+ 6981              // +!           n a --
1872+ 6981              // Sums to the content of address a the number n.
1873+ 6981              // It is the same of  a @ n + a !
1874+ 6981                              New_Def PLUSSTORE, "+!", is_code, is_normal
1874+ 6981             >
1874+ 6981             >Dict_Ptr        defl    $
1874+ 6981             >
1874+ 6981             >//              ______________________________________________________________________
1874+ 6981             >//              Heap part
1874+ 6981             >
1874+ 6981             >
1874+ 6981             >                org     (Heap_Ptr & $1FFF) + $E000
1874+ E354             >
1874+ E354             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1874+ E354             >Latest_Definition defl  Heap_Ptr
1874+ E354             >
1874+ E354             >                // dummy db directives used to calculate length of namec
1874+ E354 2B 21       >                db      "+!"
1874+ E356             >len_NFA         defl    $ - temp_NFA
1874+ E356             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1874+ E354             >
1874+ E354 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1874+ E355 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1874+ E357             >                org     $-1                 // alter last byte of Name just above to set
1874+ E356 A1          >                db      {b $} | END_BIT     // msb as name end
1874+ E357             >
1874+ E357 4B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1874+ E359             >Prev_Ptr        defl    Heap_Ptr
1874+ E359             >
1874+ E359             >mirror_Ptr      defl    $
1874+ E359             >
1874+ E359 83 69       >                dw      Dict_Ptr + 2        // xt
1874+ E35B             >Heap_Ptr        defl    $ - $E000           // save current HP
1874+ E35B             >
1874+ E35B             >Current_HP      defl  $ - $E000             // used to set HP once!
1874+ E35B             >
1874+ E35B             >//              ______________________________________________________________________
1874+ E35B             >//              Dictionary part
1874+ E35B             >
1874+ E35B             >                org     Dict_Ptr
1874+ 6981             >
1874+ 6981 59 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1874+ 6983             >
1874+ 6983             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1874+ 6983 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1874+ 6983 ~           >
1874+ 6983 ~           >
1874+ 6983             >                endif           ; ok        // for other definitions it "points" the correct handler
1874+ 6983             >                // Use of "; ok" to suppress "warning[fwdref]"
1874+ 6983             >
1874+ 6983             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1875+ 6983 D9                           exx
1876+ 6984 E1                           pop     hl                  // hl is the address
1877+ 6985 D1                           pop     de                  // de is the number
1878+ 6986 7E                           ld      a, (hl)
1879+ 6987 83                           add     e
1880+ 6988 77                           ld      (hl), a
1881+ 6989 23                           inc     hl
1882+ 698A 7E                           ld      a, (hl)
1883+ 698B 8A                           adc     d
1884+ 698C 77                           ld      (hl), a
1885+ 698D D9                           exx
1886+ 698E                              next
1886+ 698E DD E9       >                jp      (ix)
1887+ 6990
1888+ 6990              //  ______________________________________________________________________
1889+ 6990              //
1890+ 6990              // toggle       a n --
1891+ 6990              // Complements (xor) the byte at addrress  a  with the model n.
1892+ 6990                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1892+ 6990             >
1892+ 6990             >Dict_Ptr        defl    $
1892+ 6990             >
1892+ 6990             >//              ______________________________________________________________________
1892+ 6990             >//              Heap part
1892+ 6990             >
1892+ 6990             >
1892+ 6990             >                org     (Heap_Ptr & $1FFF) + $E000
1892+ E35B             >
1892+ E35B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1892+ E35B             >Latest_Definition defl  Heap_Ptr
1892+ E35B             >
1892+ E35B             >                // dummy db directives used to calculate length of namec
1892+ E35B 54 4F 47 47 >                db      "TOGGLE"
1892+ E35F 4C 45       >
1892+ E361             >len_NFA         defl    $ - temp_NFA
1892+ E361             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1892+ E35B             >
1892+ E35B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1892+ E35C 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1892+ E360 4C 45       >
1892+ E362             >                org     $-1                 // alter last byte of Name just above to set
1892+ E361 C5          >                db      {b $} | END_BIT     // msb as name end
1892+ E362             >
1892+ E362 54 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1892+ E364             >Prev_Ptr        defl    Heap_Ptr
1892+ E364             >
1892+ E364             >mirror_Ptr      defl    $
1892+ E364             >
1892+ E364 92 69       >                dw      Dict_Ptr + 2        // xt
1892+ E366             >Heap_Ptr        defl    $ - $E000           // save current HP
1892+ E366             >
1892+ E366             >Current_HP      defl  $ - $E000             // used to set HP once!
1892+ E366             >
1892+ E366             >//              ______________________________________________________________________
1892+ E366             >//              Dictionary part
1892+ E366             >
1892+ E366             >                org     Dict_Ptr
1892+ 6990             >
1892+ 6990 64 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1892+ 6992             >
1892+ 6992             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1892+ 6992 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1892+ 6992 ~           >
1892+ 6992 ~           >
1892+ 6992             >                endif           ; ok        // for other definitions it "points" the correct handler
1892+ 6992             >                // Use of "; ok" to suppress "warning[fwdref]"
1892+ 6992             >
1892+ 6992             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1893+ 6992 E1                           pop     hl
1894+ 6993 7D                           ld      a, l
1895+ 6994 E1                           pop     hl
1896+ 6995 AE                           xor     (hl)
1897+ 6996 77                           ld      (hl), a
1898+ 6997
1899+ 6997                              next
1899+ 6997 DD E9       >                jp      (ix)
1900+ 6999
1901+ 6999              //  ______________________________________________________________________
1902+ 6999              //
1903+ 6999              // @            a -- n
1904+ 6999              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1905+ 6999                              New_Def FETCH, "@", is_code, is_normal
1905+ 6999             >
1905+ 6999             >Dict_Ptr        defl    $
1905+ 6999             >
1905+ 6999             >//              ______________________________________________________________________
1905+ 6999             >//              Heap part
1905+ 6999             >
1905+ 6999             >
1905+ 6999             >                org     (Heap_Ptr & $1FFF) + $E000
1905+ E366             >
1905+ E366             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1905+ E366             >Latest_Definition defl  Heap_Ptr
1905+ E366             >
1905+ E366             >                // dummy db directives used to calculate length of namec
1905+ E366 40          >                db      "@"
1905+ E367             >len_NFA         defl    $ - temp_NFA
1905+ E367             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1905+ E366             >
1905+ E366 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1905+ E367 40          >                db      "@"               // name string in 7-bit ascii, but
1905+ E368             >                org     $-1                 // alter last byte of Name just above to set
1905+ E367 C0          >                db      {b $} | END_BIT     // msb as name end
1905+ E368             >
1905+ E368 5B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1905+ E36A             >Prev_Ptr        defl    Heap_Ptr
1905+ E36A             >
1905+ E36A             >mirror_Ptr      defl    $
1905+ E36A             >
1905+ E36A 9B 69       >                dw      Dict_Ptr + 2        // xt
1905+ E36C             >Heap_Ptr        defl    $ - $E000           // save current HP
1905+ E36C             >
1905+ E36C             >Current_HP      defl  $ - $E000             // used to set HP once!
1905+ E36C             >
1905+ E36C             >//              ______________________________________________________________________
1905+ E36C             >//              Dictionary part
1905+ E36C             >
1905+ E36C             >                org     Dict_Ptr
1905+ 6999             >
1905+ 6999 6A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1905+ 699B             >
1905+ 699B             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1905+ 699B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1905+ 699B ~           >
1905+ 699B ~           >
1905+ 699B             >                endif           ; ok        // for other definitions it "points" the correct handler
1905+ 699B             >                // Use of "; ok" to suppress "warning[fwdref]"
1905+ 699B             >
1905+ 699B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1906+ 699B E1                           pop     hl
1907+ 699C 7E                           ld      a, (hl)             // low-byte
1908+ 699D 23                           inc     hl
1909+ 699E 66                           ld      h, (hl)             // high-byte
1910+ 699F 6F                           ld      l, a
1911+ 69A0 E5                           push    hl
1912+ 69A1                              next
1912+ 69A1 DD E9       >                jp      (ix)
1913+ 69A3
1914+ 69A3              //  ______________________________________________________________________
1915+ 69A3              //
1916+ 69A3              // !            n a --
1917+ 69A3              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1918+ 69A3                              New_Def STORE, "!", is_code, is_normal
1918+ 69A3             >
1918+ 69A3             >Dict_Ptr        defl    $
1918+ 69A3             >
1918+ 69A3             >//              ______________________________________________________________________
1918+ 69A3             >//              Heap part
1918+ 69A3             >
1918+ 69A3             >
1918+ 69A3             >                org     (Heap_Ptr & $1FFF) + $E000
1918+ E36C             >
1918+ E36C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1918+ E36C             >Latest_Definition defl  Heap_Ptr
1918+ E36C             >
1918+ E36C             >                // dummy db directives used to calculate length of namec
1918+ E36C 21          >                db      "!"
1918+ E36D             >len_NFA         defl    $ - temp_NFA
1918+ E36D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1918+ E36C             >
1918+ E36C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1918+ E36D 21          >                db      "!"               // name string in 7-bit ascii, but
1918+ E36E             >                org     $-1                 // alter last byte of Name just above to set
1918+ E36D A1          >                db      {b $} | END_BIT     // msb as name end
1918+ E36E             >
1918+ E36E 66 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1918+ E370             >Prev_Ptr        defl    Heap_Ptr
1918+ E370             >
1918+ E370             >mirror_Ptr      defl    $
1918+ E370             >
1918+ E370 A5 69       >                dw      Dict_Ptr + 2        // xt
1918+ E372             >Heap_Ptr        defl    $ - $E000           // save current HP
1918+ E372             >
1918+ E372             >Current_HP      defl  $ - $E000             // used to set HP once!
1918+ E372             >
1918+ E372             >//              ______________________________________________________________________
1918+ E372             >//              Dictionary part
1918+ E372             >
1918+ E372             >                org     Dict_Ptr
1918+ 69A3             >
1918+ 69A3 70 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1918+ 69A5             >
1918+ 69A5             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1918+ 69A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1918+ 69A5 ~           >
1918+ 69A5 ~           >
1918+ 69A5             >                endif           ; ok        // for other definitions it "points" the correct handler
1918+ 69A5             >                // Use of "; ok" to suppress "warning[fwdref]"
1918+ 69A5             >
1918+ 69A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1919+ 69A5 D9                           exx
1920+ 69A6 E1                           pop     hl                  // address
1921+ 69A7 D1                           pop     de                  // < n
1922+ 69A8 73                           ld      (hl), e             // low-byte
1923+ 69A9 23                           inc     hl
1924+ 69AA 72                           ld      (hl), d             // high-byte
1925+ 69AB D9                           exx
1926+ 69AC                              next
1926+ 69AC DD E9       >                jp      (ix)
1927+ 69AE
1928+ 69AE              //  ______________________________________________________________________
1929+ 69AE              //
1930+ 69AE              // c@           a -- c
1931+ 69AE              // fetch a character n from address a
1932+ 69AE                              New_Def CFETCH, "C@", is_code, is_normal
1932+ 69AE             >
1932+ 69AE             >Dict_Ptr        defl    $
1932+ 69AE             >
1932+ 69AE             >//              ______________________________________________________________________
1932+ 69AE             >//              Heap part
1932+ 69AE             >
1932+ 69AE             >
1932+ 69AE             >                org     (Heap_Ptr & $1FFF) + $E000
1932+ E372             >
1932+ E372             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1932+ E372             >Latest_Definition defl  Heap_Ptr
1932+ E372             >
1932+ E372             >                // dummy db directives used to calculate length of namec
1932+ E372 43 40       >                db      "C@"
1932+ E374             >len_NFA         defl    $ - temp_NFA
1932+ E374             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1932+ E372             >
1932+ E372 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1932+ E373 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1932+ E375             >                org     $-1                 // alter last byte of Name just above to set
1932+ E374 C0          >                db      {b $} | END_BIT     // msb as name end
1932+ E375             >
1932+ E375 6C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1932+ E377             >Prev_Ptr        defl    Heap_Ptr
1932+ E377             >
1932+ E377             >mirror_Ptr      defl    $
1932+ E377             >
1932+ E377 B0 69       >                dw      Dict_Ptr + 2        // xt
1932+ E379             >Heap_Ptr        defl    $ - $E000           // save current HP
1932+ E379             >
1932+ E379             >Current_HP      defl  $ - $E000             // used to set HP once!
1932+ E379             >
1932+ E379             >//              ______________________________________________________________________
1932+ E379             >//              Dictionary part
1932+ E379             >
1932+ E379             >                org     Dict_Ptr
1932+ 69AE             >
1932+ 69AE 77 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1932+ 69B0             >
1932+ 69B0             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1932+ 69B0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1932+ 69B0 ~           >
1932+ 69B0 ~           >
1932+ 69B0             >                endif           ; ok        // for other definitions it "points" the correct handler
1932+ 69B0             >                // Use of "; ok" to suppress "warning[fwdref]"
1932+ 69B0             >
1932+ 69B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1933+ 69B0 E1                           pop     hl
1934+ 69B1 6E                           ld      l, (hl)             // low-byte
1935+ 69B2 26 00                        ld      h, 0
1936+ 69B4
1937+ 69B4                              psh1
1937+ 69B4 E5          >                push    hl
1937+ 69B5 DD E9       >                jp      (ix)
1938+ 69B7
1939+ 69B7              //  ______________________________________________________________________
1940+ 69B7              //
1941+ 69B7              // c!           c a --
1942+ 69B7              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1943+ 69B7                              New_Def CSTORE, "C!", is_code, is_normal
1943+ 69B7             >
1943+ 69B7             >Dict_Ptr        defl    $
1943+ 69B7             >
1943+ 69B7             >//              ______________________________________________________________________
1943+ 69B7             >//              Heap part
1943+ 69B7             >
1943+ 69B7             >
1943+ 69B7             >                org     (Heap_Ptr & $1FFF) + $E000
1943+ E379             >
1943+ E379             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1943+ E379             >Latest_Definition defl  Heap_Ptr
1943+ E379             >
1943+ E379             >                // dummy db directives used to calculate length of namec
1943+ E379 43 21       >                db      "C!"
1943+ E37B             >len_NFA         defl    $ - temp_NFA
1943+ E37B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1943+ E379             >
1943+ E379 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1943+ E37A 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1943+ E37C             >                org     $-1                 // alter last byte of Name just above to set
1943+ E37B A1          >                db      {b $} | END_BIT     // msb as name end
1943+ E37C             >
1943+ E37C 72 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1943+ E37E             >Prev_Ptr        defl    Heap_Ptr
1943+ E37E             >
1943+ E37E             >mirror_Ptr      defl    $
1943+ E37E             >
1943+ E37E B9 69       >                dw      Dict_Ptr + 2        // xt
1943+ E380             >Heap_Ptr        defl    $ - $E000           // save current HP
1943+ E380             >
1943+ E380             >Current_HP      defl  $ - $E000             // used to set HP once!
1943+ E380             >
1943+ E380             >//              ______________________________________________________________________
1943+ E380             >//              Dictionary part
1943+ E380             >
1943+ E380             >                org     Dict_Ptr
1943+ 69B7             >
1943+ 69B7 7E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1943+ 69B9             >
1943+ 69B9             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1943+ 69B9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1943+ 69B9 ~           >
1943+ 69B9 ~           >
1943+ 69B9             >                endif           ; ok        // for other definitions it "points" the correct handler
1943+ 69B9             >                // Use of "; ok" to suppress "warning[fwdref]"
1943+ 69B9             >
1943+ 69B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1944+ 69B9 D9                           exx
1945+ 69BA E1                           pop     hl                  // < address
1946+ 69BB D1                           pop     de
1947+ 69BC 73                           ld      (hl), e             // low-byte
1948+ 69BD D9                           exx
1949+ 69BE                              next
1949+ 69BE DD E9       >                jp      (ix)
1950+ 69C0
1951+ 69C0              //  ______________________________________________________________________
1952+ 69C0              //
1953+ 69C0              // 2@           a -- d
1954+ 69C0              // fetch a 32 bits number d from address a and leaves it on top of the
1955+ 69C0              // stack as two single numbers, high part as top of the stack.
1956+ 69C0              // A double number is normally kept in CPU registers as HLDE.
1957+ 69C0              // On stack a double number is treated as two single numbers
1958+ 69C0              // where BC is on the top of the stack and HL is the second from top,
1959+ 69C0              // so the sign of the number can be checked on top of stack
1960+ 69C0              // and in the stack memory it appears as LHED.
1961+ 69C0                              New_Def TWO_FETCH, "2@", is_code, is_normal
1961+ 69C0             >
1961+ 69C0             >Dict_Ptr        defl    $
1961+ 69C0             >
1961+ 69C0             >//              ______________________________________________________________________
1961+ 69C0             >//              Heap part
1961+ 69C0             >
1961+ 69C0             >
1961+ 69C0             >                org     (Heap_Ptr & $1FFF) + $E000
1961+ E380             >
1961+ E380             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1961+ E380             >Latest_Definition defl  Heap_Ptr
1961+ E380             >
1961+ E380             >                // dummy db directives used to calculate length of namec
1961+ E380 32 40       >                db      "2@"
1961+ E382             >len_NFA         defl    $ - temp_NFA
1961+ E382             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1961+ E380             >
1961+ E380 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1961+ E381 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1961+ E383             >                org     $-1                 // alter last byte of Name just above to set
1961+ E382 C0          >                db      {b $} | END_BIT     // msb as name end
1961+ E383             >
1961+ E383 79 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1961+ E385             >Prev_Ptr        defl    Heap_Ptr
1961+ E385             >
1961+ E385             >mirror_Ptr      defl    $
1961+ E385             >
1961+ E385 C2 69       >                dw      Dict_Ptr + 2        // xt
1961+ E387             >Heap_Ptr        defl    $ - $E000           // save current HP
1961+ E387             >
1961+ E387             >Current_HP      defl  $ - $E000             // used to set HP once!
1961+ E387             >
1961+ E387             >//              ______________________________________________________________________
1961+ E387             >//              Dictionary part
1961+ E387             >
1961+ E387             >                org     Dict_Ptr
1961+ 69C0             >
1961+ 69C0 85 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1961+ 69C2             >
1961+ 69C2             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1961+ 69C2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1961+ 69C2 ~           >
1961+ 69C2 ~           >
1961+ 69C2             >                endif           ; ok        // for other definitions it "points" the correct handler
1961+ 69C2             >                // Use of "; ok" to suppress "warning[fwdref]"
1961+ 69C2             >
1961+ 69C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1962+ 69C2 D9                           exx
1963+ 69C3 E1                           pop     hl                  // address
1964+ 69C4 5E                           ld      e, (hl)             // low-byte
1965+ 69C5 23                           inc     hl
1966+ 69C6 56                           ld      d, (hl)             // high-byte
1967+ 69C7 23                           inc     hl
1968+ 69C8 7E                           ld      a, (hl)             // low-byte
1969+ 69C9 23                           inc     hl
1970+ 69CA 66                           ld      h, (hl)             // high-byte
1971+ 69CB 6F                           ld      l, a
1972+ 69CC E5                           push    hl
1973+ 69CD D5                           push    de
1974+ 69CE D9                           exx
1975+ 69CF                              next
1975+ 69CF DD E9       >                jp      (ix)
1976+ 69D1
1977+ 69D1              //  ______________________________________________________________________
1978+ 69D1              //
1979+ 69D1              // 2!           d a --
1980+ 69D1              // stores a 32 bits number d from address a and leaves it on top of the
1981+ 69D1              // stack as two single numbers, high part as top of the stack.
1982+ 69D1              // A double number is normally kept in CPU registers as HLDE.
1983+ 69D1              // On stack a double number is treated as two single numbers
1984+ 69D1              // where BC is on the top of the stack and HL is the second from top,
1985+ 69D1              // so the sign of the number can be checked on top of stack
1986+ 69D1              // and in the stack memory it appears as LHED.
1987+ 69D1                              New_Def TWO_STORE, "2!", is_code, is_normal
1987+ 69D1             >
1987+ 69D1             >Dict_Ptr        defl    $
1987+ 69D1             >
1987+ 69D1             >//              ______________________________________________________________________
1987+ 69D1             >//              Heap part
1987+ 69D1             >
1987+ 69D1             >
1987+ 69D1             >                org     (Heap_Ptr & $1FFF) + $E000
1987+ E387             >
1987+ E387             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1987+ E387             >Latest_Definition defl  Heap_Ptr
1987+ E387             >
1987+ E387             >                // dummy db directives used to calculate length of namec
1987+ E387 32 21       >                db      "2!"
1987+ E389             >len_NFA         defl    $ - temp_NFA
1987+ E389             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1987+ E387             >
1987+ E387 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1987+ E388 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1987+ E38A             >                org     $-1                 // alter last byte of Name just above to set
1987+ E389 A1          >                db      {b $} | END_BIT     // msb as name end
1987+ E38A             >
1987+ E38A 80 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1987+ E38C             >Prev_Ptr        defl    Heap_Ptr
1987+ E38C             >
1987+ E38C             >mirror_Ptr      defl    $
1987+ E38C             >
1987+ E38C D3 69       >                dw      Dict_Ptr + 2        // xt
1987+ E38E             >Heap_Ptr        defl    $ - $E000           // save current HP
1987+ E38E             >
1987+ E38E             >Current_HP      defl  $ - $E000             // used to set HP once!
1987+ E38E             >
1987+ E38E             >//              ______________________________________________________________________
1987+ E38E             >//              Dictionary part
1987+ E38E             >
1987+ E38E             >                org     Dict_Ptr
1987+ 69D1             >
1987+ 69D1 8C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1987+ 69D3             >
1987+ 69D3             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1987+ 69D3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1987+ 69D3 ~           >
1987+ 69D3 ~           >
1987+ 69D3             >                endif           ; ok        // for other definitions it "points" the correct handler
1987+ 69D3             >                // Use of "; ok" to suppress "warning[fwdref]"
1987+ 69D3             >
1987+ 69D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1988+ 69D3 D9                           exx
1989+ 69D4 E1                           pop     hl                  // address
1990+ 69D5 C1                           pop     bc                  // < high-part
1991+ 69D6 D1                           pop     de                  // < low-part > Instruction Pointer
1992+ 69D7 71                           ld      (hl), c
1993+ 69D8 23                           inc     hl
1994+ 69D9 70                           ld      (hl), b
1995+ 69DA 23                           inc     hl
1996+ 69DB 73                           ld      (hl), e
1997+ 69DC 23                           inc     hl
1998+ 69DD 72                           ld      (hl), d
1999+ 69DE D9                           exx
2000+ 69DF                              next
2000+ 69DF DD E9       >                jp      (ix)
2001+ 69E1
2002+ 69E1              //  ______________________________________________________________________
2003+ 69E1              //
2004+ 69E1              // p@           a -- c
2005+ 69E1              // Read one byte from port a and leave the result on top of stack
2006+ 69E1                              New_Def PFETCH, "P@", is_code, is_normal
2006+ 69E1             >
2006+ 69E1             >Dict_Ptr        defl    $
2006+ 69E1             >
2006+ 69E1             >//              ______________________________________________________________________
2006+ 69E1             >//              Heap part
2006+ 69E1             >
2006+ 69E1             >
2006+ 69E1             >                org     (Heap_Ptr & $1FFF) + $E000
2006+ E38E             >
2006+ E38E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2006+ E38E             >Latest_Definition defl  Heap_Ptr
2006+ E38E             >
2006+ E38E             >                // dummy db directives used to calculate length of namec
2006+ E38E 50 40       >                db      "P@"
2006+ E390             >len_NFA         defl    $ - temp_NFA
2006+ E390             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2006+ E38E             >
2006+ E38E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2006+ E38F 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2006+ E391             >                org     $-1                 // alter last byte of Name just above to set
2006+ E390 C0          >                db      {b $} | END_BIT     // msb as name end
2006+ E391             >
2006+ E391 87 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2006+ E393             >Prev_Ptr        defl    Heap_Ptr
2006+ E393             >
2006+ E393             >mirror_Ptr      defl    $
2006+ E393             >
2006+ E393 E3 69       >                dw      Dict_Ptr + 2        // xt
2006+ E395             >Heap_Ptr        defl    $ - $E000           // save current HP
2006+ E395             >
2006+ E395             >Current_HP      defl  $ - $E000             // used to set HP once!
2006+ E395             >
2006+ E395             >//              ______________________________________________________________________
2006+ E395             >//              Dictionary part
2006+ E395             >
2006+ E395             >                org     Dict_Ptr
2006+ 69E1             >
2006+ 69E1 93 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2006+ 69E3             >
2006+ 69E3             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2006+ 69E3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2006+ 69E3 ~           >
2006+ 69E3 ~           >
2006+ 69E3             >                endif           ; ok        // for other definitions it "points" the correct handler
2006+ 69E3             >                // Use of "; ok" to suppress "warning[fwdref]"
2006+ 69E3             >
2006+ 69E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2007+ 69E3 D9                           exx
2008+ 69E4 C1                           pop     bc
2009+ 69E5 26 00                        ld      h, 0
2010+ 69E7 ED 68                        in      l, (c)
2011+ 69E9 E5                           push    hl
2012+ 69EA D9                           exx
2013+ 69EB                              next
2013+ 69EB DD E9       >                jp      (ix)
2014+ 69ED
2015+ 69ED              //  ______________________________________________________________________
2016+ 69ED              //
2017+ 69ED              // p!           c a --
2018+ 69ED              // Send one byte (top of stack) to port a
2019+ 69ED                              New_Def PSTORE, "P!", is_code, is_normal
2019+ 69ED             >
2019+ 69ED             >Dict_Ptr        defl    $
2019+ 69ED             >
2019+ 69ED             >//              ______________________________________________________________________
2019+ 69ED             >//              Heap part
2019+ 69ED             >
2019+ 69ED             >
2019+ 69ED             >                org     (Heap_Ptr & $1FFF) + $E000
2019+ E395             >
2019+ E395             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2019+ E395             >Latest_Definition defl  Heap_Ptr
2019+ E395             >
2019+ E395             >                // dummy db directives used to calculate length of namec
2019+ E395 50 21       >                db      "P!"
2019+ E397             >len_NFA         defl    $ - temp_NFA
2019+ E397             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2019+ E395             >
2019+ E395 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2019+ E396 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2019+ E398             >                org     $-1                 // alter last byte of Name just above to set
2019+ E397 A1          >                db      {b $} | END_BIT     // msb as name end
2019+ E398             >
2019+ E398 8E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2019+ E39A             >Prev_Ptr        defl    Heap_Ptr
2019+ E39A             >
2019+ E39A             >mirror_Ptr      defl    $
2019+ E39A             >
2019+ E39A EF 69       >                dw      Dict_Ptr + 2        // xt
2019+ E39C             >Heap_Ptr        defl    $ - $E000           // save current HP
2019+ E39C             >
2019+ E39C             >Current_HP      defl  $ - $E000             // used to set HP once!
2019+ E39C             >
2019+ E39C             >//              ______________________________________________________________________
2019+ E39C             >//              Dictionary part
2019+ E39C             >
2019+ E39C             >                org     Dict_Ptr
2019+ 69ED             >
2019+ 69ED 9A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2019+ 69EF             >
2019+ 69EF             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2019+ 69EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
2019+ 69EF ~           >
2019+ 69EF ~           >
2019+ 69EF             >                endif           ; ok        // for other definitions it "points" the correct handler
2019+ 69EF             >                // Use of "; ok" to suppress "warning[fwdref]"
2019+ 69EF             >
2019+ 69EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2020+ 69EF D9                           exx
2021+ 69F0 C1                           pop     bc
2022+ 69F1 E1                           pop     hl                  // < c
2023+ 69F2 ED 69                        out     (c), l              // low-byte
2024+ 69F4 D9                           exx
2025+ 69F5                              next
2025+ 69F5 DD E9       >                jp      (ix)
2026+ 69F7
2027+ 69F7
2028+ 69F7              //  ______________________________________________________________________
2029+ 69F7              //
2030+ 69F7              // 2*           n1 -- n2
2031+ 69F7              // doubles the number at top of stack
2032+ 69F7                              New_Def TWO_MUL, "2*", is_code, is_normal
2032+ 69F7             >
2032+ 69F7             >Dict_Ptr        defl    $
2032+ 69F7             >
2032+ 69F7             >//              ______________________________________________________________________
2032+ 69F7             >//              Heap part
2032+ 69F7             >
2032+ 69F7             >
2032+ 69F7             >                org     (Heap_Ptr & $1FFF) + $E000
2032+ E39C             >
2032+ E39C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2032+ E39C             >Latest_Definition defl  Heap_Ptr
2032+ E39C             >
2032+ E39C             >                // dummy db directives used to calculate length of namec
2032+ E39C 32 2A       >                db      "2*"
2032+ E39E             >len_NFA         defl    $ - temp_NFA
2032+ E39E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2032+ E39C             >
2032+ E39C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2032+ E39D 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2032+ E39F             >                org     $-1                 // alter last byte of Name just above to set
2032+ E39E AA          >                db      {b $} | END_BIT     // msb as name end
2032+ E39F             >
2032+ E39F 95 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2032+ E3A1             >Prev_Ptr        defl    Heap_Ptr
2032+ E3A1             >
2032+ E3A1             >mirror_Ptr      defl    $
2032+ E3A1             >
2032+ E3A1 F9 69       >                dw      Dict_Ptr + 2        // xt
2032+ E3A3             >Heap_Ptr        defl    $ - $E000           // save current HP
2032+ E3A3             >
2032+ E3A3             >Current_HP      defl  $ - $E000             // used to set HP once!
2032+ E3A3             >
2032+ E3A3             >//              ______________________________________________________________________
2032+ E3A3             >//              Dictionary part
2032+ E3A3             >
2032+ E3A3             >                org     Dict_Ptr
2032+ 69F7             >
2032+ 69F7 A1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2032+ 69F9             >
2032+ 69F9             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2032+ 69F9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2032+ 69F9 ~           >
2032+ 69F9 ~           >
2032+ 69F9             >                endif           ; ok        // for other definitions it "points" the correct handler
2032+ 69F9             >                // Use of "; ok" to suppress "warning[fwdref]"
2032+ 69F9             >
2032+ 69F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2033+ 69F9              Two_Mul_Ptr:
2034+ 69F9 E1                           pop     hl
2035+ 69FA 29                           add     hl, hl
2036+ 69FB
2037+ 69FB                              psh1
2037+ 69FB E5          >                push    hl
2037+ 69FC DD E9       >                jp      (ix)
2038+ 69FE
2039+ 69FE              //  ______________________________________________________________________
2040+ 69FE              //
2041+ 69FE              // 2/           n1 -- n2
2042+ 69FE              // halves the top of stack, sign is unchanged
2043+ 69FE                              New_Def TWO_DIV, "2/", is_code, is_normal
2043+ 69FE             >
2043+ 69FE             >Dict_Ptr        defl    $
2043+ 69FE             >
2043+ 69FE             >//              ______________________________________________________________________
2043+ 69FE             >//              Heap part
2043+ 69FE             >
2043+ 69FE             >
2043+ 69FE             >                org     (Heap_Ptr & $1FFF) + $E000
2043+ E3A3             >
2043+ E3A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2043+ E3A3             >Latest_Definition defl  Heap_Ptr
2043+ E3A3             >
2043+ E3A3             >                // dummy db directives used to calculate length of namec
2043+ E3A3 32 2F       >                db      "2/"
2043+ E3A5             >len_NFA         defl    $ - temp_NFA
2043+ E3A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2043+ E3A3             >
2043+ E3A3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2043+ E3A4 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2043+ E3A6             >                org     $-1                 // alter last byte of Name just above to set
2043+ E3A5 AF          >                db      {b $} | END_BIT     // msb as name end
2043+ E3A6             >
2043+ E3A6 9C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2043+ E3A8             >Prev_Ptr        defl    Heap_Ptr
2043+ E3A8             >
2043+ E3A8             >mirror_Ptr      defl    $
2043+ E3A8             >
2043+ E3A8 00 6A       >                dw      Dict_Ptr + 2        // xt
2043+ E3AA             >Heap_Ptr        defl    $ - $E000           // save current HP
2043+ E3AA             >
2043+ E3AA             >Current_HP      defl  $ - $E000             // used to set HP once!
2043+ E3AA             >
2043+ E3AA             >//              ______________________________________________________________________
2043+ E3AA             >//              Dictionary part
2043+ E3AA             >
2043+ E3AA             >                org     Dict_Ptr
2043+ 69FE             >
2043+ 69FE A8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2043+ 6A00             >
2043+ 6A00             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2043+ 6A00 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2043+ 6A00 ~           >
2043+ 6A00 ~           >
2043+ 6A00             >                endif           ; ok        // for other definitions it "points" the correct handler
2043+ 6A00             >                // Use of "; ok" to suppress "warning[fwdref]"
2043+ 6A00             >
2043+ 6A00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2044+ 6A00 E1                           pop     hl
2045+ 6A01 CB 2C                        sra     h
2046+ 6A03 CB 1D                        rr      l
2047+ 6A05
2048+ 6A05                              psh1
2048+ 6A05 E5          >                push    hl
2048+ 6A06 DD E9       >                jp      (ix)
2049+ 6A08
2050+ 6A08              //  ______________________________________________________________________
2051+ 6A08              //
2052+ 6A08              // lshift       n1 u -- n2
2053+ 6A08              // bit left shift of u bits
2054+ 6A08                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2054+ 6A08             >
2054+ 6A08             >Dict_Ptr        defl    $
2054+ 6A08             >
2054+ 6A08             >//              ______________________________________________________________________
2054+ 6A08             >//              Heap part
2054+ 6A08             >
2054+ 6A08             >
2054+ 6A08             >                org     (Heap_Ptr & $1FFF) + $E000
2054+ E3AA             >
2054+ E3AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2054+ E3AA             >Latest_Definition defl  Heap_Ptr
2054+ E3AA             >
2054+ E3AA             >                // dummy db directives used to calculate length of namec
2054+ E3AA 4C 53 48 49 >                db      "LSHIFT"
2054+ E3AE 46 54       >
2054+ E3B0             >len_NFA         defl    $ - temp_NFA
2054+ E3B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2054+ E3AA             >
2054+ E3AA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2054+ E3AB 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2054+ E3AF 46 54       >
2054+ E3B1             >                org     $-1                 // alter last byte of Name just above to set
2054+ E3B0 D4          >                db      {b $} | END_BIT     // msb as name end
2054+ E3B1             >
2054+ E3B1 A3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2054+ E3B3             >Prev_Ptr        defl    Heap_Ptr
2054+ E3B3             >
2054+ E3B3             >mirror_Ptr      defl    $
2054+ E3B3             >
2054+ E3B3 0A 6A       >                dw      Dict_Ptr + 2        // xt
2054+ E3B5             >Heap_Ptr        defl    $ - $E000           // save current HP
2054+ E3B5             >
2054+ E3B5             >Current_HP      defl  $ - $E000             // used to set HP once!
2054+ E3B5             >
2054+ E3B5             >//              ______________________________________________________________________
2054+ E3B5             >//              Dictionary part
2054+ E3B5             >
2054+ E3B5             >                org     Dict_Ptr
2054+ 6A08             >
2054+ 6A08 B3 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2054+ 6A0A             >
2054+ 6A0A             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2054+ 6A0A ~           >                call    runcode ; ok        // for primitive definitions  actual code
2054+ 6A0A ~           >
2054+ 6A0A ~           >
2054+ 6A0A             >                endif           ; ok        // for other definitions it "points" the correct handler
2054+ 6A0A             >                // Use of "; ok" to suppress "warning[fwdref]"
2054+ 6A0A             >
2054+ 6A0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2055+ 6A0A D9                           exx
2056+ 6A0B C1                           pop     bc
2057+ 6A0C 41                           ld      b, c
2058+ 6A0D D1                           pop     de
2059+ 6A0E ED 28                        bsla    de, b
2060+ 6A10 D5                           push    de
2061+ 6A11 D9                           exx
2062+ 6A12                              next
2062+ 6A12 DD E9       >                jp      (ix)
2063+ 6A14
2064+ 6A14              //  ______________________________________________________________________
2065+ 6A14              //
2066+ 6A14              // rshift       n1 u -- n2
2067+ 6A14              // bit right shift of u bits
2068+ 6A14                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2068+ 6A14             >
2068+ 6A14             >Dict_Ptr        defl    $
2068+ 6A14             >
2068+ 6A14             >//              ______________________________________________________________________
2068+ 6A14             >//              Heap part
2068+ 6A14             >
2068+ 6A14             >
2068+ 6A14             >                org     (Heap_Ptr & $1FFF) + $E000
2068+ E3B5             >
2068+ E3B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2068+ E3B5             >Latest_Definition defl  Heap_Ptr
2068+ E3B5             >
2068+ E3B5             >                // dummy db directives used to calculate length of namec
2068+ E3B5 52 53 48 49 >                db      "RSHIFT"
2068+ E3B9 46 54       >
2068+ E3BB             >len_NFA         defl    $ - temp_NFA
2068+ E3BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2068+ E3B5             >
2068+ E3B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2068+ E3B6 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2068+ E3BA 46 54       >
2068+ E3BC             >                org     $-1                 // alter last byte of Name just above to set
2068+ E3BB D4          >                db      {b $} | END_BIT     // msb as name end
2068+ E3BC             >
2068+ E3BC AA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2068+ E3BE             >Prev_Ptr        defl    Heap_Ptr
2068+ E3BE             >
2068+ E3BE             >mirror_Ptr      defl    $
2068+ E3BE             >
2068+ E3BE 16 6A       >                dw      Dict_Ptr + 2        // xt
2068+ E3C0             >Heap_Ptr        defl    $ - $E000           // save current HP
2068+ E3C0             >
2068+ E3C0             >Current_HP      defl  $ - $E000             // used to set HP once!
2068+ E3C0             >
2068+ E3C0             >//              ______________________________________________________________________
2068+ E3C0             >//              Dictionary part
2068+ E3C0             >
2068+ E3C0             >                org     Dict_Ptr
2068+ 6A14             >
2068+ 6A14 BE 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2068+ 6A16             >
2068+ 6A16             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2068+ 6A16 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2068+ 6A16 ~           >
2068+ 6A16 ~           >
2068+ 6A16             >                endif           ; ok        // for other definitions it "points" the correct handler
2068+ 6A16             >                // Use of "; ok" to suppress "warning[fwdref]"
2068+ 6A16             >
2068+ 6A16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2069+ 6A16 D9                           exx
2070+ 6A17 C1                           pop     bc
2071+ 6A18 41                           ld      b, c
2072+ 6A19 D1                           pop     de
2073+ 6A1A ED 2A                        bsrl    de, b
2074+ 6A1C D5                           push    de
2075+ 6A1D D9                           exx
2076+ 6A1E                              next
2076+ 6A1E DD E9       >                jp      (ix)
2077+ 6A20
2078+ 6A20              //  ______________________________________________________________________
2079+ 6A20              //
2080+ 6A20              // cells        n1 -- n2
2081+ 6A20              // decrement by 2 top of stack
2082+ 6A20                              New_Def CELLS, "CELLS", is_code, is_normal
2082+ 6A20             >
2082+ 6A20             >Dict_Ptr        defl    $
2082+ 6A20             >
2082+ 6A20             >//              ______________________________________________________________________
2082+ 6A20             >//              Heap part
2082+ 6A20             >
2082+ 6A20             >
2082+ 6A20             >                org     (Heap_Ptr & $1FFF) + $E000
2082+ E3C0             >
2082+ E3C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2082+ E3C0             >Latest_Definition defl  Heap_Ptr
2082+ E3C0             >
2082+ E3C0             >                // dummy db directives used to calculate length of namec
2082+ E3C0 43 45 4C 4C >                db      "CELLS"
2082+ E3C4 53          >
2082+ E3C5             >len_NFA         defl    $ - temp_NFA
2082+ E3C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2082+ E3C0             >
2082+ E3C0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2082+ E3C1 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2082+ E3C5 53          >
2082+ E3C6             >                org     $-1                 // alter last byte of Name just above to set
2082+ E3C5 D3          >                db      {b $} | END_BIT     // msb as name end
2082+ E3C6             >
2082+ E3C6 B5 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2082+ E3C8             >Prev_Ptr        defl    Heap_Ptr
2082+ E3C8             >
2082+ E3C8             >mirror_Ptr      defl    $
2082+ E3C8             >
2082+ E3C8 22 6A       >                dw      Dict_Ptr + 2        // xt
2082+ E3CA             >Heap_Ptr        defl    $ - $E000           // save current HP
2082+ E3CA             >
2082+ E3CA             >Current_HP      defl  $ - $E000             // used to set HP once!
2082+ E3CA             >
2082+ E3CA             >//              ______________________________________________________________________
2082+ E3CA             >//              Dictionary part
2082+ E3CA             >
2082+ E3CA             >                org     Dict_Ptr
2082+ 6A20             >
2082+ 6A20 C8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2082+ 6A22             >
2082+ 6A22             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2082+ 6A22 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2082+ 6A22 ~           >
2082+ 6A22 ~           >
2082+ 6A22             >                endif           ; ok        // for other definitions it "points" the correct handler
2082+ 6A22             >                // Use of "; ok" to suppress "warning[fwdref]"
2082+ 6A22             >
2082+ 6A22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2083+ 6A22 18 D5                        jr      Two_Mul_Ptr
2084+ 6A24
2085+ 6A24
2086+ 6A24              //  ______________________________________________________________________
2087+ 6A24
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
 121  6A24                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
   1+ 6A24              //  ______________________________________________________________________
   2+ 6A24              //
   3+ 6A24              //  L1.asm
   4+ 6A24              //
   5+ 6A24              //  Level-1 definitions and derivate
   6+ 6A24              //  ______________________________________________________________________
   7+ 6A24
   8+ 6A24              //  ______________________________________________________________________
   9+ 6A24              //
  10+ 6A24              // :            -- cccc     ( compile time )
  11+ 6A24              //              i*x -- j*x  ( run time )
  12+ 6A24              // Colon Definition
  13+ 6A24                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6A24             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6A24             >
  13+ 6A24             >Dict_Ptr        defl    $
  13+ 6A24             >
  13+ 6A24             >//              ______________________________________________________________________
  13+ 6A24             >//              Heap part
  13+ 6A24             >
  13+ 6A24             >
  13+ 6A24             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3CA             >
  13+ E3CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3CA             >Latest_Definition defl  Heap_Ptr
  13+ E3CA             >
  13+ E3CA             >                // dummy db directives used to calculate length of namec
  13+ E3CA 3A          >                db      ":"
  13+ E3CB             >len_NFA         defl    $ - temp_NFA
  13+ E3CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3CA             >
  13+ E3CA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3CB 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3CC             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3CB BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3CC             >
  13+ E3CC C0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CE             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CE             >
  13+ E3CE             >mirror_Ptr      defl    $
  13+ E3CE             >
  13+ E3CE 26 6A       >                dw      Dict_Ptr + 2        // xt
  13+ E3D0             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3D0             >
  13+ E3D0             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3D0             >
  13+ E3D0             >//              ______________________________________________________________________
  13+ E3D0             >//              Dictionary part
  13+ E3D0             >
  13+ E3D0             >                org     Dict_Ptr
  13+ 6A24             >
  13+ 6A24 CE 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 6A26             >
  13+ 6A26             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6A26 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6A29             >
  13+ 6A29             >
  13+ 6A29             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6A29             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6A29             >
  13+ 6A29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6A29
  15+ 6A29 1B 6E                        dw      QEXEC                   // ?exec
  16+ 6A2B E6 6D                        dw      STORE_CSP               // !csp
  17+ 6A2D 57 6B 9B 69                  dw      CURRENT, FETCH          // current @
  18+ 6A31 51 6B A5 69                  dw      CONTEXT, STORE          // context !
  19+ 6A35 07 74                        dw      CREATE                  // create  ( forward )
  20+ 6A37 9F 6E                        dw      SMUDGE                  // dmudge
  21+ 6A39 90 6E                        dw      SQUARED_CLOSE           // ]
  22+ 6A3B DB 6E                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6A3D                                                              // ... immediate
  24+ 6A3D              Enter_Ptr:
  25+ 6A3D                              // via call coded in CFA
  26+ 6A3D EB                           ex      de, hl //**
  27+ 6A3E                              // *** ldhlrp
  28+ 6A3E 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 6A3F 70                           ld      (hl), b
  30+ 6A40 2B                           dec     hl
  31+ 6A41 71                           ld      (hl), c
  32+ 6A42                              // *** ldrphl
  33+ 6A42 EB                           ex      de, hl //**
  34+ 6A43
  35+ 6A43
  36+ 6A43 C1                           pop     bc                  // points to PFA of "this" word
  37+ 6A44                              next
  37+ 6A44 DD E9       >                jp      (ix)
  38+ 6A46
  39+ 6A46              //  ______________________________________________________________________
  40+ 6A46              //
  41+ 6A46              // ;            --
  42+ 6A46              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 6A46                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 6A46             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 6A46             >
  43+ 6A46             >Dict_Ptr        defl    $
  43+ 6A46             >
  43+ 6A46             >//              ______________________________________________________________________
  43+ 6A46             >//              Heap part
  43+ 6A46             >
  43+ 6A46             >
  43+ 6A46             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3D0             >
  43+ E3D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3D0             >Latest_Definition defl  Heap_Ptr
  43+ E3D0             >
  43+ E3D0             >                // dummy db directives used to calculate length of namec
  43+ E3D0 3B          >                db      ";"
  43+ E3D1             >len_NFA         defl    $ - temp_NFA
  43+ E3D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3D0             >
  43+ E3D0 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3D1 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3D2             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3D1 BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3D2             >
  43+ E3D2 CA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D4             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D4             >
  43+ E3D4             >mirror_Ptr      defl    $
  43+ E3D4             >
  43+ E3D4 48 6A       >                dw      Dict_Ptr + 2        // xt
  43+ E3D6             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D6             >
  43+ E3D6             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D6             >
  43+ E3D6             >//              ______________________________________________________________________
  43+ E3D6             >//              Dictionary part
  43+ E3D6             >
  43+ E3D6             >                org     Dict_Ptr
  43+ 6A46             >
  43+ 6A46 D4 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 6A48             >
  43+ 6A48             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 6A48 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 6A4B             >
  43+ 6A4B             >
  43+ 6A4B             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 6A4B             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 6A4B             >
  43+ 6A4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 6A4B
  45+ 6A4B 3B 6E                        dw      QCSP                    // ?csp
  46+ 6A4D 63 6E 53 68                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 6A51 9F 6E                        dw      SMUDGE                  // smudge
  48+ 6A53 83 6E                        dw      SQUARED_OPEN            // [
  49+ 6A55 53 68                        dw      EXIT                    // ; immediate
  50+ 6A57
  51+ 6A57              //  ______________________________________________________________________
  52+ 6A57              //
  53+ 6A57              // noop         --
  54+ 6A57
  55+ 6A57                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 6A57             >
  55+ 6A57             >Dict_Ptr        defl    $
  55+ 6A57             >
  55+ 6A57             >//              ______________________________________________________________________
  55+ 6A57             >//              Heap part
  55+ 6A57             >
  55+ 6A57             >
  55+ 6A57             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D6             >
  55+ E3D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D6             >Latest_Definition defl  Heap_Ptr
  55+ E3D6             >
  55+ E3D6             >                // dummy db directives used to calculate length of namec
  55+ E3D6 4E 4F 4F 50 >                db      "NOOP"
  55+ E3DA             >len_NFA         defl    $ - temp_NFA
  55+ E3DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D6             >
  55+ E3D6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D7 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3DB             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3DA D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3DB             >
  55+ E3DB D0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DD             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DD             >
  55+ E3DD             >mirror_Ptr      defl    $
  55+ E3DD             >
  55+ E3DD 59 6A       >                dw      Dict_Ptr + 2        // xt
  55+ E3DF             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DF             >
  55+ E3DF             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DF             >
  55+ E3DF             >//              ______________________________________________________________________
  55+ E3DF             >//              Dictionary part
  55+ E3DF             >
  55+ E3DF             >                org     Dict_Ptr
  55+ 6A57             >
  55+ 6A57 DD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 6A59             >
  55+ 6A59             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 6A59 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 6A59 ~           >
  55+ 6A59 ~           >
  55+ 6A59             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 6A59             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 6A59             >
  55+ 6A59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 6A59                              next
  56+ 6A59 DD E9       >                jp      (ix)
  57+ 6A5B
  58+ 6A5B              //  ______________________________________________________________________
  59+ 6A5B              //
  60+ 6A5B              // constant     n -- cccc     ( compile time )
  61+ 6A5B              //              -- n          ( run time )
  62+ 6A5B              // Constant definition.
  63+ 6A5B                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 6A5B             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 6A5B             >
  63+ 6A5B             >Dict_Ptr        defl    $
  63+ 6A5B             >
  63+ 6A5B             >//              ______________________________________________________________________
  63+ 6A5B             >//              Heap part
  63+ 6A5B             >
  63+ 6A5B             >
  63+ 6A5B             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DF             >
  63+ E3DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DF             >Latest_Definition defl  Heap_Ptr
  63+ E3DF             >
  63+ E3DF             >                // dummy db directives used to calculate length of namec
  63+ E3DF 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E3 54 41 4E 54 >
  63+ E3E7             >len_NFA         defl    $ - temp_NFA
  63+ E3E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DF             >
  63+ E3DF 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3E0 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E4 54 41 4E 54 >
  63+ E3E8             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E7 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E8             >
  63+ E3E8 D6 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3EA             >Prev_Ptr        defl    Heap_Ptr
  63+ E3EA             >
  63+ E3EA             >mirror_Ptr      defl    $
  63+ E3EA             >
  63+ E3EA 5D 6A       >                dw      Dict_Ptr + 2        // xt
  63+ E3EC             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3EC             >
  63+ E3EC             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3EC             >
  63+ E3EC             >//              ______________________________________________________________________
  63+ E3EC             >//              Dictionary part
  63+ E3EC             >
  63+ E3EC             >                org     Dict_Ptr
  63+ 6A5B             >
  63+ 6A5B EA 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 6A5D             >
  63+ 6A5D             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 6A5D CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 6A60             >
  63+ 6A60             >
  63+ 6A60             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 6A60             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 6A60             >
  63+ 6A60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 6A60 07 74                        dw      CREATE                  // create
  65+ 6A62 CD 6B                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 6A64 DB 6E                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 6A66              Constant_Ptr:
  68+ 6A66
  69+ 6A66
  70+ 6A66 E1                           pop     hl
  71+ 6A67
  72+ 6A67 7E                           ld      a, (hl)
  73+ 6A68 23                           inc     hl
  74+ 6A69 66                           ld      h, (hl)
  75+ 6A6A 6F                           ld      l, a
  76+ 6A6B E5                           push    hl
  77+ 6A6C                              next
  77+ 6A6C DD E9       >                jp      (ix)
  78+ 6A6E
  79+ 6A6E              //  ______________________________________________________________________
  80+ 6A6E              //
  81+ 6A6E              // variable     n -- cccc     ( compile time )
  82+ 6A6E              //              -- a          ( run time )
  83+ 6A6E              // Variable definition, n is the initial value.
  84+ 6A6E                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 6A6E             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 6A6E             >
  84+ 6A6E             >Dict_Ptr        defl    $
  84+ 6A6E             >
  84+ 6A6E             >//              ______________________________________________________________________
  84+ 6A6E             >//              Heap part
  84+ 6A6E             >
  84+ 6A6E             >
  84+ 6A6E             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3EC             >
  84+ E3EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3EC             >Latest_Definition defl  Heap_Ptr
  84+ E3EC             >
  84+ E3EC             >                // dummy db directives used to calculate length of namec
  84+ E3EC 56 41 52 49 >                db      "VARIABLE"
  84+ E3F0 41 42 4C 45 >
  84+ E3F4             >len_NFA         defl    $ - temp_NFA
  84+ E3F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3EC             >
  84+ E3EC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3ED 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3F1 41 42 4C 45 >
  84+ E3F5             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F4 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F5             >
  84+ E3F5 DF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F7             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F7             >
  84+ E3F7             >mirror_Ptr      defl    $
  84+ E3F7             >
  84+ E3F7 70 6A       >                dw      Dict_Ptr + 2        // xt
  84+ E3F9             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F9             >
  84+ E3F9             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F9             >
  84+ E3F9             >//              ______________________________________________________________________
  84+ E3F9             >//              Dictionary part
  84+ E3F9             >
  84+ E3F9             >                org     Dict_Ptr
  84+ 6A6E             >
  84+ 6A6E F7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 6A70             >
  84+ 6A70             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 6A70 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 6A73             >
  84+ 6A73             >
  84+ 6A73             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 6A73             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 6A73             >
  84+ 6A73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 6A73
  86+ 6A73 92 6A                        dw      ZERO
  87+ 6A75 5D 6A                        dw      CONSTANT                // constant
  88+ 6A77 DB 6E                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 6A79              Variable_Ptr:
  90+ 6A79
  91+ 6A79
  92+ 6A79
  93+ 6A79
  94+ 6A79                              next
  94+ 6A79 DD E9       >                jp      (ix)
  95+ 6A7B
  96+ 6A7B              //  ______________________________________________________________________
  97+ 6A7B              //
  98+ 6A7B              // user         b -- cccc     ( compile time )
  99+ 6A7B              //              -- a          ( run time )
 100+ 6A7B              // User variable definition
 101+ 6A7B                              Colon_Def USER, "USER", is_normal
 101+ 6A7B             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 6A7B             >
 101+ 6A7B             >Dict_Ptr        defl    $
 101+ 6A7B             >
 101+ 6A7B             >//              ______________________________________________________________________
 101+ 6A7B             >//              Heap part
 101+ 6A7B             >
 101+ 6A7B             >
 101+ 6A7B             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F9             >
 101+ E3F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F9             >Latest_Definition defl  Heap_Ptr
 101+ E3F9             >
 101+ E3F9             >                // dummy db directives used to calculate length of namec
 101+ E3F9 55 53 45 52 >                db      "USER"
 101+ E3FD             >len_NFA         defl    $ - temp_NFA
 101+ E3FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F9             >
 101+ E3F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3FA 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FE             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FD D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FE             >
 101+ E3FE EC 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E400             >Prev_Ptr        defl    Heap_Ptr
 101+ E400             >
 101+ E400             >mirror_Ptr      defl    $
 101+ E400             >
 101+ E400 7D 6A       >                dw      Dict_Ptr + 2        // xt
 101+ E402             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E402             >
 101+ E402             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E402             >
 101+ E402             >//              ______________________________________________________________________
 101+ E402             >//              Dictionary part
 101+ E402             >
 101+ E402             >                org     Dict_Ptr
 101+ 6A7B             >
 101+ 6A7B 00 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 6A7D             >
 101+ 6A7D             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 6A7D CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 6A80             >
 101+ 6A80             >
 101+ 6A80             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 6A80             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 6A80             >
 101+ 6A80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 6A80
 103+ 6A80 07 74                        dw      CREATE                  // create
 104+ 6A82 DC 6B                        dw      CCOMMA                  // c,
 105+ 6A84 DB 6E                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 6A86
 107+ 6A86
 108+ 6A86              User_Ptr:
 109+ 6A86                              // via call coded in CFA
 110+ 6A86 E1                           pop     hl
 111+ 6A87
 112+ 6A87 7E                           ld      a, (hl)
 113+ 6A88 2A 94 63                     ld      hl, (USER_Pointer)
 114+ 6A8B ED 31                        add     hl, a
 115+ 6A8D E5                           push    hl
 116+ 6A8E                              next
 116+ 6A8E DD E9       >                jp      (ix)
 117+ 6A90
 118+ 6A90              //  ______________________________________________________________________
 119+ 6A90              //
 120+ 6A90                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 6A90             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 6A90             >
 120+ 6A90             >Dict_Ptr        defl    $
 120+ 6A90             >
 120+ 6A90             >//              ______________________________________________________________________
 120+ 6A90             >//              Heap part
 120+ 6A90             >
 120+ 6A90             >
 120+ 6A90             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E402             >
 120+ E402             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E402             >Latest_Definition defl  Heap_Ptr
 120+ E402             >
 120+ E402             >                // dummy db directives used to calculate length of namec
 120+ E402 30          >                db      "0"
 120+ E403             >len_NFA         defl    $ - temp_NFA
 120+ E403             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E402             >
 120+ E402 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E403 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E404             >                org     $-1                 // alter last byte of Name just above to set
 120+ E403 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E404             >
 120+ E404 F9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E406             >Prev_Ptr        defl    Heap_Ptr
 120+ E406             >
 120+ E406             >mirror_Ptr      defl    $
 120+ E406             >
 120+ E406 92 6A       >                dw      Dict_Ptr + 2        // xt
 120+ E408             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E408             >
 120+ E408             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E408             >
 120+ E408             >//              ______________________________________________________________________
 120+ E408             >//              Dictionary part
 120+ E408             >
 120+ E408             >                org     Dict_Ptr
 120+ 6A90             >
 120+ 6A90 06 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 6A92             >
 120+ 6A92             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6A92 CD 66 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6A95             >
 120+ 6A95             >
 120+ 6A95             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6A95             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6A95             >
 120+ 6A95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6A95 00 00       >                dw      0
 121+ 6A97                              Constant_Def ONE        ,   "1"     ,   1
 121+ 6A97             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 6A97             >
 121+ 6A97             >Dict_Ptr        defl    $
 121+ 6A97             >
 121+ 6A97             >//              ______________________________________________________________________
 121+ 6A97             >//              Heap part
 121+ 6A97             >
 121+ 6A97             >
 121+ 6A97             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E408             >
 121+ E408             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E408             >Latest_Definition defl  Heap_Ptr
 121+ E408             >
 121+ E408             >                // dummy db directives used to calculate length of namec
 121+ E408 31          >                db      "1"
 121+ E409             >len_NFA         defl    $ - temp_NFA
 121+ E409             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E408             >
 121+ E408 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E409 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E40A             >                org     $-1                 // alter last byte of Name just above to set
 121+ E409 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E40A             >
 121+ E40A 02 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E40C             >Prev_Ptr        defl    Heap_Ptr
 121+ E40C             >
 121+ E40C             >mirror_Ptr      defl    $
 121+ E40C             >
 121+ E40C 99 6A       >                dw      Dict_Ptr + 2        // xt
 121+ E40E             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40E             >
 121+ E40E             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40E             >
 121+ E40E             >//              ______________________________________________________________________
 121+ E40E             >//              Dictionary part
 121+ E40E             >
 121+ E40E             >                org     Dict_Ptr
 121+ 6A97             >
 121+ 6A97 0C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 6A99             >
 121+ 6A99             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6A99 CD 66 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6A9C             >
 121+ 6A9C             >
 121+ 6A9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6A9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6A9C             >
 121+ 6A9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6A9C 01 00       >                dw      1
 122+ 6A9E                              Constant_Def TWO        ,   "2"     ,   2
 122+ 6A9E             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 6A9E             >
 122+ 6A9E             >Dict_Ptr        defl    $
 122+ 6A9E             >
 122+ 6A9E             >//              ______________________________________________________________________
 122+ 6A9E             >//              Heap part
 122+ 6A9E             >
 122+ 6A9E             >
 122+ 6A9E             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40E             >
 122+ E40E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40E             >Latest_Definition defl  Heap_Ptr
 122+ E40E             >
 122+ E40E             >                // dummy db directives used to calculate length of namec
 122+ E40E 32          >                db      "2"
 122+ E40F             >len_NFA         defl    $ - temp_NFA
 122+ E40F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40E             >
 122+ E40E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40F 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E410             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40F B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E410             >
 122+ E410 08 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E412             >Prev_Ptr        defl    Heap_Ptr
 122+ E412             >
 122+ E412             >mirror_Ptr      defl    $
 122+ E412             >
 122+ E412 A0 6A       >                dw      Dict_Ptr + 2        // xt
 122+ E414             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E414             >
 122+ E414             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E414             >
 122+ E414             >//              ______________________________________________________________________
 122+ E414             >//              Dictionary part
 122+ E414             >
 122+ E414             >                org     Dict_Ptr
 122+ 6A9E             >
 122+ 6A9E 12 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 6AA0             >
 122+ 6AA0             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6AA0 CD 66 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6AA3             >
 122+ 6AA3             >
 122+ 6AA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6AA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6AA3             >
 122+ 6AA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6AA3 02 00       >                dw      2
 123+ 6AA5                              Constant_Def THREE      ,   "3"     ,   3
 123+ 6AA5             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 6AA5             >
 123+ 6AA5             >Dict_Ptr        defl    $
 123+ 6AA5             >
 123+ 6AA5             >//              ______________________________________________________________________
 123+ 6AA5             >//              Heap part
 123+ 6AA5             >
 123+ 6AA5             >
 123+ 6AA5             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E414             >
 123+ E414             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E414             >Latest_Definition defl  Heap_Ptr
 123+ E414             >
 123+ E414             >                // dummy db directives used to calculate length of namec
 123+ E414 33          >                db      "3"
 123+ E415             >len_NFA         defl    $ - temp_NFA
 123+ E415             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E414             >
 123+ E414 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E415 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E416             >                org     $-1                 // alter last byte of Name just above to set
 123+ E415 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E416             >
 123+ E416 0E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E418             >Prev_Ptr        defl    Heap_Ptr
 123+ E418             >
 123+ E418             >mirror_Ptr      defl    $
 123+ E418             >
 123+ E418 A7 6A       >                dw      Dict_Ptr + 2        // xt
 123+ E41A             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E41A             >
 123+ E41A             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E41A             >
 123+ E41A             >//              ______________________________________________________________________
 123+ E41A             >//              Dictionary part
 123+ E41A             >
 123+ E41A             >                org     Dict_Ptr
 123+ 6AA5             >
 123+ 6AA5 18 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 6AA7             >
 123+ 6AA7             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6AA7 CD 66 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6AAA             >
 123+ 6AAA             >
 123+ 6AAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6AAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6AAA             >
 123+ 6AAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6AAA 03 00       >                dw      3
 124+ 6AAC                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 6AAC             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 6AAC             >
 124+ 6AAC             >Dict_Ptr        defl    $
 124+ 6AAC             >
 124+ 6AAC             >//              ______________________________________________________________________
 124+ 6AAC             >//              Heap part
 124+ 6AAC             >
 124+ 6AAC             >
 124+ 6AAC             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E41A             >
 124+ E41A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E41A             >Latest_Definition defl  Heap_Ptr
 124+ E41A             >
 124+ E41A             >                // dummy db directives used to calculate length of namec
 124+ E41A 2D 31       >                db      "-1"
 124+ E41C             >len_NFA         defl    $ - temp_NFA
 124+ E41C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E41A             >
 124+ E41A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E41B 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41D             >                org     $-1                 // alter last byte of Name just above to set
 124+ E41C B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41D             >
 124+ E41D 14 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41F             >Prev_Ptr        defl    Heap_Ptr
 124+ E41F             >
 124+ E41F             >mirror_Ptr      defl    $
 124+ E41F             >
 124+ E41F AE 6A       >                dw      Dict_Ptr + 2        // xt
 124+ E421             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E421             >
 124+ E421             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E421             >
 124+ E421             >//              ______________________________________________________________________
 124+ E421             >//              Dictionary part
 124+ E421             >
 124+ E421             >                org     Dict_Ptr
 124+ 6AAC             >
 124+ 6AAC 1F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 6AAE             >
 124+ 6AAE             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6AAE CD 66 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6AB1             >
 124+ 6AB1             >
 124+ 6AB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6AB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6AB1             >
 124+ 6AB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6AB1 FF FF       >                dw      -1
 125+ 6AB3                              Constant_Def BL         ,   "BL"    , $20
 125+ 6AB3             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 6AB3             >
 125+ 6AB3             >Dict_Ptr        defl    $
 125+ 6AB3             >
 125+ 6AB3             >//              ______________________________________________________________________
 125+ 6AB3             >//              Heap part
 125+ 6AB3             >
 125+ 6AB3             >
 125+ 6AB3             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E421             >
 125+ E421             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E421             >Latest_Definition defl  Heap_Ptr
 125+ E421             >
 125+ E421             >                // dummy db directives used to calculate length of namec
 125+ E421 42 4C       >                db      "BL"
 125+ E423             >len_NFA         defl    $ - temp_NFA
 125+ E423             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E421             >
 125+ E421 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E422 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E424             >                org     $-1                 // alter last byte of Name just above to set
 125+ E423 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E424             >
 125+ E424 1A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E426             >Prev_Ptr        defl    Heap_Ptr
 125+ E426             >
 125+ E426             >mirror_Ptr      defl    $
 125+ E426             >
 125+ E426 B5 6A       >                dw      Dict_Ptr + 2        // xt
 125+ E428             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E428             >
 125+ E428             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E428             >
 125+ E428             >//              ______________________________________________________________________
 125+ E428             >//              Dictionary part
 125+ E428             >
 125+ E428             >                org     Dict_Ptr
 125+ 6AB3             >
 125+ 6AB3 26 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 6AB5             >
 125+ 6AB5             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6AB5 CD 66 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6AB8             >
 125+ 6AB8             >
 125+ 6AB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6AB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6AB8             >
 125+ 6AB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6AB8 20 00       >                dw      $20
 126+ 6ABA                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 6ABA             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 6ABA             >
 126+ 6ABA             >Dict_Ptr        defl    $
 126+ 6ABA             >
 126+ 6ABA             >//              ______________________________________________________________________
 126+ 6ABA             >//              Heap part
 126+ 6ABA             >
 126+ 6ABA             >
 126+ 6ABA             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E428             >
 126+ E428             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E428             >Latest_Definition defl  Heap_Ptr
 126+ E428             >
 126+ E428             >                // dummy db directives used to calculate length of namec
 126+ E428 43 2F 4C    >                db      "C/L"
 126+ E42B             >len_NFA         defl    $ - temp_NFA
 126+ E42B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E428             >
 126+ E428 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E429 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E42C             >                org     $-1                 // alter last byte of Name just above to set
 126+ E42B CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E42C             >
 126+ E42C 21 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42E             >Prev_Ptr        defl    Heap_Ptr
 126+ E42E             >
 126+ E42E             >mirror_Ptr      defl    $
 126+ E42E             >
 126+ E42E BC 6A       >                dw      Dict_Ptr + 2        // xt
 126+ E430             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E430             >
 126+ E430             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E430             >
 126+ E430             >//              ______________________________________________________________________
 126+ E430             >//              Dictionary part
 126+ E430             >
 126+ E430             >                org     Dict_Ptr
 126+ 6ABA             >
 126+ 6ABA 2E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 6ABC             >
 126+ 6ABC             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6ABC CD 66 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6ABF             >
 126+ 6ABF             >
 126+ 6ABF             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6ABF             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6ABF             >
 126+ 6ABF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6ABF 40 00       >                dw      64
 127+ 6AC1                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 6AC1             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 6AC1             >
 127+ 6AC1             >Dict_Ptr        defl    $
 127+ 6AC1             >
 127+ 6AC1             >//              ______________________________________________________________________
 127+ 6AC1             >//              Heap part
 127+ 6AC1             >
 127+ 6AC1             >
 127+ 6AC1             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E430             >
 127+ E430             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E430             >Latest_Definition defl  Heap_Ptr
 127+ E430             >
 127+ E430             >                // dummy db directives used to calculate length of namec
 127+ E430 42 2F 42 55 >                db      "B/BUF"
 127+ E434 46          >
 127+ E435             >len_NFA         defl    $ - temp_NFA
 127+ E435             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E430             >
 127+ E430 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E431 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E435 46          >
 127+ E436             >                org     $-1                 // alter last byte of Name just above to set
 127+ E435 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E436             >
 127+ E436 28 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E438             >Prev_Ptr        defl    Heap_Ptr
 127+ E438             >
 127+ E438             >mirror_Ptr      defl    $
 127+ E438             >
 127+ E438 C3 6A       >                dw      Dict_Ptr + 2        // xt
 127+ E43A             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E43A             >
 127+ E43A             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E43A             >
 127+ E43A             >//              ______________________________________________________________________
 127+ E43A             >//              Dictionary part
 127+ E43A             >
 127+ E43A             >                org     Dict_Ptr
 127+ 6AC1             >
 127+ 6AC1 38 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 6AC3             >
 127+ 6AC3             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6AC3 CD 66 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6AC6             >
 127+ 6AC6             >
 127+ 6AC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6AC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6AC6             >
 127+ 6AC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6AC6 00 02       >                dw      512
 128+ 6AC8                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 6AC8             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 6AC8             >
 128+ 6AC8             >Dict_Ptr        defl    $
 128+ 6AC8             >
 128+ 6AC8             >//              ______________________________________________________________________
 128+ 6AC8             >//              Heap part
 128+ 6AC8             >
 128+ 6AC8             >
 128+ 6AC8             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E43A             >
 128+ E43A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E43A             >Latest_Definition defl  Heap_Ptr
 128+ E43A             >
 128+ E43A             >                // dummy db directives used to calculate length of namec
 128+ E43A 42 2F 53 43 >                db      "B/SCR"
 128+ E43E 52          >
 128+ E43F             >len_NFA         defl    $ - temp_NFA
 128+ E43F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E43A             >
 128+ E43A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E43B 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43F 52          >
 128+ E440             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43F D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E440             >
 128+ E440 30 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E442             >Prev_Ptr        defl    Heap_Ptr
 128+ E442             >
 128+ E442             >mirror_Ptr      defl    $
 128+ E442             >
 128+ E442 CA 6A       >                dw      Dict_Ptr + 2        // xt
 128+ E444             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E444             >
 128+ E444             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E444             >
 128+ E444             >//              ______________________________________________________________________
 128+ E444             >//              Dictionary part
 128+ E444             >
 128+ E444             >                org     Dict_Ptr
 128+ 6AC8             >
 128+ 6AC8 42 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 6ACA             >
 128+ 6ACA             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6ACA CD 66 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6ACD             >
 128+ 6ACD             >
 128+ 6ACD             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6ACD             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6ACD             >
 128+ 6ACD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6ACD 02 00       >                dw      2
 129+ 6ACF                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 6ACF             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 6ACF             >
 129+ 6ACF             >Dict_Ptr        defl    $
 129+ 6ACF             >
 129+ 6ACF             >//              ______________________________________________________________________
 129+ 6ACF             >//              Heap part
 129+ 6ACF             >
 129+ 6ACF             >
 129+ 6ACF             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E444             >
 129+ E444             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E444             >Latest_Definition defl  Heap_Ptr
 129+ E444             >
 129+ E444             >                // dummy db directives used to calculate length of namec
 129+ E444 4C 2F 53 43 >                db      "L/SCR"
 129+ E448 52          >
 129+ E449             >len_NFA         defl    $ - temp_NFA
 129+ E449             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E444             >
 129+ E444 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E445 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E449 52          >
 129+ E44A             >                org     $-1                 // alter last byte of Name just above to set
 129+ E449 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E44A             >
 129+ E44A 3A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E44C             >Prev_Ptr        defl    Heap_Ptr
 129+ E44C             >
 129+ E44C             >mirror_Ptr      defl    $
 129+ E44C             >
 129+ E44C D1 6A       >                dw      Dict_Ptr + 2        // xt
 129+ E44E             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44E             >
 129+ E44E             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44E             >
 129+ E44E             >//              ______________________________________________________________________
 129+ E44E             >//              Dictionary part
 129+ E44E             >
 129+ E44E             >                org     Dict_Ptr
 129+ 6ACF             >
 129+ 6ACF 4C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 6AD1             >
 129+ 6AD1             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 6AD1 CD 66 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 6AD4             >
 129+ 6AD4             >
 129+ 6AD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 6AD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 6AD4             >
 129+ 6AD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 6AD4 10 00       >                dw      16
 130+ 6AD6
 131+ 6AD6              //  ______________________________________________________________________
 132+ 6AD6              //
 133+ 6AD6              // +origin         --
 134+ 6AD6              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 6AD6              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 6AD6              //              dw      PLUS                    // +
 137+ 6AD6              //              dw      EXIT                    // ;
 138+ 6AD6                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 6AD6             >
 138+ 6AD6             >Dict_Ptr        defl    $
 138+ 6AD6             >
 138+ 6AD6             >//              ______________________________________________________________________
 138+ 6AD6             >//              Heap part
 138+ 6AD6             >
 138+ 6AD6             >
 138+ 6AD6             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44E             >
 138+ E44E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44E             >Latest_Definition defl  Heap_Ptr
 138+ E44E             >
 138+ E44E             >                // dummy db directives used to calculate length of namec
 138+ E44E 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E452 47 49 4E    >
 138+ E455             >len_NFA         defl    $ - temp_NFA
 138+ E455             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44E             >
 138+ E44E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44F 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E453 47 49 4E    >
 138+ E456             >                org     $-1                 // alter last byte of Name just above to set
 138+ E455 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E456             >
 138+ E456 44 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E458             >Prev_Ptr        defl    Heap_Ptr
 138+ E458             >
 138+ E458             >mirror_Ptr      defl    $
 138+ E458             >
 138+ E458 D8 6A       >                dw      Dict_Ptr + 2        // xt
 138+ E45A             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E45A             >
 138+ E45A             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E45A             >
 138+ E45A             >//              ______________________________________________________________________
 138+ E45A             >//              Dictionary part
 138+ E45A             >
 138+ E45A             >                org     Dict_Ptr
 138+ 6AD6             >
 138+ 6AD6 58 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 6AD8             >
 138+ 6AD8             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6AD8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 6AD8 ~           >
 138+ 6AD8 ~           >
 138+ 6AD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 6AD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 6AD8             >
 138+ 6AD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6AD8 D9                           exx
 140+ 6AD9 E1                           pop     hl
 141+ 6ADA 11 66 63                     ld      de, Cold_origin
 142+ 6ADD 19                           add     hl, de
 143+ 6ADE E5                           push    hl
 144+ 6ADF D9                           exx
 145+ 6AE0                              next
 145+ 6AE0 DD E9       >                jp      (ix)
 146+ 6AE2
 147+ 6AE2
 148+ 6AE2              //  ______________________________________________________________________
 149+ 6AE2              //
 150+ 6AE2                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 6AE2             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 6AE2             >
 150+ 6AE2             >Dict_Ptr        defl    $
 150+ 6AE2             >
 150+ 6AE2             >//              ______________________________________________________________________
 150+ 6AE2             >//              Heap part
 150+ 6AE2             >
 150+ 6AE2             >
 150+ 6AE2             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E45A             >
 150+ E45A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E45A             >Latest_Definition defl  Heap_Ptr
 150+ E45A             >
 150+ E45A             >                // dummy db directives used to calculate length of namec
 150+ E45A 28 4E 45 58 >                db      "(NEXT)"
 150+ E45E 54 29       >
 150+ E460             >len_NFA         defl    $ - temp_NFA
 150+ E460             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E45A             >
 150+ E45A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E45B 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45F 54 29       >
 150+ E461             >                org     $-1                 // alter last byte of Name just above to set
 150+ E460 A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E461             >
 150+ E461 4E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E463             >Prev_Ptr        defl    Heap_Ptr
 150+ E463             >
 150+ E463             >mirror_Ptr      defl    $
 150+ E463             >
 150+ E463 E4 6A       >                dw      Dict_Ptr + 2        // xt
 150+ E465             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E465             >
 150+ E465             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E465             >
 150+ E465             >//              ______________________________________________________________________
 150+ E465             >//              Dictionary part
 150+ E465             >
 150+ E465             >                org     Dict_Ptr
 150+ 6AE2             >
 150+ 6AE2 63 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 6AE4             >
 150+ 6AE4             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6AE4 CD 66 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 6AE7             >
 150+ 6AE7             >
 150+ 6AE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6AE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6AE7             >
 150+ 6AE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6AE7 9A 63       >                dw      Next_Ptr
 151+ 6AE9
 152+ 6AE9              //  ______________________________________________________________________
 153+ 6AE9              //
 154+ 6AE9
 155+ 6AE9                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 6AE9             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 6AE9             >
 155+ 6AE9             >Dict_Ptr        defl    $
 155+ 6AE9             >
 155+ 6AE9             >//              ______________________________________________________________________
 155+ 6AE9             >//              Heap part
 155+ 6AE9             >
 155+ 6AE9             >
 155+ 6AE9             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E465             >
 155+ E465             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E465             >Latest_Definition defl  Heap_Ptr
 155+ E465             >
 155+ E465             >                // dummy db directives used to calculate length of namec
 155+ E465 53 30       >                db      "S0"
 155+ E467             >len_NFA         defl    $ - temp_NFA
 155+ E467             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E465             >
 155+ E465 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E466 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E468             >                org     $-1                 // alter last byte of Name just above to set
 155+ E467 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E468             >
 155+ E468 5A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E46A             >Prev_Ptr        defl    Heap_Ptr
 155+ E46A             >
 155+ E46A             >mirror_Ptr      defl    $
 155+ E46A             >
 155+ E46A EB 6A       >                dw      Dict_Ptr + 2        // xt
 155+ E46C             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E46C             >
 155+ E46C             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E46C             >
 155+ E46C             >//              ______________________________________________________________________
 155+ E46C             >//              Dictionary part
 155+ E46C             >
 155+ E46C             >                org     Dict_Ptr
 155+ 6AE9             >
 155+ 6AE9 6A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 6AEB             >
 155+ 6AEB             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6AEB CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6AEE             >
 155+ 6AEE             >
 155+ 6AEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6AEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6AEE             >
 155+ 6AEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6AEE 06          >                db      06
 156+ 6AEF                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 6AEF             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 6AEF             >
 156+ 6AEF             >Dict_Ptr        defl    $
 156+ 6AEF             >
 156+ 6AEF             >//              ______________________________________________________________________
 156+ 6AEF             >//              Heap part
 156+ 6AEF             >
 156+ 6AEF             >
 156+ 6AEF             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E46C             >
 156+ E46C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E46C             >Latest_Definition defl  Heap_Ptr
 156+ E46C             >
 156+ E46C             >                // dummy db directives used to calculate length of namec
 156+ E46C 52 30       >                db      "R0"
 156+ E46E             >len_NFA         defl    $ - temp_NFA
 156+ E46E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E46C             >
 156+ E46C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46D 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46F             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46E B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46F             >
 156+ E46F 65 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E471             >Prev_Ptr        defl    Heap_Ptr
 156+ E471             >
 156+ E471             >mirror_Ptr      defl    $
 156+ E471             >
 156+ E471 F1 6A       >                dw      Dict_Ptr + 2        // xt
 156+ E473             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E473             >
 156+ E473             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E473             >
 156+ E473             >//              ______________________________________________________________________
 156+ E473             >//              Dictionary part
 156+ E473             >
 156+ E473             >                org     Dict_Ptr
 156+ 6AEF             >
 156+ 6AEF 71 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 6AF1             >
 156+ 6AF1             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6AF1 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6AF4             >
 156+ 6AF4             >
 156+ 6AF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6AF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6AF4             >
 156+ 6AF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6AF4 08          >                db      08
 157+ 6AF5                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 6AF5             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 6AF5             >
 157+ 6AF5             >Dict_Ptr        defl    $
 157+ 6AF5             >
 157+ 6AF5             >//              ______________________________________________________________________
 157+ 6AF5             >//              Heap part
 157+ 6AF5             >
 157+ 6AF5             >
 157+ 6AF5             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E473             >
 157+ E473             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E473             >Latest_Definition defl  Heap_Ptr
 157+ E473             >
 157+ E473             >                // dummy db directives used to calculate length of namec
 157+ E473 54 49 42    >                db      "TIB"
 157+ E476             >len_NFA         defl    $ - temp_NFA
 157+ E476             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E473             >
 157+ E473 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E474 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E477             >                org     $-1                 // alter last byte of Name just above to set
 157+ E476 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E477             >
 157+ E477 6C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E479             >Prev_Ptr        defl    Heap_Ptr
 157+ E479             >
 157+ E479             >mirror_Ptr      defl    $
 157+ E479             >
 157+ E479 F7 6A       >                dw      Dict_Ptr + 2        // xt
 157+ E47B             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E47B             >
 157+ E47B             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E47B             >
 157+ E47B             >//              ______________________________________________________________________
 157+ E47B             >//              Dictionary part
 157+ E47B             >
 157+ E47B             >                org     Dict_Ptr
 157+ 6AF5             >
 157+ 6AF5 79 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 6AF7             >
 157+ 6AF7             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6AF7 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6AFA             >
 157+ 6AFA             >
 157+ 6AFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6AFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6AFA             >
 157+ 6AFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6AFA 0A          >                db      10
 158+ 6AFB                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 6AFB             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 6AFB             >
 158+ 6AFB             >Dict_Ptr        defl    $
 158+ 6AFB             >
 158+ 6AFB             >//              ______________________________________________________________________
 158+ 6AFB             >//              Heap part
 158+ 6AFB             >
 158+ 6AFB             >
 158+ 6AFB             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E47B             >
 158+ E47B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E47B             >Latest_Definition defl  Heap_Ptr
 158+ E47B             >
 158+ E47B             >                // dummy db directives used to calculate length of namec
 158+ E47B 57 49 44 54 >                db      "WIDTH"
 158+ E47F 48          >
 158+ E480             >len_NFA         defl    $ - temp_NFA
 158+ E480             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E47B             >
 158+ E47B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E47C 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E480 48          >
 158+ E481             >                org     $-1                 // alter last byte of Name just above to set
 158+ E480 C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E481             >
 158+ E481 73 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E483             >Prev_Ptr        defl    Heap_Ptr
 158+ E483             >
 158+ E483             >mirror_Ptr      defl    $
 158+ E483             >
 158+ E483 FD 6A       >                dw      Dict_Ptr + 2        // xt
 158+ E485             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E485             >
 158+ E485             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E485             >
 158+ E485             >//              ______________________________________________________________________
 158+ E485             >//              Dictionary part
 158+ E485             >
 158+ E485             >                org     Dict_Ptr
 158+ 6AFB             >
 158+ 6AFB 83 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 6AFD             >
 158+ 6AFD             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6AFD CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6B00             >
 158+ 6B00             >
 158+ 6B00             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6B00             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6B00             >
 158+ 6B00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6B00 0C          >                db      12
 159+ 6B01                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 6B01             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 6B01             >
 159+ 6B01             >Dict_Ptr        defl    $
 159+ 6B01             >
 159+ 6B01             >//              ______________________________________________________________________
 159+ 6B01             >//              Heap part
 159+ 6B01             >
 159+ 6B01             >
 159+ 6B01             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E485             >
 159+ E485             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E485             >Latest_Definition defl  Heap_Ptr
 159+ E485             >
 159+ E485             >                // dummy db directives used to calculate length of namec
 159+ E485 57 41 52 4E >                db      "WARNING"
 159+ E489 49 4E 47    >
 159+ E48C             >len_NFA         defl    $ - temp_NFA
 159+ E48C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E485             >
 159+ E485 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E486 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E48A 49 4E 47    >
 159+ E48D             >                org     $-1                 // alter last byte of Name just above to set
 159+ E48C C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48D             >
 159+ E48D 7B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48F             >Prev_Ptr        defl    Heap_Ptr
 159+ E48F             >
 159+ E48F             >mirror_Ptr      defl    $
 159+ E48F             >
 159+ E48F 03 6B       >                dw      Dict_Ptr + 2        // xt
 159+ E491             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E491             >
 159+ E491             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E491             >
 159+ E491             >//              ______________________________________________________________________
 159+ E491             >//              Dictionary part
 159+ E491             >
 159+ E491             >                org     Dict_Ptr
 159+ 6B01             >
 159+ 6B01 8F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 6B03             >
 159+ 6B03             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6B03 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6B06             >
 159+ 6B06             >
 159+ 6B06             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6B06             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6B06             >
 159+ 6B06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6B06 0E          >                db      14
 160+ 6B07                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 6B07             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 6B07             >
 160+ 6B07             >Dict_Ptr        defl    $
 160+ 6B07             >
 160+ 6B07             >//              ______________________________________________________________________
 160+ 6B07             >//              Heap part
 160+ 6B07             >
 160+ 6B07             >
 160+ 6B07             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E491             >
 160+ E491             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E491             >Latest_Definition defl  Heap_Ptr
 160+ E491             >
 160+ E491             >                // dummy db directives used to calculate length of namec
 160+ E491 46 45 4E 43 >                db      "FENCE"
 160+ E495 45          >
 160+ E496             >len_NFA         defl    $ - temp_NFA
 160+ E496             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E491             >
 160+ E491 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E492 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E496 45          >
 160+ E497             >                org     $-1                 // alter last byte of Name just above to set
 160+ E496 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E497             >
 160+ E497 85 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E499             >Prev_Ptr        defl    Heap_Ptr
 160+ E499             >
 160+ E499             >mirror_Ptr      defl    $
 160+ E499             >
 160+ E499 09 6B       >                dw      Dict_Ptr + 2        // xt
 160+ E49B             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E49B             >
 160+ E49B             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E49B             >
 160+ E49B             >//              ______________________________________________________________________
 160+ E49B             >//              Dictionary part
 160+ E49B             >
 160+ E49B             >                org     Dict_Ptr
 160+ 6B07             >
 160+ 6B07 99 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 6B09             >
 160+ 6B09             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6B09 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6B0C             >
 160+ 6B0C             >
 160+ 6B0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6B0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6B0C             >
 160+ 6B0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6B0C 10          >                db      16
 161+ 6B0D                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 6B0D             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 6B0D             >
 161+ 6B0D             >Dict_Ptr        defl    $
 161+ 6B0D             >
 161+ 6B0D             >//              ______________________________________________________________________
 161+ 6B0D             >//              Heap part
 161+ 6B0D             >
 161+ 6B0D             >
 161+ 6B0D             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E49B             >
 161+ E49B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E49B             >Latest_Definition defl  Heap_Ptr
 161+ E49B             >
 161+ E49B             >                // dummy db directives used to calculate length of namec
 161+ E49B 44 50       >                db      "DP"
 161+ E49D             >len_NFA         defl    $ - temp_NFA
 161+ E49D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E49B             >
 161+ E49B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E49C 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49E             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49D D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49E             >
 161+ E49E 91 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E4A0             >Prev_Ptr        defl    Heap_Ptr
 161+ E4A0             >
 161+ E4A0             >mirror_Ptr      defl    $
 161+ E4A0             >
 161+ E4A0 0F 6B       >                dw      Dict_Ptr + 2        // xt
 161+ E4A2             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E4A2             >
 161+ E4A2             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E4A2             >
 161+ E4A2             >//              ______________________________________________________________________
 161+ E4A2             >//              Dictionary part
 161+ E4A2             >
 161+ E4A2             >                org     Dict_Ptr
 161+ 6B0D             >
 161+ 6B0D A0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 6B0F             >
 161+ 6B0F             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6B0F CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6B12             >
 161+ 6B12             >
 161+ 6B12             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6B12             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6B12             >
 161+ 6B12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6B12 12          >                db      18
 162+ 6B13                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 6B13             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 6B13             >
 162+ 6B13             >Dict_Ptr        defl    $
 162+ 6B13             >
 162+ 6B13             >//              ______________________________________________________________________
 162+ 6B13             >//              Heap part
 162+ 6B13             >
 162+ 6B13             >
 162+ 6B13             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E4A2             >
 162+ E4A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E4A2             >Latest_Definition defl  Heap_Ptr
 162+ E4A2             >
 162+ E4A2             >                // dummy db directives used to calculate length of namec
 162+ E4A2 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A6 4C 49 4E 4B >
 162+ E4AA             >len_NFA         defl    $ - temp_NFA
 162+ E4AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E4A2             >
 162+ E4A2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A3 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A7 4C 49 4E 4B >
 162+ E4AB             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4AA CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4AB             >
 162+ E4AB 9B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AD             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AD             >
 162+ E4AD             >mirror_Ptr      defl    $
 162+ E4AD             >
 162+ E4AD 15 6B       >                dw      Dict_Ptr + 2        // xt
 162+ E4AF             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AF             >
 162+ E4AF             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AF             >
 162+ E4AF             >//              ______________________________________________________________________
 162+ E4AF             >//              Dictionary part
 162+ E4AF             >
 162+ E4AF             >                org     Dict_Ptr
 162+ 6B13             >
 162+ 6B13 AD 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6B15             >
 162+ 6B15             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6B15 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6B18             >
 162+ 6B18             >
 162+ 6B18             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6B18             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6B18             >
 162+ 6B18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6B18 14          >                db      20
 163+ 6B19                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 6B19             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 6B19             >
 163+ 6B19             >Dict_Ptr        defl    $
 163+ 6B19             >
 163+ 6B19             >//              ______________________________________________________________________
 163+ 6B19             >//              Heap part
 163+ 6B19             >
 163+ 6B19             >
 163+ 6B19             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AF             >
 163+ E4AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AF             >Latest_Definition defl  Heap_Ptr
 163+ E4AF             >
 163+ E4AF             >                // dummy db directives used to calculate length of namec
 163+ E4AF 46 49 52 53 >                db      "FIRST"
 163+ E4B3 54          >
 163+ E4B4             >len_NFA         defl    $ - temp_NFA
 163+ E4B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AF             >
 163+ E4AF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4B0 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B4 54          >
 163+ E4B5             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B4 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B5             >
 163+ E4B5 A2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B7             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B7             >
 163+ E4B7             >mirror_Ptr      defl    $
 163+ E4B7             >
 163+ E4B7 1B 6B       >                dw      Dict_Ptr + 2        // xt
 163+ E4B9             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B9             >
 163+ E4B9             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B9             >
 163+ E4B9             >//              ______________________________________________________________________
 163+ E4B9             >//              Dictionary part
 163+ E4B9             >
 163+ E4B9             >                org     Dict_Ptr
 163+ 6B19             >
 163+ 6B19 B7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 6B1B             >
 163+ 6B1B             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6B1B CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6B1E             >
 163+ 6B1E             >
 163+ 6B1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6B1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6B1E             >
 163+ 6B1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6B1E 16          >                db      22
 164+ 6B1F                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 6B1F             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 6B1F             >
 164+ 6B1F             >Dict_Ptr        defl    $
 164+ 6B1F             >
 164+ 6B1F             >//              ______________________________________________________________________
 164+ 6B1F             >//              Heap part
 164+ 6B1F             >
 164+ 6B1F             >
 164+ 6B1F             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B9             >
 164+ E4B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B9             >Latest_Definition defl  Heap_Ptr
 164+ E4B9             >
 164+ E4B9             >                // dummy db directives used to calculate length of namec
 164+ E4B9 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BD 54          >
 164+ E4BE             >len_NFA         defl    $ - temp_NFA
 164+ E4BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B9             >
 164+ E4B9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4BA 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BE 54          >
 164+ E4BF             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BE D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BF             >
 164+ E4BF AF 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4C1             >Prev_Ptr        defl    Heap_Ptr
 164+ E4C1             >
 164+ E4C1             >mirror_Ptr      defl    $
 164+ E4C1             >
 164+ E4C1 21 6B       >                dw      Dict_Ptr + 2        // xt
 164+ E4C3             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C3             >
 164+ E4C3             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C3             >
 164+ E4C3             >//              ______________________________________________________________________
 164+ E4C3             >//              Dictionary part
 164+ E4C3             >
 164+ E4C3             >                org     Dict_Ptr
 164+ 6B1F             >
 164+ 6B1F C1 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 6B21             >
 164+ 6B21             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6B21 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6B24             >
 164+ 6B24             >
 164+ 6B24             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6B24             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6B24             >
 164+ 6B24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6B24 18          >                db      24
 165+ 6B25                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 6B25             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 6B25             >
 165+ 6B25             >Dict_Ptr        defl    $
 165+ 6B25             >
 165+ 6B25             >//              ______________________________________________________________________
 165+ 6B25             >//              Heap part
 165+ 6B25             >
 165+ 6B25             >
 165+ 6B25             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C3             >
 165+ E4C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C3             >Latest_Definition defl  Heap_Ptr
 165+ E4C3             >
 165+ E4C3             >                // dummy db directives used to calculate length of namec
 165+ E4C3 48 50       >                db      "HP"
 165+ E4C5             >len_NFA         defl    $ - temp_NFA
 165+ E4C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C3             >
 165+ E4C3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C4 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C6             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C5 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C6             >
 165+ E4C6 B9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C8             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C8             >
 165+ E4C8             >mirror_Ptr      defl    $
 165+ E4C8             >
 165+ E4C8 27 6B       >                dw      Dict_Ptr + 2        // xt
 165+ E4CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4CA             >
 165+ E4CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4CA             >
 165+ E4CA             >//              ______________________________________________________________________
 165+ E4CA             >//              Dictionary part
 165+ E4CA             >
 165+ E4CA             >                org     Dict_Ptr
 165+ 6B25             >
 165+ 6B25 C8 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 6B27             >
 165+ 6B27             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6B27 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6B2A             >
 165+ 6B2A             >
 165+ 6B2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6B2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6B2A             >
 165+ 6B2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6B2A 1A          >                db      26
 166+ 6B2B                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 6B2B             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 6B2B             >
 166+ 6B2B             >Dict_Ptr        defl    $
 166+ 6B2B             >
 166+ 6B2B             >//              ______________________________________________________________________
 166+ 6B2B             >//              Heap part
 166+ 6B2B             >
 166+ 6B2B             >
 166+ 6B2B             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4CA             >
 166+ E4CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4CA             >Latest_Definition defl  Heap_Ptr
 166+ E4CA             >
 166+ E4CA             >                // dummy db directives used to calculate length of namec
 166+ E4CA 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CE 45          >
 166+ E4CF             >len_NFA         defl    $ - temp_NFA
 166+ E4CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4CA             >
 166+ E4CA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4CB 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CF 45          >
 166+ E4D0             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CF C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4D0             >
 166+ E4D0 C3 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4D2             >Prev_Ptr        defl    Heap_Ptr
 166+ E4D2             >
 166+ E4D2             >mirror_Ptr      defl    $
 166+ E4D2             >
 166+ E4D2 2D 6B       >                dw      Dict_Ptr + 2        // xt
 166+ E4D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D4             >
 166+ E4D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D4             >
 166+ E4D4             >//              ______________________________________________________________________
 166+ E4D4             >//              Dictionary part
 166+ E4D4             >
 166+ E4D4             >                org     Dict_Ptr
 166+ 6B2B             >
 166+ 6B2B D2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 6B2D             >
 166+ 6B2D             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6B2D CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6B30             >
 166+ 6B30             >
 166+ 6B30             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6B30             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6B30             >
 166+ 6B30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6B30 1C          >                db      28
 167+ 6B31                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 6B31             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 6B31             >
 167+ 6B31             >Dict_Ptr        defl    $
 167+ 6B31             >
 167+ 6B31             >//              ______________________________________________________________________
 167+ 6B31             >//              Heap part
 167+ 6B31             >
 167+ 6B31             >
 167+ 6B31             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D4             >
 167+ E4D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D4             >Latest_Definition defl  Heap_Ptr
 167+ E4D4             >
 167+ E4D4             >                // dummy db directives used to calculate length of namec
 167+ E4D4 42 4C 4B    >                db      "BLK"
 167+ E4D7             >len_NFA         defl    $ - temp_NFA
 167+ E4D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D4             >
 167+ E4D4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D5 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D8             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D7 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D8             >
 167+ E4D8 CA 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4DA             >Prev_Ptr        defl    Heap_Ptr
 167+ E4DA             >
 167+ E4DA             >mirror_Ptr      defl    $
 167+ E4DA             >
 167+ E4DA 33 6B       >                dw      Dict_Ptr + 2        // xt
 167+ E4DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4DC             >
 167+ E4DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4DC             >
 167+ E4DC             >//              ______________________________________________________________________
 167+ E4DC             >//              Dictionary part
 167+ E4DC             >
 167+ E4DC             >                org     Dict_Ptr
 167+ 6B31             >
 167+ 6B31 DA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 6B33             >
 167+ 6B33             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6B33 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6B36             >
 167+ 6B36             >
 167+ 6B36             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6B36             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6B36             >
 167+ 6B36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6B36 1E          >                db      30
 168+ 6B37                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 6B37             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 6B37             >
 168+ 6B37             >Dict_Ptr        defl    $
 168+ 6B37             >
 168+ 6B37             >//              ______________________________________________________________________
 168+ 6B37             >//              Heap part
 168+ 6B37             >
 168+ 6B37             >
 168+ 6B37             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4DC             >
 168+ E4DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4DC             >Latest_Definition defl  Heap_Ptr
 168+ E4DC             >
 168+ E4DC             >                // dummy db directives used to calculate length of namec
 168+ E4DC 3E 49 4E    >                db      ">IN"
 168+ E4DF             >len_NFA         defl    $ - temp_NFA
 168+ E4DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4DC             >
 168+ E4DC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DD 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4E0             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DF CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4E0             >
 168+ E4E0 D4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4E2             >Prev_Ptr        defl    Heap_Ptr
 168+ E4E2             >
 168+ E4E2             >mirror_Ptr      defl    $
 168+ E4E2             >
 168+ E4E2 39 6B       >                dw      Dict_Ptr + 2        // xt
 168+ E4E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E4             >
 168+ E4E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E4             >
 168+ E4E4             >//              ______________________________________________________________________
 168+ E4E4             >//              Dictionary part
 168+ E4E4             >
 168+ E4E4             >                org     Dict_Ptr
 168+ 6B37             >
 168+ 6B37 E2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 6B39             >
 168+ 6B39             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6B39 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6B3C             >
 168+ 6B3C             >
 168+ 6B3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6B3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6B3C             >
 168+ 6B3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6B3C 20          >                db      32
 169+ 6B3D                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 6B3D             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 6B3D             >
 169+ 6B3D             >Dict_Ptr        defl    $
 169+ 6B3D             >
 169+ 6B3D             >//              ______________________________________________________________________
 169+ 6B3D             >//              Heap part
 169+ 6B3D             >
 169+ 6B3D             >
 169+ 6B3D             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E4             >
 169+ E4E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E4             >Latest_Definition defl  Heap_Ptr
 169+ E4E4             >
 169+ E4E4             >                // dummy db directives used to calculate length of namec
 169+ E4E4 4F 55 54    >                db      "OUT"
 169+ E4E7             >len_NFA         defl    $ - temp_NFA
 169+ E4E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E4             >
 169+ E4E4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E5 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E8             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E7 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E8             >
 169+ E4E8 DC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4EA             >Prev_Ptr        defl    Heap_Ptr
 169+ E4EA             >
 169+ E4EA             >mirror_Ptr      defl    $
 169+ E4EA             >
 169+ E4EA 3F 6B       >                dw      Dict_Ptr + 2        // xt
 169+ E4EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4EC             >
 169+ E4EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4EC             >
 169+ E4EC             >//              ______________________________________________________________________
 169+ E4EC             >//              Dictionary part
 169+ E4EC             >
 169+ E4EC             >                org     Dict_Ptr
 169+ 6B3D             >
 169+ 6B3D EA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 6B3F             >
 169+ 6B3F             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6B3F CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6B42             >
 169+ 6B42             >
 169+ 6B42             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6B42             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6B42             >
 169+ 6B42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6B42 22          >                db      34
 170+ 6B43                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 6B43             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 6B43             >
 170+ 6B43             >Dict_Ptr        defl    $
 170+ 6B43             >
 170+ 6B43             >//              ______________________________________________________________________
 170+ 6B43             >//              Heap part
 170+ 6B43             >
 170+ 6B43             >
 170+ 6B43             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4EC             >
 170+ E4EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4EC             >Latest_Definition defl  Heap_Ptr
 170+ E4EC             >
 170+ E4EC             >                // dummy db directives used to calculate length of namec
 170+ E4EC 53 43 52    >                db      "SCR"
 170+ E4EF             >len_NFA         defl    $ - temp_NFA
 170+ E4EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4EC             >
 170+ E4EC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4ED 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4F0             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4EF D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4F0             >
 170+ E4F0 E4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4F2             >Prev_Ptr        defl    Heap_Ptr
 170+ E4F2             >
 170+ E4F2             >mirror_Ptr      defl    $
 170+ E4F2             >
 170+ E4F2 45 6B       >                dw      Dict_Ptr + 2        // xt
 170+ E4F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F4             >
 170+ E4F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F4             >
 170+ E4F4             >//              ______________________________________________________________________
 170+ E4F4             >//              Dictionary part
 170+ E4F4             >
 170+ E4F4             >                org     Dict_Ptr
 170+ 6B43             >
 170+ 6B43 F2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 6B45             >
 170+ 6B45             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6B45 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6B48             >
 170+ 6B48             >
 170+ 6B48             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6B48             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6B48             >
 170+ 6B48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6B48 24          >                db      36
 171+ 6B49                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 6B49             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 6B49             >
 171+ 6B49             >Dict_Ptr        defl    $
 171+ 6B49             >
 171+ 6B49             >//              ______________________________________________________________________
 171+ 6B49             >//              Heap part
 171+ 6B49             >
 171+ 6B49             >
 171+ 6B49             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F4             >
 171+ E4F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F4             >Latest_Definition defl  Heap_Ptr
 171+ E4F4             >
 171+ E4F4             >                // dummy db directives used to calculate length of namec
 171+ E4F4 4F 46 46 53 >                db      "OFFSET"
 171+ E4F8 45 54       >
 171+ E4FA             >len_NFA         defl    $ - temp_NFA
 171+ E4FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F4             >
 171+ E4F4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F5 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F9 45 54       >
 171+ E4FB             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4FA D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4FB             >
 171+ E4FB EC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FD             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FD             >
 171+ E4FD             >mirror_Ptr      defl    $
 171+ E4FD             >
 171+ E4FD 4B 6B       >                dw      Dict_Ptr + 2        // xt
 171+ E4FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FF             >
 171+ E4FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FF             >
 171+ E4FF             >//              ______________________________________________________________________
 171+ E4FF             >//              Dictionary part
 171+ E4FF             >
 171+ E4FF             >                org     Dict_Ptr
 171+ 6B49             >
 171+ 6B49 FD 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 6B4B             >
 171+ 6B4B             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6B4B CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6B4E             >
 171+ 6B4E             >
 171+ 6B4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6B4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6B4E             >
 171+ 6B4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6B4E 26          >                db      38
 172+ 6B4F                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 6B4F             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 6B4F             >
 172+ 6B4F             >Dict_Ptr        defl    $
 172+ 6B4F             >
 172+ 6B4F             >//              ______________________________________________________________________
 172+ 6B4F             >//              Heap part
 172+ 6B4F             >
 172+ 6B4F             >
 172+ 6B4F             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FF             >
 172+ E4FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FF             >Latest_Definition defl  Heap_Ptr
 172+ E4FF             >
 172+ E4FF             >                // dummy db directives used to calculate length of namec
 172+ E4FF 43 4F 4E 54 >                db      "CONTEXT"
 172+ E503 45 58 54    >
 172+ E506             >len_NFA         defl    $ - temp_NFA
 172+ E506             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FF             >
 172+ E4FF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E500 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E504 45 58 54    >
 172+ E507             >                org     $-1                 // alter last byte of Name just above to set
 172+ E506 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E507             >
 172+ E507 F4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E509             >Prev_Ptr        defl    Heap_Ptr
 172+ E509             >
 172+ E509             >mirror_Ptr      defl    $
 172+ E509             >
 172+ E509 51 6B       >                dw      Dict_Ptr + 2        // xt
 172+ E50B             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E50B             >
 172+ E50B             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E50B             >
 172+ E50B             >//              ______________________________________________________________________
 172+ E50B             >//              Dictionary part
 172+ E50B             >
 172+ E50B             >                org     Dict_Ptr
 172+ 6B4F             >
 172+ 6B4F 09 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 6B51             >
 172+ 6B51             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6B51 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6B54             >
 172+ 6B54             >
 172+ 6B54             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6B54             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6B54             >
 172+ 6B54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6B54 28          >                db      40
 173+ 6B55                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 6B55             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 6B55             >
 173+ 6B55             >Dict_Ptr        defl    $
 173+ 6B55             >
 173+ 6B55             >//              ______________________________________________________________________
 173+ 6B55             >//              Heap part
 173+ 6B55             >
 173+ 6B55             >
 173+ 6B55             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E50B             >
 173+ E50B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E50B             >Latest_Definition defl  Heap_Ptr
 173+ E50B             >
 173+ E50B             >                // dummy db directives used to calculate length of namec
 173+ E50B 43 55 52 52 >                db      "CURRENT"
 173+ E50F 45 4E 54    >
 173+ E512             >len_NFA         defl    $ - temp_NFA
 173+ E512             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E50B             >
 173+ E50B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E50C 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E510 45 4E 54    >
 173+ E513             >                org     $-1                 // alter last byte of Name just above to set
 173+ E512 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E513             >
 173+ E513 FF 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E515             >Prev_Ptr        defl    Heap_Ptr
 173+ E515             >
 173+ E515             >mirror_Ptr      defl    $
 173+ E515             >
 173+ E515 57 6B       >                dw      Dict_Ptr + 2        // xt
 173+ E517             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E517             >
 173+ E517             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E517             >
 173+ E517             >//              ______________________________________________________________________
 173+ E517             >//              Dictionary part
 173+ E517             >
 173+ E517             >                org     Dict_Ptr
 173+ 6B55             >
 173+ 6B55 15 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 6B57             >
 173+ 6B57             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6B57 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6B5A             >
 173+ 6B5A             >
 173+ 6B5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6B5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6B5A             >
 173+ 6B5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6B5A 2A          >                db      42
 174+ 6B5B                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 6B5B             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 6B5B             >
 174+ 6B5B             >Dict_Ptr        defl    $
 174+ 6B5B             >
 174+ 6B5B             >//              ______________________________________________________________________
 174+ 6B5B             >//              Heap part
 174+ 6B5B             >
 174+ 6B5B             >
 174+ 6B5B             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E517             >
 174+ E517             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E517             >Latest_Definition defl  Heap_Ptr
 174+ E517             >
 174+ E517             >                // dummy db directives used to calculate length of namec
 174+ E517 53 54 41 54 >                db      "STATE"
 174+ E51B 45          >
 174+ E51C             >len_NFA         defl    $ - temp_NFA
 174+ E51C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E517             >
 174+ E517 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E518 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E51C 45          >
 174+ E51D             >                org     $-1                 // alter last byte of Name just above to set
 174+ E51C C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51D             >
 174+ E51D 0B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51F             >Prev_Ptr        defl    Heap_Ptr
 174+ E51F             >
 174+ E51F             >mirror_Ptr      defl    $
 174+ E51F             >
 174+ E51F 5D 6B       >                dw      Dict_Ptr + 2        // xt
 174+ E521             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E521             >
 174+ E521             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E521             >
 174+ E521             >//              ______________________________________________________________________
 174+ E521             >//              Dictionary part
 174+ E521             >
 174+ E521             >                org     Dict_Ptr
 174+ 6B5B             >
 174+ 6B5B 1F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 6B5D             >
 174+ 6B5D             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6B5D CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6B60             >
 174+ 6B60             >
 174+ 6B60             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6B60             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6B60             >
 174+ 6B60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6B60 2C          >                db      44
 175+ 6B61                              User_Def BASE       , "BASE"      , 46 //
 175+ 6B61             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 6B61             >
 175+ 6B61             >Dict_Ptr        defl    $
 175+ 6B61             >
 175+ 6B61             >//              ______________________________________________________________________
 175+ 6B61             >//              Heap part
 175+ 6B61             >
 175+ 6B61             >
 175+ 6B61             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E521             >
 175+ E521             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E521             >Latest_Definition defl  Heap_Ptr
 175+ E521             >
 175+ E521             >                // dummy db directives used to calculate length of namec
 175+ E521 42 41 53 45 >                db      "BASE"
 175+ E525             >len_NFA         defl    $ - temp_NFA
 175+ E525             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E521             >
 175+ E521 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E522 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E526             >                org     $-1                 // alter last byte of Name just above to set
 175+ E525 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E526             >
 175+ E526 17 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E528             >Prev_Ptr        defl    Heap_Ptr
 175+ E528             >
 175+ E528             >mirror_Ptr      defl    $
 175+ E528             >
 175+ E528 63 6B       >                dw      Dict_Ptr + 2        // xt
 175+ E52A             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E52A             >
 175+ E52A             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E52A             >
 175+ E52A             >//              ______________________________________________________________________
 175+ E52A             >//              Dictionary part
 175+ E52A             >
 175+ E52A             >                org     Dict_Ptr
 175+ 6B61             >
 175+ 6B61 28 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 6B63             >
 175+ 6B63             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6B63 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6B66             >
 175+ 6B66             >
 175+ 6B66             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6B66             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6B66             >
 175+ 6B66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6B66 2E          >                db      46
 176+ 6B67                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 6B67             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 6B67             >
 176+ 6B67             >Dict_Ptr        defl    $
 176+ 6B67             >
 176+ 6B67             >//              ______________________________________________________________________
 176+ 6B67             >//              Heap part
 176+ 6B67             >
 176+ 6B67             >
 176+ 6B67             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E52A             >
 176+ E52A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E52A             >Latest_Definition defl  Heap_Ptr
 176+ E52A             >
 176+ E52A             >                // dummy db directives used to calculate length of namec
 176+ E52A 44 50 4C    >                db      "DPL"
 176+ E52D             >len_NFA         defl    $ - temp_NFA
 176+ E52D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E52A             >
 176+ E52A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E52B 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52E             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52D CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52E             >
 176+ E52E 21 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E530             >Prev_Ptr        defl    Heap_Ptr
 176+ E530             >
 176+ E530             >mirror_Ptr      defl    $
 176+ E530             >
 176+ E530 69 6B       >                dw      Dict_Ptr + 2        // xt
 176+ E532             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E532             >
 176+ E532             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E532             >
 176+ E532             >//              ______________________________________________________________________
 176+ E532             >//              Dictionary part
 176+ E532             >
 176+ E532             >                org     Dict_Ptr
 176+ 6B67             >
 176+ 6B67 30 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 6B69             >
 176+ 6B69             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6B69 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6B6C             >
 176+ 6B6C             >
 176+ 6B6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6B6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6B6C             >
 176+ 6B6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6B6C 30          >                db      48
 177+ 6B6D                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 6B6D             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 6B6D             >
 177+ 6B6D             >Dict_Ptr        defl    $
 177+ 6B6D             >
 177+ 6B6D             >//              ______________________________________________________________________
 177+ 6B6D             >//              Heap part
 177+ 6B6D             >
 177+ 6B6D             >
 177+ 6B6D             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E532             >
 177+ E532             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E532             >Latest_Definition defl  Heap_Ptr
 177+ E532             >
 177+ E532             >                // dummy db directives used to calculate length of namec
 177+ E532 46 4C 44    >                db      "FLD"
 177+ E535             >len_NFA         defl    $ - temp_NFA
 177+ E535             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E532             >
 177+ E532 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E533 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E536             >                org     $-1                 // alter last byte of Name just above to set
 177+ E535 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E536             >
 177+ E536 2A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E538             >Prev_Ptr        defl    Heap_Ptr
 177+ E538             >
 177+ E538             >mirror_Ptr      defl    $
 177+ E538             >
 177+ E538 6F 6B       >                dw      Dict_Ptr + 2        // xt
 177+ E53A             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E53A             >
 177+ E53A             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E53A             >
 177+ E53A             >//              ______________________________________________________________________
 177+ E53A             >//              Dictionary part
 177+ E53A             >
 177+ E53A             >                org     Dict_Ptr
 177+ 6B6D             >
 177+ 6B6D 38 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 6B6F             >
 177+ 6B6F             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6B6F CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6B72             >
 177+ 6B72             >
 177+ 6B72             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6B72             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6B72             >
 177+ 6B72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6B72 32          >                db      50
 178+ 6B73                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 6B73             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 6B73             >
 178+ 6B73             >Dict_Ptr        defl    $
 178+ 6B73             >
 178+ 6B73             >//              ______________________________________________________________________
 178+ 6B73             >//              Heap part
 178+ 6B73             >
 178+ 6B73             >
 178+ 6B73             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E53A             >
 178+ E53A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E53A             >Latest_Definition defl  Heap_Ptr
 178+ E53A             >
 178+ E53A             >                // dummy db directives used to calculate length of namec
 178+ E53A 43 53 50    >                db      "CSP"
 178+ E53D             >len_NFA         defl    $ - temp_NFA
 178+ E53D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E53A             >
 178+ E53A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E53B 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53E             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53D D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53E             >
 178+ E53E 32 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E540             >Prev_Ptr        defl    Heap_Ptr
 178+ E540             >
 178+ E540             >mirror_Ptr      defl    $
 178+ E540             >
 178+ E540 75 6B       >                dw      Dict_Ptr + 2        // xt
 178+ E542             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E542             >
 178+ E542             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E542             >
 178+ E542             >//              ______________________________________________________________________
 178+ E542             >//              Dictionary part
 178+ E542             >
 178+ E542             >                org     Dict_Ptr
 178+ 6B73             >
 178+ 6B73 40 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 6B75             >
 178+ 6B75             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6B75 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6B78             >
 178+ 6B78             >
 178+ 6B78             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6B78             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6B78             >
 178+ 6B78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6B78 34          >                db      52
 179+ 6B79                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 6B79             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 6B79             >
 179+ 6B79             >Dict_Ptr        defl    $
 179+ 6B79             >
 179+ 6B79             >//              ______________________________________________________________________
 179+ 6B79             >//              Heap part
 179+ 6B79             >
 179+ 6B79             >
 179+ 6B79             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E542             >
 179+ E542             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E542             >Latest_Definition defl  Heap_Ptr
 179+ E542             >
 179+ E542             >                // dummy db directives used to calculate length of namec
 179+ E542 52 23       >                db      "R#"
 179+ E544             >len_NFA         defl    $ - temp_NFA
 179+ E544             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E542             >
 179+ E542 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E543 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E545             >                org     $-1                 // alter last byte of Name just above to set
 179+ E544 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E545             >
 179+ E545 3A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E547             >Prev_Ptr        defl    Heap_Ptr
 179+ E547             >
 179+ E547             >mirror_Ptr      defl    $
 179+ E547             >
 179+ E547 7B 6B       >                dw      Dict_Ptr + 2        // xt
 179+ E549             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E549             >
 179+ E549             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E549             >
 179+ E549             >//              ______________________________________________________________________
 179+ E549             >//              Dictionary part
 179+ E549             >
 179+ E549             >                org     Dict_Ptr
 179+ 6B79             >
 179+ 6B79 47 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 6B7B             >
 179+ 6B7B             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6B7B CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6B7E             >
 179+ 6B7E             >
 179+ 6B7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6B7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6B7E             >
 179+ 6B7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6B7E 36          >                db      54
 180+ 6B7F                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 6B7F             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 6B7F             >
 180+ 6B7F             >Dict_Ptr        defl    $
 180+ 6B7F             >
 180+ 6B7F             >//              ______________________________________________________________________
 180+ 6B7F             >//              Heap part
 180+ 6B7F             >
 180+ 6B7F             >
 180+ 6B7F             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E549             >
 180+ E549             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E549             >Latest_Definition defl  Heap_Ptr
 180+ E549             >
 180+ E549             >                // dummy db directives used to calculate length of namec
 180+ E549 48 4C 44    >                db      "HLD"
 180+ E54C             >len_NFA         defl    $ - temp_NFA
 180+ E54C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E549             >
 180+ E549 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E54A 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54D             >                org     $-1                 // alter last byte of Name just above to set
 180+ E54C C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54D             >
 180+ E54D 42 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54F             >Prev_Ptr        defl    Heap_Ptr
 180+ E54F             >
 180+ E54F             >mirror_Ptr      defl    $
 180+ E54F             >
 180+ E54F 81 6B       >                dw      Dict_Ptr + 2        // xt
 180+ E551             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E551             >
 180+ E551             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E551             >
 180+ E551             >//              ______________________________________________________________________
 180+ E551             >//              Dictionary part
 180+ E551             >
 180+ E551             >                org     Dict_Ptr
 180+ 6B7F             >
 180+ 6B7F 4F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 6B81             >
 180+ 6B81             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6B81 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6B84             >
 180+ 6B84             >
 180+ 6B84             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6B84             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6B84             >
 180+ 6B84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6B84 38          >                db      56
 181+ 6B85                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 6B85             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 6B85             >
 181+ 6B85             >Dict_Ptr        defl    $
 181+ 6B85             >
 181+ 6B85             >//              ______________________________________________________________________
 181+ 6B85             >//              Heap part
 181+ 6B85             >
 181+ 6B85             >
 181+ 6B85             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E551             >
 181+ E551             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E551             >Latest_Definition defl  Heap_Ptr
 181+ E551             >
 181+ E551             >                // dummy db directives used to calculate length of namec
 181+ E551 55 53 45 44 >                db      "USED"
 181+ E555             >len_NFA         defl    $ - temp_NFA
 181+ E555             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E551             >
 181+ E551 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E552 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E556             >                org     $-1                 // alter last byte of Name just above to set
 181+ E555 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E556             >
 181+ E556 49 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E558             >Prev_Ptr        defl    Heap_Ptr
 181+ E558             >
 181+ E558             >mirror_Ptr      defl    $
 181+ E558             >
 181+ E558 87 6B       >                dw      Dict_Ptr + 2        // xt
 181+ E55A             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E55A             >
 181+ E55A             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E55A             >
 181+ E55A             >//              ______________________________________________________________________
 181+ E55A             >//              Dictionary part
 181+ E55A             >
 181+ E55A             >                org     Dict_Ptr
 181+ 6B85             >
 181+ 6B85 58 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 6B87             >
 181+ 6B87             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6B87 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6B8A             >
 181+ 6B8A             >
 181+ 6B8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6B8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6B8A             >
 181+ 6B8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6B8A 3A          >                db      58
 182+ 6B8B                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 6B8B             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 6B8B             >
 182+ 6B8B             >Dict_Ptr        defl    $
 182+ 6B8B             >
 182+ 6B8B             >//              ______________________________________________________________________
 182+ 6B8B             >//              Heap part
 182+ 6B8B             >
 182+ 6B8B             >
 182+ 6B8B             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E55A             >
 182+ E55A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E55A             >Latest_Definition defl  Heap_Ptr
 182+ E55A             >
 182+ E55A             >                // dummy db directives used to calculate length of namec
 182+ E55A 50 52 45 56 >                db      "PREV"
 182+ E55E             >len_NFA         defl    $ - temp_NFA
 182+ E55E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E55A             >
 182+ E55A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E55B 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55F             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55E D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55F             >
 182+ E55F 51 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E561             >Prev_Ptr        defl    Heap_Ptr
 182+ E561             >
 182+ E561             >mirror_Ptr      defl    $
 182+ E561             >
 182+ E561 8D 6B       >                dw      Dict_Ptr + 2        // xt
 182+ E563             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E563             >
 182+ E563             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E563             >
 182+ E563             >//              ______________________________________________________________________
 182+ E563             >//              Dictionary part
 182+ E563             >
 182+ E563             >                org     Dict_Ptr
 182+ 6B8B             >
 182+ 6B8B 61 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 6B8D             >
 182+ 6B8D             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6B8D CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6B90             >
 182+ 6B90             >
 182+ 6B90             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6B90             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6B90             >
 182+ 6B90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6B90 3C          >                db      60
 183+ 6B91                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 6B91             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 6B91             >
 183+ 6B91             >Dict_Ptr        defl    $
 183+ 6B91             >
 183+ 6B91             >//              ______________________________________________________________________
 183+ 6B91             >//              Heap part
 183+ 6B91             >
 183+ 6B91             >
 183+ 6B91             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E563             >
 183+ E563             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E563             >Latest_Definition defl  Heap_Ptr
 183+ E563             >
 183+ E563             >                // dummy db directives used to calculate length of namec
 183+ E563 4C 50       >                db      "LP"
 183+ E565             >len_NFA         defl    $ - temp_NFA
 183+ E565             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E563             >
 183+ E563 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E564 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E566             >                org     $-1                 // alter last byte of Name just above to set
 183+ E565 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E566             >
 183+ E566 5A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E568             >Prev_Ptr        defl    Heap_Ptr
 183+ E568             >
 183+ E568             >mirror_Ptr      defl    $
 183+ E568             >
 183+ E568 93 6B       >                dw      Dict_Ptr + 2        // xt
 183+ E56A             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E56A             >
 183+ E56A             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E56A             >
 183+ E56A             >//              ______________________________________________________________________
 183+ E56A             >//              Dictionary part
 183+ E56A             >
 183+ E56A             >                org     Dict_Ptr
 183+ 6B91             >
 183+ 6B91 68 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 6B93             >
 183+ 6B93             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6B93 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6B96             >
 183+ 6B96             >
 183+ 6B96             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6B96             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6B96             >
 183+ 6B96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6B96 3E          >                db      62
 184+ 6B97                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 6B97             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 6B97             >
 184+ 6B97             >Dict_Ptr        defl    $
 184+ 6B97             >
 184+ 6B97             >//              ______________________________________________________________________
 184+ 6B97             >//              Heap part
 184+ 6B97             >
 184+ 6B97             >
 184+ 6B97             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E56A             >
 184+ E56A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E56A             >Latest_Definition defl  Heap_Ptr
 184+ E56A             >
 184+ E56A             >                // dummy db directives used to calculate length of namec
 184+ E56A 50 4C 41 43 >                db      "PLACE"
 184+ E56E 45          >
 184+ E56F             >len_NFA         defl    $ - temp_NFA
 184+ E56F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E56A             >
 184+ E56A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E56B 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56F 45          >
 184+ E570             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56F C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E570             >
 184+ E570 63 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E572             >Prev_Ptr        defl    Heap_Ptr
 184+ E572             >
 184+ E572             >mirror_Ptr      defl    $
 184+ E572             >
 184+ E572 99 6B       >                dw      Dict_Ptr + 2        // xt
 184+ E574             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E574             >
 184+ E574             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E574             >
 184+ E574             >//              ______________________________________________________________________
 184+ E574             >//              Dictionary part
 184+ E574             >
 184+ E574             >                org     Dict_Ptr
 184+ 6B97             >
 184+ 6B97 72 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 6B99             >
 184+ 6B99             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6B99 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6B9C             >
 184+ 6B9C             >
 184+ 6B9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6B9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6B9C             >
 184+ 6B9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6B9C 40          >                db      64
 185+ 6B9D                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 6B9D             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 6B9D             >
 185+ 6B9D             >Dict_Ptr        defl    $
 185+ 6B9D             >
 185+ 6B9D             >//              ______________________________________________________________________
 185+ 6B9D             >//              Heap part
 185+ 6B9D             >
 185+ 6B9D             >
 185+ 6B9D             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E574             >
 185+ E574             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E574             >Latest_Definition defl  Heap_Ptr
 185+ E574             >
 185+ E574             >                // dummy db directives used to calculate length of namec
 185+ E574 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E578 43 45 2D 49 >
 185+ E57C 44          >
 185+ E57D             >len_NFA         defl    $ - temp_NFA
 185+ E57D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E574             >
 185+ E574 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E575 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E579 43 45 2D 49 >
 185+ E57D 44          >
 185+ E57E             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57D C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57E             >
 185+ E57E 6A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E580             >Prev_Ptr        defl    Heap_Ptr
 185+ E580             >
 185+ E580             >mirror_Ptr      defl    $
 185+ E580             >
 185+ E580 9F 6B       >                dw      Dict_Ptr + 2        // xt
 185+ E582             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E582             >
 185+ E582             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E582             >
 185+ E582             >//              ______________________________________________________________________
 185+ E582             >//              Dictionary part
 185+ E582             >
 185+ E582             >                org     Dict_Ptr
 185+ 6B9D             >
 185+ 6B9D 80 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 6B9F             >
 185+ 6B9F             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6B9F CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6BA2             >
 185+ 6BA2             >
 185+ 6BA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6BA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6BA2             >
 185+ 6BA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6BA2 42          >                db      66
 186+ 6BA3                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 6BA3             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 6BA3             >
 186+ 6BA3             >Dict_Ptr        defl    $
 186+ 6BA3             >
 186+ 6BA3             >//              ______________________________________________________________________
 186+ 6BA3             >//              Heap part
 186+ 6BA3             >
 186+ 6BA3             >
 186+ 6BA3             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E582             >
 186+ E582             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E582             >Latest_Definition defl  Heap_Ptr
 186+ E582             >
 186+ E582             >                // dummy db directives used to calculate length of namec
 186+ E582 53 50 41 4E >                db      "SPAN"
 186+ E586             >len_NFA         defl    $ - temp_NFA
 186+ E586             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E582             >
 186+ E582 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E583 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E587             >                org     $-1                 // alter last byte of Name just above to set
 186+ E586 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E587             >
 186+ E587 74 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E589             >Prev_Ptr        defl    Heap_Ptr
 186+ E589             >
 186+ E589             >mirror_Ptr      defl    $
 186+ E589             >
 186+ E589 A5 6B       >                dw      Dict_Ptr + 2        // xt
 186+ E58B             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E58B             >
 186+ E58B             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E58B             >
 186+ E58B             >//              ______________________________________________________________________
 186+ E58B             >//              Dictionary part
 186+ E58B             >
 186+ E58B             >                org     Dict_Ptr
 186+ 6BA3             >
 186+ 6BA3 89 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 6BA5             >
 186+ 6BA5             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 6BA5 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 6BA8             >
 186+ 6BA8             >
 186+ 6BA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 6BA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 6BA8             >
 186+ 6BA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 6BA8 44          >                db      68
 187+ 6BA9                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 6BA9             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 6BA9             >
 187+ 6BA9             >Dict_Ptr        defl    $
 187+ 6BA9             >
 187+ 6BA9             >//              ______________________________________________________________________
 187+ 6BA9             >//              Heap part
 187+ 6BA9             >
 187+ 6BA9             >
 187+ 6BA9             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E58B             >
 187+ E58B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E58B             >Latest_Definition defl  Heap_Ptr
 187+ E58B             >
 187+ E58B             >                // dummy db directives used to calculate length of namec
 187+ E58B 48 41 4E 44 >                db      "HANDLER"
 187+ E58F 4C 45 52    >
 187+ E592             >len_NFA         defl    $ - temp_NFA
 187+ E592             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E58B             >
 187+ E58B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E58C 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E590 4C 45 52    >
 187+ E593             >                org     $-1                 // alter last byte of Name just above to set
 187+ E592 D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E593             >
 187+ E593 82 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E595             >Prev_Ptr        defl    Heap_Ptr
 187+ E595             >
 187+ E595             >mirror_Ptr      defl    $
 187+ E595             >
 187+ E595 AB 6B       >                dw      Dict_Ptr + 2        // xt
 187+ E597             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E597             >
 187+ E597             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E597             >
 187+ E597             >//              ______________________________________________________________________
 187+ E597             >//              Dictionary part
 187+ E597             >
 187+ E597             >                org     Dict_Ptr
 187+ 6BA9             >
 187+ 6BA9 95 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 6BAB             >
 187+ 6BAB             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6BAB CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 6BAE             >
 187+ 6BAE             >
 187+ 6BAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6BAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6BAE             >
 187+ 6BAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 6BAE 46          >                db      70
 188+ 6BAF                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 6BAF             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 6BAF             >
 188+ 6BAF             >Dict_Ptr        defl    $
 188+ 6BAF             >
 188+ 6BAF             >//              ______________________________________________________________________
 188+ 6BAF             >//              Heap part
 188+ 6BAF             >
 188+ 6BAF             >
 188+ 6BAF             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E597             >
 188+ E597             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E597             >Latest_Definition defl  Heap_Ptr
 188+ E597             >
 188+ E597             >                // dummy db directives used to calculate length of namec
 188+ E597 45 58 50    >                db      "EXP"
 188+ E59A             >len_NFA         defl    $ - temp_NFA
 188+ E59A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E597             >
 188+ E597 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E598 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E59B             >                org     $-1                 // alter last byte of Name just above to set
 188+ E59A D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E59B             >
 188+ E59B 8B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59D             >Prev_Ptr        defl    Heap_Ptr
 188+ E59D             >
 188+ E59D             >mirror_Ptr      defl    $
 188+ E59D             >
 188+ E59D B1 6B       >                dw      Dict_Ptr + 2        // xt
 188+ E59F             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59F             >
 188+ E59F             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59F             >
 188+ E59F             >//              ______________________________________________________________________
 188+ E59F             >//              Dictionary part
 188+ E59F             >
 188+ E59F             >                org     Dict_Ptr
 188+ 6BAF             >
 188+ 6BAF 9D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 6BB1             >
 188+ 6BB1             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6BB1 CD 86 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 6BB4             >
 188+ 6BB4             >
 188+ 6BB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6BB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6BB4             >
 188+ 6BB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 6BB4 48          >                db      72
 189+ 6BB5
 190+ 6BB5              //  ______________________________________________________________________
 191+ 6BB5              //
 192+ 6BB5              // here         -- a
 193+ 6BB5                              Colon_Def HERE, "HERE", is_normal
 193+ 6BB5             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 6BB5             >
 193+ 6BB5             >Dict_Ptr        defl    $
 193+ 6BB5             >
 193+ 6BB5             >//              ______________________________________________________________________
 193+ 6BB5             >//              Heap part
 193+ 6BB5             >
 193+ 6BB5             >
 193+ 6BB5             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59F             >
 193+ E59F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59F             >Latest_Definition defl  Heap_Ptr
 193+ E59F             >
 193+ E59F             >                // dummy db directives used to calculate length of namec
 193+ E59F 48 45 52 45 >                db      "HERE"
 193+ E5A3             >len_NFA         defl    $ - temp_NFA
 193+ E5A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59F             >
 193+ E59F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E5A0 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A4             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A3 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A4             >
 193+ E5A4 97 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A6             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A6             >
 193+ E5A6             >mirror_Ptr      defl    $
 193+ E5A6             >
 193+ E5A6 B7 6B       >                dw      Dict_Ptr + 2        // xt
 193+ E5A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A8             >
 193+ E5A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A8             >
 193+ E5A8             >//              ______________________________________________________________________
 193+ E5A8             >//              Dictionary part
 193+ E5A8             >
 193+ E5A8             >                org     Dict_Ptr
 193+ 6BB5             >
 193+ 6BB5 A6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 6BB7             >
 193+ 6BB7             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 6BB7 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 6BBA             >
 193+ 6BBA             >
 193+ 6BBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 6BBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 6BBA             >
 193+ 6BBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 6BBA 0F 6B 9B 69                  dw      DP, FETCH               // dp @
 195+ 6BBE 53 68                        dw      EXIT                    // ;
 196+ 6BC0
 197+ 6BC0              //  ______________________________________________________________________
 198+ 6BC0              //
 199+ 6BC0              // allot        n --
 200+ 6BC0                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 6BC0             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 6BC0             >
 200+ 6BC0             >Dict_Ptr        defl    $
 200+ 6BC0             >
 200+ 6BC0             >//              ______________________________________________________________________
 200+ 6BC0             >//              Heap part
 200+ 6BC0             >
 200+ 6BC0             >
 200+ 6BC0             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A8             >
 200+ E5A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A8             >Latest_Definition defl  Heap_Ptr
 200+ E5A8             >
 200+ E5A8             >                // dummy db directives used to calculate length of namec
 200+ E5A8 41 4C 4C 4F >                db      "ALLOT"
 200+ E5AC 54          >
 200+ E5AD             >len_NFA         defl    $ - temp_NFA
 200+ E5AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A8             >
 200+ E5A8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A9 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AD 54          >
 200+ E5AE             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AD D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AE             >
 200+ E5AE 9F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5B0             >Prev_Ptr        defl    Heap_Ptr
 200+ E5B0             >
 200+ E5B0             >mirror_Ptr      defl    $
 200+ E5B0             >
 200+ E5B0 C2 6B       >                dw      Dict_Ptr + 2        // xt
 200+ E5B2             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5B2             >
 200+ E5B2             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5B2             >
 200+ E5B2             >//              ______________________________________________________________________
 200+ E5B2             >//              Dictionary part
 200+ E5B2             >
 200+ E5B2             >                org     Dict_Ptr
 200+ 6BC0             >
 200+ 6BC0 B0 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 6BC2             >
 200+ 6BC2             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6BC2 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 6BC5             >
 200+ 6BC5             >
 200+ 6BC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6BC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6BC5             >
 200+ 6BC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6BC5 0F 6B 83 69                  dw      DP,  PLUSSTORE          // dp +!
 202+ 6BC9 53 68                        dw      EXIT                    // ;
 203+ 6BCB
 204+ 6BCB              //  ______________________________________________________________________
 205+ 6BCB              //
 206+ 6BCB              // comma        n --
 207+ 6BCB                              Colon_Def COMMA, ",", is_normal
 207+ 6BCB             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 6BCB             >
 207+ 6BCB             >Dict_Ptr        defl    $
 207+ 6BCB             >
 207+ 6BCB             >//              ______________________________________________________________________
 207+ 6BCB             >//              Heap part
 207+ 6BCB             >
 207+ 6BCB             >
 207+ 6BCB             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5B2             >
 207+ E5B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5B2             >Latest_Definition defl  Heap_Ptr
 207+ E5B2             >
 207+ E5B2             >                // dummy db directives used to calculate length of namec
 207+ E5B2 2C          >                db      ","
 207+ E5B3             >len_NFA         defl    $ - temp_NFA
 207+ E5B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5B2             >
 207+ E5B2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B3 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B4             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B3 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B4             >
 207+ E5B4 A8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B6             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B6             >
 207+ E5B6             >mirror_Ptr      defl    $
 207+ E5B6             >
 207+ E5B6 CD 6B       >                dw      Dict_Ptr + 2        // xt
 207+ E5B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B8             >
 207+ E5B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B8             >
 207+ E5B8             >//              ______________________________________________________________________
 207+ E5B8             >//              Dictionary part
 207+ E5B8             >
 207+ E5B8             >                org     Dict_Ptr
 207+ 6BCB             >
 207+ 6BCB B6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 6BCD             >
 207+ 6BCD             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 6BCD CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 6BD0             >
 207+ 6BD0             >
 207+ 6BD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 6BD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 6BD0             >
 207+ 6BD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 6BD0 B7 6B A5 69                  dw      HERE, STORE             // here !
 209+ 6BD4 A0 6A C2 6B                  dw      TWO, ALLOT              // 2 allot
 210+ 6BD8 53 68                        dw      EXIT                    // ;
 211+ 6BDA
 212+ 6BDA              //  ______________________________________________________________________
 213+ 6BDA              //
 214+ 6BDA              // ccomma       c --
 215+ 6BDA                              Colon_Def CCOMMA, "C,", is_normal
 215+ 6BDA             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 6BDA             >
 215+ 6BDA             >Dict_Ptr        defl    $
 215+ 6BDA             >
 215+ 6BDA             >//              ______________________________________________________________________
 215+ 6BDA             >//              Heap part
 215+ 6BDA             >
 215+ 6BDA             >
 215+ 6BDA             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B8             >
 215+ E5B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B8             >Latest_Definition defl  Heap_Ptr
 215+ E5B8             >
 215+ E5B8             >                // dummy db directives used to calculate length of namec
 215+ E5B8 43 2C       >                db      "C,"
 215+ E5BA             >len_NFA         defl    $ - temp_NFA
 215+ E5BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B8             >
 215+ E5B8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B9 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5BB             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5BA AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5BB             >
 215+ E5BB B2 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BD             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BD             >
 215+ E5BD             >mirror_Ptr      defl    $
 215+ E5BD             >
 215+ E5BD DC 6B       >                dw      Dict_Ptr + 2        // xt
 215+ E5BF             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BF             >
 215+ E5BF             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BF             >
 215+ E5BF             >//              ______________________________________________________________________
 215+ E5BF             >//              Dictionary part
 215+ E5BF             >
 215+ E5BF             >                org     Dict_Ptr
 215+ 6BDA             >
 215+ 6BDA BD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 6BDC             >
 215+ 6BDC             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 6BDC CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 6BDF             >
 215+ 6BDF             >
 215+ 6BDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 6BDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 6BDF             >
 215+ 6BDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 6BDF B7 6B B9 69                  dw      HERE, CSTORE            // here c!
 217+ 6BE3 99 6A C2 6B                  dw      ONE, ALLOT              // 1 allot
 218+ 6BE7 53 68                        dw      EXIT                    // ;
 219+ 6BE9
 220+ 6BE9              //  ______________________________________________________________________
 221+ 6BE9              //
 222+ 6BE9              // hpcomma      n --
 223+ 6BE9              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 6BE9              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 6BE9              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 6BE9              //              dw      EXIT                    // ;
 227+ 6BE9
 228+ 6BE9              //  ______________________________________________________________________
 229+ 6BE9              //
 230+ 6BE9              // s>d          n -- d
 231+ 6BE9              // converts a single precision integer in a double precision
 232+ 6BE9                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 6BE9             >
 232+ 6BE9             >Dict_Ptr        defl    $
 232+ 6BE9             >
 232+ 6BE9             >//              ______________________________________________________________________
 232+ 6BE9             >//              Heap part
 232+ 6BE9             >
 232+ 6BE9             >
 232+ 6BE9             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5BF             >
 232+ E5BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5BF             >Latest_Definition defl  Heap_Ptr
 232+ E5BF             >
 232+ E5BF             >                // dummy db directives used to calculate length of namec
 232+ E5BF 53 3E 44    >                db      "S>D"
 232+ E5C2             >len_NFA         defl    $ - temp_NFA
 232+ E5C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5BF             >
 232+ E5BF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5C0 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C3             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5C2 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C3             >
 232+ E5C3 B8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5C5             >Prev_Ptr        defl    Heap_Ptr
 232+ E5C5             >
 232+ E5C5             >mirror_Ptr      defl    $
 232+ E5C5             >
 232+ E5C5 EB 6B       >                dw      Dict_Ptr + 2        // xt
 232+ E5C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C7             >
 232+ E5C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C7             >
 232+ E5C7             >//              ______________________________________________________________________
 232+ E5C7             >//              Dictionary part
 232+ E5C7             >
 232+ E5C7             >                org     Dict_Ptr
 232+ 6BE9             >
 232+ 6BE9 C5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 6BEB             >
 232+ 6BEB             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 6BEB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 6BEB ~           >
 232+ 6BEB ~           >
 232+ 6BEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 6BEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 6BEB             >
 232+ 6BEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 6BEB E1                           pop     hl
 234+ 6BEC 7C                           ld      a, h
 235+ 6BED E5                           push    hl
 236+ 6BEE 17                           rla
 237+ 6BEF ED 62                        sbc     hl, hl
 238+ 6BF1 E5                           push    hl
 239+ 6BF2                              next
 239+ 6BF2 DD E9       >                jp      (ix)
 240+ 6BF4
 241+ 6BF4              //  ______________________________________________________________________
 242+ 6BF4              //
 243+ 6BF4              // -            n1 n2 -- n3
 244+ 6BF4              // subtraction
 245+ 6BF4                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 6BF4             >
 245+ 6BF4             >Dict_Ptr        defl    $
 245+ 6BF4             >
 245+ 6BF4             >//              ______________________________________________________________________
 245+ 6BF4             >//              Heap part
 245+ 6BF4             >
 245+ 6BF4             >
 245+ 6BF4             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C7             >
 245+ E5C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C7             >Latest_Definition defl  Heap_Ptr
 245+ E5C7             >
 245+ E5C7             >                // dummy db directives used to calculate length of namec
 245+ E5C7 2D          >                db      "-"
 245+ E5C8             >len_NFA         defl    $ - temp_NFA
 245+ E5C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C7             >
 245+ E5C7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C8 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C9             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C8 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C9             >
 245+ E5C9 BF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5CB             >Prev_Ptr        defl    Heap_Ptr
 245+ E5CB             >
 245+ E5CB             >mirror_Ptr      defl    $
 245+ E5CB             >
 245+ E5CB F6 6B       >                dw      Dict_Ptr + 2        // xt
 245+ E5CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5CD             >
 245+ E5CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5CD             >
 245+ E5CD             >//              ______________________________________________________________________
 245+ E5CD             >//              Dictionary part
 245+ E5CD             >
 245+ E5CD             >                org     Dict_Ptr
 245+ 6BF4             >
 245+ 6BF4 CB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 6BF6             >
 245+ 6BF6             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 6BF6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 6BF6 ~           >
 245+ 6BF6 ~           >
 245+ 6BF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 6BF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 6BF6             >
 245+ 6BF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 6BF6 D9                           exx
 247+ 6BF7 D1                           pop     de
 248+ 6BF8 E1                           pop     hl
 249+ 6BF9 A7                           and     a
 250+ 6BFA ED 52                        sbc     hl, de
 251+ 6BFC E5                           push    hl
 252+ 6BFD D9                           exx
 253+ 6BFE                              next
 253+ 6BFE DD E9       >                jp      (ix)
 254+ 6C00
 255+ 6C00
 256+ 6C00              //  ______________________________________________________________________
 257+ 6C00              //
 258+ 6C00              // =            n1 n2 -- n3
 259+ 6C00              // equals
 260+ 6C00                              Colon_Def EQUALS, "=", is_normal
 260+ 6C00             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 6C00             >
 260+ 6C00             >Dict_Ptr        defl    $
 260+ 6C00             >
 260+ 6C00             >//              ______________________________________________________________________
 260+ 6C00             >//              Heap part
 260+ 6C00             >
 260+ 6C00             >
 260+ 6C00             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5CD             >
 260+ E5CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5CD             >Latest_Definition defl  Heap_Ptr
 260+ E5CD             >
 260+ E5CD             >                // dummy db directives used to calculate length of namec
 260+ E5CD 3D          >                db      "="
 260+ E5CE             >len_NFA         defl    $ - temp_NFA
 260+ E5CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5CD             >
 260+ E5CD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5CE 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5CF             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5CE BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5CF             >
 260+ E5CF C7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5D1             >Prev_Ptr        defl    Heap_Ptr
 260+ E5D1             >
 260+ E5D1             >mirror_Ptr      defl    $
 260+ E5D1             >
 260+ E5D1 02 6C       >                dw      Dict_Ptr + 2        // xt
 260+ E5D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D3             >
 260+ E5D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D3             >
 260+ E5D3             >//              ______________________________________________________________________
 260+ E5D3             >//              Dictionary part
 260+ E5D3             >
 260+ E5D3             >                org     Dict_Ptr
 260+ 6C00             >
 260+ 6C00 D1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6C02             >
 260+ 6C02             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6C02 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 6C05             >
 260+ 6C05             >
 260+ 6C05             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6C05             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6C05             >
 260+ 6C05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6C05 F6 6B 78 68                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 6C09 53 68                        dw      EXIT                    // ;
 263+ 6C0B
 264+ 6C0B              //  ______________________________________________________________________
 265+ 6C0B              //
 266+ 6C0B              // u<           u1 u2 -- u3
 267+ 6C0B              // unsigned less-than
 268+ 6C0B                              New_Def ULESS, "U<", is_code, is_normal
 268+ 6C0B             >
 268+ 6C0B             >Dict_Ptr        defl    $
 268+ 6C0B             >
 268+ 6C0B             >//              ______________________________________________________________________
 268+ 6C0B             >//              Heap part
 268+ 6C0B             >
 268+ 6C0B             >
 268+ 6C0B             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D3             >
 268+ E5D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D3             >Latest_Definition defl  Heap_Ptr
 268+ E5D3             >
 268+ E5D3             >                // dummy db directives used to calculate length of namec
 268+ E5D3 55 3C       >                db      "U<"
 268+ E5D5             >len_NFA         defl    $ - temp_NFA
 268+ E5D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D3             >
 268+ E5D3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D4 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D6             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5D5 BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D6             >
 268+ E5D6 CD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D8             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D8             >
 268+ E5D8             >mirror_Ptr      defl    $
 268+ E5D8             >
 268+ E5D8 0D 6C       >                dw      Dict_Ptr + 2        // xt
 268+ E5DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5DA             >
 268+ E5DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5DA             >
 268+ E5DA             >//              ______________________________________________________________________
 268+ E5DA             >//              Dictionary part
 268+ E5DA             >
 268+ E5DA             >                org     Dict_Ptr
 268+ 6C0B             >
 268+ 6C0B D8 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 6C0D             >
 268+ 6C0D             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 6C0D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 6C0D ~           >
 268+ 6C0D ~           >
 268+ 6C0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 6C0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 6C0D             >
 268+ 6C0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 6C0D D9                           exx
 270+ 6C0E D1                           pop     de
 271+ 6C0F E1                           pop     hl
 272+ 6C10 A7                           and     a
 273+ 6C11 ED 52                        sbc     hl, de
 274+ 6C13 ED 62                        sbc     hl, hl
 275+ 6C15 E5                           push    hl
 276+ 6C16 D9                           exx
 277+ 6C17                              next
 277+ 6C17 DD E9       >                jp      (ix)
 278+ 6C19
 279+ 6C19              //  ______________________________________________________________________
 280+ 6C19              //
 281+ 6C19              // <           n1 n2 -- n3
 282+ 6C19              // less-than
 283+ 6C19                              New_Def LESS, "<", is_code, is_normal
 283+ 6C19             >
 283+ 6C19             >Dict_Ptr        defl    $
 283+ 6C19             >
 283+ 6C19             >//              ______________________________________________________________________
 283+ 6C19             >//              Heap part
 283+ 6C19             >
 283+ 6C19             >
 283+ 6C19             >                org     (Heap_Ptr & $1FFF) + $E000
 283+ E5DA             >
 283+ E5DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 283+ E5DA             >Latest_Definition defl  Heap_Ptr
 283+ E5DA             >
 283+ E5DA             >                // dummy db directives used to calculate length of namec
 283+ E5DA 3C          >                db      "<"
 283+ E5DB             >len_NFA         defl    $ - temp_NFA
 283+ E5DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 283+ E5DA             >
 283+ E5DA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 283+ E5DB 3C          >                db      "<"               // name string in 7-bit ascii, but
 283+ E5DC             >                org     $-1                 // alter last byte of Name just above to set
 283+ E5DB BC          >                db      {b $} | END_BIT     // msb as name end
 283+ E5DC             >
 283+ E5DC D3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 283+ E5DE             >Prev_Ptr        defl    Heap_Ptr
 283+ E5DE             >
 283+ E5DE             >mirror_Ptr      defl    $
 283+ E5DE             >
 283+ E5DE 1B 6C       >                dw      Dict_Ptr + 2        // xt
 283+ E5E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 283+ E5E0             >
 283+ E5E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 283+ E5E0             >
 283+ E5E0             >//              ______________________________________________________________________
 283+ E5E0             >//              Dictionary part
 283+ E5E0             >
 283+ E5E0             >                org     Dict_Ptr
 283+ 6C19             >
 283+ 6C19 DE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 283+ 6C1B             >
 283+ 6C1B             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 283+ 6C1B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 283+ 6C1B ~           >
 283+ 6C1B ~           >
 283+ 6C1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 283+ 6C1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 283+ 6C1B             >
 283+ 6C1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 284+ 6C1B D9                           exx
 285+ 6C1C D1                           pop     de
 286+ 6C1D E1                           pop     hl
 287+ 6C1E 7C                           ld      a, h
 288+ 6C1F EE 80                        xor     $80
 289+ 6C21 67                           ld      h, a
 290+ 6C22 7A                           ld      a, d
 291+ 6C23 EE 80                        xor     $80
 292+ 6C25 57                           ld      d, a
 293+ 6C26              //              and     a
 294+ 6C26 ED 52                        sbc     hl, de
 295+ 6C28 ED 62                        sbc     hl, hl
 296+ 6C2A E5                           push    hl
 297+ 6C2B D9                           exx
 298+ 6C2C                              next
 298+ 6C2C DD E9       >                jp      (ix)
 299+ 6C2E
 300+ 6C2E              //  ______________________________________________________________________
 301+ 6C2E              //
 302+ 6C2E              // >            n1 n2 -- n3
 303+ 6C2E              // greater than
 304+ 6C2E                              Colon_Def GREATER, ">", is_normal
 304+ 6C2E             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 6C2E             >
 304+ 6C2E             >Dict_Ptr        defl    $
 304+ 6C2E             >
 304+ 6C2E             >//              ______________________________________________________________________
 304+ 6C2E             >//              Heap part
 304+ 6C2E             >
 304+ 6C2E             >
 304+ 6C2E             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5E0             >
 304+ E5E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5E0             >Latest_Definition defl  Heap_Ptr
 304+ E5E0             >
 304+ E5E0             >                // dummy db directives used to calculate length of namec
 304+ E5E0 3E          >                db      ">"
 304+ E5E1             >len_NFA         defl    $ - temp_NFA
 304+ E5E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5E0             >
 304+ E5E0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5E1 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5E2             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5E1 BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5E2             >
 304+ E5E2 DA 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E4             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E4             >
 304+ E5E4             >mirror_Ptr      defl    $
 304+ E5E4             >
 304+ E5E4 30 6C       >                dw      Dict_Ptr + 2        // xt
 304+ E5E6             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E6             >
 304+ E5E6             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E6             >
 304+ E5E6             >//              ______________________________________________________________________
 304+ E5E6             >//              Dictionary part
 304+ E5E6             >
 304+ E5E6             >                org     Dict_Ptr
 304+ 6C2E             >
 304+ 6C2E E4 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 6C30             >
 304+ 6C30             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 6C30 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 6C33             >
 304+ 6C33             >
 304+ 6C33             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 6C33             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 6C33             >
 304+ 6C33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 6C33 23 69 1B 6C                  dw      SWAP, LESS              // swap <
 306+ 6C37 53 68                        dw      EXIT                    // ;
 307+ 6C39              //  ______________________________________________________________________
 308+ 6C39              //
 309+ 6C39              // min          n1 n2 -- n3
 310+ 6C39              // minimum between n1 and n2
 311+ 6C39                              Colon_Def MIN, "MIN" , is_normal
 311+ 6C39             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 6C39             >
 311+ 6C39             >Dict_Ptr        defl    $
 311+ 6C39             >
 311+ 6C39             >//              ______________________________________________________________________
 311+ 6C39             >//              Heap part
 311+ 6C39             >
 311+ 6C39             >
 311+ 6C39             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E6             >
 311+ E5E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E6             >Latest_Definition defl  Heap_Ptr
 311+ E5E6             >
 311+ E5E6             >                // dummy db directives used to calculate length of namec
 311+ E5E6 4D 49 4E    >                db      "MIN"
 311+ E5E9             >len_NFA         defl    $ - temp_NFA
 311+ E5E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E6             >
 311+ E5E6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E7 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5EA             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E9 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5EA             >
 311+ E5EA E0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5EC             >Prev_Ptr        defl    Heap_Ptr
 311+ E5EC             >
 311+ E5EC             >mirror_Ptr      defl    $
 311+ E5EC             >
 311+ E5EC 3B 6C       >                dw      Dict_Ptr + 2        // xt
 311+ E5EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5EE             >
 311+ E5EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5EE             >
 311+ E5EE             >//              ______________________________________________________________________
 311+ E5EE             >//              Dictionary part
 311+ E5EE             >
 311+ E5EE             >                org     Dict_Ptr
 311+ 6C39             >
 311+ 6C39 EC 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 6C3B             >
 311+ 6C3B             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 6C3B CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 6C3E             >
 311+ 6C3E             >
 311+ 6C3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 6C3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 6C3E             >
 311+ 6C3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 6C3E 79 69                        dw      TWO_DUP                 // 2dup
 313+ 6C40 30 6C                        dw      GREATER                 // >
 314+ 6C42 F5 63                        dw      ZBRANCH
 315+ 6C44 04 00                        dw      Min_Skip - $   // if
 316+ 6C46 23 69                        dw          SWAP                //      swap
 317+ 6C48              Min_Skip:                                       // endif
 318+ 6C48 0F 69                        dw      DROP                    // drop
 319+ 6C4A 53 68                        dw      EXIT                    // ;
 320+ 6C4C
 321+ 6C4C              //  ______________________________________________________________________
 322+ 6C4C              //
 323+ 6C4C              // max          n1 n2 -- n3
 324+ 6C4C              // maximum between n1 and n2
 325+ 6C4C                              Colon_Def MAX, "MAX", is_normal
 325+ 6C4C             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 6C4C             >
 325+ 6C4C             >Dict_Ptr        defl    $
 325+ 6C4C             >
 325+ 6C4C             >//              ______________________________________________________________________
 325+ 6C4C             >//              Heap part
 325+ 6C4C             >
 325+ 6C4C             >
 325+ 6C4C             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5EE             >
 325+ E5EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5EE             >Latest_Definition defl  Heap_Ptr
 325+ E5EE             >
 325+ E5EE             >                // dummy db directives used to calculate length of namec
 325+ E5EE 4D 41 58    >                db      "MAX"
 325+ E5F1             >len_NFA         defl    $ - temp_NFA
 325+ E5F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5EE             >
 325+ E5EE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5EF 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5F2             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5F1 D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5F2             >
 325+ E5F2 E6 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F4             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F4             >
 325+ E5F4             >mirror_Ptr      defl    $
 325+ E5F4             >
 325+ E5F4 4E 6C       >                dw      Dict_Ptr + 2        // xt
 325+ E5F6             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F6             >
 325+ E5F6             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F6             >
 325+ E5F6             >//              ______________________________________________________________________
 325+ E5F6             >//              Dictionary part
 325+ E5F6             >
 325+ E5F6             >                org     Dict_Ptr
 325+ 6C4C             >
 325+ 6C4C F4 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 6C4E             >
 325+ 6C4E             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 6C4E CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 6C51             >
 325+ 6C51             >
 325+ 6C51             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 6C51             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 6C51             >
 325+ 6C51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 6C51 79 69                        dw      TWO_DUP                 // 2dup
 327+ 6C53 1B 6C                        dw      LESS                    // <
 328+ 6C55 F5 63                        dw      ZBRANCH
 329+ 6C57 04 00                        dw      Max_Skip - $   // if
 330+ 6C59 23 69                        dw          SWAP                //      swap
 331+ 6C5B              Max_Skip:                                       // endif
 332+ 6C5B 0F 69                        dw      DROP                    // drop
 333+ 6C5D 53 68                        dw      EXIT                    // ;
 334+ 6C5F
 335+ 6C5F              //  ______________________________________________________________________
 336+ 6C5F              //
 337+ 6C5F              // ?dup         n -- 0 | n n
 338+ 6C5F              // duplicate if not zero
 339+ 6C5F                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 6C5F             >
 339+ 6C5F             >Dict_Ptr        defl    $
 339+ 6C5F             >
 339+ 6C5F             >//              ______________________________________________________________________
 339+ 6C5F             >//              Heap part
 339+ 6C5F             >
 339+ 6C5F             >
 339+ 6C5F             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F6             >
 339+ E5F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F6             >Latest_Definition defl  Heap_Ptr
 339+ E5F6             >
 339+ E5F6             >                // dummy db directives used to calculate length of namec
 339+ E5F6 3F 44 55 50 >                db      "?DUP"
 339+ E5FA             >len_NFA         defl    $ - temp_NFA
 339+ E5FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F6             >
 339+ E5F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F7 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5FB             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5FA D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5FB             >
 339+ E5FB EE 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5FD             >Prev_Ptr        defl    Heap_Ptr
 339+ E5FD             >
 339+ E5FD             >mirror_Ptr      defl    $
 339+ E5FD             >
 339+ E5FD 61 6C       >                dw      Dict_Ptr + 2        // xt
 339+ E5FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5FF             >
 339+ E5FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5FF             >
 339+ E5FF             >//              ______________________________________________________________________
 339+ E5FF             >//              Dictionary part
 339+ E5FF             >
 339+ E5FF             >                org     Dict_Ptr
 339+ 6C5F             >
 339+ 6C5F FD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 6C61             >
 339+ 6C61             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 6C61 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 6C61 ~           >
 339+ 6C61 ~           >
 339+ 6C61             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 6C61             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 6C61             >
 339+ 6C61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 6C61              QDup_Ptr:
 341+ 6C61 E1                           pop     hl
 342+ 6C62 7C                           ld      a, h
 343+ 6C63 B5                           or      l
 344+ 6C64 28 01                        jr      z, QDup_Skip
 345+ 6C66 E5                               push    hl
 346+ 6C67              QDup_Skip:
 347+ 6C67                              psh1
 347+ 6C67 E5          >                push    hl
 347+ 6C68 DD E9       >                jp      (ix)
 348+ 6C6A
 349+ 6C6A              //  ______________________________________________________________________
 350+ 6C6A              //
 351+ 6C6A              // -dup         n -- 0 | n n
 352+ 6C6A              // duplicate if not zero
 353+ 6C6A                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 6C6A             >
 353+ 6C6A             >Dict_Ptr        defl    $
 353+ 6C6A             >
 353+ 6C6A             >//              ______________________________________________________________________
 353+ 6C6A             >//              Heap part
 353+ 6C6A             >
 353+ 6C6A             >
 353+ 6C6A             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5FF             >
 353+ E5FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5FF             >Latest_Definition defl  Heap_Ptr
 353+ E5FF             >
 353+ E5FF             >                // dummy db directives used to calculate length of namec
 353+ E5FF 2D 44 55 50 >                db      "-DUP"
 353+ E603             >len_NFA         defl    $ - temp_NFA
 353+ E603             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5FF             >
 353+ E5FF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E600 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E604             >                org     $-1                 // alter last byte of Name just above to set
 353+ E603 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E604             >
 353+ E604 F6 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E606             >Prev_Ptr        defl    Heap_Ptr
 353+ E606             >
 353+ E606             >mirror_Ptr      defl    $
 353+ E606             >
 353+ E606 6C 6C       >                dw      Dict_Ptr + 2        // xt
 353+ E608             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E608             >
 353+ E608             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E608             >
 353+ E608             >//              ______________________________________________________________________
 353+ E608             >//              Dictionary part
 353+ E608             >
 353+ E608             >                org     Dict_Ptr
 353+ 6C6A             >
 353+ 6C6A 06 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 6C6C             >
 353+ 6C6C             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 6C6C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 6C6C ~           >
 353+ 6C6C ~           >
 353+ 6C6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 6C6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 6C6C             >
 353+ 6C6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 6C6C C3 61 6C                     jp      QDup_Ptr
 355+ 6C6F
 356+ 6C6F              //  ______________________________________________________________________
 357+ 6C6F              //
 358+ 6C6F              // emit         c --
 359+ 6C6F                              Colon_Def EMIT, "EMIT", is_normal
 359+ 6C6F             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 6C6F             >
 359+ 6C6F             >Dict_Ptr        defl    $
 359+ 6C6F             >
 359+ 6C6F             >//              ______________________________________________________________________
 359+ 6C6F             >//              Heap part
 359+ 6C6F             >
 359+ 6C6F             >
 359+ 6C6F             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E608             >
 359+ E608             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E608             >Latest_Definition defl  Heap_Ptr
 359+ E608             >
 359+ E608             >                // dummy db directives used to calculate length of namec
 359+ E608 45 4D 49 54 >                db      "EMIT"
 359+ E60C             >len_NFA         defl    $ - temp_NFA
 359+ E60C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E608             >
 359+ E608 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E609 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E60D             >                org     $-1                 // alter last byte of Name just above to set
 359+ E60C D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E60D             >
 359+ E60D FF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E60F             >Prev_Ptr        defl    Heap_Ptr
 359+ E60F             >
 359+ E60F             >mirror_Ptr      defl    $
 359+ E60F             >
 359+ E60F 71 6C       >                dw      Dict_Ptr + 2        // xt
 359+ E611             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E611             >
 359+ E611             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E611             >
 359+ E611             >//              ______________________________________________________________________
 359+ E611             >//              Dictionary part
 359+ E611             >
 359+ E611             >                org     Dict_Ptr
 359+ 6C6F             >
 359+ 6C6F 0F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 6C71             >
 359+ 6C71             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 6C71 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 6C74             >
 359+ 6C74             >
 359+ 6C74             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 6C74             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 6C74             >
 359+ 6C74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 6C74 D4 65                        dw      C_EMIT                      // (?emit)
 361+ 6C76 61 6C                        dw      QDUP                        // ?dup
 362+ 6C78                                                                  // if
 363+ 6C78 F5 63                        dw      ZBRANCH
 364+ 6C7A 0A 00                        dw      Emit_Skip - $
 365+ 6C7C A2 65                        dw          EMITC                   //      emitc
 366+ 6C7E 99 6A                        dw          ONE                     //      1
 367+ 6C80 3F 6B 83 69                  dw          OUT, PLUSSTORE        //      out +!
 368+ 6C84              Emit_Skip:                                          // endif
 369+ 6C84 53 68                        dw      EXIT                        // ;
 370+ 6C86
 371+ 6C86              //  ______________________________________________________________________
 372+ 6C86              //
 373+ 6C86              // space        --
 374+ 6C86                              Colon_Def SPACE, "SPACE", is_normal
 374+ 6C86             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 6C86             >
 374+ 6C86             >Dict_Ptr        defl    $
 374+ 6C86             >
 374+ 6C86             >//              ______________________________________________________________________
 374+ 6C86             >//              Heap part
 374+ 6C86             >
 374+ 6C86             >
 374+ 6C86             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E611             >
 374+ E611             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E611             >Latest_Definition defl  Heap_Ptr
 374+ E611             >
 374+ E611             >                // dummy db directives used to calculate length of namec
 374+ E611 53 50 41 43 >                db      "SPACE"
 374+ E615 45          >
 374+ E616             >len_NFA         defl    $ - temp_NFA
 374+ E616             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E611             >
 374+ E611 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E612 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E616 45          >
 374+ E617             >                org     $-1                 // alter last byte of Name just above to set
 374+ E616 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E617             >
 374+ E617 08 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E619             >Prev_Ptr        defl    Heap_Ptr
 374+ E619             >
 374+ E619             >mirror_Ptr      defl    $
 374+ E619             >
 374+ E619 88 6C       >                dw      Dict_Ptr + 2        // xt
 374+ E61B             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E61B             >
 374+ E61B             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E61B             >
 374+ E61B             >//              ______________________________________________________________________
 374+ E61B             >//              Dictionary part
 374+ E61B             >
 374+ E61B             >                org     Dict_Ptr
 374+ 6C86             >
 374+ 6C86 19 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 6C88             >
 374+ 6C88             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 6C88 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 6C8B             >
 374+ 6C8B             >
 374+ 6C8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 6C8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 6C8B             >
 374+ 6C8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 6C8B B5 6A 71 6C                  dw      BL, EMIT                // bl emit
 376+ 6C8F 53 68                        dw      EXIT                    // ;
 377+ 6C91
 378+ 6C91              //  ______________________________________________________________________
 379+ 6C91              //
 380+ 6C91              // traverse     a n -- a
 381+ 6C91              // A dictionary entry is structured as follows
 382+ 6C91              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 6C91              //      +1   word name, last character is toggled with $80
 384+ 6C91              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 6C91              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 6C91              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 6C91              //
 388+ 6C91                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 6C91             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 6C91             >
 388+ 6C91             >Dict_Ptr        defl    $
 388+ 6C91             >
 388+ 6C91             >//              ______________________________________________________________________
 388+ 6C91             >//              Heap part
 388+ 6C91             >
 388+ 6C91             >
 388+ 6C91             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E61B             >
 388+ E61B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E61B             >Latest_Definition defl  Heap_Ptr
 388+ E61B             >
 388+ E61B             >                // dummy db directives used to calculate length of namec
 388+ E61B 54 52 41 56 >                db      "TRAVERSE"
 388+ E61F 45 52 53 45 >
 388+ E623             >len_NFA         defl    $ - temp_NFA
 388+ E623             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E61B             >
 388+ E61B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E61C 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E620 45 52 53 45 >
 388+ E624             >                org     $-1                 // alter last byte of Name just above to set
 388+ E623 C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E624             >
 388+ E624 11 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E626             >Prev_Ptr        defl    Heap_Ptr
 388+ E626             >
 388+ E626             >mirror_Ptr      defl    $
 388+ E626             >
 388+ E626 93 6C       >                dw      Dict_Ptr + 2        // xt
 388+ E628             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E628             >
 388+ E628             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E628             >
 388+ E628             >//              ______________________________________________________________________
 388+ E628             >//              Dictionary part
 388+ E628             >
 388+ E628             >                org     Dict_Ptr
 388+ 6C91             >
 388+ 6C91 26 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 6C93             >
 388+ 6C93             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 6C93 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 6C96             >
 388+ 6C96             >
 388+ 6C96             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 6C96             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 6C96             >
 388+ 6C96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 6C96 23 69                        dw      SWAP                    // swap
 390+ 6C98              Traverse_Begin:                                 // begin
 391+ 6C98 06 69 A5 68                  dw          OVER, PLUS          //      over +
 392+ 6C9C A3 63 7F 00                  dw          LIT, 127            //      127
 393+ 6CA0 06 69 B0 69                  dw          OVER, CFETCH        //      over @
 394+ 6CA4 1B 6C                        dw          LESS                //      <
 395+ 6CA6                                                              // until
 396+ 6CA6 F5 63                        dw      ZBRANCH
 397+ 6CA8 F0 FF                        dw      Traverse_Begin - $
 398+ 6CAA 14 69                        dw      NIP                     //  nip
 399+ 6CAC 53 68                        dw      EXIT                    //  ;
 400+ 6CAE
 401+ 6CAE              //  ______________________________________________________________________
 402+ 6CAE              //
 403+ 6CAE              // mmu7@        -- n
 404+ 6CAE              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 6CAE
 406+ 6CAE                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 6CAE             >
 406+ 6CAE             >Dict_Ptr        defl    $
 406+ 6CAE             >
 406+ 6CAE             >//              ______________________________________________________________________
 406+ 6CAE             >//              Heap part
 406+ 6CAE             >
 406+ 6CAE             >
 406+ 6CAE             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E628             >
 406+ E628             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E628             >Latest_Definition defl  Heap_Ptr
 406+ E628             >
 406+ E628             >                // dummy db directives used to calculate length of namec
 406+ E628 4D 4D 55 37 >                db      "MMU7@"
 406+ E62C 40          >
 406+ E62D             >len_NFA         defl    $ - temp_NFA
 406+ E62D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E628             >
 406+ E628 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E629 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E62D 40          >
 406+ E62E             >                org     $-1                 // alter last byte of Name just above to set
 406+ E62D C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E62E             >
 406+ E62E 1B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E630             >Prev_Ptr        defl    Heap_Ptr
 406+ E630             >
 406+ E630             >mirror_Ptr      defl    $
 406+ E630             >
 406+ E630 B0 6C       >                dw      Dict_Ptr + 2        // xt
 406+ E632             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E632             >
 406+ E632             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E632             >
 406+ E632             >//              ______________________________________________________________________
 406+ E632             >//              Dictionary part
 406+ E632             >
 406+ E632             >                org     Dict_Ptr
 406+ 6CAE             >
 406+ 6CAE 30 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 6CB0             >
 406+ 6CB0             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 6CB0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 6CB0 ~           >
 406+ 6CB0 ~           >
 406+ 6CB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 6CB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 6CB0             >
 406+ 6CB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 6CB0 D9                           exx
 408+ 6CB1 CD 9F 64                     call    MMU7_read
 409+ 6CB4 D9                           exx
 410+ 6CB5 6F                           ld      l, a
 411+ 6CB6 26 00                        ld      h, 0
 412+ 6CB8 E5                           push    hl
 413+ 6CB9                              next
 413+ 6CB9 DD E9       >                jp      (ix)
 414+ 6CBB
 415+ 6CBB              //  ______________________________________________________________________
 416+ 6CBB              //
 417+ 6CBB              // mmu7!        n --
 418+ 6CBB              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 6CBB              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 6CBB
 421+ 6CBB                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 6CBB             >
 421+ 6CBB             >Dict_Ptr        defl    $
 421+ 6CBB             >
 421+ 6CBB             >//              ______________________________________________________________________
 421+ 6CBB             >//              Heap part
 421+ 6CBB             >
 421+ 6CBB             >
 421+ 6CBB             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E632             >
 421+ E632             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E632             >Latest_Definition defl  Heap_Ptr
 421+ E632             >
 421+ E632             >                // dummy db directives used to calculate length of namec
 421+ E632 4D 4D 55 37 >                db      "MMU7!"
 421+ E636 21          >
 421+ E637             >len_NFA         defl    $ - temp_NFA
 421+ E637             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E632             >
 421+ E632 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E633 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E637 21          >
 421+ E638             >                org     $-1                 // alter last byte of Name just above to set
 421+ E637 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E638             >
 421+ E638 28 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E63A             >Prev_Ptr        defl    Heap_Ptr
 421+ E63A             >
 421+ E63A             >mirror_Ptr      defl    $
 421+ E63A             >
 421+ E63A BD 6C       >                dw      Dict_Ptr + 2        // xt
 421+ E63C             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E63C             >
 421+ E63C             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E63C             >
 421+ E63C             >//              ______________________________________________________________________
 421+ E63C             >//              Dictionary part
 421+ E63C             >
 421+ E63C             >                org     Dict_Ptr
 421+ 6CBB             >
 421+ 6CBB 3A 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 6CBD             >
 421+ 6CBD             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6CBD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6CBD ~           >
 421+ 6CBD ~           >
 421+ 6CBD             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6CBD             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6CBD             >
 421+ 6CBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6CBD E1                           pop     hl
 423+ 6CBE 7D                           ld      a, l
 424+ 6CBF ED 92 57                     nextreg 87, a
 425+ 6CC2
 426+ 6CC2                              next
 426+ 6CC2 DD E9       >                jp      (ix)
 427+ 6CC4
 428+ 6CC4              //  ______________________________________________________________________
 429+ 6CC4              //
 430+ 6CC4              // >far         ha -- a n
 431+ 6CC4              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 6CC4              // take lower bits of H and L as an offset from E000h
 433+ 6CC4              // then return address  a  between E000h-FFFFh
 434+ 6CC4              // and page number n  between 64-71 (40h-47h)
 435+ 6CC4              // For example, in hex:
 436+ 6CC4              //   0000 >FAR  gives  40.E000
 437+ 6CC4              //   1FFF >FAR  gives  40.FFFF
 438+ 6CC4              //   2000 >FAR  gives  41.E000
 439+ 6CC4              //   3FFF >FAR  gives  41.FFFF
 440+ 6CC4              //   EFFF >FAR  gives  47.EFFF
 441+ 6CC4              //   FFFF >FAR  gives  47.FFFF
 442+ 6CC4                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 6CC4             >
 442+ 6CC4             >Dict_Ptr        defl    $
 442+ 6CC4             >
 442+ 6CC4             >//              ______________________________________________________________________
 442+ 6CC4             >//              Heap part
 442+ 6CC4             >
 442+ 6CC4             >
 442+ 6CC4             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E63C             >
 442+ E63C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E63C             >Latest_Definition defl  Heap_Ptr
 442+ E63C             >
 442+ E63C             >                // dummy db directives used to calculate length of namec
 442+ E63C 3E 46 41 52 >                db      ">FAR"
 442+ E640             >len_NFA         defl    $ - temp_NFA
 442+ E640             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E63C             >
 442+ E63C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E63D 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E641             >                org     $-1                 // alter last byte of Name just above to set
 442+ E640 D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E641             >
 442+ E641 32 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E643             >Prev_Ptr        defl    Heap_Ptr
 442+ E643             >
 442+ E643             >mirror_Ptr      defl    $
 442+ E643             >
 442+ E643 C6 6C       >                dw      Dict_Ptr + 2        // xt
 442+ E645             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E645             >
 442+ E645             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E645             >
 442+ E645             >//              ______________________________________________________________________
 442+ E645             >//              Dictionary part
 442+ E645             >
 442+ E645             >                org     Dict_Ptr
 442+ 6CC4             >
 442+ 6CC4 43 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 6CC6             >
 442+ 6CC6             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 6CC6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 6CC6 ~           >
 442+ 6CC6 ~           >
 442+ 6CC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 6CC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 6CC6             >
 442+ 6CC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 6CC6 E1                           pop     hl
 444+ 6CC7 CD AA 64                     call    TO_FAR_rout
 445+ 6CCA E5                           push    hl
 446+ 6CCB 6F                           ld      l, a
 447+ 6CCC 26 00                        ld      h, 0
 448+ 6CCE E5                           push    hl
 449+ 6CCF                              next
 449+ 6CCF DD E9       >                jp      (ix)
 450+ 6CD1
 451+ 6CD1              //  ______________________________________________________________________
 452+ 6CD1              //
 453+ 6CD1              // <far         a n  -- ha
 454+ 6CD1              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 455+ 6CD1              // reverse of >FAR: encodes a FAR address compressing
 456+ 6CD1              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 6CD1                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 6CD1             >
 457+ 6CD1             >Dict_Ptr        defl    $
 457+ 6CD1             >
 457+ 6CD1             >//              ______________________________________________________________________
 457+ 6CD1             >//              Heap part
 457+ 6CD1             >
 457+ 6CD1             >
 457+ 6CD1             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E645             >
 457+ E645             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E645             >Latest_Definition defl  Heap_Ptr
 457+ E645             >
 457+ E645             >                // dummy db directives used to calculate length of namec
 457+ E645 3C 46 41 52 >                db      "<FAR"
 457+ E649             >len_NFA         defl    $ - temp_NFA
 457+ E649             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E645             >
 457+ E645 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E646 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E64A             >                org     $-1                 // alter last byte of Name just above to set
 457+ E649 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E64A             >
 457+ E64A 3C 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E64C             >Prev_Ptr        defl    Heap_Ptr
 457+ E64C             >
 457+ E64C             >mirror_Ptr      defl    $
 457+ E64C             >
 457+ E64C D3 6C       >                dw      Dict_Ptr + 2        // xt
 457+ E64E             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E64E             >
 457+ E64E             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E64E             >
 457+ E64E             >//              ______________________________________________________________________
 457+ E64E             >//              Dictionary part
 457+ E64E             >
 457+ E64E             >                org     Dict_Ptr
 457+ 6CD1             >
 457+ 6CD1 4C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 6CD3             >
 457+ 6CD3             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 6CD3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 6CD3 ~           >
 457+ 6CD3 ~           >
 457+ 6CD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 6CD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 6CD3             >
 457+ 6CD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 6CD3 E1                           pop     hl                  // page number in e
 459+ 6CD4 7D                           ld      a, l
 460+ 6CD5 E6 07                        and     07
 461+ 6CD7 0F                           rrca
 462+ 6CD8 0F                           rrca
 463+ 6CD9 0F                           rrca
 464+ 6CDA 08                           ex      af, af
 465+ 6CDB E1                           pop     hl                  // address in hl
 466+ 6CDC 7C                           ld      a, h
 467+ 6CDD E6 1F                        and     $1F
 468+ 6CDF 67                           ld      h, a
 469+ 6CE0 08                           ex      af, af
 470+ 6CE1 B4                           or      h
 471+ 6CE2 67                           ld      h, a
 472+ 6CE3                              psh1
 472+ 6CE3 E5          >                push    hl
 472+ 6CE4 DD E9       >                jp      (ix)
 473+ 6CE6
 474+ 6CE6              //  ______________________________________________________________________
 475+ 6CE6              //
 476+ 6CE6              // ?IN_MMU7        a -- f
 477+ 6CE6              // query current page in MMU7 8K-RAM : 0 and 223
 478+ 6CE6                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 478+ 6CE6             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 478+ 6CE6             >
 478+ 6CE6             >Dict_Ptr        defl    $
 478+ 6CE6             >
 478+ 6CE6             >//              ______________________________________________________________________
 478+ 6CE6             >//              Heap part
 478+ 6CE6             >
 478+ 6CE6             >
 478+ 6CE6             >                org     (Heap_Ptr & $1FFF) + $E000
 478+ E64E             >
 478+ E64E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ E64E             >Latest_Definition defl  Heap_Ptr
 478+ E64E             >
 478+ E64E             >                // dummy db directives used to calculate length of namec
 478+ E64E 3F 49 4E 5F >                db      "?IN_MMU7"
 478+ E652 4D 4D 55 37 >
 478+ E656             >len_NFA         defl    $ - temp_NFA
 478+ E656             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ E64E             >
 478+ E64E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ E64F 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 478+ E653 4D 4D 55 37 >
 478+ E657             >                org     $-1                 // alter last byte of Name just above to set
 478+ E656 B7          >                db      {b $} | END_BIT     // msb as name end
 478+ E657             >
 478+ E657 45 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 478+ E659             >Prev_Ptr        defl    Heap_Ptr
 478+ E659             >
 478+ E659             >mirror_Ptr      defl    $
 478+ E659             >
 478+ E659 E8 6C       >                dw      Dict_Ptr + 2        // xt
 478+ E65B             >Heap_Ptr        defl    $ - $E000           // save current HP
 478+ E65B             >
 478+ E65B             >Current_HP      defl  $ - $E000             // used to set HP once!
 478+ E65B             >
 478+ E65B             >//              ______________________________________________________________________
 478+ E65B             >//              Dictionary part
 478+ E65B             >
 478+ E65B             >                org     Dict_Ptr
 478+ 6CE6             >
 478+ 6CE6 59 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 478+ 6CE8             >
 478+ 6CE8             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 6CE8 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 6CEB             >
 478+ 6CEB             >
 478+ 6CEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 6CEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 6CEB             >
 478+ 6CEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 6CEB 2A 69                        dw      DUP
 480+ 6CED A3 63 00 E0                  dw      LIT, $E000
 481+ 6CF1 0D 6C                        dw      ULESS
 482+ 6CF3 86 68                        dw      NOT_OP
 483+ 6CF5 53 68                        dw      EXIT
 484+ 6CF7
 485+ 6CF7              //  ______________________________________________________________________
 486+ 6CF7              //
 487+ 6CF7              // far          hp -- ha
 488+ 6CF7              // query current page in MMU7 8K-RAM : 0 and 223
 489+ 6CF7                              Colon_Def FAR, "FAR", is_normal
 489+ 6CF7             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 489+ 6CF7             >
 489+ 6CF7             >Dict_Ptr        defl    $
 489+ 6CF7             >
 489+ 6CF7             >//              ______________________________________________________________________
 489+ 6CF7             >//              Heap part
 489+ 6CF7             >
 489+ 6CF7             >
 489+ 6CF7             >                org     (Heap_Ptr & $1FFF) + $E000
 489+ E65B             >
 489+ E65B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ E65B             >Latest_Definition defl  Heap_Ptr
 489+ E65B             >
 489+ E65B             >                // dummy db directives used to calculate length of namec
 489+ E65B 46 41 52    >                db      "FAR"
 489+ E65E             >len_NFA         defl    $ - temp_NFA
 489+ E65E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ E65B             >
 489+ E65B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ E65C 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 489+ E65F             >                org     $-1                 // alter last byte of Name just above to set
 489+ E65E D2          >                db      {b $} | END_BIT     // msb as name end
 489+ E65F             >
 489+ E65F 4E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 489+ E661             >Prev_Ptr        defl    Heap_Ptr
 489+ E661             >
 489+ E661             >mirror_Ptr      defl    $
 489+ E661             >
 489+ E661 F9 6C       >                dw      Dict_Ptr + 2        // xt
 489+ E663             >Heap_Ptr        defl    $ - $E000           // save current HP
 489+ E663             >
 489+ E663             >Current_HP      defl  $ - $E000             // used to set HP once!
 489+ E663             >
 489+ E663             >//              ______________________________________________________________________
 489+ E663             >//              Dictionary part
 489+ E663             >
 489+ E663             >                org     Dict_Ptr
 489+ 6CF7             >
 489+ 6CF7 61 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 489+ 6CF9             >
 489+ 6CF9             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 6CF9 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 489+ 6CFC             >
 489+ 6CFC             >
 489+ 6CFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 6CFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 6CFC             >
 489+ 6CFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 6CFC C6 6C                        dw      TO_FAR
 491+ 6CFE BD 6C                        dw      MMU7_STORE
 492+ 6D00 53 68                        dw      EXIT
 493+ 6D02
 494+ 6D02              //  ______________________________________________________________________
 495+ 6D02              //
 496+ 6D02              // ?HEAP_PTR       n -- n f
 497+ 6D02              // query current page in MMU7 8K-RAM : 0 and 223
 498+ 6D02                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 498+ 6D02             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 498+ 6D02             >
 498+ 6D02             >Dict_Ptr        defl    $
 498+ 6D02             >
 498+ 6D02             >//              ______________________________________________________________________
 498+ 6D02             >//              Heap part
 498+ 6D02             >
 498+ 6D02             >
 498+ 6D02             >                org     (Heap_Ptr & $1FFF) + $E000
 498+ E663             >
 498+ E663             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ E663             >Latest_Definition defl  Heap_Ptr
 498+ E663             >
 498+ E663             >                // dummy db directives used to calculate length of namec
 498+ E663 3F 48 45 41 >                db      "?HEAP_PTR"
 498+ E667 50 5F 50 54 >
 498+ E66B 52          >
 498+ E66C             >len_NFA         defl    $ - temp_NFA
 498+ E66C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ E663             >
 498+ E663 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ E664 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 498+ E668 50 5F 50 54 >
 498+ E66C 52          >
 498+ E66D             >                org     $-1                 // alter last byte of Name just above to set
 498+ E66C D2          >                db      {b $} | END_BIT     // msb as name end
 498+ E66D             >
 498+ E66D 5B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 498+ E66F             >Prev_Ptr        defl    Heap_Ptr
 498+ E66F             >
 498+ E66F             >mirror_Ptr      defl    $
 498+ E66F             >
 498+ E66F 04 6D       >                dw      Dict_Ptr + 2        // xt
 498+ E671             >Heap_Ptr        defl    $ - $E000           // save current HP
 498+ E671             >
 498+ E671             >Current_HP      defl  $ - $E000             // used to set HP once!
 498+ E671             >
 498+ E671             >//              ______________________________________________________________________
 498+ E671             >//              Dictionary part
 498+ E671             >
 498+ E671             >                org     Dict_Ptr
 498+ 6D02             >
 498+ 6D02 6F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 498+ 6D04             >
 498+ 6D04             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 6D04 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 498+ 6D07             >
 498+ 6D07             >
 498+ 6D07             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 6D07             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 6D07             >
 498+ 6D07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 6D07 2A 69                        dw      DUP
 500+ 6D09 F5 63                        dw      ZBRANCH
 501+ 6D0B 08 00                        dw      QHeap_Skip - $
 502+ 6D0D A3 63 00 60                  dw          LIT, $6000
 503+ 6D11 0D 6C                        dw          ULESS
 504+ 6D13              QHeap_Skip:                                          // endif
 505+ 6D13 53 68                        dw      EXIT                        // ;
 506+ 6D15
 507+ 6D15              //  ______________________________________________________________________
 508+ 6D15              //
 509+ 6D15              // ?>heap       n1 -- n2
 510+ 6D15              // query current page in MMU7 8K-RAM : 0 and 223
 511+ 6D15                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 511+ 6D15             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 511+ 6D15             >
 511+ 6D15             >Dict_Ptr        defl    $
 511+ 6D15             >
 511+ 6D15             >//              ______________________________________________________________________
 511+ 6D15             >//              Heap part
 511+ 6D15             >
 511+ 6D15             >
 511+ 6D15             >                org     (Heap_Ptr & $1FFF) + $E000
 511+ E671             >
 511+ E671             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ E671             >Latest_Definition defl  Heap_Ptr
 511+ E671             >
 511+ E671             >                // dummy db directives used to calculate length of namec
 511+ E671 3F 3E 48 45 >                db      "?>HEAP"
 511+ E675 41 50       >
 511+ E677             >len_NFA         defl    $ - temp_NFA
 511+ E677             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ E671             >
 511+ E671 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ E672 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 511+ E676 41 50       >
 511+ E678             >                org     $-1                 // alter last byte of Name just above to set
 511+ E677 D0          >                db      {b $} | END_BIT     // msb as name end
 511+ E678             >
 511+ E678 63 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 511+ E67A             >Prev_Ptr        defl    Heap_Ptr
 511+ E67A             >
 511+ E67A             >mirror_Ptr      defl    $
 511+ E67A             >
 511+ E67A 17 6D       >                dw      Dict_Ptr + 2        // xt
 511+ E67C             >Heap_Ptr        defl    $ - $E000           // save current HP
 511+ E67C             >
 511+ E67C             >Current_HP      defl  $ - $E000             // used to set HP once!
 511+ E67C             >
 511+ E67C             >//              ______________________________________________________________________
 511+ E67C             >//              Dictionary part
 511+ E67C             >
 511+ E67C             >                org     Dict_Ptr
 511+ 6D15             >
 511+ 6D15 7A 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 511+ 6D17             >
 511+ 6D17             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 6D17 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 6D1A             >
 511+ 6D1A             >
 511+ 6D1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 6D1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 6D1A             >
 511+ 6D1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 6D1A 2A 69                        dw      DUP
 513+ 6D1C 04 6D                        dw      QHEAPP
 514+ 6D1E F5 63                        dw      ZBRANCH
 515+ 6D20 04 00                        dw      Q2Heap_Skip - $
 516+ 6D22 F9 6C                        dw          FAR
 517+ 6D24              Q2Heap_Skip:                                          // endif
 518+ 6D24 53 68                        dw      EXIT                        // ;
 519+ 6D26
 520+ 6D26              //  ______________________________________________________________________
 521+ 6D26              //
 522+ 6D26              // hp_fetch     -- a
 523+ 6D26                              Colon_Def HP_FETCH, "HP@", is_normal
 523+ 6D26             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 523+ 6D26             >
 523+ 6D26             >Dict_Ptr        defl    $
 523+ 6D26             >
 523+ 6D26             >//              ______________________________________________________________________
 523+ 6D26             >//              Heap part
 523+ 6D26             >
 523+ 6D26             >
 523+ 6D26             >                org     (Heap_Ptr & $1FFF) + $E000
 523+ E67C             >
 523+ E67C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ E67C             >Latest_Definition defl  Heap_Ptr
 523+ E67C             >
 523+ E67C             >                // dummy db directives used to calculate length of namec
 523+ E67C 48 50 40    >                db      "HP@"
 523+ E67F             >len_NFA         defl    $ - temp_NFA
 523+ E67F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ E67C             >
 523+ E67C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ E67D 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 523+ E680             >                org     $-1                 // alter last byte of Name just above to set
 523+ E67F C0          >                db      {b $} | END_BIT     // msb as name end
 523+ E680             >
 523+ E680 71 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 523+ E682             >Prev_Ptr        defl    Heap_Ptr
 523+ E682             >
 523+ E682             >mirror_Ptr      defl    $
 523+ E682             >
 523+ E682 28 6D       >                dw      Dict_Ptr + 2        // xt
 523+ E684             >Heap_Ptr        defl    $ - $E000           // save current HP
 523+ E684             >
 523+ E684             >Current_HP      defl  $ - $E000             // used to set HP once!
 523+ E684             >
 523+ E684             >//              ______________________________________________________________________
 523+ E684             >//              Dictionary part
 523+ E684             >
 523+ E684             >                org     Dict_Ptr
 523+ 6D26             >
 523+ 6D26 82 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 523+ 6D28             >
 523+ 6D28             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 6D28 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 6D2B             >
 523+ 6D2B             >
 523+ 6D2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 6D2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 6D2B             >
 523+ 6D2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 6D2B 27 6B 9B 69                  dw      HP, FETCH               // hp @
 525+ 6D2F 53 68                        dw      EXIT                    // ;
 526+ 6D31
 527+ 6D31              //  ______________________________________________________________________
 528+ 6D31              //
 529+ 6D31              // page-watermark   -- n
 530+ 6D31              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 531+ 6D31                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 531+ 6D31             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 531+ 6D31             >
 531+ 6D31             >Dict_Ptr        defl    $
 531+ 6D31             >
 531+ 6D31             >//              ______________________________________________________________________
 531+ 6D31             >//              Heap part
 531+ 6D31             >
 531+ 6D31             >
 531+ 6D31             >                org     (Heap_Ptr & $1FFF) + $E000
 531+ E684             >
 531+ E684             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ E684             >Latest_Definition defl  Heap_Ptr
 531+ E684             >
 531+ E684             >                // dummy db directives used to calculate length of namec
 531+ E684 50 41 47 45 >                db      "PAGE-WATERMARK"
 531+ E688 2D 57 41 54 >
 531+ E68C 45 52 4D 41 >
 531+ E690 52 4B       >
 531+ E692             >len_NFA         defl    $ - temp_NFA
 531+ E692             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ E684             >
 531+ E684 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ E685 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 531+ E689 2D 57 41 54 >
 531+ E68D 45 52 4D 41 >
 531+ E691 52 4B       >
 531+ E693             >                org     $-1                 // alter last byte of Name just above to set
 531+ E692 CB          >                db      {b $} | END_BIT     // msb as name end
 531+ E693             >
 531+ E693 7C 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 531+ E695             >Prev_Ptr        defl    Heap_Ptr
 531+ E695             >
 531+ E695             >mirror_Ptr      defl    $
 531+ E695             >
 531+ E695 33 6D       >                dw      Dict_Ptr + 2        // xt
 531+ E697             >Heap_Ptr        defl    $ - $E000           // save current HP
 531+ E697             >
 531+ E697             >Current_HP      defl  $ - $E000             // used to set HP once!
 531+ E697             >
 531+ E697             >//              ______________________________________________________________________
 531+ E697             >//              Dictionary part
 531+ E697             >
 531+ E697             >                org     Dict_Ptr
 531+ 6D31             >
 531+ 6D31 95 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 531+ 6D33             >
 531+ 6D33             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 6D33 CD 66 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 531+ 6D36             >
 531+ 6D36             >
 531+ 6D36             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 6D36             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 6D36             >
 531+ 6D36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 6D36 80 1F       >                dw      $1F80
 532+ 6D38
 533+ 6D38              //  ______________________________________________________________________
 534+ 6D38              //
 535+ 6D38              // skip-hp-page ha -- a
 536+ 6D38                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 536+ 6D38             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 536+ 6D38             >
 536+ 6D38             >Dict_Ptr        defl    $
 536+ 6D38             >
 536+ 6D38             >//              ______________________________________________________________________
 536+ 6D38             >//              Heap part
 536+ 6D38             >
 536+ 6D38             >
 536+ 6D38             >                org     (Heap_Ptr & $1FFF) + $E000
 536+ E697             >
 536+ E697             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ E697             >Latest_Definition defl  Heap_Ptr
 536+ E697             >
 536+ E697             >                // dummy db directives used to calculate length of namec
 536+ E697 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 536+ E69B 2D 48 50 2D >
 536+ E69F 50 41 47 45 >
 536+ E6A3             >len_NFA         defl    $ - temp_NFA
 536+ E6A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ E697             >
 536+ E697 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ E698 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 536+ E69C 2D 48 50 2D >
 536+ E6A0 50 41 47 45 >
 536+ E6A4             >                org     $-1                 // alter last byte of Name just above to set
 536+ E6A3 C5          >                db      {b $} | END_BIT     // msb as name end
 536+ E6A4             >
 536+ E6A4 84 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 536+ E6A6             >Prev_Ptr        defl    Heap_Ptr
 536+ E6A6             >
 536+ E6A6             >mirror_Ptr      defl    $
 536+ E6A6             >
 536+ E6A6 3A 6D       >                dw      Dict_Ptr + 2        // xt
 536+ E6A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 536+ E6A8             >
 536+ E6A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 536+ E6A8             >
 536+ E6A8             >//              ______________________________________________________________________
 536+ E6A8             >//              Dictionary part
 536+ E6A8             >
 536+ E6A8             >                org     Dict_Ptr
 536+ 6D38             >
 536+ 6D38 A6 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 536+ 6D3A             >
 536+ 6D3A             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 6D3A CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 536+ 6D3D             >
 536+ 6D3D             >
 536+ 6D3D             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 6D3D             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 6D3D             >
 536+ 6D3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 6D3D 28 6D                        dw      HP_FETCH                // hp@
 538+ 6D3F A3 63 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 538+ 6D43 13 68
 539+ 6D45 A5 68                        dw      PLUS
 540+ 6D47 33 6D                        dw      PAGE_WATERMARK
 541+ 6D49 30 6C                        dw      GREATER
 542+ 6D4B F5 63                        dw      ZBRANCH
 543+ 6D4D 12 00                        dw      Skip_Skip - $   // if
 544+ 6D4F 28 6D                        dw      HP_FETCH
 545+ 6D51 A3 63 FF 1F                  dw      LIT, $1FFF, OR_OP
 545+ 6D55 22 68
 546+ 6D57 BE 68 CC 68                  dw      ONE_PLUS, TWO_PLUS
 547+ 6D5B 27 6B A5 69                  dw      HP, STORE
 548+ 6D5F              Skip_Skip:
 549+ 6D5F 53 68                        dw      EXIT                    // ;
 550+ 6D61              //  ______________________________________________________________________
 551+ 6D61              //
 552+ 6D61              // latest       -- nfa
 553+ 6D61                              Colon_Def LATEST, "LATEST", is_normal
 553+ 6D61             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 553+ 6D61             >
 553+ 6D61             >Dict_Ptr        defl    $
 553+ 6D61             >
 553+ 6D61             >//              ______________________________________________________________________
 553+ 6D61             >//              Heap part
 553+ 6D61             >
 553+ 6D61             >
 553+ 6D61             >                org     (Heap_Ptr & $1FFF) + $E000
 553+ E6A8             >
 553+ E6A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 553+ E6A8             >Latest_Definition defl  Heap_Ptr
 553+ E6A8             >
 553+ E6A8             >                // dummy db directives used to calculate length of namec
 553+ E6A8 4C 41 54 45 >                db      "LATEST"
 553+ E6AC 53 54       >
 553+ E6AE             >len_NFA         defl    $ - temp_NFA
 553+ E6AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 553+ E6A8             >
 553+ E6A8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 553+ E6A9 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 553+ E6AD 53 54       >
 553+ E6AF             >                org     $-1                 // alter last byte of Name just above to set
 553+ E6AE D4          >                db      {b $} | END_BIT     // msb as name end
 553+ E6AF             >
 553+ E6AF 97 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 553+ E6B1             >Prev_Ptr        defl    Heap_Ptr
 553+ E6B1             >
 553+ E6B1             >mirror_Ptr      defl    $
 553+ E6B1             >
 553+ E6B1 63 6D       >                dw      Dict_Ptr + 2        // xt
 553+ E6B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 553+ E6B3             >
 553+ E6B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 553+ E6B3             >
 553+ E6B3             >//              ______________________________________________________________________
 553+ E6B3             >//              Dictionary part
 553+ E6B3             >
 553+ E6B3             >                org     Dict_Ptr
 553+ 6D61             >
 553+ 6D61 B1 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 553+ 6D63             >
 553+ 6D63             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 553+ 6D63 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 553+ 6D66             >
 553+ 6D66             >
 553+ 6D66             >                endif           ; ok        // for other definitions it "points" the correct handler
 553+ 6D66             >                // Use of "; ok" to suppress "warning[fwdref]"
 553+ 6D66             >
 553+ 6D66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 554+ 6D66 57 6B                        dw      CURRENT                 // current
 555+ 6D68 9B 69 9B 69                  dw      FETCH, FETCH            // @ @
 556+ 6D6C F9 6C                        dw      FAR // Q TO HEAP
 557+ 6D6E 53 68                        dw      EXIT                    // ;
 558+ 6D70
 559+ 6D70              //  ______________________________________________________________________
 560+ 6D70              //
 561+ 6D70              // >body        cfa -- pfa
 562+ 6D70                              Colon_Def TO_BODY, ">BODY", is_normal
 562+ 6D70             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 562+ 6D70             >
 562+ 6D70             >Dict_Ptr        defl    $
 562+ 6D70             >
 562+ 6D70             >//              ______________________________________________________________________
 562+ 6D70             >//              Heap part
 562+ 6D70             >
 562+ 6D70             >
 562+ 6D70             >                org     (Heap_Ptr & $1FFF) + $E000
 562+ E6B3             >
 562+ E6B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ E6B3             >Latest_Definition defl  Heap_Ptr
 562+ E6B3             >
 562+ E6B3             >                // dummy db directives used to calculate length of namec
 562+ E6B3 3E 42 4F 44 >                db      ">BODY"
 562+ E6B7 59          >
 562+ E6B8             >len_NFA         defl    $ - temp_NFA
 562+ E6B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ E6B3             >
 562+ E6B3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ E6B4 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 562+ E6B8 59          >
 562+ E6B9             >                org     $-1                 // alter last byte of Name just above to set
 562+ E6B8 D9          >                db      {b $} | END_BIT     // msb as name end
 562+ E6B9             >
 562+ E6B9 A8 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 562+ E6BB             >Prev_Ptr        defl    Heap_Ptr
 562+ E6BB             >
 562+ E6BB             >mirror_Ptr      defl    $
 562+ E6BB             >
 562+ E6BB 72 6D       >                dw      Dict_Ptr + 2        // xt
 562+ E6BD             >Heap_Ptr        defl    $ - $E000           // save current HP
 562+ E6BD             >
 562+ E6BD             >Current_HP      defl  $ - $E000             // used to set HP once!
 562+ E6BD             >
 562+ E6BD             >//              ______________________________________________________________________
 562+ E6BD             >//              Dictionary part
 562+ E6BD             >
 562+ E6BD             >                org     Dict_Ptr
 562+ 6D70             >
 562+ 6D70 BB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 562+ 6D72             >
 562+ 6D72             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 6D72 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 6D75             >
 562+ 6D75             >
 562+ 6D75             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 6D75             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 6D75             >
 562+ 6D75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 6D75 A7 6A A5 68                  dw      THREE, PLUS             // cell+ --> 3 +
 564+ 6D79 53 68                        dw      EXIT                    // ;
 565+ 6D7B
 566+ 6D7B              //  ______________________________________________________________________
 567+ 6D7B              //
 568+ 6D7B              // <name        cfa -- nfa
 569+ 6D7B                              Colon_Def TO_NAME, "<NAME", is_normal
 569+ 6D7B             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 569+ 6D7B             >
 569+ 6D7B             >Dict_Ptr        defl    $
 569+ 6D7B             >
 569+ 6D7B             >//              ______________________________________________________________________
 569+ 6D7B             >//              Heap part
 569+ 6D7B             >
 569+ 6D7B             >
 569+ 6D7B             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6BD             >
 569+ E6BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6BD             >Latest_Definition defl  Heap_Ptr
 569+ E6BD             >
 569+ E6BD             >                // dummy db directives used to calculate length of namec
 569+ E6BD 3C 4E 41 4D >                db      "<NAME"
 569+ E6C1 45          >
 569+ E6C2             >len_NFA         defl    $ - temp_NFA
 569+ E6C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6BD             >
 569+ E6BD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6BE 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 569+ E6C2 45          >
 569+ E6C3             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6C2 C5          >                db      {b $} | END_BIT     // msb as name end
 569+ E6C3             >
 569+ E6C3 B3 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6C5             >Prev_Ptr        defl    Heap_Ptr
 569+ E6C5             >
 569+ E6C5             >mirror_Ptr      defl    $
 569+ E6C5             >
 569+ E6C5 7D 6D       >                dw      Dict_Ptr + 2        // xt
 569+ E6C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6C7             >
 569+ E6C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6C7             >
 569+ E6C7             >//              ______________________________________________________________________
 569+ E6C7             >//              Dictionary part
 569+ E6C7             >
 569+ E6C7             >                org     Dict_Ptr
 569+ 6D7B             >
 569+ 6D7B C5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 6D7D             >
 569+ 6D7D             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 6D7D CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 6D80             >
 569+ 6D80             >
 569+ 6D80             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 6D80             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 6D80             >
 569+ 6D80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 6D80 D8 68                        dw      CELL_MINUS              // cell-
 571+ 6D82 2A 69 9B 69                  dw      DUP, FETCH
 572+ 6D86 04 6D                        dw      QHEAPP
 573+ 6D88 F5 63                        dw      ZBRANCH
 574+ 6D8A 08 00                        dw      ToName_Skip - $
 575+ 6D8C 9B 69 F9 6C                  dw          FETCH, FAR
 576+ 6D90 D8 68                        dw          CELL_MINUS
 577+ 6D92              ToName_Skip:                                    // endif
 578+ 6D92
 579+ 6D92 C5 68                        dw      ONE_SUBTRACT            // 1-
 580+ 6D94 AE 6A                        dw      NEG_ONE                 // -1
 581+ 6D96 93 6C                        dw      TRAVERSE                // traverse
 582+ 6D98 53 68                        dw      EXIT                    // ;
 583+ 6D9A
 584+ 6D9A              //  ______________________________________________________________________
 585+ 6D9A              //
 586+ 6D9A              // cfa          pfa -- cfa
 587+ 6D9A                              Colon_Def CFA, "CFA", is_normal
 587+ 6D9A             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 587+ 6D9A             >
 587+ 6D9A             >Dict_Ptr        defl    $
 587+ 6D9A             >
 587+ 6D9A             >//              ______________________________________________________________________
 587+ 6D9A             >//              Heap part
 587+ 6D9A             >
 587+ 6D9A             >
 587+ 6D9A             >                org     (Heap_Ptr & $1FFF) + $E000
 587+ E6C7             >
 587+ E6C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ E6C7             >Latest_Definition defl  Heap_Ptr
 587+ E6C7             >
 587+ E6C7             >                // dummy db directives used to calculate length of namec
 587+ E6C7 43 46 41    >                db      "CFA"
 587+ E6CA             >len_NFA         defl    $ - temp_NFA
 587+ E6CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ E6C7             >
 587+ E6C7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ E6C8 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 587+ E6CB             >                org     $-1                 // alter last byte of Name just above to set
 587+ E6CA C1          >                db      {b $} | END_BIT     // msb as name end
 587+ E6CB             >
 587+ E6CB BD 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 587+ E6CD             >Prev_Ptr        defl    Heap_Ptr
 587+ E6CD             >
 587+ E6CD             >mirror_Ptr      defl    $
 587+ E6CD             >
 587+ E6CD 9C 6D       >                dw      Dict_Ptr + 2        // xt
 587+ E6CF             >Heap_Ptr        defl    $ - $E000           // save current HP
 587+ E6CF             >
 587+ E6CF             >Current_HP      defl  $ - $E000             // used to set HP once!
 587+ E6CF             >
 587+ E6CF             >//              ______________________________________________________________________
 587+ E6CF             >//              Dictionary part
 587+ E6CF             >
 587+ E6CF             >                org     Dict_Ptr
 587+ 6D9A             >
 587+ 6D9A CD 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 587+ 6D9C             >
 587+ 6D9C             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 6D9C CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 587+ 6D9F             >
 587+ 6D9F             >
 587+ 6D9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 6D9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 6D9F             >
 587+ 6D9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 6D9F A7 6A F6 6B                  dw      THREE, SUBTRACT         // 3 -
 589+ 6DA3 53 68                        dw      EXIT                    // ;
 590+ 6DA5
 591+ 6DA5              //  ______________________________________________________________________
 592+ 6DA5              //
 593+ 6DA5              // nfa          pfa -- nfa
 594+ 6DA5                              Colon_Def NFA, "NFA", is_normal
 594+ 6DA5             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 594+ 6DA5             >
 594+ 6DA5             >Dict_Ptr        defl    $
 594+ 6DA5             >
 594+ 6DA5             >//              ______________________________________________________________________
 594+ 6DA5             >//              Heap part
 594+ 6DA5             >
 594+ 6DA5             >
 594+ 6DA5             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6CF             >
 594+ E6CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6CF             >Latest_Definition defl  Heap_Ptr
 594+ E6CF             >
 594+ E6CF             >                // dummy db directives used to calculate length of namec
 594+ E6CF 4E 46 41    >                db      "NFA"
 594+ E6D2             >len_NFA         defl    $ - temp_NFA
 594+ E6D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6CF             >
 594+ E6CF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6D0 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 594+ E6D3             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6D2 C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6D3             >
 594+ E6D3 C7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6D5             >Prev_Ptr        defl    Heap_Ptr
 594+ E6D5             >
 594+ E6D5             >mirror_Ptr      defl    $
 594+ E6D5             >
 594+ E6D5 A7 6D       >                dw      Dict_Ptr + 2        // xt
 594+ E6D7             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6D7             >
 594+ E6D7             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6D7             >
 594+ E6D7             >//              ______________________________________________________________________
 594+ E6D7             >//              Dictionary part
 594+ E6D7             >
 594+ E6D7             >                org     Dict_Ptr
 594+ 6DA5             >
 594+ 6DA5 D5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 6DA7             >
 594+ 6DA7             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 6DA7 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 6DAA             >
 594+ 6DAA             >
 594+ 6DAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 6DAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 6DAA             >
 594+ 6DAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 6DAA 9C 6D                        dw      CFA                     // cfa
 596+ 6DAC 7D 6D                        dw      TO_NAME                 // traverse
 597+ 6DAE 53 68                        dw      EXIT                    // ;
 598+ 6DB0
 599+ 6DB0              //  ______________________________________________________________________
 600+ 6DB0              //
 601+ 6DB0              // lfa          pfa -- lfa
 602+ 6DB0                              Colon_Def LFA, "LFA", is_normal
 602+ 6DB0             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 602+ 6DB0             >
 602+ 6DB0             >Dict_Ptr        defl    $
 602+ 6DB0             >
 602+ 6DB0             >//              ______________________________________________________________________
 602+ 6DB0             >//              Heap part
 602+ 6DB0             >
 602+ 6DB0             >
 602+ 6DB0             >                org     (Heap_Ptr & $1FFF) + $E000
 602+ E6D7             >
 602+ E6D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ E6D7             >Latest_Definition defl  Heap_Ptr
 602+ E6D7             >
 602+ E6D7             >                // dummy db directives used to calculate length of namec
 602+ E6D7 4C 46 41    >                db      "LFA"
 602+ E6DA             >len_NFA         defl    $ - temp_NFA
 602+ E6DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ E6D7             >
 602+ E6D7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ E6D8 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 602+ E6DB             >                org     $-1                 // alter last byte of Name just above to set
 602+ E6DA C1          >                db      {b $} | END_BIT     // msb as name end
 602+ E6DB             >
 602+ E6DB CF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 602+ E6DD             >Prev_Ptr        defl    Heap_Ptr
 602+ E6DD             >
 602+ E6DD             >mirror_Ptr      defl    $
 602+ E6DD             >
 602+ E6DD B2 6D       >                dw      Dict_Ptr + 2        // xt
 602+ E6DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 602+ E6DF             >
 602+ E6DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 602+ E6DF             >
 602+ E6DF             >//              ______________________________________________________________________
 602+ E6DF             >//              Dictionary part
 602+ E6DF             >
 602+ E6DF             >                org     Dict_Ptr
 602+ 6DB0             >
 602+ 6DB0 DD 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 602+ 6DB2             >
 602+ 6DB2             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 6DB2 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 6DB5             >
 602+ 6DB5             >
 602+ 6DB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 6DB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 6DB5             >
 602+ 6DB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 6DB5 A7 6D                        dw      NFA                     // nfa
 604+ 6DB7 99 6A                        dw      ONE                     // 1
 605+ 6DB9 93 6C                        dw      TRAVERSE                // traverse
 606+ 6DBB BE 68                        dw      ONE_PLUS                // 1+
 607+ 6DBD 53 68                        dw      EXIT                    // ;
 608+ 6DBF
 609+ 6DBF              //  ______________________________________________________________________
 610+ 6DBF              //
 611+ 6DBF              // pfa          nfa -- pfa
 612+ 6DBF                              Colon_Def PFA, "PFA", is_normal
 612+ 6DBF             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 612+ 6DBF             >
 612+ 6DBF             >Dict_Ptr        defl    $
 612+ 6DBF             >
 612+ 6DBF             >//              ______________________________________________________________________
 612+ 6DBF             >//              Heap part
 612+ 6DBF             >
 612+ 6DBF             >
 612+ 6DBF             >                org     (Heap_Ptr & $1FFF) + $E000
 612+ E6DF             >
 612+ E6DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 612+ E6DF             >Latest_Definition defl  Heap_Ptr
 612+ E6DF             >
 612+ E6DF             >                // dummy db directives used to calculate length of namec
 612+ E6DF 50 46 41    >                db      "PFA"
 612+ E6E2             >len_NFA         defl    $ - temp_NFA
 612+ E6E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 612+ E6DF             >
 612+ E6DF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 612+ E6E0 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 612+ E6E3             >                org     $-1                 // alter last byte of Name just above to set
 612+ E6E2 C1          >                db      {b $} | END_BIT     // msb as name end
 612+ E6E3             >
 612+ E6E3 D7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 612+ E6E5             >Prev_Ptr        defl    Heap_Ptr
 612+ E6E5             >
 612+ E6E5             >mirror_Ptr      defl    $
 612+ E6E5             >
 612+ E6E5 C1 6D       >                dw      Dict_Ptr + 2        // xt
 612+ E6E7             >Heap_Ptr        defl    $ - $E000           // save current HP
 612+ E6E7             >
 612+ E6E7             >Current_HP      defl  $ - $E000             // used to set HP once!
 612+ E6E7             >
 612+ E6E7             >//              ______________________________________________________________________
 612+ E6E7             >//              Dictionary part
 612+ E6E7             >
 612+ E6E7             >                org     Dict_Ptr
 612+ 6DBF             >
 612+ 6DBF E5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 612+ 6DC1             >
 612+ 6DC1             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 612+ 6DC1 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 612+ 6DC4             >
 612+ 6DC4             >
 612+ 6DC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 612+ 6DC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 612+ 6DC4             >
 612+ 6DC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 613+ 6DC4 17 6D                        dw      QTOHEAP
 614+ 6DC6 99 6A                        dw      ONE                     // 1
 615+ 6DC8 93 6C                        dw      TRAVERSE                // traverse
 616+ 6DCA BE 68                        dw      ONE_PLUS                // 1+
 617+ 6DCC D4 68                        dw      CELL_PLUS               // cell+
 618+ 6DCE E8 6C                        dw      QMMU7
 619+ 6DD0 F5 63                        dw      ZBRANCH
 620+ 6DD2 0E 00                        dw      PFA_Skip - $
 621+ 6DD4 B0 6C                        dw          MMU7_FETCH
 622+ 6DD6 99 6A F6 6B                  dw          ONE, SUBTRACT
 623+ 6DDA F5 63                        dw          ZBRANCH
 624+ 6DDC 04 00                        dw          PFA_Skip - $
 625+ 6DDE 9B 69                        dw              FETCH
 626+ 6DE0              PFA_Skip:                                    // endif
 627+ 6DE0 72 6D                        dw      TO_BODY                 // >body
 628+ 6DE2 53 68                        dw      EXIT                    // ;
 629+ 6DE4
 630+ 6DE4              //  ______________________________________________________________________
 631+ 6DE4              //
 632+ 6DE4              // !csp         --
 633+ 6DE4              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 634+ 6DE4                              Colon_Def STORE_CSP, "!CSP", is_normal
 634+ 6DE4             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 634+ 6DE4             >
 634+ 6DE4             >Dict_Ptr        defl    $
 634+ 6DE4             >
 634+ 6DE4             >//              ______________________________________________________________________
 634+ 6DE4             >//              Heap part
 634+ 6DE4             >
 634+ 6DE4             >
 634+ 6DE4             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ E6E7             >
 634+ E6E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ E6E7             >Latest_Definition defl  Heap_Ptr
 634+ E6E7             >
 634+ E6E7             >                // dummy db directives used to calculate length of namec
 634+ E6E7 21 43 53 50 >                db      "!CSP"
 634+ E6EB             >len_NFA         defl    $ - temp_NFA
 634+ E6EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ E6E7             >
 634+ E6E7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ E6E8 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 634+ E6EC             >                org     $-1                 // alter last byte of Name just above to set
 634+ E6EB D0          >                db      {b $} | END_BIT     // msb as name end
 634+ E6EC             >
 634+ E6EC DF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ E6EE             >Prev_Ptr        defl    Heap_Ptr
 634+ E6EE             >
 634+ E6EE             >mirror_Ptr      defl    $
 634+ E6EE             >
 634+ E6EE E6 6D       >                dw      Dict_Ptr + 2        // xt
 634+ E6F0             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ E6F0             >
 634+ E6F0             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ E6F0             >
 634+ E6F0             >//              ______________________________________________________________________
 634+ E6F0             >//              Dictionary part
 634+ E6F0             >
 634+ E6F0             >                org     Dict_Ptr
 634+ 6DE4             >
 634+ 6DE4 EE 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 6DE6             >
 634+ 6DE6             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 6DE6 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 6DE9             >
 634+ 6DE9             >
 634+ 6DE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 6DE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 6DE9             >
 634+ 6DE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 6DE9 3A 68                        dw      SPFETCH                 // sp@
 636+ 6DEB 75 6B A5 69                  dw      CSP, STORE              // csp !
 637+ 6DEF 53 68                        dw      EXIT                    // ;
 638+ 6DF1
 639+ 6DF1              //  ______________________________________________________________________
 640+ 6DF1              //
 641+ 6DF1              // ?error       f n --
 642+ 6DF1              // rase error n if flag f it true
 643+ 6DF1                              Colon_Def QERROR, "?ERROR", is_normal
 643+ 6DF1             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 643+ 6DF1             >
 643+ 6DF1             >Dict_Ptr        defl    $
 643+ 6DF1             >
 643+ 6DF1             >//              ______________________________________________________________________
 643+ 6DF1             >//              Heap part
 643+ 6DF1             >
 643+ 6DF1             >
 643+ 6DF1             >                org     (Heap_Ptr & $1FFF) + $E000
 643+ E6F0             >
 643+ E6F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ E6F0             >Latest_Definition defl  Heap_Ptr
 643+ E6F0             >
 643+ E6F0             >                // dummy db directives used to calculate length of namec
 643+ E6F0 3F 45 52 52 >                db      "?ERROR"
 643+ E6F4 4F 52       >
 643+ E6F6             >len_NFA         defl    $ - temp_NFA
 643+ E6F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ E6F0             >
 643+ E6F0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ E6F1 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 643+ E6F5 4F 52       >
 643+ E6F7             >                org     $-1                 // alter last byte of Name just above to set
 643+ E6F6 D2          >                db      {b $} | END_BIT     // msb as name end
 643+ E6F7             >
 643+ E6F7 E7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 643+ E6F9             >Prev_Ptr        defl    Heap_Ptr
 643+ E6F9             >
 643+ E6F9             >mirror_Ptr      defl    $
 643+ E6F9             >
 643+ E6F9 F3 6D       >                dw      Dict_Ptr + 2        // xt
 643+ E6FB             >Heap_Ptr        defl    $ - $E000           // save current HP
 643+ E6FB             >
 643+ E6FB             >Current_HP      defl  $ - $E000             // used to set HP once!
 643+ E6FB             >
 643+ E6FB             >//              ______________________________________________________________________
 643+ E6FB             >//              Dictionary part
 643+ E6FB             >
 643+ E6FB             >                org     Dict_Ptr
 643+ 6DF1             >
 643+ 6DF1 F9 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 643+ 6DF3             >
 643+ 6DF3             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 6DF3 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 6DF6             >
 643+ 6DF6             >
 643+ 6DF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 6DF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 6DF6             >
 643+ 6DF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 6DF6 23 69                        dw      SWAP                    // swap
 645+ 6DF8                                                              // if
 646+ 6DF8 F5 63                        dw      ZBRANCH
 647+ 6DFA 08 00                        dw      QError_Else - $
 648+ 6DFC 2B 73                        dw          ERROR               //      error  ( is a forward-ref )
 649+ 6DFE                                                              // else
 650+ 6DFE E8 63                        dw      BRANCH
 651+ 6E00 04 00                        dw      QError_Endif - $
 652+ 6E02              QError_Else:
 653+ 6E02 0F 69                        dw          DROP                //      drop
 654+ 6E04              QError_Endif:                                   // endif
 655+ 6E04 53 68                        dw      EXIT                    // ;
 656+ 6E06
 657+ 6E06              //  ______________________________________________________________________
 658+ 6E06              //
 659+ 6E06              // ?comp       --
 660+ 6E06              // raise msg #17 if not compiling
 661+ 6E06                              Colon_Def QCOMP, "?COMP", is_normal
 661+ 6E06             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 661+ 6E06             >
 661+ 6E06             >Dict_Ptr        defl    $
 661+ 6E06             >
 661+ 6E06             >//              ______________________________________________________________________
 661+ 6E06             >//              Heap part
 661+ 6E06             >
 661+ 6E06             >
 661+ 6E06             >                org     (Heap_Ptr & $1FFF) + $E000
 661+ E6FB             >
 661+ E6FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 661+ E6FB             >Latest_Definition defl  Heap_Ptr
 661+ E6FB             >
 661+ E6FB             >                // dummy db directives used to calculate length of namec
 661+ E6FB 3F 43 4F 4D >                db      "?COMP"
 661+ E6FF 50          >
 661+ E700             >len_NFA         defl    $ - temp_NFA
 661+ E700             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 661+ E6FB             >
 661+ E6FB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 661+ E6FC 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 661+ E700 50          >
 661+ E701             >                org     $-1                 // alter last byte of Name just above to set
 661+ E700 D0          >                db      {b $} | END_BIT     // msb as name end
 661+ E701             >
 661+ E701 F0 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 661+ E703             >Prev_Ptr        defl    Heap_Ptr
 661+ E703             >
 661+ E703             >mirror_Ptr      defl    $
 661+ E703             >
 661+ E703 08 6E       >                dw      Dict_Ptr + 2        // xt
 661+ E705             >Heap_Ptr        defl    $ - $E000           // save current HP
 661+ E705             >
 661+ E705             >Current_HP      defl  $ - $E000             // used to set HP once!
 661+ E705             >
 661+ E705             >//              ______________________________________________________________________
 661+ E705             >//              Dictionary part
 661+ E705             >
 661+ E705             >                org     Dict_Ptr
 661+ 6E06             >
 661+ 6E06 03 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 661+ 6E08             >
 661+ 6E08             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 661+ 6E08 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 661+ 6E0B             >
 661+ 6E0B             >
 661+ 6E0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 661+ 6E0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 661+ 6E0B             >
 661+ 6E0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 662+ 6E0B 5D 6B 9B 69                  dw      STATE, FETCH            // state @
 663+ 6E0F 78 68                        dw      ZEQUAL                  // 0=
 664+ 6E11 A3 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 665+ 6E15 F3 6D                        dw      QERROR                  // ?error
 666+ 6E17 53 68                        dw      EXIT                    // ;
 667+ 6E19
 668+ 6E19              //  ______________________________________________________________________
 669+ 6E19              //
 670+ 6E19              // ?exec       --
 671+ 6E19              // raise msg #18 if compiling
 672+ 6E19                              Colon_Def QEXEC, "?EXEC", is_normal
 672+ 6E19             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 672+ 6E19             >
 672+ 6E19             >Dict_Ptr        defl    $
 672+ 6E19             >
 672+ 6E19             >//              ______________________________________________________________________
 672+ 6E19             >//              Heap part
 672+ 6E19             >
 672+ 6E19             >
 672+ 6E19             >                org     (Heap_Ptr & $1FFF) + $E000
 672+ E705             >
 672+ E705             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ E705             >Latest_Definition defl  Heap_Ptr
 672+ E705             >
 672+ E705             >                // dummy db directives used to calculate length of namec
 672+ E705 3F 45 58 45 >                db      "?EXEC"
 672+ E709 43          >
 672+ E70A             >len_NFA         defl    $ - temp_NFA
 672+ E70A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ E705             >
 672+ E705 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ E706 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 672+ E70A 43          >
 672+ E70B             >                org     $-1                 // alter last byte of Name just above to set
 672+ E70A C3          >                db      {b $} | END_BIT     // msb as name end
 672+ E70B             >
 672+ E70B FB 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 672+ E70D             >Prev_Ptr        defl    Heap_Ptr
 672+ E70D             >
 672+ E70D             >mirror_Ptr      defl    $
 672+ E70D             >
 672+ E70D 1B 6E       >                dw      Dict_Ptr + 2        // xt
 672+ E70F             >Heap_Ptr        defl    $ - $E000           // save current HP
 672+ E70F             >
 672+ E70F             >Current_HP      defl  $ - $E000             // used to set HP once!
 672+ E70F             >
 672+ E70F             >//              ______________________________________________________________________
 672+ E70F             >//              Dictionary part
 672+ E70F             >
 672+ E70F             >                org     Dict_Ptr
 672+ 6E19             >
 672+ 6E19 0D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 672+ 6E1B             >
 672+ 6E1B             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 6E1B CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 6E1E             >
 672+ 6E1E             >
 672+ 6E1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 6E1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 6E1E             >
 672+ 6E1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 6E1E 5D 6B 9B 69                  dw      STATE, FETCH            // state @
 674+ 6E22 A3 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 675+ 6E26 F3 6D                        dw      QERROR                  // ?error
 676+ 6E28 53 68                        dw      EXIT                    // ;
 677+ 6E2A
 678+ 6E2A              //  ______________________________________________________________________
 679+ 6E2A              //
 680+ 6E2A              // ?pairs       n1 n2 --
 681+ 6E2A              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 682+ 6E2A                              Colon_Def QPAIRS, "?PAIRS", is_normal
 682+ 6E2A             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 682+ 6E2A             >
 682+ 6E2A             >Dict_Ptr        defl    $
 682+ 6E2A             >
 682+ 6E2A             >//              ______________________________________________________________________
 682+ 6E2A             >//              Heap part
 682+ 6E2A             >
 682+ 6E2A             >
 682+ 6E2A             >                org     (Heap_Ptr & $1FFF) + $E000
 682+ E70F             >
 682+ E70F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ E70F             >Latest_Definition defl  Heap_Ptr
 682+ E70F             >
 682+ E70F             >                // dummy db directives used to calculate length of namec
 682+ E70F 3F 50 41 49 >                db      "?PAIRS"
 682+ E713 52 53       >
 682+ E715             >len_NFA         defl    $ - temp_NFA
 682+ E715             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ E70F             >
 682+ E70F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ E710 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 682+ E714 52 53       >
 682+ E716             >                org     $-1                 // alter last byte of Name just above to set
 682+ E715 D3          >                db      {b $} | END_BIT     // msb as name end
 682+ E716             >
 682+ E716 05 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 682+ E718             >Prev_Ptr        defl    Heap_Ptr
 682+ E718             >
 682+ E718             >mirror_Ptr      defl    $
 682+ E718             >
 682+ E718 2C 6E       >                dw      Dict_Ptr + 2        // xt
 682+ E71A             >Heap_Ptr        defl    $ - $E000           // save current HP
 682+ E71A             >
 682+ E71A             >Current_HP      defl  $ - $E000             // used to set HP once!
 682+ E71A             >
 682+ E71A             >//              ______________________________________________________________________
 682+ E71A             >//              Dictionary part
 682+ E71A             >
 682+ E71A             >                org     Dict_Ptr
 682+ 6E2A             >
 682+ 6E2A 18 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 682+ 6E2C             >
 682+ 6E2C             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 6E2C CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 6E2F             >
 682+ 6E2F             >
 682+ 6E2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 6E2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 6E2F             >
 682+ 6E2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 6E2F F6 6B                        dw      SUBTRACT                // -
 684+ 6E31 A3 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 685+ 6E35 F3 6D                        dw      QERROR                  // ?error
 686+ 6E37 53 68                        dw      EXIT                    // ;
 687+ 6E39
 688+ 6E39              //  ______________________________________________________________________
 689+ 6E39              //
 690+ 6E39              // ?csp       --
 691+ 6E39              // raise msg #20 if surrent SP in not what previously saved in CSP.
 692+ 6E39              // Compiler relies on that for  syntax checking of structures
 693+ 6E39                              Colon_Def QCSP, "?CSP", is_normal
 693+ 6E39             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 693+ 6E39             >
 693+ 6E39             >Dict_Ptr        defl    $
 693+ 6E39             >
 693+ 6E39             >//              ______________________________________________________________________
 693+ 6E39             >//              Heap part
 693+ 6E39             >
 693+ 6E39             >
 693+ 6E39             >                org     (Heap_Ptr & $1FFF) + $E000
 693+ E71A             >
 693+ E71A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ E71A             >Latest_Definition defl  Heap_Ptr
 693+ E71A             >
 693+ E71A             >                // dummy db directives used to calculate length of namec
 693+ E71A 3F 43 53 50 >                db      "?CSP"
 693+ E71E             >len_NFA         defl    $ - temp_NFA
 693+ E71E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ E71A             >
 693+ E71A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ E71B 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 693+ E71F             >                org     $-1                 // alter last byte of Name just above to set
 693+ E71E D0          >                db      {b $} | END_BIT     // msb as name end
 693+ E71F             >
 693+ E71F 0F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 693+ E721             >Prev_Ptr        defl    Heap_Ptr
 693+ E721             >
 693+ E721             >mirror_Ptr      defl    $
 693+ E721             >
 693+ E721 3B 6E       >                dw      Dict_Ptr + 2        // xt
 693+ E723             >Heap_Ptr        defl    $ - $E000           // save current HP
 693+ E723             >
 693+ E723             >Current_HP      defl  $ - $E000             // used to set HP once!
 693+ E723             >
 693+ E723             >//              ______________________________________________________________________
 693+ E723             >//              Dictionary part
 693+ E723             >
 693+ E723             >                org     Dict_Ptr
 693+ 6E39             >
 693+ 6E39 21 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 693+ 6E3B             >
 693+ 6E3B             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 6E3B CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ 6E3E             >
 693+ 6E3E             >
 693+ 6E3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 6E3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 6E3E             >
 693+ 6E3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 6E3E 3A 68                        dw      SPFETCH                 // sp@
 695+ 6E40 75 6B 9B 69                  dw      CSP, FETCH              // csp @
 696+ 6E44 F6 6B                        dw      SUBTRACT                // -
 697+ 6E46 A3 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 698+ 6E4A F3 6D                        dw      QERROR                  // ?error
 699+ 6E4C 53 68                        dw      EXIT                    // ;
 700+ 6E4E
 701+ 6E4E              //  ______________________________________________________________________
 702+ 6E4E              //
 703+ 6E4E              // ?loading      --
 704+ 6E4E              // raise msg #22 if not loading
 705+ 6E4E                              Colon_Def QLOADING, "?LOADING", is_normal
 705+ 6E4E             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 705+ 6E4E             >
 705+ 6E4E             >Dict_Ptr        defl    $
 705+ 6E4E             >
 705+ 6E4E             >//              ______________________________________________________________________
 705+ 6E4E             >//              Heap part
 705+ 6E4E             >
 705+ 6E4E             >
 705+ 6E4E             >                org     (Heap_Ptr & $1FFF) + $E000
 705+ E723             >
 705+ E723             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ E723             >Latest_Definition defl  Heap_Ptr
 705+ E723             >
 705+ E723             >                // dummy db directives used to calculate length of namec
 705+ E723 3F 4C 4F 41 >                db      "?LOADING"
 705+ E727 44 49 4E 47 >
 705+ E72B             >len_NFA         defl    $ - temp_NFA
 705+ E72B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ E723             >
 705+ E723 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ E724 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 705+ E728 44 49 4E 47 >
 705+ E72C             >                org     $-1                 // alter last byte of Name just above to set
 705+ E72B C7          >                db      {b $} | END_BIT     // msb as name end
 705+ E72C             >
 705+ E72C 1A 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 705+ E72E             >Prev_Ptr        defl    Heap_Ptr
 705+ E72E             >
 705+ E72E             >mirror_Ptr      defl    $
 705+ E72E             >
 705+ E72E 50 6E       >                dw      Dict_Ptr + 2        // xt
 705+ E730             >Heap_Ptr        defl    $ - $E000           // save current HP
 705+ E730             >
 705+ E730             >Current_HP      defl  $ - $E000             // used to set HP once!
 705+ E730             >
 705+ E730             >//              ______________________________________________________________________
 705+ E730             >//              Dictionary part
 705+ E730             >
 705+ E730             >                org     Dict_Ptr
 705+ 6E4E             >
 705+ 6E4E 2E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 705+ 6E50             >
 705+ 6E50             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 6E50 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 6E53             >
 705+ 6E53             >
 705+ 6E53             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 6E53             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 6E53             >
 705+ 6E53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 6E53 33 6B 9B 69                  dw      BLK, FETCH              // blk @
 707+ 6E57 78 68                        dw      ZEQUAL                  // 0=
 708+ 6E59 A3 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 709+ 6E5D F3 6D                        dw      QERROR                  // ?error
 710+ 6E5F 53 68                        dw      EXIT                    // ;
 711+ 6E61
 712+ 6E61              //  ______________________________________________________________________
 713+ 6E61              //
 714+ 6E61              // compile      --
 715+ 6E61              // compiles the following word
 716+ 6E61                              Colon_Def COMPILE, "COMPILE", is_normal
 716+ 6E61             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 716+ 6E61             >
 716+ 6E61             >Dict_Ptr        defl    $
 716+ 6E61             >
 716+ 6E61             >//              ______________________________________________________________________
 716+ 6E61             >//              Heap part
 716+ 6E61             >
 716+ 6E61             >
 716+ 6E61             >                org     (Heap_Ptr & $1FFF) + $E000
 716+ E730             >
 716+ E730             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 716+ E730             >Latest_Definition defl  Heap_Ptr
 716+ E730             >
 716+ E730             >                // dummy db directives used to calculate length of namec
 716+ E730 43 4F 4D 50 >                db      "COMPILE"
 716+ E734 49 4C 45    >
 716+ E737             >len_NFA         defl    $ - temp_NFA
 716+ E737             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 716+ E730             >
 716+ E730 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 716+ E731 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 716+ E735 49 4C 45    >
 716+ E738             >                org     $-1                 // alter last byte of Name just above to set
 716+ E737 C5          >                db      {b $} | END_BIT     // msb as name end
 716+ E738             >
 716+ E738 23 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 716+ E73A             >Prev_Ptr        defl    Heap_Ptr
 716+ E73A             >
 716+ E73A             >mirror_Ptr      defl    $
 716+ E73A             >
 716+ E73A 63 6E       >                dw      Dict_Ptr + 2        // xt
 716+ E73C             >Heap_Ptr        defl    $ - $E000           // save current HP
 716+ E73C             >
 716+ E73C             >Current_HP      defl  $ - $E000             // used to set HP once!
 716+ E73C             >
 716+ E73C             >//              ______________________________________________________________________
 716+ E73C             >//              Dictionary part
 716+ E73C             >
 716+ E73C             >                org     Dict_Ptr
 716+ 6E61             >
 716+ 6E61 3A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 716+ 6E63             >
 716+ 6E63             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 716+ 6E63 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 716+ 6E66             >
 716+ 6E66             >
 716+ 6E66             >                endif           ; ok        // for other definitions it "points" the correct handler
 716+ 6E66             >                // Use of "; ok" to suppress "warning[fwdref]"
 716+ 6E66             >
 716+ 6E66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 717+ 6E66 08 6E                        dw      QCOMP                   // ?comp
 718+ 6E68 68 68                        dw      R_TO                    // r>
 719+ 6E6A 2A 69 D4 68                  dw      DUP, CELL_PLUS          // dup, cell+
 720+ 6E6E 5D 68                        dw      TO_R                    // >r
 721+ 6E70 9B 69 CD 6B                  dw      FETCH, COMMA            // @ ,
 722+ 6E74 53 68                        dw      EXIT                    // ;
 723+ 6E76
 724+ 6E76              //  ______________________________________________________________________
 725+ 6E76              //
 726+ 6E76              // compile,     --
 727+ 6E76              // compiles the following word
 728+ 6E76                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 728+ 6E76             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 728+ 6E76             >
 728+ 6E76             >Dict_Ptr        defl    $
 728+ 6E76             >
 728+ 6E76             >//              ______________________________________________________________________
 728+ 6E76             >//              Heap part
 728+ 6E76             >
 728+ 6E76             >
 728+ 6E76             >                org     (Heap_Ptr & $1FFF) + $E000
 728+ E73C             >
 728+ E73C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 728+ E73C             >Latest_Definition defl  Heap_Ptr
 728+ E73C             >
 728+ E73C             >                // dummy db directives used to calculate length of namec
 728+ E73C 43 4F 4D 50 >                db      "COMPILE,"
 728+ E740 49 4C 45 2C >
 728+ E744             >len_NFA         defl    $ - temp_NFA
 728+ E744             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 728+ E73C             >
 728+ E73C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 728+ E73D 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 728+ E741 49 4C 45 2C >
 728+ E745             >                org     $-1                 // alter last byte of Name just above to set
 728+ E744 AC          >                db      {b $} | END_BIT     // msb as name end
 728+ E745             >
 728+ E745 30 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 728+ E747             >Prev_Ptr        defl    Heap_Ptr
 728+ E747             >
 728+ E747             >mirror_Ptr      defl    $
 728+ E747             >
 728+ E747 78 6E       >                dw      Dict_Ptr + 2        // xt
 728+ E749             >Heap_Ptr        defl    $ - $E000           // save current HP
 728+ E749             >
 728+ E749             >Current_HP      defl  $ - $E000             // used to set HP once!
 728+ E749             >
 728+ E749             >//              ______________________________________________________________________
 728+ E749             >//              Dictionary part
 728+ E749             >
 728+ E749             >                org     Dict_Ptr
 728+ 6E76             >
 728+ 6E76 47 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 728+ 6E78             >
 728+ 6E78             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 728+ 6E78 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 728+ 6E7B             >
 728+ 6E7B             >
 728+ 6E7B             >                endif           ; ok        // for other definitions it "points" the correct handler
 728+ 6E7B             >                // Use of "; ok" to suppress "warning[fwdref]"
 728+ 6E7B             >
 728+ 6E7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 729+ 6E7B 08 6E                        dw      QCOMP                   // ?comp
 730+ 6E7D CD 6B                        dw      COMMA                   // ,
 731+ 6E7F 53 68                        dw      EXIT                    // ;
 732+ 6E81
 733+ 6E81              //  ______________________________________________________________________
 734+ 6E81              //
 735+ 6E81              // [            --
 736+ 6E81              // stop compilation
 737+ 6E81                              Colon_Def SQUARED_OPEN, "[", is_immediate
 737+ 6E81             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 737+ 6E81             >
 737+ 6E81             >Dict_Ptr        defl    $
 737+ 6E81             >
 737+ 6E81             >//              ______________________________________________________________________
 737+ 6E81             >//              Heap part
 737+ 6E81             >
 737+ 6E81             >
 737+ 6E81             >                org     (Heap_Ptr & $1FFF) + $E000
 737+ E749             >
 737+ E749             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 737+ E749             >Latest_Definition defl  Heap_Ptr
 737+ E749             >
 737+ E749             >                // dummy db directives used to calculate length of namec
 737+ E749 5B          >                db      "["
 737+ E74A             >len_NFA         defl    $ - temp_NFA
 737+ E74A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 737+ E749             >
 737+ E749 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 737+ E74A 5B          >                db      "["               // name string in 7-bit ascii, but
 737+ E74B             >                org     $-1                 // alter last byte of Name just above to set
 737+ E74A DB          >                db      {b $} | END_BIT     // msb as name end
 737+ E74B             >
 737+ E74B 3C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 737+ E74D             >Prev_Ptr        defl    Heap_Ptr
 737+ E74D             >
 737+ E74D             >mirror_Ptr      defl    $
 737+ E74D             >
 737+ E74D 83 6E       >                dw      Dict_Ptr + 2        // xt
 737+ E74F             >Heap_Ptr        defl    $ - $E000           // save current HP
 737+ E74F             >
 737+ E74F             >Current_HP      defl  $ - $E000             // used to set HP once!
 737+ E74F             >
 737+ E74F             >//              ______________________________________________________________________
 737+ E74F             >//              Dictionary part
 737+ E74F             >
 737+ E74F             >                org     Dict_Ptr
 737+ 6E81             >
 737+ 6E81 4D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 737+ 6E83             >
 737+ 6E83             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 737+ 6E83 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 737+ 6E86             >
 737+ 6E86             >
 737+ 6E86             >                endif           ; ok        // for other definitions it "points" the correct handler
 737+ 6E86             >                // Use of "; ok" to suppress "warning[fwdref]"
 737+ 6E86             >
 737+ 6E86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 738+ 6E86 92 6A                        dw      ZERO                    // 0
 739+ 6E88 5D 6B A5 69                  dw      STATE, STORE            // state !
 740+ 6E8C 53 68                        dw      EXIT                    // ; immediate
 741+ 6E8E
 742+ 6E8E              //  ______________________________________________________________________
 743+ 6E8E              //
 744+ 6E8E              // ]            --
 745+ 6E8E              // start compilation
 746+ 6E8E                              Colon_Def SQUARED_CLOSE, "]", is_normal
 746+ 6E8E             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 746+ 6E8E             >
 746+ 6E8E             >Dict_Ptr        defl    $
 746+ 6E8E             >
 746+ 6E8E             >//              ______________________________________________________________________
 746+ 6E8E             >//              Heap part
 746+ 6E8E             >
 746+ 6E8E             >
 746+ 6E8E             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ E74F             >
 746+ E74F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ E74F             >Latest_Definition defl  Heap_Ptr
 746+ E74F             >
 746+ E74F             >                // dummy db directives used to calculate length of namec
 746+ E74F 5D          >                db      "]"
 746+ E750             >len_NFA         defl    $ - temp_NFA
 746+ E750             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ E74F             >
 746+ E74F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ E750 5D          >                db      "]"               // name string in 7-bit ascii, but
 746+ E751             >                org     $-1                 // alter last byte of Name just above to set
 746+ E750 DD          >                db      {b $} | END_BIT     // msb as name end
 746+ E751             >
 746+ E751 49 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ E753             >Prev_Ptr        defl    Heap_Ptr
 746+ E753             >
 746+ E753             >mirror_Ptr      defl    $
 746+ E753             >
 746+ E753 90 6E       >                dw      Dict_Ptr + 2        // xt
 746+ E755             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ E755             >
 746+ E755             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ E755             >
 746+ E755             >//              ______________________________________________________________________
 746+ E755             >//              Dictionary part
 746+ E755             >
 746+ E755             >                org     Dict_Ptr
 746+ 6E8E             >
 746+ 6E8E 53 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 6E90             >
 746+ 6E90             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 6E90 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 6E93             >
 746+ 6E93             >
 746+ 6E93             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 6E93             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 6E93             >
 746+ 6E93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 6E93 A3 63 C0 00                  dw      LIT, $C0                // 192
 748+ 6E97 5D 6B A5 69                  dw      STATE, STORE            // state !
 749+ 6E9B 53 68                        dw      EXIT                    // ;
 750+ 6E9D
 751+ 6E9D              //  ______________________________________________________________________
 752+ 6E9D              //
 753+ 6E9D              // smudge       --
 754+ 6E9D              // toggle smudge bit of latest definition
 755+ 6E9D                              Colon_Def SMUDGE, "SMUDGE", is_normal
 755+ 6E9D             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 755+ 6E9D             >
 755+ 6E9D             >Dict_Ptr        defl    $
 755+ 6E9D             >
 755+ 6E9D             >//              ______________________________________________________________________
 755+ 6E9D             >//              Heap part
 755+ 6E9D             >
 755+ 6E9D             >
 755+ 6E9D             >                org     (Heap_Ptr & $1FFF) + $E000
 755+ E755             >
 755+ E755             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 755+ E755             >Latest_Definition defl  Heap_Ptr
 755+ E755             >
 755+ E755             >                // dummy db directives used to calculate length of namec
 755+ E755 53 4D 55 44 >                db      "SMUDGE"
 755+ E759 47 45       >
 755+ E75B             >len_NFA         defl    $ - temp_NFA
 755+ E75B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 755+ E755             >
 755+ E755 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 755+ E756 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 755+ E75A 47 45       >
 755+ E75C             >                org     $-1                 // alter last byte of Name just above to set
 755+ E75B C5          >                db      {b $} | END_BIT     // msb as name end
 755+ E75C             >
 755+ E75C 4F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 755+ E75E             >Prev_Ptr        defl    Heap_Ptr
 755+ E75E             >
 755+ E75E             >mirror_Ptr      defl    $
 755+ E75E             >
 755+ E75E 9F 6E       >                dw      Dict_Ptr + 2        // xt
 755+ E760             >Heap_Ptr        defl    $ - $E000           // save current HP
 755+ E760             >
 755+ E760             >Current_HP      defl  $ - $E000             // used to set HP once!
 755+ E760             >
 755+ E760             >//              ______________________________________________________________________
 755+ E760             >//              Dictionary part
 755+ E760             >
 755+ E760             >                org     Dict_Ptr
 755+ 6E9D             >
 755+ 6E9D 5E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 755+ 6E9F             >
 755+ 6E9F             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 755+ 6E9F CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 755+ 6EA2             >
 755+ 6EA2             >
 755+ 6EA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 755+ 6EA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 755+ 6EA2             >
 755+ 6EA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 756+ 6EA2 63 6D                        dw      LATEST                  // latest
 757+ 6EA4 A3 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 758+ 6EA8 92 69                        dw      TOGGLE                  // toggle
 759+ 6EAA 53 68                        dw      EXIT                    // ;
 760+ 6EAC
 761+ 6EAC              //  ______________________________________________________________________
 762+ 6EAC              //
 763+ 6EAC              // immediate    --
 764+ 6EAC              // make immediate the latest definition
 765+ 6EAC                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 765+ 6EAC             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 765+ 6EAC             >
 765+ 6EAC             >Dict_Ptr        defl    $
 765+ 6EAC             >
 765+ 6EAC             >//              ______________________________________________________________________
 765+ 6EAC             >//              Heap part
 765+ 6EAC             >
 765+ 6EAC             >
 765+ 6EAC             >                org     (Heap_Ptr & $1FFF) + $E000
 765+ E760             >
 765+ E760             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 765+ E760             >Latest_Definition defl  Heap_Ptr
 765+ E760             >
 765+ E760             >                // dummy db directives used to calculate length of namec
 765+ E760 49 4D 4D 45 >                db      "IMMEDIATE"
 765+ E764 44 49 41 54 >
 765+ E768 45          >
 765+ E769             >len_NFA         defl    $ - temp_NFA
 765+ E769             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 765+ E760             >
 765+ E760 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 765+ E761 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 765+ E765 44 49 41 54 >
 765+ E769 45          >
 765+ E76A             >                org     $-1                 // alter last byte of Name just above to set
 765+ E769 C5          >                db      {b $} | END_BIT     // msb as name end
 765+ E76A             >
 765+ E76A 55 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 765+ E76C             >Prev_Ptr        defl    Heap_Ptr
 765+ E76C             >
 765+ E76C             >mirror_Ptr      defl    $
 765+ E76C             >
 765+ E76C AE 6E       >                dw      Dict_Ptr + 2        // xt
 765+ E76E             >Heap_Ptr        defl    $ - $E000           // save current HP
 765+ E76E             >
 765+ E76E             >Current_HP      defl  $ - $E000             // used to set HP once!
 765+ E76E             >
 765+ E76E             >//              ______________________________________________________________________
 765+ E76E             >//              Dictionary part
 765+ E76E             >
 765+ E76E             >                org     Dict_Ptr
 765+ 6EAC             >
 765+ 6EAC 6C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 765+ 6EAE             >
 765+ 6EAE             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 765+ 6EAE CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 765+ 6EB1             >
 765+ 6EB1             >
 765+ 6EB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 765+ 6EB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 765+ 6EB1             >
 765+ 6EB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 766+ 6EB1 63 6D                        dw      LATEST                  // latest
 767+ 6EB3 A3 63 40 00                  dw      LIT, $40                // 64
 768+ 6EB7 92 69                        dw      TOGGLE                  // toggle
 769+ 6EB9 53 68                        dw      EXIT                    // ;
 770+ 6EBB
 771+ 6EBB              //  ______________________________________________________________________
 772+ 6EBB              //
 773+ 6EBB              // hex          --
 774+ 6EBB              // change numeration base
 775+ 6EBB                              Colon_Def HEX, "HEX", is_normal
 775+ 6EBB             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 775+ 6EBB             >
 775+ 6EBB             >Dict_Ptr        defl    $
 775+ 6EBB             >
 775+ 6EBB             >//              ______________________________________________________________________
 775+ 6EBB             >//              Heap part
 775+ 6EBB             >
 775+ 6EBB             >
 775+ 6EBB             >                org     (Heap_Ptr & $1FFF) + $E000
 775+ E76E             >
 775+ E76E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ E76E             >Latest_Definition defl  Heap_Ptr
 775+ E76E             >
 775+ E76E             >                // dummy db directives used to calculate length of namec
 775+ E76E 48 45 58    >                db      "HEX"
 775+ E771             >len_NFA         defl    $ - temp_NFA
 775+ E771             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ E76E             >
 775+ E76E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ E76F 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 775+ E772             >                org     $-1                 // alter last byte of Name just above to set
 775+ E771 D8          >                db      {b $} | END_BIT     // msb as name end
 775+ E772             >
 775+ E772 60 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 775+ E774             >Prev_Ptr        defl    Heap_Ptr
 775+ E774             >
 775+ E774             >mirror_Ptr      defl    $
 775+ E774             >
 775+ E774 BD 6E       >                dw      Dict_Ptr + 2        // xt
 775+ E776             >Heap_Ptr        defl    $ - $E000           // save current HP
 775+ E776             >
 775+ E776             >Current_HP      defl  $ - $E000             // used to set HP once!
 775+ E776             >
 775+ E776             >//              ______________________________________________________________________
 775+ E776             >//              Dictionary part
 775+ E776             >
 775+ E776             >                org     Dict_Ptr
 775+ 6EBB             >
 775+ 6EBB 74 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 775+ 6EBD             >
 775+ 6EBD             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 6EBD CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 6EC0             >
 775+ 6EC0             >
 775+ 6EC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 6EC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 6EC0             >
 775+ 6EC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 6EC0 A3 63 10 00                  dw      LIT, 16                 // 16
 777+ 6EC4 63 6B A5 69                  dw      BASE, STORE             // base !
 778+ 6EC8 53 68                        dw      EXIT                    // ;
 779+ 6ECA
 780+ 6ECA              //  ______________________________________________________________________
 781+ 6ECA              //
 782+ 6ECA              // decimal      --
 783+ 6ECA              // change numeration base
 784+ 6ECA                              Colon_Def DECIMAL, "DECIMAL", is_normal
 784+ 6ECA             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 784+ 6ECA             >
 784+ 6ECA             >Dict_Ptr        defl    $
 784+ 6ECA             >
 784+ 6ECA             >//              ______________________________________________________________________
 784+ 6ECA             >//              Heap part
 784+ 6ECA             >
 784+ 6ECA             >
 784+ 6ECA             >                org     (Heap_Ptr & $1FFF) + $E000
 784+ E776             >
 784+ E776             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 784+ E776             >Latest_Definition defl  Heap_Ptr
 784+ E776             >
 784+ E776             >                // dummy db directives used to calculate length of namec
 784+ E776 44 45 43 49 >                db      "DECIMAL"
 784+ E77A 4D 41 4C    >
 784+ E77D             >len_NFA         defl    $ - temp_NFA
 784+ E77D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 784+ E776             >
 784+ E776 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 784+ E777 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 784+ E77B 4D 41 4C    >
 784+ E77E             >                org     $-1                 // alter last byte of Name just above to set
 784+ E77D CC          >                db      {b $} | END_BIT     // msb as name end
 784+ E77E             >
 784+ E77E 6E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 784+ E780             >Prev_Ptr        defl    Heap_Ptr
 784+ E780             >
 784+ E780             >mirror_Ptr      defl    $
 784+ E780             >
 784+ E780 CC 6E       >                dw      Dict_Ptr + 2        // xt
 784+ E782             >Heap_Ptr        defl    $ - $E000           // save current HP
 784+ E782             >
 784+ E782             >Current_HP      defl  $ - $E000             // used to set HP once!
 784+ E782             >
 784+ E782             >//              ______________________________________________________________________
 784+ E782             >//              Dictionary part
 784+ E782             >
 784+ E782             >                org     Dict_Ptr
 784+ 6ECA             >
 784+ 6ECA 80 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 784+ 6ECC             >
 784+ 6ECC             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 784+ 6ECC CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 784+ 6ECF             >
 784+ 6ECF             >
 784+ 6ECF             >                endif           ; ok        // for other definitions it "points" the correct handler
 784+ 6ECF             >                // Use of "; ok" to suppress "warning[fwdref]"
 784+ 6ECF             >
 784+ 6ECF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 785+ 6ECF A3 63 0A 00                  dw      LIT, 10                 // 10
 786+ 6ED3 63 6B A5 69                  dw      BASE, STORE             // base !
 787+ 6ED7 53 68                        dw      EXIT                    // ;
 788+ 6ED9
 789+ 6ED9              //  ______________________________________________________________________
 790+ 6ED9              //
 791+ 6ED9              // (;code)       --
 792+ 6ED9              // patch to CFA to call/jump to the "following code"
 793+ 6ED9                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 793+ 6ED9             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 793+ 6ED9             >
 793+ 6ED9             >Dict_Ptr        defl    $
 793+ 6ED9             >
 793+ 6ED9             >//              ______________________________________________________________________
 793+ 6ED9             >//              Heap part
 793+ 6ED9             >
 793+ 6ED9             >
 793+ 6ED9             >                org     (Heap_Ptr & $1FFF) + $E000
 793+ E782             >
 793+ E782             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ E782             >Latest_Definition defl  Heap_Ptr
 793+ E782             >
 793+ E782             >                // dummy db directives used to calculate length of namec
 793+ E782 28 3B 43 4F >                db      "(;CODE)"
 793+ E786 44 45 29    >
 793+ E789             >len_NFA         defl    $ - temp_NFA
 793+ E789             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ E782             >
 793+ E782 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ E783 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 793+ E787 44 45 29    >
 793+ E78A             >                org     $-1                 // alter last byte of Name just above to set
 793+ E789 A9          >                db      {b $} | END_BIT     // msb as name end
 793+ E78A             >
 793+ E78A 76 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 793+ E78C             >Prev_Ptr        defl    Heap_Ptr
 793+ E78C             >
 793+ E78C             >mirror_Ptr      defl    $
 793+ E78C             >
 793+ E78C DB 6E       >                dw      Dict_Ptr + 2        // xt
 793+ E78E             >Heap_Ptr        defl    $ - $E000           // save current HP
 793+ E78E             >
 793+ E78E             >Current_HP      defl  $ - $E000             // used to set HP once!
 793+ E78E             >
 793+ E78E             >//              ______________________________________________________________________
 793+ E78E             >//              Dictionary part
 793+ E78E             >
 793+ E78E             >                org     Dict_Ptr
 793+ 6ED9             >
 793+ 6ED9 8C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 793+ 6EDB             >
 793+ 6EDB             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 6EDB CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 6EDE             >
 793+ 6EDE             >
 793+ 6EDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 6EDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 6EDE             >
 793+ 6EDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 6EDE 68 68                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 795+ 6EE0 63 6D                        dw      LATEST                  // latest   ( Word being defined in this moment )
 796+ 6EE2 C1 6D 9C 6D                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 797+ 6EE6
 798+ 6EE6 A3 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 799+ 6EEA 06 69 B9 69                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 800+ 6EEE BE 68                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 801+ 6EF0
 802+ 6EF0 A5 69                        dw      STORE                   // !
 803+ 6EF2 53 68                        dw      EXIT                    // ;
 804+ 6EF4
 805+ 6EF4              //  ______________________________________________________________________
 806+ 6EF4              //
 807+ 6EF4              // ;code        --
 808+ 6EF4                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 808+ 6EF4             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 808+ 6EF4             >
 808+ 6EF4             >Dict_Ptr        defl    $
 808+ 6EF4             >
 808+ 6EF4             >//              ______________________________________________________________________
 808+ 6EF4             >//              Heap part
 808+ 6EF4             >
 808+ 6EF4             >
 808+ 6EF4             >                org     (Heap_Ptr & $1FFF) + $E000
 808+ E78E             >
 808+ E78E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 808+ E78E             >Latest_Definition defl  Heap_Ptr
 808+ E78E             >
 808+ E78E             >                // dummy db directives used to calculate length of namec
 808+ E78E 3B 43 4F 44 >                db      ";CODE"
 808+ E792 45          >
 808+ E793             >len_NFA         defl    $ - temp_NFA
 808+ E793             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 808+ E78E             >
 808+ E78E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 808+ E78F 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 808+ E793 45          >
 808+ E794             >                org     $-1                 // alter last byte of Name just above to set
 808+ E793 C5          >                db      {b $} | END_BIT     // msb as name end
 808+ E794             >
 808+ E794 82 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 808+ E796             >Prev_Ptr        defl    Heap_Ptr
 808+ E796             >
 808+ E796             >mirror_Ptr      defl    $
 808+ E796             >
 808+ E796 F6 6E       >                dw      Dict_Ptr + 2        // xt
 808+ E798             >Heap_Ptr        defl    $ - $E000           // save current HP
 808+ E798             >
 808+ E798             >Current_HP      defl  $ - $E000             // used to set HP once!
 808+ E798             >
 808+ E798             >//              ______________________________________________________________________
 808+ E798             >//              Dictionary part
 808+ E798             >
 808+ E798             >                org     Dict_Ptr
 808+ 6EF4             >
 808+ 6EF4 96 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 808+ 6EF6             >
 808+ 6EF6             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 808+ 6EF6 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 808+ 6EF9             >
 808+ 6EF9             >
 808+ 6EF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 808+ 6EF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 808+ 6EF9             >
 808+ 6EF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 809+ 6EF9 3B 6E                        dw      QCSP                    // ?csp
 810+ 6EFB 63 6E                        dw      COMPILE                 // compile
 811+ 6EFD DB 6E                        dw      C_SEMICOLON_CODE        // (;code)
 812+ 6EFF 83 6E                        dw      SQUARED_OPEN            // [
 813+ 6F01 59 6A                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 814+ 6F03 53 68                        dw      EXIT                    // ; immediate
 815+ 6F05
 816+ 6F05              //  ______________________________________________________________________
 817+ 6F05              //
 818+ 6F05              // <builds      --
 819+ 6F05                              Colon_Def CBUILDS, "<BUILDS", is_normal
 819+ 6F05             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 819+ 6F05             >
 819+ 6F05             >Dict_Ptr        defl    $
 819+ 6F05             >
 819+ 6F05             >//              ______________________________________________________________________
 819+ 6F05             >//              Heap part
 819+ 6F05             >
 819+ 6F05             >
 819+ 6F05             >                org     (Heap_Ptr & $1FFF) + $E000
 819+ E798             >
 819+ E798             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 819+ E798             >Latest_Definition defl  Heap_Ptr
 819+ E798             >
 819+ E798             >                // dummy db directives used to calculate length of namec
 819+ E798 3C 42 55 49 >                db      "<BUILDS"
 819+ E79C 4C 44 53    >
 819+ E79F             >len_NFA         defl    $ - temp_NFA
 819+ E79F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 819+ E798             >
 819+ E798 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 819+ E799 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 819+ E79D 4C 44 53    >
 819+ E7A0             >                org     $-1                 // alter last byte of Name just above to set
 819+ E79F D3          >                db      {b $} | END_BIT     // msb as name end
 819+ E7A0             >
 819+ E7A0 8E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 819+ E7A2             >Prev_Ptr        defl    Heap_Ptr
 819+ E7A2             >
 819+ E7A2             >mirror_Ptr      defl    $
 819+ E7A2             >
 819+ E7A2 07 6F       >                dw      Dict_Ptr + 2        // xt
 819+ E7A4             >Heap_Ptr        defl    $ - $E000           // save current HP
 819+ E7A4             >
 819+ E7A4             >Current_HP      defl  $ - $E000             // used to set HP once!
 819+ E7A4             >
 819+ E7A4             >//              ______________________________________________________________________
 819+ E7A4             >//              Dictionary part
 819+ E7A4             >
 819+ E7A4             >                org     Dict_Ptr
 819+ 6F05             >
 819+ 6F05 A2 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 819+ 6F07             >
 819+ 6F07             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 819+ 6F07 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 819+ 6F0A             >
 819+ 6F0A             >
 819+ 6F0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 819+ 6F0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 819+ 6F0A             >
 819+ 6F0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 820+ 6F0A 92 6A                        dw      ZERO                    // 0
 821+ 6F0C 5D 6A                        dw      CONSTANT                // constant
 822+ 6F0E 53 68                        dw      EXIT                    // ;
 823+ 6F10
 824+ 6F10              //  ______________________________________________________________________
 825+ 6F10              //
 826+ 6F10              // recurse      --
 827+ 6F10              //              Colon_Def RECURSE, "RECURSE", is_immediate
 828+ 6F10              //              dw      QCOMP                   // ?comp
 829+ 6F10              //              dw      LATEST                  // latest
 830+ 6F10              //              dw      PFA, CFA                // pfa cfa
 831+ 6F10              //              dw      COMMA                   // ,
 832+ 6F10              //              dw      EXIT                    // ; immediate
 833+ 6F10
 834+ 6F10              //  ______________________________________________________________________
 835+ 6F10              //
 836+ 6F10              // does>     --
 837+ 6F10                              Colon_Def DOES_TO, "DOES>", is_normal
 837+ 6F10             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 837+ 6F10             >
 837+ 6F10             >Dict_Ptr        defl    $
 837+ 6F10             >
 837+ 6F10             >//              ______________________________________________________________________
 837+ 6F10             >//              Heap part
 837+ 6F10             >
 837+ 6F10             >
 837+ 6F10             >                org     (Heap_Ptr & $1FFF) + $E000
 837+ E7A4             >
 837+ E7A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 837+ E7A4             >Latest_Definition defl  Heap_Ptr
 837+ E7A4             >
 837+ E7A4             >                // dummy db directives used to calculate length of namec
 837+ E7A4 44 4F 45 53 >                db      "DOES>"
 837+ E7A8 3E          >
 837+ E7A9             >len_NFA         defl    $ - temp_NFA
 837+ E7A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 837+ E7A4             >
 837+ E7A4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 837+ E7A5 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 837+ E7A9 3E          >
 837+ E7AA             >                org     $-1                 // alter last byte of Name just above to set
 837+ E7A9 BE          >                db      {b $} | END_BIT     // msb as name end
 837+ E7AA             >
 837+ E7AA 98 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 837+ E7AC             >Prev_Ptr        defl    Heap_Ptr
 837+ E7AC             >
 837+ E7AC             >mirror_Ptr      defl    $
 837+ E7AC             >
 837+ E7AC 12 6F       >                dw      Dict_Ptr + 2        // xt
 837+ E7AE             >Heap_Ptr        defl    $ - $E000           // save current HP
 837+ E7AE             >
 837+ E7AE             >Current_HP      defl  $ - $E000             // used to set HP once!
 837+ E7AE             >
 837+ E7AE             >//              ______________________________________________________________________
 837+ E7AE             >//              Dictionary part
 837+ E7AE             >
 837+ E7AE             >                org     Dict_Ptr
 837+ 6F10             >
 837+ 6F10 AC 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 837+ 6F12             >
 837+ 6F12             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 837+ 6F12 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 837+ 6F15             >
 837+ 6F15             >
 837+ 6F15             >                endif           ; ok        // for other definitions it "points" the correct handler
 837+ 6F15             >                // Use of "; ok" to suppress "warning[fwdref]"
 837+ 6F15             >
 837+ 6F15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 838+ 6F15 68 68                        dw      R_TO                    // r>
 839+ 6F17 63 6D                        dw      LATEST                  // latest
 840+ 6F19 C1 6D                        dw      PFA                     // pfa
 841+ 6F1B A5 69                        dw      STORE                   // !        \ old use of <BUILDS
 842+ 6F1D              //              dw      COMMA                   // ,        \ new use of CREATE
 843+ 6F1D DB 6E                        dw      C_SEMICOLON_CODE        // ;code
 844+ 6F1F              Does_Ptr:
 845+ 6F1F                              // via call coded in CFA
 846+ 6F1F EB                           ex      de, hl //**
 847+ 6F20                              // *** ldhlrp
 848+ 6F20 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 849+ 6F21 70                           ld      (hl), b
 850+ 6F22 2B                           dec     hl
 851+ 6F23 71                           ld      (hl), c
 852+ 6F24                              // *** ldrphl
 853+ 6F24 EB                           ex      de, hl //**
 854+ 6F25 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 855+ 6F26
 856+ 6F26 4E                           ld      c, (hl)
 857+ 6F27 23                           inc     hl
 858+ 6F28 46                           ld      b, (hl)
 859+ 6F29 23                           inc     hl
 860+ 6F2A
 861+ 6F2A                              psh1
 861+ 6F2A E5          >                push    hl
 861+ 6F2B DD E9       >                jp      (ix)
 862+ 6F2D                              // SMUDGE !
 863+ 6F2D
 864+ 6F2D              //  ______________________________________________________________________
 865+ 6F2D              //
 866+ 6F2D              // count        a -- a2 n
 867+ 6F2D              // expects a counted string at address a, returns string address and counter
 868+ 6F2D                              New_Def COUNT, "COUNT", is_code, is_normal
 868+ 6F2D             >
 868+ 6F2D             >Dict_Ptr        defl    $
 868+ 6F2D             >
 868+ 6F2D             >//              ______________________________________________________________________
 868+ 6F2D             >//              Heap part
 868+ 6F2D             >
 868+ 6F2D             >
 868+ 6F2D             >                org     (Heap_Ptr & $1FFF) + $E000
 868+ E7AE             >
 868+ E7AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 868+ E7AE             >Latest_Definition defl  Heap_Ptr
 868+ E7AE             >
 868+ E7AE             >                // dummy db directives used to calculate length of namec
 868+ E7AE 43 4F 55 4E >                db      "COUNT"
 868+ E7B2 54          >
 868+ E7B3             >len_NFA         defl    $ - temp_NFA
 868+ E7B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 868+ E7AE             >
 868+ E7AE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 868+ E7AF 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 868+ E7B3 54          >
 868+ E7B4             >                org     $-1                 // alter last byte of Name just above to set
 868+ E7B3 D4          >                db      {b $} | END_BIT     // msb as name end
 868+ E7B4             >
 868+ E7B4 A4 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 868+ E7B6             >Prev_Ptr        defl    Heap_Ptr
 868+ E7B6             >
 868+ E7B6             >mirror_Ptr      defl    $
 868+ E7B6             >
 868+ E7B6 2F 6F       >                dw      Dict_Ptr + 2        // xt
 868+ E7B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 868+ E7B8             >
 868+ E7B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 868+ E7B8             >
 868+ E7B8             >//              ______________________________________________________________________
 868+ E7B8             >//              Dictionary part
 868+ E7B8             >
 868+ E7B8             >                org     Dict_Ptr
 868+ 6F2D             >
 868+ 6F2D B6 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 868+ 6F2F             >
 868+ 6F2F             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 868+ 6F2F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 868+ 6F2F ~           >
 868+ 6F2F ~           >
 868+ 6F2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 868+ 6F2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 868+ 6F2F             >
 868+ 6F2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 869+ 6F2F D9                           exx
 870+ 6F30 E1                           pop     hl
 871+ 6F31 5E                           ld      e, (hl)
 872+ 6F32 16 00                        ld      d, 0
 873+ 6F34 23                           inc     hl
 874+ 6F35              Count_Here:
 875+ 6F35 E5                           push    hl
 876+ 6F36 D5                           push    de
 877+ 6F37 D9                           exx
 878+ 6F38                              next
 878+ 6F38 DD E9       >                jp      (ix)
 879+ 6F3A              //                pop     hl
 880+ 6F3A              //                ld      a, (hl)
 881+ 6F3A              //                inc     hl
 882+ 6F3A              //                push    hl
 883+ 6F3A              //                ld      h, 0
 884+ 6F3A              //                ld      l, a
 885+ 6F3A              //                push    hl
 886+ 6F3A              //                next
 887+ 6F3A
 888+ 6F3A              //  ______________________________________________________________________
 889+ 6F3A              //
 890+ 6F3A              // bounds       a n -- a+n n
 891+ 6F3A              // given an address and a length ( a n ) calculate the bound addresses
 892+ 6F3A              // suitable for DO-LOOP
 893+ 6F3A                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 893+ 6F3A             >
 893+ 6F3A             >Dict_Ptr        defl    $
 893+ 6F3A             >
 893+ 6F3A             >//              ______________________________________________________________________
 893+ 6F3A             >//              Heap part
 893+ 6F3A             >
 893+ 6F3A             >
 893+ 6F3A             >                org     (Heap_Ptr & $1FFF) + $E000
 893+ E7B8             >
 893+ E7B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 893+ E7B8             >Latest_Definition defl  Heap_Ptr
 893+ E7B8             >
 893+ E7B8             >                // dummy db directives used to calculate length of namec
 893+ E7B8 42 4F 55 4E >                db      "BOUNDS"
 893+ E7BC 44 53       >
 893+ E7BE             >len_NFA         defl    $ - temp_NFA
 893+ E7BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 893+ E7B8             >
 893+ E7B8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 893+ E7B9 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 893+ E7BD 44 53       >
 893+ E7BF             >                org     $-1                 // alter last byte of Name just above to set
 893+ E7BE D3          >                db      {b $} | END_BIT     // msb as name end
 893+ E7BF             >
 893+ E7BF AE 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 893+ E7C1             >Prev_Ptr        defl    Heap_Ptr
 893+ E7C1             >
 893+ E7C1             >mirror_Ptr      defl    $
 893+ E7C1             >
 893+ E7C1 3C 6F       >                dw      Dict_Ptr + 2        // xt
 893+ E7C3             >Heap_Ptr        defl    $ - $E000           // save current HP
 893+ E7C3             >
 893+ E7C3             >Current_HP      defl  $ - $E000             // used to set HP once!
 893+ E7C3             >
 893+ E7C3             >//              ______________________________________________________________________
 893+ E7C3             >//              Dictionary part
 893+ E7C3             >
 893+ E7C3             >                org     Dict_Ptr
 893+ 6F3A             >
 893+ 6F3A C1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 893+ 6F3C             >
 893+ 6F3C             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 893+ 6F3C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 893+ 6F3C ~           >
 893+ 6F3C ~           >
 893+ 6F3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 893+ 6F3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 893+ 6F3C             >
 893+ 6F3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 894+ 6F3C D9                           exx
 895+ 6F3D E1                           pop     hl
 896+ 6F3E D1                           pop     de
 897+ 6F3F 19                           add     hl, de
 898+ 6F40 18 F3                        jr      Count_Here
 899+ 6F42                              // push    hl
 900+ 6F42                              // push    de
 901+ 6F42                              // exx
 902+ 6F42                              // next
 903+ 6F42
 904+ 6F42              //  ______________________________________________________________________
 905+ 6F42              //
 906+ 6F42              // leave        --
 907+ 6F42              // Compile (leave) to leave current LOOP and jump just after it
 908+ 6F42                              Colon_Def LEAVE, "LEAVE", is_immediate
 908+ 6F42             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 908+ 6F42             >
 908+ 6F42             >Dict_Ptr        defl    $
 908+ 6F42             >
 908+ 6F42             >//              ______________________________________________________________________
 908+ 6F42             >//              Heap part
 908+ 6F42             >
 908+ 6F42             >
 908+ 6F42             >                org     (Heap_Ptr & $1FFF) + $E000
 908+ E7C3             >
 908+ E7C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 908+ E7C3             >Latest_Definition defl  Heap_Ptr
 908+ E7C3             >
 908+ E7C3             >                // dummy db directives used to calculate length of namec
 908+ E7C3 4C 45 41 56 >                db      "LEAVE"
 908+ E7C7 45          >
 908+ E7C8             >len_NFA         defl    $ - temp_NFA
 908+ E7C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 908+ E7C3             >
 908+ E7C3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 908+ E7C4 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 908+ E7C8 45          >
 908+ E7C9             >                org     $-1                 // alter last byte of Name just above to set
 908+ E7C8 C5          >                db      {b $} | END_BIT     // msb as name end
 908+ E7C9             >
 908+ E7C9 B8 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 908+ E7CB             >Prev_Ptr        defl    Heap_Ptr
 908+ E7CB             >
 908+ E7CB             >mirror_Ptr      defl    $
 908+ E7CB             >
 908+ E7CB 44 6F       >                dw      Dict_Ptr + 2        // xt
 908+ E7CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 908+ E7CD             >
 908+ E7CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 908+ E7CD             >
 908+ E7CD             >//              ______________________________________________________________________
 908+ E7CD             >//              Dictionary part
 908+ E7CD             >
 908+ E7CD             >                org     Dict_Ptr
 908+ 6F42             >
 908+ 6F42 CB 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 908+ 6F44             >
 908+ 6F44             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 908+ 6F44 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 908+ 6F47             >
 908+ 6F47             >
 908+ 6F47             >                endif           ; ok        // for other definitions it "points" the correct handler
 908+ 6F47             >                // Use of "; ok" to suppress "warning[fwdref]"
 908+ 6F47             >
 908+ 6F47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 909+ 6F47 63 6E 00 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 910+ 6F4B B7 6B 5D 68                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 910+ 6F4F 92 6A CD 6B
 911+ 6F53 92 6A 92 6A                  dw      ZERO, ZERO
 912+ 6F57 3A 68 2A 69                  dw      SPFETCH, DUP
 913+ 6F5B D4 68 D4 68                  dw      CELL_PLUS, CELL_PLUS
 914+ 6F5F 1A 69                        dw      TUCK
 915+ 6F61 75 6B 9B 69                  dw      CSP, FETCH
 916+ 6F65 23 69 F6 6B                  dw      SWAP, SUBTRACT
 917+ 6F69 94 67                        dw      CMOVE
 918+ 6F6B 75 6B 9B 69                  dw      CSP, FETCH, CELL_MINUS
 918+ 6F6F D8 68
 919+ 6F71 68 68 06 69                  dw      R_TO, OVER, STORE
 919+ 6F75 A5 69
 920+ 6F77 D8 68 92 6A                  dw      CELL_MINUS, ZERO
 921+ 6F7B 23 69 A5 69                  dw      SWAP, STORE
 922+ 6F7F 53 68                        dw      EXIT                    // ;
 923+ 6F81
 924+ 6F81              //  ______________________________________________________________________
 925+ 6F81              //
 926+ 6F81              // type         a n --
 927+ 6F81              // Sends to current output channel n characters starting at address a.
 928+ 6F81                              Colon_Def TYPE, "TYPE", is_normal
 928+ 6F81             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 928+ 6F81             >
 928+ 6F81             >Dict_Ptr        defl    $
 928+ 6F81             >
 928+ 6F81             >//              ______________________________________________________________________
 928+ 6F81             >//              Heap part
 928+ 6F81             >
 928+ 6F81             >
 928+ 6F81             >                org     (Heap_Ptr & $1FFF) + $E000
 928+ E7CD             >
 928+ E7CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ E7CD             >Latest_Definition defl  Heap_Ptr
 928+ E7CD             >
 928+ E7CD             >                // dummy db directives used to calculate length of namec
 928+ E7CD 54 59 50 45 >                db      "TYPE"
 928+ E7D1             >len_NFA         defl    $ - temp_NFA
 928+ E7D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ E7CD             >
 928+ E7CD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ E7CE 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 928+ E7D2             >                org     $-1                 // alter last byte of Name just above to set
 928+ E7D1 C5          >                db      {b $} | END_BIT     // msb as name end
 928+ E7D2             >
 928+ E7D2 C3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 928+ E7D4             >Prev_Ptr        defl    Heap_Ptr
 928+ E7D4             >
 928+ E7D4             >mirror_Ptr      defl    $
 928+ E7D4             >
 928+ E7D4 83 6F       >                dw      Dict_Ptr + 2        // xt
 928+ E7D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 928+ E7D6             >
 928+ E7D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 928+ E7D6             >
 928+ E7D6             >//              ______________________________________________________________________
 928+ E7D6             >//              Dictionary part
 928+ E7D6             >
 928+ E7D6             >                org     Dict_Ptr
 928+ 6F81             >
 928+ 6F81 D4 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 928+ 6F83             >
 928+ 6F83             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 6F83 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 928+ 6F86             >
 928+ 6F86             >
 928+ 6F86             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 6F86             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 6F86             >
 928+ 6F86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 6F86 3C 6F                        dw      BOUNDS                  // bounds
 930+ 6F88 0C 64                        dw      C_Q_DO                  // ?do
 931+ 6F8A 0C 00                        dw      Type_Skip - $
 932+ 6F8C              Type_Loop:
 933+ 6F8C 3A 64 B0 69                  dw          I, CFETCH           //      i c@
 934+ 6F90 71 6C                        dw          EMIT                //      emit
 935+ 6F92 E0 63                        dw      C_LOOP                  // loop
 936+ 6F94 F8 FF                        dw      Type_Loop - $
 937+ 6F96              Type_Skip:
 938+ 6F96 53 68                        dw      EXIT                    // ;
 939+ 6F98
 940+ 6F98              //  ______________________________________________________________________
 941+ 6F98              //
 942+ 6F98              // -trailing    a n1 -- a n2
 943+ 6F98              // Assumes that an n1 bytes-long string is stored at address a
 944+ 6F98              // and the string contains a space delimited word,
 945+ 6F98              // Finds n2 as the position of the first character after the word.
 946+ 6F98                              Colon_Def LTRAILING, "-TRAILING", is_normal
 946+ 6F98             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 946+ 6F98             >
 946+ 6F98             >Dict_Ptr        defl    $
 946+ 6F98             >
 946+ 6F98             >//              ______________________________________________________________________
 946+ 6F98             >//              Heap part
 946+ 6F98             >
 946+ 6F98             >
 946+ 6F98             >                org     (Heap_Ptr & $1FFF) + $E000
 946+ E7D6             >
 946+ E7D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ E7D6             >Latest_Definition defl  Heap_Ptr
 946+ E7D6             >
 946+ E7D6             >                // dummy db directives used to calculate length of namec
 946+ E7D6 2D 54 52 41 >                db      "-TRAILING"
 946+ E7DA 49 4C 49 4E >
 946+ E7DE 47          >
 946+ E7DF             >len_NFA         defl    $ - temp_NFA
 946+ E7DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ E7D6             >
 946+ E7D6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ E7D7 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 946+ E7DB 49 4C 49 4E >
 946+ E7DF 47          >
 946+ E7E0             >                org     $-1                 // alter last byte of Name just above to set
 946+ E7DF C7          >                db      {b $} | END_BIT     // msb as name end
 946+ E7E0             >
 946+ E7E0 CD 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 946+ E7E2             >Prev_Ptr        defl    Heap_Ptr
 946+ E7E2             >
 946+ E7E2             >mirror_Ptr      defl    $
 946+ E7E2             >
 946+ E7E2 9A 6F       >                dw      Dict_Ptr + 2        // xt
 946+ E7E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 946+ E7E4             >
 946+ E7E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 946+ E7E4             >
 946+ E7E4             >//              ______________________________________________________________________
 946+ E7E4             >//              Dictionary part
 946+ E7E4             >
 946+ E7E4             >                org     Dict_Ptr
 946+ 6F98             >
 946+ 6F98 E2 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 946+ 6F9A             >
 946+ 6F9A             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 6F9A CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 946+ 6F9D             >
 946+ 6F9D             >
 946+ 6F9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 6F9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 6F9D             >
 946+ 6F9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 6F9D 2A 69 92 6A                  dw      DUP, ZERO               // dup 0
 948+ 6FA1                                                              // do
 949+ 6FA1 0C 64                        dw      C_Q_DO
 950+ 6FA3 20 00                        dw      LTrailing_Leave - $
 951+ 6FA5              LTrailing_Loop:
 952+ 6FA5 79 69 A5 68                  dw          TWO_DUP, PLUS       //      2dup +
 953+ 6FA9 C5 68                        dw          ONE_SUBTRACT        //      1-
 954+ 6FAB B0 69                        dw          CFETCH              //      c@
 955+ 6FAD B5 6A F6 6B                  dw          BL, SUBTRACT        //      bl -
 956+ 6FB1                                                              //      if
 957+ 6FB1 F5 63                        dw          ZBRANCH
 958+ 6FB3 0A 00                        dw          LTrailing_Else - $
 959+ 6FB5 00 64                        dw              C_LEAVE         //          leave
 960+ 6FB7 0C 00                        dw              LTrailing_Leave - $
 961+ 6FB9 E8 63                        dw          BRANCH              //      else
 962+ 6FBB 04 00                        dw          LTrailing_Endif - $
 963+ 6FBD              LTrailing_Else:
 964+ 6FBD C5 68                        dw              ONE_SUBTRACT    //          1-
 965+ 6FBF              LTrailing_Endif:                                //      endif
 966+ 6FBF                                                              // loop
 967+ 6FBF E0 63                        dw      C_LOOP
 968+ 6FC1 E4 FF                        dw      LTrailing_Loop - $
 969+ 6FC3              LTrailing_Leave:
 970+ 6FC3 53 68                        dw      EXIT                    // ;
 971+ 6FC5
 972+ 6FC5              //  ______________________________________________________________________
 973+ 6FC5              //
 974+ 6FC5              // accept       a n1 -- n2
 975+ 6FC5              // Accepts at most n1 characters from terminal and stores them at address a
 976+ 6FC5              // CR stops input. A 'nul' is added as trailer.
 977+ 6FC5              // n2 is the string length. n2 is kept in span user variable also.
 978+ 6FC5                              Colon_Def ACCEPT, "ACCEPT", is_normal
 978+ 6FC5             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 978+ 6FC5             >
 978+ 6FC5             >Dict_Ptr        defl    $
 978+ 6FC5             >
 978+ 6FC5             >//              ______________________________________________________________________
 978+ 6FC5             >//              Heap part
 978+ 6FC5             >
 978+ 6FC5             >
 978+ 6FC5             >                org     (Heap_Ptr & $1FFF) + $E000
 978+ E7E4             >
 978+ E7E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ E7E4             >Latest_Definition defl  Heap_Ptr
 978+ E7E4             >
 978+ E7E4             >                // dummy db directives used to calculate length of namec
 978+ E7E4 41 43 43 45 >                db      "ACCEPT"
 978+ E7E8 50 54       >
 978+ E7EA             >len_NFA         defl    $ - temp_NFA
 978+ E7EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ E7E4             >
 978+ E7E4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ E7E5 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 978+ E7E9 50 54       >
 978+ E7EB             >                org     $-1                 // alter last byte of Name just above to set
 978+ E7EA D4          >                db      {b $} | END_BIT     // msb as name end
 978+ E7EB             >
 978+ E7EB D6 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 978+ E7ED             >Prev_Ptr        defl    Heap_Ptr
 978+ E7ED             >
 978+ E7ED             >mirror_Ptr      defl    $
 978+ E7ED             >
 978+ E7ED C7 6F       >                dw      Dict_Ptr + 2        // xt
 978+ E7EF             >Heap_Ptr        defl    $ - $E000           // save current HP
 978+ E7EF             >
 978+ E7EF             >Current_HP      defl  $ - $E000             // used to set HP once!
 978+ E7EF             >
 978+ E7EF             >//              ______________________________________________________________________
 978+ E7EF             >//              Dictionary part
 978+ E7EF             >
 978+ E7EF             >                org     Dict_Ptr
 978+ 6FC5             >
 978+ 6FC5 ED 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 978+ 6FC7             >
 978+ 6FC7             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 6FC7 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 6FCA             >
 978+ 6FCA             >
 978+ 6FCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 6FCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 6FCA             >
 978+ 6FCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 6FCA 06 69 A5 68                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 979+ 6FCE 06 69
 980+ 6FD0 92 6A 3C 69                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 981+ 6FD4                                                              // do
 982+ 6FD4 0C 64                        dw      C_Q_DO
 983+ 6FD6 8C 00                        dw      Accept_Leave - $
 984+ 6FD8              Accept_Loop:
 985+ 6FD8 32 66                        dw          CUR
 986+ 6FDA 0F 69 7A 66                  dw          DROP, KEY           //      drop key        ( a  c )
 987+ 6FDE 2A 69                        dw          DUP                 //      dup             ( a  c  c )
 988+ 6FE0 A3 63 0E 00                  dw          LIT, $0E            //      0E
 989+ 6FE4 D8 6A                        dw          PLUS_ORIGIN         //      +origin
 990+ 6FE6 9B 69                        dw          FETCH               //      @               ( a  c  c  del )
 991+ 6FE8 02 6C                        dw          EQUALS              //      =               ( a  c  c==del )
 992+ 6FEA                                                              //      if
 993+ 6FEA F5 63                        dw          ZBRANCH
 994+ 6FEC 2C 00                        dw          Accept_Else_0 - $
 995+ 6FEE 0F 69                        dw              DROP            //          drop        ( a  )
 996+ 6FF0 2A 69 3A 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 996+ 6FF4 02 6C
 997+ 6FF6 99 6A 13 68                  dw              ONE, AND_OP     //          1 and
 998+ 6FFA 2A 69                        dw              DUP             //          dup         ( a  a==i  a==i )
 999+ 6FFC 68 68                        dw              R_TO            //          r> 2 - + r>
1000+ 6FFE E0 68 A5 68                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1001+ 7002 5D 68                        dw              TO_R            //
1002+ 7004                                                              //          if
1003+ 7004 F5 63                        dw              ZBRANCH
1004+ 7006 0A 00                        dw              Accept_Else_1 - $
1005+ 7008 A3 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1006+ 700C                                                              //          else
1007+ 700C E8 63                        dw              BRANCH
1008+ 700E 06 00                        dw              Accept_Endif_1 - $
1009+ 7010              Accept_Else_1:
1010+ 7010 A3 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1011+ 7014              Accept_Endif_1:                                 //          endif
1012+ 7014 E8 63                        dw          BRANCH
1013+ 7016 2E 00                        dw          Accept_Endif_0 - $
1014+ 7018              Accept_Else_0:                                  //      else
1015+ 7018 2A 69                        dw              DUP             //          dup         ( a  c  c )
1016+ 701A A3 63 0D 00                  dw              LIT, 13         //          13
1017+ 701E 02 6C                        dw              EQUALS          //          =           ( a  c  c==CR )
1018+ 7020                                                              //          if
1019+ 7020 F5 63                        dw              ZBRANCH
1020+ 7022 0C 00                        dw              Accept_Else_2 - $
1021+ 7024 0F 69 B5 6A                  dw                  DROP, BL    //              drop bl ( a  bl )
1022+ 7028 92 6A                        dw                  ZERO        //              0       ( a  c  0 )
1023+ 702A                                                              //          else
1024+ 702A E8 63                        dw              BRANCH
1025+ 702C 04 00                        dw              Accept_Endif_2 - $
1026+ 702E              Accept_Else_2:
1027+ 702E 2A 69                        dw                  DUP         //              dup     ( a  c  c )
1028+ 7030                                                              //          endif
1029+ 7030              Accept_Endif_2:
1030+ 7030 3A 64 B9 69                  dw              I, CSTORE       //          i           ( a  c )
1031+ 7034 2A 69 B5 6A                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1031+ 7038 1B 6C
1032+ 703A                                                              //          if
1033+ 703A F5 63                        dw              ZBRANCH
1034+ 703C 08 00                        dw              Accept_Endif_3 - $
1035+ 703E 68 68                        dw                  R_TO        //              r>
1036+ 7040 C5 68                        dw                  ONE_SUBTRACT//              1-
1037+ 7042 5D 68                        dw                  TO_R        //              >r
1038+ 7044                                                              //          endif
1039+ 7044              Accept_Endif_3:
1040+ 7044              Accept_Endif_0:                                 //      endif
1041+ 7044 71 6C                        dw          EMIT                //      emit
1042+ 7046
1043+ 7046 92 6A 3A 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1043+ 704A BE 68
1044+ 704C A5 69                        dw          STORE               //          ( zero pad )
1045+ 704E 3A 64                        dw          I                   //      i
1046+ 7050 3A 64 B0 69                  dw          I, CFETCH, ZEQUAL   //      i 0= if
1046+ 7054 78 68
1047+ 7056 F5 63                        dw          ZBRANCH             //
1048+ 7058 06 00                        dw              Accept_Endif_4 - $
1049+ 705A 00 64                        dw                  C_LEAVE     //              leave
1050+ 705C 06 00                        dw                  Accept_Leave - $
1051+ 705E              Accept_Endif_4:                                 //      endif
1052+ 705E                                                              // loop
1053+ 705E E0 63                        dw      C_LOOP
1054+ 7060 78 FF                        dw      Accept_Loop - $
1055+ 7062              Accept_Leave:
1056+ 7062 23 69 F6 6B                  dw      SWAP, SUBTRACT          // swap -
1057+ 7066 BE 68                        dw      ONE_PLUS                // 1+
1058+ 7068 2A 69 A5 6B                  dw      DUP, SPAN, STORE        // dup span !
1058+ 706C A5 69
1059+ 706E 53 68                        dw      EXIT                    // ;
1060+ 7070
1061+ 7070              //  ______________________________________________________________________
1062+ 7070              //
1063+ 7070              // expect      a n --
1064+ 7070              // Accepts at most n1 characters from terminal and stores them at address a
1065+ 7070              // CR stops input. A 'nul' is added as trailer.
1066+ 7070              // n2 is the string length. n2 is kept in span user variable also.
1067+ 7070              //              Colon_Def EXPECT, "EXPECT", is_normal
1068+ 7070              //              dw      ACCEPT, DROP            // accept drop
1069+ 7070              //              dw      EXIT                    // ;
1070+ 7070
1071+ 7070              //  ______________________________________________________________________
1072+ 7070              //
1073+ 7070              // query        --
1074+ 7070              // Accept at most 80 character from console. CR stops.
1075+ 7070              // Text is stored in TIB. Variable IN is zeroed.
1076+ 7070                              Colon_Def QUERY, "QUERY", is_normal
1076+ 7070             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1076+ 7070             >
1076+ 7070             >Dict_Ptr        defl    $
1076+ 7070             >
1076+ 7070             >//              ______________________________________________________________________
1076+ 7070             >//              Heap part
1076+ 7070             >
1076+ 7070             >
1076+ 7070             >                org     (Heap_Ptr & $1FFF) + $E000
1076+ E7EF             >
1076+ E7EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ E7EF             >Latest_Definition defl  Heap_Ptr
1076+ E7EF             >
1076+ E7EF             >                // dummy db directives used to calculate length of namec
1076+ E7EF 51 55 45 52 >                db      "QUERY"
1076+ E7F3 59          >
1076+ E7F4             >len_NFA         defl    $ - temp_NFA
1076+ E7F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ E7EF             >
1076+ E7EF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ E7F0 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1076+ E7F4 59          >
1076+ E7F5             >                org     $-1                 // alter last byte of Name just above to set
1076+ E7F4 D9          >                db      {b $} | END_BIT     // msb as name end
1076+ E7F5             >
1076+ E7F5 E4 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1076+ E7F7             >Prev_Ptr        defl    Heap_Ptr
1076+ E7F7             >
1076+ E7F7             >mirror_Ptr      defl    $
1076+ E7F7             >
1076+ E7F7 72 70       >                dw      Dict_Ptr + 2        // xt
1076+ E7F9             >Heap_Ptr        defl    $ - $E000           // save current HP
1076+ E7F9             >
1076+ E7F9             >Current_HP      defl  $ - $E000             // used to set HP once!
1076+ E7F9             >
1076+ E7F9             >//              ______________________________________________________________________
1076+ E7F9             >//              Dictionary part
1076+ E7F9             >
1076+ E7F9             >                org     Dict_Ptr
1076+ 7070             >
1076+ 7070 F7 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1076+ 7072             >
1076+ 7072             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 7072 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1076+ 7075             >
1076+ 7075             >
1076+ 7075             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 7075             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 7075             >
1076+ 7075             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 7075 F7 6A 9B 69                  dw      TIB, FETCH              // tib @
1078+ 7079 A3 63 50 00                  dw      LIT, 80                 // 80
1079+ 707D C7 6F 0F 69                  dw      ACCEPT, DROP            // accept drop
1080+ 7081 92 6A 39 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
1080+ 7085 A5 69
1081+ 7087 53 68                        dw      EXIT                    // ;
1082+ 7089
1083+ 7089              //  ______________________________________________________________________
1084+ 7089              //
1085+ 7089              // fill        a n c --
1086+ 7089              // If n > 0, fills n locations starting from address a with the value c.
1087+ 7089                              New_Def FILL, "FILL", is_code, is_normal
1087+ 7089             >
1087+ 7089             >Dict_Ptr        defl    $
1087+ 7089             >
1087+ 7089             >//              ______________________________________________________________________
1087+ 7089             >//              Heap part
1087+ 7089             >
1087+ 7089             >
1087+ 7089             >                org     (Heap_Ptr & $1FFF) + $E000
1087+ E7F9             >
1087+ E7F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1087+ E7F9             >Latest_Definition defl  Heap_Ptr
1087+ E7F9             >
1087+ E7F9             >                // dummy db directives used to calculate length of namec
1087+ E7F9 46 49 4C 4C >                db      "FILL"
1087+ E7FD             >len_NFA         defl    $ - temp_NFA
1087+ E7FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1087+ E7F9             >
1087+ E7F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1087+ E7FA 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1087+ E7FE             >                org     $-1                 // alter last byte of Name just above to set
1087+ E7FD CC          >                db      {b $} | END_BIT     // msb as name end
1087+ E7FE             >
1087+ E7FE EF 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1087+ E800             >Prev_Ptr        defl    Heap_Ptr
1087+ E800             >
1087+ E800             >mirror_Ptr      defl    $
1087+ E800             >
1087+ E800 8B 70       >                dw      Dict_Ptr + 2        // xt
1087+ E802             >Heap_Ptr        defl    $ - $E000           // save current HP
1087+ E802             >
1087+ E802             >Current_HP      defl  $ - $E000             // used to set HP once!
1087+ E802             >
1087+ E802             >//              ______________________________________________________________________
1087+ E802             >//              Dictionary part
1087+ E802             >
1087+ E802             >                org     Dict_Ptr
1087+ 7089             >
1087+ 7089 00 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1087+ 708B             >
1087+ 708B             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1087+ 708B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1087+ 708B ~           >
1087+ 708B ~           >
1087+ 708B             >                endif           ; ok        // for other definitions it "points" the correct handler
1087+ 708B             >                // Use of "; ok" to suppress "warning[fwdref]"
1087+ 708B             >
1087+ 708B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1088+ 708B D9                           exx
1089+ 708C D1                           pop     de                  // de has character
1090+ 708D C1                           pop     bc                  // bc has counter
1091+ 708E E1                           pop     hl                  // hl has address, save Instruction Pointer
1092+ 708F              Fill_Loop:
1093+ 708F 78                               ld      a, b
1094+ 7090 B1                               or      c
1095+ 7091 28 05                        jr      z, Fill_While_End
1096+ 7093 73                               ld      (hl), e
1097+ 7094 0B                               dec     bc
1098+ 7095 23                               inc     hl
1099+ 7096 18 F7                        jr      Fill_Loop
1100+ 7098              Fill_While_End:
1101+ 7098 D9                           exx
1102+ 7099                              next
1102+ 7099 DD E9       >                jp      (ix)
1103+ 709B
1104+ 709B              //  ______________________________________________________________________
1105+ 709B              //
1106+ 709B              // erase        a n --
1107+ 709B              // If n > 0, fills n locations starting from address a with 'nul' characters.
1108+ 709B                              Colon_Def ERASE, "ERASE", is_normal
1108+ 709B             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1108+ 709B             >
1108+ 709B             >Dict_Ptr        defl    $
1108+ 709B             >
1108+ 709B             >//              ______________________________________________________________________
1108+ 709B             >//              Heap part
1108+ 709B             >
1108+ 709B             >
1108+ 709B             >                org     (Heap_Ptr & $1FFF) + $E000
1108+ E802             >
1108+ E802             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1108+ E802             >Latest_Definition defl  Heap_Ptr
1108+ E802             >
1108+ E802             >                // dummy db directives used to calculate length of namec
1108+ E802 45 52 41 53 >                db      "ERASE"
1108+ E806 45          >
1108+ E807             >len_NFA         defl    $ - temp_NFA
1108+ E807             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1108+ E802             >
1108+ E802 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1108+ E803 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1108+ E807 45          >
1108+ E808             >                org     $-1                 // alter last byte of Name just above to set
1108+ E807 C5          >                db      {b $} | END_BIT     // msb as name end
1108+ E808             >
1108+ E808 F9 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1108+ E80A             >Prev_Ptr        defl    Heap_Ptr
1108+ E80A             >
1108+ E80A             >mirror_Ptr      defl    $
1108+ E80A             >
1108+ E80A 9D 70       >                dw      Dict_Ptr + 2        // xt
1108+ E80C             >Heap_Ptr        defl    $ - $E000           // save current HP
1108+ E80C             >
1108+ E80C             >Current_HP      defl  $ - $E000             // used to set HP once!
1108+ E80C             >
1108+ E80C             >//              ______________________________________________________________________
1108+ E80C             >//              Dictionary part
1108+ E80C             >
1108+ E80C             >                org     Dict_Ptr
1108+ 709B             >
1108+ 709B 0A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1108+ 709D             >
1108+ 709D             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1108+ 709D CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1108+ 70A0             >
1108+ 70A0             >
1108+ 70A0             >                endif           ; ok        // for other definitions it "points" the correct handler
1108+ 70A0             >                // Use of "; ok" to suppress "warning[fwdref]"
1108+ 70A0             >
1108+ 70A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1109+ 70A0 92 6A 8B 70                  dw      ZERO, FILL              // 0 fill
1110+ 70A4 53 68                        dw      EXIT                    // ;
1111+ 70A6
1112+ 70A6              //  ______________________________________________________________________
1113+ 70A6              //
1114+ 70A6              // blank        a n --
1115+ 70A6              // If n > 0, fills n locations starting from address a with 'nul' characters.
1116+ 70A6                              Colon_Def BLANK, "BLANK", is_normal
1116+ 70A6             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1116+ 70A6             >
1116+ 70A6             >Dict_Ptr        defl    $
1116+ 70A6             >
1116+ 70A6             >//              ______________________________________________________________________
1116+ 70A6             >//              Heap part
1116+ 70A6             >
1116+ 70A6             >
1116+ 70A6             >                org     (Heap_Ptr & $1FFF) + $E000
1116+ E80C             >
1116+ E80C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1116+ E80C             >Latest_Definition defl  Heap_Ptr
1116+ E80C             >
1116+ E80C             >                // dummy db directives used to calculate length of namec
1116+ E80C 42 4C 41 4E >                db      "BLANK"
1116+ E810 4B          >
1116+ E811             >len_NFA         defl    $ - temp_NFA
1116+ E811             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1116+ E80C             >
1116+ E80C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1116+ E80D 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1116+ E811 4B          >
1116+ E812             >                org     $-1                 // alter last byte of Name just above to set
1116+ E811 CB          >                db      {b $} | END_BIT     // msb as name end
1116+ E812             >
1116+ E812 02 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1116+ E814             >Prev_Ptr        defl    Heap_Ptr
1116+ E814             >
1116+ E814             >mirror_Ptr      defl    $
1116+ E814             >
1116+ E814 A8 70       >                dw      Dict_Ptr + 2        // xt
1116+ E816             >Heap_Ptr        defl    $ - $E000           // save current HP
1116+ E816             >
1116+ E816             >Current_HP      defl  $ - $E000             // used to set HP once!
1116+ E816             >
1116+ E816             >//              ______________________________________________________________________
1116+ E816             >//              Dictionary part
1116+ E816             >
1116+ E816             >                org     Dict_Ptr
1116+ 70A6             >
1116+ 70A6 14 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1116+ 70A8             >
1116+ 70A8             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1116+ 70A8 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1116+ 70AB             >
1116+ 70AB             >
1116+ 70AB             >                endif           ; ok        // for other definitions it "points" the correct handler
1116+ 70AB             >                // Use of "; ok" to suppress "warning[fwdref]"
1116+ 70AB             >
1116+ 70AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1117+ 70AB B5 6A 8B 70                  dw      BL, FILL                // bl fill
1118+ 70AF 53 68                        dw      EXIT                    // ;
1119+ 70B1
1120+ 70B1              //  ______________________________________________________________________
1121+ 70B1              //
1122+ 70B1              // hold         c --
1123+ 70B1              // Used between <# and #> to insert a character c in numeric formatting.
1124+ 70B1                              Colon_Def HOLD, "HOLD", is_normal
1124+ 70B1             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1124+ 70B1             >
1124+ 70B1             >Dict_Ptr        defl    $
1124+ 70B1             >
1124+ 70B1             >//              ______________________________________________________________________
1124+ 70B1             >//              Heap part
1124+ 70B1             >
1124+ 70B1             >
1124+ 70B1             >                org     (Heap_Ptr & $1FFF) + $E000
1124+ E816             >
1124+ E816             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ E816             >Latest_Definition defl  Heap_Ptr
1124+ E816             >
1124+ E816             >                // dummy db directives used to calculate length of namec
1124+ E816 48 4F 4C 44 >                db      "HOLD"
1124+ E81A             >len_NFA         defl    $ - temp_NFA
1124+ E81A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ E816             >
1124+ E816 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ E817 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1124+ E81B             >                org     $-1                 // alter last byte of Name just above to set
1124+ E81A C4          >                db      {b $} | END_BIT     // msb as name end
1124+ E81B             >
1124+ E81B 0C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1124+ E81D             >Prev_Ptr        defl    Heap_Ptr
1124+ E81D             >
1124+ E81D             >mirror_Ptr      defl    $
1124+ E81D             >
1124+ E81D B3 70       >                dw      Dict_Ptr + 2        // xt
1124+ E81F             >Heap_Ptr        defl    $ - $E000           // save current HP
1124+ E81F             >
1124+ E81F             >Current_HP      defl  $ - $E000             // used to set HP once!
1124+ E81F             >
1124+ E81F             >//              ______________________________________________________________________
1124+ E81F             >//              Dictionary part
1124+ E81F             >
1124+ E81F             >                org     Dict_Ptr
1124+ 70B1             >
1124+ 70B1 1D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1124+ 70B3             >
1124+ 70B3             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 70B3 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1124+ 70B6             >
1124+ 70B6             >
1124+ 70B6             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 70B6             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 70B6             >
1124+ 70B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 70B6 AE 6A                        dw      NEG_ONE                 // -1
1126+ 70B8 81 6B 83 69                  dw      HLD, PLUSSTORE          // hld +!
1127+ 70BC 81 6B 9B 69                  dw      HLD, FETCH, CSTORE      // hld @ c!
1127+ 70C0 B9 69
1128+ 70C2 53 68                        dw      EXIT                    // ;
1129+ 70C4
1130+ 70C4              //  ______________________________________________________________________
1131+ 70C4              //
1132+ 70C4              // pad         -- a
1133+ 70C4              // leaves the buffer text address. This is at a fixed distance over HERE.
1134+ 70C4                              Colon_Def PAD, "PAD", is_normal
1134+ 70C4             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1134+ 70C4             >
1134+ 70C4             >Dict_Ptr        defl    $
1134+ 70C4             >
1134+ 70C4             >//              ______________________________________________________________________
1134+ 70C4             >//              Heap part
1134+ 70C4             >
1134+ 70C4             >
1134+ 70C4             >                org     (Heap_Ptr & $1FFF) + $E000
1134+ E81F             >
1134+ E81F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1134+ E81F             >Latest_Definition defl  Heap_Ptr
1134+ E81F             >
1134+ E81F             >                // dummy db directives used to calculate length of namec
1134+ E81F 50 41 44    >                db      "PAD"
1134+ E822             >len_NFA         defl    $ - temp_NFA
1134+ E822             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1134+ E81F             >
1134+ E81F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1134+ E820 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1134+ E823             >                org     $-1                 // alter last byte of Name just above to set
1134+ E822 C4          >                db      {b $} | END_BIT     // msb as name end
1134+ E823             >
1134+ E823 16 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1134+ E825             >Prev_Ptr        defl    Heap_Ptr
1134+ E825             >
1134+ E825             >mirror_Ptr      defl    $
1134+ E825             >
1134+ E825 C6 70       >                dw      Dict_Ptr + 2        // xt
1134+ E827             >Heap_Ptr        defl    $ - $E000           // save current HP
1134+ E827             >
1134+ E827             >Current_HP      defl  $ - $E000             // used to set HP once!
1134+ E827             >
1134+ E827             >//              ______________________________________________________________________
1134+ E827             >//              Dictionary part
1134+ E827             >
1134+ E827             >                org     Dict_Ptr
1134+ 70C4             >
1134+ 70C4 25 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1134+ 70C6             >
1134+ 70C6             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1134+ 70C6 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1134+ 70C9             >
1134+ 70C9             >
1134+ 70C9             >                endif           ; ok        // for other definitions it "points" the correct handler
1134+ 70C9             >                // Use of "; ok" to suppress "warning[fwdref]"
1134+ 70C9             >
1134+ 70C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1135+ 70C9 B7 6B                        dw      HERE                    // here
1136+ 70CB A3 63 44 00                  dw      LIT, 68                 // 68
1137+ 70CF A5 68                        dw      PLUS                    // +
1138+ 70D1 53 68                        dw      EXIT                    // ;
1139+ 70D3
1140+ 70D3              //  ______________________________________________________________________
1141+ 70D3              //
1142+ 70D3              // word         c -- a
1143+ 70D3              // reads characters from input streams until it encouners a c delimiter.
1144+ 70D3              // Stores that packet so it starts from HERE
1145+ 70D3              // WORD leaves a counter as first byte and ends the packet with two spaces.
1146+ 70D3              // Other occurrences of c are ignored.
1147+ 70D3              // If BLK is zero, text is taken from terminal buffer TIB.
1148+ 70D3              // Otherwise text is taken from the disk-block given by BLK.
1149+ 70D3              // "in" variable is incremented of the number of character read.
1150+ 70D3              // The number of characters read is given by ENCLOSE.
1151+ 70D3                              Colon_Def WORD, "WORD", is_normal
1151+ 70D3             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1151+ 70D3             >
1151+ 70D3             >Dict_Ptr        defl    $
1151+ 70D3             >
1151+ 70D3             >//              ______________________________________________________________________
1151+ 70D3             >//              Heap part
1151+ 70D3             >
1151+ 70D3             >
1151+ 70D3             >                org     (Heap_Ptr & $1FFF) + $E000
1151+ E827             >
1151+ E827             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1151+ E827             >Latest_Definition defl  Heap_Ptr
1151+ E827             >
1151+ E827             >                // dummy db directives used to calculate length of namec
1151+ E827 57 4F 52 44 >                db      "WORD"
1151+ E82B             >len_NFA         defl    $ - temp_NFA
1151+ E82B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1151+ E827             >
1151+ E827 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1151+ E828 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1151+ E82C             >                org     $-1                 // alter last byte of Name just above to set
1151+ E82B C4          >                db      {b $} | END_BIT     // msb as name end
1151+ E82C             >
1151+ E82C 1F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1151+ E82E             >Prev_Ptr        defl    Heap_Ptr
1151+ E82E             >
1151+ E82E             >mirror_Ptr      defl    $
1151+ E82E             >
1151+ E82E D5 70       >                dw      Dict_Ptr + 2        // xt
1151+ E830             >Heap_Ptr        defl    $ - $E000           // save current HP
1151+ E830             >
1151+ E830             >Current_HP      defl  $ - $E000             // used to set HP once!
1151+ E830             >
1151+ E830             >//              ______________________________________________________________________
1151+ E830             >//              Dictionary part
1151+ E830             >
1151+ E830             >                org     Dict_Ptr
1151+ 70D3             >
1151+ 70D3 2E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1151+ 70D5             >
1151+ 70D5             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1151+ 70D5 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1151+ 70D8             >
1151+ 70D8             >
1151+ 70D8             >                endif           ; ok        // for other definitions it "points" the correct handler
1151+ 70D8             >                // Use of "; ok" to suppress "warning[fwdref]"
1151+ 70D8             >
1151+ 70D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1152+ 70D8 33 6B 9B 69                  dw      BLK, FETCH              // blk @
1153+ 70DC                                                              // if
1154+ 70DC F5 63                        dw      ZBRANCH
1155+ 70DE 0C 00                        dw      Word_Else - $
1156+ 70E0 33 6B 9B 69                  dw          BLK, FETCH          //      blk @
1157+ 70E4 8D 79                        dw          BLOCK               //      block ( forward )
1158+ 70E6                                                              // else
1159+ 70E6 E8 63                        dw      BRANCH
1160+ 70E8 06 00                        dw      Word_Endif - $
1161+ 70EA              Word_Else:
1162+ 70EA F7 6A 9B 69                  dw         TIB, FETCH           //      tib @
1163+ 70EE              Word_Endif:                                     // endif
1164+ 70EE 39 6B 9B 69                  dw      TO_IN, FETCH, PLUS      // >in @ +
1164+ 70F2 A5 68
1165+ 70F4 23 69 29 65                  dw      SWAP, ENCLOSE           // swap enclose
1166+ 70F8 B7 6B A3 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1166+ 70FC 22 00 A8 70
1167+ 7100 39 6B 83 69                  dw      TO_IN, PLUSSTORE        // >in @ +
1168+ 7104 06 69 F6 6B                  dw      OVER, SUBTRACT, TO_R    // over - >r
1168+ 7108 5D 68
1169+ 710A 73 68 B7 6B                  dw      R_OP, HERE, CSTORE      // r here c!
1169+ 710E B9 69
1170+ 7110 A5 68                        dw      PLUS                    // +
1171+ 7112 B7 6B BE 68                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1171+ 7116 68 68
1172+ 7118 94 67                        dw      CMOVE                   // cmove
1173+ 711A B7 6B                        dw      HERE                    // here
1174+ 711C 53 68                        dw      EXIT                    // ;
1175+ 711E
1176+ 711E              //  ______________________________________________________________________
1177+ 711E              //
1178+ 711E              // (.")         --
1179+ 711E              // Direct procedure compiled by ." and  .(  It executes TYPE.
1180+ 711E                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1180+ 711E             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1180+ 711E             >
1180+ 711E             >Dict_Ptr        defl    $
1180+ 711E             >
1180+ 711E             >//              ______________________________________________________________________
1180+ 711E             >//              Heap part
1180+ 711E             >
1180+ 711E             >
1180+ 711E             >                org     (Heap_Ptr & $1FFF) + $E000
1180+ E830             >
1180+ E830             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1180+ E830             >Latest_Definition defl  Heap_Ptr
1180+ E830             >
1180+ E830             >                // dummy db directives used to calculate length of namec
1180+ E830 28 2E 22 29 >                db      '(.")'
1180+ E834             >len_NFA         defl    $ - temp_NFA
1180+ E834             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1180+ E830             >
1180+ E830 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1180+ E831 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1180+ E835             >                org     $-1                 // alter last byte of Name just above to set
1180+ E834 A9          >                db      {b $} | END_BIT     // msb as name end
1180+ E835             >
1180+ E835 27 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1180+ E837             >Prev_Ptr        defl    Heap_Ptr
1180+ E837             >
1180+ E837             >mirror_Ptr      defl    $
1180+ E837             >
1180+ E837 20 71       >                dw      Dict_Ptr + 2        // xt
1180+ E839             >Heap_Ptr        defl    $ - $E000           // save current HP
1180+ E839             >
1180+ E839             >Current_HP      defl  $ - $E000             // used to set HP once!
1180+ E839             >
1180+ E839             >//              ______________________________________________________________________
1180+ E839             >//              Dictionary part
1180+ E839             >
1180+ E839             >                org     Dict_Ptr
1180+ 711E             >
1180+ 711E 37 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1180+ 7120             >
1180+ 7120             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1180+ 7120 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1180+ 7123             >
1180+ 7123             >
1180+ 7123             >                endif           ; ok        // for other definitions it "points" the correct handler
1180+ 7123             >                // Use of "; ok" to suppress "warning[fwdref]"
1180+ 7123             >
1180+ 7123             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1181+ 7123 73 68 2F 6F                  dw      R_OP, COUNT             // r count
1182+ 7127 2A 69 BE 68                  dw      DUP, ONE_PLUS           // dup 1+
1183+ 712B 68 68 A5 68                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1183+ 712F 5D 68
1184+ 7131 83 6F                        dw      TYPE                    // type
1185+ 7133 53 68                        dw      EXIT                    // ;
1186+ 7135
1187+ 7135              //  ______________________________________________________________________
1188+ 7135              //
1189+ 7135              // char         -- c
1190+ 7135              // get first character from next input word
1191+ 7135                              Colon_Def CHAR,  "CHAR", is_normal
1191+ 7135             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1191+ 7135             >
1191+ 7135             >Dict_Ptr        defl    $
1191+ 7135             >
1191+ 7135             >//              ______________________________________________________________________
1191+ 7135             >//              Heap part
1191+ 7135             >
1191+ 7135             >
1191+ 7135             >                org     (Heap_Ptr & $1FFF) + $E000
1191+ E839             >
1191+ E839             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1191+ E839             >Latest_Definition defl  Heap_Ptr
1191+ E839             >
1191+ E839             >                // dummy db directives used to calculate length of namec
1191+ E839 43 48 41 52 >                db      "CHAR"
1191+ E83D             >len_NFA         defl    $ - temp_NFA
1191+ E83D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1191+ E839             >
1191+ E839 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1191+ E83A 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1191+ E83E             >                org     $-1                 // alter last byte of Name just above to set
1191+ E83D D2          >                db      {b $} | END_BIT     // msb as name end
1191+ E83E             >
1191+ E83E 30 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1191+ E840             >Prev_Ptr        defl    Heap_Ptr
1191+ E840             >
1191+ E840             >mirror_Ptr      defl    $
1191+ E840             >
1191+ E840 37 71       >                dw      Dict_Ptr + 2        // xt
1191+ E842             >Heap_Ptr        defl    $ - $E000           // save current HP
1191+ E842             >
1191+ E842             >Current_HP      defl  $ - $E000             // used to set HP once!
1191+ E842             >
1191+ E842             >//              ______________________________________________________________________
1191+ E842             >//              Dictionary part
1191+ E842             >
1191+ E842             >                org     Dict_Ptr
1191+ 7135             >
1191+ 7135 40 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1191+ 7137             >
1191+ 7137             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1191+ 7137 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1191+ 713A             >
1191+ 713A             >
1191+ 713A             >                endif           ; ok        // for other definitions it "points" the correct handler
1191+ 713A             >                // Use of "; ok" to suppress "warning[fwdref]"
1191+ 713A             >
1191+ 713A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1192+ 713A B5 6A D5 70                  dw      BL, WORD                // bl word
1193+ 713E BE 68 B0 69                  dw      ONE_PLUS, CFETCH        // 1+ c@
1194+ 7142 53 68                        dw      EXIT                    // ;
1195+ 7144
1196+ 7144              //  ______________________________________________________________________
1197+ 7144              //
1198+ 7144              // ,"           --
1199+ 7144              // compiles a string terminated by " as a counted string from next input stream
1200+ 7144                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1200+ 7144             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1200+ 7144             >
1200+ 7144             >Dict_Ptr        defl    $
1200+ 7144             >
1200+ 7144             >//              ______________________________________________________________________
1200+ 7144             >//              Heap part
1200+ 7144             >
1200+ 7144             >
1200+ 7144             >                org     (Heap_Ptr & $1FFF) + $E000
1200+ E842             >
1200+ E842             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ E842             >Latest_Definition defl  Heap_Ptr
1200+ E842             >
1200+ E842             >                // dummy db directives used to calculate length of namec
1200+ E842 2C 22       >                db      ',"'
1200+ E844             >len_NFA         defl    $ - temp_NFA
1200+ E844             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ E842             >
1200+ E842 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ E843 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1200+ E845             >                org     $-1                 // alter last byte of Name just above to set
1200+ E844 A2          >                db      {b $} | END_BIT     // msb as name end
1200+ E845             >
1200+ E845 39 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1200+ E847             >Prev_Ptr        defl    Heap_Ptr
1200+ E847             >
1200+ E847             >mirror_Ptr      defl    $
1200+ E847             >
1200+ E847 46 71       >                dw      Dict_Ptr + 2        // xt
1200+ E849             >Heap_Ptr        defl    $ - $E000           // save current HP
1200+ E849             >
1200+ E849             >Current_HP      defl  $ - $E000             // used to set HP once!
1200+ E849             >
1200+ E849             >//              ______________________________________________________________________
1200+ E849             >//              Dictionary part
1200+ E849             >
1200+ E849             >                org     Dict_Ptr
1200+ 7144             >
1200+ 7144 47 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1200+ 7146             >
1200+ 7146             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 7146 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1200+ 7149             >
1200+ 7149             >
1200+ 7149             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 7149             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 7149             >
1200+ 7149             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 7149 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1202+ 714D D5 70                        dw      WORD                    // word
1203+ 714F B0 69 BE 68                  dw      CFETCH, ONE_PLUS        // c@ 1+
1204+ 7153 C2 6B                        dw      ALLOT                   // allot
1205+ 7155 92 6A DC 6B                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1206+ 7159 53 68                        dw      EXIT
1207+ 715B
1208+ 715B              //  ______________________________________________________________________
1209+ 715B              //
1210+ 715B              // .c           c --
1211+ 715B              // intermediate general purpose string builder, used by ." and .(
1212+ 715B                              Colon_Def DOT_C,  ".C", is_immediate
1212+ 715B             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1212+ 715B             >
1212+ 715B             >Dict_Ptr        defl    $
1212+ 715B             >
1212+ 715B             >//              ______________________________________________________________________
1212+ 715B             >//              Heap part
1212+ 715B             >
1212+ 715B             >
1212+ 715B             >                org     (Heap_Ptr & $1FFF) + $E000
1212+ E849             >
1212+ E849             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ E849             >Latest_Definition defl  Heap_Ptr
1212+ E849             >
1212+ E849             >                // dummy db directives used to calculate length of namec
1212+ E849 2E 43       >                db      ".C"
1212+ E84B             >len_NFA         defl    $ - temp_NFA
1212+ E84B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ E849             >
1212+ E849 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ E84A 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1212+ E84C             >                org     $-1                 // alter last byte of Name just above to set
1212+ E84B C3          >                db      {b $} | END_BIT     // msb as name end
1212+ E84C             >
1212+ E84C 42 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1212+ E84E             >Prev_Ptr        defl    Heap_Ptr
1212+ E84E             >
1212+ E84E             >mirror_Ptr      defl    $
1212+ E84E             >
1212+ E84E 5D 71       >                dw      Dict_Ptr + 2        // xt
1212+ E850             >Heap_Ptr        defl    $ - $E000           // save current HP
1212+ E850             >
1212+ E850             >Current_HP      defl  $ - $E000             // used to set HP once!
1212+ E850             >
1212+ E850             >//              ______________________________________________________________________
1212+ E850             >//              Dictionary part
1212+ E850             >
1212+ E850             >                org     Dict_Ptr
1212+ 715B             >
1212+ 715B 4E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1212+ 715D             >
1212+ 715D             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 715D CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1212+ 7160             >
1212+ 7160             >
1212+ 7160             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 7160             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 7160             >
1212+ 7160             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 7160 5D 6B 9B 69                  dw      STATE, FETCH            // state @
1214+ 7164                                                              // if
1215+ 7164 F5 63                        dw      ZBRANCH
1216+ 7166 12 00                        dw      Dot_C_Else - $
1217+ 7168 63 6E 20 71                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1218+ 716C D5 70 B0 69                  dw          WORD, CFETCH        //      word c@
1219+ 7170 BE 68 C2 6B                  dw          ONE_PLUS, ALLOT     //      1+ allot
1220+ 7174                                                              // else
1221+ 7174 E8 63                        dw      BRANCH
1222+ 7176 08 00                        dw      Dot_C_Endif - $
1223+ 7178              Dot_C_Else:
1224+ 7178 D5 70 2F 6F                  dw          WORD, COUNT, TYPE   //      word count type
1224+ 717C 83 6F
1225+ 717E              Dot_C_Endif:                                    // endif
1226+ 717E 53 68                        dw      EXIT                    ;
1227+ 7180
1228+ 7180              //  ______________________________________________________________________
1229+ 7180              //
1230+ 7180              // ."           c --
1231+ 7180                              Colon_Def DOT_QUOTE,  '."', is_immediate
1231+ 7180             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1231+ 7180             >
1231+ 7180             >Dict_Ptr        defl    $
1231+ 7180             >
1231+ 7180             >//              ______________________________________________________________________
1231+ 7180             >//              Heap part
1231+ 7180             >
1231+ 7180             >
1231+ 7180             >                org     (Heap_Ptr & $1FFF) + $E000
1231+ E850             >
1231+ E850             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1231+ E850             >Latest_Definition defl  Heap_Ptr
1231+ E850             >
1231+ E850             >                // dummy db directives used to calculate length of namec
1231+ E850 2E 22       >                db      '."'
1231+ E852             >len_NFA         defl    $ - temp_NFA
1231+ E852             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1231+ E850             >
1231+ E850 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1231+ E851 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1231+ E853             >                org     $-1                 // alter last byte of Name just above to set
1231+ E852 A2          >                db      {b $} | END_BIT     // msb as name end
1231+ E853             >
1231+ E853 49 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1231+ E855             >Prev_Ptr        defl    Heap_Ptr
1231+ E855             >
1231+ E855             >mirror_Ptr      defl    $
1231+ E855             >
1231+ E855 82 71       >                dw      Dict_Ptr + 2        // xt
1231+ E857             >Heap_Ptr        defl    $ - $E000           // save current HP
1231+ E857             >
1231+ E857             >Current_HP      defl  $ - $E000             // used to set HP once!
1231+ E857             >
1231+ E857             >//              ______________________________________________________________________
1231+ E857             >//              Dictionary part
1231+ E857             >
1231+ E857             >                org     Dict_Ptr
1231+ 7180             >
1231+ 7180 55 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1231+ 7182             >
1231+ 7182             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1231+ 7182 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1231+ 7185             >
1231+ 7185             >
1231+ 7185             >                endif           ; ok        // for other definitions it "points" the correct handler
1231+ 7185             >                // Use of "; ok" to suppress "warning[fwdref]"
1231+ 7185             >
1231+ 7185             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1232+ 7185 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1233+ 7189 5D 71                        dw      DOT_C                   // [compile] .c
1234+ 718B 53 68                        dw      EXIT                    // ; immediate
1235+ 718D
1236+ 718D              //  ______________________________________________________________________
1237+ 718D              //
1238+ 718D              // .(           c --
1239+ 718D                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1239+ 718D             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1239+ 718D             >
1239+ 718D             >Dict_Ptr        defl    $
1239+ 718D             >
1239+ 718D             >//              ______________________________________________________________________
1239+ 718D             >//              Heap part
1239+ 718D             >
1239+ 718D             >
1239+ 718D             >                org     (Heap_Ptr & $1FFF) + $E000
1239+ E857             >
1239+ E857             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ E857             >Latest_Definition defl  Heap_Ptr
1239+ E857             >
1239+ E857             >                // dummy db directives used to calculate length of namec
1239+ E857 2E 28       >                db      ".("
1239+ E859             >len_NFA         defl    $ - temp_NFA
1239+ E859             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ E857             >
1239+ E857 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ E858 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1239+ E85A             >                org     $-1                 // alter last byte of Name just above to set
1239+ E859 A8          >                db      {b $} | END_BIT     // msb as name end
1239+ E85A             >
1239+ E85A 50 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1239+ E85C             >Prev_Ptr        defl    Heap_Ptr
1239+ E85C             >
1239+ E85C             >mirror_Ptr      defl    $
1239+ E85C             >
1239+ E85C 8F 71       >                dw      Dict_Ptr + 2        // xt
1239+ E85E             >Heap_Ptr        defl    $ - $E000           // save current HP
1239+ E85E             >
1239+ E85E             >Current_HP      defl  $ - $E000             // used to set HP once!
1239+ E85E             >
1239+ E85E             >//              ______________________________________________________________________
1239+ E85E             >//              Dictionary part
1239+ E85E             >
1239+ E85E             >                org     Dict_Ptr
1239+ 718D             >
1239+ 718D 5C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1239+ 718F             >
1239+ 718F             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 718F CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1239+ 7192             >
1239+ 7192             >
1239+ 7192             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 7192             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 7192             >
1239+ 7192             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 7192 A3 63 29 00                  dw      LIT, ")"                // [char] )
1241+ 7196 5D 71                        dw      DOT_C                   // [compile] .c
1242+ 7198 53 68                        dw      EXIT                    // ; immediate
1243+ 719A
1244+ 719A              //  ______________________________________________________________________
1245+ 719A              //
1246+ 719A              // (sgn)        a -- a f
1247+ 719A              // determines if char in addr a is a sign (+ or -), and in that case increments
1248+ 719A              // a flag. Returns f as the sign, true for negative, false for positive.
1249+ 719A              // called by NUMBER and (EXP)
1250+ 719A                              Colon_Def CSGN,  "(SGN)", is_normal
1250+ 719A             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1250+ 719A             >
1250+ 719A             >Dict_Ptr        defl    $
1250+ 719A             >
1250+ 719A             >//              ______________________________________________________________________
1250+ 719A             >//              Heap part
1250+ 719A             >
1250+ 719A             >
1250+ 719A             >                org     (Heap_Ptr & $1FFF) + $E000
1250+ E85E             >
1250+ E85E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1250+ E85E             >Latest_Definition defl  Heap_Ptr
1250+ E85E             >
1250+ E85E             >                // dummy db directives used to calculate length of namec
1250+ E85E 28 53 47 4E >                db      "(SGN)"
1250+ E862 29          >
1250+ E863             >len_NFA         defl    $ - temp_NFA
1250+ E863             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1250+ E85E             >
1250+ E85E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1250+ E85F 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1250+ E863 29          >
1250+ E864             >                org     $-1                 // alter last byte of Name just above to set
1250+ E863 A9          >                db      {b $} | END_BIT     // msb as name end
1250+ E864             >
1250+ E864 57 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1250+ E866             >Prev_Ptr        defl    Heap_Ptr
1250+ E866             >
1250+ E866             >mirror_Ptr      defl    $
1250+ E866             >
1250+ E866 9C 71       >                dw      Dict_Ptr + 2        // xt
1250+ E868             >Heap_Ptr        defl    $ - $E000           // save current HP
1250+ E868             >
1250+ E868             >Current_HP      defl  $ - $E000             // used to set HP once!
1250+ E868             >
1250+ E868             >//              ______________________________________________________________________
1250+ E868             >//              Dictionary part
1250+ E868             >
1250+ E868             >                org     Dict_Ptr
1250+ 719A             >
1250+ 719A 66 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1250+ 719C             >
1250+ 719C             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1250+ 719C CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1250+ 719F             >
1250+ 719F             >
1250+ 719F             >                endif           ; ok        // for other definitions it "points" the correct handler
1250+ 719F             >                // Use of "; ok" to suppress "warning[fwdref]"
1250+ 719F             >
1250+ 719F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1251+ 719F 2A 69 BE 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1251+ 71A3 B0 69
1252+ 71A5 2A 69 A3 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1252+ 71A9 2D 00 02 6C
1253+ 71AD                                                              // if
1254+ 71AD F5 63                        dw      ZBRANCH
1255+ 71AF 12 00                        dw      CSgn_Else_0 - $
1256+ 71B1 0F 69                        dw          DROP                //      drop
1257+ 71B3 BE 68                        dw          ONE_PLUS            //      1+
1258+ 71B5 99 6A 69 6B                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1258+ 71B9 83 69
1259+ 71BB 99 6A                        dw          ONE                 //      1
1260+ 71BD                                                              // else
1261+ 71BD E8 63                        dw      BRANCH
1262+ 71BF 16 00                        dw      CSgn_Endif_0 - $
1263+ 71C1              CSgn_Else_0:
1264+ 71C1 A3 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1264+ 71C5 02 6C
1265+ 71C7                                                              //      if
1266+ 71C7 F5 63                        dw          ZBRANCH
1267+ 71C9 0A 00                        dw          CSgn_Endif_1 - $
1268+ 71CB BE 68                        dw              ONE_PLUS        //          1+
1269+ 71CD 99 6A 69 6B                  dw              ONE, DPL        //          1 dpl
1270+ 71D1 83 69                        dw              PLUSSTORE       //          +!
1271+ 71D3              CSgn_Endif_1                                    //      endif
1272+ 71D3 92 6A                        dw          ZERO                //      0
1273+ 71D5              CSgn_Endif_0:                                   // endif
1274+ 71D5 53 68                        dw      EXIT
1275+ 71D7
1276+ 71D7              //  ______________________________________________________________________
1277+ 71D7              //
1278+ 71D7              // (number)     d a -- d1 a1
1279+ 71D7              // using the current BASE parse characters stored in address a
1280+ 71D7              // accumulating a double precision integer d
1281+ 71D7              // the process stops at the first not-convertible character
1282+ 71D7              // A double-number is kept in CPU registers as HLDE.
1283+ 71D7              // On the stack a double number is treated as two single numbers
1284+ 71D7              // where HL is on the top of the stack and DE is the second from top,
1285+ 71D7              // so in the stack memory it appears as LHED.
1286+ 71D7              // Instead, in 2VARIABLE a double number is stored as EDLH.
1287+ 71D7                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1287+ 71D7             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1287+ 71D7             >
1287+ 71D7             >Dict_Ptr        defl    $
1287+ 71D7             >
1287+ 71D7             >//              ______________________________________________________________________
1287+ 71D7             >//              Heap part
1287+ 71D7             >
1287+ 71D7             >
1287+ 71D7             >                org     (Heap_Ptr & $1FFF) + $E000
1287+ E868             >
1287+ E868             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ E868             >Latest_Definition defl  Heap_Ptr
1287+ E868             >
1287+ E868             >                // dummy db directives used to calculate length of namec
1287+ E868 28 4E 55 4D >                db      "(NUMBER)"
1287+ E86C 42 45 52 29 >
1287+ E870             >len_NFA         defl    $ - temp_NFA
1287+ E870             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ E868             >
1287+ E868 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ E869 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1287+ E86D 42 45 52 29 >
1287+ E871             >                org     $-1                 // alter last byte of Name just above to set
1287+ E870 A9          >                db      {b $} | END_BIT     // msb as name end
1287+ E871             >
1287+ E871 5E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1287+ E873             >Prev_Ptr        defl    Heap_Ptr
1287+ E873             >
1287+ E873             >mirror_Ptr      defl    $
1287+ E873             >
1287+ E873 D9 71       >                dw      Dict_Ptr + 2        // xt
1287+ E875             >Heap_Ptr        defl    $ - $E000           // save current HP
1287+ E875             >
1287+ E875             >Current_HP      defl  $ - $E000             // used to set HP once!
1287+ E875             >
1287+ E875             >//              ______________________________________________________________________
1287+ E875             >//              Dictionary part
1287+ E875             >
1287+ E875             >                org     Dict_Ptr
1287+ 71D7             >
1287+ 71D7 73 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1287+ 71D9             >
1287+ 71D9             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 71D9 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1287+ 71DC             >
1287+ 71DC             >
1287+ 71DC             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 71DC             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 71DC             >
1287+ 71DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 71DC                                                              // begin
1289+ 71DC              CNumber_Begin:
1290+ 71DC BE 68                        dw          ONE_PLUS            //      1+
1291+ 71DE 2A 69 5D 68                  dw          DUP, TO_R           //      dup >r
1292+ 71E2 B0 69                        dw          CFETCH              //      @
1293+ 71E4 63 6B 9B 69                  dw          BASE, FETCH         //      base @
1294+ 71E8 4D 64                        dw          DIGIT               //      digit
1295+ 71EA                                                              // while
1296+ 71EA F5 63                        dw      ZBRANCH
1297+ 71EC 2C 00                        dw      CNumber_While_end - $
1298+ 71EE 23 69                        dw          SWAP                //      swap
1299+ 71F0 63 6B 9B 69                  dw          BASE, FETCH         //      base @
1300+ 71F4 B8 67                        dw          UM_MUL              //      um*
1301+ 71F6 0F 69 31 69                  dw          DROP, ROT           //      drop rot
1302+ 71FA 63 6B 9B 69                  dw          BASE, FETCH         //      base @
1303+ 71FE B8 67                        dw          UM_MUL              //      um*
1304+ 7200 AF 68                        dw          DPLUS               //      d+
1305+ 7202 69 6B 9B 69                  dw          DPL, FETCH          //      dpl @
1306+ 7206 BE 68                        dw          ONE_PLUS            //      1+
1307+ 7208                                                              //      if
1308+ 7208 F5 63                        dw          ZBRANCH
1309+ 720A 08 00                        dw          CNumber_Endif - $
1310+ 720C 99 6A 69 6B                  dw              ONE, DPL        //          1 dpl
1311+ 7210 83 69                        dw              PLUSSTORE       //          +!
1312+ 7212              CNumber_Endif:                                  //      endif
1313+ 7212 68 68                        dw             R_TO             //      r>  ( balance rp )
1314+ 7214 E8 63                        dw      BRANCH
1315+ 7216 C6 FF                        dw      CNumber_Begin - $
1316+ 7218              CNumber_While_end:                              // repeat
1317+ 7218 68 68                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1318+ 721A 53 68                        dw      EXIT                    // ;
1319+ 721C
1320+ 721C              //  ______________________________________________________________________
1321+ 721C              //
1322+ 721C              // (prefix)
1323+ 721C                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1323+ 721C             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1323+ 721C             >
1323+ 721C             >Dict_Ptr        defl    $
1323+ 721C             >
1323+ 721C             >//              ______________________________________________________________________
1323+ 721C             >//              Heap part
1323+ 721C             >
1323+ 721C             >
1323+ 721C             >                org     (Heap_Ptr & $1FFF) + $E000
1323+ E875             >
1323+ E875             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1323+ E875             >Latest_Definition defl  Heap_Ptr
1323+ E875             >
1323+ E875             >                // dummy db directives used to calculate length of namec
1323+ E875 28 50 52 45 >                db      "(PREFIX)"
1323+ E879 46 49 58 29 >
1323+ E87D             >len_NFA         defl    $ - temp_NFA
1323+ E87D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1323+ E875             >
1323+ E875 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1323+ E876 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1323+ E87A 46 49 58 29 >
1323+ E87E             >                org     $-1                 // alter last byte of Name just above to set
1323+ E87D A9          >                db      {b $} | END_BIT     // msb as name end
1323+ E87E             >
1323+ E87E 68 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1323+ E880             >Prev_Ptr        defl    Heap_Ptr
1323+ E880             >
1323+ E880             >mirror_Ptr      defl    $
1323+ E880             >
1323+ E880 1E 72       >                dw      Dict_Ptr + 2        // xt
1323+ E882             >Heap_Ptr        defl    $ - $E000           // save current HP
1323+ E882             >
1323+ E882             >Current_HP      defl  $ - $E000             // used to set HP once!
1323+ E882             >
1323+ E882             >//              ______________________________________________________________________
1323+ E882             >//              Dictionary part
1323+ E882             >
1323+ E882             >                org     Dict_Ptr
1323+ 721C             >
1323+ 721C 80 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1323+ 721E             >
1323+ 721E             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1323+ 721E CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1323+ 7221             >
1323+ 7221             >
1323+ 7221             >                endif           ; ok        // for other definitions it "points" the correct handler
1323+ 7221             >                // Use of "; ok" to suppress "warning[fwdref]"
1323+ 7221             >
1323+ 7221             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1324+ 7221 2A 69 BE 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1324+ 7225 B0 69
1325+ 7227 2A 69 5D 68                  dw      DUP, TO_R               // dup >r
1326+ 722B A3 63 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1326+ 722F 02 6C
1327+ 7231                                                              // if
1328+ 7231 F5 63                        dw      ZBRANCH
1329+ 7233 0C 00                        dw      CPrefix_Endif_0 - $
1330+ 7235 BE 68                        dw          ONE_PLUS            //      1+
1331+ 7237 A3 63 10 00                  dw          LIT, 16
1332+ 723B 63 6B A5 69                  dw          BASE, STORE         //      16 base !
1333+ 723F              CPrefix_Endif_0:                                // endif
1334+ 723F 68 68                        dw      R_TO                    // r>
1335+ 7241 A3 63 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1335+ 7245 02 6C
1336+ 7247                                                              // if
1337+ 7247 F5 63                        dw      ZBRANCH
1338+ 7249 0A 00                        dw      CPrefix_Endif_1 - $
1339+ 724B BE 68                        dw          ONE_PLUS            //      1+
1340+ 724D A0 6A                        dw          TWO
1341+ 724F 63 6B A5 69                  dw          BASE, STORE         //      2 base !
1342+ 7253              CPrefix_Endif_1:                                // endif
1343+ 7253 53 68                        dw      EXIT
1344+ 7255
1345+ 7255              //  ______________________________________________________________________
1346+ 7255
1347+ 7255                              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1347+ 7255             >
1347+ 7255             >Dict_Ptr        defl    $
1347+ 7255             >
1347+ 7255             >//              ______________________________________________________________________
1347+ 7255             >//              Heap part
1347+ 7255             >
1347+ 7255             >
1347+ 7255             >                org     (Heap_Ptr & $1FFF) + $E000
1347+ E882             >
1347+ E882             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1347+ E882             >Latest_Definition defl  Heap_Ptr
1347+ E882             >
1347+ E882             >                // dummy db directives used to calculate length of namec
1347+ E882 50 44 4F 4D >                db      "PDOM"
1347+ E886             >len_NFA         defl    $ - temp_NFA
1347+ E886             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1347+ E882             >
1347+ E882 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1347+ E883 50 44 4F 4D >                db      "PDOM"               // name string in 7-bit ascii, but
1347+ E887             >                org     $-1                 // alter last byte of Name just above to set
1347+ E886 CD          >                db      {b $} | END_BIT     // msb as name end
1347+ E887             >
1347+ E887 75 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1347+ E889             >Prev_Ptr        defl    Heap_Ptr
1347+ E889             >
1347+ E889             >mirror_Ptr      defl    $
1347+ E889             >
1347+ E889 57 72       >                dw      Dict_Ptr + 2        // xt
1347+ E88B             >Heap_Ptr        defl    $ - $E000           // save current HP
1347+ E88B             >
1347+ E88B             >Current_HP      defl  $ - $E000             // used to set HP once!
1347+ E88B             >
1347+ E88B             >//              ______________________________________________________________________
1347+ E88B             >//              Dictionary part
1347+ E88B             >
1347+ E88B             >                org     Dict_Ptr
1347+ 7255             >
1347+ 7255 89 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1347+ 7257             >
1347+ 7257             >PDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1347+ 7257 CD 1C 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1347+ 725A             >
1347+ 725A             >
1347+ 725A             >                endif           ; ok        // for other definitions it "points" the correct handler
1347+ 725A             >                // Use of "; ok" to suppress "warning[fwdref]"
1347+ 725A             >
1347+ 725A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1348+ 725A 2C 2F 2D 3A                  db ',/-:'
1349+ 725E
1350+ 725E                              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1350+ 725E             >
1350+ 725E             >Dict_Ptr        defl    $
1350+ 725E             >
1350+ 725E             >//              ______________________________________________________________________
1350+ 725E             >//              Heap part
1350+ 725E             >
1350+ 725E             >
1350+ 725E             >                org     (Heap_Ptr & $1FFF) + $E000
1350+ E88B             >
1350+ E88B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1350+ E88B             >Latest_Definition defl  Heap_Ptr
1350+ E88B             >
1350+ E88B             >                // dummy db directives used to calculate length of namec
1350+ E88B 50 43 44 4D >                db      "PCDM"
1350+ E88F             >len_NFA         defl    $ - temp_NFA
1350+ E88F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1350+ E88B             >
1350+ E88B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1350+ E88C 50 43 44 4D >                db      "PCDM"               // name string in 7-bit ascii, but
1350+ E890             >                org     $-1                 // alter last byte of Name just above to set
1350+ E88F CD          >                db      {b $} | END_BIT     // msb as name end
1350+ E890             >
1350+ E890 82 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1350+ E892             >Prev_Ptr        defl    Heap_Ptr
1350+ E892             >
1350+ E892             >mirror_Ptr      defl    $
1350+ E892             >
1350+ E892 60 72       >                dw      Dict_Ptr + 2        // xt
1350+ E894             >Heap_Ptr        defl    $ - $E000           // save current HP
1350+ E894             >
1350+ E894             >Current_HP      defl  $ - $E000             // used to set HP once!
1350+ E894             >
1350+ E894             >//              ______________________________________________________________________
1350+ E894             >//              Dictionary part
1350+ E894             >
1350+ E894             >                org     Dict_Ptr
1350+ 725E             >
1350+ 725E 92 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1350+ 7260             >
1350+ 7260             >PCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1350+ 7260 CD 1C 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
1350+ 7263             >
1350+ 7263             >
1350+ 7263             >                endif           ; ok        // for other definitions it "points" the correct handler
1350+ 7263             >                // Use of "; ok" to suppress "warning[fwdref]"
1350+ 7263             >
1350+ 7263             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1351+ 7263 2E 2E 2E 2E                  db '....'
1352+ 7267
1353+ 7267              //  ______________________________________________________________________
1354+ 7267              //
1355+ 7267              // number       a -- d
1356+ 7267                              Colon_Def NUMBER,  "NUMBER", is_normal
1356+ 7267             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1356+ 7267             >
1356+ 7267             >Dict_Ptr        defl    $
1356+ 7267             >
1356+ 7267             >//              ______________________________________________________________________
1356+ 7267             >//              Heap part
1356+ 7267             >
1356+ 7267             >
1356+ 7267             >                org     (Heap_Ptr & $1FFF) + $E000
1356+ E894             >
1356+ E894             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1356+ E894             >Latest_Definition defl  Heap_Ptr
1356+ E894             >
1356+ E894             >                // dummy db directives used to calculate length of namec
1356+ E894 4E 55 4D 42 >                db      "NUMBER"
1356+ E898 45 52       >
1356+ E89A             >len_NFA         defl    $ - temp_NFA
1356+ E89A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1356+ E894             >
1356+ E894 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1356+ E895 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1356+ E899 45 52       >
1356+ E89B             >                org     $-1                 // alter last byte of Name just above to set
1356+ E89A D2          >                db      {b $} | END_BIT     // msb as name end
1356+ E89B             >
1356+ E89B 8B 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1356+ E89D             >Prev_Ptr        defl    Heap_Ptr
1356+ E89D             >
1356+ E89D             >mirror_Ptr      defl    $
1356+ E89D             >
1356+ E89D 69 72       >                dw      Dict_Ptr + 2        // xt
1356+ E89F             >Heap_Ptr        defl    $ - $E000           // save current HP
1356+ E89F             >
1356+ E89F             >Current_HP      defl  $ - $E000             // used to set HP once!
1356+ E89F             >
1356+ E89F             >//              ______________________________________________________________________
1356+ E89F             >//              Dictionary part
1356+ E89F             >
1356+ E89F             >                org     Dict_Ptr
1356+ 7267             >
1356+ 7267 9D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1356+ 7269             >
1356+ 7269             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1356+ 7269 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1356+ 726C             >
1356+ 726C             >
1356+ 726C             >                endif           ; ok        // for other definitions it "points" the correct handler
1356+ 726C             >                // Use of "; ok" to suppress "warning[fwdref]"
1356+ 726C             >
1356+ 726C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1357+ 726C 92 6A 92 6A                  dw      ZERO, ZERO              // 0 0
1358+ 7270 31 69                        dw      ROT                     // rot
1359+ 7272 9C 71 5D 68                  dw      CSGN, TO_R              // (sgn) >r
1360+ 7276 63 6B 9B 69                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1360+ 727A 5D 68
1361+ 727C 1E 72                        dw      CPREFIX                 // (prefix)   // ***
1362+ 727E AE 6A 69 6B                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1362+ 7282 A5 69
1363+ 7284 D9 71                        dw      CNUMBER                 // (number)
1364+ 7286              Number_Begin:                                   // begin
1365+ 7286 2A 69 B0 69                  dw        DUP, CFETCH             // dup c@
1366+ 728A 5D 68                        dw        TO_R                    // >r
1367+ 728C 60 72 57 72                  dw        PCDM, PDOM, LIT, 4      // pcdm pdom 4
1367+ 7290 A3 63 04 00
1368+ 7294 68 68                        dw        R_TO                    // r>
1369+ 7296 5B 65                        dw        C_MAP                   // (map)
1370+ 7298 92 6A 23 69                  dw        ZERO, SWAP              // 0 swap
1371+ 729C A3 63 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1371+ 72A0 02 6C
1372+ 72A2
1373+ 72A2 F5 63                        dw        ZBRANCH                 // if
1374+ 72A4 0A 00                        dw        Number_Endif_1 - $
1375+ 72A6 92 6A 69 6B                  dw          ZERO, DPL, STORE        //      0 dpl !
1375+ 72AA A5 69
1376+ 72AC BE 68                        dw          ONE_PLUS                //      1+
1377+ 72AE              Number_Endif_1:                                   // endif
1378+ 72AE
1379+ 72AE F5 63                        dw      ZBRANCH                // while
1380+ 72B0 08 00                        dw      Number_While_end - $
1381+ 72B2 D9 71                        dw        CNUMBER                 // (number)
1382+ 72B4 E8 63                        dw      BRANCH
1383+ 72B6 D0 FF                        dw      Number_Begin - $
1384+ 72B8              Number_While_end:                               // repeat
1385+ 72B8
1386+ 72B8 B0 69 B5 6A                  dw      CFETCH, BL              // c@ bl
1387+ 72BC F6 6B 92 6A                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1387+ 72C0 F3 6D
1388+ 72C2 68 68 63 6B                  dw      R_TO, BASE, STORE       // r> base !  // ***
1388+ 72C6 A5 69
1389+ 72C8 68 68                        dw      R_TO                    // r>
1390+ 72CA                                                              // if
1391+ 72CA F5 63                        dw      ZBRANCH
1392+ 72CC 04 00                        dw      Number_Endif_2 - $
1393+ 72CE F3 68                        dw          DMINUS              //      dminus
1394+ 72D0              Number_Endif_2:                                 // endif
1395+ 72D0 53 68                        dw      EXIT                    // ;
1396+ 72D2
1397+ 72D2              //  ______________________________________________________________________
1398+ 72D2              //
1399+ 72D2              // twofind      a -- d
1400+ 72D2                              Colon_Def TWOFIND,  "2FIND", is_normal
1400+ 72D2             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1400+ 72D2             >
1400+ 72D2             >Dict_Ptr        defl    $
1400+ 72D2             >
1400+ 72D2             >//              ______________________________________________________________________
1400+ 72D2             >//              Heap part
1400+ 72D2             >
1400+ 72D2             >
1400+ 72D2             >                org     (Heap_Ptr & $1FFF) + $E000
1400+ E89F             >
1400+ E89F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ E89F             >Latest_Definition defl  Heap_Ptr
1400+ E89F             >
1400+ E89F             >                // dummy db directives used to calculate length of namec
1400+ E89F 32 46 49 4E >                db      "2FIND"
1400+ E8A3 44          >
1400+ E8A4             >len_NFA         defl    $ - temp_NFA
1400+ E8A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ E89F             >
1400+ E89F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ E8A0 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1400+ E8A4 44          >
1400+ E8A5             >                org     $-1                 // alter last byte of Name just above to set
1400+ E8A4 C4          >                db      {b $} | END_BIT     // msb as name end
1400+ E8A5             >
1400+ E8A5 94 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1400+ E8A7             >Prev_Ptr        defl    Heap_Ptr
1400+ E8A7             >
1400+ E8A7             >mirror_Ptr      defl    $
1400+ E8A7             >
1400+ E8A7 D4 72       >                dw      Dict_Ptr + 2        // xt
1400+ E8A9             >Heap_Ptr        defl    $ - $E000           // save current HP
1400+ E8A9             >
1400+ E8A9             >Current_HP      defl  $ - $E000             // used to set HP once!
1400+ E8A9             >
1400+ E8A9             >//              ______________________________________________________________________
1400+ E8A9             >//              Dictionary part
1400+ E8A9             >
1400+ E8A9             >                org     Dict_Ptr
1400+ 72D2             >
1400+ 72D2 A7 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1400+ 72D4             >
1400+ 72D4             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 72D4 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1400+ 72D7             >
1400+ 72D7             >
1400+ 72D7             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 72D7             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 72D7             >
1400+ 72D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 72D7 5D 68 73 68                  dw      TO_R, R_OP              // >r r@
1402+ 72DB 51 6B 9B 69                  dw      CONTEXT, FETCH, FETCH   // context @ @
1402+ 72DF 9B 69
1403+ 72E1 BB 64                        dw      C_FIND                  // (find)
1404+ 72E3 61 6C                        dw      QDUP                    // ?dup
1405+ 72E5 78 68                        dw      ZEQUAL                  // 0=
1406+ 72E7                                                              // if
1407+ 72E7 F5 63                        dw      ZBRANCH
1408+ 72E9 24 00                        dw      LFind_Endif - $
1409+ 72EB 73 68                        dw          R_OP                //      r@
1410+ 72ED                              // dw          LATEST               //      latest
1411+ 72ED 57 6B 9B 69                  dw          CURRENT, FETCH, FETCH   // context @ @
1411+ 72F1 9B 69
1412+ 72F3 BB 64                        dw          C_FIND              //      (find)
1413+ 72F5
1414+ 72F5 61 6C                            dw      QDUP                    // ?dup
1415+ 72F7 78 68                            dw      ZEQUAL                  // 0=
1416+ 72F9                                                                  // if
1417+ 72F9 F5 63                            dw      ZBRANCH
1418+ 72FB 12 00                            dw      LFind_Endif2 - $
1419+ 72FD 73 68                            dw          R_OP                //      r@
1420+ 72FF A3 63 4E 75                      dw          LIT, FORTH, TO_BODY
1420+ 7303 72 6D
1421+ 7305 D4 68 D4 68                      dw          CELL_PLUS, CELL_PLUS
1422+ 7309 9B 69                            dw          FETCH
1423+ 730B BB 64                            dw          C_FIND              //      (find)
1424+ 730D              LFind_Endif2:                                    // endif
1425+ 730D
1426+ 730D
1427+ 730D              LFind_Endif:                                    // endif
1428+ 730D 68 68 0F 69                  dw      R_TO, DROP              // r> drop
1429+ 7311 53 68                        dw      EXIT                    // ;
1430+ 7313
1431+ 7313              //  ______________________________________________________________________
1432+ 7313              //
1433+ 7313              // -find        a -- d
1434+ 7313                              Colon_Def LFIND,  "-FIND", is_normal
1434+ 7313             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1434+ 7313             >
1434+ 7313             >Dict_Ptr        defl    $
1434+ 7313             >
1434+ 7313             >//              ______________________________________________________________________
1434+ 7313             >//              Heap part
1434+ 7313             >
1434+ 7313             >
1434+ 7313             >                org     (Heap_Ptr & $1FFF) + $E000
1434+ E8A9             >
1434+ E8A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1434+ E8A9             >Latest_Definition defl  Heap_Ptr
1434+ E8A9             >
1434+ E8A9             >                // dummy db directives used to calculate length of namec
1434+ E8A9 2D 46 49 4E >                db      "-FIND"
1434+ E8AD 44          >
1434+ E8AE             >len_NFA         defl    $ - temp_NFA
1434+ E8AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1434+ E8A9             >
1434+ E8A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1434+ E8AA 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1434+ E8AE 44          >
1434+ E8AF             >                org     $-1                 // alter last byte of Name just above to set
1434+ E8AE C4          >                db      {b $} | END_BIT     // msb as name end
1434+ E8AF             >
1434+ E8AF 9F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1434+ E8B1             >Prev_Ptr        defl    Heap_Ptr
1434+ E8B1             >
1434+ E8B1             >mirror_Ptr      defl    $
1434+ E8B1             >
1434+ E8B1 15 73       >                dw      Dict_Ptr + 2        // xt
1434+ E8B3             >Heap_Ptr        defl    $ - $E000           // save current HP
1434+ E8B3             >
1434+ E8B3             >Current_HP      defl  $ - $E000             // used to set HP once!
1434+ E8B3             >
1434+ E8B3             >//              ______________________________________________________________________
1434+ E8B3             >//              Dictionary part
1434+ E8B3             >
1434+ E8B3             >                org     Dict_Ptr
1434+ 7313             >
1434+ 7313 B1 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1434+ 7315             >
1434+ 7315             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1434+ 7315 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1434+ 7318             >
1434+ 7318             >
1434+ 7318             >                endif           ; ok        // for other definitions it "points" the correct handler
1434+ 7318             >                // Use of "; ok" to suppress "warning[fwdref]"
1434+ 7318             >
1434+ 7318             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1435+ 7318 B5 6A D5 70                  dw      BL, WORD                // bl word
1436+ 731C D4 72                        dw      TWOFIND                 // 2find
1437+ 731E 53 68                        dw      EXIT                    // ;
1438+ 7320
1439+ 7320              //  ______________________________________________________________________
1440+ 7320              //
1441+ 7320              // (abort)      --
1442+ 7320                              Colon_Def CABORT,  "(ABORT)", is_normal
1442+ 7320             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1442+ 7320             >
1442+ 7320             >Dict_Ptr        defl    $
1442+ 7320             >
1442+ 7320             >//              ______________________________________________________________________
1442+ 7320             >//              Heap part
1442+ 7320             >
1442+ 7320             >
1442+ 7320             >                org     (Heap_Ptr & $1FFF) + $E000
1442+ E8B3             >
1442+ E8B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1442+ E8B3             >Latest_Definition defl  Heap_Ptr
1442+ E8B3             >
1442+ E8B3             >                // dummy db directives used to calculate length of namec
1442+ E8B3 28 41 42 4F >                db      "(ABORT)"
1442+ E8B7 52 54 29    >
1442+ E8BA             >len_NFA         defl    $ - temp_NFA
1442+ E8BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1442+ E8B3             >
1442+ E8B3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1442+ E8B4 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1442+ E8B8 52 54 29    >
1442+ E8BB             >                org     $-1                 // alter last byte of Name just above to set
1442+ E8BA A9          >                db      {b $} | END_BIT     // msb as name end
1442+ E8BB             >
1442+ E8BB A9 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1442+ E8BD             >Prev_Ptr        defl    Heap_Ptr
1442+ E8BD             >
1442+ E8BD             >mirror_Ptr      defl    $
1442+ E8BD             >
1442+ E8BD 22 73       >                dw      Dict_Ptr + 2        // xt
1442+ E8BF             >Heap_Ptr        defl    $ - $E000           // save current HP
1442+ E8BF             >
1442+ E8BF             >Current_HP      defl  $ - $E000             // used to set HP once!
1442+ E8BF             >
1442+ E8BF             >//              ______________________________________________________________________
1442+ E8BF             >//              Dictionary part
1442+ E8BF             >
1442+ E8BF             >                org     Dict_Ptr
1442+ 7320             >
1442+ 7320 BD 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1442+ 7322             >
1442+ 7322             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1442+ 7322 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1442+ 7325             >
1442+ 7325             >
1442+ 7325             >                endif           ; ok        // for other definitions it "points" the correct handler
1442+ 7325             >                // Use of "; ok" to suppress "warning[fwdref]"
1442+ 7325             >
1442+ 7325             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1443+ 7325 B5 75                        dw      ABORT                   // abort
1444+ 7327 53 68                        dw      EXIT                    // ;
1445+ 7329
1446+ 7329              //  ______________________________________________________________________
1447+ 7329              //
1448+ 7329              // error        n --
1449+ 7329              // raise an error
1450+ 7329              // if WARNING is 0, prints "MSG#n".
1451+ 7329              // if WARNING is 1, prints line n of screen 4.
1452+ 7329              // if WARNING is -1 does (ABORT) that normally does ABORT
1453+ 7329              // value can be negative or beyond block 4.
1454+ 7329                              Colon_Def ERROR,  "ERROR", is_normal
1454+ 7329             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1454+ 7329             >
1454+ 7329             >Dict_Ptr        defl    $
1454+ 7329             >
1454+ 7329             >//              ______________________________________________________________________
1454+ 7329             >//              Heap part
1454+ 7329             >
1454+ 7329             >
1454+ 7329             >                org     (Heap_Ptr & $1FFF) + $E000
1454+ E8BF             >
1454+ E8BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1454+ E8BF             >Latest_Definition defl  Heap_Ptr
1454+ E8BF             >
1454+ E8BF             >                // dummy db directives used to calculate length of namec
1454+ E8BF 45 52 52 4F >                db      "ERROR"
1454+ E8C3 52          >
1454+ E8C4             >len_NFA         defl    $ - temp_NFA
1454+ E8C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1454+ E8BF             >
1454+ E8BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1454+ E8C0 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1454+ E8C4 52          >
1454+ E8C5             >                org     $-1                 // alter last byte of Name just above to set
1454+ E8C4 D2          >                db      {b $} | END_BIT     // msb as name end
1454+ E8C5             >
1454+ E8C5 B3 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1454+ E8C7             >Prev_Ptr        defl    Heap_Ptr
1454+ E8C7             >
1454+ E8C7             >mirror_Ptr      defl    $
1454+ E8C7             >
1454+ E8C7 2B 73       >                dw      Dict_Ptr + 2        // xt
1454+ E8C9             >Heap_Ptr        defl    $ - $E000           // save current HP
1454+ E8C9             >
1454+ E8C9             >Current_HP      defl  $ - $E000             // used to set HP once!
1454+ E8C9             >
1454+ E8C9             >//              ______________________________________________________________________
1454+ E8C9             >//              Dictionary part
1454+ E8C9             >
1454+ E8C9             >                org     Dict_Ptr
1454+ 7329             >
1454+ 7329 C7 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1454+ 732B             >
1454+ 732B             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1454+ 732B CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1454+ 732E             >
1454+ 732E             >
1454+ 732E             >                endif           ; ok        // for other definitions it "points" the correct handler
1454+ 732E             >                // Use of "; ok" to suppress "warning[fwdref]"
1454+ 732E             >
1454+ 732E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1455+ 732E 03 6B 9B 69                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1455+ 7332 8A 68
1456+ 7334                                                              // if
1457+ 7334 F5 63                        dw      ZBRANCH
1458+ 7336 04 00                        dw      Error_Endif_1 - $
1459+ 7338 22 73                        dw          CABORT              //      (abort)
1460+ 733A              Error_Endif_1:                                  // endif
1461+ 733A B7 6B 2F 6F                  dw      HERE, COUNT, TYPE       // here count type
1461+ 733E 83 6F
1462+ 7340 20 71                        dw      C_DOT_QUOTE             // .( ? )
1463+ 7342 02 3F 20                     db      2, "? "
1464+ 7345 A4 77                        dw      MESSAGE                 // message  ( forward )
1465+ 7347 EB 6A 9B 69                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1465+ 734B 43 68
1466+ 734D 33 6B 9B 69                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1466+ 7351 61 6C
1467+ 7353                                                              // if
1468+ 7353 F5 63                        dw      ZBRANCH
1469+ 7355 08 00                        dw      Error_Endif_2 - $
1470+ 7357 39 6B 9B 69                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1470+ 735B 23 69
1471+ 735D              Error_Endif_2:                                  // endif
1472+ 735D 79 75                        dw      QUIT                    // quit ( forward )
1473+ 735F 53 68                        dw      EXIT                    // ;
1474+ 7361              //  ______________________________________________________________________
1475+ 7361              //
1476+ 7361              // id.          nfa --
1477+ 7361                              Colon_Def ID_DOT,  "ID.", is_normal
1477+ 7361             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1477+ 7361             >
1477+ 7361             >Dict_Ptr        defl    $
1477+ 7361             >
1477+ 7361             >//              ______________________________________________________________________
1477+ 7361             >//              Heap part
1477+ 7361             >
1477+ 7361             >
1477+ 7361             >                org     (Heap_Ptr & $1FFF) + $E000
1477+ E8C9             >
1477+ E8C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1477+ E8C9             >Latest_Definition defl  Heap_Ptr
1477+ E8C9             >
1477+ E8C9             >                // dummy db directives used to calculate length of namec
1477+ E8C9 49 44 2E    >                db      "ID."
1477+ E8CC             >len_NFA         defl    $ - temp_NFA
1477+ E8CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1477+ E8C9             >
1477+ E8C9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1477+ E8CA 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1477+ E8CD             >                org     $-1                 // alter last byte of Name just above to set
1477+ E8CC AE          >                db      {b $} | END_BIT     // msb as name end
1477+ E8CD             >
1477+ E8CD BF 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1477+ E8CF             >Prev_Ptr        defl    Heap_Ptr
1477+ E8CF             >
1477+ E8CF             >mirror_Ptr      defl    $
1477+ E8CF             >
1477+ E8CF 63 73       >                dw      Dict_Ptr + 2        // xt
1477+ E8D1             >Heap_Ptr        defl    $ - $E000           // save current HP
1477+ E8D1             >
1477+ E8D1             >Current_HP      defl  $ - $E000             // used to set HP once!
1477+ E8D1             >
1477+ E8D1             >//              ______________________________________________________________________
1477+ E8D1             >//              Dictionary part
1477+ E8D1             >
1477+ E8D1             >                org     Dict_Ptr
1477+ 7361             >
1477+ 7361 CF 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1477+ 7363             >
1477+ 7363             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1477+ 7363 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1477+ 7366             >
1477+ 7366             >
1477+ 7366             >                endif           ; ok        // for other definitions it "points" the correct handler
1477+ 7366             >                // Use of "; ok" to suppress "warning[fwdref]"
1477+ 7366             >
1477+ 7366             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1478+ 7366 17 6D                        dw      QTOHEAP
1479+ 7368 2A 69 99 6A                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1479+ 736C 93 6C
1480+ 736E BE 68                        dw      ONE_PLUS                // 1+
1481+ 7370 06 69 F6 6B                  dw      OVER, SUBTRACT          // over -
1482+ 7374 2A 69 5D 68                  dw      DUP, TO_R               // >r
1483+ 7378 C6 70 23 69                  dw      PAD, SWAP               // pad swap
1484+ 737C 94 67                        dw      CMOVE                   // cmove
1485+ 737E C6 70 BE 68                  dw      PAD, ONE_PLUS           // pad 1+
1486+ 7382 68 68 C5 68                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1487+ 7386 83 6F 88 6C                  dw      TYPE, SPACE             // type
1488+ 738A 53 68                        dw      EXIT                    // ;
1489+ 738C
1490+ 738C              //  ______________________________________________________________________
1491+ 738C              //
1492+ 738C              // code         -- cccc
1493+ 738C                              Colon_Def CODE,  "CODE", is_normal
1493+ 738C             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1493+ 738C             >
1493+ 738C             >Dict_Ptr        defl    $
1493+ 738C             >
1493+ 738C             >//              ______________________________________________________________________
1493+ 738C             >//              Heap part
1493+ 738C             >
1493+ 738C             >
1493+ 738C             >                org     (Heap_Ptr & $1FFF) + $E000
1493+ E8D1             >
1493+ E8D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1493+ E8D1             >Latest_Definition defl  Heap_Ptr
1493+ E8D1             >
1493+ E8D1             >                // dummy db directives used to calculate length of namec
1493+ E8D1 43 4F 44 45 >                db      "CODE"
1493+ E8D5             >len_NFA         defl    $ - temp_NFA
1493+ E8D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1493+ E8D1             >
1493+ E8D1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1493+ E8D2 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1493+ E8D6             >                org     $-1                 // alter last byte of Name just above to set
1493+ E8D5 C5          >                db      {b $} | END_BIT     // msb as name end
1493+ E8D6             >
1493+ E8D6 C9 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1493+ E8D8             >Prev_Ptr        defl    Heap_Ptr
1493+ E8D8             >
1493+ E8D8             >mirror_Ptr      defl    $
1493+ E8D8             >
1493+ E8D8 8E 73       >                dw      Dict_Ptr + 2        // xt
1493+ E8DA             >Heap_Ptr        defl    $ - $E000           // save current HP
1493+ E8DA             >
1493+ E8DA             >Current_HP      defl  $ - $E000             // used to set HP once!
1493+ E8DA             >
1493+ E8DA             >//              ______________________________________________________________________
1493+ E8DA             >//              Dictionary part
1493+ E8DA             >
1493+ E8DA             >                org     Dict_Ptr
1493+ 738C             >
1493+ 738C D8 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1493+ 738E             >
1493+ 738E             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1493+ 738E CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1493+ 7391             >
1493+ 7391             >
1493+ 7391             >                endif           ; ok        // for other definitions it "points" the correct handler
1493+ 7391             >                // Use of "; ok" to suppress "warning[fwdref]"
1493+ 7391             >
1493+ 7391             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1494+ 7391 15 73                        dw      LFIND                   // -find
1495+ 7393                                                              // if
1496+ 7393 F5 63                        dw      ZBRANCH
1497+ 7395 10 00                        dw      Code_Endif - $
1498+ 7397 0F 69                        dw          DROP                //      drop
1499+ 7399 7D 6D 63 73                  dw          TO_NAME, ID_DOT     //      >name id.
1500+ 739D A3 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1500+ 73A1 A4 77
1501+ 73A3 88 6C                        dw          SPACE               //      space
1502+ 73A5              Code_Endif:                                     // endif
1503+ 73A5 B7 6B                        dw      HERE                    // here
1504+ 73A7                                                              // ( ---- here begins NFA ---- )
1505+ 73A7 2A 69 B0 69                  dw      DUP, CFETCH             // dup c@
1506+ 73AB FD 6A 9B 69                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1506+ 73AF 3B 6C
1507+ 73B1 BE 68                        dw      ONE_PLUS                // 1+
1508+ 73B3 2A 69 C2 6B                  dw      DUP, ALLOT              // dup allot
1509+ 73B7 D4 68 D4 68                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1510+ 73BB 5D 68                        dw      TO_R                    // >r
1511+ 73BD 2A 69                        dw      DUP                     // dup
1512+ 73BF A3 63                        dw      LIT
1513+ 73C1 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1514+ 73C3 92 69                        dw      TOGGLE                  // toggle
1515+ 73C5 B7 6B C5 68                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1516+ 73C9 A3 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1516+ 73CD 92 69
1517+ 73CF                                                              // ( ---- here is LFA ---- )
1518+ 73CF 57 6B 9B 69                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1518+ 73D3 9B 69
1519+ 73D5 CD 6B                        dw      COMMA
1520+ 73D7 2A 69 D4 68                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1520+ 73DB CD 6B
1521+ 73DD 28 6D                        dw      HP_FETCH                // hp@
1522+ 73DF 57 6B 9B 69                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1522+ 73E3 A5 69
1523+ 73E5 28 6D F9 6C                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1524+ 73E9 73 68 94 67                  dw      R_OP, CMOVE
1525+ 73ED 73 68 E5 68                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1525+ 73F1 C2 6B
1526+ 73F3 68 68 27 6B                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1526+ 73F7 83 69
1527+ 73F9 28 6D D8 68                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1528+ 73FD CD 6B                        dw      COMMA
1529+ 73FF 92 6A 3A 6D                  dw      ZERO, SKIP_HP_PAGE
1530+ 7403                                                              // ( ---- here is LFA ---- )
1531+ 7403 53 68                        dw      EXIT                    // ;
1532+ 7405
1533+ 7405              //  ______________________________________________________________________
1534+ 7405              //
1535+ 7405              // create       -- cccc     ( compile time )
1536+ 7405              //              -- a        ( run time )
1537+ 7405                              Colon_Def CREATE,  "CREATE", is_normal
1537+ 7405             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1537+ 7405             >
1537+ 7405             >Dict_Ptr        defl    $
1537+ 7405             >
1537+ 7405             >//              ______________________________________________________________________
1537+ 7405             >//              Heap part
1537+ 7405             >
1537+ 7405             >
1537+ 7405             >                org     (Heap_Ptr & $1FFF) + $E000
1537+ E8DA             >
1537+ E8DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1537+ E8DA             >Latest_Definition defl  Heap_Ptr
1537+ E8DA             >
1537+ E8DA             >                // dummy db directives used to calculate length of namec
1537+ E8DA 43 52 45 41 >                db      "CREATE"
1537+ E8DE 54 45       >
1537+ E8E0             >len_NFA         defl    $ - temp_NFA
1537+ E8E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1537+ E8DA             >
1537+ E8DA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1537+ E8DB 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1537+ E8DF 54 45       >
1537+ E8E1             >                org     $-1                 // alter last byte of Name just above to set
1537+ E8E0 C5          >                db      {b $} | END_BIT     // msb as name end
1537+ E8E1             >
1537+ E8E1 D1 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1537+ E8E3             >Prev_Ptr        defl    Heap_Ptr
1537+ E8E3             >
1537+ E8E3             >mirror_Ptr      defl    $
1537+ E8E3             >
1537+ E8E3 07 74       >                dw      Dict_Ptr + 2        // xt
1537+ E8E5             >Heap_Ptr        defl    $ - $E000           // save current HP
1537+ E8E5             >
1537+ E8E5             >Current_HP      defl  $ - $E000             // used to set HP once!
1537+ E8E5             >
1537+ E8E5             >//              ______________________________________________________________________
1537+ E8E5             >//              Dictionary part
1537+ E8E5             >
1537+ E8E5             >                org     Dict_Ptr
1537+ 7405             >
1537+ 7405 E3 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1537+ 7407             >
1537+ 7407             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1537+ 7407 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1537+ 740A             >
1537+ 740A             >
1537+ 740A             >                endif           ; ok        // for other definitions it "points" the correct handler
1537+ 740A             >                // Use of "; ok" to suppress "warning[fwdref]"
1537+ 740A             >
1537+ 740A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1538+ 740A 8E 73 9F 6E                  dw      CODE, SMUDGE            // code smudge
1539+ 740E A3 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1539+ 7412 DC 6B
1540+ 7414 A3 63 79 6A                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1540+ 7418 CD 6B
1541+ 741A DB 6E                        dw      C_SEMICOLON_CODE
1542+ 741C                              // this routine is called from the call coded in CFA
1543+ 741C              Create_Ptr:
1544+ 741C
1545+ 741C
1546+ 741C
1547+ 741C                              next
1547+ 741C DD E9       >                jp      (ix)
1548+ 741E
1549+ 741E              //  ______________________________________________________________________
1550+ 741E              //
1551+ 741E              // [compile]    -- cccc     ( compile time )
1552+ 741E                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1552+ 741E             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1552+ 741E             >
1552+ 741E             >Dict_Ptr        defl    $
1552+ 741E             >
1552+ 741E             >//              ______________________________________________________________________
1552+ 741E             >//              Heap part
1552+ 741E             >
1552+ 741E             >
1552+ 741E             >                org     (Heap_Ptr & $1FFF) + $E000
1552+ E8E5             >
1552+ E8E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1552+ E8E5             >Latest_Definition defl  Heap_Ptr
1552+ E8E5             >
1552+ E8E5             >                // dummy db directives used to calculate length of namec
1552+ E8E5 5B 43 4F 4D >                db      "[COMPILE]"
1552+ E8E9 50 49 4C 45 >
1552+ E8ED 5D          >
1552+ E8EE             >len_NFA         defl    $ - temp_NFA
1552+ E8EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1552+ E8E5             >
1552+ E8E5 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1552+ E8E6 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1552+ E8EA 50 49 4C 45 >
1552+ E8EE 5D          >
1552+ E8EF             >                org     $-1                 // alter last byte of Name just above to set
1552+ E8EE DD          >                db      {b $} | END_BIT     // msb as name end
1552+ E8EF             >
1552+ E8EF DA 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1552+ E8F1             >Prev_Ptr        defl    Heap_Ptr
1552+ E8F1             >
1552+ E8F1             >mirror_Ptr      defl    $
1552+ E8F1             >
1552+ E8F1 20 74       >                dw      Dict_Ptr + 2        // xt
1552+ E8F3             >Heap_Ptr        defl    $ - $E000           // save current HP
1552+ E8F3             >
1552+ E8F3             >Current_HP      defl  $ - $E000             // used to set HP once!
1552+ E8F3             >
1552+ E8F3             >//              ______________________________________________________________________
1552+ E8F3             >//              Dictionary part
1552+ E8F3             >
1552+ E8F3             >                org     Dict_Ptr
1552+ 741E             >
1552+ 741E F1 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1552+ 7420             >
1552+ 7420             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1552+ 7420 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1552+ 7423             >
1552+ 7423             >
1552+ 7423             >                endif           ; ok        // for other definitions it "points" the correct handler
1552+ 7423             >                // Use of "; ok" to suppress "warning[fwdref]"
1552+ 7423             >
1552+ 7423             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1553+ 7423 15 73                        dw      LFIND                   // -find      (  cfa  b  f  )
1554+ 7425 78 68                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1555+ 7427 92 6A F3 6D                  dw      ZERO, QERROR            // 0 ?error
1556+ 742B 0F 69                        dw      DROP                    // drop       (  cfa  )
1557+ 742D CD 6B                        dw      COMMA                   // ,
1558+ 742F 53 68                        dw      EXIT                    // ; immediate
1559+ 7431
1560+ 7431              //  ______________________________________________________________________
1561+ 7431              //
1562+ 7431              // literal      n --      ( compile time )
1563+ 7431                              Colon_Def LITERAL,  "LITERAL", is_immediate
1563+ 7431             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1563+ 7431             >
1563+ 7431             >Dict_Ptr        defl    $
1563+ 7431             >
1563+ 7431             >//              ______________________________________________________________________
1563+ 7431             >//              Heap part
1563+ 7431             >
1563+ 7431             >
1563+ 7431             >                org     (Heap_Ptr & $1FFF) + $E000
1563+ E8F3             >
1563+ E8F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ E8F3             >Latest_Definition defl  Heap_Ptr
1563+ E8F3             >
1563+ E8F3             >                // dummy db directives used to calculate length of namec
1563+ E8F3 4C 49 54 45 >                db      "LITERAL"
1563+ E8F7 52 41 4C    >
1563+ E8FA             >len_NFA         defl    $ - temp_NFA
1563+ E8FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ E8F3             >
1563+ E8F3 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ E8F4 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1563+ E8F8 52 41 4C    >
1563+ E8FB             >                org     $-1                 // alter last byte of Name just above to set
1563+ E8FA CC          >                db      {b $} | END_BIT     // msb as name end
1563+ E8FB             >
1563+ E8FB E5 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1563+ E8FD             >Prev_Ptr        defl    Heap_Ptr
1563+ E8FD             >
1563+ E8FD             >mirror_Ptr      defl    $
1563+ E8FD             >
1563+ E8FD 33 74       >                dw      Dict_Ptr + 2        // xt
1563+ E8FF             >Heap_Ptr        defl    $ - $E000           // save current HP
1563+ E8FF             >
1563+ E8FF             >Current_HP      defl  $ - $E000             // used to set HP once!
1563+ E8FF             >
1563+ E8FF             >//              ______________________________________________________________________
1563+ E8FF             >//              Dictionary part
1563+ E8FF             >
1563+ E8FF             >                org     Dict_Ptr
1563+ 7431             >
1563+ 7431 FD 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1563+ 7433             >
1563+ 7433             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 7433 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1563+ 7436             >
1563+ 7436             >
1563+ 7436             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 7436             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 7436             >
1563+ 7436             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 7436 5D 6B 9B 69                  dw      STATE, FETCH            // state @
1565+ 743A                                                              // if
1566+ 743A F5 63                        dw      ZBRANCH
1567+ 743C 08 00                        dw      Literal_Endif - $
1568+ 743E 63 6E A3 63                  dw          COMPILE, LIT        //      compile lit
1569+ 7442 CD 6B                        dw          COMMA               //      ,
1570+ 7444              Literal_Endif:                                  // endif
1571+ 7444 53 68                        dw      EXIT                    // ; immediate
1572+ 7446
1573+ 7446              //  ______________________________________________________________________
1574+ 7446              //
1575+ 7446              // dliteral     n --      ( compile time )
1576+ 7446                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1576+ 7446             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1576+ 7446             >
1576+ 7446             >Dict_Ptr        defl    $
1576+ 7446             >
1576+ 7446             >//              ______________________________________________________________________
1576+ 7446             >//              Heap part
1576+ 7446             >
1576+ 7446             >
1576+ 7446             >                org     (Heap_Ptr & $1FFF) + $E000
1576+ E8FF             >
1576+ E8FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1576+ E8FF             >Latest_Definition defl  Heap_Ptr
1576+ E8FF             >
1576+ E8FF             >                // dummy db directives used to calculate length of namec
1576+ E8FF 44 4C 49 54 >                db      "DLITERAL"
1576+ E903 45 52 41 4C >
1576+ E907             >len_NFA         defl    $ - temp_NFA
1576+ E907             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1576+ E8FF             >
1576+ E8FF C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1576+ E900 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1576+ E904 45 52 41 4C >
1576+ E908             >                org     $-1                 // alter last byte of Name just above to set
1576+ E907 CC          >                db      {b $} | END_BIT     // msb as name end
1576+ E908             >
1576+ E908 F3 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1576+ E90A             >Prev_Ptr        defl    Heap_Ptr
1576+ E90A             >
1576+ E90A             >mirror_Ptr      defl    $
1576+ E90A             >
1576+ E90A 48 74       >                dw      Dict_Ptr + 2        // xt
1576+ E90C             >Heap_Ptr        defl    $ - $E000           // save current HP
1576+ E90C             >
1576+ E90C             >Current_HP      defl  $ - $E000             // used to set HP once!
1576+ E90C             >
1576+ E90C             >//              ______________________________________________________________________
1576+ E90C             >//              Dictionary part
1576+ E90C             >
1576+ E90C             >                org     Dict_Ptr
1576+ 7446             >
1576+ 7446 0A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1576+ 7448             >
1576+ 7448             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1576+ 7448 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1576+ 744B             >
1576+ 744B             >
1576+ 744B             >                endif           ; ok        // for other definitions it "points" the correct handler
1576+ 744B             >                // Use of "; ok" to suppress "warning[fwdref]"
1576+ 744B             >
1576+ 744B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1577+ 744B 5D 6B 9B 69                  dw      STATE, FETCH            // state @
1578+ 744F                                                              // if
1579+ 744F F5 63                        dw      ZBRANCH
1580+ 7451 08 00                        dw      DLiteral_Endif - $
1581+ 7453 23 69                        dw          SWAP                //      swap
1582+ 7455 33 74 33 74                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1583+ 7459              DLiteral_Endif:                                 // endif
1584+ 7459 53 68                        dw      EXIT                    // ; immediate
1585+ 745B
1586+ 745B              //  ______________________________________________________________________
1587+ 745B              //
1588+ 745B              // [char]       n --      ( compile time )
1589+ 745B              // inside colon definition, gets first character from next input word
1590+ 745B              // and compiles it as literal.
1591+ 745B                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1591+ 745B             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1591+ 745B             >
1591+ 745B             >Dict_Ptr        defl    $
1591+ 745B             >
1591+ 745B             >//              ______________________________________________________________________
1591+ 745B             >//              Heap part
1591+ 745B             >
1591+ 745B             >
1591+ 745B             >                org     (Heap_Ptr & $1FFF) + $E000
1591+ E90C             >
1591+ E90C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1591+ E90C             >Latest_Definition defl  Heap_Ptr
1591+ E90C             >
1591+ E90C             >                // dummy db directives used to calculate length of namec
1591+ E90C 5B 43 48 41 >                db      "[CHAR]"
1591+ E910 52 5D       >
1591+ E912             >len_NFA         defl    $ - temp_NFA
1591+ E912             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1591+ E90C             >
1591+ E90C C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1591+ E90D 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1591+ E911 52 5D       >
1591+ E913             >                org     $-1                 // alter last byte of Name just above to set
1591+ E912 DD          >                db      {b $} | END_BIT     // msb as name end
1591+ E913             >
1591+ E913 FF 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1591+ E915             >Prev_Ptr        defl    Heap_Ptr
1591+ E915             >
1591+ E915             >mirror_Ptr      defl    $
1591+ E915             >
1591+ E915 5D 74       >                dw      Dict_Ptr + 2        // xt
1591+ E917             >Heap_Ptr        defl    $ - $E000           // save current HP
1591+ E917             >
1591+ E917             >Current_HP      defl  $ - $E000             // used to set HP once!
1591+ E917             >
1591+ E917             >//              ______________________________________________________________________
1591+ E917             >//              Dictionary part
1591+ E917             >
1591+ E917             >                org     Dict_Ptr
1591+ 745B             >
1591+ 745B 15 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1591+ 745D             >
1591+ 745D             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1591+ 745D CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1591+ 7460             >
1591+ 7460             >
1591+ 7460             >                endif           ; ok        // for other definitions it "points" the correct handler
1591+ 7460             >                // Use of "; ok" to suppress "warning[fwdref]"
1591+ 7460             >
1591+ 7460             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1592+ 7460 37 71 33 74                  dw      CHAR, LITERAL           // char [compile] literal
1593+ 7464 53 68                        dw      EXIT                    // ; immediate
1594+ 7466
1595+ 7466              //  ______________________________________________________________________
1596+ 7466              //
1597+ 7466              // 0x00         n --      ( compile time )
1598+ 7466                              Colon_Def NUL_WORD,  $00, is_immediate
1598+ 7466             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1598+ 7466             >
1598+ 7466             >Dict_Ptr        defl    $
1598+ 7466             >
1598+ 7466             >//              ______________________________________________________________________
1598+ 7466             >//              Heap part
1598+ 7466             >
1598+ 7466             >
1598+ 7466             >                org     (Heap_Ptr & $1FFF) + $E000
1598+ E917             >
1598+ E917             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1598+ E917             >Latest_Definition defl  Heap_Ptr
1598+ E917             >
1598+ E917             >                // dummy db directives used to calculate length of namec
1598+ E917 00          >                db      $00
1598+ E918             >len_NFA         defl    $ - temp_NFA
1598+ E918             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1598+ E917             >
1598+ E917 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1598+ E918 00          >                db      $00               // name string in 7-bit ascii, but
1598+ E919             >                org     $-1                 // alter last byte of Name just above to set
1598+ E918 80          >                db      {b $} | END_BIT     // msb as name end
1598+ E919             >
1598+ E919 0C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1598+ E91B             >Prev_Ptr        defl    Heap_Ptr
1598+ E91B             >
1598+ E91B             >mirror_Ptr      defl    $
1598+ E91B             >
1598+ E91B 68 74       >                dw      Dict_Ptr + 2        // xt
1598+ E91D             >Heap_Ptr        defl    $ - $E000           // save current HP
1598+ E91D             >
1598+ E91D             >Current_HP      defl  $ - $E000             // used to set HP once!
1598+ E91D             >
1598+ E91D             >//              ______________________________________________________________________
1598+ E91D             >//              Dictionary part
1598+ E91D             >
1598+ E91D             >                org     Dict_Ptr
1598+ 7466             >
1598+ 7466 1B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1598+ 7468             >
1598+ 7468             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1598+ 7468 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1598+ 746B             >
1598+ 746B             >
1598+ 746B             >                endif           ; ok        // for other definitions it "points" the correct handler
1598+ 746B             >                // Use of "; ok" to suppress "warning[fwdref]"
1598+ 746B             >
1598+ 746B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1599+ 746B 33 6B 9B 69                  dw      BLK, FETCH, ONE         // blk @ 1
1599+ 746F 99 6A
1600+ 7471 30 6C                        dw      GREATER                 // > if
1601+ 7473                                                              // if
1602+ 7473 F5 63                        dw      ZBRANCH
1603+ 7475 28 00                        dw      Nul_Else_1 - $
1604+ 7477 99 6A 33 6B                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1604+ 747B 83 69
1605+ 747D 92 6A 39 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
1605+ 7481 A5 69
1606+ 7483 33 6B 9B 69                  dw          BLK, FETCH          //      blk @
1607+ 7487 CA 6A                        dw          BSCR                //      b/scr
1608+ 7489 C5 68                        dw          ONE_SUBTRACT        //      1 -
1609+ 748B 13 68                        dw          AND_OP              //      and  ( this is tricky )
1610+ 748D 78 68                        dw          ZEQUAL              //      0=
1611+ 748F                                                              //      if
1612+ 748F F5 63                        dw          ZBRANCH
1613+ 7491 08 00                        dw          Nul_Endif_2 - $
1614+ 7493 1B 6E                        dw              QEXEC           //          ?exec
1615+ 7495 68 68 0F 69                  dw              R_TO, DROP      //          r> drop
1616+ 7499              Nul_Endif_2:                                    //      endif
1617+ 7499 E8 63                        dw      BRANCH
1618+ 749B 06 00                        dw      Nul_Endif_1 - $
1619+ 749D              Nul_Else_1:                                     // else
1620+ 749D 68 68 0F 69                  dw          R_TO, DROP          //      r> drop
1621+ 74A1              Nul_Endif_1:                                    // endif
1622+ 74A1 53 68                        dw      EXIT                    // ;
1623+ 74A3
1624+ 74A3              //  ______________________________________________________________________
1625+ 74A3              //
1626+ 74A3              // ?stack       --
1627+ 74A3              // Raise error #1 if stack is empty and you pop it
1628+ 74A3              // Raise error #7 if stack is full.
1629+ 74A3              // This means SP must always stay between HERE and FFFF
1630+ 74A3              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1631+ 74A3              // for Next 8K MMU paging this is $DOE8
1632+ 74A3                              Colon_Def QSTACK, "?STACK", is_normal
1632+ 74A3             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1632+ 74A3             >
1632+ 74A3             >Dict_Ptr        defl    $
1632+ 74A3             >
1632+ 74A3             >//              ______________________________________________________________________
1632+ 74A3             >//              Heap part
1632+ 74A3             >
1632+ 74A3             >
1632+ 74A3             >                org     (Heap_Ptr & $1FFF) + $E000
1632+ E91D             >
1632+ E91D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1632+ E91D             >Latest_Definition defl  Heap_Ptr
1632+ E91D             >
1632+ E91D             >                // dummy db directives used to calculate length of namec
1632+ E91D 3F 53 54 41 >                db      "?STACK"
1632+ E921 43 4B       >
1632+ E923             >len_NFA         defl    $ - temp_NFA
1632+ E923             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1632+ E91D             >
1632+ E91D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1632+ E91E 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1632+ E922 43 4B       >
1632+ E924             >                org     $-1                 // alter last byte of Name just above to set
1632+ E923 CB          >                db      {b $} | END_BIT     // msb as name end
1632+ E924             >
1632+ E924 17 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1632+ E926             >Prev_Ptr        defl    Heap_Ptr
1632+ E926             >
1632+ E926             >mirror_Ptr      defl    $
1632+ E926             >
1632+ E926 A5 74       >                dw      Dict_Ptr + 2        // xt
1632+ E928             >Heap_Ptr        defl    $ - $E000           // save current HP
1632+ E928             >
1632+ E928             >Current_HP      defl  $ - $E000             // used to set HP once!
1632+ E928             >
1632+ E928             >//              ______________________________________________________________________
1632+ E928             >//              Dictionary part
1632+ E928             >
1632+ E928             >                org     Dict_Ptr
1632+ 74A3             >
1632+ 74A3 26 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1632+ 74A5             >
1632+ 74A5             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1632+ 74A5 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1632+ 74A8             >
1632+ 74A8             >
1632+ 74A8             >                endif           ; ok        // for other definitions it "points" the correct handler
1632+ 74A8             >                // Use of "; ok" to suppress "warning[fwdref]"
1632+ 74A8             >
1632+ 74A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1633+ 74A8 3A 68                        dw      SPFETCH                 // sp@
1634+ 74AA EB 6A 9B 69                  dw      S0, FETCH               // s0 @
1635+ 74AE 23 69 0D 6C                  dw      SWAP, ULESS             // swap u<
1636+ 74B2 99 6A F3 6D                  dw      ONE, QERROR             // 1 ?error
1637+ 74B6 B7 6B                        dw      HERE                    // here
1638+ 74B8 EB 6A 9B 69                  dw      S0, FETCH, LESS         // s0 @ <
1638+ 74BC 1B 6C
1639+ 74BE                                                              // if
1640+ 74BE F5 63                        dw      ZBRANCH
1641+ 74C0 14 00                        dw      QStack_Endif - $
1642+ 74C2 3A 68                        dw          SPFETCH             //      sp@
1643+ 74C4 B7 6B A3 63                  dw          HERE, LIT, 128      //      here 128
1643+ 74C8 80 00
1644+ 74CA A5 68 0D 6C                  dw          PLUS, ULESS         //      plus u<
1645+ 74CE A3 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1645+ 74D2 F3 6D
1646+ 74D4              QStack_Endif:                                   // endif
1647+ 74D4 53 68                        dw      EXIT                    // ;
1648+ 74D6
1649+ 74D6
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
 122  74D6                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
   1+ 74D6              //  ______________________________________________________________________
   2+ 74D6              //
   3+ 74D6              //  L2.asm
   4+ 74D6              //
   5+ 74D6              //  Level-2 3dos
   6+ 74D6              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 74D6              //  ______________________________________________________________________
   8+ 74D6
   9+ 74D6
  10+ 74D6              //  ______________________________________________________________________
  11+ 74D6              //
  12+ 74D6              // interpret    --
  13+ 74D6              // This is the text interpreter.
  14+ 74D6              // It executes or compiles, depending on STATE, the text coming from
  15+ 74D6              // current input stream.
  16+ 74D6              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 74D6              // the word is interpreted as numeric and converted, using current BASE,
  18+ 74D6              // leaving on top of stack a single or double precision number, depending
  19+ 74D6              // on the presence of a decimal point.
  20+ 74D6              // If the number conversion fails, the terminal is notified with ? followed
  21+ 74D6              // by the offending word.
  22+ 74D6                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 74D6             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 74D6             >
  22+ 74D6             >Dict_Ptr        defl    $
  22+ 74D6             >
  22+ 74D6             >//              ______________________________________________________________________
  22+ 74D6             >//              Heap part
  22+ 74D6             >
  22+ 74D6             >
  22+ 74D6             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E928             >
  22+ E928             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E928             >Latest_Definition defl  Heap_Ptr
  22+ E928             >
  22+ E928             >                // dummy db directives used to calculate length of namec
  22+ E928 49 4E 54 45 >                db      "INTERPRET"
  22+ E92C 52 50 52 45 >
  22+ E930 54          >
  22+ E931             >len_NFA         defl    $ - temp_NFA
  22+ E931             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E928             >
  22+ E928 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E929 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E92D 52 50 52 45 >
  22+ E931 54          >
  22+ E932             >                org     $-1                 // alter last byte of Name just above to set
  22+ E931 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E932             >
  22+ E932 1D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E934             >Prev_Ptr        defl    Heap_Ptr
  22+ E934             >
  22+ E934             >mirror_Ptr      defl    $
  22+ E934             >
  22+ E934 D8 74       >                dw      Dict_Ptr + 2        // xt
  22+ E936             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E936             >
  22+ E936             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E936             >
  22+ E936             >//              ______________________________________________________________________
  22+ E936             >//              Dictionary part
  22+ E936             >
  22+ E936             >                org     Dict_Ptr
  22+ 74D6             >
  22+ 74D6 34 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 74D8             >
  22+ 74D8             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 74D8 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 74DB             >
  22+ 74DB             >
  22+ 74DB             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 74DB             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 74DB             >
  22+ 74DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 74DB
  24+ 74DB              Interpret_Begin:                                        // begin
  25+ 74DB 15 73                        dw          LFIND                       //      -find
  26+ 74DD                                                                      //      if
  27+ 74DD F5 63                        dw          ZBRANCH
  28+ 74DF 1A 00                        dw          Interpret_Else_1 - $
  29+ 74E1 5D 6B 9B 69                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 74E5 1B 6C
  30+ 74E7                                                                      //          if
  31+ 74E7 F5 63                        dw              ZBRANCH
  32+ 74E9 08 00                        dw              Interpret_Else_2 - $
  33+ 74EB 78 6E                        dw                  COMPILE_XT          //              compile,
  34+ 74ED                                                                      //          else
  35+ 74ED E8 63                        dw              BRANCH
  36+ 74EF 06 00                        dw              Interpret_Endif_2 - $
  37+ 74F1              Interpret_Else_2:
  38+ 74F1 AE 63 59 6A                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 74F5              Interpret_Endif_2:                                      //          endif
  40+ 74F5                                                                      //      else
  41+ 74F5 E8 63                        dw          BRANCH
  42+ 74F7 1A 00                        dw          Interpret_Endif_1 - $
  43+ 74F9              Interpret_Else_1:
  44+ 74F9 B7 6B 69 72                  dw              HERE, NUMBER            //          here number
  45+ 74FD 69 6B 9B 69                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 7501 BE 68
  46+ 7503                                                                      //          if
  47+ 7503 F5 63                        dw              ZBRANCH
  48+ 7505 08 00                        dw              Interpret_Else_3 - $
  49+ 7507              //              dw                  NMODE, FETCH        //              nmode @
  50+ 7507              //                                                      //              if
  51+ 7507              //              dw                  ZBRANCH
  52+ 7507              //              dw                  Interpret_Endif_4 - $
  53+ 7507              //              dw                      ONE, ZERO       //                  1 0
  54+ 7507              //              dw                      TWO_DROP        //                  2drop
  55+ 7507              //Interpret_Endif_4:                                      //              endif
  56+ 7507 48 74                        dw                  DLITERAL            //              [compile] dliteral
  57+ 7509                                                                      //          else
  58+ 7509 E8 63                        dw              BRANCH
  59+ 750B 06 00                        dw              Interpret_Endif_3 - $
  60+ 750D              Interpret_Else_3:
  61+ 750D 0F 69                        dw                  DROP                //              drop
  62+ 750F 33 74                        dw                  LITERAL             //              [compile]  literal
  63+ 7511              Interpret_Endif_3:                                      //          endif
  64+ 7511              Interpret_Endif_1:                                      //      endif
  65+ 7511 A5 74                        dw          QSTACK                      //      ?stack
  66+ 7513 AD 66                        dw          QTERMINAL                   //      ?terminal
  67+ 7515                                                                      //      if
  68+ 7515 F5 63                        dw          ZBRANCH
  69+ 7517 04 00                        dw          Interpret_Endif_5 - $
  70+ 7519 79 75                        dw              QUIT                    //          quit
  71+ 751B              Interpret_Endif_5:                                      //      endif
  72+ 751B E8 63                        dw      BRANCH
  73+ 751D BE FF                        dw      Interpret_Begin - $
  74+ 751F 53 68                        dw      EXIT                            // ;
  75+ 7521
  76+ 7521              //  ______________________________________________________________________
  77+ 7521              //
  78+ 7521              // vocabulary   -- cccc     ( compile time )
  79+ 7521              // Defining word used in the form   VOCABULARY cccc
  80+ 7521              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 7521              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 7521              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 7521              // so new definitions can be inserted in that vocabulary.
  84+ 7521                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 7521             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 7521             >
  84+ 7521             >Dict_Ptr        defl    $
  84+ 7521             >
  84+ 7521             >//              ______________________________________________________________________
  84+ 7521             >//              Heap part
  84+ 7521             >
  84+ 7521             >
  84+ 7521             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E936             >
  84+ E936             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E936             >Latest_Definition defl  Heap_Ptr
  84+ E936             >
  84+ E936             >                // dummy db directives used to calculate length of namec
  84+ E936 56 4F 43 41 >                db      "VOCABULARY"
  84+ E93A 42 55 4C 41 >
  84+ E93E 52 59       >
  84+ E940             >len_NFA         defl    $ - temp_NFA
  84+ E940             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E936             >
  84+ E936 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E937 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E93B 42 55 4C 41 >
  84+ E93F 52 59       >
  84+ E941             >                org     $-1                 // alter last byte of Name just above to set
  84+ E940 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E941             >
  84+ E941 28 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E943             >Prev_Ptr        defl    Heap_Ptr
  84+ E943             >
  84+ E943             >mirror_Ptr      defl    $
  84+ E943             >
  84+ E943 23 75       >                dw      Dict_Ptr + 2        // xt
  84+ E945             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E945             >
  84+ E945             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E945             >
  84+ E945             >//              ______________________________________________________________________
  84+ E945             >//              Dictionary part
  84+ E945             >
  84+ E945             >                org     Dict_Ptr
  84+ 7521             >
  84+ 7521 43 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 7523             >
  84+ 7523             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 7523 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7526             >
  84+ 7526             >
  84+ 7526             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7526             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7526             >
  84+ 7526             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7526
  86+ 7526 07 6F                        dw      CBUILDS
  87+ 7528
  88+ 7528                              // dummy word + link part
  89+ 7528 A3 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 752C CD 6B
  90+ 752E 57 6B 9B 69                  dw      CURRENT, FETCH          // current @
  91+ 7532 9B 69                        dw      FETCH                   // @
  92+ 7534                          //  dw      CELL_MINUS              // cell-
  93+ 7534 CD 6B                        dw      COMMA                   // ,
  94+ 7536
  95+ 7536                              // voc-link part
  96+ 7536 B7 6B                        dw      HERE                    // here
  97+ 7538 15 6B 9B 69                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 753C CD 6B                        dw      COMMA                   // ,
  99+ 753E 15 6B A5 69                  dw      VOC_LINK, STORE         // voc-link !
 100+ 7542                              // DOES part
 101+ 7542 12 6F                        dw      DOES_TO                 // does>
 102+ 7544              Vocabulary_Does:
 103+ 7544 D4 68                        dw      CELL_PLUS               // cell+
 104+ 7546 51 6B A5 69                  dw      CONTEXT, STORE          // context !
 105+ 754A 53 68                        dw      EXIT                    // ;
 106+ 754C
 107+ 754C              //  ______________________________________________________________________
 108+ 754C              //
 109+ 754C              // forth        --
 110+ 754C              // Name of the first vocabulary.
 111+ 754C              // It makes FORTH the CONTEXT vocabulary.
 112+ 754C              // Until new user vocabulary are defined, new colon-definitions becomes
 113+ 754C              // part of FORTH. It is immediate, so it will executed during the creation
 114+ 754C              // of a colon definition to be able to select the vocabulary.
 115+ 754C
 116+ 754C                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 116+ 754C             >
 116+ 754C             >Dict_Ptr        defl    $
 116+ 754C             >
 116+ 754C             >//              ______________________________________________________________________
 116+ 754C             >//              Heap part
 116+ 754C             >
 116+ 754C             >
 116+ 754C             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ E945             >
 116+ E945             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ E945             >Latest_Definition defl  Heap_Ptr
 116+ E945             >
 116+ E945             >                // dummy db directives used to calculate length of namec
 116+ E945 46 4F 52 54 >                db      "FORTH"
 116+ E949 48          >
 116+ E94A             >len_NFA         defl    $ - temp_NFA
 116+ E94A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ E945             >
 116+ E945 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ E946 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 116+ E94A 48          >
 116+ E94B             >                org     $-1                 // alter last byte of Name just above to set
 116+ E94A C8          >                db      {b $} | END_BIT     // msb as name end
 116+ E94B             >
 116+ E94B 36 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ E94D             >Prev_Ptr        defl    Heap_Ptr
 116+ E94D             >
 116+ E94D             >mirror_Ptr      defl    $
 116+ E94D             >
 116+ E94D 4E 75       >                dw      Dict_Ptr + 2        // xt
 116+ E94F             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ E94F             >
 116+ E94F             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ E94F             >
 116+ E94F             >//              ______________________________________________________________________
 116+ E94F             >//              Dictionary part
 116+ E94F             >
 116+ E94F             >                org     Dict_Ptr
 116+ 754C             >
 116+ 754C 4D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 754E             >
 116+ 754E             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 754E CD 1F 6F    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 116+ 7551             >
 116+ 7551             >
 116+ 7551             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 7551             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 7551             >
 116+ 7551             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 7551 44 75                        dw      Vocabulary_Does
 118+ 7553
 119+ 7553 81 A0                        db      $81, $A0
 120+ 7555              Forth_Latest_Ptr:
 121+ 7555 45 09                        dw      Latest_Definition
 122+ 7557              Voclink_Ptr:
 123+ 7557 00 00                        dw      0
 124+ 7559
 125+ 7559              // ____
 126+ 7559              // temp_VOC        defl    $                   // save this address
 127+ 7559              //              org     (Heap_Ptr & $1FFF) + $E000
 128+ 7559              //              db      $81, $A0
 129+ 7559              // Forth_Latest_Ptr_HEAP:
 130+ 7559              //                 dw      Latest_Definition
 131+ 7559              // Voclink_Ptr_HEAP:
 132+ 7559              //                 dw      0
 133+ 7559              // Heap_Ptr        defl    $ - $E000           // save current HP
 134+ 7559              //                 org     temp_VOC
 135+ 7559              // ____
 136+ 7559
 137+ 7559              // Any new vocabulary is structured as follow:
 138+ 7559              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 139+ 7559              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 140+ 7559              // PFA+4 always contains the LATEST word of this VOCABULARY.
 141+ 7559              //       at creations it points to the null-word of its parent vocabulary
 142+ 7559              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 143+ 7559              // PFA+6 is the pointer that builds up the vocabulary linked list.
 144+ 7559              //       FORTH has 0 here to signal the end of the list and user's variable
 145+ 7559              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 146+ 7559              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 147+ 7559              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 148+ 7559
 149+ 7559              //  ______________________________________________________________________
 150+ 7559              //
 151+ 7559              // definitions  --
 152+ 7559              // Used in the form  cccc DEFINITIONS
 153+ 7559              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 154+ 7559              // vocabulary cccc.
 155+ 7559                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 155+ 7559             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 155+ 7559             >
 155+ 7559             >Dict_Ptr        defl    $
 155+ 7559             >
 155+ 7559             >//              ______________________________________________________________________
 155+ 7559             >//              Heap part
 155+ 7559             >
 155+ 7559             >
 155+ 7559             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E94F             >
 155+ E94F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E94F             >Latest_Definition defl  Heap_Ptr
 155+ E94F             >
 155+ E94F             >                // dummy db directives used to calculate length of namec
 155+ E94F 44 45 46 49 >                db      "DEFINITIONS"
 155+ E953 4E 49 54 49 >
 155+ E957 4F 4E 53    >
 155+ E95A             >len_NFA         defl    $ - temp_NFA
 155+ E95A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E94F             >
 155+ E94F 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E950 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 155+ E954 4E 49 54 49 >
 155+ E958 4F 4E 53    >
 155+ E95B             >                org     $-1                 // alter last byte of Name just above to set
 155+ E95A D3          >                db      {b $} | END_BIT     // msb as name end
 155+ E95B             >
 155+ E95B 45 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E95D             >Prev_Ptr        defl    Heap_Ptr
 155+ E95D             >
 155+ E95D             >mirror_Ptr      defl    $
 155+ E95D             >
 155+ E95D 5B 75       >                dw      Dict_Ptr + 2        // xt
 155+ E95F             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E95F             >
 155+ E95F             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E95F             >
 155+ E95F             >//              ______________________________________________________________________
 155+ E95F             >//              Dictionary part
 155+ E95F             >
 155+ E95F             >                org     Dict_Ptr
 155+ 7559             >
 155+ 7559 5D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 755B             >
 155+ 755B             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 755B CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 755E             >
 155+ 755E             >
 155+ 755E             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 755E             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 755E             >
 155+ 755E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 755E 51 6B 9B 69                  dw      CONTEXT, FETCH          // context @
 157+ 7562 57 6B A5 69                  dw      CURRENT, STORE          // current !
 158+ 7566 53 68                        dw      EXIT                    // ;
 159+ 7568
 160+ 7568              //  ______________________________________________________________________
 161+ 7568              //
 162+ 7568              // (            -- cccc )
 163+ 7568              // the following text is interpreted as a comment until a closing )
 164+ 7568                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 164+ 7568             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 164+ 7568             >
 164+ 7568             >Dict_Ptr        defl    $
 164+ 7568             >
 164+ 7568             >//              ______________________________________________________________________
 164+ 7568             >//              Heap part
 164+ 7568             >
 164+ 7568             >
 164+ 7568             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E95F             >
 164+ E95F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E95F             >Latest_Definition defl  Heap_Ptr
 164+ E95F             >
 164+ E95F             >                // dummy db directives used to calculate length of namec
 164+ E95F 28          >                db      "("
 164+ E960             >len_NFA         defl    $ - temp_NFA
 164+ E960             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E95F             >
 164+ E95F C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E960 28          >                db      "("               // name string in 7-bit ascii, but
 164+ E961             >                org     $-1                 // alter last byte of Name just above to set
 164+ E960 A8          >                db      {b $} | END_BIT     // msb as name end
 164+ E961             >
 164+ E961 4F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E963             >Prev_Ptr        defl    Heap_Ptr
 164+ E963             >
 164+ E963             >mirror_Ptr      defl    $
 164+ E963             >
 164+ E963 6A 75       >                dw      Dict_Ptr + 2        // xt
 164+ E965             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E965             >
 164+ E965             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E965             >
 164+ E965             >//              ______________________________________________________________________
 164+ E965             >//              Dictionary part
 164+ E965             >
 164+ E965             >                org     Dict_Ptr
 164+ 7568             >
 164+ 7568 63 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 756A             >
 164+ 756A             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 756A CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 164+ 756D             >
 164+ 756D             >
 164+ 756D             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 756D             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 756D             >
 164+ 756D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 756D A3 63 29 00                  dw      LIT, ")"                // [char] )
 166+ 7571 D5 70 0F 69                  dw      WORD, DROP              // word drop
 167+ 7575 53 68                        dw      EXIT                    // ;
 168+ 7577
 169+ 7577              //  ______________________________________________________________________
 170+ 7577              //
 171+ 7577              // quit         --
 172+ 7577              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 173+ 7577                              Colon_Def QUIT, "QUIT", is_normal
 173+ 7577             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 173+ 7577             >
 173+ 7577             >Dict_Ptr        defl    $
 173+ 7577             >
 173+ 7577             >//              ______________________________________________________________________
 173+ 7577             >//              Heap part
 173+ 7577             >
 173+ 7577             >
 173+ 7577             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E965             >
 173+ E965             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E965             >Latest_Definition defl  Heap_Ptr
 173+ E965             >
 173+ E965             >                // dummy db directives used to calculate length of namec
 173+ E965 51 55 49 54 >                db      "QUIT"
 173+ E969             >len_NFA         defl    $ - temp_NFA
 173+ E969             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E965             >
 173+ E965 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E966 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 173+ E96A             >                org     $-1                 // alter last byte of Name just above to set
 173+ E969 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E96A             >
 173+ E96A 5F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E96C             >Prev_Ptr        defl    Heap_Ptr
 173+ E96C             >
 173+ E96C             >mirror_Ptr      defl    $
 173+ E96C             >
 173+ E96C 79 75       >                dw      Dict_Ptr + 2        // xt
 173+ E96E             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E96E             >
 173+ E96E             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E96E             >
 173+ E96E             >//              ______________________________________________________________________
 173+ E96E             >//              Dictionary part
 173+ E96E             >
 173+ E96E             >                org     Dict_Ptr
 173+ 7577             >
 173+ 7577 6C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 7579             >
 173+ 7579             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7579 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 757C             >
 173+ 757C             >
 173+ 757C             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 757C             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 757C             >
 173+ 757C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 757C
 175+ 757C 9F 6B 9B 69                  dw      SOURCE_ID, FETCH        // source-id @
 176+ 7580 FB 66 0F 69                  dw      F_CLOSE, DROP           // f_close drop
 177+ 7584 92 6A 9F 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 177+ 7588 A5 69
 178+ 758A 92 6A 33 6B                  dw      ZERO, BLK, STORE        // 0 blk !
 178+ 758E A5 69
 179+ 7590 83 6E                        dw      SQUARED_OPEN            // [compile] [
 180+ 7592                                                              // begin
 181+ 7592              Quit_Begin:
 182+ 7592 F1 6A 9B 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 182+ 7596 4E 68
 183+ 7598 B6 65                        dw      CR                      //      cr
 184+ 759A 72 70                        dw      QUERY                   //      query
 185+ 759C              Next_Breakpoint_1:
 186+ 759C D8 74                        dw      INTERPRET               //      interpret
 187+ 759E 5D 6B 9B 69                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 187+ 75A2 78 68
 188+ 75A4                                                              //      if
 189+ 75A4 F5 63                        dw      ZBRANCH
 190+ 75A6 07 00                        dw      Quit_Endif - $
 191+ 75A8 20 71                        dw          C_DOT_QUOTE
 192+ 75AA 02 6F 6B                     db          2, "ok"             //          .( ok)
 193+ 75AD              Quit_Endif:                                     //      else
 194+ 75AD                                                              // again
 195+ 75AD E8 63                        dw      BRANCH
 196+ 75AF E3 FF                        dw      Quit_Begin - $
 197+ 75B1 53 68                        dw      EXIT                    // ;
 198+ 75B3
 199+ 75B3              //  ______________________________________________________________________
 200+ 75B3              //
 201+ 75B3              // abort        --
 202+ 75B3                              Colon_Def ABORT, "ABORT", is_normal
 202+ 75B3             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 202+ 75B3             >
 202+ 75B3             >Dict_Ptr        defl    $
 202+ 75B3             >
 202+ 75B3             >//              ______________________________________________________________________
 202+ 75B3             >//              Heap part
 202+ 75B3             >
 202+ 75B3             >
 202+ 75B3             >                org     (Heap_Ptr & $1FFF) + $E000
 202+ E96E             >
 202+ E96E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 202+ E96E             >Latest_Definition defl  Heap_Ptr
 202+ E96E             >
 202+ E96E             >                // dummy db directives used to calculate length of namec
 202+ E96E 41 42 4F 52 >                db      "ABORT"
 202+ E972 54          >
 202+ E973             >len_NFA         defl    $ - temp_NFA
 202+ E973             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 202+ E96E             >
 202+ E96E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 202+ E96F 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 202+ E973 54          >
 202+ E974             >                org     $-1                 // alter last byte of Name just above to set
 202+ E973 D4          >                db      {b $} | END_BIT     // msb as name end
 202+ E974             >
 202+ E974 65 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 202+ E976             >Prev_Ptr        defl    Heap_Ptr
 202+ E976             >
 202+ E976             >mirror_Ptr      defl    $
 202+ E976             >
 202+ E976 B5 75       >                dw      Dict_Ptr + 2        // xt
 202+ E978             >Heap_Ptr        defl    $ - $E000           // save current HP
 202+ E978             >
 202+ E978             >Current_HP      defl  $ - $E000             // used to set HP once!
 202+ E978             >
 202+ E978             >//              ______________________________________________________________________
 202+ E978             >//              Dictionary part
 202+ E978             >
 202+ E978             >                org     Dict_Ptr
 202+ 75B3             >
 202+ 75B3 76 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 202+ 75B5             >
 202+ 75B5             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 202+ 75B5 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 202+ 75B8             >
 202+ 75B8             >
 202+ 75B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 202+ 75B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 202+ 75B8             >
 202+ 75B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 203+ 75B8 EB 6A 9B 69                  dw      S0, FETCH               // s0 @
 204+ 75BC B5 6A                        dw      BL                      // bl
 205+ 75BE 06 69 A5 69                  dw      OVER, STORE             // over !
 206+ 75C2 43 68                        dw      SPSTORE                 // sp!
 207+ 75C4 CC 6E                        dw      DECIMAL                 // decimal
 208+ 75C6 4E 75                        dw      FORTH                   // [compile] forth
 209+ 75C8 5B 75                        dw      DEFINITIONS             // definitions
 210+ 75CA
 211+ 75CA 83 6E                        dw      SQUARED_OPEN            // [compile] [
 212+ 75CC F1 6A 9B 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 212+ 75D0 4E 68
 213+ 75D2
 214+ 75D2              Autoexec_Ptr:
 215+ 75D2 F5 7F                        dw      AUTOEXEC                // autoexec, patched to noop
 216+ 75D4 79 75                        dw      QUIT                    // quit
 217+ 75D6 53 68                        dw      EXIT                    // ;
 218+ 75D8
 219+ 75D8              //  ______________________________________________________________________
 220+ 75D8              //
 221+ 75D8              // warm         --
 222+ 75D8                              Colon_Def WARM, "WARM", is_normal
 222+ 75D8             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 222+ 75D8             >
 222+ 75D8             >Dict_Ptr        defl    $
 222+ 75D8             >
 222+ 75D8             >//              ______________________________________________________________________
 222+ 75D8             >//              Heap part
 222+ 75D8             >
 222+ 75D8             >
 222+ 75D8             >                org     (Heap_Ptr & $1FFF) + $E000
 222+ E978             >
 222+ E978             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ E978             >Latest_Definition defl  Heap_Ptr
 222+ E978             >
 222+ E978             >                // dummy db directives used to calculate length of namec
 222+ E978 57 41 52 4D >                db      "WARM"
 222+ E97C             >len_NFA         defl    $ - temp_NFA
 222+ E97C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ E978             >
 222+ E978 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ E979 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 222+ E97D             >                org     $-1                 // alter last byte of Name just above to set
 222+ E97C CD          >                db      {b $} | END_BIT     // msb as name end
 222+ E97D             >
 222+ E97D 6E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 222+ E97F             >Prev_Ptr        defl    Heap_Ptr
 222+ E97F             >
 222+ E97F             >mirror_Ptr      defl    $
 222+ E97F             >
 222+ E97F DA 75       >                dw      Dict_Ptr + 2        // xt
 222+ E981             >Heap_Ptr        defl    $ - $E000           // save current HP
 222+ E981             >
 222+ E981             >Current_HP      defl  $ - $E000             // used to set HP once!
 222+ E981             >
 222+ E981             >//              ______________________________________________________________________
 222+ E981             >//              Dictionary part
 222+ E981             >
 222+ E981             >                org     Dict_Ptr
 222+ 75D8             >
 222+ 75D8 7F 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 222+ 75DA             >
 222+ 75DA             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 75DA CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 75DD             >
 222+ 75DD             >
 222+ 75DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 75DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 75DD             >
 222+ 75DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 75DD 9E 78                        dw      BLK_INIT                // blk-init
 224+ 75DF D1 7F                        dw      SPLASH                  // splash
 225+ 75E1                          //  dw      LIT, 7, EMIT            // 7 emit
 226+ 75E1 B5 75                        dw      ABORT                   // abort
 227+ 75E3 53 68                        dw      EXIT                    // exit
 228+ 75E5
 229+ 75E5              //  ______________________________________________________________________
 230+ 75E5              //
 231+ 75E5              // cold         --
 232+ 75E5                              Colon_Def COLD, "COLD", is_normal
 232+ 75E5             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 232+ 75E5             >
 232+ 75E5             >Dict_Ptr        defl    $
 232+ 75E5             >
 232+ 75E5             >//              ______________________________________________________________________
 232+ 75E5             >//              Heap part
 232+ 75E5             >
 232+ 75E5             >
 232+ 75E5             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E981             >
 232+ E981             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E981             >Latest_Definition defl  Heap_Ptr
 232+ E981             >
 232+ E981             >                // dummy db directives used to calculate length of namec
 232+ E981 43 4F 4C 44 >                db      "COLD"
 232+ E985             >len_NFA         defl    $ - temp_NFA
 232+ E985             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E981             >
 232+ E981 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E982 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 232+ E986             >                org     $-1                 // alter last byte of Name just above to set
 232+ E985 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E986             >
 232+ E986 78 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E988             >Prev_Ptr        defl    Heap_Ptr
 232+ E988             >
 232+ E988             >mirror_Ptr      defl    $
 232+ E988             >
 232+ E988 E7 75       >                dw      Dict_Ptr + 2        // xt
 232+ E98A             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E98A             >
 232+ E98A             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E98A             >
 232+ E98A             >//              ______________________________________________________________________
 232+ E98A             >//              Dictionary part
 232+ E98A             >
 232+ E98A             >                org     Dict_Ptr
 232+ 75E5             >
 232+ 75E5 88 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 75E7             >
 232+ 75E7             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 75E7 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 232+ 75EA             >
 232+ 75EA             >
 232+ 75EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 75EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 75EA             >
 232+ 75EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 75EA 59 6A 59 6A                  dw      NOOP, NOOP
 234+ 75EE A3 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 235+ 75F2 A3 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 236+ 75F6 9B 69                        dw      FETCH                   // @
 237+ 75F8 A3 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 237+ 75FC A5 68
 238+ 75FE A3 63 16 00                  dw      LIT, 22                 // 22
 239+ 7602 94 67                        dw      CMOVE
 240+ 7604 A3 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 241+ 7608 9B 69                        dw      FETCH                   // @
 242+ 760A A3 63 55 75                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 243+ 760E A5 69                        dw      STORE                   // !
 244+ 7610 92 6A 2D 6B                  dw      ZERO, NMODE, STORE      // 0 nmode !
 244+ 7614 A5 69
 245+ 7616 1B 6B 9B 69                  dw      FIRST, FETCH, DUP       // first @ dup
 245+ 761A 2A 69
 246+ 761C 87 6B A5 69                  dw      USED, STORE             // used !
 247+ 7620 8D 6B A5 69                  dw      PREV, STORE             // prev !
 248+ 7624 A3 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 248+ 7628 99 6B A5 69
 249+ 762C              //              dw      LIT, 8
 250+ 762C              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 251+ 762C 35 79                        dw      EMPTY_BUFFERS
 252+ 762E 92 6A 33 6B                  dw      ZERO, BLK, STORE
 252+ 7632 A5 69
 253+ 7634 92 6A 9F 6B                  dw      ZERO, SOURCE_ID, STORE
 253+ 7638 A5 69
 254+ 763A
 255+ 763A DA 75        Warm_Start:     dw      WARM
 256+ 763C E7 75        Cold_Start:     dw      COLD
 257+ 763E 53 68                        dw      EXIT
 258+ 7640
 259+ 7640              //  ______________________________________________________________________
 260+ 7640              WarmRoutine:
 261+ 7640              ColdRoutine:
 262+ 7640 DD 21 9A 63                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 263+ 7644
 264+ 7644 D9                           exx
 265+ 7645 E5                           push    hl                      // save Basic's return address
 266+ 7646 D9                           exx
 267+ 7647 ED 73 6E 63                  ld      (SP_Basic), sp
 268+ 764B
 269+ 764B                              // pre-set the four main 16-bit registers
 270+ 764B ED 7B 78 63                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 271+ 764F 2A 7A 63                     ld      hl, (R0_origin)         // Return Stack Pointer
 272+ 7652                              // ld      de, (R0_origin)         // Return Stack Pointer
 273+ 7652                              ldrphl
 273+ 7652 22 96 63    >                ld      (RP_Pointer),hl
 274+ 7655 EB                           ex      de, hl
 275+ 7656 01 3A 76                     ld      bc, Warm_Start          // Instruction Pointer
 276+ 7659
 277+ 7659 38 02                        jr      c, Warm_Skip
 278+ 765B 03                           inc     bc
 279+ 765C 03                           inc     bc
 280+ 765D              Warm_Skip:
 281+ 765D                              next
 281+ 765D DD E9       >                jp      (ix)
 282+ 765F
 283+ 765F              //  ______________________________________________________________________
 284+ 765F              //
 285+ 765F              // basic        --
 286+ 765F                              New_Def BASIC, "BASIC", is_code, is_normal
 286+ 765F             >
 286+ 765F             >Dict_Ptr        defl    $
 286+ 765F             >
 286+ 765F             >//              ______________________________________________________________________
 286+ 765F             >//              Heap part
 286+ 765F             >
 286+ 765F             >
 286+ 765F             >                org     (Heap_Ptr & $1FFF) + $E000
 286+ E98A             >
 286+ E98A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 286+ E98A             >Latest_Definition defl  Heap_Ptr
 286+ E98A             >
 286+ E98A             >                // dummy db directives used to calculate length of namec
 286+ E98A 42 41 53 49 >                db      "BASIC"
 286+ E98E 43          >
 286+ E98F             >len_NFA         defl    $ - temp_NFA
 286+ E98F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 286+ E98A             >
 286+ E98A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 286+ E98B 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 286+ E98F 43          >
 286+ E990             >                org     $-1                 // alter last byte of Name just above to set
 286+ E98F C3          >                db      {b $} | END_BIT     // msb as name end
 286+ E990             >
 286+ E990 81 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 286+ E992             >Prev_Ptr        defl    Heap_Ptr
 286+ E992             >
 286+ E992             >mirror_Ptr      defl    $
 286+ E992             >
 286+ E992 61 76       >                dw      Dict_Ptr + 2        // xt
 286+ E994             >Heap_Ptr        defl    $ - $E000           // save current HP
 286+ E994             >
 286+ E994             >Current_HP      defl  $ - $E000             // used to set HP once!
 286+ E994             >
 286+ E994             >//              ______________________________________________________________________
 286+ E994             >//              Dictionary part
 286+ E994             >
 286+ E994             >                org     Dict_Ptr
 286+ 765F             >
 286+ 765F 92 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 286+ 7661             >
 286+ 7661             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 286+ 7661 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 286+ 7661 ~           >
 286+ 7661 ~           >
 286+ 7661             >                endif           ; ok        // for other definitions it "points" the correct handler
 286+ 7661             >                // Use of "; ok" to suppress "warning[fwdref]"
 286+ 7661             >
 286+ 7661             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 287+ 7661 C1                           pop     bc                      // return  TOS  value to Basic
 288+ 7662 21 00 00                     ld      hl, 0
 289+ 7665 39                           add     hl, sp
 290+ 7666 ED 7B 6E 63                  ld      sp, (SP_Basic)          // restore Basic's SP
 291+ 766A              //              nop
 292+ 766A 22 6E 63                     ld      (SP_Basic),hl           // but also save Forth's
 293+ 766D D9                           exx
 294+ 766E E1                           pop     hl                      // restore h'l'
 295+ 766F D9                           exx
 296+ 7670 C9                           ret                             // to where USR Basic was left
 297+ 7671
 298+ 7671              //  ______________________________________________________________________
 299+ 7671              //
 300+ 7671              // +-           n1 n2 -- n3
 301+ 7671              // leaves n1 with the sign of n2 as n3.
 302+ 7671                              Colon_Def PLUS_MINUS, "+-", is_normal
 302+ 7671             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 302+ 7671             >
 302+ 7671             >Dict_Ptr        defl    $
 302+ 7671             >
 302+ 7671             >//              ______________________________________________________________________
 302+ 7671             >//              Heap part
 302+ 7671             >
 302+ 7671             >
 302+ 7671             >                org     (Heap_Ptr & $1FFF) + $E000
 302+ E994             >
 302+ E994             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 302+ E994             >Latest_Definition defl  Heap_Ptr
 302+ E994             >
 302+ E994             >                // dummy db directives used to calculate length of namec
 302+ E994 2B 2D       >                db      "+-"
 302+ E996             >len_NFA         defl    $ - temp_NFA
 302+ E996             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 302+ E994             >
 302+ E994 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 302+ E995 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 302+ E997             >                org     $-1                 // alter last byte of Name just above to set
 302+ E996 AD          >                db      {b $} | END_BIT     // msb as name end
 302+ E997             >
 302+ E997 8A 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 302+ E999             >Prev_Ptr        defl    Heap_Ptr
 302+ E999             >
 302+ E999             >mirror_Ptr      defl    $
 302+ E999             >
 302+ E999 73 76       >                dw      Dict_Ptr + 2        // xt
 302+ E99B             >Heap_Ptr        defl    $ - $E000           // save current HP
 302+ E99B             >
 302+ E99B             >Current_HP      defl  $ - $E000             // used to set HP once!
 302+ E99B             >
 302+ E99B             >//              ______________________________________________________________________
 302+ E99B             >//              Dictionary part
 302+ E99B             >
 302+ E99B             >                org     Dict_Ptr
 302+ 7671             >
 302+ 7671 99 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 302+ 7673             >
 302+ 7673             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 302+ 7673 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 302+ 7676             >
 302+ 7676             >
 302+ 7676             >                endif           ; ok        // for other definitions it "points" the correct handler
 302+ 7676             >                // Use of "; ok" to suppress "warning[fwdref]"
 302+ 7676             >
 302+ 7676             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 303+ 7676 8A 68                        dw      ZLESS                   // 0<
 304+ 7678                                                              // if
 305+ 7678 F5 63                        dw      ZBRANCH
 306+ 767A 04 00                        dw      Plus_Minus_Endif - $
 307+ 767C E5 68                        dw          MINUS               //      minus
 308+ 767E              Plus_Minus_Endif:                               // endif
 309+ 767E 53 68                        dw      EXIT                    // ;
 310+ 7680
 311+ 7680              //  ______________________________________________________________________
 312+ 7680              //
 313+ 7680              // d+-          d1 n -- d2
 314+ 7680              // leaves d1 with the sign of n as d2.
 315+ 7680                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 315+ 7680             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 315+ 7680             >
 315+ 7680             >Dict_Ptr        defl    $
 315+ 7680             >
 315+ 7680             >//              ______________________________________________________________________
 315+ 7680             >//              Heap part
 315+ 7680             >
 315+ 7680             >
 315+ 7680             >                org     (Heap_Ptr & $1FFF) + $E000
 315+ E99B             >
 315+ E99B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 315+ E99B             >Latest_Definition defl  Heap_Ptr
 315+ E99B             >
 315+ E99B             >                // dummy db directives used to calculate length of namec
 315+ E99B 44 2B 2D    >                db      "D+-"
 315+ E99E             >len_NFA         defl    $ - temp_NFA
 315+ E99E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 315+ E99B             >
 315+ E99B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 315+ E99C 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 315+ E99F             >                org     $-1                 // alter last byte of Name just above to set
 315+ E99E AD          >                db      {b $} | END_BIT     // msb as name end
 315+ E99F             >
 315+ E99F 94 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 315+ E9A1             >Prev_Ptr        defl    Heap_Ptr
 315+ E9A1             >
 315+ E9A1             >mirror_Ptr      defl    $
 315+ E9A1             >
 315+ E9A1 82 76       >                dw      Dict_Ptr + 2        // xt
 315+ E9A3             >Heap_Ptr        defl    $ - $E000           // save current HP
 315+ E9A3             >
 315+ E9A3             >Current_HP      defl  $ - $E000             // used to set HP once!
 315+ E9A3             >
 315+ E9A3             >//              ______________________________________________________________________
 315+ E9A3             >//              Dictionary part
 315+ E9A3             >
 315+ E9A3             >                org     Dict_Ptr
 315+ 7680             >
 315+ 7680 A1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 315+ 7682             >
 315+ 7682             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 315+ 7682 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 315+ 7685             >
 315+ 7685             >
 315+ 7685             >                endif           ; ok        // for other definitions it "points" the correct handler
 315+ 7685             >                // Use of "; ok" to suppress "warning[fwdref]"
 315+ 7685             >
 315+ 7685             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 316+ 7685 8A 68                        dw      ZLESS                   // 0<
 317+ 7687                                                              // if
 318+ 7687 F5 63                        dw      ZBRANCH
 319+ 7689 04 00                        dw      DPlus_Minus_Endif - $
 320+ 768B F3 68                        dw          DMINUS              //      dminus
 321+ 768D              DPlus_Minus_Endif:                              // endif
 322+ 768D 53 68                        dw      EXIT                    // ;
 323+ 768F
 324+ 768F              //  ______________________________________________________________________
 325+ 768F              //
 326+ 768F              // abs          n1 -- n2
 327+ 768F                              Colon_Def ABS_OP, "ABS", is_normal
 327+ 768F             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 327+ 768F             >
 327+ 768F             >Dict_Ptr        defl    $
 327+ 768F             >
 327+ 768F             >//              ______________________________________________________________________
 327+ 768F             >//              Heap part
 327+ 768F             >
 327+ 768F             >
 327+ 768F             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E9A3             >
 327+ E9A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E9A3             >Latest_Definition defl  Heap_Ptr
 327+ E9A3             >
 327+ E9A3             >                // dummy db directives used to calculate length of namec
 327+ E9A3 41 42 53    >                db      "ABS"
 327+ E9A6             >len_NFA         defl    $ - temp_NFA
 327+ E9A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E9A3             >
 327+ E9A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E9A4 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 327+ E9A7             >                org     $-1                 // alter last byte of Name just above to set
 327+ E9A6 D3          >                db      {b $} | END_BIT     // msb as name end
 327+ E9A7             >
 327+ E9A7 9B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E9A9             >Prev_Ptr        defl    Heap_Ptr
 327+ E9A9             >
 327+ E9A9             >mirror_Ptr      defl    $
 327+ E9A9             >
 327+ E9A9 91 76       >                dw      Dict_Ptr + 2        // xt
 327+ E9AB             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E9AB             >
 327+ E9AB             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E9AB             >
 327+ E9AB             >//              ______________________________________________________________________
 327+ E9AB             >//              Dictionary part
 327+ E9AB             >
 327+ E9AB             >                org     Dict_Ptr
 327+ 768F             >
 327+ 768F A9 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 7691             >
 327+ 7691             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 7691 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 327+ 7694             >
 327+ 7694             >
 327+ 7694             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 7694             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 7694             >
 327+ 7694             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 7694 2A 69                        dw      DUP                     // dup
 329+ 7696 73 76                        dw      PLUS_MINUS              // +-
 330+ 7698 53 68                        dw      EXIT                    // ;
 331+ 769A
 332+ 769A              //  ______________________________________________________________________
 333+ 769A              //
 334+ 769A              // dabs         d1 -- d2
 335+ 769A                              Colon_Def DABS, "DABS", is_normal
 335+ 769A             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 335+ 769A             >
 335+ 769A             >Dict_Ptr        defl    $
 335+ 769A             >
 335+ 769A             >//              ______________________________________________________________________
 335+ 769A             >//              Heap part
 335+ 769A             >
 335+ 769A             >
 335+ 769A             >                org     (Heap_Ptr & $1FFF) + $E000
 335+ E9AB             >
 335+ E9AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 335+ E9AB             >Latest_Definition defl  Heap_Ptr
 335+ E9AB             >
 335+ E9AB             >                // dummy db directives used to calculate length of namec
 335+ E9AB 44 41 42 53 >                db      "DABS"
 335+ E9AF             >len_NFA         defl    $ - temp_NFA
 335+ E9AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 335+ E9AB             >
 335+ E9AB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 335+ E9AC 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 335+ E9B0             >                org     $-1                 // alter last byte of Name just above to set
 335+ E9AF D3          >                db      {b $} | END_BIT     // msb as name end
 335+ E9B0             >
 335+ E9B0 A3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 335+ E9B2             >Prev_Ptr        defl    Heap_Ptr
 335+ E9B2             >
 335+ E9B2             >mirror_Ptr      defl    $
 335+ E9B2             >
 335+ E9B2 9C 76       >                dw      Dict_Ptr + 2        // xt
 335+ E9B4             >Heap_Ptr        defl    $ - $E000           // save current HP
 335+ E9B4             >
 335+ E9B4             >Current_HP      defl  $ - $E000             // used to set HP once!
 335+ E9B4             >
 335+ E9B4             >//              ______________________________________________________________________
 335+ E9B4             >//              Dictionary part
 335+ E9B4             >
 335+ E9B4             >                org     Dict_Ptr
 335+ 769A             >
 335+ 769A B2 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 335+ 769C             >
 335+ 769C             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 335+ 769C CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 335+ 769F             >
 335+ 769F             >
 335+ 769F             >                endif           ; ok        // for other definitions it "points" the correct handler
 335+ 769F             >                // Use of "; ok" to suppress "warning[fwdref]"
 335+ 769F             >
 335+ 769F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 336+ 769F 2A 69                        dw      DUP                     // dup
 337+ 76A1 82 76                        dw      DPLUS_MINUS             // d+-
 338+ 76A3 53 68                        dw      EXIT                    // ;
 339+ 76A5
 340+ 76A5              //  ______________________________________________________________________
 341+ 76A5              //
 342+ 76A5              // m*           n1 n2 -- d
 343+ 76A5              // multiply two integer giving a double
 344+ 76A5                              Colon_Def MMUL, "M*", is_normal
 344+ 76A5             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 344+ 76A5             >
 344+ 76A5             >Dict_Ptr        defl    $
 344+ 76A5             >
 344+ 76A5             >//              ______________________________________________________________________
 344+ 76A5             >//              Heap part
 344+ 76A5             >
 344+ 76A5             >
 344+ 76A5             >                org     (Heap_Ptr & $1FFF) + $E000
 344+ E9B4             >
 344+ E9B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ E9B4             >Latest_Definition defl  Heap_Ptr
 344+ E9B4             >
 344+ E9B4             >                // dummy db directives used to calculate length of namec
 344+ E9B4 4D 2A       >                db      "M*"
 344+ E9B6             >len_NFA         defl    $ - temp_NFA
 344+ E9B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ E9B4             >
 344+ E9B4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ E9B5 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 344+ E9B7             >                org     $-1                 // alter last byte of Name just above to set
 344+ E9B6 AA          >                db      {b $} | END_BIT     // msb as name end
 344+ E9B7             >
 344+ E9B7 AB 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 344+ E9B9             >Prev_Ptr        defl    Heap_Ptr
 344+ E9B9             >
 344+ E9B9             >mirror_Ptr      defl    $
 344+ E9B9             >
 344+ E9B9 A7 76       >                dw      Dict_Ptr + 2        // xt
 344+ E9BB             >Heap_Ptr        defl    $ - $E000           // save current HP
 344+ E9BB             >
 344+ E9BB             >Current_HP      defl  $ - $E000             // used to set HP once!
 344+ E9BB             >
 344+ E9BB             >//              ______________________________________________________________________
 344+ E9BB             >//              Dictionary part
 344+ E9BB             >
 344+ E9BB             >                org     Dict_Ptr
 344+ 76A5             >
 344+ 76A5 B9 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 344+ 76A7             >
 344+ 76A7             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 76A7 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 76AA             >
 344+ 76AA             >
 344+ 76AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 76AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 76AA             >
 344+ 76AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 76AA 79 69 2E 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 345+ 76AE 5D 68
 346+ 76B0 91 76 23 69                  dw      ABS_OP, SWAP            // abs swap
 347+ 76B4 91 76 B8 67                  dw      ABS_OP, UM_MUL          // abs um*
 348+ 76B8 68 68 82 76                  dw      R_TO, DPLUS_MINUS       // r> d+-
 349+ 76BC 53 68                        dw      EXIT                    // ;
 350+ 76BE
 351+ 76BE              //  ______________________________________________________________________
 352+ 76BE              //
 353+ 76BE              // sm/rem       d n -- q r
 354+ 76BE              // Symmetric division: divides a double into n giving quotient q and remainder r
 355+ 76BE              // the remainder has the sign of d.
 356+ 76BE                              Colon_Def SMDIVM, "SM/REM", is_normal
 356+ 76BE             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 356+ 76BE             >
 356+ 76BE             >Dict_Ptr        defl    $
 356+ 76BE             >
 356+ 76BE             >//              ______________________________________________________________________
 356+ 76BE             >//              Heap part
 356+ 76BE             >
 356+ 76BE             >
 356+ 76BE             >                org     (Heap_Ptr & $1FFF) + $E000
 356+ E9BB             >
 356+ E9BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 356+ E9BB             >Latest_Definition defl  Heap_Ptr
 356+ E9BB             >
 356+ E9BB             >                // dummy db directives used to calculate length of namec
 356+ E9BB 53 4D 2F 52 >                db      "SM/REM"
 356+ E9BF 45 4D       >
 356+ E9C1             >len_NFA         defl    $ - temp_NFA
 356+ E9C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 356+ E9BB             >
 356+ E9BB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 356+ E9BC 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 356+ E9C0 45 4D       >
 356+ E9C2             >                org     $-1                 // alter last byte of Name just above to set
 356+ E9C1 CD          >                db      {b $} | END_BIT     // msb as name end
 356+ E9C2             >
 356+ E9C2 B4 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 356+ E9C4             >Prev_Ptr        defl    Heap_Ptr
 356+ E9C4             >
 356+ E9C4             >mirror_Ptr      defl    $
 356+ E9C4             >
 356+ E9C4 C0 76       >                dw      Dict_Ptr + 2        // xt
 356+ E9C6             >Heap_Ptr        defl    $ - $E000           // save current HP
 356+ E9C6             >
 356+ E9C6             >Current_HP      defl  $ - $E000             // used to set HP once!
 356+ E9C6             >
 356+ E9C6             >//              ______________________________________________________________________
 356+ E9C6             >//              Dictionary part
 356+ E9C6             >
 356+ E9C6             >                org     Dict_Ptr
 356+ 76BE             >
 356+ 76BE C4 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 356+ 76C0             >
 356+ 76C0             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 356+ 76C0 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 356+ 76C3             >
 356+ 76C3             >
 356+ 76C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 356+ 76C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 356+ 76C3             >
 356+ 76C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 357+ 76C3 06 69 5D 68                  dw      OVER, TO_R, TO_R        // over >r >r
 357+ 76C7 5D 68
 358+ 76C9 9C 76 73 68                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 358+ 76CD 91 76
 359+ 76CF E0 67                        dw      UMDIVMOD                // um/mod
 360+ 76D1 68 68                        dw      R_TO                    // r>
 361+ 76D3 73 68 2E 68                  dw      R_OP, XOR_OP            // r xor
 362+ 76D7 73 76 23 69                  dw      PLUS_MINUS, SWAP        // +- swap
 363+ 76DB 68 68                        dw      R_TO                    // r>
 364+ 76DD 73 76 23 69                  dw      PLUS_MINUS, SWAP        // +- swap
 365+ 76E1 53 68                        dw      EXIT                    // ;
 366+ 76E3
 367+ 76E3              //  ______________________________________________________________________
 368+ 76E3              //
 369+ 76E3              // fm/mod       d n -- q r
 370+ 76E3              // Floored division: divides a double into n giving quotient q and remainder r
 371+ 76E3              // the remainder has the sign of d.
 372+ 76E3                              Colon_Def FMDIVM, "FM/MOD", is_normal
 372+ 76E3             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 372+ 76E3             >
 372+ 76E3             >Dict_Ptr        defl    $
 372+ 76E3             >
 372+ 76E3             >//              ______________________________________________________________________
 372+ 76E3             >//              Heap part
 372+ 76E3             >
 372+ 76E3             >
 372+ 76E3             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E9C6             >
 372+ E9C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E9C6             >Latest_Definition defl  Heap_Ptr
 372+ E9C6             >
 372+ E9C6             >                // dummy db directives used to calculate length of namec
 372+ E9C6 46 4D 2F 4D >                db      "FM/MOD"
 372+ E9CA 4F 44       >
 372+ E9CC             >len_NFA         defl    $ - temp_NFA
 372+ E9CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E9C6             >
 372+ E9C6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E9C7 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 372+ E9CB 4F 44       >
 372+ E9CD             >                org     $-1                 // alter last byte of Name just above to set
 372+ E9CC C4          >                db      {b $} | END_BIT     // msb as name end
 372+ E9CD             >
 372+ E9CD BB 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E9CF             >Prev_Ptr        defl    Heap_Ptr
 372+ E9CF             >
 372+ E9CF             >mirror_Ptr      defl    $
 372+ E9CF             >
 372+ E9CF E5 76       >                dw      Dict_Ptr + 2        // xt
 372+ E9D1             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E9D1             >
 372+ E9D1             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E9D1             >
 372+ E9D1             >//              ______________________________________________________________________
 372+ E9D1             >//              Dictionary part
 372+ E9D1             >
 372+ E9D1             >                org     Dict_Ptr
 372+ 76E3             >
 372+ 76E3 CF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 76E5             >
 372+ 76E5             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 76E5 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 372+ 76E8             >
 372+ 76E8             >
 372+ 76E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 76E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 76E8             >
 372+ 76E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 76E8 2A 69 5D 68                  dw      DUP, TO_R               // dup >r
 374+ 76EC C0 76                        dw      SMDIVM
 375+ 76EE 06 69 2A 69                  dw      OVER, DUP
 376+ 76F2 78 68 78 68                  dw      ZEQUAL, ZEQUAL
 377+ 76F6 23 69 8A 68                  dw      SWAP, ZLESS
 378+ 76FA 73 68 8A 68                  dw      R_OP, ZLESS
 379+ 76FE 2E 68 13 68                  dw      XOR_OP, AND_OP
 380+ 7702 F5 63                        dw      ZBRANCH
 381+ 7704 10 00                        dw      Fm_Mod_Else - $
 382+ 7706 C5 68                        dw          ONE_SUBTRACT
 383+ 7708 23 69 68 68                  dw          SWAP, R_TO
 384+ 770C A5 68 23 69                  dw          PLUS, SWAP
 385+ 7710 E8 63                        dw      BRANCH
 386+ 7712 06 00                        dw      Fm_Mod_Endif - $
 387+ 7714              Fm_Mod_Else:
 388+ 7714 68 68 0F 69                  dw          R_TO, DROP
 389+ 7718              Fm_Mod_Endif:
 390+ 7718 53 68                        dw      EXIT
 391+ 771A              //              dw      TWO_DUP                 // 2dup
 392+ 771A              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 393+ 771A              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 394+ 771A              //              dw      UMDIVMOD                // um/mod
 395+ 771A              //              dw      SWAP                    // swap
 396+ 771A              //              dw      II, ZLESS               // i'
 397+ 771A              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 398+ 771A              //              dw      R_TO                    // r>
 399+ 771A              //              dw      PLUS_MINUS, SWAP        // +- swap
 400+ 771A              //              dw      R_OP                    // r@
 401+ 771A              //              dw      ZLESS                   // i'
 402+ 771A              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 403+ 771A              //              dw      R_TO                    // r>
 404+ 771A              //              dw      PLUS_MINUS              // +- swap
 405+ 771A              //              dw      EXIT                    // ;
 406+ 771A
 407+ 771A              //  ______________________________________________________________________
 408+ 771A              //
 409+ 771A              // m/mod        d n -- q r
 410+ 771A              // multiply two integer giving a double
 411+ 771A                              Colon_Def MDIVM, "M/MOD", is_normal
 411+ 771A             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 411+ 771A             >
 411+ 771A             >Dict_Ptr        defl    $
 411+ 771A             >
 411+ 771A             >//              ______________________________________________________________________
 411+ 771A             >//              Heap part
 411+ 771A             >
 411+ 771A             >
 411+ 771A             >                org     (Heap_Ptr & $1FFF) + $E000
 411+ E9D1             >
 411+ E9D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ E9D1             >Latest_Definition defl  Heap_Ptr
 411+ E9D1             >
 411+ E9D1             >                // dummy db directives used to calculate length of namec
 411+ E9D1 4D 2F 4D 4F >                db      "M/MOD"
 411+ E9D5 44          >
 411+ E9D6             >len_NFA         defl    $ - temp_NFA
 411+ E9D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ E9D1             >
 411+ E9D1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ E9D2 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 411+ E9D6 44          >
 411+ E9D7             >                org     $-1                 // alter last byte of Name just above to set
 411+ E9D6 C4          >                db      {b $} | END_BIT     // msb as name end
 411+ E9D7             >
 411+ E9D7 C6 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 411+ E9D9             >Prev_Ptr        defl    Heap_Ptr
 411+ E9D9             >
 411+ E9D9             >mirror_Ptr      defl    $
 411+ E9D9             >
 411+ E9D9 1C 77       >                dw      Dict_Ptr + 2        // xt
 411+ E9DB             >Heap_Ptr        defl    $ - $E000           // save current HP
 411+ E9DB             >
 411+ E9DB             >Current_HP      defl  $ - $E000             // used to set HP once!
 411+ E9DB             >
 411+ E9DB             >//              ______________________________________________________________________
 411+ E9DB             >//              Dictionary part
 411+ E9DB             >
 411+ E9DB             >                org     Dict_Ptr
 411+ 771A             >
 411+ 771A D9 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 411+ 771C             >
 411+ 771C             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 771C CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 771F             >
 411+ 771F             >
 411+ 771F             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 771F             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 771F             >
 411+ 771F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 771F C0 76                        dw      SMDIVM
 413+ 7721 53 68                        dw      EXIT                    // ;
 414+ 7723
 415+ 7723              //  ______________________________________________________________________
 416+ 7723              //
 417+ 7723              // m/           d n -- q
 418+ 7723              // multiply two integer giving a double
 419+ 7723                              Colon_Def MDIV, "M/", is_normal
 419+ 7723             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 419+ 7723             >
 419+ 7723             >Dict_Ptr        defl    $
 419+ 7723             >
 419+ 7723             >//              ______________________________________________________________________
 419+ 7723             >//              Heap part
 419+ 7723             >
 419+ 7723             >
 419+ 7723             >                org     (Heap_Ptr & $1FFF) + $E000
 419+ E9DB             >
 419+ E9DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ E9DB             >Latest_Definition defl  Heap_Ptr
 419+ E9DB             >
 419+ E9DB             >                // dummy db directives used to calculate length of namec
 419+ E9DB 4D 2F       >                db      "M/"
 419+ E9DD             >len_NFA         defl    $ - temp_NFA
 419+ E9DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ E9DB             >
 419+ E9DB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ E9DC 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 419+ E9DE             >                org     $-1                 // alter last byte of Name just above to set
 419+ E9DD AF          >                db      {b $} | END_BIT     // msb as name end
 419+ E9DE             >
 419+ E9DE D1 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 419+ E9E0             >Prev_Ptr        defl    Heap_Ptr
 419+ E9E0             >
 419+ E9E0             >mirror_Ptr      defl    $
 419+ E9E0             >
 419+ E9E0 25 77       >                dw      Dict_Ptr + 2        // xt
 419+ E9E2             >Heap_Ptr        defl    $ - $E000           // save current HP
 419+ E9E2             >
 419+ E9E2             >Current_HP      defl  $ - $E000             // used to set HP once!
 419+ E9E2             >
 419+ E9E2             >//              ______________________________________________________________________
 419+ E9E2             >//              Dictionary part
 419+ E9E2             >
 419+ E9E2             >                org     Dict_Ptr
 419+ 7723             >
 419+ 7723 E0 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 419+ 7725             >
 419+ 7725             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 7725 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 7728             >
 419+ 7728             >
 419+ 7728             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 7728             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 7728             >
 419+ 7728             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 7728 1C 77 14 69                  dw      MDIVM, NIP
 421+ 772C 53 68                        dw      EXIT                    // ;
 422+ 772E
 423+ 772E              //  ______________________________________________________________________
 424+ 772E              //
 425+ 772E              // *            n1 n2 -- n3
 426+ 772E              // multiply two integer
 427+ 772E                              Colon_Def MUL, "*", is_normal
 427+ 772E             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 427+ 772E             >
 427+ 772E             >Dict_Ptr        defl    $
 427+ 772E             >
 427+ 772E             >//              ______________________________________________________________________
 427+ 772E             >//              Heap part
 427+ 772E             >
 427+ 772E             >
 427+ 772E             >                org     (Heap_Ptr & $1FFF) + $E000
 427+ E9E2             >
 427+ E9E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ E9E2             >Latest_Definition defl  Heap_Ptr
 427+ E9E2             >
 427+ E9E2             >                // dummy db directives used to calculate length of namec
 427+ E9E2 2A          >                db      "*"
 427+ E9E3             >len_NFA         defl    $ - temp_NFA
 427+ E9E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ E9E2             >
 427+ E9E2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ E9E3 2A          >                db      "*"               // name string in 7-bit ascii, but
 427+ E9E4             >                org     $-1                 // alter last byte of Name just above to set
 427+ E9E3 AA          >                db      {b $} | END_BIT     // msb as name end
 427+ E9E4             >
 427+ E9E4 DB 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 427+ E9E6             >Prev_Ptr        defl    Heap_Ptr
 427+ E9E6             >
 427+ E9E6             >mirror_Ptr      defl    $
 427+ E9E6             >
 427+ E9E6 30 77       >                dw      Dict_Ptr + 2        // xt
 427+ E9E8             >Heap_Ptr        defl    $ - $E000           // save current HP
 427+ E9E8             >
 427+ E9E8             >Current_HP      defl  $ - $E000             // used to set HP once!
 427+ E9E8             >
 427+ E9E8             >//              ______________________________________________________________________
 427+ E9E8             >//              Dictionary part
 427+ E9E8             >
 427+ E9E8             >                org     Dict_Ptr
 427+ 772E             >
 427+ 772E E6 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 427+ 7730             >
 427+ 7730             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 7730 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 427+ 7733             >
 427+ 7733             >
 427+ 7733             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 7733             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 7733             >
 427+ 7733             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 7733 A7 76 0F 69                  dw      MMUL, DROP              // m* drop
 429+ 7737 53 68                        dw      EXIT                    // ;
 430+ 7739
 431+ 7739              //  ______________________________________________________________________
 432+ 7739              //
 433+ 7739              // /mod         n1 n2 -- n3 n4
 434+ 7739              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 435+ 7739              // The remainder has the sign of n1
 436+ 7739                              Colon_Def DIVMOD, "/MOD", is_normal
 436+ 7739             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 436+ 7739             >
 436+ 7739             >Dict_Ptr        defl    $
 436+ 7739             >
 436+ 7739             >//              ______________________________________________________________________
 436+ 7739             >//              Heap part
 436+ 7739             >
 436+ 7739             >
 436+ 7739             >                org     (Heap_Ptr & $1FFF) + $E000
 436+ E9E8             >
 436+ E9E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ E9E8             >Latest_Definition defl  Heap_Ptr
 436+ E9E8             >
 436+ E9E8             >                // dummy db directives used to calculate length of namec
 436+ E9E8 2F 4D 4F 44 >                db      "/MOD"
 436+ E9EC             >len_NFA         defl    $ - temp_NFA
 436+ E9EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ E9E8             >
 436+ E9E8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ E9E9 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 436+ E9ED             >                org     $-1                 // alter last byte of Name just above to set
 436+ E9EC C4          >                db      {b $} | END_BIT     // msb as name end
 436+ E9ED             >
 436+ E9ED E2 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 436+ E9EF             >Prev_Ptr        defl    Heap_Ptr
 436+ E9EF             >
 436+ E9EF             >mirror_Ptr      defl    $
 436+ E9EF             >
 436+ E9EF 3B 77       >                dw      Dict_Ptr + 2        // xt
 436+ E9F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 436+ E9F1             >
 436+ E9F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 436+ E9F1             >
 436+ E9F1             >//              ______________________________________________________________________
 436+ E9F1             >//              Dictionary part
 436+ E9F1             >
 436+ E9F1             >                org     Dict_Ptr
 436+ 7739             >
 436+ 7739 EF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 436+ 773B             >
 436+ 773B             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 773B CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 436+ 773E             >
 436+ 773E             >
 436+ 773E             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 773E             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 773E             >
 436+ 773E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 773E 5D 68 EB 6B                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 437+ 7742 68 68
 438+ 7744 1C 77                        dw      MDIVM                   // m/mod
 439+ 7746 53 68                        dw      EXIT                    // ;
 440+ 7748
 441+ 7748              //  ______________________________________________________________________
 442+ 7748              //
 443+ 7748              // /            n1 n2 -- n3
 444+ 7748              // division
 445+ 7748                              Colon_Def DIV, "/", is_normal
 445+ 7748             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 445+ 7748             >
 445+ 7748             >Dict_Ptr        defl    $
 445+ 7748             >
 445+ 7748             >//              ______________________________________________________________________
 445+ 7748             >//              Heap part
 445+ 7748             >
 445+ 7748             >
 445+ 7748             >                org     (Heap_Ptr & $1FFF) + $E000
 445+ E9F1             >
 445+ E9F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ E9F1             >Latest_Definition defl  Heap_Ptr
 445+ E9F1             >
 445+ E9F1             >                // dummy db directives used to calculate length of namec
 445+ E9F1 2F          >                db      "/"
 445+ E9F2             >len_NFA         defl    $ - temp_NFA
 445+ E9F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ E9F1             >
 445+ E9F1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ E9F2 2F          >                db      "/"               // name string in 7-bit ascii, but
 445+ E9F3             >                org     $-1                 // alter last byte of Name just above to set
 445+ E9F2 AF          >                db      {b $} | END_BIT     // msb as name end
 445+ E9F3             >
 445+ E9F3 E8 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 445+ E9F5             >Prev_Ptr        defl    Heap_Ptr
 445+ E9F5             >
 445+ E9F5             >mirror_Ptr      defl    $
 445+ E9F5             >
 445+ E9F5 4A 77       >                dw      Dict_Ptr + 2        // xt
 445+ E9F7             >Heap_Ptr        defl    $ - $E000           // save current HP
 445+ E9F7             >
 445+ E9F7             >Current_HP      defl  $ - $E000             // used to set HP once!
 445+ E9F7             >
 445+ E9F7             >//              ______________________________________________________________________
 445+ E9F7             >//              Dictionary part
 445+ E9F7             >
 445+ E9F7             >                org     Dict_Ptr
 445+ 7748             >
 445+ 7748 F5 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 445+ 774A             >
 445+ 774A             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 774A CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 774D             >
 445+ 774D             >
 445+ 774D             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 774D             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 774D             >
 445+ 774D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 774D 3B 77 14 69                  dw      DIVMOD, NIP             // /mod nip
 447+ 7751 53 68                        dw      EXIT                    // ;
 448+ 7753
 449+ 7753              //  ______________________________________________________________________
 450+ 7753              //
 451+ 7753              // mod          n1 n2 -- n3
 452+ 7753                              Colon_Def MOD, "MOD", is_normal
 452+ 7753             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 452+ 7753             >
 452+ 7753             >Dict_Ptr        defl    $
 452+ 7753             >
 452+ 7753             >//              ______________________________________________________________________
 452+ 7753             >//              Heap part
 452+ 7753             >
 452+ 7753             >
 452+ 7753             >                org     (Heap_Ptr & $1FFF) + $E000
 452+ E9F7             >
 452+ E9F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 452+ E9F7             >Latest_Definition defl  Heap_Ptr
 452+ E9F7             >
 452+ E9F7             >                // dummy db directives used to calculate length of namec
 452+ E9F7 4D 4F 44    >                db      "MOD"
 452+ E9FA             >len_NFA         defl    $ - temp_NFA
 452+ E9FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 452+ E9F7             >
 452+ E9F7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 452+ E9F8 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 452+ E9FB             >                org     $-1                 // alter last byte of Name just above to set
 452+ E9FA C4          >                db      {b $} | END_BIT     // msb as name end
 452+ E9FB             >
 452+ E9FB F1 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 452+ E9FD             >Prev_Ptr        defl    Heap_Ptr
 452+ E9FD             >
 452+ E9FD             >mirror_Ptr      defl    $
 452+ E9FD             >
 452+ E9FD 55 77       >                dw      Dict_Ptr + 2        // xt
 452+ E9FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 452+ E9FF             >
 452+ E9FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 452+ E9FF             >
 452+ E9FF             >//              ______________________________________________________________________
 452+ E9FF             >//              Dictionary part
 452+ E9FF             >
 452+ E9FF             >                org     Dict_Ptr
 452+ 7753             >
 452+ 7753 FD 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 452+ 7755             >
 452+ 7755             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 452+ 7755 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 452+ 7758             >
 452+ 7758             >
 452+ 7758             >                endif           ; ok        // for other definitions it "points" the correct handler
 452+ 7758             >                // Use of "; ok" to suppress "warning[fwdref]"
 452+ 7758             >
 452+ 7758             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 453+ 7758 3B 77 0F 69                  dw      DIVMOD, DROP            // /mod drop
 454+ 775C 53 68                        dw      EXIT                    // ;
 455+ 775E
 456+ 775E              //  ______________________________________________________________________
 457+ 775E              //
 458+ 775E              // */mod        n1 n2 n3 -- n4 n5
 459+ 775E              // leaves the quotient n5 and the remainder n4 of the operation
 460+ 775E              // (n1 * n2) / n3. The intermediate passage through a double number
 461+ 775E              // avoids loss of precision
 462+ 775E                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 462+ 775E             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 462+ 775E             >
 462+ 775E             >Dict_Ptr        defl    $
 462+ 775E             >
 462+ 775E             >//              ______________________________________________________________________
 462+ 775E             >//              Heap part
 462+ 775E             >
 462+ 775E             >
 462+ 775E             >                org     (Heap_Ptr & $1FFF) + $E000
 462+ E9FF             >
 462+ E9FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 462+ E9FF             >Latest_Definition defl  Heap_Ptr
 462+ E9FF             >
 462+ E9FF             >                // dummy db directives used to calculate length of namec
 462+ E9FF 2A 2F 4D 4F >                db      "*/MOD"
 462+ EA03 44          >
 462+ EA04             >len_NFA         defl    $ - temp_NFA
 462+ EA04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 462+ E9FF             >
 462+ E9FF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 462+ EA00 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 462+ EA04 44          >
 462+ EA05             >                org     $-1                 // alter last byte of Name just above to set
 462+ EA04 C4          >                db      {b $} | END_BIT     // msb as name end
 462+ EA05             >
 462+ EA05 F7 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 462+ EA07             >Prev_Ptr        defl    Heap_Ptr
 462+ EA07             >
 462+ EA07             >mirror_Ptr      defl    $
 462+ EA07             >
 462+ EA07 60 77       >                dw      Dict_Ptr + 2        // xt
 462+ EA09             >Heap_Ptr        defl    $ - $E000           // save current HP
 462+ EA09             >
 462+ EA09             >Current_HP      defl  $ - $E000             // used to set HP once!
 462+ EA09             >
 462+ EA09             >//              ______________________________________________________________________
 462+ EA09             >//              Dictionary part
 462+ EA09             >
 462+ EA09             >                org     Dict_Ptr
 462+ 775E             >
 462+ 775E 07 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 462+ 7760             >
 462+ 7760             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 462+ 7760 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 462+ 7763             >
 462+ 7763             >
 462+ 7763             >                endif           ; ok        // for other definitions it "points" the correct handler
 462+ 7763             >                // Use of "; ok" to suppress "warning[fwdref]"
 462+ 7763             >
 462+ 7763             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 463+ 7763 5D 68 A7 76                  dw      TO_R, MMUL              // >r  m*
 464+ 7767 68 68 1C 77                  dw      R_TO, MDIVM             // r>  m/mod
 465+ 776B 53 68                        dw      EXIT                    // ;
 466+ 776D
 467+ 776D              //  ______________________________________________________________________
 468+ 776D              //
 469+ 776D              // */          n1 n2 n3 -- n4
 470+ 776D              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 471+ 776D                              Colon_Def MUL_DIV, "*/", is_normal
 471+ 776D             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 471+ 776D             >
 471+ 776D             >Dict_Ptr        defl    $
 471+ 776D             >
 471+ 776D             >//              ______________________________________________________________________
 471+ 776D             >//              Heap part
 471+ 776D             >
 471+ 776D             >
 471+ 776D             >                org     (Heap_Ptr & $1FFF) + $E000
 471+ EA09             >
 471+ EA09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ EA09             >Latest_Definition defl  Heap_Ptr
 471+ EA09             >
 471+ EA09             >                // dummy db directives used to calculate length of namec
 471+ EA09 2A 2F       >                db      "*/"
 471+ EA0B             >len_NFA         defl    $ - temp_NFA
 471+ EA0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ EA09             >
 471+ EA09 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ EA0A 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 471+ EA0C             >                org     $-1                 // alter last byte of Name just above to set
 471+ EA0B AF          >                db      {b $} | END_BIT     // msb as name end
 471+ EA0C             >
 471+ EA0C FF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 471+ EA0E             >Prev_Ptr        defl    Heap_Ptr
 471+ EA0E             >
 471+ EA0E             >mirror_Ptr      defl    $
 471+ EA0E             >
 471+ EA0E 6F 77       >                dw      Dict_Ptr + 2        // xt
 471+ EA10             >Heap_Ptr        defl    $ - $E000           // save current HP
 471+ EA10             >
 471+ EA10             >Current_HP      defl  $ - $E000             // used to set HP once!
 471+ EA10             >
 471+ EA10             >//              ______________________________________________________________________
 471+ EA10             >//              Dictionary part
 471+ EA10             >
 471+ EA10             >                org     Dict_Ptr
 471+ 776D             >
 471+ 776D 0E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 471+ 776F             >
 471+ 776F             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 776F CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 7772             >
 471+ 7772             >
 471+ 7772             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 7772             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 7772             >
 471+ 7772             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 7772 60 77                        dw     MUL_DIV_MOD              // */mod
 473+ 7774 14 69                        dw     NIP                      // nip
 474+ 7776 53 68                        dw     EXIT                     // ;
 475+ 7778
 476+ 7778
 477+ 7778              //  ______________________________________________________________________
 478+ 7778              //
 479+ 7778              // m/mod        ud1 u2 -- u3 ud4
 480+ 7778              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 481+ 7778              // All terms are unsigned.
 482+ 7778              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 483+ 7778              //              dw      TO_R                    // >r           ( ud1 )
 484+ 7778              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 485+ 7778              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 486+ 7778              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 487+ 7778              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 488+ 7778              //              dw      EXIT                    // ;
 489+ 7778
 490+ 7778              //  ______________________________________________________________________
 491+ 7778              //
 492+ 7778              // (line)       n1 n2 -- a b
 493+ 7778              // sends the line n1 of block n2 to the disk buffer.
 494+ 7778              // it returns the address a and ca counter b = C/L meaning a whole line.
 495+ 7778                              Colon_Def CLINE, "(LINE)", is_normal
 495+ 7778             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 495+ 7778             >
 495+ 7778             >Dict_Ptr        defl    $
 495+ 7778             >
 495+ 7778             >//              ______________________________________________________________________
 495+ 7778             >//              Heap part
 495+ 7778             >
 495+ 7778             >
 495+ 7778             >                org     (Heap_Ptr & $1FFF) + $E000
 495+ EA10             >
 495+ EA10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 495+ EA10             >Latest_Definition defl  Heap_Ptr
 495+ EA10             >
 495+ EA10             >                // dummy db directives used to calculate length of namec
 495+ EA10 28 4C 49 4E >                db      "(LINE)"
 495+ EA14 45 29       >
 495+ EA16             >len_NFA         defl    $ - temp_NFA
 495+ EA16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 495+ EA10             >
 495+ EA10 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 495+ EA11 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 495+ EA15 45 29       >
 495+ EA17             >                org     $-1                 // alter last byte of Name just above to set
 495+ EA16 A9          >                db      {b $} | END_BIT     // msb as name end
 495+ EA17             >
 495+ EA17 09 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 495+ EA19             >Prev_Ptr        defl    Heap_Ptr
 495+ EA19             >
 495+ EA19             >mirror_Ptr      defl    $
 495+ EA19             >
 495+ EA19 7A 77       >                dw      Dict_Ptr + 2        // xt
 495+ EA1B             >Heap_Ptr        defl    $ - $E000           // save current HP
 495+ EA1B             >
 495+ EA1B             >Current_HP      defl  $ - $E000             // used to set HP once!
 495+ EA1B             >
 495+ EA1B             >//              ______________________________________________________________________
 495+ EA1B             >//              Dictionary part
 495+ EA1B             >
 495+ EA1B             >                org     Dict_Ptr
 495+ 7778             >
 495+ 7778 19 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 495+ 777A             >
 495+ 777A             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 495+ 777A CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 495+ 777D             >
 495+ 777D             >
 495+ 777D             >                endif           ; ok        // for other definitions it "points" the correct handler
 495+ 777D             >                // Use of "; ok" to suppress "warning[fwdref]"
 495+ 777D             >
 495+ 777D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 496+ 777D 5D 68                        dw      TO_R                    // >r
 497+ 777F BC 6A                        dw      CL                      // c/l
 498+ 7781 C3 6A 60 77                  dw      BBUF, MUL_DIV_MOD       // */mod
 499+ 7785 68 68                        dw      R_TO                    // r>
 500+ 7787 CA 6A 30 77                  dw      BSCR, MUL, PLUS         // b/scr * +
 500+ 778B A5 68
 501+ 778D 8D 79                        dw      BLOCK                   // block   ( forward )
 502+ 778F A5 68                        dw      PLUS                    // +
 503+ 7791 BC 6A                        dw      CL                      // c/l
 504+ 7793 53 68                        dw      EXIT                    // ;
 505+ 7795
 506+ 7795              //  ______________________________________________________________________
 507+ 7795              //
 508+ 7795              // .line        n1 n2 --
 509+ 7795              // Sends to output line  n1  of screen n2.
 510+ 7795                              Colon_Def DOT_LINE, ".LINE", is_normal
 510+ 7795             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 510+ 7795             >
 510+ 7795             >Dict_Ptr        defl    $
 510+ 7795             >
 510+ 7795             >//              ______________________________________________________________________
 510+ 7795             >//              Heap part
 510+ 7795             >
 510+ 7795             >
 510+ 7795             >                org     (Heap_Ptr & $1FFF) + $E000
 510+ EA1B             >
 510+ EA1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 510+ EA1B             >Latest_Definition defl  Heap_Ptr
 510+ EA1B             >
 510+ EA1B             >                // dummy db directives used to calculate length of namec
 510+ EA1B 2E 4C 49 4E >                db      ".LINE"
 510+ EA1F 45          >
 510+ EA20             >len_NFA         defl    $ - temp_NFA
 510+ EA20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 510+ EA1B             >
 510+ EA1B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 510+ EA1C 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 510+ EA20 45          >
 510+ EA21             >                org     $-1                 // alter last byte of Name just above to set
 510+ EA20 C5          >                db      {b $} | END_BIT     // msb as name end
 510+ EA21             >
 510+ EA21 10 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 510+ EA23             >Prev_Ptr        defl    Heap_Ptr
 510+ EA23             >
 510+ EA23             >mirror_Ptr      defl    $
 510+ EA23             >
 510+ EA23 97 77       >                dw      Dict_Ptr + 2        // xt
 510+ EA25             >Heap_Ptr        defl    $ - $E000           // save current HP
 510+ EA25             >
 510+ EA25             >Current_HP      defl  $ - $E000             // used to set HP once!
 510+ EA25             >
 510+ EA25             >//              ______________________________________________________________________
 510+ EA25             >//              Dictionary part
 510+ EA25             >
 510+ EA25             >                org     Dict_Ptr
 510+ 7795             >
 510+ 7795 23 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 510+ 7797             >
 510+ 7797             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 510+ 7797 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 510+ 779A             >
 510+ 779A             >
 510+ 779A             >                endif           ; ok        // for other definitions it "points" the correct handler
 510+ 779A             >                // Use of "; ok" to suppress "warning[fwdref]"
 510+ 779A             >
 510+ 779A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 511+ 779A 7A 77 9A 6F                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 511+ 779E 83 6F
 512+ 77A0 53 68                        dw      EXIT                    // ;
 513+ 77A2
 514+ 77A2              //  ______________________________________________________________________
 515+ 77A2              //
 516+ 77A2              // message       n1 n2 --
 517+ 77A2              // prints error message to current channel.
 518+ 77A2              // if WARNING is 0, prints "MSG#n".
 519+ 77A2              // if WARNING is 1, prints line n of screen 4.
 520+ 77A2              // if WARNING is -1, see ERROR
 521+ 77A2              // value can be negative or beyond block 4.
 522+ 77A2                              Colon_Def MESSAGE, "MESSAGE", is_normal
 522+ 77A2             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 522+ 77A2             >
 522+ 77A2             >Dict_Ptr        defl    $
 522+ 77A2             >
 522+ 77A2             >//              ______________________________________________________________________
 522+ 77A2             >//              Heap part
 522+ 77A2             >
 522+ 77A2             >
 522+ 77A2             >                org     (Heap_Ptr & $1FFF) + $E000
 522+ EA25             >
 522+ EA25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ EA25             >Latest_Definition defl  Heap_Ptr
 522+ EA25             >
 522+ EA25             >                // dummy db directives used to calculate length of namec
 522+ EA25 4D 45 53 53 >                db      "MESSAGE"
 522+ EA29 41 47 45    >
 522+ EA2C             >len_NFA         defl    $ - temp_NFA
 522+ EA2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ EA25             >
 522+ EA25 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ EA26 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 522+ EA2A 41 47 45    >
 522+ EA2D             >                org     $-1                 // alter last byte of Name just above to set
 522+ EA2C C5          >                db      {b $} | END_BIT     // msb as name end
 522+ EA2D             >
 522+ EA2D 1B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 522+ EA2F             >Prev_Ptr        defl    Heap_Ptr
 522+ EA2F             >
 522+ EA2F             >mirror_Ptr      defl    $
 522+ EA2F             >
 522+ EA2F A4 77       >                dw      Dict_Ptr + 2        // xt
 522+ EA31             >Heap_Ptr        defl    $ - $E000           // save current HP
 522+ EA31             >
 522+ EA31             >Current_HP      defl  $ - $E000             // used to set HP once!
 522+ EA31             >
 522+ EA31             >//              ______________________________________________________________________
 522+ EA31             >//              Dictionary part
 522+ EA31             >
 522+ EA31             >                org     Dict_Ptr
 522+ 77A2             >
 522+ 77A2 2F 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 522+ 77A4             >
 522+ 77A4             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 77A4 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 77A7             >
 522+ 77A7             >
 522+ 77A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 77A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 77A7             >
 522+ 77A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 77A7 03 6B 9B 69                  dw      WARNING, FETCH          // warning @
 524+ 77AB                                                              // if
 525+ 77AB F5 63                        dw      ZBRANCH
 526+ 77AD 12 00                        dw      Message_Else - $
 527+ 77AF A3 63 20 00                  dw          LIT, 32, PLUS       //      32 +
 527+ 77B3 A5 68
 528+ 77B5 A0 6A                        dw          TWO                 //      2
 529+ 77B7 97 77                        dw          DOT_LINE            //      .line
 530+ 77B9 88 6C                        dw          SPACE               //      space
 531+ 77BB                                                              // else
 532+ 77BB
 533+ 77BB E8 63                        dw      BRANCH
 534+ 77BD 0B 00                        dw      Message_ENdif - $
 535+ 77BF              Message_Else:
 536+ 77BF 20 71                        dw          C_DOT_QUOTE         //      .( msg#)
 537+ 77C1 04 6D 73 67                  db          4, "msg#"
 537+ 77C5 23
 538+ 77C6 E0 7E                        dw          DOT                 //      .  ( forward )
 539+ 77C8              Message_ENdif:                                  // endif
 540+ 77C8 53 68                        dw      EXIT                    // ;
 541+ 77CA
 542+ 77CA
 543+ 77CA              //  ______________________________________________________________________
 544+ 77CA              //
 545+ 77CA              // device
 546+ 77CA                              Variable_Def DEVICE,   "DEVICE",   2
 546+ 77CA             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 546+ 77CA             >
 546+ 77CA             >Dict_Ptr        defl    $
 546+ 77CA             >
 546+ 77CA             >//              ______________________________________________________________________
 546+ 77CA             >//              Heap part
 546+ 77CA             >
 546+ 77CA             >
 546+ 77CA             >                org     (Heap_Ptr & $1FFF) + $E000
 546+ EA31             >
 546+ EA31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 546+ EA31             >Latest_Definition defl  Heap_Ptr
 546+ EA31             >
 546+ EA31             >                // dummy db directives used to calculate length of namec
 546+ EA31 44 45 56 49 >                db      "DEVICE"
 546+ EA35 43 45       >
 546+ EA37             >len_NFA         defl    $ - temp_NFA
 546+ EA37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 546+ EA31             >
 546+ EA31 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 546+ EA32 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 546+ EA36 43 45       >
 546+ EA38             >                org     $-1                 // alter last byte of Name just above to set
 546+ EA37 C5          >                db      {b $} | END_BIT     // msb as name end
 546+ EA38             >
 546+ EA38 25 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 546+ EA3A             >Prev_Ptr        defl    Heap_Ptr
 546+ EA3A             >
 546+ EA3A             >mirror_Ptr      defl    $
 546+ EA3A             >
 546+ EA3A CC 77       >                dw      Dict_Ptr + 2        // xt
 546+ EA3C             >Heap_Ptr        defl    $ - $E000           // save current HP
 546+ EA3C             >
 546+ EA3C             >Current_HP      defl  $ - $E000             // used to set HP once!
 546+ EA3C             >
 546+ EA3C             >//              ______________________________________________________________________
 546+ EA3C             >//              Dictionary part
 546+ EA3C             >
 546+ EA3C             >                org     Dict_Ptr
 546+ 77CA             >
 546+ 77CA 3A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 546+ 77CC             >
 546+ 77CC             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 546+ 77CC CD 79 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 546+ 77CF             >
 546+ 77CF             >
 546+ 77CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 546+ 77CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 546+ 77CF             >
 546+ 77CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 546+ 77CF 02 00       >                dw      2 // ?
 547+ 77D1
 548+ 77D1              //  ______________________________________________________________________
 549+ 77D1
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
 123  77D1                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
   1+ 77D1              //  ______________________________________________________________________
   2+ 77D1              //
   3+ 77D1              //  next-opt.asm
   4+ 77D1              //
   5+ 77D1              //  ZX Spectrum Next - peculiar definitions
   6+ 77D1              //  ______________________________________________________________________
   7+ 77D1
   8+ 77D1              //  ______________________________________________________________________
   9+ 77D1              //
  10+ 77D1              // reg@         n -- b
  11+ 77D1              // read Next REGister n giving byte b
  12+ 77D1              //
  13+ 77D1              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 77D1              //              dw      LIT, $243B
  15+ 77D1              //              dw      PSTORE
  16+ 77D1              //              dw      LIT, $253B
  17+ 77D1              //              dw      PFETCH
  18+ 77D1              //              dw      EXIT
  19+ 77D1                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 77D1             >
  19+ 77D1             >Dict_Ptr        defl    $
  19+ 77D1             >
  19+ 77D1             >//              ______________________________________________________________________
  19+ 77D1             >//              Heap part
  19+ 77D1             >
  19+ 77D1             >
  19+ 77D1             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA3C             >
  19+ EA3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA3C             >Latest_Definition defl  Heap_Ptr
  19+ EA3C             >
  19+ EA3C             >                // dummy db directives used to calculate length of namec
  19+ EA3C 52 45 47 40 >                db      "REG@"
  19+ EA40             >len_NFA         defl    $ - temp_NFA
  19+ EA40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA3C             >
  19+ EA3C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA3D 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA41             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA40 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA41             >
  19+ EA41 31 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA43             >Prev_Ptr        defl    Heap_Ptr
  19+ EA43             >
  19+ EA43             >mirror_Ptr      defl    $
  19+ EA43             >
  19+ EA43 D3 77       >                dw      Dict_Ptr + 2        // xt
  19+ EA45             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA45             >
  19+ EA45             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA45             >
  19+ EA45             >//              ______________________________________________________________________
  19+ EA45             >//              Dictionary part
  19+ EA45             >
  19+ EA45             >                org     Dict_Ptr
  19+ 77D1             >
  19+ 77D1 43 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 77D3             >
  19+ 77D3             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 77D3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 77D3 ~           >
  19+ 77D3 ~           >
  19+ 77D3             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 77D3             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 77D3             >
  19+ 77D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 77D3 D9                           exx
  21+ 77D4 01 3B 24                     ld      bc, $243B
  22+ 77D7 E1                           pop     hl
  23+ 77D8 ED 69                        out     (c), l
  24+ 77DA 04                           inc     b
  25+ 77DB ED 68                        in      l, (c)
  26+ 77DD E5                           push    hl
  27+ 77DE D9                           exx
  28+ 77DF                              next
  28+ 77DF DD E9       >                jp      (ix)
  29+ 77E1
  30+ 77E1
  31+ 77E1              //  ______________________________________________________________________
  32+ 77E1              //
  33+ 77E1              // reg!         b n --
  34+ 77E1              // write value b to Next REGister n
  35+ 77E1              //
  36+ 77E1              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 77E1              //              dw      LIT, $243B
  38+ 77E1              //              dw      PSTORE
  39+ 77E1              //              dw      LIT, $253B
  40+ 77E1              //              dw      PSTORE
  41+ 77E1              //              dw      EXIT
  42+ 77E1                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 77E1             >
  42+ 77E1             >Dict_Ptr        defl    $
  42+ 77E1             >
  42+ 77E1             >//              ______________________________________________________________________
  42+ 77E1             >//              Heap part
  42+ 77E1             >
  42+ 77E1             >
  42+ 77E1             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA45             >
  42+ EA45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA45             >Latest_Definition defl  Heap_Ptr
  42+ EA45             >
  42+ EA45             >                // dummy db directives used to calculate length of namec
  42+ EA45 52 45 47 21 >                db      "REG!"
  42+ EA49             >len_NFA         defl    $ - temp_NFA
  42+ EA49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA45             >
  42+ EA45 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA46 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA4A             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA49 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA4A             >
  42+ EA4A 3C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA4C             >Prev_Ptr        defl    Heap_Ptr
  42+ EA4C             >
  42+ EA4C             >mirror_Ptr      defl    $
  42+ EA4C             >
  42+ EA4C E3 77       >                dw      Dict_Ptr + 2        // xt
  42+ EA4E             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA4E             >
  42+ EA4E             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA4E             >
  42+ EA4E             >//              ______________________________________________________________________
  42+ EA4E             >//              Dictionary part
  42+ EA4E             >
  42+ EA4E             >                org     Dict_Ptr
  42+ 77E1             >
  42+ 77E1 4C 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 77E3             >
  42+ 77E3             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 77E3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 77E3 ~           >
  42+ 77E3 ~           >
  42+ 77E3             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 77E3             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 77E3             >
  42+ 77E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 77E3 D9                           exx
  44+ 77E4 01 3B 24                     ld      bc, $243B
  45+ 77E7 E1                           pop     hl
  46+ 77E8 ED 69                        out     (c), l
  47+ 77EA 04                           inc     b
  48+ 77EB E1                           pop     hl
  49+ 77EC ED 69                        out     (c), l
  50+ 77EE D9                           exx
  51+ 77EF                              next
  51+ 77EF DD E9       >                jp      (ix)
  52+ 77F1
  53+ 77F1
  54+ 77F1              //  ______________________________________________________________________
  55+ 77F1              //
  56+ 77F1              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 77F1              // NextZXOS call wrapper.
  58+ 77F1              //  n1 = hl register parameter value
  59+ 77F1              //  n2 = de register parameter value
  60+ 77F1              //  n3 = bc register parameter value
  61+ 77F1              //  n4 =  a register parameter value
  62+ 77F1              //   a = routine address in ROM 3
  63+ 77F1              // ----
  64+ 77F1              //  n5 = hl returned value
  65+ 77F1              //  n6 = de returned value
  66+ 77F1              //  n7 = bc returned value
  67+ 77F1              //  n8 =  a returned value
  68+ 77F1              //   f
  69+ 77F1                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 77F1             >
  69+ 77F1             >Dict_Ptr        defl    $
  69+ 77F1             >
  69+ 77F1             >//              ______________________________________________________________________
  69+ 77F1             >//              Heap part
  69+ 77F1             >
  69+ 77F1             >
  69+ 77F1             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA4E             >
  69+ EA4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA4E             >Latest_Definition defl  Heap_Ptr
  69+ EA4E             >
  69+ EA4E             >                // dummy db directives used to calculate length of namec
  69+ EA4E 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA52 44 4F 53    >
  69+ EA55             >len_NFA         defl    $ - temp_NFA
  69+ EA55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA4E             >
  69+ EA4E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA4F 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA53 44 4F 53    >
  69+ EA56             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA55 D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA56             >
  69+ EA56 45 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA58             >Prev_Ptr        defl    Heap_Ptr
  69+ EA58             >
  69+ EA58             >mirror_Ptr      defl    $
  69+ EA58             >
  69+ EA58 F3 77       >                dw      Dict_Ptr + 2        // xt
  69+ EA5A             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA5A             >
  69+ EA5A             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA5A             >
  69+ EA5A             >//              ______________________________________________________________________
  69+ EA5A             >//              Dictionary part
  69+ EA5A             >
  69+ EA5A             >                org     Dict_Ptr
  69+ 77F1             >
  69+ 77F1 58 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 77F3             >
  69+ 77F3             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 77F3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 77F3 ~           >
  69+ 77F3 ~           >
  69+ 77F3             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 77F3             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 77F3             >
  69+ 77F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 77F3 D9                            exx
  71+ 77F4 E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 77F5 D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 77F6 7B                            ld      a, e
  74+ 77F7 C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 77F8 D1                            pop     de                  // de' argument              //  n1
  76+ 77F9 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 77FA D9                           exx
  78+ 77FB E1                           pop     hl                  // entry address a
  79+ 77FC DD E5                        push    ix
  80+ 77FE D5                           push    de
  81+ 77FF C5                           push    bc
  82+ 7800 EB                           ex      de, hl              // de is entry address
  83+ 7801              //              ld      (SP_Saved), sp
  84+ 7801              //              ld      sp, Cold_origin - 5
  85+ 7801 0E 07                        ld      c, 7                // use 7 RAM Bank
  86+ 7803 F3                           di
  87+ 7804 CF                           rst     08
  88+ 7805 94                           db      $94
  89+ 7806 FB                           ei
  90+ 7807              //              ld      sp, (SP_Saved)
  91+ 7807              //              push    ix
  92+ 7807              //              pop     hl
  93+ 7807              //              ld      (IX_Echo), hl
  94+ 7807 DD 22 98 63                  ld      (IX_Echo), ix
  95+ 780B
  96+ 780B D9                           exx
  97+ 780C C1                           pop     bc
  98+ 780D D1                           pop     de
  99+ 780E DD E1                        pop     ix
 100+ 7810 D9                            exx
 101+ 7811 E5                            push    hl
 102+ 7812 D5                            push    de
 103+ 7813 C5                            push    bc
 104+ 7814 26 00                         ld      h, 0
 105+ 7816 6F                            ld      l, a
 106+ 7817 E5                            push    hl
 107+ 7818 D9                           exx
 108+ 7819 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 109+ 781B 23                           inc     hl                  //  0 for OK ; 1 for ko
 110+ 781C E5                           push    hl
 111+ 781D                              next
 111+ 781D DD E9       >                jp      (ix)
 112+ 781F
 113+ 781F              //  ______________________________________________________________________
 114+ 781F              //
 115+ 781F              // blk-fh
 116+ 781F                              Variable_Def BLK_FH,   "BLK-FH",   1
 116+ 781F             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 116+ 781F             >
 116+ 781F             >Dict_Ptr        defl    $
 116+ 781F             >
 116+ 781F             >//              ______________________________________________________________________
 116+ 781F             >//              Heap part
 116+ 781F             >
 116+ 781F             >
 116+ 781F             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ EA5A             >
 116+ EA5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ EA5A             >Latest_Definition defl  Heap_Ptr
 116+ EA5A             >
 116+ EA5A             >                // dummy db directives used to calculate length of namec
 116+ EA5A 42 4C 4B 2D >                db      "BLK-FH"
 116+ EA5E 46 48       >
 116+ EA60             >len_NFA         defl    $ - temp_NFA
 116+ EA60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ EA5A             >
 116+ EA5A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ EA5B 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 116+ EA5F 46 48       >
 116+ EA61             >                org     $-1                 // alter last byte of Name just above to set
 116+ EA60 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ EA61             >
 116+ EA61 4E 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ EA63             >Prev_Ptr        defl    Heap_Ptr
 116+ EA63             >
 116+ EA63             >mirror_Ptr      defl    $
 116+ EA63             >
 116+ EA63 21 78       >                dw      Dict_Ptr + 2        // xt
 116+ EA65             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ EA65             >
 116+ EA65             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ EA65             >
 116+ EA65             >//              ______________________________________________________________________
 116+ EA65             >//              Dictionary part
 116+ EA65             >
 116+ EA65             >                org     Dict_Ptr
 116+ 781F             >
 116+ 781F 63 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 7821             >
 116+ 7821             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 7821 CD 79 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 116+ 7824             >
 116+ 7824             >
 116+ 7824             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 7824             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 7824             >
 116+ 7824             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 116+ 7824 01 00       >                dw      1 // ?
 117+ 7826
 118+ 7826                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 118+ 7826             >
 118+ 7826             >Dict_Ptr        defl    $
 118+ 7826             >
 118+ 7826             >//              ______________________________________________________________________
 118+ 7826             >//              Heap part
 118+ 7826             >
 118+ 7826             >
 118+ 7826             >                org     (Heap_Ptr & $1FFF) + $E000
 118+ EA65             >
 118+ EA65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ EA65             >Latest_Definition defl  Heap_Ptr
 118+ EA65             >
 118+ EA65             >                // dummy db directives used to calculate length of namec
 118+ EA65 42 4C 4B 2D >                db      "BLK-FNAME"
 118+ EA69 46 4E 41 4D >
 118+ EA6D 45          >
 118+ EA6E             >len_NFA         defl    $ - temp_NFA
 118+ EA6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ EA65             >
 118+ EA65 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ EA66 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 118+ EA6A 46 4E 41 4D >
 118+ EA6E 45          >
 118+ EA6F             >                org     $-1                 // alter last byte of Name just above to set
 118+ EA6E C5          >                db      {b $} | END_BIT     // msb as name end
 118+ EA6F             >
 118+ EA6F 5A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 118+ EA71             >Prev_Ptr        defl    Heap_Ptr
 118+ EA71             >
 118+ EA71             >mirror_Ptr      defl    $
 118+ EA71             >
 118+ EA71 28 78       >                dw      Dict_Ptr + 2        // xt
 118+ EA73             >Heap_Ptr        defl    $ - $E000           // save current HP
 118+ EA73             >
 118+ EA73             >Current_HP      defl  $ - $E000             // used to set HP once!
 118+ EA73             >
 118+ EA73             >//              ______________________________________________________________________
 118+ EA73             >//              Dictionary part
 118+ EA73             >
 118+ EA73             >                org     Dict_Ptr
 118+ 7826             >
 118+ 7826 71 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 118+ 7828             >
 118+ 7828             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 7828 CD 1C 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 118+ 782B             >
 118+ 782B             >
 118+ 782B             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 782B             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 782B             >
 118+ 782B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 782B 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 119+ 782F 6F 63 6B 73
 119+ 7833 2D 36 34 2E
 119+ 7837 62 69 6E 00
 120+ 783B 00 00 00...                  ds      24     // so this buffer is 24+14+1=39
 121+ 7853
 122+ 7853              //  ______________________________________________________________________
 123+ 7853              //
 124+ 7853              // blk-seek     n --
 125+ 7853              // seek block n  within blocks!.bin  file
 126+ 7853                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 126+ 7853             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 126+ 7853             >
 126+ 7853             >Dict_Ptr        defl    $
 126+ 7853             >
 126+ 7853             >//              ______________________________________________________________________
 126+ 7853             >//              Heap part
 126+ 7853             >
 126+ 7853             >
 126+ 7853             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ EA73             >
 126+ EA73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ EA73             >Latest_Definition defl  Heap_Ptr
 126+ EA73             >
 126+ EA73             >                // dummy db directives used to calculate length of namec
 126+ EA73 42 4C 4B 2D >                db      "BLK-SEEK"
 126+ EA77 53 45 45 4B >
 126+ EA7B             >len_NFA         defl    $ - temp_NFA
 126+ EA7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ EA73             >
 126+ EA73 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ EA74 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 126+ EA78 53 45 45 4B >
 126+ EA7C             >                org     $-1                 // alter last byte of Name just above to set
 126+ EA7B CB          >                db      {b $} | END_BIT     // msb as name end
 126+ EA7C             >
 126+ EA7C 65 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ EA7E             >Prev_Ptr        defl    Heap_Ptr
 126+ EA7E             >
 126+ EA7E             >mirror_Ptr      defl    $
 126+ EA7E             >
 126+ EA7E 55 78       >                dw      Dict_Ptr + 2        // xt
 126+ EA80             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ EA80             >
 126+ EA80             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ EA80             >
 126+ EA80             >//              ______________________________________________________________________
 126+ EA80             >//              Dictionary part
 126+ EA80             >
 126+ EA80             >                org     Dict_Ptr
 126+ 7853             >
 126+ 7853 7E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 7855             >
 126+ 7855             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 7855 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 126+ 7858             >
 126+ 7858             >
 126+ 7858             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 7858             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 7858             >
 126+ 7858             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 7858 C3 6A A7 76                  dw  BBUF, MMUL
 128+ 785C 21 78 9B 69                  dw  BLK_FH, FETCH
 129+ 7860 DD 66                        dw  F_SEEK
 130+ 7862 A3 63 2D 00                  dw  LIT, $2D, QERROR
 130+ 7866 F3 6D
 131+ 7868 53 68                        dw  EXIT
 132+ 786A
 133+ 786A              //  ______________________________________________________________________
 134+ 786A              //
 135+ 786A              // blk-read     n --
 136+ 786A              // seek block n  within blocks!.bin  file
 137+ 786A                              Colon_Def BLK_READ, "BLK-READ", is_normal
 137+ 786A             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 137+ 786A             >
 137+ 786A             >Dict_Ptr        defl    $
 137+ 786A             >
 137+ 786A             >//              ______________________________________________________________________
 137+ 786A             >//              Heap part
 137+ 786A             >
 137+ 786A             >
 137+ 786A             >                org     (Heap_Ptr & $1FFF) + $E000
 137+ EA80             >
 137+ EA80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ EA80             >Latest_Definition defl  Heap_Ptr
 137+ EA80             >
 137+ EA80             >                // dummy db directives used to calculate length of namec
 137+ EA80 42 4C 4B 2D >                db      "BLK-READ"
 137+ EA84 52 45 41 44 >
 137+ EA88             >len_NFA         defl    $ - temp_NFA
 137+ EA88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ EA80             >
 137+ EA80 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ EA81 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 137+ EA85 52 45 41 44 >
 137+ EA89             >                org     $-1                 // alter last byte of Name just above to set
 137+ EA88 C4          >                db      {b $} | END_BIT     // msb as name end
 137+ EA89             >
 137+ EA89 73 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 137+ EA8B             >Prev_Ptr        defl    Heap_Ptr
 137+ EA8B             >
 137+ EA8B             >mirror_Ptr      defl    $
 137+ EA8B             >
 137+ EA8B 6C 78       >                dw      Dict_Ptr + 2        // xt
 137+ EA8D             >Heap_Ptr        defl    $ - $E000           // save current HP
 137+ EA8D             >
 137+ EA8D             >Current_HP      defl  $ - $E000             // used to set HP once!
 137+ EA8D             >
 137+ EA8D             >//              ______________________________________________________________________
 137+ EA8D             >//              Dictionary part
 137+ EA8D             >
 137+ EA8D             >                org     Dict_Ptr
 137+ 786A             >
 137+ 786A 8B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 137+ 786C             >
 137+ 786C             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 786C CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 137+ 786F             >
 137+ 786F             >
 137+ 786F             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 786F             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 786F             >
 137+ 786F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 786F 55 78                        dw  BLK_SEEK
 139+ 7871 C3 6A                        dw  BBUF
 140+ 7873 21 78 9B 69                  dw  BLK_FH, FETCH
 141+ 7877 2F 67                        dw  F_READ
 142+ 7879 A3 63 2E 00                  dw  LIT, $2E, QERROR
 142+ 787D F3 6D
 143+ 787F 0F 69                        dw  DROP
 144+ 7881 53 68                        dw  EXIT
 145+ 7883
 146+ 7883              //  ______________________________________________________________________
 147+ 7883              //
 148+ 7883              // blk-write     n --
 149+ 7883              // seek block n  within blocks!.bin  file
 150+ 7883                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 150+ 7883             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 150+ 7883             >
 150+ 7883             >Dict_Ptr        defl    $
 150+ 7883             >
 150+ 7883             >//              ______________________________________________________________________
 150+ 7883             >//              Heap part
 150+ 7883             >
 150+ 7883             >
 150+ 7883             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ EA8D             >
 150+ EA8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ EA8D             >Latest_Definition defl  Heap_Ptr
 150+ EA8D             >
 150+ EA8D             >                // dummy db directives used to calculate length of namec
 150+ EA8D 42 4C 4B 2D >                db      "BLK-WRITE"
 150+ EA91 57 52 49 54 >
 150+ EA95 45          >
 150+ EA96             >len_NFA         defl    $ - temp_NFA
 150+ EA96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ EA8D             >
 150+ EA8D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ EA8E 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 150+ EA92 57 52 49 54 >
 150+ EA96 45          >
 150+ EA97             >                org     $-1                 // alter last byte of Name just above to set
 150+ EA96 C5          >                db      {b $} | END_BIT     // msb as name end
 150+ EA97             >
 150+ EA97 80 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ EA99             >Prev_Ptr        defl    Heap_Ptr
 150+ EA99             >
 150+ EA99             >mirror_Ptr      defl    $
 150+ EA99             >
 150+ EA99 85 78       >                dw      Dict_Ptr + 2        // xt
 150+ EA9B             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ EA9B             >
 150+ EA9B             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ EA9B             >
 150+ EA9B             >//              ______________________________________________________________________
 150+ EA9B             >//              Dictionary part
 150+ EA9B             >
 150+ EA9B             >                org     Dict_Ptr
 150+ 7883             >
 150+ 7883 99 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 7885             >
 150+ 7885             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 7885 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 150+ 7888             >
 150+ 7888             >
 150+ 7888             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 7888             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 7888             >
 150+ 7888             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7888 55 78                        dw  BLK_SEEK
 152+ 788A C3 6A                        dw  BBUF
 153+ 788C 21 78 9B 69                  dw  BLK_FH, FETCH
 154+ 7890 4C 67                        dw  F_WRITE
 155+ 7892 A3 63 2F 00                  dw  LIT, $2F, QERROR
 155+ 7896 F3 6D
 156+ 7898 0F 69                        dw  DROP
 157+ 789A 53 68                        dw  EXIT
 158+ 789C
 159+ 789C              //  ______________________________________________________________________
 160+ 789C              //
 161+ 789C              // blk-init     n --
 162+ 789C              // seek block n  within blocks!.bin  file
 163+ 789C                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 163+ 789C             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 163+ 789C             >
 163+ 789C             >Dict_Ptr        defl    $
 163+ 789C             >
 163+ 789C             >//              ______________________________________________________________________
 163+ 789C             >//              Heap part
 163+ 789C             >
 163+ 789C             >
 163+ 789C             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ EA9B             >
 163+ EA9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ EA9B             >Latest_Definition defl  Heap_Ptr
 163+ EA9B             >
 163+ EA9B             >                // dummy db directives used to calculate length of namec
 163+ EA9B 42 4C 4B 2D >                db      "BLK-INIT"
 163+ EA9F 49 4E 49 54 >
 163+ EAA3             >len_NFA         defl    $ - temp_NFA
 163+ EAA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ EA9B             >
 163+ EA9B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ EA9C 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 163+ EAA0 49 4E 49 54 >
 163+ EAA4             >                org     $-1                 // alter last byte of Name just above to set
 163+ EAA3 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ EAA4             >
 163+ EAA4 8D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ EAA6             >Prev_Ptr        defl    Heap_Ptr
 163+ EAA6             >
 163+ EAA6             >mirror_Ptr      defl    $
 163+ EAA6             >
 163+ EAA6 9E 78       >                dw      Dict_Ptr + 2        // xt
 163+ EAA8             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ EAA8             >
 163+ EAA8             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ EAA8             >
 163+ EAA8             >//              ______________________________________________________________________
 163+ EAA8             >//              Dictionary part
 163+ EAA8             >
 163+ EAA8             >                org     Dict_Ptr
 163+ 789C             >
 163+ 789C A6 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 789E             >
 163+ 789E             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 789E CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 163+ 78A1             >
 163+ 78A1             >
 163+ 78A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 78A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 78A1             >
 163+ 78A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 78A1 21 78 9B 69                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 164+ 78A5 FB 66 0F 69
 165+ 78A9 28 78 BE 68                  dw  BLK_FNAME, ONE_PLUS
 166+ 78AD B7 6B A7 6A                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 166+ 78B1 5D 67
 167+ 78B3 A3 63 2C 00                  dw  LIT, $2C, QERROR
 167+ 78B7 F3 6D
 168+ 78B9 21 78 A5 69                  dw  BLK_FH, STORE
 169+ 78BD 53 68                        dw  EXIT
 170+ 78BF
 171+ 78BF              //  ______________________________________________________________________
 172+ 78BF              //
 173+ 78BF              // #sec
 174+ 78BF              // number of 512-Byte "sectors" available on thie sysstem.
 175+ 78BF              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 176+ 78BF
 177+ 78BF                              Constant_Def NSEC , "#SEC", 32767
 177+ 78BF             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 177+ 78BF             >
 177+ 78BF             >Dict_Ptr        defl    $
 177+ 78BF             >
 177+ 78BF             >//              ______________________________________________________________________
 177+ 78BF             >//              Heap part
 177+ 78BF             >
 177+ 78BF             >
 177+ 78BF             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ EAA8             >
 177+ EAA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ EAA8             >Latest_Definition defl  Heap_Ptr
 177+ EAA8             >
 177+ EAA8             >                // dummy db directives used to calculate length of namec
 177+ EAA8 23 53 45 43 >                db      "#SEC"
 177+ EAAC             >len_NFA         defl    $ - temp_NFA
 177+ EAAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ EAA8             >
 177+ EAA8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ EAA9 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 177+ EAAD             >                org     $-1                 // alter last byte of Name just above to set
 177+ EAAC C3          >                db      {b $} | END_BIT     // msb as name end
 177+ EAAD             >
 177+ EAAD 9B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ EAAF             >Prev_Ptr        defl    Heap_Ptr
 177+ EAAF             >
 177+ EAAF             >mirror_Ptr      defl    $
 177+ EAAF             >
 177+ EAAF C1 78       >                dw      Dict_Ptr + 2        // xt
 177+ EAB1             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ EAB1             >
 177+ EAB1             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ EAB1             >
 177+ EAB1             >//              ______________________________________________________________________
 177+ EAB1             >//              Dictionary part
 177+ EAB1             >
 177+ EAB1             >                org     Dict_Ptr
 177+ 78BF             >
 177+ 78BF AF 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 78C1             >
 177+ 78C1             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 78C1 CD 66 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 177+ 78C4             >
 177+ 78C4             >
 177+ 78C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 78C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 78C4             >
 177+ 78C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 78C4 FF 7F       >                dw      32767
 178+ 78C6
 179+ 78C6              //  ______________________________________________________________________
 180+ 78C6
 181+ 78C6
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
 124  78C6                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
   1+ 78C6              //  ______________________________________________________________________
   2+ 78C6              //
   3+ 78C6              //  L3.asm
   4+ 78C6              //
   5+ 78C6              //  Continuation of L2.asm
   6+ 78C6              //  I/O Block definitions
   7+ 78C6              //  ______________________________________________________________________
   8+ 78C6
   9+ 78C6
  10+ 78C6              //  ______________________________________________________________________
  11+ 78C6              //
  12+ 78C6              // r/w          a n f --
  13+ 78C6              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 78C6                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 78C6             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 78C6             >
  14+ 78C6             >Dict_Ptr        defl    $
  14+ 78C6             >
  14+ 78C6             >//              ______________________________________________________________________
  14+ 78C6             >//              Heap part
  14+ 78C6             >
  14+ 78C6             >
  14+ 78C6             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EAB1             >
  14+ EAB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EAB1             >Latest_Definition defl  Heap_Ptr
  14+ EAB1             >
  14+ EAB1             >                // dummy db directives used to calculate length of namec
  14+ EAB1 52 2F 57    >                db      "R/W"
  14+ EAB4             >len_NFA         defl    $ - temp_NFA
  14+ EAB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EAB1             >
  14+ EAB1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EAB2 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EAB5             >                org     $-1                 // alter last byte of Name just above to set
  14+ EAB4 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EAB5             >
  14+ EAB5 A8 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EAB7             >Prev_Ptr        defl    Heap_Ptr
  14+ EAB7             >
  14+ EAB7             >mirror_Ptr      defl    $
  14+ EAB7             >
  14+ EAB7 C8 78       >                dw      Dict_Ptr + 2        // xt
  14+ EAB9             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EAB9             >
  14+ EAB9             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EAB9             >
  14+ EAB9             >//              ______________________________________________________________________
  14+ EAB9             >//              Dictionary part
  14+ EAB9             >
  14+ EAB9             >                org     Dict_Ptr
  14+ 78C6             >
  14+ 78C6 B7 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 78C8             >
  14+ 78C8             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 78C8 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 78CB             >
  14+ 78CB             >
  14+ 78CB             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 78CB             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 78CB             >
  14+ 78CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 78CB 5D 68                        dw      TO_R                    // >r
  16+ 78CD C5 68                        dw      ONE_SUBTRACT            // 1-
  17+ 78CF 2A 69 8A 68                  dw      DUP, ZLESS              // dup 0<
  18+ 78D3 06 69 C1 78                  dw      OVER, NSEC              // over #sec
  19+ 78D7 C5 68 30 6C                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 78DB 22 68                        dw      OR_OP                   // or
  21+ 78DD A3 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 78E1 F3 6D
  22+ 78E3 68 68                        dw      R_TO                    // r>
  23+ 78E5                                                              // if
  24+ 78E5 F5 63                        dw      ZBRANCH
  25+ 78E7 08 00                        dw      Read_Write_Else - $
  26+ 78E9 6C 78                        dw          BLK_READ            //      blk-read
  27+ 78EB E8 63                        dw      BRANCH
  28+ 78ED 04 00                        dw      Read_Write_Endif - $
  29+ 78EF              Read_Write_Else:                                // else
  30+ 78EF 85 78                        dw          BLK_WRITE           //      blk-write
  31+ 78F1              Read_Write_Endif:                               // endif
  32+ 78F1 53 68                        dw      EXIT                    // ;
  33+ 78F3
  34+ 78F3
  35+ 78F3              //  ______________________________________________________________________
  36+ 78F3              //
  37+ 78F3              // +buf        a1 -- a2 f
  38+ 78F3              // advences to next buffer, cyclically rotating along them
  39+ 78F3                              Colon_Def PBUF, "+BUF", is_normal
  39+ 78F3             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 78F3             >
  39+ 78F3             >Dict_Ptr        defl    $
  39+ 78F3             >
  39+ 78F3             >//              ______________________________________________________________________
  39+ 78F3             >//              Heap part
  39+ 78F3             >
  39+ 78F3             >
  39+ 78F3             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EAB9             >
  39+ EAB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EAB9             >Latest_Definition defl  Heap_Ptr
  39+ EAB9             >
  39+ EAB9             >                // dummy db directives used to calculate length of namec
  39+ EAB9 2B 42 55 46 >                db      "+BUF"
  39+ EABD             >len_NFA         defl    $ - temp_NFA
  39+ EABD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EAB9             >
  39+ EAB9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EABA 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EABE             >                org     $-1                 // alter last byte of Name just above to set
  39+ EABD C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EABE             >
  39+ EABE B1 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EAC0             >Prev_Ptr        defl    Heap_Ptr
  39+ EAC0             >
  39+ EAC0             >mirror_Ptr      defl    $
  39+ EAC0             >
  39+ EAC0 F5 78       >                dw      Dict_Ptr + 2        // xt
  39+ EAC2             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EAC2             >
  39+ EAC2             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EAC2             >
  39+ EAC2             >//              ______________________________________________________________________
  39+ EAC2             >//              Dictionary part
  39+ EAC2             >
  39+ EAC2             >                org     Dict_Ptr
  39+ 78F3             >
  39+ 78F3 C0 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 78F5             >
  39+ 78F5             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 78F5 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 78F8             >
  39+ 78F8             >
  39+ 78F8             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 78F8             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 78F8             >
  39+ 78F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 78F8 A3 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 78FC A5 68
  41+ 78FE 2A 69 21 6B                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7902 9B 69
  42+ 7904 02 6C                        dw      EQUALS                  // =
  43+ 7906                                                              // if
  44+ 7906 F5 63                        dw      ZBRANCH
  45+ 7908 08 00                        dw      PBuf_Endif - $
  46+ 790A 0F 69                        dw          DROP                //      drop
  47+ 790C 1B 6B 9B 69                  dw          FIRST, FETCH        //      first @
  48+ 7910              PBuf_Endif:                                     // endif
  49+ 7910 2A 69 8D 6B                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7914 9B 69
  50+ 7916 F6 6B                        dw      SUBTRACT                // -
  51+ 7918 53 68                        dw      EXIT                    // ;
  52+ 791A
  53+ 791A              //  ______________________________________________________________________
  54+ 791A              //
  55+ 791A              // update       --
  56+ 791A              // mark the last used block to be written to disk
  57+ 791A                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 791A             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 791A             >
  57+ 791A             >Dict_Ptr        defl    $
  57+ 791A             >
  57+ 791A             >//              ______________________________________________________________________
  57+ 791A             >//              Heap part
  57+ 791A             >
  57+ 791A             >
  57+ 791A             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EAC2             >
  57+ EAC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EAC2             >Latest_Definition defl  Heap_Ptr
  57+ EAC2             >
  57+ EAC2             >                // dummy db directives used to calculate length of namec
  57+ EAC2 55 50 44 41 >                db      "UPDATE"
  57+ EAC6 54 45       >
  57+ EAC8             >len_NFA         defl    $ - temp_NFA
  57+ EAC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EAC2             >
  57+ EAC2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EAC3 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EAC7 54 45       >
  57+ EAC9             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAC8 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAC9             >
  57+ EAC9 B9 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EACB             >Prev_Ptr        defl    Heap_Ptr
  57+ EACB             >
  57+ EACB             >mirror_Ptr      defl    $
  57+ EACB             >
  57+ EACB 1C 79       >                dw      Dict_Ptr + 2        // xt
  57+ EACD             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EACD             >
  57+ EACD             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EACD             >
  57+ EACD             >//              ______________________________________________________________________
  57+ EACD             >//              Dictionary part
  57+ EACD             >
  57+ EACD             >                org     Dict_Ptr
  57+ 791A             >
  57+ 791A CB 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 791C             >
  57+ 791C             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 791C CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 791F             >
  57+ 791F             >
  57+ 791F             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 791F             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 791F             >
  57+ 791F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 791F 8D 6B 9B 69                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7923 9B 69
  59+ 7925 A3 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7929 22 68
  60+ 792B 8D 6B 9B 69                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 792F A5 69
  61+ 7931 53 68                        dw      EXIT                    // ;
  62+ 7933
  63+ 7933
  64+ 7933              //  ______________________________________________________________________
  65+ 7933              //
  66+ 7933              // empty-buffers --
  67+ 7933                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7933             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7933             >
  67+ 7933             >Dict_Ptr        defl    $
  67+ 7933             >
  67+ 7933             >//              ______________________________________________________________________
  67+ 7933             >//              Heap part
  67+ 7933             >
  67+ 7933             >
  67+ 7933             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EACD             >
  67+ EACD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EACD             >Latest_Definition defl  Heap_Ptr
  67+ EACD             >
  67+ EACD             >                // dummy db directives used to calculate length of namec
  67+ EACD 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAD1 59 2D 42 55 >
  67+ EAD5 46 46 45 52 >
  67+ EAD9 53          >
  67+ EADA             >len_NFA         defl    $ - temp_NFA
  67+ EADA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EACD             >
  67+ EACD 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EACE 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAD2 59 2D 42 55 >
  67+ EAD6 46 46 45 52 >
  67+ EADA 53          >
  67+ EADB             >                org     $-1                 // alter last byte of Name just above to set
  67+ EADA D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EADB             >
  67+ EADB C2 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EADD             >Prev_Ptr        defl    Heap_Ptr
  67+ EADD             >
  67+ EADD             >mirror_Ptr      defl    $
  67+ EADD             >
  67+ EADD 35 79       >                dw      Dict_Ptr + 2        // xt
  67+ EADF             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EADF             >
  67+ EADF             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EADF             >
  67+ EADF             >//              ______________________________________________________________________
  67+ EADF             >//              Dictionary part
  67+ EADF             >
  67+ EADF             >                org     Dict_Ptr
  67+ 7933             >
  67+ 7933 DD 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 7935             >
  67+ 7935             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7935 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7938             >
  67+ 7938             >
  67+ 7938             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7938             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7938             >
  67+ 7938             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7938 1B 6B 9B 69                  dw      FIRST, FETCH            // first @
  69+ 793C 21 6B 9B 69                  dw      LIMIT, FETCH            // limit @
  70+ 7940 06 69 F6 6B                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7944 9D 70
  71+ 7946 53 68                        dw      EXIT                    // ;
  72+ 7948
  73+ 7948              //  ______________________________________________________________________
  74+ 7948              //
  75+ 7948              // buffer       n -- a
  76+ 7948              // read block n and gives the address to a buffer
  77+ 7948              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7948              // disk before reading the block n.
  79+ 7948
  80+ 7948                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7948             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7948             >
  80+ 7948             >Dict_Ptr        defl    $
  80+ 7948             >
  80+ 7948             >//              ______________________________________________________________________
  80+ 7948             >//              Heap part
  80+ 7948             >
  80+ 7948             >
  80+ 7948             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EADF             >
  80+ EADF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EADF             >Latest_Definition defl  Heap_Ptr
  80+ EADF             >
  80+ EADF             >                // dummy db directives used to calculate length of namec
  80+ EADF 42 55 46 46 >                db      "BUFFER"
  80+ EAE3 45 52       >
  80+ EAE5             >len_NFA         defl    $ - temp_NFA
  80+ EAE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EADF             >
  80+ EADF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EAE0 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAE4 45 52       >
  80+ EAE6             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAE5 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EAE6             >
  80+ EAE6 CD 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EAE8             >Prev_Ptr        defl    Heap_Ptr
  80+ EAE8             >
  80+ EAE8             >mirror_Ptr      defl    $
  80+ EAE8             >
  80+ EAE8 4A 79       >                dw      Dict_Ptr + 2        // xt
  80+ EAEA             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EAEA             >
  80+ EAEA             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EAEA             >
  80+ EAEA             >//              ______________________________________________________________________
  80+ EAEA             >//              Dictionary part
  80+ EAEA             >
  80+ EAEA             >                org     Dict_Ptr
  80+ 7948             >
  80+ 7948 E8 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 794A             >
  80+ 794A             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 794A CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 794D             >
  80+ 794D             >
  80+ 794D             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 794D             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 794D             >
  80+ 794D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 794D 87 6B 9B 69                  dw      USED, FETCH             // used @
  82+ 7951 2A 69 5D 68                  dw      DUP, TO_R               // dup >r
  83+ 7955                                                              // begin
  84+ 7955              Buffer_Begin:
  85+ 7955 F5 78                        dw          PBUF                //      +buf
  86+ 7957                                                              // until
  87+ 7957 F5 63                        dw      ZBRANCH
  88+ 7959 FC FF                        dw      Buffer_Begin - $
  89+ 795B 87 6B A5 69                  dw      USED, STORE             // used !
  90+ 795F 73 68 9B 69                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7963 8A 68
  91+ 7965                                                              // if
  92+ 7965 F5 63                        dw      ZBRANCH
  93+ 7967 14 00                        dw      Buffer_Endif - $
  94+ 7969 73 68 D4 68                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 796D 73 68 9B 69                  dw          R_OP, FETCH         //      r fetch
  96+ 7971 A3 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7975 13 68                        dw          AND_OP              //      and
  98+ 7977 92 6A C8 78                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 797B              Buffer_Endif:                                   // endif
 100+ 797B 73 68 A5 69                  dw      R_OP, STORE             // r !
 101+ 797F 73 68 8D 6B                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7983 A5 69
 102+ 7985 68 68 D4 68                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7989 53 68                        dw      EXIT                    // ;
 104+ 798B
 105+ 798B              //  ______________________________________________________________________
 106+ 798B              //
 107+ 798B              // block        n -- a
 108+ 798B              // Leaves the buffer address that contains the block n.
 109+ 798B              // If the block is not already present, it will be loaded from disk
 110+ 798B              // The block previously inside the buffer, if modified, is rewritten to
 111+ 798B              // disk before reading the block n.
 112+ 798B              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 798B
 114+ 798B                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 798B             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 798B             >
 114+ 798B             >Dict_Ptr        defl    $
 114+ 798B             >
 114+ 798B             >//              ______________________________________________________________________
 114+ 798B             >//              Heap part
 114+ 798B             >
 114+ 798B             >
 114+ 798B             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EAEA             >
 114+ EAEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EAEA             >Latest_Definition defl  Heap_Ptr
 114+ EAEA             >
 114+ EAEA             >                // dummy db directives used to calculate length of namec
 114+ EAEA 42 4C 4F 43 >                db      "BLOCK"
 114+ EAEE 4B          >
 114+ EAEF             >len_NFA         defl    $ - temp_NFA
 114+ EAEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EAEA             >
 114+ EAEA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EAEB 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAEF 4B          >
 114+ EAF0             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAEF CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAF0             >
 114+ EAF0 DF 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAF2             >Prev_Ptr        defl    Heap_Ptr
 114+ EAF2             >
 114+ EAF2             >mirror_Ptr      defl    $
 114+ EAF2             >
 114+ EAF2 8D 79       >                dw      Dict_Ptr + 2        // xt
 114+ EAF4             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAF4             >
 114+ EAF4             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAF4             >
 114+ EAF4             >//              ______________________________________________________________________
 114+ EAF4             >//              Dictionary part
 114+ EAF4             >
 114+ EAF4             >                org     Dict_Ptr
 114+ 798B             >
 114+ 798B F2 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 798D             >
 114+ 798D             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 798D CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7990             >
 114+ 7990             >
 114+ 7990             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7990             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7990             >
 114+ 7990             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7990                          //  dw      OFFSET, FETCH           // offset @
 116+ 7990                          //  dw      PLUS
 117+ 7990 5D 68                        dw      TO_R                    // + >r
 118+ 7992 8D 6B 9B 69                  dw      PREV, FETCH             // prev @
 119+ 7996 2A 69 9B 69                  dw      DUP, FETCH              // dup @
 120+ 799A 73 68 F6 6B                  dw      R_OP, SUBTRACT          // r -
 121+ 799E 2A 69 A5 68                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 79A2                                                              // if
 123+ 79A2 F5 63                        dw        ZBRANCH
 124+ 79A4 32 00                        dw        Block_Endif_1 - $
 125+ 79A6              Block_Begin:                                    //      begin
 126+ 79A6 F5 78 78 68                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 79AA                                                              //          if
 128+ 79AA F5 63                        dw          ZBRANCH
 129+ 79AC 12 00                        dw          Block_Endif_2 - $
 130+ 79AE 0F 69                        dw              DROP            //              drop
 131+ 79B0 73 68 4A 79                  dw              R_OP, BUFFER    //              r buffer
 132+ 79B4 2A 69                        dw              DUP             //              dup
 133+ 79B6 73 68 99 6A                  dw              R_OP, ONE       //              r 1
 134+ 79BA C8 78                        dw              READ_WRITE      //              r/w
 135+ 79BC E0 68                        dw              TWO_MINUS       //              2-
 136+ 79BE              Block_Endif_2:                                  //          endif
 137+ 79BE 2A 69 9B 69                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 79C2 73 68
 138+ 79C4 F6 6B 2A 69                  dw          SUBTRACT, DUP       //          - dup
 139+ 79C8 A5 68 78 68                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 79CC                                                              //      until
 141+ 79CC F5 63                        dw        ZBRANCH
 142+ 79CE D8 FF                        dw        Block_Begin - $
 143+ 79D0 2A 69 8D 6B                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 79D4 A5 69
 144+ 79D6              Block_Endif_1:                                  // endif
 145+ 79D6 68 68 0F 69                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 79DA D4 68
 146+ 79DC 53 68                        dw      EXIT                    // ;
 147+ 79DE
 148+ 79DE              //  ______________________________________________________________________
 149+ 79DE              //
 150+ 79DE              // #buff        -- n
 151+ 79DE              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 79DE                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 79DE             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 79DE             >
 152+ 79DE             >Dict_Ptr        defl    $
 152+ 79DE             >
 152+ 79DE             >//              ______________________________________________________________________
 152+ 79DE             >//              Heap part
 152+ 79DE             >
 152+ 79DE             >
 152+ 79DE             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAF4             >
 152+ EAF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAF4             >Latest_Definition defl  Heap_Ptr
 152+ EAF4             >
 152+ EAF4             >                // dummy db directives used to calculate length of namec
 152+ EAF4 23 42 55 46 >                db      "#BUFF"
 152+ EAF8 46          >
 152+ EAF9             >len_NFA         defl    $ - temp_NFA
 152+ EAF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAF4             >
 152+ EAF4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAF5 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EAF9 46          >
 152+ EAFA             >                org     $-1                 // alter last byte of Name just above to set
 152+ EAF9 C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EAFA             >
 152+ EAFA EA 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EAFC             >Prev_Ptr        defl    Heap_Ptr
 152+ EAFC             >
 152+ EAFC             >mirror_Ptr      defl    $
 152+ EAFC             >
 152+ EAFC E0 79       >                dw      Dict_Ptr + 2        // xt
 152+ EAFE             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAFE             >
 152+ EAFE             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAFE             >
 152+ EAFE             >//              ______________________________________________________________________
 152+ EAFE             >//              Dictionary part
 152+ EAFE             >
 152+ EAFE             >                org     Dict_Ptr
 152+ 79DE             >
 152+ 79DE FC 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 79E0             >
 152+ 79E0             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 79E0 CD 66 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 79E3             >
 152+ 79E3             >
 152+ 79E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 79E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 79E3             >
 152+ 79E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 79E3 07 00       >                dw      7
 153+ 79E5
 154+ 79E5              //  ______________________________________________________________________
 155+ 79E5              //
 156+ 79E5              // flush        --
 157+ 79E5                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 79E5             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 79E5             >
 157+ 79E5             >Dict_Ptr        defl    $
 157+ 79E5             >
 157+ 79E5             >//              ______________________________________________________________________
 157+ 79E5             >//              Heap part
 157+ 79E5             >
 157+ 79E5             >
 157+ 79E5             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAFE             >
 157+ EAFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAFE             >Latest_Definition defl  Heap_Ptr
 157+ EAFE             >
 157+ EAFE             >                // dummy db directives used to calculate length of namec
 157+ EAFE 46 4C 55 53 >                db      "FLUSH"
 157+ EB02 48          >
 157+ EB03             >len_NFA         defl    $ - temp_NFA
 157+ EB03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAFE             >
 157+ EAFE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAFF 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EB03 48          >
 157+ EB04             >                org     $-1                 // alter last byte of Name just above to set
 157+ EB03 C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EB04             >
 157+ EB04 F4 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EB06             >Prev_Ptr        defl    Heap_Ptr
 157+ EB06             >
 157+ EB06             >mirror_Ptr      defl    $
 157+ EB06             >
 157+ EB06 E7 79       >                dw      Dict_Ptr + 2        // xt
 157+ EB08             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EB08             >
 157+ EB08             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EB08             >
 157+ EB08             >//              ______________________________________________________________________
 157+ EB08             >//              Dictionary part
 157+ EB08             >
 157+ EB08             >                org     Dict_Ptr
 157+ 79E5             >
 157+ 79E5 06 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 79E7             >
 157+ 79E7             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 79E7 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 79EA             >
 157+ 79EA             >
 157+ 79EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 79EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 79EA             >
 157+ 79EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 79EA E0 79 BE 68                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 79EE 92 6A
 159+ 79F0              Flush_Do:                                       // do
 160+ 79F0 34 64                        dw      C_DO
 161+ 79F2 92 6A 4A 79                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 79F6 0F 69
 162+ 79F8                                                              // loop
 163+ 79F8 E0 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 79FC 21 78 9B 69                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 7A00 08 67 0F 69                  dw      F_SYNC, DROP            // f_sync drop
 166+ 7A04 53 68                        dw      EXIT                    // exit
 167+ 7A06
 168+ 7A06              //  ______________________________________________________________________
 169+ 7A06              //
 170+ 7A06              // f_getline    a m fh -- n
 171+ 7A06              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 7A06              // Address a is left for subsequent processing
 173+ 7A06              // and n as the actual number of byte read, that is the length of line
 174+ 7A06                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 7A06             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 7A06             >
 174+ 7A06             >Dict_Ptr        defl    $
 174+ 7A06             >
 174+ 7A06             >//              ______________________________________________________________________
 174+ 7A06             >//              Heap part
 174+ 7A06             >
 174+ 7A06             >
 174+ 7A06             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EB08             >
 174+ EB08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EB08             >Latest_Definition defl  Heap_Ptr
 174+ EB08             >
 174+ EB08             >                // dummy db directives used to calculate length of namec
 174+ EB08 46 5F 47 45 >                db      "F_GETLINE"
 174+ EB0C 54 4C 49 4E >
 174+ EB10 45          >
 174+ EB11             >len_NFA         defl    $ - temp_NFA
 174+ EB11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EB08             >
 174+ EB08 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EB09 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EB0D 54 4C 49 4E >
 174+ EB11 45          >
 174+ EB12             >                org     $-1                 // alter last byte of Name just above to set
 174+ EB11 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EB12             >
 174+ EB12 FE 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EB14             >Prev_Ptr        defl    Heap_Ptr
 174+ EB14             >
 174+ EB14             >mirror_Ptr      defl    $
 174+ EB14             >
 174+ EB14 08 7A       >                dw      Dict_Ptr + 2        // xt
 174+ EB16             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EB16             >
 174+ EB16             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EB16             >
 174+ EB16             >//              ______________________________________________________________________
 174+ EB16             >//              Dictionary part
 174+ EB16             >
 174+ EB16             >                org     Dict_Ptr
 174+ 7A06             >
 174+ 7A06 14 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 7A08             >
 174+ 7A08             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 7A08 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 7A0B             >
 174+ 7A0B             >
 174+ 7A0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 7A0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 7A0B             >
 174+ 7A0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 7A0B 5D 68                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 7A0D 1A 69                        dw      TUCK                    // tuck             ( m a m )
 177+ 7A0F 73 68 15 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 7A13 A3 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 178+ 7A17 F3 6D
 179+ 7A19
 180+ 7A19 6C 69 06 69                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 7A1D BE 68 23 69                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 7A21
 183+ 7A21 73 68 2F 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 7A25 A3 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 184+ 7A29 F3 6D
 185+ 7A2B                                                              // if ( at least 1 chr was read )  \  fh
 186+ 7A2B F5 63                        dw      ZBRANCH
 187+ 7A2D 3C 00                        dw      FGetline_Else - $
 188+ 7A2F A3 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 7A33 29 65
 189+ 7A35 0F 69 14 69                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 7A39 23 69                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 7A3B A3 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 7A3F 29 65
 192+ 7A41 0F 69 14 69                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 7A45 31 69 3B 6C                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 7A49 2A 69 A5 6B                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 7A4D A5 69
 195+ 7A4F 2A 69 5D 68                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 7A53 6C 69 68 68                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 7A57 92 6A AF 68                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 7A5B 68 68 DD 66                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 7A5F A3 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 199+ 7A63 F3 6D
 200+ 7A65                                                              // else
 201+ 7A65 E8 63                        dw      BRANCH
 202+ 7A67 0C 00                        dw      FGetline_Endif - $
 203+ 7A69              FGetline_Else:
 204+ 7A69 68 68                        dw          R_TO                //      r>              ( m d a fh )
 205+ 7A6B 6C 69 66 69                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 7A6F 0F 69 92 6A                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 7A73              FGetline_Endif:                                 // endif
 208+ 7A73 5D 68 2A 69                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 7A77 2A 69
 209+ 7A79 BE 68 23 69                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 7A7D 73 68 94 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 7A81 79 69 A5 68                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 7A85 92 6A 23 69                  dw      ZERO, SWAP              // 0 swap
 213+ 7A89 D8 68 A5 69                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 7A8D 73 68 A5 68                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 7A91 C5 68
 215+ 7A93 23 69 73 68                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 7A97 F6 6B
 216+ 7A99 A8 70                        dw      BLANK                   // blank
 217+ 7A9B 68 68                        dw      R_TO                    // r>                   ( n )
 218+ 7A9D 53 68                        dw      EXIT                    // ;
 219+ 7A9F
 220+ 7A9F              //  ______________________________________________________________________
 221+ 7A9F              //
 222+ 7A9F              // f_include    fh --
 223+ 7A9F              // Given a filehandle includes the source from file
 224+ 7A9F                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 7A9F             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 7A9F             >
 224+ 7A9F             >Dict_Ptr        defl    $
 224+ 7A9F             >
 224+ 7A9F             >//              ______________________________________________________________________
 224+ 7A9F             >//              Heap part
 224+ 7A9F             >
 224+ 7A9F             >
 224+ 7A9F             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EB16             >
 224+ EB16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EB16             >Latest_Definition defl  Heap_Ptr
 224+ EB16             >
 224+ EB16             >                // dummy db directives used to calculate length of namec
 224+ EB16 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EB1A 43 4C 55 44 >
 224+ EB1E 45          >
 224+ EB1F             >len_NFA         defl    $ - temp_NFA
 224+ EB1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EB16             >
 224+ EB16 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EB17 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EB1B 43 4C 55 44 >
 224+ EB1F 45          >
 224+ EB20             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB1F C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB20             >
 224+ EB20 08 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB22             >Prev_Ptr        defl    Heap_Ptr
 224+ EB22             >
 224+ EB22             >mirror_Ptr      defl    $
 224+ EB22             >
 224+ EB22 A1 7A       >                dw      Dict_Ptr + 2        // xt
 224+ EB24             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB24             >
 224+ EB24             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB24             >
 224+ EB24             >//              ______________________________________________________________________
 224+ EB24             >//              Dictionary part
 224+ EB24             >
 224+ EB24             >                org     Dict_Ptr
 224+ 7A9F             >
 224+ 7A9F 22 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 7AA1             >
 224+ 7AA1             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 7AA1 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 7AA4             >
 224+ 7AA4             >
 224+ 7AA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 7AA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 7AA4             >
 224+ 7AA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 7AA4 33 6B 9B 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 7AA8 5D 68
 226+ 7AAA 39 6B 9B 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 7AAE 5D 68
 227+ 7AB0 9F 6B 9B 69                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 7AB4 5D 68
 228+ 7AB6 73 68                        dw      R_OP                    // r
 229+ 7AB8                                                              // if
 230+ 7AB8 F5 63                        dw      ZBRANCH
 231+ 7ABA 20 00                        dw      FInclude_Else_1 - $
 232+ 7ABC 73 68 15 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 233+ 7AC0 A3 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 233+ 7AC4 F3 6D
 234+ 7AC6 39 6B 9B 69                  dw          TO_IN, FETCH        //      >in @ 2-
 235+ 7ACA E0 68                        dw          TWO_MINUS
 236+ 7ACC A5 6B 9B 69                  dw          SPAN, FETCH         //      span @ -
 237+ 7AD0 F6 6B                        dw          SUBTRACT
 238+ 7AD2 EB 6B AF 68                  dw          S_TO_D, DPLUS       //      s>d d+
 239+ 7AD6                                                              // else
 240+ 7AD6 E8 63                        dw      BRANCH
 241+ 7AD8 06 00                        dw      FInclude_Endif_1 - $
 242+ 7ADA              FInclude_Else_1:
 243+ 7ADA 92 6A 92 6A                  dw          ZERO, ZERO          //      0 0
 244+ 7ADE                                                              // endif
 245+ 7ADE              FInclude_Endif_1:
 246+ 7ADE 5D 68 5D 68                  dw      TO_R, TO_R              // >r >r
 247+ 7AE2 9F 6B A5 69                  dw      SOURCE_ID, STORE        // source-id !
 248+ 7AE6              FInclude_Begin:                                 // begin
 249+ 7AE6 99 6A 8D 79                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 249+ 7AEA C3 6A
 250+ 7AEC 79 69 A8 70                  dw          TWO_DUP, BLANK      //      2dup blank
 251+ 7AF0 23 69 BE 68                  dw          SWAP, ONE_PLUS      //      swap 1+
 252+ 7AF4 23 69 D8 68                  dw          SWAP, CELL_MINUS    //      swap cell-
 253+ 7AF8 9F 6B 9B 69                  dw          SOURCE_ID, FETCH    //      source-id @
 254+ 7AFC 08 7A                        dw          F_GETLINE           //      f_getline
 255+ 7AFE                                                              // while
 256+ 7AFE F5 63                        dw      ZBRANCH
 257+ 7B00 14 00                        dw      FInclude_Repeat - $
 258+ 7B02 99 6A 33 6B                  dw          ONE, BLK, STORE     //      1 blk !
 258+ 7B06 A5 69
 259+ 7B08 92 6A 39 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
 259+ 7B0C A5 69
 260+ 7B0E D8 74                        dw          INTERPRET           //      interpret
 261+ 7B10 E8 63                        dw      BRANCH
 262+ 7B12 D4 FF                        dw      FInclude_Begin - $
 263+ 7B14              FInclude_Repeat:                                // repeat
 264+ 7B14 9F 6B 9B 69                  dw      SOURCE_ID, FETCH        // source-id @
 265+ 7B18 92 6A 9F 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 265+ 7B1C A5 69
 266+ 7B1E FB 66                        dw      F_CLOSE                 // f_close
 267+ 7B20 A3 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 267+ 7B24 F3 6D
 268+ 7B26 68 68 68 68                  dw      R_TO, R_TO, R_TO        // r> r> r>
 268+ 7B2A 68 68
 269+ 7B2C 2A 69 9F 6B                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 269+ 7B30 A5 69
 270+ 7B32                                                              // if
 271+ 7B32 F5 63                        dw      ZBRANCH
 272+ 7B34 12 00                        dw      FInclude_Else_2 - $
 273+ 7B36 9F 6B 9B 69                  dw          SOURCE_ID, FETCH    //      source-id @
 274+ 7B3A DD 66                        dw          F_SEEK              //      f_seek
 275+ 7B3C A3 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 275+ 7B40 F3 6D
 276+ 7B42                                                              // else
 277+ 7B42 E8 63                        dw      BRANCH
 278+ 7B44 04 00                        dw      FInclude_Endif_2 - $
 279+ 7B46              FInclude_Else_2:
 280+ 7B46 66 69                        dw          TWO_DROP            //      2drop
 281+ 7B48              FInclude_Endif_2:                               // endif
 282+ 7B48 68 68 39 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 282+ 7B4C A5 69
 283+ 7B4E 68 68 33 6B                  dw      R_TO, BLK, STORE        // r> blk !
 283+ 7B52 A5 69
 284+ 7B54 53 68                        dw      EXIT                    // ;
 285+ 7B56
 286+ 7B56              //  ______________________________________________________________________
 287+ 7B56              //
 288+ 7B56              // open<         -- fh
 289+ 7B56              // Open the following filename and return it file-handle
 290+ 7B56              // Used in the form OPEN CCCC
 291+ 7B56                              Colon_Def OPEN_FH, "OPEN<", is_normal
 291+ 7B56             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 291+ 7B56             >
 291+ 7B56             >Dict_Ptr        defl    $
 291+ 7B56             >
 291+ 7B56             >//              ______________________________________________________________________
 291+ 7B56             >//              Heap part
 291+ 7B56             >
 291+ 7B56             >
 291+ 7B56             >                org     (Heap_Ptr & $1FFF) + $E000
 291+ EB24             >
 291+ EB24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ EB24             >Latest_Definition defl  Heap_Ptr
 291+ EB24             >
 291+ EB24             >                // dummy db directives used to calculate length of namec
 291+ EB24 4F 50 45 4E >                db      "OPEN<"
 291+ EB28 3C          >
 291+ EB29             >len_NFA         defl    $ - temp_NFA
 291+ EB29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ EB24             >
 291+ EB24 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ EB25 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 291+ EB29 3C          >
 291+ EB2A             >                org     $-1                 // alter last byte of Name just above to set
 291+ EB29 BC          >                db      {b $} | END_BIT     // msb as name end
 291+ EB2A             >
 291+ EB2A 16 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 291+ EB2C             >Prev_Ptr        defl    Heap_Ptr
 291+ EB2C             >
 291+ EB2C             >mirror_Ptr      defl    $
 291+ EB2C             >
 291+ EB2C 58 7B       >                dw      Dict_Ptr + 2        // xt
 291+ EB2E             >Heap_Ptr        defl    $ - $E000           // save current HP
 291+ EB2E             >
 291+ EB2E             >Current_HP      defl  $ - $E000             // used to set HP once!
 291+ EB2E             >
 291+ EB2E             >//              ______________________________________________________________________
 291+ EB2E             >//              Dictionary part
 291+ EB2E             >
 291+ EB2E             >                org     Dict_Ptr
 291+ 7B56             >
 291+ 7B56 2C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 291+ 7B58             >
 291+ 7B58             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 7B58 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 7B5B             >
 291+ 7B5B             >
 291+ 7B5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 7B5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 7B5B             >
 291+ 7B5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 7B5B B5 6A                        dw      BL
 293+ 7B5D D5 70 2F 6F                  dw      WORD, COUNT, OVER       // bl word count over
 293+ 7B61 06 69
 294+ 7B63 A5 68 92 6A                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 294+ 7B67 23 69 A5 69
 295+ 7B6B C6 70 99 6A                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 295+ 7B6F 5D 67
 296+ 7B71 A3 63 2B 00                  dw      LIT, 43                 // 43
 297+ 7B75 F3 6D                        dw      QERROR                  // ?error
 298+ 7B77 53 68                        dw      EXIT                    // ;
 299+ 7B79
 300+ 7B79              //  ______________________________________________________________________
 301+ 7B79              //
 302+ 7B79              // use          -- cccc
 303+ 7B79              // Include the following filename
 304+ 7B79                              Colon_Def USE, "USE", is_normal
 304+ 7B79             >                New_Def  USE, "USE", Enter_Ptr, is_normal ; ok
 304+ 7B79             >
 304+ 7B79             >Dict_Ptr        defl    $
 304+ 7B79             >
 304+ 7B79             >//              ______________________________________________________________________
 304+ 7B79             >//              Heap part
 304+ 7B79             >
 304+ 7B79             >
 304+ 7B79             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ EB2E             >
 304+ EB2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ EB2E             >Latest_Definition defl  Heap_Ptr
 304+ EB2E             >
 304+ EB2E             >                // dummy db directives used to calculate length of namec
 304+ EB2E 55 53 45    >                db      "USE"
 304+ EB31             >len_NFA         defl    $ - temp_NFA
 304+ EB31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ EB2E             >
 304+ EB2E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ EB2F 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 304+ EB32             >                org     $-1                 // alter last byte of Name just above to set
 304+ EB31 C5          >                db      {b $} | END_BIT     // msb as name end
 304+ EB32             >
 304+ EB32 24 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ EB34             >Prev_Ptr        defl    Heap_Ptr
 304+ EB34             >
 304+ EB34             >mirror_Ptr      defl    $
 304+ EB34             >
 304+ EB34 7B 7B       >                dw      Dict_Ptr + 2        // xt
 304+ EB36             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ EB36             >
 304+ EB36             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ EB36             >
 304+ EB36             >//              ______________________________________________________________________
 304+ EB36             >//              Dictionary part
 304+ EB36             >
 304+ EB36             >                org     Dict_Ptr
 304+ 7B79             >
 304+ 7B79 34 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 7B7B             >
 304+ 7B7B             >USE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 7B7B CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 7B7E             >
 304+ 7B7E             >
 304+ 7B7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 7B7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 7B7E             >
 304+ 7B7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 7B7E 58 7B                        dw      OPEN_FH                 // open<
 306+ 7B80 21 78 9B 69                  dw      BLK_FH, FETCH           // blk-fh @
 307+ 7B84 FB 66 0F 69                  dw      F_CLOSE, DROP           // f_close drop
 308+ 7B88 21 78 A5 69                  dw      BLK_FH, STORE           // blk-fh !
 309+ 7B8C 53 68                        dw      EXIT                    // ;
 310+ 7B8E
 311+ 7B8E              //  ______________________________________________________________________
 312+ 7B8E              //
 313+ 7B8E              // include      -- cccc
 314+ 7B8E              // Include the following filename
 315+ 7B8E                              Colon_Def INCLUDE, "INCLUDE", is_normal
 315+ 7B8E             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 315+ 7B8E             >
 315+ 7B8E             >Dict_Ptr        defl    $
 315+ 7B8E             >
 315+ 7B8E             >//              ______________________________________________________________________
 315+ 7B8E             >//              Heap part
 315+ 7B8E             >
 315+ 7B8E             >
 315+ 7B8E             >                org     (Heap_Ptr & $1FFF) + $E000
 315+ EB36             >
 315+ EB36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 315+ EB36             >Latest_Definition defl  Heap_Ptr
 315+ EB36             >
 315+ EB36             >                // dummy db directives used to calculate length of namec
 315+ EB36 49 4E 43 4C >                db      "INCLUDE"
 315+ EB3A 55 44 45    >
 315+ EB3D             >len_NFA         defl    $ - temp_NFA
 315+ EB3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 315+ EB36             >
 315+ EB36 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 315+ EB37 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 315+ EB3B 55 44 45    >
 315+ EB3E             >                org     $-1                 // alter last byte of Name just above to set
 315+ EB3D C5          >                db      {b $} | END_BIT     // msb as name end
 315+ EB3E             >
 315+ EB3E 2E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 315+ EB40             >Prev_Ptr        defl    Heap_Ptr
 315+ EB40             >
 315+ EB40             >mirror_Ptr      defl    $
 315+ EB40             >
 315+ EB40 90 7B       >                dw      Dict_Ptr + 2        // xt
 315+ EB42             >Heap_Ptr        defl    $ - $E000           // save current HP
 315+ EB42             >
 315+ EB42             >Current_HP      defl  $ - $E000             // used to set HP once!
 315+ EB42             >
 315+ EB42             >//              ______________________________________________________________________
 315+ EB42             >//              Dictionary part
 315+ EB42             >
 315+ EB42             >                org     Dict_Ptr
 315+ 7B8E             >
 315+ 7B8E 40 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 315+ 7B90             >
 315+ 7B90             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 315+ 7B90 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 315+ 7B93             >
 315+ 7B93             >
 315+ 7B93             >                endif           ; ok        // for other definitions it "points" the correct handler
 315+ 7B93             >                // Use of "; ok" to suppress "warning[fwdref]"
 315+ 7B93             >
 315+ 7B93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 316+ 7B93 58 7B                        dw      OPEN_FH                 // open
 317+ 7B95 2A 69 A1 7A                  dw      DUP, F_INCLUDE          // dup f_include
 318+ 7B99 FB 66 0F 69                  dw      F_CLOSE, DROP           // f_close drop
 319+ 7B9D 53 68                        dw      EXIT                    // ;
 320+ 7B9F
 321+ 7B9F              //  ______________________________________________________________________
 322+ 7B9F              //
 323+ 7B9F              // needs
 324+ 7B9F              // check for cccc exists in vocabulary
 325+ 7B9F              // if it doesn't then  INCLUDE  inc/cccc.F
 326+ 7B9F
 327+ 7B9F              // temp filename cccc.f as counted string zero-padded
 328+ 7B9F                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 328+ 7B9F             >
 328+ 7B9F             >Dict_Ptr        defl    $
 328+ 7B9F             >
 328+ 7B9F             >//              ______________________________________________________________________
 328+ 7B9F             >//              Heap part
 328+ 7B9F             >
 328+ 7B9F             >
 328+ 7B9F             >                org     (Heap_Ptr & $1FFF) + $E000
 328+ EB42             >
 328+ EB42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 328+ EB42             >Latest_Definition defl  Heap_Ptr
 328+ EB42             >
 328+ EB42             >                // dummy db directives used to calculate length of namec
 328+ EB42 4E 45 45 44 >                db      "NEEDS-W"
 328+ EB46 53 2D 57    >
 328+ EB49             >len_NFA         defl    $ - temp_NFA
 328+ EB49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 328+ EB42             >
 328+ EB42 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 328+ EB43 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 328+ EB47 53 2D 57    >
 328+ EB4A             >                org     $-1                 // alter last byte of Name just above to set
 328+ EB49 D7          >                db      {b $} | END_BIT     // msb as name end
 328+ EB4A             >
 328+ EB4A 36 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 328+ EB4C             >Prev_Ptr        defl    Heap_Ptr
 328+ EB4C             >
 328+ EB4C             >mirror_Ptr      defl    $
 328+ EB4C             >
 328+ EB4C A1 7B       >                dw      Dict_Ptr + 2        // xt
 328+ EB4E             >Heap_Ptr        defl    $ - $E000           // save current HP
 328+ EB4E             >
 328+ EB4E             >Current_HP      defl  $ - $E000             // used to set HP once!
 328+ EB4E             >
 328+ EB4E             >//              ______________________________________________________________________
 328+ EB4E             >//              Dictionary part
 328+ EB4E             >
 328+ EB4E             >                org     Dict_Ptr
 328+ 7B9F             >
 328+ 7B9F 4C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 328+ 7BA1             >
 328+ 7BA1             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 328+ 7BA1 CD 1C 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 328+ 7BA4             >
 328+ 7BA4             >
 328+ 7BA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 328+ 7BA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 328+ 7BA4             >
 328+ 7BA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 329+ 7BA4 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 330+ 7BC7              // temp complete path+filename
 331+ 7BC7                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 331+ 7BC7             >
 331+ 7BC7             >Dict_Ptr        defl    $
 331+ 7BC7             >
 331+ 7BC7             >//              ______________________________________________________________________
 331+ 7BC7             >//              Heap part
 331+ 7BC7             >
 331+ 7BC7             >
 331+ 7BC7             >                org     (Heap_Ptr & $1FFF) + $E000
 331+ EB4E             >
 331+ EB4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 331+ EB4E             >Latest_Definition defl  Heap_Ptr
 331+ EB4E             >
 331+ EB4E             >                // dummy db directives used to calculate length of namec
 331+ EB4E 4E 45 45 44 >                db      "NEEDS-FN"
 331+ EB52 53 2D 46 4E >
 331+ EB56             >len_NFA         defl    $ - temp_NFA
 331+ EB56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 331+ EB4E             >
 331+ EB4E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 331+ EB4F 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 331+ EB53 53 2D 46 4E >
 331+ EB57             >                org     $-1                 // alter last byte of Name just above to set
 331+ EB56 CE          >                db      {b $} | END_BIT     // msb as name end
 331+ EB57             >
 331+ EB57 42 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 331+ EB59             >Prev_Ptr        defl    Heap_Ptr
 331+ EB59             >
 331+ EB59             >mirror_Ptr      defl    $
 331+ EB59             >
 331+ EB59 C9 7B       >                dw      Dict_Ptr + 2        // xt
 331+ EB5B             >Heap_Ptr        defl    $ - $E000           // save current HP
 331+ EB5B             >
 331+ EB5B             >Current_HP      defl  $ - $E000             // used to set HP once!
 331+ EB5B             >
 331+ EB5B             >//              ______________________________________________________________________
 331+ EB5B             >//              Dictionary part
 331+ EB5B             >
 331+ EB5B             >                org     Dict_Ptr
 331+ 7BC7             >
 331+ 7BC7 59 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 331+ 7BC9             >
 331+ 7BC9             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 331+ 7BC9 CD 1C 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 331+ 7BCC             >
 331+ 7BCC             >
 331+ 7BCC             >                endif           ; ok        // for other definitions it "points" the correct handler
 331+ 7BCC             >                // Use of "; ok" to suppress "warning[fwdref]"
 331+ 7BCC             >
 331+ 7BCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 332+ 7BCC 00 00 00...                  ds      40
 333+ 7BF4              // constant path
 334+ 7BF4                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 334+ 7BF4             >
 334+ 7BF4             >Dict_Ptr        defl    $
 334+ 7BF4             >
 334+ 7BF4             >//              ______________________________________________________________________
 334+ 7BF4             >//              Heap part
 334+ 7BF4             >
 334+ 7BF4             >
 334+ 7BF4             >                org     (Heap_Ptr & $1FFF) + $E000
 334+ EB5B             >
 334+ EB5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ EB5B             >Latest_Definition defl  Heap_Ptr
 334+ EB5B             >
 334+ EB5B             >                // dummy db directives used to calculate length of namec
 334+ EB5B 4E 45 45 44 >                db      "NEEDS-INC"
 334+ EB5F 53 2D 49 4E >
 334+ EB63 43          >
 334+ EB64             >len_NFA         defl    $ - temp_NFA
 334+ EB64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ EB5B             >
 334+ EB5B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ EB5C 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 334+ EB60 53 2D 49 4E >
 334+ EB64 43          >
 334+ EB65             >                org     $-1                 // alter last byte of Name just above to set
 334+ EB64 C3          >                db      {b $} | END_BIT     // msb as name end
 334+ EB65             >
 334+ EB65 4E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 334+ EB67             >Prev_Ptr        defl    Heap_Ptr
 334+ EB67             >
 334+ EB67             >mirror_Ptr      defl    $
 334+ EB67             >
 334+ EB67 F6 7B       >                dw      Dict_Ptr + 2        // xt
 334+ EB69             >Heap_Ptr        defl    $ - $E000           // save current HP
 334+ EB69             >
 334+ EB69             >Current_HP      defl  $ - $E000             // used to set HP once!
 334+ EB69             >
 334+ EB69             >//              ______________________________________________________________________
 334+ EB69             >//              Dictionary part
 334+ EB69             >
 334+ EB69             >                org     Dict_Ptr
 334+ 7BF4             >
 334+ 7BF4 67 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 334+ 7BF6             >
 334+ 7BF6             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 7BF6 CD 1C 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 334+ 7BF9             >
 334+ 7BF9             >
 334+ 7BF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 7BF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 7BF9             >
 334+ 7BF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 7BF9 04 69 6E 63                  db      4, "inc/", 0
 335+ 7BFD 2F 00
 336+ 7BFF                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 336+ 7BFF             >
 336+ 7BFF             >Dict_Ptr        defl    $
 336+ 7BFF             >
 336+ 7BFF             >//              ______________________________________________________________________
 336+ 7BFF             >//              Heap part
 336+ 7BFF             >
 336+ 7BFF             >
 336+ 7BFF             >                org     (Heap_Ptr & $1FFF) + $E000
 336+ EB69             >
 336+ EB69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ EB69             >Latest_Definition defl  Heap_Ptr
 336+ EB69             >
 336+ EB69             >                // dummy db directives used to calculate length of namec
 336+ EB69 4E 45 45 44 >                db      "NEEDS-LIB"
 336+ EB6D 53 2D 4C 49 >
 336+ EB71 42          >
 336+ EB72             >len_NFA         defl    $ - temp_NFA
 336+ EB72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ EB69             >
 336+ EB69 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ EB6A 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 336+ EB6E 53 2D 4C 49 >
 336+ EB72 42          >
 336+ EB73             >                org     $-1                 // alter last byte of Name just above to set
 336+ EB72 C2          >                db      {b $} | END_BIT     // msb as name end
 336+ EB73             >
 336+ EB73 5B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 336+ EB75             >Prev_Ptr        defl    Heap_Ptr
 336+ EB75             >
 336+ EB75             >mirror_Ptr      defl    $
 336+ EB75             >
 336+ EB75 01 7C       >                dw      Dict_Ptr + 2        // xt
 336+ EB77             >Heap_Ptr        defl    $ - $E000           // save current HP
 336+ EB77             >
 336+ EB77             >Current_HP      defl  $ - $E000             // used to set HP once!
 336+ EB77             >
 336+ EB77             >//              ______________________________________________________________________
 336+ EB77             >//              Dictionary part
 336+ EB77             >
 336+ EB77             >                org     Dict_Ptr
 336+ 7BFF             >
 336+ 7BFF 75 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 336+ 7C01             >
 336+ 7C01             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 7C01 CD 1C 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 336+ 7C04             >
 336+ 7C04             >
 336+ 7C04             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 7C04             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 7C04             >
 336+ 7C04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 7C04 04 6C 69 62                  db      4, "lib/", 0
 337+ 7C08 2F 00
 338+ 7C0A
 339+ 7C0A              // Concatenate path at a and filename and include it
 340+ 7C0A              // No error is issued if filename doesn't exist.
 341+ 7C0A                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 341+ 7C0A             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 341+ 7C0A             >
 341+ 7C0A             >Dict_Ptr        defl    $
 341+ 7C0A             >
 341+ 7C0A             >//              ______________________________________________________________________
 341+ 7C0A             >//              Heap part
 341+ 7C0A             >
 341+ 7C0A             >
 341+ 7C0A             >                org     (Heap_Ptr & $1FFF) + $E000
 341+ EB77             >
 341+ EB77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 341+ EB77             >Latest_Definition defl  Heap_Ptr
 341+ EB77             >
 341+ EB77             >                // dummy db directives used to calculate length of namec
 341+ EB77 4E 45 45 44 >                db      "NEEDS/"
 341+ EB7B 53 2F       >
 341+ EB7D             >len_NFA         defl    $ - temp_NFA
 341+ EB7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 341+ EB77             >
 341+ EB77 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 341+ EB78 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 341+ EB7C 53 2F       >
 341+ EB7E             >                org     $-1                 // alter last byte of Name just above to set
 341+ EB7D AF          >                db      {b $} | END_BIT     // msb as name end
 341+ EB7E             >
 341+ EB7E 69 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 341+ EB80             >Prev_Ptr        defl    Heap_Ptr
 341+ EB80             >
 341+ EB80             >mirror_Ptr      defl    $
 341+ EB80             >
 341+ EB80 0C 7C       >                dw      Dict_Ptr + 2        // xt
 341+ EB82             >Heap_Ptr        defl    $ - $E000           // save current HP
 341+ EB82             >
 341+ EB82             >Current_HP      defl  $ - $E000             // used to set HP once!
 341+ EB82             >
 341+ EB82             >//              ______________________________________________________________________
 341+ EB82             >//              Dictionary part
 341+ EB82             >
 341+ EB82             >                org     Dict_Ptr
 341+ 7C0A             >
 341+ 7C0A 80 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 341+ 7C0C             >
 341+ 7C0C             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 341+ 7C0C CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 341+ 7C0F             >
 341+ 7C0F             >
 341+ 7C0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 341+ 7C0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 341+ 7C0F             >
 341+ 7C0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 342+ 7C0F 2F 6F 1A 69                  dw      COUNT, TUCK             // n a n
 343+ 7C13 C9 7B 23 69                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 343+ 7C17 94 67
 344+ 7C19 C9 7B A5 68                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 345+ 7C1D A1 7B BE 68                  dw      NEEDS_W, ONE_PLUS, SWAP
 345+ 7C21 23 69
 346+ 7C23 A3 63 23 00                  dw      LIT, 35
 347+ 7C27 94 67                        dw      CMOVE
 348+ 7C29 C9 7B                        dw      NEEDS_FN
 349+ 7C2B C6 70 99 6A                  dw      PAD, ONE, F_OPEN
 349+ 7C2F 5D 67
 350+ 7C31 78 68                        dw      ZEQUAL
 351+ 7C33 F5 63                        dw      ZBRANCH
 352+ 7C35 08 00                        dw      Needs_1 - $
 353+ 7C37 A1 7A                        dw          F_INCLUDE
 354+ 7C39 E8 63                        dw      BRANCH
 355+ 7C3B 04 00                        dw      Needs_2 - $
 356+ 7C3D              Needs_1:
 357+ 7C3D              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 358+ 7C3D              //              dw          LIT, 43, MESSAGE
 359+ 7C3D 0F 69                        dw          DROP
 360+ 7C3F              Needs_2:
 361+ 7C3F 53 68                        dw      EXIT                    // ;
 362+ 7C41
 363+ 7C41
 364+ 7C41                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 364+ 7C41             >
 364+ 7C41             >Dict_Ptr        defl    $
 364+ 7C41             >
 364+ 7C41             >//              ______________________________________________________________________
 364+ 7C41             >//              Heap part
 364+ 7C41             >
 364+ 7C41             >
 364+ 7C41             >                org     (Heap_Ptr & $1FFF) + $E000
 364+ EB82             >
 364+ EB82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ EB82             >Latest_Definition defl  Heap_Ptr
 364+ EB82             >
 364+ EB82             >                // dummy db directives used to calculate length of namec
 364+ EB82 4E 44 4F 4D >                db      "NDOM"
 364+ EB86             >len_NFA         defl    $ - temp_NFA
 364+ EB86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ EB82             >
 364+ EB82 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ EB83 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 364+ EB87             >                org     $-1                 // alter last byte of Name just above to set
 364+ EB86 CD          >                db      {b $} | END_BIT     // msb as name end
 364+ EB87             >
 364+ EB87 77 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 364+ EB89             >Prev_Ptr        defl    Heap_Ptr
 364+ EB89             >
 364+ EB89             >mirror_Ptr      defl    $
 364+ EB89             >
 364+ EB89 43 7C       >                dw      Dict_Ptr + 2        // xt
 364+ EB8B             >Heap_Ptr        defl    $ - $E000           // save current HP
 364+ EB8B             >
 364+ EB8B             >Current_HP      defl  $ - $E000             // used to set HP once!
 364+ EB8B             >
 364+ EB8B             >//              ______________________________________________________________________
 364+ EB8B             >//              Dictionary part
 364+ EB8B             >
 364+ EB8B             >                org     Dict_Ptr
 364+ 7C41             >
 364+ 7C41 89 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 364+ 7C43             >
 364+ 7C43             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 7C43 CD 1C 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 364+ 7C46             >
 364+ 7C46             >
 364+ 7C46             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 7C46             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 7C46             >
 364+ 7C46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 7C46              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 366+ 7C46 3A 3F 2F 2A                  db ':?/*|\<>"'
 366+ 7C4A 7C 5C 3C 3E
 366+ 7C4E 22
 367+ 7C4F 00                           db 0
 368+ 7C50
 369+ 7C50                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 369+ 7C50             >
 369+ 7C50             >Dict_Ptr        defl    $
 369+ 7C50             >
 369+ 7C50             >//              ______________________________________________________________________
 369+ 7C50             >//              Heap part
 369+ 7C50             >
 369+ 7C50             >
 369+ 7C50             >                org     (Heap_Ptr & $1FFF) + $E000
 369+ EB8B             >
 369+ EB8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ EB8B             >Latest_Definition defl  Heap_Ptr
 369+ EB8B             >
 369+ EB8B             >                // dummy db directives used to calculate length of namec
 369+ EB8B 4E 43 44 4D >                db      "NCDM"
 369+ EB8F             >len_NFA         defl    $ - temp_NFA
 369+ EB8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ EB8B             >
 369+ EB8B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ EB8C 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 369+ EB90             >                org     $-1                 // alter last byte of Name just above to set
 369+ EB8F CD          >                db      {b $} | END_BIT     // msb as name end
 369+ EB90             >
 369+ EB90 82 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 369+ EB92             >Prev_Ptr        defl    Heap_Ptr
 369+ EB92             >
 369+ EB92             >mirror_Ptr      defl    $
 369+ EB92             >
 369+ EB92 52 7C       >                dw      Dict_Ptr + 2        // xt
 369+ EB94             >Heap_Ptr        defl    $ - $E000           // save current HP
 369+ EB94             >
 369+ EB94             >Current_HP      defl  $ - $E000             // used to set HP once!
 369+ EB94             >
 369+ EB94             >//              ______________________________________________________________________
 369+ EB94             >//              Dictionary part
 369+ EB94             >
 369+ EB94             >                org     Dict_Ptr
 369+ 7C50             >
 369+ 7C50 92 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 369+ 7C52             >
 369+ 7C52             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 7C52 CD 1C 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 369+ 7C55             >
 369+ 7C55             >
 369+ 7C55             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 7C55             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 7C55             >
 369+ 7C55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 7C55              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 371+ 7C55 5F 5E 25 26                  db '_^%&$_{}~'
 371+ 7C59 24 5F 7B 7D
 371+ 7C5D 7E
 372+ 7C5E 00                           db 0
 373+ 7C5F
 374+ 7C5F              // Replace illegal character in filename using the map here above
 375+ 7C5F              // at the moment we need only  "
 376+ 7C5F                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 376+ 7C5F             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 376+ 7C5F             >
 376+ 7C5F             >Dict_Ptr        defl    $
 376+ 7C5F             >
 376+ 7C5F             >//              ______________________________________________________________________
 376+ 7C5F             >//              Heap part
 376+ 7C5F             >
 376+ 7C5F             >
 376+ 7C5F             >                org     (Heap_Ptr & $1FFF) + $E000
 376+ EB94             >
 376+ EB94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 376+ EB94             >Latest_Definition defl  Heap_Ptr
 376+ EB94             >
 376+ EB94             >                // dummy db directives used to calculate length of namec
 376+ EB94 4D 41 50 2D >                db      "MAP-FN"
 376+ EB98 46 4E       >
 376+ EB9A             >len_NFA         defl    $ - temp_NFA
 376+ EB9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 376+ EB94             >
 376+ EB94 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 376+ EB95 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 376+ EB99 46 4E       >
 376+ EB9B             >                org     $-1                 // alter last byte of Name just above to set
 376+ EB9A CE          >                db      {b $} | END_BIT     // msb as name end
 376+ EB9B             >
 376+ EB9B 8B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 376+ EB9D             >Prev_Ptr        defl    Heap_Ptr
 376+ EB9D             >
 376+ EB9D             >mirror_Ptr      defl    $
 376+ EB9D             >
 376+ EB9D 61 7C       >                dw      Dict_Ptr + 2        // xt
 376+ EB9F             >Heap_Ptr        defl    $ - $E000           // save current HP
 376+ EB9F             >
 376+ EB9F             >Current_HP      defl  $ - $E000             // used to set HP once!
 376+ EB9F             >
 376+ EB9F             >//              ______________________________________________________________________
 376+ EB9F             >//              Dictionary part
 376+ EB9F             >
 376+ EB9F             >                org     Dict_Ptr
 376+ 7C5F             >
 376+ 7C5F 9D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 376+ 7C61             >
 376+ 7C61             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 376+ 7C61 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 376+ 7C64             >
 376+ 7C64             >
 376+ 7C64             >                endif           ; ok        // for other definitions it "points" the correct handler
 376+ 7C64             >                // Use of "; ok" to suppress "warning[fwdref]"
 376+ 7C64             >
 376+ 7C64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 377+ 7C64 2F 6F 3C 6F                  dw      COUNT, BOUNDS
 378+ 7C68 34 64                        dw      C_DO
 379+ 7C6A              Needs_3:
 380+ 7C6A 52 7C 43 7C                  dw          NCDM, NDOM, LIT, 10
 380+ 7C6E A3 63 0A 00
 381+ 7C72 3A 64 B0 69                  dw          I, CFETCH
 382+ 7C76 5B 65                        dw          C_MAP
 383+ 7C78 3A 64 B9 69                  dw          I, CSTORE
 384+ 7C7C              Needs_4:
 385+ 7C7C E0 63                        dw      C_LOOP
 386+ 7C7E EC FF                        dw      Needs_3 - $
 387+ 7C80 53 68                        dw      EXIT
 388+ 7C82
 389+ 7C82
 390+ 7C82              // include  "path/cccc.f" if cccc is not defined
 391+ 7C82              // filename cccc.f is temporary stored at NEEDS-W
 392+ 7C82                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 392+ 7C82             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 392+ 7C82             >
 392+ 7C82             >Dict_Ptr        defl    $
 392+ 7C82             >
 392+ 7C82             >//              ______________________________________________________________________
 392+ 7C82             >//              Heap part
 392+ 7C82             >
 392+ 7C82             >
 392+ 7C82             >                org     (Heap_Ptr & $1FFF) + $E000
 392+ EB9F             >
 392+ EB9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 392+ EB9F             >Latest_Definition defl  Heap_Ptr
 392+ EB9F             >
 392+ EB9F             >                // dummy db directives used to calculate length of namec
 392+ EB9F 4E 45 45 44 >                db      "NEEDS-F"
 392+ EBA3 53 2D 46    >
 392+ EBA6             >len_NFA         defl    $ - temp_NFA
 392+ EBA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 392+ EB9F             >
 392+ EB9F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 392+ EBA0 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 392+ EBA4 53 2D 46    >
 392+ EBA7             >                org     $-1                 // alter last byte of Name just above to set
 392+ EBA6 C6          >                db      {b $} | END_BIT     // msb as name end
 392+ EBA7             >
 392+ EBA7 94 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 392+ EBA9             >Prev_Ptr        defl    Heap_Ptr
 392+ EBA9             >
 392+ EBA9             >mirror_Ptr      defl    $
 392+ EBA9             >
 392+ EBA9 84 7C       >                dw      Dict_Ptr + 2        // xt
 392+ EBAB             >Heap_Ptr        defl    $ - $E000           // save current HP
 392+ EBAB             >
 392+ EBAB             >Current_HP      defl  $ - $E000             // used to set HP once!
 392+ EBAB             >
 392+ EBAB             >//              ______________________________________________________________________
 392+ EBAB             >//              Dictionary part
 392+ EBAB             >
 392+ EBAB             >                org     Dict_Ptr
 392+ 7C82             >
 392+ 7C82 A9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 392+ 7C84             >
 392+ 7C84             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 392+ 7C84 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 392+ 7C87             >
 392+ 7C87             >
 392+ 7C87             >                endif           ; ok        // for other definitions it "points" the correct handler
 392+ 7C87             >                // Use of "; ok" to suppress "warning[fwdref]"
 392+ 7C87             >
 392+ 7C87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 393+ 7C87 15 73                        dw      LFIND
 394+ 7C89 F5 63                        dw      ZBRANCH
 395+ 7C8B 0A 00                        dw      Needs_5 - $
 396+ 7C8D
 397+ 7C8D 0F 69 66 69                  dw          DROP, TWO_DROP
 398+ 7C91 E8 63                        dw      BRANCH
 399+ 7C93 2C 00                        dw      Needs_6 - $
 400+ 7C95              Needs_5:
 401+ 7C95 A1 7B                        dw          NEEDS_W
 402+ 7C97 A3 63 23 00                  dw          LIT, 35
 403+ 7C9B 9D 70                        dw          ERASE                   // a
 404+ 7C9D B7 6B B0 69                  dw          HERE, CFETCH, ONE_PLUS  // a n
 404+ 7CA1 BE 68
 405+ 7CA3 B7 6B 06 69                  dw          HERE, OVER              // a n here n
 406+ 7CA7 A1 7B 23 69                  dw          NEEDS_W, SWAP, CMOVE    // a n
 406+ 7CAB 94 67
 407+ 7CAD A1 7B 61 7C                  dw          NEEDS_W, NEEDS_CHECK
 408+ 7CB1 A1 7B A5 68                  dw          NEEDS_W, PLUS           // a a1+1
 409+ 7CB5 A3 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 410+ 7CB9 23 69 A5 69                  dw          SWAP, STORE             // a
 411+ 7CBD 0C 7C                        dw          NEEDS_SLASH
 412+ 7CBF              Needs_6:
 413+ 7CBF 53 68                        dw      EXIT
 414+ 7CC1
 415+ 7CC1
 416+ 7CC1              // check for cccc exists in vocabulary
 417+ 7CC1              // if it doesn't then  INCLUDE  inc/cccc.F
 418+ 7CC1              // search in inc subdirectory
 419+ 7CC1                              Colon_Def NEEDS, "NEEDS", is_normal
 419+ 7CC1             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 419+ 7CC1             >
 419+ 7CC1             >Dict_Ptr        defl    $
 419+ 7CC1             >
 419+ 7CC1             >//              ______________________________________________________________________
 419+ 7CC1             >//              Heap part
 419+ 7CC1             >
 419+ 7CC1             >
 419+ 7CC1             >                org     (Heap_Ptr & $1FFF) + $E000
 419+ EBAB             >
 419+ EBAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ EBAB             >Latest_Definition defl  Heap_Ptr
 419+ EBAB             >
 419+ EBAB             >                // dummy db directives used to calculate length of namec
 419+ EBAB 4E 45 45 44 >                db      "NEEDS"
 419+ EBAF 53          >
 419+ EBB0             >len_NFA         defl    $ - temp_NFA
 419+ EBB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ EBAB             >
 419+ EBAB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ EBAC 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 419+ EBB0 53          >
 419+ EBB1             >                org     $-1                 // alter last byte of Name just above to set
 419+ EBB0 D3          >                db      {b $} | END_BIT     // msb as name end
 419+ EBB1             >
 419+ EBB1 9F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 419+ EBB3             >Prev_Ptr        defl    Heap_Ptr
 419+ EBB3             >
 419+ EBB3             >mirror_Ptr      defl    $
 419+ EBB3             >
 419+ EBB3 C3 7C       >                dw      Dict_Ptr + 2        // xt
 419+ EBB5             >Heap_Ptr        defl    $ - $E000           // save current HP
 419+ EBB5             >
 419+ EBB5             >Current_HP      defl  $ - $E000             // used to set HP once!
 419+ EBB5             >
 419+ EBB5             >//              ______________________________________________________________________
 419+ EBB5             >//              Dictionary part
 419+ EBB5             >
 419+ EBB5             >                org     Dict_Ptr
 419+ 7CC1             >
 419+ 7CC1 B3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 419+ 7CC3             >
 419+ 7CC3             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 7CC3 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 7CC6             >
 419+ 7CC6             >
 419+ 7CC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 7CC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 7CC6             >
 419+ 7CC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 7CC6 39 6B 9B 69                  dw      TO_IN, FETCH
 421+ 7CCA 2A 69                        dw      DUP
 422+ 7CCC F6 7B 84 7C                  dw      NEEDS_INC, NEEDS_PATH
 423+ 7CD0 39 6B A5 69                  dw      TO_IN, STORE
 424+ 7CD4 01 7C 84 7C                  dw      NEEDS_LIB, NEEDS_PATH
 425+ 7CD8 39 6B A5 69                  dw      TO_IN, STORE
 426+ 7CDC 15 73                        dw      LFIND
 427+ 7CDE F5 63                        dw      ZBRANCH
 428+ 7CE0 08 00                        dw      Needs_10 - $
 429+ 7CE2 66 69                        dw          TWO_DROP
 430+ 7CE4 E8 63                        dw      BRANCH
 431+ 7CE6 10 00                        dw      Needs_11 - $
 432+ 7CE8              Needs_10:
 433+ 7CE8 A1 7B 2F 6F                  dw      NEEDS_W, COUNT, TYPE, SPACE
 433+ 7CEC 83 6F 88 6C
 434+ 7CF0 A3 63 2B 00                  dw      LIT, 43, MESSAGE
 434+ 7CF4 A4 77
 435+ 7CF6              Needs_11:
 436+ 7CF6 53 68                        dw      EXIT
 437+ 7CF8
 438+ 7CF8
 439+ 7CF8              //  ______________________________________________________________________
 440+ 7CF8              //
 441+ 7CF8              // load         n --
 442+ 7CF8                              Colon_Def LOAD, "LOAD", is_normal
 442+ 7CF8             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 442+ 7CF8             >
 442+ 7CF8             >Dict_Ptr        defl    $
 442+ 7CF8             >
 442+ 7CF8             >//              ______________________________________________________________________
 442+ 7CF8             >//              Heap part
 442+ 7CF8             >
 442+ 7CF8             >
 442+ 7CF8             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ EBB5             >
 442+ EBB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ EBB5             >Latest_Definition defl  Heap_Ptr
 442+ EBB5             >
 442+ EBB5             >                // dummy db directives used to calculate length of namec
 442+ EBB5 4C 4F 41 44 >                db      "LOAD"
 442+ EBB9             >len_NFA         defl    $ - temp_NFA
 442+ EBB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ EBB5             >
 442+ EBB5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ EBB6 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 442+ EBBA             >                org     $-1                 // alter last byte of Name just above to set
 442+ EBB9 C4          >                db      {b $} | END_BIT     // msb as name end
 442+ EBBA             >
 442+ EBBA AB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ EBBC             >Prev_Ptr        defl    Heap_Ptr
 442+ EBBC             >
 442+ EBBC             >mirror_Ptr      defl    $
 442+ EBBC             >
 442+ EBBC FA 7C       >                dw      Dict_Ptr + 2        // xt
 442+ EBBE             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ EBBE             >
 442+ EBBE             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ EBBE             >
 442+ EBBE             >//              ______________________________________________________________________
 442+ EBBE             >//              Dictionary part
 442+ EBBE             >
 442+ EBBE             >                org     Dict_Ptr
 442+ 7CF8             >
 442+ 7CF8 BC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 7CFA             >
 442+ 7CFA             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 7CFA CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 7CFD             >
 442+ 7CFD             >
 442+ 7CFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 7CFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 7CFD             >
 442+ 7CFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 7CFD 33 6B 9B 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 443+ 7D01 5D 68
 444+ 7D03 39 6B 9B 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 444+ 7D07 5D 68
 445+ 7D09
 446+ 7D09 92 6A 39 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 446+ 7D0D A5 69
 447+ 7D0F CA 6A 30 77                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 447+ 7D13 33 6B A5 69
 448+ 7D17 D8 74                        dw      INTERPRET               // interpret
 449+ 7D19
 450+ 7D19 68 68 39 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 450+ 7D1D A5 69
 451+ 7D1F 68 68 33 6B                  dw      R_TO, BLK, STORE        // r> blk !
 451+ 7D23 A5 69
 452+ 7D25 53 68                        dw      EXIT                    // ;
 453+ 7D27
 454+ 7D27              //  ______________________________________________________________________
 455+ 7D27              //
 456+ 7D27              // -->          --
 457+ 7D27                              Colon_Def LOAD_NEXT, "-->", is_immediate
 457+ 7D27             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 457+ 7D27             >
 457+ 7D27             >Dict_Ptr        defl    $
 457+ 7D27             >
 457+ 7D27             >//              ______________________________________________________________________
 457+ 7D27             >//              Heap part
 457+ 7D27             >
 457+ 7D27             >
 457+ 7D27             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ EBBE             >
 457+ EBBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ EBBE             >Latest_Definition defl  Heap_Ptr
 457+ EBBE             >
 457+ EBBE             >                // dummy db directives used to calculate length of namec
 457+ EBBE 2D 2D 3E    >                db      "-->"
 457+ EBC1             >len_NFA         defl    $ - temp_NFA
 457+ EBC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ EBBE             >
 457+ EBBE C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ EBBF 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 457+ EBC2             >                org     $-1                 // alter last byte of Name just above to set
 457+ EBC1 BE          >                db      {b $} | END_BIT     // msb as name end
 457+ EBC2             >
 457+ EBC2 B5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ EBC4             >Prev_Ptr        defl    Heap_Ptr
 457+ EBC4             >
 457+ EBC4             >mirror_Ptr      defl    $
 457+ EBC4             >
 457+ EBC4 29 7D       >                dw      Dict_Ptr + 2        // xt
 457+ EBC6             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ EBC6             >
 457+ EBC6             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ EBC6             >
 457+ EBC6             >//              ______________________________________________________________________
 457+ EBC6             >//              Dictionary part
 457+ EBC6             >
 457+ EBC6             >                org     Dict_Ptr
 457+ 7D27             >
 457+ 7D27 C4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 7D29             >
 457+ 7D29             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 7D29 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 7D2C             >
 457+ 7D2C             >
 457+ 7D2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 7D2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 7D2C             >
 457+ 7D2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 7D2C 50 6E                        dw      QLOADING                // ?loading
 459+ 7D2E 92 6A 39 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 459+ 7D32 A5 69
 460+ 7D34 CA 6A                        dw      BSCR                    // b/scr
 461+ 7D36 33 6B 9B 69                  dw      BLK, FETCH              // blk @
 462+ 7D3A 06 69                        dw      OVER                    // over
 463+ 7D3C 55 77                        dw      MOD                     // mod
 464+ 7D3E F6 6B                        dw      SUBTRACT                // -
 465+ 7D40 33 6B 83 69                  dw      BLK, PLUSSTORE          // +!
 466+ 7D44 53 68                        dw      EXIT                    // ;
 467+ 7D46
 468+ 7D46              //  ______________________________________________________________________
 469+ 7D46              //
 470+ 7D46              // '            -- xt
 471+ 7D46                              Colon_Def TICK, "'", is_normal
 471+ 7D46             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 471+ 7D46             >
 471+ 7D46             >Dict_Ptr        defl    $
 471+ 7D46             >
 471+ 7D46             >//              ______________________________________________________________________
 471+ 7D46             >//              Heap part
 471+ 7D46             >
 471+ 7D46             >
 471+ 7D46             >                org     (Heap_Ptr & $1FFF) + $E000
 471+ EBC6             >
 471+ EBC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ EBC6             >Latest_Definition defl  Heap_Ptr
 471+ EBC6             >
 471+ EBC6             >                // dummy db directives used to calculate length of namec
 471+ EBC6 27          >                db      "'"
 471+ EBC7             >len_NFA         defl    $ - temp_NFA
 471+ EBC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ EBC6             >
 471+ EBC6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ EBC7 27          >                db      "'"               // name string in 7-bit ascii, but
 471+ EBC8             >                org     $-1                 // alter last byte of Name just above to set
 471+ EBC7 A7          >                db      {b $} | END_BIT     // msb as name end
 471+ EBC8             >
 471+ EBC8 BE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 471+ EBCA             >Prev_Ptr        defl    Heap_Ptr
 471+ EBCA             >
 471+ EBCA             >mirror_Ptr      defl    $
 471+ EBCA             >
 471+ EBCA 48 7D       >                dw      Dict_Ptr + 2        // xt
 471+ EBCC             >Heap_Ptr        defl    $ - $E000           // save current HP
 471+ EBCC             >
 471+ EBCC             >Current_HP      defl  $ - $E000             // used to set HP once!
 471+ EBCC             >
 471+ EBCC             >//              ______________________________________________________________________
 471+ EBCC             >//              Dictionary part
 471+ EBCC             >
 471+ EBCC             >                org     Dict_Ptr
 471+ 7D46             >
 471+ 7D46 CA 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 471+ 7D48             >
 471+ 7D48             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 7D48 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 7D4B             >
 471+ 7D4B             >
 471+ 7D4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 7D4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 7D4B             >
 471+ 7D4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 7D4B 15 73                        dw      LFIND                   // -find
 473+ 7D4D 78 68                        dw      ZEQUAL                  // 0=
 474+ 7D4F 92 6A F3 6D                  dw      ZERO, QERROR            // 0 ?error
 475+ 7D53 0F 69                        dw      DROP                    // drop
 476+ 7D55 53 68                        dw      EXIT                    // ;
 477+ 7D57
 478+ 7D57              //  ______________________________________________________________________
 479+ 7D57              //
 480+ 7D57              // forget       -- cccc
 481+ 7D57                              Colon_Def FORGET, "FORGET", is_normal
 481+ 7D57             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 481+ 7D57             >
 481+ 7D57             >Dict_Ptr        defl    $
 481+ 7D57             >
 481+ 7D57             >//              ______________________________________________________________________
 481+ 7D57             >//              Heap part
 481+ 7D57             >
 481+ 7D57             >
 481+ 7D57             >                org     (Heap_Ptr & $1FFF) + $E000
 481+ EBCC             >
 481+ EBCC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ EBCC             >Latest_Definition defl  Heap_Ptr
 481+ EBCC             >
 481+ EBCC             >                // dummy db directives used to calculate length of namec
 481+ EBCC 46 4F 52 47 >                db      "FORGET"
 481+ EBD0 45 54       >
 481+ EBD2             >len_NFA         defl    $ - temp_NFA
 481+ EBD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ EBCC             >
 481+ EBCC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ EBCD 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 481+ EBD1 45 54       >
 481+ EBD3             >                org     $-1                 // alter last byte of Name just above to set
 481+ EBD2 D4          >                db      {b $} | END_BIT     // msb as name end
 481+ EBD3             >
 481+ EBD3 C6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 481+ EBD5             >Prev_Ptr        defl    Heap_Ptr
 481+ EBD5             >
 481+ EBD5             >mirror_Ptr      defl    $
 481+ EBD5             >
 481+ EBD5 59 7D       >                dw      Dict_Ptr + 2        // xt
 481+ EBD7             >Heap_Ptr        defl    $ - $E000           // save current HP
 481+ EBD7             >
 481+ EBD7             >Current_HP      defl  $ - $E000             // used to set HP once!
 481+ EBD7             >
 481+ EBD7             >//              ______________________________________________________________________
 481+ EBD7             >//              Dictionary part
 481+ EBD7             >
 481+ EBD7             >                org     Dict_Ptr
 481+ 7D57             >
 481+ 7D57 D5 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 481+ 7D59             >
 481+ 7D59             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 7D59 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 7D5C             >
 481+ 7D5C             >
 481+ 7D5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 7D5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 7D5C             >
 481+ 7D5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 7D5C 57 6B 9B 69                  dw      CURRENT, FETCH          // current @
 483+ 7D60 51 6B 9B 69                  dw      CONTEXT, FETCH          // context @
 484+ 7D64 F6 6B A3 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 484+ 7D68 17 00 F3 6D
 485+ 7D6C 48 7D 72 6D                  dw      TICK, TO_BODY           // ' >body
 486+ 7D70 2A 69 09 6B                  dw      DUP, FENCE, FETCH       // dup fence @
 486+ 7D74 9B 69
 487+ 7D76 0D 6C A3 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 487+ 7D7A 15 00 F3 6D
 488+ 7D7E 2A 69 A7 6D                  dw      DUP, NFA                // dup nfa
 489+ 7D82
 490+ 7D82                          //  dw      DUP
 491+ 7D82                          //  dw      LIT, $E000, LESS
 492+ 7D82                          //  dw      MMU7_FETCH, ONE, EQUALS
 493+ 7D82                          //  dw      OR_OP, NOT_OP
 494+ 7D82                          //  dw      ZBRANCH
 495+ 7D82                          //  dw      Forget_then - $
 496+ 7D82
 497+ 7D82 B0 6C D3 6C                  dw      MMU7_FETCH, FROM_FAR
 498+ 7D86 27 6B A5 69                  dw      HP, STORE
 499+ 7D8A 2A 69 9C 6D                  dw      DUP, CFA, CELL_MINUS
 499+ 7D8E D8 68
 500+ 7D90              // Forget_then:
 501+ 7D90 0F 6B A5 69                  dw      DP, STORE               // dp !
 502+ 7D94 B2 6D 9B 69                  dw      LFA, FETCH              // lfa @
 503+ 7D98 51 6B 9B 69                  dw      CONTEXT, FETCH, STORE   // context @ !
 503+ 7D9C A5 69
 504+ 7D9E 53 68                        dw      EXIT                    // ;
 505+ 7DA0
 506+ 7DA0              //  ______________________________________________________________________
 507+ 7DA0              //
 508+ 7DA0              // marker       -- cccc
 509+ 7DA0                              Colon_Def MARKER, "MARKER", is_immediate
 509+ 7DA0             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 509+ 7DA0             >
 509+ 7DA0             >Dict_Ptr        defl    $
 509+ 7DA0             >
 509+ 7DA0             >//              ______________________________________________________________________
 509+ 7DA0             >//              Heap part
 509+ 7DA0             >
 509+ 7DA0             >
 509+ 7DA0             >                org     (Heap_Ptr & $1FFF) + $E000
 509+ EBD7             >
 509+ EBD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 509+ EBD7             >Latest_Definition defl  Heap_Ptr
 509+ EBD7             >
 509+ EBD7             >                // dummy db directives used to calculate length of namec
 509+ EBD7 4D 41 52 4B >                db      "MARKER"
 509+ EBDB 45 52       >
 509+ EBDD             >len_NFA         defl    $ - temp_NFA
 509+ EBDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 509+ EBD7             >
 509+ EBD7 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 509+ EBD8 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 509+ EBDC 45 52       >
 509+ EBDE             >                org     $-1                 // alter last byte of Name just above to set
 509+ EBDD D2          >                db      {b $} | END_BIT     // msb as name end
 509+ EBDE             >
 509+ EBDE CC 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 509+ EBE0             >Prev_Ptr        defl    Heap_Ptr
 509+ EBE0             >
 509+ EBE0             >mirror_Ptr      defl    $
 509+ EBE0             >
 509+ EBE0 A2 7D       >                dw      Dict_Ptr + 2        // xt
 509+ EBE2             >Heap_Ptr        defl    $ - $E000           // save current HP
 509+ EBE2             >
 509+ EBE2             >Current_HP      defl  $ - $E000             // used to set HP once!
 509+ EBE2             >
 509+ EBE2             >//              ______________________________________________________________________
 509+ EBE2             >//              Dictionary part
 509+ EBE2             >
 509+ EBE2             >                org     Dict_Ptr
 509+ 7DA0             >
 509+ 7DA0 E0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 509+ 7DA2             >
 509+ 7DA2             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 509+ 7DA2 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 509+ 7DA5             >
 509+ 7DA5             >
 509+ 7DA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 509+ 7DA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 509+ 7DA5             >
 509+ 7DA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 510+ 7DA5 07 6F                        dw      CBUILDS
 511+ 7DA7 15 6B 9B 69                  dw      VOC_LINK, FETCH, COMMA
 511+ 7DAB CD 6B
 512+ 7DAD 57 6B 9B 69                  dw      CURRENT, FETCH, COMMA
 512+ 7DB1 CD 6B
 513+ 7DB3 51 6B 9B 69                  dw      CONTEXT, FETCH, COMMA
 513+ 7DB7 CD 6B
 514+ 7DB9 57 6B 9B 69                  dw      CURRENT, FETCH, FETCH,  COMMA
 514+ 7DBD 9B 69 CD 6B
 515+ 7DC1 63 6D C1 6D                  dw      LATEST, PFA, LFA, FETCH, COMMA
 515+ 7DC5 B2 6D 9B 69
 515+ 7DC9 CD 6B
 516+ 7DCB 12 6F                        dw      DOES_TO
 517+ 7DCD 2A 69 9B 69                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 517+ 7DD1 15 6B A5 69
 517+ 7DD5 D4 68
 518+ 7DD7 2A 69 9B 69                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 518+ 7DDB 57 6B A5 69
 518+ 7DDF D4 68
 519+ 7DE1 2A 69 9B 69                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 519+ 7DE5 51 6B A5 69
 519+ 7DE9 D4 68
 520+ 7DEB 2A 69 9B 69                  dw      DUP, FETCH
 521+ 7DEF                          //  dw      DUP, QHEAPP
 522+ 7DEF                          //  dw      ZBRANCH
 523+ 7DEF                          //  dw      Marker_then - $
 524+ 7DEF 2A 69 27 6B                  dw          DUP, HP, STORE
 524+ 7DF3 A5 69
 525+ 7DF5 C1 6D 9C 6D                  dw          PFA, CFA, CELL_MINUS
 525+ 7DF9 D8 68
 526+ 7DFB              // Marker_then:
 527+ 7DFB 0F 6B A5 69                  dw      DP, STORE, CELL_PLUS
 527+ 7DFF D4 68
 528+ 7E01 9B 69 57 6B                  dw      FETCH, CURRENT, FETCH, STORE
 528+ 7E05 9B 69 A5 69
 529+ 7E09 53 68                        dw      EXIT
 530+ 7E0B
 531+ 7E0B              //  ______________________________________________________________________
 532+ 7E0B              //
 533+ 7E0B              // spaces       n --
 534+ 7E0B                              Colon_Def SPACES, "SPACES", is_normal
 534+ 7E0B             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 534+ 7E0B             >
 534+ 7E0B             >Dict_Ptr        defl    $
 534+ 7E0B             >
 534+ 7E0B             >//              ______________________________________________________________________
 534+ 7E0B             >//              Heap part
 534+ 7E0B             >
 534+ 7E0B             >
 534+ 7E0B             >                org     (Heap_Ptr & $1FFF) + $E000
 534+ EBE2             >
 534+ EBE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 534+ EBE2             >Latest_Definition defl  Heap_Ptr
 534+ EBE2             >
 534+ EBE2             >                // dummy db directives used to calculate length of namec
 534+ EBE2 53 50 41 43 >                db      "SPACES"
 534+ EBE6 45 53       >
 534+ EBE8             >len_NFA         defl    $ - temp_NFA
 534+ EBE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 534+ EBE2             >
 534+ EBE2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 534+ EBE3 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 534+ EBE7 45 53       >
 534+ EBE9             >                org     $-1                 // alter last byte of Name just above to set
 534+ EBE8 D3          >                db      {b $} | END_BIT     // msb as name end
 534+ EBE9             >
 534+ EBE9 D7 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 534+ EBEB             >Prev_Ptr        defl    Heap_Ptr
 534+ EBEB             >
 534+ EBEB             >mirror_Ptr      defl    $
 534+ EBEB             >
 534+ EBEB 0D 7E       >                dw      Dict_Ptr + 2        // xt
 534+ EBED             >Heap_Ptr        defl    $ - $E000           // save current HP
 534+ EBED             >
 534+ EBED             >Current_HP      defl  $ - $E000             // used to set HP once!
 534+ EBED             >
 534+ EBED             >//              ______________________________________________________________________
 534+ EBED             >//              Dictionary part
 534+ EBED             >
 534+ EBED             >                org     Dict_Ptr
 534+ 7E0B             >
 534+ 7E0B EB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 534+ 7E0D             >
 534+ 7E0D             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 534+ 7E0D CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 534+ 7E10             >
 534+ 7E10             >
 534+ 7E10             >                endif           ; ok        // for other definitions it "points" the correct handler
 534+ 7E10             >                // Use of "; ok" to suppress "warning[fwdref]"
 534+ 7E10             >
 534+ 7E10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 535+ 7E10 92 6A 4E 6C                  dw      ZERO, MAX
 536+ 7E14 92 6A 0C 64                  dw      ZERO, C_Q_DO
 537+ 7E18 08 00                        dw      Spaces_Leave - $
 538+ 7E1A              Spaces_Loop:
 539+ 7E1A 88 6C                        dw          SPACE
 540+ 7E1C E0 63                        dw      C_LOOP
 541+ 7E1E FC FF                        dw      Spaces_Loop - $
 542+ 7E20              Spaces_Leave:
 543+ 7E20 53 68                        dw      EXIT                    // ;
 544+ 7E22
 545+ 7E22              //  ______________________________________________________________________
 546+ 7E22              //
 547+ 7E22              // <#           --
 548+ 7E22                              Colon_Def BEGIN_DASH, "<#", is_normal
 548+ 7E22             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 548+ 7E22             >
 548+ 7E22             >Dict_Ptr        defl    $
 548+ 7E22             >
 548+ 7E22             >//              ______________________________________________________________________
 548+ 7E22             >//              Heap part
 548+ 7E22             >
 548+ 7E22             >
 548+ 7E22             >                org     (Heap_Ptr & $1FFF) + $E000
 548+ EBED             >
 548+ EBED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ EBED             >Latest_Definition defl  Heap_Ptr
 548+ EBED             >
 548+ EBED             >                // dummy db directives used to calculate length of namec
 548+ EBED 3C 23       >                db      "<#"
 548+ EBEF             >len_NFA         defl    $ - temp_NFA
 548+ EBEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ EBED             >
 548+ EBED 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ EBEE 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 548+ EBF0             >                org     $-1                 // alter last byte of Name just above to set
 548+ EBEF A3          >                db      {b $} | END_BIT     // msb as name end
 548+ EBF0             >
 548+ EBF0 E2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 548+ EBF2             >Prev_Ptr        defl    Heap_Ptr
 548+ EBF2             >
 548+ EBF2             >mirror_Ptr      defl    $
 548+ EBF2             >
 548+ EBF2 24 7E       >                dw      Dict_Ptr + 2        // xt
 548+ EBF4             >Heap_Ptr        defl    $ - $E000           // save current HP
 548+ EBF4             >
 548+ EBF4             >Current_HP      defl  $ - $E000             // used to set HP once!
 548+ EBF4             >
 548+ EBF4             >//              ______________________________________________________________________
 548+ EBF4             >//              Dictionary part
 548+ EBF4             >
 548+ EBF4             >                org     Dict_Ptr
 548+ 7E22             >
 548+ 7E22 F2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 548+ 7E24             >
 548+ 7E24             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 7E24 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 548+ 7E27             >
 548+ 7E27             >
 548+ 7E27             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 7E27             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 7E27             >
 548+ 7E27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 549+ 7E27 C6 70 81 6B                  dw      PAD, HLD, STORE
 549+ 7E2B A5 69
 550+ 7E2D 53 68                        dw      EXIT
 551+ 7E2F
 552+ 7E2F              //  ______________________________________________________________________
 553+ 7E2F              //
 554+ 7E2F              // #>           --
 555+ 7E2F                              Colon_Def DASH_END, "#>", is_normal
 555+ 7E2F             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 555+ 7E2F             >
 555+ 7E2F             >Dict_Ptr        defl    $
 555+ 7E2F             >
 555+ 7E2F             >//              ______________________________________________________________________
 555+ 7E2F             >//              Heap part
 555+ 7E2F             >
 555+ 7E2F             >
 555+ 7E2F             >                org     (Heap_Ptr & $1FFF) + $E000
 555+ EBF4             >
 555+ EBF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ EBF4             >Latest_Definition defl  Heap_Ptr
 555+ EBF4             >
 555+ EBF4             >                // dummy db directives used to calculate length of namec
 555+ EBF4 23 3E       >                db      "#>"
 555+ EBF6             >len_NFA         defl    $ - temp_NFA
 555+ EBF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ EBF4             >
 555+ EBF4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ EBF5 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 555+ EBF7             >                org     $-1                 // alter last byte of Name just above to set
 555+ EBF6 BE          >                db      {b $} | END_BIT     // msb as name end
 555+ EBF7             >
 555+ EBF7 ED 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 555+ EBF9             >Prev_Ptr        defl    Heap_Ptr
 555+ EBF9             >
 555+ EBF9             >mirror_Ptr      defl    $
 555+ EBF9             >
 555+ EBF9 31 7E       >                dw      Dict_Ptr + 2        // xt
 555+ EBFB             >Heap_Ptr        defl    $ - $E000           // save current HP
 555+ EBFB             >
 555+ EBFB             >Current_HP      defl  $ - $E000             // used to set HP once!
 555+ EBFB             >
 555+ EBFB             >//              ______________________________________________________________________
 555+ EBFB             >//              Dictionary part
 555+ EBFB             >
 555+ EBFB             >                org     Dict_Ptr
 555+ 7E2F             >
 555+ 7E2F F9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 555+ 7E31             >
 555+ 7E31             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 7E31 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 7E34             >
 555+ 7E34             >
 555+ 7E34             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 7E34             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 7E34             >
 555+ 7E34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 7E34 66 69                        dw      TWO_DROP
 557+ 7E36 81 6B 9B 69                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 557+ 7E3A C6 70 06 69
 557+ 7E3E F6 6B
 558+ 7E40 53 68                        dw      EXIT
 559+ 7E42
 560+ 7E42              //  ______________________________________________________________________
 561+ 7E42              //
 562+ 7E42              // sign         n d -- d
 563+ 7E42                              Colon_Def SIGN, "SIGN", is_normal
 563+ 7E42             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 563+ 7E42             >
 563+ 7E42             >Dict_Ptr        defl    $
 563+ 7E42             >
 563+ 7E42             >//              ______________________________________________________________________
 563+ 7E42             >//              Heap part
 563+ 7E42             >
 563+ 7E42             >
 563+ 7E42             >                org     (Heap_Ptr & $1FFF) + $E000
 563+ EBFB             >
 563+ EBFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ EBFB             >Latest_Definition defl  Heap_Ptr
 563+ EBFB             >
 563+ EBFB             >                // dummy db directives used to calculate length of namec
 563+ EBFB 53 49 47 4E >                db      "SIGN"
 563+ EBFF             >len_NFA         defl    $ - temp_NFA
 563+ EBFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ EBFB             >
 563+ EBFB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ EBFC 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 563+ EC00             >                org     $-1                 // alter last byte of Name just above to set
 563+ EBFF CE          >                db      {b $} | END_BIT     // msb as name end
 563+ EC00             >
 563+ EC00 F4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 563+ EC02             >Prev_Ptr        defl    Heap_Ptr
 563+ EC02             >
 563+ EC02             >mirror_Ptr      defl    $
 563+ EC02             >
 563+ EC02 44 7E       >                dw      Dict_Ptr + 2        // xt
 563+ EC04             >Heap_Ptr        defl    $ - $E000           // save current HP
 563+ EC04             >
 563+ EC04             >Current_HP      defl  $ - $E000             // used to set HP once!
 563+ EC04             >
 563+ EC04             >//              ______________________________________________________________________
 563+ EC04             >//              Dictionary part
 563+ EC04             >
 563+ EC04             >                org     Dict_Ptr
 563+ 7E42             >
 563+ 7E42 02 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 563+ 7E44             >
 563+ 7E44             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 7E44 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 7E47             >
 563+ 7E47             >
 563+ 7E47             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 7E47             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 7E47             >
 563+ 7E47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 7E47 8A 68                        dw      ZLESS
 565+ 7E49 F5 63                        dw      ZBRANCH
 566+ 7E4B 08 00                        dw      Sign_Endif - $
 567+ 7E4D A3 63 2D 00                  dw          LIT, 45, HOLD
 567+ 7E51 B3 70
 568+ 7E53              Sign_Endif:
 569+ 7E53 53 68                        dw      EXIT
 570+ 7E55
 571+ 7E55              //  ______________________________________________________________________
 572+ 7E55              //
 573+ 7E55              // #           d1 -- d2
 574+ 7E55                              Colon_Def DASH, "#", is_normal
 574+ 7E55             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 574+ 7E55             >
 574+ 7E55             >Dict_Ptr        defl    $
 574+ 7E55             >
 574+ 7E55             >//              ______________________________________________________________________
 574+ 7E55             >//              Heap part
 574+ 7E55             >
 574+ 7E55             >
 574+ 7E55             >                org     (Heap_Ptr & $1FFF) + $E000
 574+ EC04             >
 574+ EC04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 574+ EC04             >Latest_Definition defl  Heap_Ptr
 574+ EC04             >
 574+ EC04             >                // dummy db directives used to calculate length of namec
 574+ EC04 23          >                db      "#"
 574+ EC05             >len_NFA         defl    $ - temp_NFA
 574+ EC05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 574+ EC04             >
 574+ EC04 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 574+ EC05 23          >                db      "#"               // name string in 7-bit ascii, but
 574+ EC06             >                org     $-1                 // alter last byte of Name just above to set
 574+ EC05 A3          >                db      {b $} | END_BIT     // msb as name end
 574+ EC06             >
 574+ EC06 FB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 574+ EC08             >Prev_Ptr        defl    Heap_Ptr
 574+ EC08             >
 574+ EC08             >mirror_Ptr      defl    $
 574+ EC08             >
 574+ EC08 57 7E       >                dw      Dict_Ptr + 2        // xt
 574+ EC0A             >Heap_Ptr        defl    $ - $E000           // save current HP
 574+ EC0A             >
 574+ EC0A             >Current_HP      defl  $ - $E000             // used to set HP once!
 574+ EC0A             >
 574+ EC0A             >//              ______________________________________________________________________
 574+ EC0A             >//              Dictionary part
 574+ EC0A             >
 574+ EC0A             >                org     Dict_Ptr
 574+ 7E55             >
 574+ 7E55 08 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 574+ 7E57             >
 574+ 7E57             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 574+ 7E57 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 574+ 7E5A             >
 574+ 7E5A             >
 574+ 7E5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 574+ 7E5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 574+ 7E5A             >
 574+ 7E5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 575+ 7E5A 63 6B 9B 69                  dw      BASE, FETCH
 576+ 7E5E
 577+ 7E5E 5D 68                        dw      TO_R                    // >r           ( ud1 )
 578+ 7E60 92 6A 73 68                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 578+ 7E64 E0 67
 579+ 7E66 68 68 23 69                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 579+ 7E6A 5D 68
 580+ 7E6C E0 67                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 581+ 7E6E 68 68                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 582+ 7E70
 583+ 7E70 31 69                        dw      ROT
 584+ 7E72 A3 63 09 00                  dw      LIT, 9, OVER, LESS
 584+ 7E76 06 69 1B 6C
 585+ 7E7A F5 63                        dw      ZBRANCH
 586+ 7E7C 08 00                        dw      Dash_Endif - $
 587+ 7E7E A3 63 07 00                  dw          LIT, 7, PLUS
 587+ 7E82 A5 68
 588+ 7E84              Dash_Endif:
 589+ 7E84
 590+ 7E84 A3 63 30 00                  dw      LIT, 48, PLUS, HOLD
 590+ 7E88 A5 68 B3 70
 591+ 7E8C 53 68                        dw      EXIT
 592+ 7E8E
 593+ 7E8E              //  ______________________________________________________________________
 594+ 7E8E              //
 595+ 7E8E              // #s           d1 -- d2
 596+ 7E8E                              Colon_Def DASHES, "#S", is_normal
 596+ 7E8E             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 596+ 7E8E             >
 596+ 7E8E             >Dict_Ptr        defl    $
 596+ 7E8E             >
 596+ 7E8E             >//              ______________________________________________________________________
 596+ 7E8E             >//              Heap part
 596+ 7E8E             >
 596+ 7E8E             >
 596+ 7E8E             >                org     (Heap_Ptr & $1FFF) + $E000
 596+ EC0A             >
 596+ EC0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 596+ EC0A             >Latest_Definition defl  Heap_Ptr
 596+ EC0A             >
 596+ EC0A             >                // dummy db directives used to calculate length of namec
 596+ EC0A 23 53       >                db      "#S"
 596+ EC0C             >len_NFA         defl    $ - temp_NFA
 596+ EC0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 596+ EC0A             >
 596+ EC0A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 596+ EC0B 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 596+ EC0D             >                org     $-1                 // alter last byte of Name just above to set
 596+ EC0C D3          >                db      {b $} | END_BIT     // msb as name end
 596+ EC0D             >
 596+ EC0D 04 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 596+ EC0F             >Prev_Ptr        defl    Heap_Ptr
 596+ EC0F             >
 596+ EC0F             >mirror_Ptr      defl    $
 596+ EC0F             >
 596+ EC0F 90 7E       >                dw      Dict_Ptr + 2        // xt
 596+ EC11             >Heap_Ptr        defl    $ - $E000           // save current HP
 596+ EC11             >
 596+ EC11             >Current_HP      defl  $ - $E000             // used to set HP once!
 596+ EC11             >
 596+ EC11             >//              ______________________________________________________________________
 596+ EC11             >//              Dictionary part
 596+ EC11             >
 596+ EC11             >                org     Dict_Ptr
 596+ 7E8E             >
 596+ 7E8E 0F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 596+ 7E90             >
 596+ 7E90             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 596+ 7E90 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 596+ 7E93             >
 596+ 7E93             >
 596+ 7E93             >                endif           ; ok        // for other definitions it "points" the correct handler
 596+ 7E93             >                // Use of "; ok" to suppress "warning[fwdref]"
 596+ 7E93             >
 596+ 7E93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 597+ 7E93              Dashes_Begin:
 598+ 7E93 57 7E 79 69                  dw      DASH, TWO_DUP
 599+ 7E97 22 68 78 68                  dw          OR_OP, ZEQUAL
 600+ 7E9B F5 63                        dw      ZBRANCH
 601+ 7E9D F6 FF                        dw      Dashes_Begin - $
 602+ 7E9F 53 68                        dw      EXIT
 603+ 7EA1
 604+ 7EA1              //  ______________________________________________________________________
 605+ 7EA1              //
 606+ 7EA1              // d.r          d n --
 607+ 7EA1                              Colon_Def D_DOT_R, "D.R", is_normal
 607+ 7EA1             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 607+ 7EA1             >
 607+ 7EA1             >Dict_Ptr        defl    $
 607+ 7EA1             >
 607+ 7EA1             >//              ______________________________________________________________________
 607+ 7EA1             >//              Heap part
 607+ 7EA1             >
 607+ 7EA1             >
 607+ 7EA1             >                org     (Heap_Ptr & $1FFF) + $E000
 607+ EC11             >
 607+ EC11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ EC11             >Latest_Definition defl  Heap_Ptr
 607+ EC11             >
 607+ EC11             >                // dummy db directives used to calculate length of namec
 607+ EC11 44 2E 52    >                db      "D.R"
 607+ EC14             >len_NFA         defl    $ - temp_NFA
 607+ EC14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ EC11             >
 607+ EC11 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ EC12 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 607+ EC15             >                org     $-1                 // alter last byte of Name just above to set
 607+ EC14 D2          >                db      {b $} | END_BIT     // msb as name end
 607+ EC15             >
 607+ EC15 0A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 607+ EC17             >Prev_Ptr        defl    Heap_Ptr
 607+ EC17             >
 607+ EC17             >mirror_Ptr      defl    $
 607+ EC17             >
 607+ EC17 A3 7E       >                dw      Dict_Ptr + 2        // xt
 607+ EC19             >Heap_Ptr        defl    $ - $E000           // save current HP
 607+ EC19             >
 607+ EC19             >Current_HP      defl  $ - $E000             // used to set HP once!
 607+ EC19             >
 607+ EC19             >//              ______________________________________________________________________
 607+ EC19             >//              Dictionary part
 607+ EC19             >
 607+ EC19             >                org     Dict_Ptr
 607+ 7EA1             >
 607+ 7EA1 17 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 607+ 7EA3             >
 607+ 7EA3             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 7EA3 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 7EA6             >
 607+ 7EA6             >
 607+ 7EA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 7EA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 7EA6             >
 607+ 7EA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 7EA6 5D 68                        dw      TO_R
 609+ 7EA8 1A 69 9C 76                  dw      TUCK, DABS
 610+ 7EAC 24 7E 90 7E                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 610+ 7EB0 31 69 44 7E
 610+ 7EB4 31 7E
 611+ 7EB6 68 68                        dw      R_TO
 612+ 7EB8 06 69 F6 6B                  dw      OVER, SUBTRACT, SPACES, TYPE
 612+ 7EBC 0D 7E 83 6F
 613+ 7EC0 53 68                        dw      EXIT
 614+ 7EC2
 615+ 7EC2              //  ______________________________________________________________________
 616+ 7EC2              //
 617+ 7EC2              // .r           n1 n2 --
 618+ 7EC2                              Colon_Def DOT_R, ".R", is_normal
 618+ 7EC2             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 618+ 7EC2             >
 618+ 7EC2             >Dict_Ptr        defl    $
 618+ 7EC2             >
 618+ 7EC2             >//              ______________________________________________________________________
 618+ 7EC2             >//              Heap part
 618+ 7EC2             >
 618+ 7EC2             >
 618+ 7EC2             >                org     (Heap_Ptr & $1FFF) + $E000
 618+ EC19             >
 618+ EC19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 618+ EC19             >Latest_Definition defl  Heap_Ptr
 618+ EC19             >
 618+ EC19             >                // dummy db directives used to calculate length of namec
 618+ EC19 2E 52       >                db      ".R"
 618+ EC1B             >len_NFA         defl    $ - temp_NFA
 618+ EC1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 618+ EC19             >
 618+ EC19 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 618+ EC1A 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 618+ EC1C             >                org     $-1                 // alter last byte of Name just above to set
 618+ EC1B D2          >                db      {b $} | END_BIT     // msb as name end
 618+ EC1C             >
 618+ EC1C 11 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 618+ EC1E             >Prev_Ptr        defl    Heap_Ptr
 618+ EC1E             >
 618+ EC1E             >mirror_Ptr      defl    $
 618+ EC1E             >
 618+ EC1E C4 7E       >                dw      Dict_Ptr + 2        // xt
 618+ EC20             >Heap_Ptr        defl    $ - $E000           // save current HP
 618+ EC20             >
 618+ EC20             >Current_HP      defl  $ - $E000             // used to set HP once!
 618+ EC20             >
 618+ EC20             >//              ______________________________________________________________________
 618+ EC20             >//              Dictionary part
 618+ EC20             >
 618+ EC20             >                org     Dict_Ptr
 618+ 7EC2             >
 618+ 7EC2 1E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 618+ 7EC4             >
 618+ 7EC4             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 618+ 7EC4 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 618+ 7EC7             >
 618+ 7EC7             >
 618+ 7EC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 618+ 7EC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 618+ 7EC7             >
 618+ 7EC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 619+ 7EC7 5D 68                        dw      TO_R
 620+ 7EC9 EB 6B 68 68                  dw      S_TO_D, R_TO
 621+ 7ECD A3 7E                        dw      D_DOT_R
 622+ 7ECF 53 68                        dw      EXIT
 623+ 7ED1
 624+ 7ED1              //  ______________________________________________________________________
 625+ 7ED1              //
 626+ 7ED1              // d.           d --
 627+ 7ED1                              Colon_Def D_DOT, "D.", is_normal
 627+ 7ED1             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 627+ 7ED1             >
 627+ 7ED1             >Dict_Ptr        defl    $
 627+ 7ED1             >
 627+ 7ED1             >//              ______________________________________________________________________
 627+ 7ED1             >//              Heap part
 627+ 7ED1             >
 627+ 7ED1             >
 627+ 7ED1             >                org     (Heap_Ptr & $1FFF) + $E000
 627+ EC20             >
 627+ EC20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 627+ EC20             >Latest_Definition defl  Heap_Ptr
 627+ EC20             >
 627+ EC20             >                // dummy db directives used to calculate length of namec
 627+ EC20 44 2E       >                db      "D."
 627+ EC22             >len_NFA         defl    $ - temp_NFA
 627+ EC22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 627+ EC20             >
 627+ EC20 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 627+ EC21 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 627+ EC23             >                org     $-1                 // alter last byte of Name just above to set
 627+ EC22 AE          >                db      {b $} | END_BIT     // msb as name end
 627+ EC23             >
 627+ EC23 19 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 627+ EC25             >Prev_Ptr        defl    Heap_Ptr
 627+ EC25             >
 627+ EC25             >mirror_Ptr      defl    $
 627+ EC25             >
 627+ EC25 D3 7E       >                dw      Dict_Ptr + 2        // xt
 627+ EC27             >Heap_Ptr        defl    $ - $E000           // save current HP
 627+ EC27             >
 627+ EC27             >Current_HP      defl  $ - $E000             // used to set HP once!
 627+ EC27             >
 627+ EC27             >//              ______________________________________________________________________
 627+ EC27             >//              Dictionary part
 627+ EC27             >
 627+ EC27             >                org     Dict_Ptr
 627+ 7ED1             >
 627+ 7ED1 25 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 627+ 7ED3             >
 627+ 7ED3             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 627+ 7ED3 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 627+ 7ED6             >
 627+ 7ED6             >
 627+ 7ED6             >                endif           ; ok        // for other definitions it "points" the correct handler
 627+ 7ED6             >                // Use of "; ok" to suppress "warning[fwdref]"
 627+ 7ED6             >
 627+ 7ED6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 628+ 7ED6 92 6A A3 7E                  dw      ZERO, D_DOT_R, SPACE
 628+ 7EDA 88 6C
 629+ 7EDC 53 68                        dw      EXIT
 630+ 7EDE
 631+ 7EDE              //  ______________________________________________________________________
 632+ 7EDE              //
 633+ 7EDE              // .            n --
 634+ 7EDE                              Colon_Def DOT, ".", is_normal
 634+ 7EDE             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 634+ 7EDE             >
 634+ 7EDE             >Dict_Ptr        defl    $
 634+ 7EDE             >
 634+ 7EDE             >//              ______________________________________________________________________
 634+ 7EDE             >//              Heap part
 634+ 7EDE             >
 634+ 7EDE             >
 634+ 7EDE             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ EC27             >
 634+ EC27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ EC27             >Latest_Definition defl  Heap_Ptr
 634+ EC27             >
 634+ EC27             >                // dummy db directives used to calculate length of namec
 634+ EC27 2E          >                db      "."
 634+ EC28             >len_NFA         defl    $ - temp_NFA
 634+ EC28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ EC27             >
 634+ EC27 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ EC28 2E          >                db      "."               // name string in 7-bit ascii, but
 634+ EC29             >                org     $-1                 // alter last byte of Name just above to set
 634+ EC28 AE          >                db      {b $} | END_BIT     // msb as name end
 634+ EC29             >
 634+ EC29 20 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ EC2B             >Prev_Ptr        defl    Heap_Ptr
 634+ EC2B             >
 634+ EC2B             >mirror_Ptr      defl    $
 634+ EC2B             >
 634+ EC2B E0 7E       >                dw      Dict_Ptr + 2        // xt
 634+ EC2D             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ EC2D             >
 634+ EC2D             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ EC2D             >
 634+ EC2D             >//              ______________________________________________________________________
 634+ EC2D             >//              Dictionary part
 634+ EC2D             >
 634+ EC2D             >                org     Dict_Ptr
 634+ 7EDE             >
 634+ 7EDE 2B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 7EE0             >
 634+ 7EE0             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 7EE0 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 7EE3             >
 634+ 7EE3             >
 634+ 7EE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 7EE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 7EE3             >
 634+ 7EE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 7EE3 EB 6B D3 7E                  dw      S_TO_D, D_DOT
 636+ 7EE7 53 68                        dw      EXIT
 637+ 7EE9
 638+ 7EE9              //  ______________________________________________________________________
 639+ 7EE9              //
 640+ 7EE9              // ?            n --
 641+ 7EE9                              Colon_Def QUESTION, "?", is_normal
 641+ 7EE9             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 641+ 7EE9             >
 641+ 7EE9             >Dict_Ptr        defl    $
 641+ 7EE9             >
 641+ 7EE9             >//              ______________________________________________________________________
 641+ 7EE9             >//              Heap part
 641+ 7EE9             >
 641+ 7EE9             >
 641+ 7EE9             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ EC2D             >
 641+ EC2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ EC2D             >Latest_Definition defl  Heap_Ptr
 641+ EC2D             >
 641+ EC2D             >                // dummy db directives used to calculate length of namec
 641+ EC2D 3F          >                db      "?"
 641+ EC2E             >len_NFA         defl    $ - temp_NFA
 641+ EC2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ EC2D             >
 641+ EC2D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ EC2E 3F          >                db      "?"               // name string in 7-bit ascii, but
 641+ EC2F             >                org     $-1                 // alter last byte of Name just above to set
 641+ EC2E BF          >                db      {b $} | END_BIT     // msb as name end
 641+ EC2F             >
 641+ EC2F 27 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ EC31             >Prev_Ptr        defl    Heap_Ptr
 641+ EC31             >
 641+ EC31             >mirror_Ptr      defl    $
 641+ EC31             >
 641+ EC31 EB 7E       >                dw      Dict_Ptr + 2        // xt
 641+ EC33             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ EC33             >
 641+ EC33             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ EC33             >
 641+ EC33             >//              ______________________________________________________________________
 641+ EC33             >//              Dictionary part
 641+ EC33             >
 641+ EC33             >                org     Dict_Ptr
 641+ 7EE9             >
 641+ 7EE9 31 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 7EEB             >
 641+ 7EEB             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 7EEB CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 7EEE             >
 641+ 7EEE             >
 641+ 7EEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 7EEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 7EEE             >
 641+ 7EEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 7EEE 9B 69 E0 7E                  dw      FETCH, DOT
 643+ 7EF2 53 68                        dw      EXIT
 644+ 7EF4
 645+ 7EF4              //  ______________________________________________________________________
 646+ 7EF4              //
 647+ 7EF4              // u.           u --
 648+ 7EF4                              Colon_Def U_DOT, "U.", is_normal
 648+ 7EF4             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 648+ 7EF4             >
 648+ 7EF4             >Dict_Ptr        defl    $
 648+ 7EF4             >
 648+ 7EF4             >//              ______________________________________________________________________
 648+ 7EF4             >//              Heap part
 648+ 7EF4             >
 648+ 7EF4             >
 648+ 7EF4             >                org     (Heap_Ptr & $1FFF) + $E000
 648+ EC33             >
 648+ EC33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ EC33             >Latest_Definition defl  Heap_Ptr
 648+ EC33             >
 648+ EC33             >                // dummy db directives used to calculate length of namec
 648+ EC33 55 2E       >                db      "U."
 648+ EC35             >len_NFA         defl    $ - temp_NFA
 648+ EC35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ EC33             >
 648+ EC33 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ EC34 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 648+ EC36             >                org     $-1                 // alter last byte of Name just above to set
 648+ EC35 AE          >                db      {b $} | END_BIT     // msb as name end
 648+ EC36             >
 648+ EC36 2D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 648+ EC38             >Prev_Ptr        defl    Heap_Ptr
 648+ EC38             >
 648+ EC38             >mirror_Ptr      defl    $
 648+ EC38             >
 648+ EC38 F6 7E       >                dw      Dict_Ptr + 2        // xt
 648+ EC3A             >Heap_Ptr        defl    $ - $E000           // save current HP
 648+ EC3A             >
 648+ EC3A             >Current_HP      defl  $ - $E000             // used to set HP once!
 648+ EC3A             >
 648+ EC3A             >//              ______________________________________________________________________
 648+ EC3A             >//              Dictionary part
 648+ EC3A             >
 648+ EC3A             >                org     Dict_Ptr
 648+ 7EF4             >
 648+ 7EF4 38 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 648+ 7EF6             >
 648+ 7EF6             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 7EF6 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 648+ 7EF9             >
 648+ 7EF9             >
 648+ 7EF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 7EF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 7EF9             >
 648+ 7EF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 7EF9 92 6A D3 7E                  dw      ZERO, D_DOT
 650+ 7EFD 53 68                        dw      EXIT
 651+ 7EFF
 652+ 7EFF              //  ______________________________________________________________________
 653+ 7EFF              //
 654+ 7EFF              // words        --
 655+ 7EFF                              Colon_Def WORDS, "WORDS", is_normal
 655+ 7EFF             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 655+ 7EFF             >
 655+ 7EFF             >Dict_Ptr        defl    $
 655+ 7EFF             >
 655+ 7EFF             >//              ______________________________________________________________________
 655+ 7EFF             >//              Heap part
 655+ 7EFF             >
 655+ 7EFF             >
 655+ 7EFF             >                org     (Heap_Ptr & $1FFF) + $E000
 655+ EC3A             >
 655+ EC3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ EC3A             >Latest_Definition defl  Heap_Ptr
 655+ EC3A             >
 655+ EC3A             >                // dummy db directives used to calculate length of namec
 655+ EC3A 57 4F 52 44 >                db      "WORDS"
 655+ EC3E 53          >
 655+ EC3F             >len_NFA         defl    $ - temp_NFA
 655+ EC3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ EC3A             >
 655+ EC3A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ EC3B 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 655+ EC3F 53          >
 655+ EC40             >                org     $-1                 // alter last byte of Name just above to set
 655+ EC3F D3          >                db      {b $} | END_BIT     // msb as name end
 655+ EC40             >
 655+ EC40 33 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 655+ EC42             >Prev_Ptr        defl    Heap_Ptr
 655+ EC42             >
 655+ EC42             >mirror_Ptr      defl    $
 655+ EC42             >
 655+ EC42 01 7F       >                dw      Dict_Ptr + 2        // xt
 655+ EC44             >Heap_Ptr        defl    $ - $E000           // save current HP
 655+ EC44             >
 655+ EC44             >Current_HP      defl  $ - $E000             // used to set HP once!
 655+ EC44             >
 655+ EC44             >//              ______________________________________________________________________
 655+ EC44             >//              Dictionary part
 655+ EC44             >
 655+ EC44             >                org     Dict_Ptr
 655+ 7EFF             >
 655+ 7EFF 42 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 655+ 7F01             >
 655+ 7F01             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 7F01 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 655+ 7F04             >
 655+ 7F04             >
 655+ 7F04             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 7F04             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 7F04             >
 655+ 7F04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 7F04 A3 63 80 00                  dw      LIT, 128, OUT, STORE
 656+ 7F08 3F 6B A5 69
 657+ 7F0C 51 6B 9B 69                  dw      CONTEXT, FETCH, FETCH
 657+ 7F10 9B 69
 658+ 7F12              Words_Begin:
 659+ 7F12 F9 6C                        dw          FAR // Q TO HEAP
 660+ 7F14 2A 69 B0 69                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 660+ 7F18 A3 63 1F 00
 660+ 7F1C 13 68
 661+ 7F1E 3F 6B 9B 69                  dw          OUT, FETCH, PLUS
 661+ 7F22 A5 68
 662+ 7F24 BC 6A 1B 6C                  dw          CL, LESS, ZEQUAL
 662+ 7F28 78 68
 663+ 7F2A F5 63                        dw          ZBRANCH
 664+ 7F2C 0A 00                        dw          Words_Endif - $
 665+ 7F2E B6 65 92 6A                  dw              CR, ZERO, OUT, STORE
 665+ 7F32 3F 6B A5 69
 666+ 7F36              Words_Endif:
 667+ 7F36 2A 69 63 73                  dw          DUP, ID_DOT
 668+ 7F3A 99 6A 93 6C                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 668+ 7F3E BE 68 9B 69
 669+ 7F42 2A 69 78 68                  dw          DUP, ZEQUAL
 670+ 7F46 AD 66 22 68                  dw          QTERMINAL, OR_OP
 671+ 7F4A F5 63                        dw      ZBRANCH
 672+ 7F4C C6 FF                        dw      Words_Begin - $
 673+ 7F4E 0F 69                        dw      DROP
 674+ 7F50 53 68                        dw      EXIT
 675+ 7F52
 676+ 7F52              //  ______________________________________________________________________
 677+ 7F52              //
 678+ 7F52              // list         n --
 679+ 7F52                              Colon_Def LIST, "LIST", is_normal
 679+ 7F52             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 679+ 7F52             >
 679+ 7F52             >Dict_Ptr        defl    $
 679+ 7F52             >
 679+ 7F52             >//              ______________________________________________________________________
 679+ 7F52             >//              Heap part
 679+ 7F52             >
 679+ 7F52             >
 679+ 7F52             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ EC44             >
 679+ EC44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ EC44             >Latest_Definition defl  Heap_Ptr
 679+ EC44             >
 679+ EC44             >                // dummy db directives used to calculate length of namec
 679+ EC44 4C 49 53 54 >                db      "LIST"
 679+ EC48             >len_NFA         defl    $ - temp_NFA
 679+ EC48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ EC44             >
 679+ EC44 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ EC45 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 679+ EC49             >                org     $-1                 // alter last byte of Name just above to set
 679+ EC48 D4          >                db      {b $} | END_BIT     // msb as name end
 679+ EC49             >
 679+ EC49 3A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ EC4B             >Prev_Ptr        defl    Heap_Ptr
 679+ EC4B             >
 679+ EC4B             >mirror_Ptr      defl    $
 679+ EC4B             >
 679+ EC4B 54 7F       >                dw      Dict_Ptr + 2        // xt
 679+ EC4D             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ EC4D             >
 679+ EC4D             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ EC4D             >
 679+ EC4D             >//              ______________________________________________________________________
 679+ EC4D             >//              Dictionary part
 679+ EC4D             >
 679+ EC4D             >                org     Dict_Ptr
 679+ 7F52             >
 679+ 7F52 4B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 7F54             >
 679+ 7F54             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 7F54 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 7F57             >
 679+ 7F57             >
 679+ 7F57             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 7F57             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 7F57             >
 679+ 7F57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 7F57 CC 6E B6 65                  dw      DECIMAL, CR
 681+ 7F5B 2A 69 45 6B                  dw      DUP, SCR, STORE
 681+ 7F5F A5 69
 682+ 7F61 20 71                        dw      C_DOT_QUOTE
 683+ 7F63 05 53 63 72                  db      5, "Scr# "
 683+ 7F67 23 20
 684+ 7F69 E0 7E                        dw      DOT
 685+ 7F6B D1 6A 92 6A                  dw      LSCR, ZERO, C_DO
 685+ 7F6F 34 64
 686+ 7F71              List_Loop:
 687+ 7F71 B6 65                        dw          CR
 688+ 7F73 3A 64 A7 6A                  dw          I, THREE
 689+ 7F77 C4 7E 88 6C                  dw          DOT_R, SPACE
 690+ 7F7B 3A 64 45 6B                  dw          I, SCR, FETCH, DOT_LINE
 690+ 7F7F 9B 69 97 77
 691+ 7F83 AD 66                        dw          QTERMINAL
 692+ 7F85 F5 63                        dw          ZBRANCH
 693+ 7F87 06 00                        dw          List_Endif - $
 694+ 7F89 00 64                        dw              C_LEAVE
 695+ 7F8B 06 00                        dw              List_Leave - $
 696+ 7F8D              List_Endif:
 697+ 7F8D E0 63                        dw      C_LOOP
 698+ 7F8F E2 FF                        dw      List_Loop - $
 699+ 7F91              List_Leave:
 700+ 7F91 B6 65                        dw      CR
 701+ 7F93 53 68                        dw      EXIT
 702+ 7F95
 703+ 7F95              //  ______________________________________________________________________
 704+ 7F95              //
 705+ 7F95              // index        n1 n2 --
 706+ 7F95                              Colon_Def INDEX, "INDEX", is_normal
 706+ 7F95             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 706+ 7F95             >
 706+ 7F95             >Dict_Ptr        defl    $
 706+ 7F95             >
 706+ 7F95             >//              ______________________________________________________________________
 706+ 7F95             >//              Heap part
 706+ 7F95             >
 706+ 7F95             >
 706+ 7F95             >                org     (Heap_Ptr & $1FFF) + $E000
 706+ EC4D             >
 706+ EC4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 706+ EC4D             >Latest_Definition defl  Heap_Ptr
 706+ EC4D             >
 706+ EC4D             >                // dummy db directives used to calculate length of namec
 706+ EC4D 49 4E 44 45 >                db      "INDEX"
 706+ EC51 58          >
 706+ EC52             >len_NFA         defl    $ - temp_NFA
 706+ EC52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 706+ EC4D             >
 706+ EC4D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 706+ EC4E 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 706+ EC52 58          >
 706+ EC53             >                org     $-1                 // alter last byte of Name just above to set
 706+ EC52 D8          >                db      {b $} | END_BIT     // msb as name end
 706+ EC53             >
 706+ EC53 44 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 706+ EC55             >Prev_Ptr        defl    Heap_Ptr
 706+ EC55             >
 706+ EC55             >mirror_Ptr      defl    $
 706+ EC55             >
 706+ EC55 97 7F       >                dw      Dict_Ptr + 2        // xt
 706+ EC57             >Heap_Ptr        defl    $ - $E000           // save current HP
 706+ EC57             >
 706+ EC57             >Current_HP      defl  $ - $E000             // used to set HP once!
 706+ EC57             >
 706+ EC57             >//              ______________________________________________________________________
 706+ EC57             >//              Dictionary part
 706+ EC57             >
 706+ EC57             >                org     Dict_Ptr
 706+ 7F95             >
 706+ 7F95 55 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 706+ 7F97             >
 706+ 7F97             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 706+ 7F97 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 706+ 7F9A             >
 706+ 7F9A             >
 706+ 7F9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 706+ 7F9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 706+ 7F9A             >
 706+ 7F9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 707+ 7F9A BE 68 23 69                  dw      ONE_PLUS, SWAP, C_DO
 707+ 7F9E 34 64
 708+ 7FA0              Index_Loop:
 709+ 7FA0 B6 65 3A 64                  dw          CR, I, THREE
 709+ 7FA4 A7 6A
 710+ 7FA6 C4 7E 88 6C                  dw          DOT_R, SPACE
 711+ 7FAA 92 6A 3A 64                  dw          ZERO, I, DOT_LINE
 711+ 7FAE 97 77
 712+ 7FB0 AD 66                        dw          QTERMINAL
 713+ 7FB2 F5 63                        dw          ZBRANCH
 714+ 7FB4 06 00                        dw          Index_Endif - $
 715+ 7FB6 00 64                        dw              C_LEAVE
 716+ 7FB8 06 00                        dw              Index_Leave - $
 717+ 7FBA              Index_Endif:
 718+ 7FBA E0 63                        dw      C_LOOP
 719+ 7FBC E4 FF                        dw      Index_Loop - $
 720+ 7FBE              Index_Leave:
 721+ 7FBE B6 65                        dw      CR
 722+ 7FC0 53 68                        dw      EXIT
 723+ 7FC2
 724+ 7FC2              //  ______________________________________________________________________
 725+ 7FC2              //
 726+ 7FC2              // cls          --
 727+ 7FC2                              Colon_Def CLS, "CLS", is_normal
 727+ 7FC2             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 727+ 7FC2             >
 727+ 7FC2             >Dict_Ptr        defl    $
 727+ 7FC2             >
 727+ 7FC2             >//              ______________________________________________________________________
 727+ 7FC2             >//              Heap part
 727+ 7FC2             >
 727+ 7FC2             >
 727+ 7FC2             >                org     (Heap_Ptr & $1FFF) + $E000
 727+ EC57             >
 727+ EC57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 727+ EC57             >Latest_Definition defl  Heap_Ptr
 727+ EC57             >
 727+ EC57             >                // dummy db directives used to calculate length of namec
 727+ EC57 43 4C 53    >                db      "CLS"
 727+ EC5A             >len_NFA         defl    $ - temp_NFA
 727+ EC5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 727+ EC57             >
 727+ EC57 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 727+ EC58 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 727+ EC5B             >                org     $-1                 // alter last byte of Name just above to set
 727+ EC5A D3          >                db      {b $} | END_BIT     // msb as name end
 727+ EC5B             >
 727+ EC5B 4D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 727+ EC5D             >Prev_Ptr        defl    Heap_Ptr
 727+ EC5D             >
 727+ EC5D             >mirror_Ptr      defl    $
 727+ EC5D             >
 727+ EC5D C4 7F       >                dw      Dict_Ptr + 2        // xt
 727+ EC5F             >Heap_Ptr        defl    $ - $E000           // save current HP
 727+ EC5F             >
 727+ EC5F             >Current_HP      defl  $ - $E000             // used to set HP once!
 727+ EC5F             >
 727+ EC5F             >//              ______________________________________________________________________
 727+ EC5F             >//              Dictionary part
 727+ EC5F             >
 727+ EC5F             >                org     Dict_Ptr
 727+ 7FC2             >
 727+ 7FC2 5D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 727+ 7FC4             >
 727+ 7FC4             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 727+ 7FC4 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 727+ 7FC7             >
 727+ 7FC7             >
 727+ 7FC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 727+ 7FC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 727+ 7FC7             >
 727+ 7FC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 728+ 7FC7 A3 63 0E 00                  dw      LIT, $0E, EMITC
 728+ 7FCB A2 65
 729+ 7FCD 53 68                        dw      EXIT
 730+ 7FCF
 731+ 7FCF              //  ______________________________________________________________________
 732+ 7FCF              //
 733+ 7FCF              // splash       --
 734+ 7FCF              //              Colon_Def SPLASH, "SPLASH", is_normal
 735+ 7FCF              //              dw      CLS
 736+ 7FCF              //              dw      C_DOT_QUOTE
 737+ 7FCF              //              db      87
 738+ 7FCF              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 739+ 7FCF              //              db      "Heap Vocabulary - build 20231119", 13  // 33
 740+ 7FCF              //              db      "1990-2023 Matteo Vitturi", 13        // 25
 741+ 7FCF              //              dw      EXIT
 742+ 7FCF
 743+ 7FCF              //  ______________________________________________________________________
 744+ 7FCF              //
 745+ 7FCF              // splash       --
 746+ 7FCF                              Colon_Def SPLASH, "SPLASH", is_normal
 746+ 7FCF             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 746+ 7FCF             >
 746+ 7FCF             >Dict_Ptr        defl    $
 746+ 7FCF             >
 746+ 7FCF             >//              ______________________________________________________________________
 746+ 7FCF             >//              Heap part
 746+ 7FCF             >
 746+ 7FCF             >
 746+ 7FCF             >                org     (Heap_Ptr & $1FFF) + $E000
 746+ EC5F             >
 746+ EC5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 746+ EC5F             >Latest_Definition defl  Heap_Ptr
 746+ EC5F             >
 746+ EC5F             >                // dummy db directives used to calculate length of namec
 746+ EC5F 53 50 4C 41 >                db      "SPLASH"
 746+ EC63 53 48       >
 746+ EC65             >len_NFA         defl    $ - temp_NFA
 746+ EC65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 746+ EC5F             >
 746+ EC5F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 746+ EC60 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 746+ EC64 53 48       >
 746+ EC66             >                org     $-1                 // alter last byte of Name just above to set
 746+ EC65 C8          >                db      {b $} | END_BIT     // msb as name end
 746+ EC66             >
 746+ EC66 57 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 746+ EC68             >Prev_Ptr        defl    Heap_Ptr
 746+ EC68             >
 746+ EC68             >mirror_Ptr      defl    $
 746+ EC68             >
 746+ EC68 D1 7F       >                dw      Dict_Ptr + 2        // xt
 746+ EC6A             >Heap_Ptr        defl    $ - $E000           // save current HP
 746+ EC6A             >
 746+ EC6A             >Current_HP      defl  $ - $E000             // used to set HP once!
 746+ EC6A             >
 746+ EC6A             >//              ______________________________________________________________________
 746+ EC6A             >//              Dictionary part
 746+ EC6A             >
 746+ EC6A             >                org     Dict_Ptr
 746+ 7FCF             >
 746+ 7FCF 68 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 746+ 7FD1             >
 746+ 7FD1             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 746+ 7FD1 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 746+ 7FD4             >
 746+ 7FD4             >
 746+ 7FD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 746+ 7FD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 746+ 7FD4             >
 746+ 7FD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 747+ 7FD4 C4 7F                        dw      CLS
 748+ 7FD6 A3 63 02 00                  dw      LIT, Splash_Ptr
 749+ 7FDA F9 6C                        dw      FAR
 750+ 7FDC 2F 6F 83 6F                  dw      COUNT, TYPE
 751+ 7FE0 53 68                        dw      EXIT
 752+ 7FE2
 753+ 7FE2              //  ______________________________________________________________________
 754+ 7FE2              //
 755+ 7FE2              // video        --
 756+ 7FE2                              Colon_Def VIDEO, "VIDEO", is_normal
 756+ 7FE2             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 756+ 7FE2             >
 756+ 7FE2             >Dict_Ptr        defl    $
 756+ 7FE2             >
 756+ 7FE2             >//              ______________________________________________________________________
 756+ 7FE2             >//              Heap part
 756+ 7FE2             >
 756+ 7FE2             >
 756+ 7FE2             >                org     (Heap_Ptr & $1FFF) + $E000
 756+ EC6A             >
 756+ EC6A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 756+ EC6A             >Latest_Definition defl  Heap_Ptr
 756+ EC6A             >
 756+ EC6A             >                // dummy db directives used to calculate length of namec
 756+ EC6A 56 49 44 45 >                db      "VIDEO"
 756+ EC6E 4F          >
 756+ EC6F             >len_NFA         defl    $ - temp_NFA
 756+ EC6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 756+ EC6A             >
 756+ EC6A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 756+ EC6B 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 756+ EC6F 4F          >
 756+ EC70             >                org     $-1                 // alter last byte of Name just above to set
 756+ EC6F CF          >                db      {b $} | END_BIT     // msb as name end
 756+ EC70             >
 756+ EC70 5F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 756+ EC72             >Prev_Ptr        defl    Heap_Ptr
 756+ EC72             >
 756+ EC72             >mirror_Ptr      defl    $
 756+ EC72             >
 756+ EC72 E4 7F       >                dw      Dict_Ptr + 2        // xt
 756+ EC74             >Heap_Ptr        defl    $ - $E000           // save current HP
 756+ EC74             >
 756+ EC74             >Current_HP      defl  $ - $E000             // used to set HP once!
 756+ EC74             >
 756+ EC74             >//              ______________________________________________________________________
 756+ EC74             >//              Dictionary part
 756+ EC74             >
 756+ EC74             >                org     Dict_Ptr
 756+ 7FE2             >
 756+ 7FE2 72 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 756+ 7FE4             >
 756+ 7FE4             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 756+ 7FE4 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 756+ 7FE7             >
 756+ 7FE7             >
 756+ 7FE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 756+ 7FE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 756+ 7FE7             >
 756+ 7FE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 757+ 7FE7 A0 6A 2A 69                  dw      TWO, DUP, DEVICE, STORE
 757+ 7FEB CC 77 A5 69
 758+ 7FEF C1 66                        dw      SELECT
 759+ 7FF1 53 68                        dw      EXIT
 760+ 7FF3
 761+ 7FF3              //  ______________________________________________________________________
 762+ 7FF3              //
 763+ 7FF3              // autoexec     --
 764+ 7FF3              // this word is called the first time the Forth system boot to
 765+ 7FF3              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 766+ 7FF3                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 766+ 7FF3             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 766+ 7FF3             >
 766+ 7FF3             >Dict_Ptr        defl    $
 766+ 7FF3             >
 766+ 7FF3             >//              ______________________________________________________________________
 766+ 7FF3             >//              Heap part
 766+ 7FF3             >
 766+ 7FF3             >
 766+ 7FF3             >                org     (Heap_Ptr & $1FFF) + $E000
 766+ EC74             >
 766+ EC74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 766+ EC74             >Latest_Definition defl  Heap_Ptr
 766+ EC74             >
 766+ EC74             >                // dummy db directives used to calculate length of namec
 766+ EC74 41 55 54 4F >                db      "AUTOEXEC"
 766+ EC78 45 58 45 43 >
 766+ EC7C             >len_NFA         defl    $ - temp_NFA
 766+ EC7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 766+ EC74             >
 766+ EC74 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 766+ EC75 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 766+ EC79 45 58 45 43 >
 766+ EC7D             >                org     $-1                 // alter last byte of Name just above to set
 766+ EC7C C3          >                db      {b $} | END_BIT     // msb as name end
 766+ EC7D             >
 766+ EC7D 6A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 766+ EC7F             >Prev_Ptr        defl    Heap_Ptr
 766+ EC7F             >
 766+ EC7F             >mirror_Ptr      defl    $
 766+ EC7F             >
 766+ EC7F F5 7F       >                dw      Dict_Ptr + 2        // xt
 766+ EC81             >Heap_Ptr        defl    $ - $E000           // save current HP
 766+ EC81             >
 766+ EC81             >Current_HP      defl  $ - $E000             // used to set HP once!
 766+ EC81             >
 766+ EC81             >//              ______________________________________________________________________
 766+ EC81             >//              Dictionary part
 766+ EC81             >
 766+ EC81             >                org     Dict_Ptr
 766+ 7FF3             >
 766+ 7FF3 7F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 766+ 7FF5             >
 766+ 7FF5             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 766+ 7FF5 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 766+ 7FF8             >
 766+ 7FF8             >
 766+ 7FF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 766+ 7FF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 766+ 7FF8             >
 766+ 7FF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 767+ 7FF8 A3 63 0B 00                  dw      LIT, 11
 768+ 7FFC A3 63 59 6A                  dw      LIT, NOOP
 769+ 8000 A3 63 D2 75                  dw      LIT, Autoexec_Ptr
 770+ 8004 A5 69                        dw      STORE
 771+ 8006 FA 7C                        dw      LOAD
 772+ 8008 79 75                        dw      QUIT
 773+ 800A 53 68                        dw      EXIT
 774+ 800C
 775+ 800C
 776+ 800C              //  ______________________________________________________________________
 777+ 800C              //
 778+ 800C              // bye     --
 779+ 800C              //
 780+ 800C                              Colon_Def BYE, "BYE", is_normal
 780+ 800C             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 780+ 800C             >
 780+ 800C             >Dict_Ptr        defl    $
 780+ 800C             >
 780+ 800C             >//              ______________________________________________________________________
 780+ 800C             >//              Heap part
 780+ 800C             >
 780+ 800C             >
 780+ 800C             >                org     (Heap_Ptr & $1FFF) + $E000
 780+ EC81             >
 780+ EC81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 780+ EC81             >Latest_Definition defl  Heap_Ptr
 780+ EC81             >
 780+ EC81             >                // dummy db directives used to calculate length of namec
 780+ EC81 42 59 45    >                db      "BYE"
 780+ EC84             >len_NFA         defl    $ - temp_NFA
 780+ EC84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 780+ EC81             >
 780+ EC81 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 780+ EC82 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 780+ EC85             >                org     $-1                 // alter last byte of Name just above to set
 780+ EC84 C5          >                db      {b $} | END_BIT     // msb as name end
 780+ EC85             >
 780+ EC85 74 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 780+ EC87             >Prev_Ptr        defl    Heap_Ptr
 780+ EC87             >
 780+ EC87             >mirror_Ptr      defl    $
 780+ EC87             >
 780+ EC87 0E 80       >                dw      Dict_Ptr + 2        // xt
 780+ EC89             >Heap_Ptr        defl    $ - $E000           // save current HP
 780+ EC89             >
 780+ EC89             >Current_HP      defl  $ - $E000             // used to set HP once!
 780+ EC89             >
 780+ EC89             >//              ______________________________________________________________________
 780+ EC89             >//              Dictionary part
 780+ EC89             >
 780+ EC89             >                org     Dict_Ptr
 780+ 800C             >
 780+ 800C 87 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 780+ 800E             >
 780+ 800E             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 780+ 800E CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 780+ 8011             >
 780+ 8011             >
 780+ 8011             >                endif           ; ok        // for other definitions it "points" the correct handler
 780+ 8011             >                // Use of "; ok" to suppress "warning[fwdref]"
 780+ 8011             >
 780+ 8011             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 781+ 8011 E7 79                        dw      FLUSH
 782+ 8013 35 79                        dw      EMPTY_BUFFERS
 783+ 8015 21 78 9B 69                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 783+ 8019 FB 66 0F 69
 784+ 801D 92 6A D8 6A                  dw      ZERO, PLUS_ORIGIN
 785+ 8021 61 76                        dw      BASIC
 786+ 8023
 787+ 8023              //  ______________________________________________________________________
 788+ 8023              //
 789+ 8023              // invv     --
 790+ 8023              //
 791+ 8023              //              Colon_Def INVV, "INVV", is_normal
 792+ 8023              //              dw      LIT, 20, EMITC, ONE, EMITC
 793+ 8023              //              dw      EXIT
 794+ 8023
 795+ 8023              //  ______________________________________________________________________
 796+ 8023              //
 797+ 8023              // truv     --
 798+ 8023              //
 799+ 8023              //              Colon_Def TRUV, "TRUV", is_normal
 800+ 8023              //              dw      LIT, 20, EMITC, ZERO, EMITC
 801+ 8023              //              dw      EXIT
 802+ 8023
 803+ 8023              //  ______________________________________________________________________
 804+ 8023              //
 805+ 8023              // mark     --
 806+ 8023              //
 807+ 8023              //              Colon_Def MARK, "MARK", is_normal
 808+ 8023              //              dw      INVV, TYPE, TRUV
 809+ 8023              //              dw      EXIT
 810+ 8023
 811+ 8023              //  ______________________________________________________________________
 812+ 8023              //
 813+ 8023              // back     --
 814+ 8023              //
 815+ 8023                              Colon_Def BACK, "BACK", is_normal
 815+ 8023             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 815+ 8023             >
 815+ 8023             >Dict_Ptr        defl    $
 815+ 8023             >
 815+ 8023             >//              ______________________________________________________________________
 815+ 8023             >//              Heap part
 815+ 8023             >
 815+ 8023             >
 815+ 8023             >                org     (Heap_Ptr & $1FFF) + $E000
 815+ EC89             >
 815+ EC89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ EC89             >Latest_Definition defl  Heap_Ptr
 815+ EC89             >
 815+ EC89             >                // dummy db directives used to calculate length of namec
 815+ EC89 42 41 43 4B >                db      "BACK"
 815+ EC8D             >len_NFA         defl    $ - temp_NFA
 815+ EC8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ EC89             >
 815+ EC89 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ EC8A 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 815+ EC8E             >                org     $-1                 // alter last byte of Name just above to set
 815+ EC8D CB          >                db      {b $} | END_BIT     // msb as name end
 815+ EC8E             >
 815+ EC8E 81 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 815+ EC90             >Prev_Ptr        defl    Heap_Ptr
 815+ EC90             >
 815+ EC90             >mirror_Ptr      defl    $
 815+ EC90             >
 815+ EC90 25 80       >                dw      Dict_Ptr + 2        // xt
 815+ EC92             >Heap_Ptr        defl    $ - $E000           // save current HP
 815+ EC92             >
 815+ EC92             >Current_HP      defl  $ - $E000             // used to set HP once!
 815+ EC92             >
 815+ EC92             >//              ______________________________________________________________________
 815+ EC92             >//              Dictionary part
 815+ EC92             >
 815+ EC92             >                org     Dict_Ptr
 815+ 8023             >
 815+ 8023 90 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 815+ 8025             >
 815+ 8025             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 8025 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 815+ 8028             >
 815+ 8028             >
 815+ 8028             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 8028             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 8028             >
 815+ 8028             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 8028 B7 6B F6 6B                  dw      HERE, SUBTRACT, COMMA
 816+ 802C CD 6B
 817+ 802E 53 68                        dw      EXIT
 818+ 8030
 819+ 8030              //  ______________________________________________________________________
 820+ 8030              //
 821+ 8030              // if          ( -- a 2 ) \ compile-time
 822+ 8030              // IF ... THEN
 823+ 8030              // IF ... ELSE ... ENDIF
 824+ 8030                              Colon_Def IF, "IF", is_immediate
 824+ 8030             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 824+ 8030             >
 824+ 8030             >Dict_Ptr        defl    $
 824+ 8030             >
 824+ 8030             >//              ______________________________________________________________________
 824+ 8030             >//              Heap part
 824+ 8030             >
 824+ 8030             >
 824+ 8030             >                org     (Heap_Ptr & $1FFF) + $E000
 824+ EC92             >
 824+ EC92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 824+ EC92             >Latest_Definition defl  Heap_Ptr
 824+ EC92             >
 824+ EC92             >                // dummy db directives used to calculate length of namec
 824+ EC92 49 46       >                db      "IF"
 824+ EC94             >len_NFA         defl    $ - temp_NFA
 824+ EC94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 824+ EC92             >
 824+ EC92 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 824+ EC93 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 824+ EC95             >                org     $-1                 // alter last byte of Name just above to set
 824+ EC94 C6          >                db      {b $} | END_BIT     // msb as name end
 824+ EC95             >
 824+ EC95 89 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 824+ EC97             >Prev_Ptr        defl    Heap_Ptr
 824+ EC97             >
 824+ EC97             >mirror_Ptr      defl    $
 824+ EC97             >
 824+ EC97 32 80       >                dw      Dict_Ptr + 2        // xt
 824+ EC99             >Heap_Ptr        defl    $ - $E000           // save current HP
 824+ EC99             >
 824+ EC99             >Current_HP      defl  $ - $E000             // used to set HP once!
 824+ EC99             >
 824+ EC99             >//              ______________________________________________________________________
 824+ EC99             >//              Dictionary part
 824+ EC99             >
 824+ EC99             >                org     Dict_Ptr
 824+ 8030             >
 824+ 8030 97 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 824+ 8032             >
 824+ 8032             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 824+ 8032 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 824+ 8035             >
 824+ 8035             >
 824+ 8035             >                endif           ; ok        // for other definitions it "points" the correct handler
 824+ 8035             >                // Use of "; ok" to suppress "warning[fwdref]"
 824+ 8035             >
 824+ 8035             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 825+ 8035 63 6E F5 63                  dw      COMPILE, ZBRANCH
 826+ 8039 B7 6B 92 6A                  dw      HERE, ZERO, COMMA
 826+ 803D CD 6B
 827+ 803F A0 6A                        dw      TWO
 828+ 8041 53 68                        dw      EXIT
 829+ 8043
 830+ 8043              //  ______________________________________________________________________
 831+ 8043              //
 832+ 8043              // then        ( a 2 -- ) \ compile-time
 833+ 8043              //
 834+ 8043                              Colon_Def THEN, "THEN", is_immediate
 834+ 8043             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 834+ 8043             >
 834+ 8043             >Dict_Ptr        defl    $
 834+ 8043             >
 834+ 8043             >//              ______________________________________________________________________
 834+ 8043             >//              Heap part
 834+ 8043             >
 834+ 8043             >
 834+ 8043             >                org     (Heap_Ptr & $1FFF) + $E000
 834+ EC99             >
 834+ EC99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 834+ EC99             >Latest_Definition defl  Heap_Ptr
 834+ EC99             >
 834+ EC99             >                // dummy db directives used to calculate length of namec
 834+ EC99 54 48 45 4E >                db      "THEN"
 834+ EC9D             >len_NFA         defl    $ - temp_NFA
 834+ EC9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 834+ EC99             >
 834+ EC99 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 834+ EC9A 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 834+ EC9E             >                org     $-1                 // alter last byte of Name just above to set
 834+ EC9D CE          >                db      {b $} | END_BIT     // msb as name end
 834+ EC9E             >
 834+ EC9E 92 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 834+ ECA0             >Prev_Ptr        defl    Heap_Ptr
 834+ ECA0             >
 834+ ECA0             >mirror_Ptr      defl    $
 834+ ECA0             >
 834+ ECA0 45 80       >                dw      Dict_Ptr + 2        // xt
 834+ ECA2             >Heap_Ptr        defl    $ - $E000           // save current HP
 834+ ECA2             >
 834+ ECA2             >Current_HP      defl  $ - $E000             // used to set HP once!
 834+ ECA2             >
 834+ ECA2             >//              ______________________________________________________________________
 834+ ECA2             >//              Dictionary part
 834+ ECA2             >
 834+ ECA2             >                org     Dict_Ptr
 834+ 8043             >
 834+ 8043 A0 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 834+ 8045             >
 834+ 8045             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 834+ 8045 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 834+ 8048             >
 834+ 8048             >
 834+ 8048             >                endif           ; ok        // for other definitions it "points" the correct handler
 834+ 8048             >                // Use of "; ok" to suppress "warning[fwdref]"
 834+ 8048             >
 834+ 8048             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 835+ 8048 08 6E                        dw      QCOMP
 836+ 804A A0 6A 2C 6E                  dw      TWO, QPAIRS
 837+ 804E B7 6B 06 69                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 837+ 8052 F6 6B 23 69
 837+ 8056 A5 69
 838+ 8058 53 68                        dw      EXIT
 839+ 805A
 840+ 805A              //  ______________________________________________________________________
 841+ 805A              //
 842+ 805A              // endif       ( a 2 -- ) \ compile-time
 843+ 805A              //
 844+ 805A                              Colon_Def ENDIF, "ENDIF", is_immediate
 844+ 805A             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 844+ 805A             >
 844+ 805A             >Dict_Ptr        defl    $
 844+ 805A             >
 844+ 805A             >//              ______________________________________________________________________
 844+ 805A             >//              Heap part
 844+ 805A             >
 844+ 805A             >
 844+ 805A             >                org     (Heap_Ptr & $1FFF) + $E000
 844+ ECA2             >
 844+ ECA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 844+ ECA2             >Latest_Definition defl  Heap_Ptr
 844+ ECA2             >
 844+ ECA2             >                // dummy db directives used to calculate length of namec
 844+ ECA2 45 4E 44 49 >                db      "ENDIF"
 844+ ECA6 46          >
 844+ ECA7             >len_NFA         defl    $ - temp_NFA
 844+ ECA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 844+ ECA2             >
 844+ ECA2 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 844+ ECA3 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 844+ ECA7 46          >
 844+ ECA8             >                org     $-1                 // alter last byte of Name just above to set
 844+ ECA7 C6          >                db      {b $} | END_BIT     // msb as name end
 844+ ECA8             >
 844+ ECA8 99 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 844+ ECAA             >Prev_Ptr        defl    Heap_Ptr
 844+ ECAA             >
 844+ ECAA             >mirror_Ptr      defl    $
 844+ ECAA             >
 844+ ECAA 5C 80       >                dw      Dict_Ptr + 2        // xt
 844+ ECAC             >Heap_Ptr        defl    $ - $E000           // save current HP
 844+ ECAC             >
 844+ ECAC             >Current_HP      defl  $ - $E000             // used to set HP once!
 844+ ECAC             >
 844+ ECAC             >//              ______________________________________________________________________
 844+ ECAC             >//              Dictionary part
 844+ ECAC             >
 844+ ECAC             >                org     Dict_Ptr
 844+ 805A             >
 844+ 805A AA 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 844+ 805C             >
 844+ 805C             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 844+ 805C CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 844+ 805F             >
 844+ 805F             >
 844+ 805F             >                endif           ; ok        // for other definitions it "points" the correct handler
 844+ 805F             >                // Use of "; ok" to suppress "warning[fwdref]"
 844+ 805F             >
 844+ 805F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 845+ 805F 45 80                        dw      THEN
 846+ 8061 53 68                        dw      EXIT
 847+ 8063
 848+ 8063              //  ______________________________________________________________________
 849+ 8063              //
 850+ 8063              // else        ( a1 2 -- a2 2 ) \ compile-time
 851+ 8063              //
 852+ 8063                              Colon_Def ELSE, "ELSE", is_immediate
 852+ 8063             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 852+ 8063             >
 852+ 8063             >Dict_Ptr        defl    $
 852+ 8063             >
 852+ 8063             >//              ______________________________________________________________________
 852+ 8063             >//              Heap part
 852+ 8063             >
 852+ 8063             >
 852+ 8063             >                org     (Heap_Ptr & $1FFF) + $E000
 852+ ECAC             >
 852+ ECAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 852+ ECAC             >Latest_Definition defl  Heap_Ptr
 852+ ECAC             >
 852+ ECAC             >                // dummy db directives used to calculate length of namec
 852+ ECAC 45 4C 53 45 >                db      "ELSE"
 852+ ECB0             >len_NFA         defl    $ - temp_NFA
 852+ ECB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 852+ ECAC             >
 852+ ECAC C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 852+ ECAD 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 852+ ECB1             >                org     $-1                 // alter last byte of Name just above to set
 852+ ECB0 C5          >                db      {b $} | END_BIT     // msb as name end
 852+ ECB1             >
 852+ ECB1 A2 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 852+ ECB3             >Prev_Ptr        defl    Heap_Ptr
 852+ ECB3             >
 852+ ECB3             >mirror_Ptr      defl    $
 852+ ECB3             >
 852+ ECB3 65 80       >                dw      Dict_Ptr + 2        // xt
 852+ ECB5             >Heap_Ptr        defl    $ - $E000           // save current HP
 852+ ECB5             >
 852+ ECB5             >Current_HP      defl  $ - $E000             // used to set HP once!
 852+ ECB5             >
 852+ ECB5             >//              ______________________________________________________________________
 852+ ECB5             >//              Dictionary part
 852+ ECB5             >
 852+ ECB5             >                org     Dict_Ptr
 852+ 8063             >
 852+ 8063 B3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 852+ 8065             >
 852+ 8065             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 852+ 8065 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 852+ 8068             >
 852+ 8068             >
 852+ 8068             >                endif           ; ok        // for other definitions it "points" the correct handler
 852+ 8068             >                // Use of "; ok" to suppress "warning[fwdref]"
 852+ 8068             >
 852+ 8068             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 853+ 8068 08 6E                        dw      QCOMP
 854+ 806A A0 6A 2C 6E                  dw      TWO, QPAIRS
 855+ 806E 63 6E E8 63                  dw      COMPILE, BRANCH
 856+ 8072 B7 6B 92 6A                  dw      HERE, ZERO, COMMA
 856+ 8076 CD 6B
 857+ 8078 23 69 A0 6A                  dw      SWAP, TWO, THEN
 857+ 807C 45 80
 858+ 807E A0 6A                        dw      TWO
 859+ 8080 53 68                        dw      EXIT
 860+ 8082
 861+ 8082              //  ______________________________________________________________________
 862+ 8082              //
 863+ 8082              // begin        ( -- a 1 ) \ compile-time
 864+ 8082              // BEGIN ... AGAIN
 865+ 8082              // BEGIN ... f UNTIL
 866+ 8082              // BEGIN ... f WHILE ... REPEAT
 867+ 8082                              Colon_Def BEGIN, "BEGIN", is_immediate
 867+ 8082             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 867+ 8082             >
 867+ 8082             >Dict_Ptr        defl    $
 867+ 8082             >
 867+ 8082             >//              ______________________________________________________________________
 867+ 8082             >//              Heap part
 867+ 8082             >
 867+ 8082             >
 867+ 8082             >                org     (Heap_Ptr & $1FFF) + $E000
 867+ ECB5             >
 867+ ECB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 867+ ECB5             >Latest_Definition defl  Heap_Ptr
 867+ ECB5             >
 867+ ECB5             >                // dummy db directives used to calculate length of namec
 867+ ECB5 42 45 47 49 >                db      "BEGIN"
 867+ ECB9 4E          >
 867+ ECBA             >len_NFA         defl    $ - temp_NFA
 867+ ECBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 867+ ECB5             >
 867+ ECB5 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 867+ ECB6 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 867+ ECBA 4E          >
 867+ ECBB             >                org     $-1                 // alter last byte of Name just above to set
 867+ ECBA CE          >                db      {b $} | END_BIT     // msb as name end
 867+ ECBB             >
 867+ ECBB AC 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 867+ ECBD             >Prev_Ptr        defl    Heap_Ptr
 867+ ECBD             >
 867+ ECBD             >mirror_Ptr      defl    $
 867+ ECBD             >
 867+ ECBD 84 80       >                dw      Dict_Ptr + 2        // xt
 867+ ECBF             >Heap_Ptr        defl    $ - $E000           // save current HP
 867+ ECBF             >
 867+ ECBF             >Current_HP      defl  $ - $E000             // used to set HP once!
 867+ ECBF             >
 867+ ECBF             >//              ______________________________________________________________________
 867+ ECBF             >//              Dictionary part
 867+ ECBF             >
 867+ ECBF             >                org     Dict_Ptr
 867+ 8082             >
 867+ 8082 BD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 867+ 8084             >
 867+ 8084             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 867+ 8084 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 867+ 8087             >
 867+ 8087             >
 867+ 8087             >                endif           ; ok        // for other definitions it "points" the correct handler
 867+ 8087             >                // Use of "; ok" to suppress "warning[fwdref]"
 867+ 8087             >
 867+ 8087             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 868+ 8087 08 6E                        dw      QCOMP
 869+ 8089 B7 6B                        dw      HERE
 870+ 808B A0 6A                        dw      TWO
 871+ 808D 53 68                        dw      EXIT
 872+ 808F
 873+ 808F              //  ______________________________________________________________________
 874+ 808F              //
 875+ 808F              // again        ( a 1 -- ) \ compile-time
 876+ 808F                              Colon_Def AGAIN, "AGAIN", is_immediate
 876+ 808F             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 876+ 808F             >
 876+ 808F             >Dict_Ptr        defl    $
 876+ 808F             >
 876+ 808F             >//              ______________________________________________________________________
 876+ 808F             >//              Heap part
 876+ 808F             >
 876+ 808F             >
 876+ 808F             >                org     (Heap_Ptr & $1FFF) + $E000
 876+ ECBF             >
 876+ ECBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 876+ ECBF             >Latest_Definition defl  Heap_Ptr
 876+ ECBF             >
 876+ ECBF             >                // dummy db directives used to calculate length of namec
 876+ ECBF 41 47 41 49 >                db      "AGAIN"
 876+ ECC3 4E          >
 876+ ECC4             >len_NFA         defl    $ - temp_NFA
 876+ ECC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 876+ ECBF             >
 876+ ECBF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 876+ ECC0 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 876+ ECC4 4E          >
 876+ ECC5             >                org     $-1                 // alter last byte of Name just above to set
 876+ ECC4 CE          >                db      {b $} | END_BIT     // msb as name end
 876+ ECC5             >
 876+ ECC5 B5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 876+ ECC7             >Prev_Ptr        defl    Heap_Ptr
 876+ ECC7             >
 876+ ECC7             >mirror_Ptr      defl    $
 876+ ECC7             >
 876+ ECC7 91 80       >                dw      Dict_Ptr + 2        // xt
 876+ ECC9             >Heap_Ptr        defl    $ - $E000           // save current HP
 876+ ECC9             >
 876+ ECC9             >Current_HP      defl  $ - $E000             // used to set HP once!
 876+ ECC9             >
 876+ ECC9             >//              ______________________________________________________________________
 876+ ECC9             >//              Dictionary part
 876+ ECC9             >
 876+ ECC9             >                org     Dict_Ptr
 876+ 808F             >
 876+ 808F C7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 876+ 8091             >
 876+ 8091             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 876+ 8091 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 876+ 8094             >
 876+ 8094             >
 876+ 8094             >                endif           ; ok        // for other definitions it "points" the correct handler
 876+ 8094             >                // Use of "; ok" to suppress "warning[fwdref]"
 876+ 8094             >
 876+ 8094             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 877+ 8094 08 6E                        dw      QCOMP
 878+ 8096 A0 6A 2C 6E                  dw      TWO, QPAIRS
 879+ 809A 63 6E E8 63                  dw      COMPILE, BRANCH
 880+ 809E 25 80                        dw      BACK
 881+ 80A0 53 68                        dw      EXIT
 882+ 80A2
 883+ 80A2              //  ______________________________________________________________________
 884+ 80A2              //
 885+ 80A2              // until        ( a 1 -- ) \ compile-time
 886+ 80A2                              Colon_Def UNTIL, "UNTIL", is_immediate
 886+ 80A2             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 886+ 80A2             >
 886+ 80A2             >Dict_Ptr        defl    $
 886+ 80A2             >
 886+ 80A2             >//              ______________________________________________________________________
 886+ 80A2             >//              Heap part
 886+ 80A2             >
 886+ 80A2             >
 886+ 80A2             >                org     (Heap_Ptr & $1FFF) + $E000
 886+ ECC9             >
 886+ ECC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 886+ ECC9             >Latest_Definition defl  Heap_Ptr
 886+ ECC9             >
 886+ ECC9             >                // dummy db directives used to calculate length of namec
 886+ ECC9 55 4E 54 49 >                db      "UNTIL"
 886+ ECCD 4C          >
 886+ ECCE             >len_NFA         defl    $ - temp_NFA
 886+ ECCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 886+ ECC9             >
 886+ ECC9 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 886+ ECCA 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 886+ ECCE 4C          >
 886+ ECCF             >                org     $-1                 // alter last byte of Name just above to set
 886+ ECCE CC          >                db      {b $} | END_BIT     // msb as name end
 886+ ECCF             >
 886+ ECCF BF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 886+ ECD1             >Prev_Ptr        defl    Heap_Ptr
 886+ ECD1             >
 886+ ECD1             >mirror_Ptr      defl    $
 886+ ECD1             >
 886+ ECD1 A4 80       >                dw      Dict_Ptr + 2        // xt
 886+ ECD3             >Heap_Ptr        defl    $ - $E000           // save current HP
 886+ ECD3             >
 886+ ECD3             >Current_HP      defl  $ - $E000             // used to set HP once!
 886+ ECD3             >
 886+ ECD3             >//              ______________________________________________________________________
 886+ ECD3             >//              Dictionary part
 886+ ECD3             >
 886+ ECD3             >                org     Dict_Ptr
 886+ 80A2             >
 886+ 80A2 D1 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 886+ 80A4             >
 886+ 80A4             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 886+ 80A4 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 886+ 80A7             >
 886+ 80A7             >
 886+ 80A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 886+ 80A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 886+ 80A7             >
 886+ 80A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 887+ 80A7 08 6E                        dw      QCOMP
 888+ 80A9 A0 6A 2C 6E                  dw      TWO, QPAIRS
 889+ 80AD 63 6E F5 63                  dw      COMPILE, ZBRANCH
 890+ 80B1 25 80                        dw      BACK
 891+ 80B3 53 68                        dw      EXIT
 892+ 80B5
 893+ 80B5              //  ______________________________________________________________________
 894+ 80B5              //
 895+ 80B5              // end          ( a 1 -- ) \ compile-time
 896+ 80B5                              Colon_Def END, "END", is_immediate
 896+ 80B5             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 896+ 80B5             >
 896+ 80B5             >Dict_Ptr        defl    $
 896+ 80B5             >
 896+ 80B5             >//              ______________________________________________________________________
 896+ 80B5             >//              Heap part
 896+ 80B5             >
 896+ 80B5             >
 896+ 80B5             >                org     (Heap_Ptr & $1FFF) + $E000
 896+ ECD3             >
 896+ ECD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 896+ ECD3             >Latest_Definition defl  Heap_Ptr
 896+ ECD3             >
 896+ ECD3             >                // dummy db directives used to calculate length of namec
 896+ ECD3 45 4E 44    >                db      "END"
 896+ ECD6             >len_NFA         defl    $ - temp_NFA
 896+ ECD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 896+ ECD3             >
 896+ ECD3 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 896+ ECD4 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 896+ ECD7             >                org     $-1                 // alter last byte of Name just above to set
 896+ ECD6 C4          >                db      {b $} | END_BIT     // msb as name end
 896+ ECD7             >
 896+ ECD7 C9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 896+ ECD9             >Prev_Ptr        defl    Heap_Ptr
 896+ ECD9             >
 896+ ECD9             >mirror_Ptr      defl    $
 896+ ECD9             >
 896+ ECD9 B7 80       >                dw      Dict_Ptr + 2        // xt
 896+ ECDB             >Heap_Ptr        defl    $ - $E000           // save current HP
 896+ ECDB             >
 896+ ECDB             >Current_HP      defl  $ - $E000             // used to set HP once!
 896+ ECDB             >
 896+ ECDB             >//              ______________________________________________________________________
 896+ ECDB             >//              Dictionary part
 896+ ECDB             >
 896+ ECDB             >                org     Dict_Ptr
 896+ 80B5             >
 896+ 80B5 D9 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 896+ 80B7             >
 896+ 80B7             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 896+ 80B7 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 896+ 80BA             >
 896+ 80BA             >
 896+ 80BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 896+ 80BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 896+ 80BA             >
 896+ 80BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 897+ 80BA A4 80                        dw      UNTIL
 898+ 80BC 53 68                        dw      EXIT
 899+ 80BE
 900+ 80BE              //  ______________________________________________________________________
 901+ 80BE              //
 902+ 80BE              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 903+ 80BE                              Colon_Def WHILE, "WHILE", is_immediate
 903+ 80BE             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 903+ 80BE             >
 903+ 80BE             >Dict_Ptr        defl    $
 903+ 80BE             >
 903+ 80BE             >//              ______________________________________________________________________
 903+ 80BE             >//              Heap part
 903+ 80BE             >
 903+ 80BE             >
 903+ 80BE             >                org     (Heap_Ptr & $1FFF) + $E000
 903+ ECDB             >
 903+ ECDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ ECDB             >Latest_Definition defl  Heap_Ptr
 903+ ECDB             >
 903+ ECDB             >                // dummy db directives used to calculate length of namec
 903+ ECDB 57 48 49 4C >                db      "WHILE"
 903+ ECDF 45          >
 903+ ECE0             >len_NFA         defl    $ - temp_NFA
 903+ ECE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ ECDB             >
 903+ ECDB C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ ECDC 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 903+ ECE0 45          >
 903+ ECE1             >                org     $-1                 // alter last byte of Name just above to set
 903+ ECE0 C5          >                db      {b $} | END_BIT     // msb as name end
 903+ ECE1             >
 903+ ECE1 D3 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 903+ ECE3             >Prev_Ptr        defl    Heap_Ptr
 903+ ECE3             >
 903+ ECE3             >mirror_Ptr      defl    $
 903+ ECE3             >
 903+ ECE3 C0 80       >                dw      Dict_Ptr + 2        // xt
 903+ ECE5             >Heap_Ptr        defl    $ - $E000           // save current HP
 903+ ECE5             >
 903+ ECE5             >Current_HP      defl  $ - $E000             // used to set HP once!
 903+ ECE5             >
 903+ ECE5             >//              ______________________________________________________________________
 903+ ECE5             >//              Dictionary part
 903+ ECE5             >
 903+ ECE5             >                org     Dict_Ptr
 903+ 80BE             >
 903+ 80BE E3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 903+ 80C0             >
 903+ 80C0             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 80C0 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 80C3             >
 903+ 80C3             >
 903+ 80C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 80C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 80C3             >
 903+ 80C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 80C3 32 80                        dw      IF
 905+ 80C5              //              dw      TWO_PLUS // ( that is 4 )
 906+ 80C5 6C 69                        dw      TWO_SWAP
 907+ 80C7 53 68                        dw      EXIT
 908+ 80C9
 909+ 80C9              //  ______________________________________________________________________
 910+ 80C9              //
 911+ 80C9              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 912+ 80C9                              Colon_Def REPEAT, "REPEAT", is_immediate
 912+ 80C9             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 912+ 80C9             >
 912+ 80C9             >Dict_Ptr        defl    $
 912+ 80C9             >
 912+ 80C9             >//              ______________________________________________________________________
 912+ 80C9             >//              Heap part
 912+ 80C9             >
 912+ 80C9             >
 912+ 80C9             >                org     (Heap_Ptr & $1FFF) + $E000
 912+ ECE5             >
 912+ ECE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ ECE5             >Latest_Definition defl  Heap_Ptr
 912+ ECE5             >
 912+ ECE5             >                // dummy db directives used to calculate length of namec
 912+ ECE5 52 45 50 45 >                db      "REPEAT"
 912+ ECE9 41 54       >
 912+ ECEB             >len_NFA         defl    $ - temp_NFA
 912+ ECEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ ECE5             >
 912+ ECE5 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ ECE6 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 912+ ECEA 41 54       >
 912+ ECEC             >                org     $-1                 // alter last byte of Name just above to set
 912+ ECEB D4          >                db      {b $} | END_BIT     // msb as name end
 912+ ECEC             >
 912+ ECEC DB 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 912+ ECEE             >Prev_Ptr        defl    Heap_Ptr
 912+ ECEE             >
 912+ ECEE             >mirror_Ptr      defl    $
 912+ ECEE             >
 912+ ECEE CB 80       >                dw      Dict_Ptr + 2        // xt
 912+ ECF0             >Heap_Ptr        defl    $ - $E000           // save current HP
 912+ ECF0             >
 912+ ECF0             >Current_HP      defl  $ - $E000             // used to set HP once!
 912+ ECF0             >
 912+ ECF0             >//              ______________________________________________________________________
 912+ ECF0             >//              Dictionary part
 912+ ECF0             >
 912+ ECF0             >                org     Dict_Ptr
 912+ 80C9             >
 912+ 80C9 EE 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 912+ 80CB             >
 912+ 80CB             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 80CB CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 80CE             >
 912+ 80CE             >
 912+ 80CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 80CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 80CE             >
 912+ 80CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 80CE 91 80                        dw      AGAIN
 914+ 80D0              //              dw      TWO_MINUS
 915+ 80D0 45 80                        dw      THEN
 916+ 80D2 53 68                        dw      EXIT
 917+ 80D4
 918+ 80D4              //  ______________________________________________________________________
 919+ 80D4              //
 920+ 80D4              // ?do-
 921+ 80D4              // special version of "BACK" used by ?DO and LOOP
 922+ 80D4                              Colon_Def C_DO_BACK, "?DO-", is_normal
 922+ 80D4             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 922+ 80D4             >
 922+ 80D4             >Dict_Ptr        defl    $
 922+ 80D4             >
 922+ 80D4             >//              ______________________________________________________________________
 922+ 80D4             >//              Heap part
 922+ 80D4             >
 922+ 80D4             >
 922+ 80D4             >                org     (Heap_Ptr & $1FFF) + $E000
 922+ ECF0             >
 922+ ECF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 922+ ECF0             >Latest_Definition defl  Heap_Ptr
 922+ ECF0             >
 922+ ECF0             >                // dummy db directives used to calculate length of namec
 922+ ECF0 3F 44 4F 2D >                db      "?DO-"
 922+ ECF4             >len_NFA         defl    $ - temp_NFA
 922+ ECF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 922+ ECF0             >
 922+ ECF0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 922+ ECF1 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 922+ ECF5             >                org     $-1                 // alter last byte of Name just above to set
 922+ ECF4 AD          >                db      {b $} | END_BIT     // msb as name end
 922+ ECF5             >
 922+ ECF5 E5 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 922+ ECF7             >Prev_Ptr        defl    Heap_Ptr
 922+ ECF7             >
 922+ ECF7             >mirror_Ptr      defl    $
 922+ ECF7             >
 922+ ECF7 D6 80       >                dw      Dict_Ptr + 2        // xt
 922+ ECF9             >Heap_Ptr        defl    $ - $E000           // save current HP
 922+ ECF9             >
 922+ ECF9             >Current_HP      defl  $ - $E000             // used to set HP once!
 922+ ECF9             >
 922+ ECF9             >//              ______________________________________________________________________
 922+ ECF9             >//              Dictionary part
 922+ ECF9             >
 922+ ECF9             >                org     Dict_Ptr
 922+ 80D4             >
 922+ 80D4 F7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 922+ 80D6             >
 922+ 80D6             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 922+ 80D6 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 922+ 80D9             >
 922+ 80D9             >
 922+ 80D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 922+ 80D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 922+ 80D9             >
 922+ 80D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 923+ 80D9 25 80                        dw      BACK
 924+ 80DB              CDoBack_Begin:
 925+ 80DB 3A 68 75 6B                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 925+ 80DF 9B 69 F6 6B
 926+ 80E3 F5 63                        dw      ZBRANCH
 927+ 80E5 0A 00                        dw      CDoBack_While - $
 928+ 80E7 CC 68 45 80                  dw          TWO_PLUS, THEN
 929+ 80EB E8 63                        dw      BRANCH
 930+ 80ED EE FF                        dw      CDoBack_Begin - $
 931+ 80EF              CDoBack_While:
 932+ 80EF 3B 6E 75 6B                  dw      QCSP, CSP, STORE
 932+ 80F3 A5 69
 933+ 80F5 53 68                        dw      EXIT
 934+ 80F7
 935+ 80F7              //  ______________________________________________________________________
 936+ 80F7              //
 937+ 80F7              // do
 938+ 80F7              // DO  ... LOOP
 939+ 80F7              // DO  ... n +LOOP
 940+ 80F7              // ?DO ... LOOP
 941+ 80F7              // ?DO ... n +LOOP
 942+ 80F7                              Colon_Def DO, "DO", is_immediate
 942+ 80F7             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 942+ 80F7             >
 942+ 80F7             >Dict_Ptr        defl    $
 942+ 80F7             >
 942+ 80F7             >//              ______________________________________________________________________
 942+ 80F7             >//              Heap part
 942+ 80F7             >
 942+ 80F7             >
 942+ 80F7             >                org     (Heap_Ptr & $1FFF) + $E000
 942+ ECF9             >
 942+ ECF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ ECF9             >Latest_Definition defl  Heap_Ptr
 942+ ECF9             >
 942+ ECF9             >                // dummy db directives used to calculate length of namec
 942+ ECF9 44 4F       >                db      "DO"
 942+ ECFB             >len_NFA         defl    $ - temp_NFA
 942+ ECFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ ECF9             >
 942+ ECF9 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ ECFA 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 942+ ECFC             >                org     $-1                 // alter last byte of Name just above to set
 942+ ECFB CF          >                db      {b $} | END_BIT     // msb as name end
 942+ ECFC             >
 942+ ECFC F0 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 942+ ECFE             >Prev_Ptr        defl    Heap_Ptr
 942+ ECFE             >
 942+ ECFE             >mirror_Ptr      defl    $
 942+ ECFE             >
 942+ ECFE F9 80       >                dw      Dict_Ptr + 2        // xt
 942+ ED00             >Heap_Ptr        defl    $ - $E000           // save current HP
 942+ ED00             >
 942+ ED00             >Current_HP      defl  $ - $E000             // used to set HP once!
 942+ ED00             >
 942+ ED00             >//              ______________________________________________________________________
 942+ ED00             >//              Dictionary part
 942+ ED00             >
 942+ ED00             >                org     Dict_Ptr
 942+ 80F7             >
 942+ 80F7 FE 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 942+ 80F9             >
 942+ 80F9             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 80F9 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 80FC             >
 942+ 80FC             >
 942+ 80FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 80FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 80FC             >
 942+ 80FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 80FC 63 6E 34 64                  dw      COMPILE, C_DO
 944+ 8100 75 6B 9B 69                  dw      CSP, FETCH, STORE_CSP
 944+ 8104 E6 6D
 945+ 8106 B7 6B A7 6A                  dw      HERE, THREE
 946+ 810A 53 68                        dw      EXIT
 947+ 810C
 948+ 810C              //  ______________________________________________________________________
 949+ 810C              //
 950+ 810C              // loop
 951+ 810C                              Colon_Def LOOP, "LOOP", is_immediate
 951+ 810C             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 951+ 810C             >
 951+ 810C             >Dict_Ptr        defl    $
 951+ 810C             >
 951+ 810C             >//              ______________________________________________________________________
 951+ 810C             >//              Heap part
 951+ 810C             >
 951+ 810C             >
 951+ 810C             >                org     (Heap_Ptr & $1FFF) + $E000
 951+ ED00             >
 951+ ED00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 951+ ED00             >Latest_Definition defl  Heap_Ptr
 951+ ED00             >
 951+ ED00             >                // dummy db directives used to calculate length of namec
 951+ ED00 4C 4F 4F 50 >                db      "LOOP"
 951+ ED04             >len_NFA         defl    $ - temp_NFA
 951+ ED04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 951+ ED00             >
 951+ ED00 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 951+ ED01 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 951+ ED05             >                org     $-1                 // alter last byte of Name just above to set
 951+ ED04 D0          >                db      {b $} | END_BIT     // msb as name end
 951+ ED05             >
 951+ ED05 F9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 951+ ED07             >Prev_Ptr        defl    Heap_Ptr
 951+ ED07             >
 951+ ED07             >mirror_Ptr      defl    $
 951+ ED07             >
 951+ ED07 0E 81       >                dw      Dict_Ptr + 2        // xt
 951+ ED09             >Heap_Ptr        defl    $ - $E000           // save current HP
 951+ ED09             >
 951+ ED09             >Current_HP      defl  $ - $E000             // used to set HP once!
 951+ ED09             >
 951+ ED09             >//              ______________________________________________________________________
 951+ ED09             >//              Dictionary part
 951+ ED09             >
 951+ ED09             >                org     Dict_Ptr
 951+ 810C             >
 951+ 810C 07 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 951+ 810E             >
 951+ 810E             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 951+ 810E CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 951+ 8111             >
 951+ 8111             >
 951+ 8111             >                endif           ; ok        // for other definitions it "points" the correct handler
 951+ 8111             >                // Use of "; ok" to suppress "warning[fwdref]"
 951+ 8111             >
 951+ 8111             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 952+ 8111 A7 6A 2C 6E                  dw      THREE, QPAIRS
 953+ 8115 63 6E E0 63                  dw      COMPILE, C_LOOP
 954+ 8119 D6 80                        dw      C_DO_BACK
 955+ 811B 53 68                        dw      EXIT
 956+ 811D
 957+ 811D              //  ______________________________________________________________________
 958+ 811D              //
 959+ 811D              // +loop
 960+ 811D                              Colon_Def PLOOP, "+LOOP", is_immediate
 960+ 811D             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 960+ 811D             >
 960+ 811D             >Dict_Ptr        defl    $
 960+ 811D             >
 960+ 811D             >//              ______________________________________________________________________
 960+ 811D             >//              Heap part
 960+ 811D             >
 960+ 811D             >
 960+ 811D             >                org     (Heap_Ptr & $1FFF) + $E000
 960+ ED09             >
 960+ ED09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 960+ ED09             >Latest_Definition defl  Heap_Ptr
 960+ ED09             >
 960+ ED09             >                // dummy db directives used to calculate length of namec
 960+ ED09 2B 4C 4F 4F >                db      "+LOOP"
 960+ ED0D 50          >
 960+ ED0E             >len_NFA         defl    $ - temp_NFA
 960+ ED0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 960+ ED09             >
 960+ ED09 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 960+ ED0A 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 960+ ED0E 50          >
 960+ ED0F             >                org     $-1                 // alter last byte of Name just above to set
 960+ ED0E D0          >                db      {b $} | END_BIT     // msb as name end
 960+ ED0F             >
 960+ ED0F 00 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 960+ ED11             >Prev_Ptr        defl    Heap_Ptr
 960+ ED11             >
 960+ ED11             >mirror_Ptr      defl    $
 960+ ED11             >
 960+ ED11 1F 81       >                dw      Dict_Ptr + 2        // xt
 960+ ED13             >Heap_Ptr        defl    $ - $E000           // save current HP
 960+ ED13             >
 960+ ED13             >Current_HP      defl  $ - $E000             // used to set HP once!
 960+ ED13             >
 960+ ED13             >//              ______________________________________________________________________
 960+ ED13             >//              Dictionary part
 960+ ED13             >
 960+ ED13             >                org     Dict_Ptr
 960+ 811D             >
 960+ 811D 11 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 960+ 811F             >
 960+ 811F             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 960+ 811F CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 960+ 8122             >
 960+ 8122             >
 960+ 8122             >                endif           ; ok        // for other definitions it "points" the correct handler
 960+ 8122             >                // Use of "; ok" to suppress "warning[fwdref]"
 960+ 8122             >
 960+ 8122             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 961+ 8122 A7 6A 2C 6E                  dw      THREE, QPAIRS
 962+ 8126 63 6E B1 63                  dw      COMPILE, C_PLOOP
 963+ 812A D6 80                        dw      C_DO_BACK
 964+ 812C 53 68                        dw      EXIT
 965+ 812E
 966+ 812E              //  ______________________________________________________________________
 967+ 812E              //
 968+ 812E              // ?do
 969+ 812E                              Colon_Def QDO, "?DO", is_immediate
 969+ 812E             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 969+ 812E             >
 969+ 812E             >Dict_Ptr        defl    $
 969+ 812E             >
 969+ 812E             >//              ______________________________________________________________________
 969+ 812E             >//              Heap part
 969+ 812E             >
 969+ 812E             >
 969+ 812E             >                org     (Heap_Ptr & $1FFF) + $E000
 969+ ED13             >
 969+ ED13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ ED13             >Latest_Definition defl  Heap_Ptr
 969+ ED13             >
 969+ ED13             >                // dummy db directives used to calculate length of namec
 969+ ED13 3F 44 4F    >                db      "?DO"
 969+ ED16             >len_NFA         defl    $ - temp_NFA
 969+ ED16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ ED13             >
 969+ ED13 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ ED14 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 969+ ED17             >                org     $-1                 // alter last byte of Name just above to set
 969+ ED16 CF          >                db      {b $} | END_BIT     // msb as name end
 969+ ED17             >
 969+ ED17 09 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 969+ ED19             >Prev_Ptr        defl    Heap_Ptr
 969+ ED19             >
 969+ ED19             >mirror_Ptr      defl    $
 969+ ED19             >
 969+ ED19 30 81       >                dw      Dict_Ptr + 2        // xt
 969+ ED1B             >Heap_Ptr        defl    $ - $E000           // save current HP
 969+ ED1B             >
 969+ ED1B             >Current_HP      defl  $ - $E000             // used to set HP once!
 969+ ED1B             >
 969+ ED1B             >//              ______________________________________________________________________
 969+ ED1B             >//              Dictionary part
 969+ ED1B             >
 969+ ED1B             >                org     Dict_Ptr
 969+ 812E             >
 969+ 812E 19 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 969+ 8130             >
 969+ 8130             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 8130 CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 8133             >
 969+ 8133             >
 969+ 8133             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 8133             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 8133             >
 969+ 8133             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 8133 63 6E 0C 64                  dw      COMPILE, C_Q_DO
 971+ 8137 75 6B 9B 69                  dw      CSP, FETCH, STORE_CSP
 971+ 813B E6 6D
 972+ 813D B7 6B 92 6A                  dw      HERE, ZERO, COMMA, ZERO
 972+ 8141 CD 6B 92 6A
 973+ 8145 B7 6B A7 6A                  dw      HERE, THREE
 974+ 8149 53 68                        dw      EXIT
 975+ 814B
 976+ 814B              //  ______________________________________________________________________
 977+ 814B              //
 978+ 814B              // \
 979+ 814B                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 979+ 814B             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 979+ 814B             >
 979+ 814B             >Dict_Ptr        defl    $
 979+ 814B             >
 979+ 814B             >//              ______________________________________________________________________
 979+ 814B             >//              Heap part
 979+ 814B             >
 979+ 814B             >
 979+ 814B             >                org     (Heap_Ptr & $1FFF) + $E000
 979+ ED1B             >
 979+ ED1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 979+ ED1B             >Latest_Definition defl  Heap_Ptr
 979+ ED1B             >
 979+ ED1B             >                // dummy db directives used to calculate length of namec
 979+ ED1B 5C          >                db      "\\"
 979+ ED1C             >len_NFA         defl    $ - temp_NFA
 979+ ED1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 979+ ED1B             >
 979+ ED1B C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 979+ ED1C 5C          >                db      "\\"               // name string in 7-bit ascii, but
 979+ ED1D             >                org     $-1                 // alter last byte of Name just above to set
 979+ ED1C DC          >                db      {b $} | END_BIT     // msb as name end
 979+ ED1D             >
 979+ ED1D 13 0D       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 979+ ED1F             >Prev_Ptr        defl    Heap_Ptr
 979+ ED1F             >
 979+ ED1F             >mirror_Ptr      defl    $
 979+ ED1F             >
 979+ ED1F 4D 81       >                dw      Dict_Ptr + 2        // xt
 979+ ED21             >Heap_Ptr        defl    $ - $E000           // save current HP
 979+ ED21             >
 979+ ED21             >Current_HP      defl  $ - $E000             // used to set HP once!
 979+ ED21             >
 979+ ED21             >//              ______________________________________________________________________
 979+ ED21             >//              Dictionary part
 979+ ED21             >
 979+ ED21             >                org     Dict_Ptr
 979+ 814B             >
 979+ 814B 1F 0D       >                dw      mirror_Ptr - $E000 + Heap_offset
 979+ 814D             >
 979+ 814D             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 979+ 814D CD 3D 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 979+ 8150             >
 979+ 8150             >
 979+ 8150             >                endif           ; ok        // for other definitions it "points" the correct handler
 979+ 8150             >                // Use of "; ok" to suppress "warning[fwdref]"
 979+ 8150             >
 979+ 8150             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 980+ 8150 33 6B 9B 69                  dw      BLK, FETCH
 981+ 8154 F5 63                        dw      ZBRANCH
 982+ 8156 30 00                        dw      Backslash_Else_1 - $
 983+ 8158 33 6B 9B 69                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 983+ 815C 99 6A 30 6C
 984+ 8160 F5 63                        dw          ZBRANCH
 985+ 8162 18 00                        dw          Backslash_Else_2 - $
 986+ 8164 39 6B 9B 69                  dw              TO_IN, FETCH, CL, MOD, CL
 986+ 8168 BC 6A 55 77
 986+ 816C BC 6A
 987+ 816E 23 69 F6 6B                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 987+ 8172 39 6B 83 69
 988+ 8176 E8 63                        dw          BRANCH
 989+ 8178 0A 00                        dw          Backslash_Endif_2 - $
 990+ 817A              Backslash_Else_2:
 991+ 817A C3 6A D8 68                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 991+ 817E 39 6B A5 69
 992+ 8182              Backslash_Endif_2:
 993+ 8182 E8 63                        dw      BRANCH
 994+ 8184 10 00                        dw      Backslash_Endif_1 - $
 995+ 8186              Backslash_Else_1:
 996+ 8186 92 6A F7 6A                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
 996+ 818A 9B 69 39 6B
 996+ 818E 9B 69 A5 68
 996+ 8192 A5 69
 997+ 8194              Backslash_Endif_1:
 998+ 8194 53 68                        dw      EXIT
 999+ 8196
1000+ 8196              Fence_Word:
1001+ 8196              //  ______________________________________________________________________
1002+ 8196              //
1003+ 8196
1004+ 8196 00           Here_Dictionary db      0
1005+ 8197
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
 125  8197
 126  8197              // now we save the compiled file so we can either run it or debug it
 127  8197                              SAVENEX OPEN "output/main.nex", ORIGIN
 128  8197                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 129  8197                              SAVENEX CFG  0
 130  8197                              SAVENEX BANK 2, 0
 131  8197                              SAVENEX AUTO
 132  8197                              SAVENEX CLOSE
 133  8197
 134  8197              //              PAGE 7 ;set 7 page to current slot
 135  8197              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 136  8197              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 137  8197
 138  8197                              SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, 9999
 139  8197                              SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 140  8197
 141  8197                              SAVEBIN "output/forth17d.bin", ORIGIN, 9999
 142  8197                              SAVEBIN "output/ram7.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 143  8197
 144  8197                              // To load on ZX Spectrum Next you have to type
 145  8197                              //      LOAD "ram7.bin" BANK 16
 146  8197                              //      LOAD "forth17d.bin" CODE
 147  8197
 148  8197                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
